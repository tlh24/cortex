[0] c:0 is: decode:move 4 , 3 * - 3 
[1] c:0 is:move 4 , 0  decode:move 4 , 4 / 3 
[2] c:2 is:move 4 , 2  decode:move 4 , 2 
[3] c:3 is:move 4 , 3  decode:move 4 , 3 
[4] c:1 is:move 4 , 4  decode:move 4 , 3 
[5] c:0 is:move 4 , 5  decode:move 4 , 2 
[6] c:0 is:move 6 , 4  decode:move 4 , 4 
[7] c:0 is:move 4 , 6  decode:move 4 , * 3 + , 0 3 
[8] c:0 is:move 4 , 7  decode:move 4 , 3 * 3 
[9] c:0 is:move 8 , 4  decode:move 4 * 2 , 2 / 3 
[10] c:0 is:move 9 , 3  decode:move 3 * 3 , 2 3 
[11] c:0 is:move 6 , 6  decode:move 3 * * 3 * 3 3 
[12] c:0 is:move 9 , 7  decode:move 4 * 2 , 2 / 3 
[13] c:0 is:move ua , 0  decode:move ua , 3 
[14] c:2 is:move ua , 2  decode:move ua , 2 
[15] c:3 is:move ua , 3  decode:move ua , 3 
[16] c:3 is:move 4 , ul  decode:move 4 , ul 
[17] c:3 is:move ua , 5  decode:move ua , 5 
[18] c:0 is:move ua , 8  decode:move ua , ua * ua 
[19] c:3 is:move ua , ul  decode:move ua , ul 
[20] c:0 is:move 4 , 0 - 2  decode:move 4 , 4 / 3 
[21] c:1 is:move 4 , 0 - 3  decode:move 4 , 4 / 3 
[22] c:0 is:move 4 , 0 - 4  decode:move 4 , 4 * - 3 
[23] c:0 is:move 4 , 2 - 3  decode:move 4 , - 3 , 2 - 3 
[24] c:2 is:move 4 * 2 , 2  decode:move 4 * 2 , 2 
[25] c:0 is:move 4 + 3 , 3  decode:move 3 * 3 , 3 
[26] c:3 is:move 4 + 3 , 4  decode:move 4 + 3 , 4 
[27] c:0 is:move 6 , 0 - 4  decode:move 4 , 4 * 4 
[28] c:0 is:move 4 , 4 + 4  decode:( move ul , 4 ; move 4 , ua * ua ) 
[29] c:0 is:move 4 , 3 / 2  decode:move 4 , 4 / 3 
[30] c:0 is:move 3 * 3 , 4  decode:move 4 * 2 , 2 / 3 
[31] c:3 is:move 4 , 3 * 3  decode:move 4 , 3 * 3 
[32] c:3 is:move 4 , 2 / 4  decode:move 4 , 2 / 4 
[33] c:3 is:move 4 , 4 * 3  decode:move 4 , 4 * 3 
[34] c:1 is:move 4 , 4 / 3  decode:move 4 , 4 * 3 
[35] c:0 is:move 4 , 4 * 4  decode:move 4 , 4 / 4 
[36] c:0 is:move 3 * 3 , 6  decode:move 3 * 3 , 3 * 3 
[37] c:0 is:move 6 , 4 * 4  decode:move ua , 5 / 4 
[38] c:0 is:move ua , 0 - 2  decode:move 4 , 0 - 2 
[39] c:3 is:move ua , 0 - 3  decode:move ua , 0 - 3 
[40] c:0 is:move 3 + 2 , ul  decode:move 4 + 3 , ul 
[41] c:0 is:move ua , 2 - 3  decode:move 4 + 3 , - 3 
[42] c:0 is:move ua , 4 + 3  decode:move 4 , 3 / 3 
[43] c:3 is:move ua , 3 * 3  decode:move ua , 3 * 3 
[44] c:0 is:move ua + 4 , 4  decode:move 4 * 2 , 4 
[45] c:1 is:move ua , 2 / 3  decode:move ua , 3 / 3 
[46] c:0 is:move ua , 3 / 2  decode:move ua , 3 / 3 
[47] c:2 is:move ua , 4 * 3  decode:move ua , 4 * 3 
[48] c:3 is:move ua , 2 / 4  decode:move ua , 2 / 4 
[49] c:0 is:move 3 * 3 , ul  decode:( move 3 , ul ; move ua , ul / 3 ) 
[50] c:3 is:move ua , 4 / 3  decode:move ua , 4 / 3 
[51] c:0 is:move ua , 3 / 4  decode:move ua , 4 
[52] c:0 is:move ua , 2 / 8  decode:move ua , 2 / ua 
[53] c:0 is:move ua , 2 / ua  decode:move ua , 5 / 4 
[54] c:0 is:move ua , ua / 3  decode:move 4 , 3 - 3 
[55] c:0 is:move ua , ua / 4  decode:move ua , 3 / 3 
[56] c:0 is:move ua , 4 / ua  decode:move ua , 2 / 3 
[57] c:0 is:move ua , ua * ua  decode:move ua , 5 
[58] c:0 is:move 3 * 3 , 0 - 2  decode:move 4 * 2 , 0 / 2 
[59] c:0 is:move 4 * 2 , 0 - 3  decode:move 3 * 3 , 0 / ; move 3 , 3 0 
[60] c:0 is:move 4 * 2 , 0 - 4  decode:move 4 * 2 , 2 - 3 
[61] c:0 is:move 4 * 2 , 3 + 2  decode:move 4 * 2 , 2 + 2 
[62] c:0 is:move 3 * 3 , 2 - 3  decode:move 4 * 3 , 3 / 3 
[63] c:0 is:move 4 * 2 , 4 + 3  decode:move 4 * 2 , 2 / 3 
[64] c:0 is:move 3 * 3 , 2 / 3  decode:move ua , 2 / 3 
[65] c:0 is:move 4 * 2 , 2 / 3  decode:move ua , 2 / 3 
[66] c:0 is:move 4 + 3 , 4 / 3  decode:move ua , 4 / 3 
[67] c:0 is:move 4 * 2 , 4 * 3  decode:move 4 * 3 , 3 * 3 
[68] c:0 is:move 4 + 4 , 2 / 4  decode:move ua , 2 / 2 
[69] c:0 is:move 3 * 3 , 4 * 4  decode:move 3 * 3 , 0 , 4 0 - 0 
[70] c:0 is:move 4 * 2 , 3 / 4  decode:( move 4 , 4 ; move 3 , 4 + 2 ) 
[71] c:0 is:move 4 * 3 , 3 / 4  decode:( move 4 , 3 * move ua , 2 + 4 ) 
[72] c:1 is:move 3 * 3 , 2 / ua  decode:move 3 * 3 , ua / ua 
[73] c:0 is:move 4 + 3 , ua / 3  decode:move 4 + 3 , / 3 
[74] c:0 is:move 4 * 2 , ua / 3  decode:move 4 * 3 , 3 / 3 
[75] c:0 is:move 3 * 3 , ua / 3  decode:move 4 * 3 , / 4 
[76] c:0 is:move 4 + 4 , 4 / ua  decode:move ua , 2 / 3 
[77] c:1 is:loop 0 , 2 , move 2 , 2  decode:loop 0 , 3 , move 2 , 2 
[78] c:3 is:loop 0 , 3 , move 2 , 2  decode:loop 0 , 3 , move 2 , 2 
[79] c:0 is:loop 0 , 2 , move 3 , 2  decode:( move 3 , 2 ; move 3 , 2 ) 
[80] c:0 is:loop 0 , 2 , move 4 , 2  decode:( move 4 , 2 ; move 4 , 2 ) 
[81] c:3 is:loop 0 , 3 , move 3 , 2  decode:loop 0 , 3 , move 3 , 2 
[82] c:3 is:loop 0 , 2 , move 3 , 3  decode:loop 0 , 2 , move 3 , 3 
[83] c:0 is:loop 0 , 2 , move 5 , 2  decode:( move 5 , 2 ; move 5 , 2 ) 
[84] c:3 is:loop 0 , 3 , move 4 , 2  decode:loop 0 , 3 , move 4 , 2 
[85] c:3 is:loop 0 , 3 , move 3 , 3  decode:loop 0 , 3 , move 3 , 3 
[86] c:3 is:loop 0 , 2 , move 3 , 4  decode:loop 0 , 2 , move 3 , 4 
[87] c:0 is:loop 0 , 2 , move 4 , 3  decode:loop 0 , 3 , move 3 , 3 
[88] c:3 is:loop 0 , 2 , move 2 , 6  decode:loop 0 , 2 , move 2 , 6 
[89] c:0 is:loop 0 , 2 , move 3 , 5  decode:( move 3 , 5 ; move 3 , 5 ) 
[90] c:0 is:loop 0 , 3 , move 5 , 2  decode:loop 0 , 3 , move v0 - ua , 2 
[91] c:0 is:loop 0 , 4 , move 3 , 3  decode:loop 0 , 3 , move 3 , 3 
[92] c:0 is:loop 0 , 5 , move 3 , 2  decode:loop 0 , 4 , move 3 - ua , 3 * v0 
[93] c:0 is:loop 0 , 2 , move 4 , 4  decode:( move 4 , 4 ; move 4 , 4 ) 
[94] c:0 is:loop 0 , 3 , move 4 , 3  decode:loop 0 , 3 , move 3 - ua , 3 
[95] c:3 is:loop 0 , 3 , move 3 , 4  decode:loop 0 , 3 , move 3 , 4 
[96] c:0 is:loop 0 , 6 , move 2 , 2  decode:loop 0 , 4 , move ua - 4 , 7 - v0 
[97] c:3 is:loop 0 , 3 , move 2 , 5  decode:loop 0 , 3 , move 2 , 5 
[98] c:3 is:loop 0 , 4 , move 4 , 2  decode:loop 0 , 4 , move 4 , 2 
[99] c:1 is:loop 0 , 3 , move 2 , 6  decode:( move 3 , 6 ; move 3 , 4 * 3 ) 
[100] c:0 is:loop 0 , 5 , move 2 , 4  decode:0 - loop 0 , 4 , move ua - 4 , 4 0 
[101] c:3 is:loop 0 , 2 , move 2 , 7  decode:loop 0 , 2 , move 2 , 7 
[102] c:0 is:loop 0 , 4 , move 2 , 5  decode:loop 0 , 3 , move 4 - ua , 5 
[103] c:3 is:loop 0 , 4 , move 5 , 2  decode:loop 0 , 4 , move 5 , 2 
[104] c:3 is:loop 0 , 3 , move 4 , 4  decode:loop 0 , 3 , move 4 , 4 
[105] c:0 is:loop 0 , 5 , move 4 , 2  decode:loop 0 , 4 , move ua - 2 , 3 * 3 
[106] c:0 is:loop 0 , 6 , move 3 , 2  decode:loop 0 , 4 , move 3 - ua , 5 * 3 
[107] c:0 is:loop 0 , 2 , move 3 , 6  decode:( move 4 , 6 ; move 2 , ul ) 
[108] c:0 is:loop 0 , 2 , move 4 , 5  decode:( move 4 , 5 ; move 4 , 5 ) 
[109] c:3 is:loop 0 , 4 , move 4 , 3  decode:loop 0 , 4 , move 4 , 3 
[110] c:3 is:loop 0 , 3 , move 3 , 5  decode:loop 0 , 3 , move 3 , 5 
[111] c:3 is:loop 0 , 4 , move 3 , 4  decode:loop 0 , 4 , move 3 , 4 
[112] c:3 is:loop 0 , 4 , move 3 , 5  decode:loop 0 , 4 , move 3 , 5 
[113] c:0 is:loop 0 , 3 , move 3 , 6  decode:( move 4 , 4 * 3 ; move 4 , 7 ) 
[114] c:0 is:loop 0 , 5 , move 4 , 3  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[115] c:0 is:loop 0 , 5 , move 3 , 4  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[116] c:0 is:loop 0 , 6 , move 3 , 3  decode:loop 0 , 4 , move 3 , 3 
[117] c:0 is:loop 0 , 2 , move 4 , 6  decode:( move 4 , 6 ; move 4 , 6 ) 
[118] c:0 is:loop 0 , 5 , move 5 , 2  decode:loop 0 , 4 , move 5 , 2 
[119] c:3 is:loop 0 , 4 , move 4 , 4  decode:loop 0 , 4 , move 4 , 4 
[120] c:3 is:loop 0 , 4 , move 2 , 6  decode:loop 0 , 4 , move 2 , 6 
[121] c:0 is:loop 0 , 6 , move 4 , 2  decode:loop 0 , 4 , move 5 , 3 * 8 
[122] c:3 is:loop 0 , 3 , move 2 , 7  decode:loop 0 , 3 , move 2 , 7 
[123] c:3 is:loop 0 , 3 , move 5 , 4  decode:loop 0 , 3 , move 5 , 4 
[124] c:3 is:loop 0 , 2 , move 5 , 5  decode:loop 0 , 2 , move 5 , 5 
[125] c:3 is:loop 0 , 2 , move 2 , 8  decode:loop 0 , 2 , move 2 , 8 
[126] c:0 is:loop 0 , 3 , move 4 , 5  decode:loop 0 , 3 , move 3 + v0 , 5 
[127] c:0 is:loop 0 , 2 , move 8 , 3  decode:loop 0 , 3 , move v0 - 8 , 3 
[128] c:0 is:loop 0 , 4 , move 4 , 5  decode:loop 0 , 4 , move 3 - ua , 5 
[129] c:0 is:loop 0 , 4 , move 6 , 3  decode:loop 0 , 4 , move 4 + v0 , 3 
[130] c:3 is:loop 0 , 4 , move 5 , 4  decode:loop 0 , 4 , move 5 , 4 
[131] c:0 is:loop 0 , 2 , move 4 , 7  decode:( move 4 , 7 ; move 4 , 7 ) 
[132] c:0 is:loop 0 , 5 , move 4 , 4  decode:loop 0 , 4 , move 2 - ua , 0 - 4 
[133] c:0 is:loop 0 , 6 , move 4 , 3  decode:loop 0 , 4 , move 3 + v0 , 3 
[134] c:3 is:loop 0 , 4 , move 2 , 7  decode:loop 0 , 4 , move 2 , 7 
[135] c:0 is:loop 0 , 3 , move 8 , 2  decode:loop 0 , 3 , move ua + 2 , 2 
[136] c:0 is:loop 0 , 4 , move 3 , 6  decode:loop 0 , 3 , move 4 , 6 
[137] c:0 is:loop 0 , 7 , move 2 , 4  decode:0 loop 0 , 4 , move 3 , 9 
[138] c:0 is:loop 0 , 7 , move 3 , 3  decode:0 0 loop 0 , 4 , move 3 , 0 - v0 
[139] c:3 is:loop 0 , 3 , move 3 , 7  decode:loop 0 , 3 , move 3 , 7 
[140] c:0 is:loop 0 , 3 , move 5 , 5  decode:loop 0 , 4 , move 3 - ua , 5 
[141] c:0 is:loop 0 , 7 , move 4 , 3  decode:loop 0 , 4 , move 3 , 1 - v0 - 3 
[142] c:3 is:loop 0 , 4 , move 5 , 5  decode:loop 0 , 4 , move 5 , 5 
[143] c:0 is:loop 0 , 4 , move 8 , 2  decode:loop 0 , 4 , move ua + 2 , 2 
[144] c:3 is:loop 0 , 2 , move 4 , 8  decode:loop 0 , 2 , move 4 , 8 
[145] c:0 is:loop 0 , 7 , move 3 , 4  decode:loop 0 , 4 , move 4 , 0 - 4 
[146] c:0 is:loop 0 , 3 , move 7 , 4  decode:loop 0 , 3 , move ua + v0 , 4 
[147] c:3 is:loop 0 , 3 , move 3 , 8  decode:loop 0 , 3 , move 3 , 8 
[148] c:3 is:loop 0 , 4 , move 3 , 7  decode:loop 0 , 4 , move 3 , 7 
[149] c:0 is:loop 0 , 2 , move 3 , 9  decode:( move 3 , 9 ; move 3 , 9 ) 
[150] c:0 is:loop 0 , 3 , move 8 , 3  decode:loop 0 , 3 , move v0 + 3 , 3 
[151] c:0 is:loop 0 , 7 , move 4 , 4  decode:loop 0 , 4 , move ua - ul , 0 - 9 
[152] c:3 is:loop 0 , 4 , move 3 , 8  decode:loop 0 , 4 , move 3 , 8 
[153] c:3 is:loop 0 , 3 , move 4 , 8  decode:loop 0 , 3 , move 4 , 8 
[154] c:3 is:loop 0 , 2 , move 5 , 8  decode:loop 0 , 2 , move 5 , 8 
[155] c:3 is:loop 0 , 2 , move 4 , 9  decode:loop 0 , 2 , move 4 , 9 
[156] c:3 is:loop 0 , 4 , move 8 , 3  decode:loop 0 , 4 , move 8 , 3 
[157] c:3 is:loop 0 , 3 , move 8 , 4  decode:loop 0 , 3 , move 8 , 4 
[158] c:0 is:loop 0 , 2 , move 9 , 4  decode:loop 0 , 2 , move 3 * 3 , 4 
[159] c:3 is:loop 0 , 3 , move 5 , 8  decode:loop 0 , 3 , move 5 , 8 
[160] c:3 is:loop 0 , 3 , move 4 , 9  decode:loop 0 , 3 , move 4 , 9 
[161] c:3 is:loop 0 , 4 , move 3 , 9  decode:loop 0 , 4 , move 3 , 9 
[162] c:0 is:loop 0 , 2 , move 6 , 8  decode:loop 0 , 2 , move 4 + v0 , 8 
[163] c:0 is:loop 0 , 4 , move 9 , 3  decode:loop 0 , 4 , move v0 * 3 , 3 
[164] c:3 is:loop 0 , 4 , move 4 , 8  decode:loop 0 , 4 , move 4 , 8 
[165] c:0 is:loop 0 , 3 , move 9 , 4  decode:loop 0 , 3 , move 3 * 3 , 4 
[166] c:0 is:loop 0 , 2 , move 5 , 9  decode:loop 0 , 4 , move ua - 4 , 9 9 
[167] c:0 is:loop 0 , 4 , move 8 , 4  decode:loop 0 , 4 , move ua + 2 , 4 
[168] c:3 is:loop 0 , 4 , move 4 , 9  decode:loop 0 , 4 , move 4 , 9 
[169] c:3 is:loop 0 , 4 , move 4 , 9  decode:loop 0 , 4 , move 4 , 9 
[170] c:0 is:loop 0 , 3 , move 5 , 9  decode:loop 0 , 3 , move ua - ul , 9 
[171] c:3 is:loop 0 , 4 , move 9 , 4  decode:loop 0 , 4 , move 9 , 4 
[172] c:3 is:loop 0 , 4 , move 5 , 8  decode:loop 0 , 4 , move 5 , 8 
[173] c:3 is:loop 0 , 2 , move 8 , 8  decode:loop 0 , 2 , move 8 , 8 
[174] c:3 is:loop 0 , 4 , move 5 , 9  decode:loop 0 , 4 , move 5 , 9 
[175] c:0 is:loop 0 , 4 , move 7 , 9  decode:loop 0 , 4 , move ua + v0 , 9 
[176] c:0 is:loop 0 , 2 , move 9 , 9  decode:loop 0 , 3 , move v0 * 9 , 9 
[177] c:3 is:loop 0 , 3 , move 9 , 9  decode:loop 0 , 3 , move 9 , 9 
[178] c:3 is:loop 0 , 4 , move 8 , 9  decode:loop 0 , 4 , move 8 , 9 
[179] c:3 is:loop 0 , 4 , move 9 , 9  decode:loop 0 , 4 , move 9 , 9 
[180] c:0 is:loop 0 , 2 , move ua , 2  decode:( move 6 , 2 ; move ua , 2 ) 
[181] c:3 is:loop 0 , 2 , move 2 , ul  decode:loop 0 , 2 , move 2 , ul 
[182] c:0 is:loop 0 , 3 , move ua , 2  decode:loop 0 , 3 , move ua / v0 , 2 
[183] c:3 is:loop 0 , 2 , move ua , 3  decode:loop 0 , 2 , move ua , 3 
[184] c:3 is:loop 0 , 4 , move ua , 2  decode:loop 0 , 4 , move ua , 2 
[185] c:3 is:loop 0 , 3 , move 2 , ul  decode:loop 0 , 3 , move 2 , ul 
[186] c:0 is:loop 0 , 2 , move 3 , ul  decode:( move 3 , ul ; move 3 , ul ) 
[187] c:3 is:loop 0 , 3 , move ua , 3  decode:loop 0 , 3 , move ua , 3 
[188] c:0 is:loop 0 , 2 , move ua , 4  decode:( move ua , 4 ; move ua , 4 ) 
[189] c:3 is:loop 0 , 3 , move 3 , ul  decode:loop 0 , 3 , move 3 , ul 
[190] c:0 is:loop 0 , 2 , move 4 , ul  decode:loop 0 , 2 , move 4 ; move 4 , ul / 3 
[191] c:0 is:loop 0 , 4 , move 2 , ul  decode:loop 0 , 3 , move 3 / v0 , ul 
[192] c:3 is:loop 0 , 3 , move ua , 4  decode:loop 0 , 3 , move ua , 4 
[193] c:0 is:loop 0 , 5 , move ua , 2  decode:loop 0 , 4 , move ua + ul , 2 
[194] c:0 is:loop 0 , 2 , move 5 , ul  decode:( move 4 , ul ; move 5 , ul ) 
[195] c:3 is:loop 0 , 4 , move ua , 4  decode:loop 0 , 4 , move ua , 4 
[196] c:0 is:loop 0 , 5 , move ua , 3  decode:loop 0 , 4 , move v0 - ua , 3 
[197] c:3 is:loop 0 , 4 , move 3 , ul  decode:loop 0 , 4 , move 3 , ul 
[198] c:3 is:loop 0 , 3 , move 4 , ul  decode:loop 0 , 3 , move 4 , ul 
[199] c:0 is:loop 0 , 6 , move ua , 2  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[200] c:0 is:loop 0 , 6 , move ua , 3  decode:loop 0 , 4 , move v0 + 4 , 3 
[201] c:0 is:loop 0 , 6 , move 2 , ul  decode:loop 0 , 4 , move 3 , 5 
[202] c:3 is:loop 0 , 4 , move 4 , ul  decode:loop 0 , 4 , move 4 , ul 
[203] c:0 is:loop 0 , 5 , move 3 , ul  decode:loop 0 , 4 , move 4 , ul 
[204] c:0 is:loop 0 , 5 , move ua , 4  decode:loop 0 , 4 , move ua , 4 - 3 / 4 
[205] c:0 is:loop 0 , 7 , move ua , 2  decode:0 0 loop 0 , 4 , move , ua + 2 , 2 
[206] c:0 is:( move ua , move 2 , 0 )  decode:( move ul , 2 ; move ua , 2 ) 
[207] c:0 is:loop 0 , 5 , move 4 , ul  decode:loop 0 , 4 , move 4 , ul 
[208] c:0 is:loop 0 , 7 , move ua , 3  decode:loop 0 , 4 , move 0 - ua , = = - 0 3 
[209] c:0 is:loop 0 , 6 , move ua , 4  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[210] c:0 is:loop 0 , 6 , move 3 , ul  decode:loop 0 , 4 , move 4 , 4 * 3 0 
[211] c:0 is:loop 0 , 2 , move ua , 8  decode:loop 0 , 2 , move 3 + 3 , ua / 3 
[212] c:3 is:loop 0 , 2 , move ua , 9  decode:loop 0 , 2 , move ua , 9 
[213] c:0 is:loop 0 , 6 , move 4 , ul  decode:loop 0 , 4 , move ul - ua , ul 
[214] c:0 is:loop 0 , 3 , move ua , 8  decode:loop 0 , 3 , move 4 + v0 , 8 
[215] c:0 is:loop 0 , 7 , move ua , 4  decode:loop 0 , 4 , move ua + ul , 4 * 4 
[216] c:0 is:loop 0 , 4 , move ul , 6  decode:loop 0 , 4 , move ul ; , 6 
[217] c:3 is:loop 0 , 4 , move ua , 8  decode:loop 0 , 4 , move ua , 8 
[218] c:3 is:loop 0 , 3 , move ua , 9  decode:loop 0 , 3 , move ua , 9 
[219] c:0 is:loop 0 , 7 , move 4 , ul  decode:loop 0 , 4 , move 4 + ul , 0 - / 4 
[220] c:3 is:loop 0 , 4 , move ua , 9  decode:loop 0 , 4 , move ua , 9 
[221] c:0 is:loop 0 , 7 , move ua , 8  decode:loop 0 , 4 , move 4 + 4 , ua / 5 
[222] c:0 is:loop 0 , 4 , move ul , ul  decode:loop 0 , 4 , move ul ; move ul , ua / 4 
[223] c:0 is:loop 0 , 6 , move ul , ul  decode:loop 0 , 4 , move v0 , v0 / 4 
[224] c:0 is:loop 0 , ua , move ua , 9  decode:loop 0 , 4 , move ua ,  : : : 0 : 
[225] c:0 is:move ua , ul - move 3 , ul  decode:( move 4 , 9 ; move ul , 5 ) 
[226] c:0 is:loop 0 , 2 , move 2 , v0  decode:( move 2 , 0 ; move 3 , ul ) 
[227] c:0 is:loop 0 , 3 , move 2 , v0  decode:( move 3 , 0 ; move 3 , 4 ) 
[228] c:0 is:loop 0 , 2 , move 3 , v0  decode:( move 3 , 0 ; move 3 , ul ) 
[229] c:0 is:loop 0 , 2 , move 4 , v0  decode:( move 4 , 0 ; move 4 , ul ) 
[230] c:2 is:loop 0 , 4 , move v0 , 2  decode:loop 0 , 4 , move v0 , 2 
[231] c:3 is:loop 0 , 3 , move 3 , v0  decode:loop 0 , 3 , move 3 , v0 
[232] c:0 is:loop 0 , 2 , move 5 , v0  decode:( move 5 , 0 ; move 5 , ul ) 
[233] c:3 is:loop 0 , 4 , move v0 , 3  decode:loop 0 , 4 , move v0 , 3 
[234] c:3 is:loop 0 , 3 , move 4 , v0  decode:loop 0 , 3 , move 4 , v0 
[235] c:0 is:loop 0 , 5 , move v0 , 2  decode:( move 4 , 8 ; move ua - ul , ul ) 
[236] c:0 is:loop 0 , 6 , move 2 , v0  decode:loop 0 , 4 , move 3 , 4 * 5 
[237] c:0 is:loop 0 , 5 , move 3 , v0  decode:loop 0 , 4 , move 3 , v0 * 5 
[238] c:0 is:loop 0 , 5 , move v0 , 3  decode:( move 3 , 4 - 9 ; move 3 , 3 ) 
[239] c:3 is:loop 0 , 3 , move 5 , v0  decode:loop 0 , 3 , move 5 , v0 
[240] c:0 is:loop 0 , 4 , move v0 , 4  decode:0 loop 0 , 3 , move 2 , 2 + 9 
[241] c:0 is:loop 0 , 6 , move v0 , 2  decode:loop 0 , 3 , move 5 , 9 + v0 
[242] c:3 is:loop 0 , 4 , move 4 , v0  decode:loop 0 , 4 , move 4 , v0 
[243] c:0 is:loop 0 , 6 , move v0 , 3  decode:( move ua , 0 - 4 ; move 4 , 3 ) 
[244] c:0 is:loop 0 , 7 , move v0 , 2  decode:loop 0 , 4 , move v0 + 4 , 0 - 4 
[245] c:0 is:loop 0 , 5 , move v0 , 4  decode:loop 0 , 3 , move 3 - ua , v0 - 4 
[246] c:0 is:loop 0 , 4 , move v0 , 5  decode:loop 0 , 4 , move v0 , v0 * 5 
[247] c:0 is:loop 0 , 6 , move 3 , v0  decode:loop 0 , 4 , move 4 , 3 * 5 
[248] c:1 is:loop 0 , 4 , move 5 , v0  decode:loop 0 , 4 , move ua - ul , v0 
[249] c:0 is:loop 0 , 7 , move 2 , v0  decode:loop 0 , 4 , move ua - 3 , 0 - v0 
[250] c:0 is:loop 0 , 5 , move 4 , v0  decode:loop 0 , 4 , move 4 + v0 , v0 
[251] c:0 is:loop 0 , 7 , move v0 , 3  decode:loop 0 , 4 , move 4 , 0 - 3 
[252] c:0 is:loop 0 , 7 , move 3 , v0  decode:loop 0 , 4 , move ua - ul , ua * 0 0 
[253] c:0 is:loop 0 , 6 , move 4 , v0  decode:loop 0 , 4 , move ua - ul , 0 - v0 0 
[254] c:0 is:loop 0 , 6 , move v0 , 4  decode:loop 0 , 4 , move 4 , 0 - v0 * 4 
[255] c:0 is:loop 0 , 4 , move v0 , 6  decode:loop 0 , 4 , move v0 , 2 / 4 
[256] c:0 is:loop 0 , 7 , move v0 , 4  decode:loop 0 , 4 , move v0 + ua , 0 - 4 
[257] c:0 is:loop 0 , 4 , move v0 , 7  decode:loop 0 , 3 , move 3 - v0 , 3 * 3 
[258] c:0 is:loop 0 , 7 , move 4 , v0  decode:loop 0 , 4 , move 4 + 3 , 3 - v0 
[259] c:0 is:loop 0 , 4 , move v0 , 8  decode:loop 0 , 4 , move 2 - 2 , ua * ua 
[260] c:3 is:loop 0 , 4 , move v0 , 9  decode:loop 0 , 4 , move v0 , 9 
[261] c:0 is:loop 0 , 4 , move v0 , ul  decode:( move 2 , 3 ; move 4 , ul ) 
[262] c:0 is:loop 0 , 5 , move v0 , ul  decode:loop 0 , 3 , move 3 , 3 / v0 
[263] c:0 is:loop 0 , 6 , move v0 , ul  decode:loop 0 , 4 , move 3 - ua , 2 / 3 
[264] c:0 is:loop 0 , 7 , move ul , v0  decode:loop 0 , 3 , move 2 , v0 + 2 
[265] c:0 is:loop 0 , 3 , move 2 , 0 - 2  decode:loop 0 , 3 , move 2 , ua / 0 - 2 
[266] c:0 is:loop 0 , 2 , move 3 , 0 - 2  decode:( move 3 , 2 - 9 ; move 3 , 2 ) 
[267] c:0 is:loop 0 , 2 , move 0 - 4 , 2  decode:( move 4 , 4 ; move 4 , 0 - 2 ) 
[268] c:3 is:loop 0 , 2 , move 4 , 0 - 2  decode:loop 0 , 2 , move 4 , 0 - 2 
[269] c:3 is:loop 0 , 4 , move 0 - 3 , 2  decode:loop 0 , 4 , move 0 - 3 , 2 
[270] c:3 is:loop 0 , 3 , move 0 - 4 , 2  decode:loop 0 , 3 , move 0 - 4 , 2 
[271] c:3 is:loop 0 , 4 , move 0 - 3 , 2  decode:loop 0 , 4 , move 0 - 3 , 2 
[272] c:0 is:loop 0 , 2 , move 0 - 4 , 3  decode:( move 3 , 3 ; move 4 , 3 ) 
[273] c:3 is:loop 0 , 3 , move 4 , 0 - 2  decode:loop 0 , 3 , move 4 , 0 - 2 
[274] c:3 is:loop 0 , 3 , move 3 , 0 - 3  decode:loop 0 , 3 , move 3 , 0 - 3 
[275] c:0 is:loop 0 , 3 , move 0 - 5 , 2  decode:loop 0 , 3 , move 5 , 2 
[276] c:3 is:loop 0 , 4 , move 0 - 4 , 2  decode:loop 0 , 4 , move 0 - 4 , 2 
[277] c:0 is:loop 0 , 6 , move 0 - 2 , 2  decode:loop 0 , 4 , move 4 - ua , v0 - 4 
[278] c:3 is:loop 0 , 3 , move 3 , 0 - 4  decode:loop 0 , 3 , move 3 , 0 - 4 
[279] c:0 is:loop 0 , 5 , move 3 , 0 - 2  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[280] c:3 is:loop 0 , 2 , move 0 - 3 , 5  decode:loop 0 , 2 , move 0 - 3 , 5 
[281] c:3 is:loop 0 , 3 , move 5 , 0 - 2  decode:loop 0 , 3 , move 5 , 0 - 2 
[282] c:0 is:loop 0 , 2 , move 4 , 0 - 4  decode:( move 4 , 9 / ua ; move 4 , 4 ) 
[283] c:3 is:loop 0 , 3 , move 2 , 2 - 3  decode:loop 0 , 3 , move 2 , 2 - 3 
[284] c:0 is:loop 0 , 3 , move 0 - 4 , 3  decode:loop 0 , 3 , move 3 - ua , 3 
[285] c:3 is:loop 0 , 3 , move 0 - 2 , 5  decode:loop 0 , 3 , move 0 - 2 , 5 
[286] c:0 is:loop 0 , 2 , move 3 + 2 , 4  decode:( move 5 , 4 ; move 2 - ua , 4 ) 
[287] c:0 is:loop 0 , 3 , move 4 + 2 , 2  decode:loop 0 , 3 , move ua , 2 
[288] c:3 is:loop 0 , 2 , move 0 - 3 , 5  decode:loop 0 , 2 , move 0 - 3 , 5 
[289] c:3 is:loop 0 , 2 , move 3 , 2 - 3  decode:loop 0 , 2 , move 3 , 2 - 3 
[290] c:0 is:( move 2 , 0 ; move 2 , 2 )  decode:loop 0 , 4 , move 2 / v0 , 2 / 2 
[291] c:3 is:loop 0 , 4 , move 4 , 0 - 3  decode:loop 0 , 4 , move 4 , 0 - 3 
[292] c:3 is:loop 0 , 2 , move 5 , 0 - 4  decode:loop 0 , 2 , move 5 , 0 - 4 
[293] c:3 is:loop 0 , 4 , move 5 , 0 - 2  decode:loop 0 , 4 , move 5 , 0 - 2 
[294] c:0 is:loop 0 , 7 , move 2 , 0 - 2  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[295] c:0 is:loop 0 , 5 , move 4 , 0 - 2  decode:loop 0 , 4 , move 4 , 0 - 4 
[296] c:3 is:loop 0 , 4 , move 3 , 0 - 4  decode:loop 0 , 4 , move 3 , 0 - 4 
[297] c:3 is:loop 0 , 4 , move 0 - 4 , 3  decode:loop 0 , 4 , move 0 - 4 , 3 
[298] c:3 is:loop 0 , 3 , move 0 - 3 , 5  decode:loop 0 , 3 , move 0 - 3 , 5 
[299] c:3 is:loop 0 , 2 , move 0 - 4 , 5  decode:loop 0 , 2 , move 0 - 4 , 5 
[300] c:3 is:loop 0 , 3 , move 4 , 0 - 4  decode:loop 0 , 3 , move 4 , 0 - 4 
[301] c:0 is:move 3 * 3 , move 4 , 0 - 0  decode:move ua , 4 / 3 
[302] c:0 is:loop 0 , 3 , move 3 + 4 , 2  decode:loop 0 , 3 , move ua + ul , 2 
[303] c:3 is:loop 0 , 2 , move 2 , 2 / 3  decode:loop 0 , 2 , move 2 , 2 / 3 
[304] c:3 is:loop 0 , 4 , move 2 , 2 - 3  decode:loop 0 , 4 , move 2 , 2 - 3 
[305] c:0 is:loop 0 , 4 , move 0 - 3 , 4  decode:loop 0 , 3 , move 3 - ua , 4 
[306] c:3 is:loop 0 , 3 , move 0 - 3 , 5  decode:loop 0 , 3 , move 0 - 3 , 5 
[307] c:3 is:loop 0 , 2 , move 4 , 2 - 3  decode:loop 0 , 2 , move 4 , 2 - 3 
[308] c:3 is:loop 0 , 3 , move 4 , 0 - 4  decode:loop 0 , 3 , move 4 , 0 - 4 
[309] c:3 is:loop 0 , 2 , move 0 - 4 , 5  decode:loop 0 , 2 , move 0 - 4 , 5 
[310] c:0 is:loop 0 , 2 , move 4 + 3 , 3  decode:loop 0 , 3 , move v0 - ua , 3 
[311] c:3 is:loop 0 , 3 , move 3 , 2 - 3  decode:loop 0 , 3 , move 3 , 2 - 3 
[312] c:0 is:loop 0 , 3 , move 6 , 0 - 2  decode:loop 0 , 3 , move ua , 0 - 2 
[313] c:3 is:loop 0 , 4 , move 2 + 4 , 2  decode:loop 0 , 4 , move 2 + 4 , 2 
[314] c:0 is:loop 0 , 6 , move 3 , 0 - 3  decode:loop 0 , 4 , move 3 , 0 - 3 
[315] c:0 is:loop 0 , 5 , move 4 , 0 - 3  decode:loop 0 , 4 , move 3 - ua , 0 - 3 
[316] c:0 is:loop 0 , 4 , move 2 , 0 - 6  decode:loop 0 , 4 , move 2 , 6 6 
[317] c:0 is:loop 0 , 2 , move 5 , 2 - 3  decode:loop 0 , 2 , move ua - 2 , 2 - 3 
[318] c:0 is:loop 0 , 4 , move 0 - 6 , 2  decode:loop 0 , 4 , move 0 - ua , 2 
[319] c:0 is:loop 0 , 3 , move 0 - 3 , 6  decode:loop 0 , 3 , move 4 - v0 , 6 
[320] c:0 is:loop 0 , 2 , move 4 + 3 , 4  decode:( move 7 , 4 ; move ua + ul , 4 ) 
[321] c:0 is:loop 0 , 3 , move 2 , 0 - 7  decode:loop 0 , 3 , move 2 , 2 / 3 
[322] c:0 is:loop 0 , 5 , move 3 + 2 , 3  decode:loop 0 , 4 , move 5 , 3 
[323] c:3 is:loop 0 , 3 , move 0 - 4 , 5  decode:loop 0 , 3 , move 0 - 4 , 5 
[324] c:0 is:loop 0 , 5 , move 2 , 4 + 2  decode:loop 0 , 4 , move 4 - ua , 3 * 4 
[325] c:0 is:loop 0 , 2 , move 0 - 4 , 6  decode:( move 4 , 9 ; move 3 , 6 ) 
[326] c:3 is:loop 0 , 2 , move 0 - 5 , 5  decode:loop 0 , 2 , move 0 - 5 , 5 
[327] c:3 is:loop 0 , 4 , move 4 , 0 - 4  decode:loop 0 , 4 , move 4 , 0 - 4 
[328] c:0 is:loop 0 , 4 , move 0 - 2 , 6  decode:loop 0 , 3 , move 4 - ua , 6 
[329] c:0 is:( move 3 , 0 ; move 2 , 2 )  decode:( move 3 , 2 ; move 2 , 0 - 2 ) 
[330] c:0 is:loop 0 , 4 , move 4 + 3 , 2  decode:loop 0 , 4 , move ua + ul , 2 
[331] c:3 is:loop 0 , 3 , move 0 - 4 , 5  decode:loop 0 , 3 , move 0 - 4 , 5 
[332] c:0 is:loop 0 , 3 , move 4 , 2 - 3  decode:loop 0 , 3 , move 4 , 2 - v0 
[333] c:3 is:loop 0 , 4 , move 0 - 4 , 4  decode:loop 0 , 4 , move 0 - 4 , 4 
[334] c:0 is:loop 0 , 2 , move 0 - 4 , 6  decode:( move 4 , 9 ; move 3 , 6 ) 
[335] c:0 is:loop 0 , 3 , move 4 + 3 , 3  decode:loop 0 , 3 , move ua + v0 , 3 
[336] c:0 is:loop 0 , 5 , move 3 , 3 + 2  decode:loop 0 , 4 , move ua - 3 , 5 
[337] c:0 is:loop 0 , 5 , move 3 , 0 - 4  decode:loop 0 , 4 , move 3 + v0 , 0 - 4 
[338] c:3 is:loop 0 , 3 , move 4 , 0 - 5  decode:loop 0 , 3 , move 4 , 0 - 5 
[339] c:3 is:loop 0 , 4 , move 0 - 3 , 5  decode:loop 0 , 4 , move 0 - 3 , 5 
[340] c:1 is:( move 2 , 0 ; move 2 , 3 )  decode:( move 3 , 0 ; move 2 , 3 ) 
[341] c:3 is:( move 2 , 0 ; move 3 , 2 )  decode:( move 2 , 0 ; move 3 , 2 ) 
[342] c:0 is:loop 0 , 4 , move 3 , 2 - 3  decode:loop 0 , 4 , move 3 , 3 - v0 
[343] c:0 is:loop 0 , 5 , move 2 , 4 + 3  decode:loop 0 , 4 , move 3 , 4 / 3 
[344] c:0 is:loop 0 , 4 , move 2 , 0 - 7  decode:loop 0 , 3 , move ua - 4 , 9 / 4 
[345] c:0 is:loop 0 , 4 , move 4 , 0 - 5  decode:loop 0 , 4 , move ua - 2 , 0 - 5 
[346] c:3 is:loop 0 , 4 , move 4 , 2 - 3  decode:loop 0 , 4 , move 4 , 2 - 3 
[347] c:0 is:loop 0 , 3 , move 2 , 2 / 4  decode:( move 3 , 2 ; move 3 , 2 / 4 ) 
[348] c:3 is:loop 0 , 2 , move 3 , 4 * 3  decode:loop 0 , 2 , move 3 , 4 * 3 
[349] c:3 is:( move 2 , 0 ; move 4 , 2 )  decode:( move 2 , 0 ; move 4 , 2 ) 
[350] c:0 is:( move 2 , 0 ; move 2 , 4 )  decode:( move 2 , 0 ; move 3 , 4 ) 
[351] c:3 is:( move 4 , 0 ; move 2 , 2 )  decode:( move 4 , 0 ; move 2 , 2 ) 
[352] c:3 is:loop 0 , 2 , move 0 - 4 , 7  decode:loop 0 , 2 , move 0 - 4 , 7 
[353] c:0 is:loop 0 , 6 , move 3 + 2 , 3  decode:loop 0 , 4 , move 5 , 3 
[354] c:3 is:( move 3 , 0 ; move 3 , 2 )  decode:( move 3 , 0 ; move 3 , 2 ) 
[355] c:0 is:loop 0 , 5 , move 4 + 3 , 2  decode:loop 0 , 4 , move 4 + 3 , 2 
[356] c:0 is:loop 0 , 4 , move 0 - 3 , 6  decode:loop 0 , 3 , move 4 , 6 
[357] c:3 is:loop 0 , 4 , move 0 - 4 , 5  decode:loop 0 , 4 , move 0 - 4 , 5 
[358] c:0 is:loop 0 , 3 , move 3 , 2 / 3  decode:loop 0 , 3 , move 3 , 2 / 5 
[359] c:0 is:loop 0 , 3 , move 0 - 5 , 5  decode:loop 0 , 3 , move 0 - 4 , 5 
[360] c:3 is:loop 0 , 3 , move 2 , 4 * 3  decode:loop 0 , 3 , move 2 , 4 * 3 
[361] c:0 is:loop 0 , 4 , move 3 , 0 - 6  decode:loop 0 , 3 , move 3 , 2 / 6 
[362] c:3 is:loop 0 , 4 , move 5 , 0 - 4  decode:loop 0 , 4 , move 5 , 0 - 4 
[363] c:0 is:loop 0 , 6 , move 0 - 4 , 3  decode:loop 0 , 4 , move 0 - 4 , 0 - 3 
[364] c:3 is:loop 0 , 3 , move 5 , 0 - 5  decode:loop 0 , 3 , move 5 , 0 - 5 
[365] c:3 is:loop 0 , 4 , move 0 - 4 , 5  decode:loop 0 , 4 , move 0 - 4 , 5 
[366] c:0 is:loop 0 , 4 , move 6 , 0 - 3  decode:loop 0 , 4 , move ua , 0 - 3 
[367] c:0 is:loop 0 , 2 , move 4 , 0 - 7  decode:( move 4 , 8 ; move 4 , 7 ) 
[368] c:3 is:( move 3 , 0 ; move 2 , 3 )  decode:( move 3 , 0 ; move 2 , 3 ) 
[369] c:0 is:loop 0 , 2 , move 2 , 4 / 3  decode:loop 0 , 2 , move 2 , 4 / 4 
[370] c:0 is:loop 0 , 3 , move 3 , 2 / 3  decode:loop 0 , 3 , move 3 , 2 / 5 
[371] c:3 is:loop 0 , 3 , move 3 , 3 / 2  decode:loop 0 , 3 , move 3 , 3 / 2 
[372] c:0 is:loop 0 , 2 , move 4 , 3 / 2  decode:loop 0 , 2 , move 4 ; move ua , 3 / 2 
[373] c:0 is:loop 0 , 2 , move 4 , 3 / 2  decode:loop 0 , 2 , move 4 ; move ua , 3 / 2 
[374] c:3 is:loop 0 , 3 , move 0 - 3 , 7  decode:loop 0 , 3 , move 0 - 3 , 7 
[375] c:3 is:loop 0 , 3 , move 3 * 3 , 4  decode:loop 0 , 3 , move 3 * 3 , 4 
[376] c:0 is:loop 0 , 2 , move 0 - 3 , 9  decode:( move 3 , 9 ; move 3 , 9 ) 
[377] c:0 is:loop 0 , 5 , move 4 * 2 , 2  decode:loop 0 , 4 , move 4 + 2 , 2 
[378] c:0 is:loop 0 , 3 , move 0 - 7 , 4  decode:loop 0 , 3 , move 0 - ua , 4 
[379] c:3 is:loop 0 , 4 , move 2 , 4 * 3  decode:loop 0 , 4 , move 2 , 4 * 3 
[380] c:0 is:loop 0 , 7 , move 0 - 3 , 4  decode:loop 0 , 4 , move 0 - 4 , 0 - 9 
[381] c:0 is:loop 0 , 2 , move 2 , 2 / 6  decode:loop 0 , 4 , move ul ; / 2 , 2 / 4 
[382] c:0 is:loop 0 , 4 , move 2 , 0 - 8  decode:loop 0 , 4 , move 0 - 2 , 8 
[383] c:3 is:loop 0 , 4 , move 5 , 0 - 5  decode:loop 0 , 4 , move 5 , 0 - 5 
[384] c:0 is:loop 0 , 4 , move 8 , 0 - 2  decode:loop 0 , 4 , move 4 + 2 , 0 - 2 
[385] c:3 is:loop 0 , 4 , move 2 , 2 / 4  decode:loop 0 , 4 , move 2 , 2 / 4 
[386] c:0 is:( move 3 , 2 ; move 2 , 2 )  decode:( move 2 , 2 ; move 4 - ua , 2 ) 
[387] c:0 is:move 4 + 3 , move 2 , 3 + 4  decode:( move ul , 2 ; move ua - ul , 7 ) 
[388] c:0 is:loop 0 , 4 , move 3 , 3 / 2  decode:0 loop 0 , 4 , move 3 , 3 / 2 
[389] c:0 is:loop 0 , 4 , move 3 , 2 / 3  decode:loop 0 , 4 , move 3 , 3 / 3 
[390] c:0 is:( move 4 , 0 ; move 3 , 2 )  decode:( move 3 , 0 ; move 3 , 2 ) 
[391] c:0 is:loop 0 , 5 , move 2 , 4 + 4  decode:loop 0 , 4 , move 3 , ua * ua 
[392] c:0 is:loop 0 , 3 , move 7 , 0 - 4  decode:loop 0 , 3 , move ua + ul , 0 - 4 
[393] c:3 is:( move 3 , 0 ; move 2 , 4 )  decode:( move 3 , 0 ; move 2 , 4 ) 
[394] c:0 is:loop 0 , 2 , move 5 , 3 / 2  decode:( move 2 - ua , 3 ; move 5 , 8 ) 
[395] c:0 is:loop 0 , 4 , move 3 , 0 - 7  decode:loop 0 , 4 , move 3 , 7 / 7 
[396] c:3 is:loop 0 , 3 , move 4 , 3 / 2  decode:loop 0 , 3 , move 4 , 3 / 2 
[397] c:0 is:loop 0 , 4 , move 0 - 5 , 5  decode:loop 0 , 4 , move 0 - 4 , 5 
[398] c:0 is:loop 0 , 2 , move 4 , 2 * 5  decode:( move 4 , 2 - 9 ; move 4 , 7 ) 
[399] c:0 is:loop 0 , 3 , move 0 - 3 , 8  decode:loop 0 , 3 , move 0 - 3 , ua / 8 
[400] c:3 is:loop 0 , 4 , move 0 - 8 , 2  decode:loop 0 , 4 , move 0 - 8 , 2 
[401] c:3 is:loop 0 , 3 , move 4 , 3 / 2  decode:loop 0 , 3 , move 4 , 3 / 2 
[402] c:0 is:loop 0 , 3 , move 3 , 4 * 3  decode:loop 0 , 3 , move 3 , 3 * 4 
[403] c:3 is:loop 0 , 2 , move 4 , 4 * 3  decode:loop 0 , 2 , move 4 , 4 * 3 
[404] c:3 is:loop 0 , 4 , move 0 - 3 , 7  decode:loop 0 , 4 , move 0 - 3 , 7 
[405] c:3 is:( move 2 , 2 ; move 3 , 2 )  decode:( move 2 , 2 ; move 3 , 2 ) 
[406] c:1 is:loop 0 , 4 , move 3 , 2 / 3  decode:loop 0 , 4 , move 3 , 2 / 3 
[407] c:0 is:loop 0 , 3 , move 3 , 5 * 2  decode:loop 0 , 3 , move 3 , 0 - 9 
[408] c:0 is:loop 0 , 5 , move 3 , 4 + 3  decode:loop 0 , 4 , move 3 , 4 4 / 4 
[409] c:0 is:loop 0 , 4 , move 4 + 3 , 4  decode:loop 0 , 4 , move ua + ul , 4 
[410] c:0 is:loop 0 , 6 , move 2 , 3 * 2  decode:( move ua , 8 ; move ua , 2 / 3 ) 
[411] c:3 is:( move 3 , 0 ; move 4 , 2 )  decode:( move 3 , 0 ; move 4 , 2 ) 
[412] c:0 is:loop 0 , 6 , move 3 + 2 , 4  decode:loop 0 , 4 , move ua , 0 - 5 / 5 
[413] c:2 is:loop 0 , 4 , move 2 , 4 / 3  decode:loop 0 , 4 , move 2 , 4 / 3 
[414] c:0 is:loop 0 , 3 , move 3 + 2 , 8  decode:loop 0 , 3 , move 5 , 8 
[415] c:3 is:loop 0 , 3 , move 3 , 4 / 3  decode:loop 0 , 3 , move 3 , 4 / 3 
[416] c:0 is:loop 0 , 3 , move 8 , 0 - 4  decode:loop 0 , 3 , move ua + v0 , 0 - 4 
[417] c:3 is:loop 0 , 3 , move 3 , 0 - 9  decode:loop 0 , 3 , move 3 , 0 - 9 
[418] c:0 is:loop 0 , 2 , move 0 - 9 , 4  decode:loop 0 , 2 , move 9 , 4 
[419] c:0 is:loop 0 , 6 , move 2 , 2 / 3  decode:loop 0 , 4 , move 3 , 4 / 3 
[420] c:3 is:( move 3 , 0 ; move 4 , 3 )  decode:( move 3 , 0 ; move 4 , 3 ) 
[421] c:0 is:loop 0 , 3 , move 4 , 0 - 8  decode:loop 0 , 3 , move 4 , v0 + 9 
[422] c:3 is:loop 0 , 3 , move 0 - 8 , 4  decode:loop 0 , 3 , move 0 - 8 , 4 
[423] c:0 is:loop 0 , 6 , move 4 + 2 , 4  decode:loop 0 , 4 , move ua ua , 4 * 4 
[424] c:2 is:loop 0 , 4 , move 2 , 2 / 5  decode:loop 0 , 4 , move 2 , 2 / 5 
[425] c:0 is:loop 0 , 6 , move 4 , 2 - 3  decode:loop 0 , 4 , move 4 - ua , 0 - 4 4 
[426] c:3 is:( move 4 , 2 ; move 2 , 2 )  decode:( move 4 , 2 ; move 2 , 2 ) 
[427] c:3 is:( move 2 , 2 ; move 4 , 2 )  decode:( move 2 , 2 ; move 4 , 2 ) 
[428] c:3 is:loop 0 , 3 , move 3 , 3 / 4  decode:loop 0 , 3 , move 3 , 3 / 4 
[429] c:3 is:( move 4 , 0 ; move 2 , 4 )  decode:( move 4 , 0 ; move 2 , 4 ) 
[430] c:3 is:loop 0 , 3 , move 3 , 4 * 4  decode:loop 0 , 3 , move 3 , 4 * 4 
[431] c:0 is:loop 0 , 5 , move 2 - 4 , 4  decode:loop 0 , 3 , move 3 , 0 - 9 
[432] c:0 is:loop 0 , 4 , move 2 , 3 / 4  decode:0 loop 0 , 4 , move 2 , 4 / 4 
[433] c:3 is:loop 0 , 3 , move 2 , 4 * 5  decode:loop 0 , 3 , move 2 , 4 * 5 
[434] c:0 is:loop 0 , 3 , move 0 - 3 , 9  decode:( move 3 , 9 ; move 4 , 9 ) 
[435] c:0 is:loop 0 , 3 , move 5 , 3 / 2  decode:loop 0 , 3 , move 4 + v0 , 3 / 2 
[436] c:3 is:( move 2 , 3 ; move 3 , 2 )  decode:( move 2 , 3 ; move 3 , 2 ) 
[437] c:0 is:( move 3 , 3 ; move 2 , 2 )  decode:( move 2 , 3 ; move 3 , 0 - 4 ) 
[438] c:3 is:loop 0 , 3 , move 3 , 3 * 5  decode:loop 0 , 3 , move 3 , 3 * 5 
[439] c:3 is:loop 0 , 3 , move 0 - 4 , 8  decode:loop 0 , 3 , move 0 - 4 , 8 
[440] c:3 is:loop 0 , 4 , move 0 - 8 , 3  decode:loop 0 , 4 , move 0 - 8 , 3 
[441] c:0 is:loop 0 , 3 , move 3 , 2 / 5  decode:loop 0 , 4 , move 2 , 2 / 5 
[442] c:0 is:loop 0 , 7 , move 2 , 4 + 3  decode:loop 0 , 4 , move 3 , ua / 9 
[443] c:0 is:loop 0 , 2 , move 0 - 5 , 8  decode:loop 0 , 2 , move v0 - ua , 8 
[444] c:0 is:loop 0 , 4 , move 0 - 7 , 4  decode:loop 0 , 4 , move ua + ul , 4 
[445] c:0 is:loop 0 , 2 , move 3 + 2 , 9  decode:loop 0 , 4 , move ua - 4 , 9 9 
[446] c:3 is:( move 4 , 0 ; move 4 , 2 )  decode:( move 4 , 0 ; move 4 , 2 ) 
[447] c:3 is:loop 0 , 3 , move 4 , 2 * 5  decode:loop 0 , 3 , move 4 , 2 * 5 
[448] c:3 is:( move 3 , 0 ; move 3 , 4 )  decode:( move 3 , 0 ; move 3 , 4 ) 
[449] c:3 is:loop 0 , 2 , move 4 , 4 * 4  decode:loop 0 , 2 , move 4 , 4 * 4 
[450] c:3 is:loop 0 , 4 , move 0 - 3 , 8  decode:loop 0 , 4 , move 0 - 3 , 8 
[451] c:3 is:loop 0 , 3 , move 3 , 4 * 4  decode:loop 0 , 3 , move 3 , 4 * 4 
[452] c:1 is:loop 0 , 4 , move 4 , 3 / 2  decode:loop 0 , 4 , move ua - 2 , 3 / 2 
[453] c:0 is:( move 3 , 0 ; move 2 , 5 )  decode:( move 3 , 0 ; move 3 , 5 ) 
[454] c:0 is:loop 0 , 7 , move 3 , 2 - 3  decode:loop 0 , 4 , move 4 , 4 3 / 2 
[455] c:3 is:loop 0 , 4 , move 3 , 2 * 5  decode:loop 0 , 4 , move 3 , 2 * 5 
[456] c:0 is:loop 0 , 2 , move 4 + 2 , 8  decode:loop 0 , 2 , move 4 + v0 , 8 
[457] c:3 is:loop 0 , 2 , move 4 , 4 / 3  decode:loop 0 , 2 , move 4 , 4 / 3 
[458] c:3 is:loop 0 , 2 , move 3 , 2 / 6  decode:loop 0 , 2 , move 3 , 2 / 6 
[459] c:0 is:loop 0 , 3 , move 0 - 9 , 3  decode:loop 0 , 3 , move v0 - 9 , 3 
[460] c:0 is:loop 0 , 5 , move 3 , 3 / 2  decode:loop 0 , 4 , move ua - 3 , 3 / 2 
[461] c:3 is:( move 5 , 0 ; move 3 , 2 )  decode:( move 5 , 0 ; move 3 , 2 ) 
[462] c:0 is:loop 0 , 7 , move 3 + 2 , 4  decode:loop 0 , 4 , move ua , 5 * 5 
[463] c:0 is:loop 0 , 2 , move 9 , 0 - 4  decode:loop 0 , 3 , move 9 , 0 - 4 
[464] c:0 is:loop 0 , 5 , move 2 , 4 * 3  decode:loop 0 , 4 , move 4 - ua , 2 / 3 
[465] c:3 is:loop 0 , 3 , move 4 + 2 , 8  decode:loop 0 , 3 , move 4 + 2 , 8 
[466] c:0 is:loop 0 , 4 , move 5 , 3 / 2  decode:loop 0 , 4 , move 4 + v0 , 3 / 2 
[467] c:0 is:loop 0 , 3 , move 6 , 3 / 2  decode:loop 0 , 3 , move 4 + 3 , 3 / 2 
[468] c:3 is:loop 0 , 4 , move 2 , 3 * 6  decode:loop 0 , 4 , move 2 , 3 * 6 
[469] c:0 is:loop 0 , 6 , move 3 , 4 + 4  decode:loop 0 , 4 , move 4 , 4 * 3 
[470] c:2 is:loop 0 , 3 , move 4 , 4 * 4  decode:loop 0 , 3 , move 4 , 4 * 4 
[471] c:3 is:( move 2 , 0 ; move 4 , 5 )  decode:( move 2 , 0 ; move 4 , 5 ) 
[472] c:0 is:( move 2 , 3 ; move 4 , 2 )  decode:( move 2 , 9 ; move 4 , 0 - 2 ) 
[473] c:0 is:loop 0 , 3 , move 0 - 5 , 8  decode:loop 0 , 3 , move v0 - ua , 8 
[474] c:3 is:( move 3 , 2 ; move 2 , 4 )  decode:( move 3 , 2 ; move 2 , 4 ) 
[475] c:3 is:loop 0 , 4 , move 3 , 4 / 3  decode:loop 0 , 4 , move 3 , 4 / 3 
[476] c:3 is:loop 0 , 4 , move 4 , 5 * 2  decode:loop 0 , 4 , move 4 , 5 * 2 
[477] c:3 is:loop 0 , 4 , move 0 - 9 , 3  decode:loop 0 , 4 , move 0 - 9 , 3 
[478] c:3 is:loop 0 , 3 , move 4 , 0 - 9  decode:loop 0 , 3 , move 4 , 0 - 9 
[479] c:3 is:loop 0 , 4 , move 0 - 4 , 8  decode:loop 0 , 4 , move 0 - 4 , 8 
[480] c:0 is:loop 0 , 4 , move 4 , 2 * 5  decode:loop 0 , 4 , move 4 , 5 * 2 
[481] c:0 is:loop 0 , 2 , move 4 , 3 + 8  decode:loop 0 , 2 , move 4 , 4 + 4 0 / 4 
[482] c:3 is:( move 4 , 0 ; move 3 , 4 )  decode:( move 4 , 0 ; move 3 , 4 ) 
[483] c:3 is:( move 3 , 0 ; move 4 , 4 )  decode:( move 3 , 0 ; move 4 , 4 ) 
[484] c:2 is:loop 0 , 4 , move 3 , 5 / 2  decode:loop 0 , 4 , move 3 , 5 / 2 
[485] c:0 is:loop 0 , 4 , move 2 , 9 + 2  decode:loop 0 , 4 , move 2 , 3 + 8 
[486] c:0 is:loop 0 , 4 , move 3 - 2 , 7  decode:loop 0 , 4 , move ul , v0 / 4 
[487] c:0 is:( move 3 , 0 ; move 2 , 6 )  decode:( move 3 , 3 ; move 3 , 3 ) 
[488] c:3 is:loop 0 , 4 , move 3 , 3 * 5  decode:loop 0 , 4 , move 3 , 3 * 5 
[489] c:3 is:( move 2 , 0 ; move 5 , 4 )  decode:( move 2 , 0 ; move 5 , 4 ) 
[490] c:0 is:loop 0 , 7 , move 4 + 2 , 4  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[491] c:0 is:loop 0 , 6 , move 4 + 3 , 4  decode:loop 0 , 4 , move ua + 2 , 0 - 2 
[492] c:3 is:( move 5 , 0 ; move 4 , 2 )  decode:( move 5 , 0 ; move 4 , 2 ) 
[493] c:0 is:loop 0 , 4 , move 8 , 0 - 4  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[494] c:3 is:loop 0 , 3 , move 4 , 4 / 3  decode:loop 0 , 3 , move 4 , 4 / 3 
[495] c:3 is:( move 4 , 3 ; move 2 , 2 )  decode:( move 4 , 3 ; move 2 , 2 ) 
[496] c:3 is:loop 0 , 3 , move 4 , 2 / 5  decode:loop 0 , 3 , move 4 , 2 / 5 
[497] c:3 is:loop 0 , 4 , move 3 , 3 / 4  decode:loop 0 , 4 , move 3 , 3 / 4 
[498] c:0 is:loop 0 , 3 , move 3 + 2 , 9  decode:loop 0 , 3 , move ua - ul , 9 
[499] c:3 is:( move 3 , 3 ; move 3 , 2 )  decode:( move 3 , 3 ; move 3 , 2 ) 
[500] c:0 is:loop 0 , 3 , move 4 , 5 / 2  decode:loop 0 , 3 , move 4 , 0 - 9 
[501] c:3 is:( move 4 , 2 ; move 3 , 2 )  decode:( move 4 , 2 ; move 3 , 2 ) 
[502] c:3 is:loop 0 , 4 , move 3 , 4 / 3  decode:loop 0 , 4 , move 3 , 4 / 3 
[503] c:0 is:loop 0 , 2 , move 3 + 4 , 8  decode:loop 0 , 2 , move 4 + 3 , 8 
[504] c:3 is:( move 3 , 2 ; move 4 , 2 )  decode:( move 3 , 2 ; move 4 , 2 ) 
[505] c:3 is:( move 2 , 2 ; move 3 , 4 )  decode:( move 2 , 2 ; move 3 , 4 ) 
[506] c:0 is:loop 0 , 3 , move 3 , 3 / 5  decode:loop 0 , 4 , move v0 + ul , 5 / 3 
[507] c:0 is:loop 0 , 7 , move 3 + 2 , 5  decode:loop 0 , 4 , move 5 + v0 , 5 
[508] c:3 is:loop 0 , 3 , move 4 , 0 - 9  decode:loop 0 , 3 , move 4 , 0 - 9 
[509] c:0 is:loop 0 , 2 , move 5 , 4 / 3  decode:loop 0 , 2 , move 4 + v0 , 4 / 3 
[510] c:0 is:loop 0 , 3 , move 3 , 3 * 6  decode:loop 0 , 3 , move 3 , 3 * 5 
[511] c:0 is:loop 0 , 3 , move 3 , 2 * 7  decode:loop 0 , 3 , move 3 ,  2 / 2 / 3 
[512] c:0 is:loop 0 , 3 , move 3 , 2 / 6  decode:loop 0 , 3 , move 3 , 6 / ua 
[513] c:3 is:( move 3 , 4 ; move 2 , 2 )  decode:( move 3 , 4 ; move 2 , 2 ) 
[514] c:0 is:loop 0 , 6 , move 3 , 2 / 3  decode:0 loop 0 , 4 , move 4 , 3 * 4 
[515] c:0 is:loop 0 , 3 , move 3 , 4 * 5  decode:0 loop 0 , 3 , move 3 , 4 * 3 0 
[516] c:0 is:loop 0 , 2 , move 4 , 4 * 5  decode:loop 0 , 4 , move 2 , 4 * 5 
[517] c:0 is:loop 0 , 4 , move 3 + 2 , 8  decode:loop 0 , 4 , move 5 , 8 
[518] c:0 is:loop 0 , 2 , move 2 , 2 / 8  decode:loop 0 , , 2 / 2 ; move 2 , 8 / 4 
[519] c:0 is:loop 0 , 3 , move 3 , 5 * 4  decode:0 loop 0 , 3 , move 3 , 4 * 3 0 
[520] c:0 is:( move 3 , 2 ; move 3 , 3 )  decode:( move 3 , 0 ; move 3 , 3 ) 
[521] c:3 is:loop 0 , 3 , move 0 - 4 , 9  decode:loop 0 , 3 , move 0 - 4 , 9 
[522] c:3 is:loop 0 , 3 , move 4 , 3 * 5  decode:loop 0 , 3 , move 4 , 3 * 5 
[523] c:3 is:loop 0 , 3 , move 0 - 4 , 9  decode:loop 0 , 3 , move 0 - 4 , 9 
[524] c:3 is:( move 2 , 4 ; move 3 , 2 )  decode:( move 2 , 4 ; move 3 , 2 ) 
[525] c:3 is:loop 0 , 4 , move 3 , 4 * 4  decode:loop 0 , 4 , move 3 , 4 * 4 
[526] c:3 is:loop 0 , 4 , move 0 - 8 , 4  decode:loop 0 , 4 , move 0 - 8 , 4 
[527] c:3 is:loop 0 , 3 , move 4 + 2 , 8  decode:loop 0 , 3 , move 4 + 2 , 8 
[528] c:0 is:loop 0 , 4 , move 4 , 0 - 8  decode:loop 0 , 4 , move ua - 2 , 9 / 8 
[529] c:0 is:loop 0 , 4 , move 3 , 3 + 8  decode:loop 0 , 4 , move 3 , ua / 8 
[530] c:0 is:loop 0 , 4 , move 6 , 3 / 2  decode:loop 0 , 4 , move 4 + v0 , 2 / 2 
[531] c:2 is:( move 5 , 3 ; move 2 , 2 )  decode:( move 5 , 3 ; move 4 - ua , ul ) 
[532] c:3 is:loop 0 , 3 , move 3 , 4 / 5  decode:loop 0 , 3 , move 3 , 4 / 5 
[533] c:0 is:loop 0 , 4 , move 0 - 9 , 4  decode:loop 0 , 4 , move v0 + ua , 4 
[534] c:3 is:( move 4 , 4 ; move 2 , 2 )  decode:( move 4 , 4 ; move 2 , 2 ) 
[535] c:3 is:loop 0 , 4 , move 3 , 2 / 6  decode:loop 0 , 4 , move 3 , 2 / 6 
[536] c:3 is:loop 0 , 3 , move 4 , 4 * 5  decode:loop 0 , 3 , move 4 , 4 * 5 
[537] c:0 is:loop 0 , 2 , move 4 , 5 / 4  decode:loop 0 , 2 , move 4 , 4 / 5 
[538] c:2 is:loop 0 , 4 , move 3 , 3 * 6  decode:loop 0 , 4 , move 3 , 3 * 6 
[539] c:3 is:loop 0 , 4 , move 4 , 4 * 4  decode:loop 0 , 4 , move 4 , 4 * 4 
[540] c:0 is:loop 0 , 3 , move 3 , 3 * 7  decode:loop 0 , 3 , move 3 , 0 - 3 - v0 
[541] c:3 is:( move 5 , 0 ; move 3 , 4 )  decode:( move 5 , 0 ; move 3 , 4 ) 
[542] c:3 is:loop 0 , 3 , move 5 , 4 * 4  decode:loop 0 , 3 , move 5 , 4 * 4 
[543] c:3 is:loop 0 , 4 , move 3 , 4 * 5  decode:loop 0 , 4 , move 3 , 4 * 5 
[544] c:3 is:( move 5 , 0 ; move 5 , 2 )  decode:( move 5 , 0 ; move 5 , 2 ) 
[545] c:0 is:loop 0 , 7 , move 4 + 4 , 3  decode:loop loop 0 , 4 , move loop loop loop , loop 0 , loop 8 loop , 
[546] c:0 is:loop 0 , 4 , move 2 , 4 / 5  decode:loop 0 , 4 , move 2 , 4 / 4 
[547] c:3 is:( move 3 , 4 ; move 2 , 3 )  decode:( move 3 , 4 ; move 2 , 3 ) 
[548] c:3 is:loop 0 , 4 , move 4 , 4 * 4  decode:loop 0 , 4 , move 4 , 4 * 4 
[549] c:3 is:loop 0 , 4 , move 0 - 4 , 9  decode:loop 0 , 4 , move 0 - 4 , 9 
[550] c:3 is:loop 0 , 4 , move 3 , 5 / 3  decode:loop 0 , 4 , move 3 , 5 / 3 
[551] c:3 is:loop 0 , 3 , move 5 , 4 / 3  decode:loop 0 , 3 , move 5 , 4 / 3 
[552] c:3 is:loop 0 , 4 , move 9 , 0 - 4  decode:loop 0 , 4 , move 9 , 0 - 4 
[553] c:0 is:loop 0 , 6 , move 4 , 4 * 2  decode:loop 0 , 4 , move ua - 2 - v0 , 0 - ua 
[554] c:3 is:( move 2 , 3 ; move 3 , 4 )  decode:( move 2 , 3 ; move 3 , 4 ) 
[555] c:3 is:( move 2 , 2 ; move 4 , 4 )  decode:( move 2 , 2 ; move 4 , 4 ) 
[556] c:3 is:loop 0 , 4 , move 5 , 2 * 5  decode:loop 0 , 4 , move 5 , 2 * 5 
[557] c:0 is:loop 0 , 3 , move 7 , 3 / 2  decode:loop 0 , 3 , move 4 + 2 , 3 / 2 
[558] c:0 is:loop 0 , 3 , move 4 , 3 + 8  decode:loop 0 , 3 , move 4 , 3 + 4 / v0 
[559] c:3 is:( move 2 , 0 ; move 4 , 6 )  decode:( move 2 , 0 ; move 4 , 6 ) 
[560] c:0 is:( move 2 , 4 ; move 3 , 3 )  decode:( move 3 , 4 ; move 2 , 3 ) 
[561] c:0 is:loop 0 , 4 , move 3 , 2 * 7  decode:loop 0 , 4 , move 3 ,  4 /  4 
[562] c:0 is:loop 0 , 3 , move 3 , 4 * 6  decode:loop 0 , 3 , move 3 , v0 - 6 
[563] c:0 is:loop 0 , 3 , move 3 , 5 / 4  decode:loop 0 , 3 , move 3 , 4 / 4 / v0 
[564] c:0 is:loop 0 , 7 , move 2 , 4 * 3  decode:loop 0 , 3 , move 4 , 3 - 3 / v0 
[565] c:3 is:loop 0 , 3 , move 4 , 5 / 3  decode:loop 0 , 3 , move 4 , 5 / 3 
[566] c:3 is:( move 4 , 3 ; move 3 , 2 )  decode:( move 4 , 3 ; move 3 , 2 ) 
[567] c:3 is:( move 4 , 2 ; move 2 , 4 )  decode:( move 4 , 2 ; move 2 , 4 ) 
[568] c:3 is:loop 0 , 4 , move 0 - 5 , 8  decode:loop 0 , 4 , move 0 - 5 , 8 
[569] c:0 is:loop 0 , 2 , move 3 , 2 / 8  decode:loop 0 , 2 , move 3 , 2 / 6 
[570] c:3 is:( move 2 , 4 ; move 4 , 2 )  decode:( move 2 , 4 ; move 4 , 2 ) 
[571] c:0 is:loop 0 , 4 , move 4 + 2 , 8  decode:loop 0 , 4 , move ua - ul , 8 
[572] c:3 is:( move 4 , 0 ; move 3 , 5 )  decode:( move 4 , 0 ; move 3 , 5 ) 
[573] c:0 is:loop 0 , 7 , move 3 * 3 , 3  decode:0 loop loop 0 , 4 , move loop loop loop , = ,   loop 
[574] c:3 is:loop 0 , 3 , move 4 + 3 , 8  decode:loop 0 , 3 , move 4 + 3 , 8 
[575] c:3 is:( move 3 , 0 ; move 4 , 5 )  decode:( move 3 , 0 ; move 4 , 5 ) 
[576] c:0 is:loop 0 , 4 , move 4 , 3 * 5  decode:loop 0 , 4 , move 0 - 4 , 5 * 3 
[577] c:3 is:loop 0 , 4 , move 0 - 4 , 9  decode:loop 0 , 4 , move 0 - 4 , 9 
[578] c:3 is:loop 0 , 4 , move 3 , 4 * 5  decode:loop 0 , 4 , move 3 , 4 * 5 
[579] c:3 is:loop 0 , 3 , move 3 , 4 / 5  decode:loop 0 , 3 , move 3 , 4 / 5 
[580] c:0 is:( move 4 + 3 , move 2 , 2 )  decode:( move 4 , 4 + move 3 , 4 ) 
[581] c:3 is:( move 3 , 4 ; move 3 , 2 )  decode:( move 3 , 4 ; move 3 , 2 ) 
[582] c:3 is:( move 4 , 0 ; move 4 , 4 )  decode:( move 4 , 0 ; move 4 , 4 ) 
[583] c:0 is:loop 0 , 3 , move 3 + 4 , 9  decode:loop 0 , 3 , move ua + ul , 9 
[584] c:3 is:( move 2 , 3 ; move 4 , 4 )  decode:( move 2 , 3 ; move 4 , 4 ) 
[585] c:3 is:loop 0 , 4 , move 5 , 5 * 3  decode:loop 0 , 4 , move 5 , 5 * 3 
[586] c:3 is:( move 4 , 0 ; move 4 , 5 )  decode:( move 4 , 0 ; move 4 , 5 ) 
[587] c:0 is:( move 4 , 3 ; move 4 , 2 )  decode:( move ua - 3 , 3 ; move 4 , 2 ) 
[588] c:3 is:( move 5 , 0 ; move 4 , 4 )  decode:( move 5 , 0 ; move 4 , 4 ) 
[589] c:0 is:loop 0 , 4 , move 4 , 4 * 5  decode:loop 0 , 4 , move 4 , 0 - 5 
[590] c:0 is:loop 0 , 4 , move 4 , 3 + 8  decode:loop 0 , 4 , move ua - 2 , ua / 4 
[591] c:0 is:loop 0 , 3 , move 3 , 9 + 4  decode:loop 0 , 4 , move 2 , 2 / ua 
[592] c:3 is:( move 4 , 5 ; move 2 , 2 )  decode:( move 4 , 5 ; move 2 , 2 ) 
[593] c:3 is:loop 0 , 3 , move 3 , 2 / 8  decode:loop 0 , 3 , move 3 , 2 / 8 
[594] c:3 is:loop 0 , 4 , move 4 , 5 / 3  decode:loop 0 , 4 , move 4 , 5 / 3 
[595] c:3 is:( move 5 , 3 ; move 3 , 2 )  decode:( move 5 , 3 ; move 3 , 2 ) 
[596] c:0 is:loop 0 , 4 , move 0 - 5 , 9  decode:loop 0 , 4 , move 5 , 9 
[597] c:0 is:loop 0 , 2 , move 4 , 2 / 8  decode:loop 0 , 2 , move ua - 2 , ul / 4 
[598] c:3 is:( move 4 , 3 ; move 2 , 4 )  decode:( move 4 , 3 ; move 2 , 4 ) 
[599] c:3 is:( move 2 , 4 ; move 2 , 5 )  decode:( move 2 , 4 ; move 2 , 5 ) 
[600] c:0 is:loop 0 , 6 , move 3 , 4 / 3  decode:loop 0 , 4 , move ua - 2 , v0 - 4 
[601] c:0 is:( move 9 , 0 ; move 2 , 2 )  decode:( move 9 , 0 ; move 3 , 2 ) 
[602] c:3 is:loop 0 , 4 , move 2 , 2 / 8  decode:loop 0 , 4 , move 2 , 2 / 8 
[603] c:3 is:( move 3 , 4 ; move 4 , 2 )  decode:( move 3 , 4 ; move 4 , 2 ) 
[604] c:0 is:( move 8 , 0 ; move 2 , 3 )  decode:( move 4 + 3 , 0 ; move ua , 3 ) 
[605] c:0 is:loop 0 , 4 , move 5 , 4 / 3  decode:loop 0 , 4 , move 5 , 0 - 5 
[606] c:3 is:( move 4 , 4 ; move 3 , 2 )  decode:( move 4 , 4 ; move 3 , 2 ) 
[607] c:0 is:( move 3 , 0 ; move 2 , 8 )  decode:( move 3 , 0 ; move 2 , ua * ua ) 
[608] c:3 is:( move 3 , 4 ; move 2 , 4 )  decode:( move 3 , 4 ; move 2 , 4 ) 
[609] c:3 is:loop 0 , 4 , move 5 , 4 * 4  decode:loop 0 , 4 , move 5 , 4 * 4 
[610] c:0 is:loop 0 , 3 , move 4 , 5 / 4  decode:loop 0 , 4 , move ua - 4 , 0 - 5 
[611] c:3 is:( move 5 , 2 ; move 4 , 2 )  decode:( move 5 , 2 ; move 4 , 2 ) 
[612] c:3 is:( move 4 , 0 ; move 7 , 2 )  decode:( move 4 , 0 ; move 7 , 2 ) 
[613] c:3 is:( move 5 , 0 ; move 3 , 5 )  decode:( move 5 , 0 ; move 3 , 5 ) 
[614] c:0 is:( move 4 , 2 - move 3 , 2 )  decode:move ua , 3 / 3 
[615] c:3 is:loop 0 , 4 , move 3 + 4 , 8  decode:loop 0 , 4 , move 3 + 4 , 8 
[616] c:3 is:loop 0 , 3 , move 4 , 4 * 6  decode:loop 0 , 3 , move 4 , 4 * 6 
[617] c:3 is:( move 4 , 2 ; move 5 , 2 )  decode:( move 4 , 2 ; move 5 , 2 ) 
[618] c:0 is:loop 0 , 4 , move 3 , 4 * 6  decode:loop 0 , 3 , move 4 , 4 * 3 / 4 
[619] c:0 is:loop 0 , 4 , move 4 , 2 * 7  decode:loop 0 , 4 , move 4 , 4 * 7 
[620] c:3 is:( move 3 , 3 ; move 3 , 4 )  decode:( move 3 , 3 ; move 3 , 4 ) 
[621] c:0 is:( move 2 , 4 ; move 3 , 4 )  decode:( move 4 , 4 ; move 2 , 4 ) 
[622] c:3 is:( move 3 , 2 ; move 4 , 4 )  decode:( move 3 , 2 ; move 4 , 4 ) 
[623] c:0 is:loop 0 , 4 , move 2 , 4 + 9  decode:loop 0 , 4 , move 2 , 2 / 5 
[624] c:3 is:( move 4 , 2 ; move 2 , 5 )  decode:( move 4 , 2 ; move 2 , 5 ) 
[625] c:0 is:( move 5 , 3 ; move 2 , 4 )  decode:( move 5 , 3 ; move 3 , 4 ) 
[626] c:3 is:( move 2 , 7 ; move 3 , 2 )  decode:( move 2 , 7 ; move 3 , 2 ) 
[627] c:0 is:loop 0 , 3 , move 3 , 2 / 9  decode:loop 0 , 3 , move 3 , 2 / ua 
[628] c:0 is:loop 0 , 3 , move 3 , 3 / 8  decode:loop 0 , 4 , move 2 , 2 / 8 
[629] c:0 is:( move 3 , 4 - move 3 , 2 )  decode:move 4 , 4 * 4 
[630] c:3 is:( move 3 , 6 ; move 3 , 2 )  decode:( move 3 , 6 ; move 3 , 2 ) 
[631] c:0 is:loop 0 , 3 , move 3 , 4 / 7  decode:loop 0 , 4 , move 2 , 2 / 5 
[632] c:3 is:( move 2 , 3 ; move 4 , 5 )  decode:( move 2 , 3 ; move 4 , 5 ) 
[633] c:3 is:( move 4 , 5 ; move 3 , 2 )  decode:( move 4 , 5 ; move 3 , 2 ) 
[634] c:0 is:loop 0 , 7 , move 3 , 4 * 4  decode:loop 0 , 4 , move 4 , 0 - 3 
[635] c:3 is:( move 9 , 0 ; move 3 , 2 )  decode:( move 9 , 0 ; move 3 , 2 ) 
[636] c:3 is:( move 3 , 2 ; move 4 , 5 )  decode:( move 3 , 2 ; move 4 , 5 ) 
[637] c:3 is:( move 3 , 0 ; move 9 , 2 )  decode:( move 3 , 0 ; move 9 , 2 ) 
[638] c:3 is:( move 3 , 4 ; move 5 , 2 )  decode:( move 3 , 4 ; move 5 , 2 ) 
[639] c:0 is:( move 4 , 4 ; move 3 , 3 )  decode:( move 3 , 4 ; move 3 , 3 ) 
[640] c:3 is:( move 4 , 3 ; move 3 , 4 )  decode:( move 4 , 3 ; move 3 , 4 ) 
[641] c:3 is:loop 0 , 4 , move 0 - 7 , 8  decode:loop 0 , 4 , move 0 - 7 , 8 
[642] c:3 is:( move 4 , 0 ; move 5 , 5 )  decode:( move 4 , 0 ; move 5 , 5 ) 
[643] c:0 is:loop 0 , 2 , move 4 , 4 * 8  decode:loop 0 , 4 , move 2 , 4 / 8 
[644] c:3 is:( move 2 , 5 ; move 3 , 4 )  decode:( move 2 , 5 ; move 3 , 4 ) 
[645] c:3 is:( move 4 , 4 ; move 4 , 2 )  decode:( move 4 , 4 ; move 4 , 2 ) 
[646] c:0 is:( move 3 , 2 / move 3 , 2 )  decode:( move 3 , 2 - move 3 , 2 ) 
[647] c:0 is:loop 0 , 3 , move 3 , 9 / 2  decode:loop 0 , 3 , move 3 , ua / 9 
[648] c:3 is:( move 2 , 4 ; move 4 , 4 )  decode:( move 2 , 4 ; move 4 , 4 ) 
[649] c:0 is:loop 0 , 4 , move 2 , 9 + 5  decode:loop 0 , 4 , move 2 , 9 + v0 
[650] c:3 is:( move 2 , 2 ; move 8 , 2 )  decode:( move 2 , 2 ; move 8 , 2 ) 
[651] c:0 is:( move 2 , 6 ; move 3 , 3 )  decode:( move 3 , 3 ; move 3 , 3 ) 
[652] c:0 is:( move 3 , 2 ; move 2 , 7 )  decode:( move 3 , 2 ; move 2 , ul ) 
[653] c:0 is:( move 4 , 0 ; move 6 , 4 )  decode:( move 3 , 0 ; move ua , 4 ) 
[654] c:3 is:( move 4 , 2 ; move 3 , 5 )  decode:( move 4 , 2 ; move 3 , 5 ) 
[655] c:3 is:loop 0 , 3 , move 4 , 4 + 9  decode:loop 0 , 3 , move 4 , 4 + 9 
[656] c:3 is:( move 5 , 0 ; move 7 , 2 )  decode:( move 5 , 0 ; move 7 , 2 ) 
[657] c:3 is:( move 5 , 0 ; move 5 , 4 )  decode:( move 5 , 0 ; move 5 , 4 ) 
[658] c:3 is:loop 0 , 4 , move 4 , 4 * 6  decode:loop 0 , 4 , move 4 , 4 * 6 
[659] c:0 is:loop 0 , 3 , move 3 , 8 / 3  decode:( move 4 , ua / 3 ; move 5 , 3 ) 
[660] c:3 is:( move 4 , 0 ; move 2 , 8 )  decode:( move 4 , 0 ; move 2 , 8 ) 
[661] c:3 is:loop 0 , 4 , move 4 , 7 * 3  decode:loop 0 , 4 , move 4 , 7 * 3 
[662] c:3 is:( move 4 , 3 ; move 5 , 2 )  decode:( move 4 , 3 ; move 5 , 2 ) 
[663] c:0 is:loop 0 , 4 , move 2 , 2 / 9  decode:( move 4 , 4 ; move 4 , 4 * 3 ) 
[664] c:0 is:loop 0 , 4 , move 5 , 5 * 4  decode:loop 0 , 4 , move 5 , 0 - 5 
[665] c:0 is:( move 2 , 2 ; move 5 , 5 )  decode:( move 2 , ua / 4 ; move 5 , 5 ) 
[666] c:3 is:( move 4 , 2 ; move 5 , 3 )  decode:( move 4 , 2 ; move 5 , 3 ) 
[667] c:3 is:( move 5 , 2 ; move 2 , 5 )  decode:( move 5 , 2 ; move 2 , 5 ) 
[668] c:3 is:loop 0 , 3 , move 3 , 3 * 9  decode:loop 0 , 3 , move 3 , 3 * 9 
[669] c:3 is:loop 0 , 3 , move 3 , 3 * 9  decode:loop 0 , 3 , move 3 , 3 * 9 
[670] c:3 is:( move 4 , 4 ; move 2 , 4 )  decode:( move 4 , 4 ; move 2 , 4 ) 
[671] c:0 is:loop 0 , 2 , move 4 , 6 / 5  decode:loop 0 , 2 , move 4 , 4 * 5 
[672] c:3 is:loop 0 , 4 , move 2 , 4 / 7  decode:loop 0 , 4 , move 2 , 4 / 7 
[673] c:3 is:( move 3 , 0 ; move 4 , 7 )  decode:( move 3 , 0 ; move 4 , 7 ) 
[674] c:3 is:( move 4 , 2 ; move 4 , 4 )  decode:( move 4 , 2 ; move 4 , 4 ) 
[675] c:3 is:loop 0 , 3 , move 2 , 4 * 9  decode:loop 0 , 3 , move 2 , 4 * 9 
[676] c:0 is:( move 7 , 3 ; move 3 , 2 )  decode:( move  ua , 3 ; ; move 3 , 2 ) 
[677] c:3 is:( move 3 , 4 ; move 4 , 4 )  decode:( move 3 , 4 ; move 4 , 4 ) 
[678] c:0 is:( move 3 , 0 ; move 6 , 6 )  decode:( move 3 , 0 ; move ua , 6 ) 
[679] c:0 is:loop 0 , 4 , move 3 , 6 * 6  decode:loop 0 , 4 , move 3 , 4 * 9 
[680] c:0 is:( move 2 , 0 ; move 5 , 8 )  decode:( move 2 , 0 ; move 5 , ua * ua ) 
[681] c:0 is:( move 2 , 4 ; move 5 , 4 )  decode:( move 2 , 4 ; move ul - ua , 4 ) 
[682] c:0 is:loop 0 , 2 , move 2 - 8 , 8  decode:loop 0 , 2 , move v0 - ua , 8 
[683] c:0 is:loop 0 , 3 , move 4 , 3 * 9  decode:loop 0 , 3 , move 4 , ua * 9 
[684] c:0 is:( move 4 , 3 ; move 3 , 5 )  decode:( move 4 , 3 ; move 3 - ua , 5 ) 
[685] c:3 is:( move 3 , 0 ; move 4 , 8 )  decode:( move 3 , 0 ; move 4 , 8 ) 
[686] c:3 is:loop 0 , 4 , move 3 , 3 / 8  decode:loop 0 , 4 , move 3 , 3 / 8 
[687] c:3 is:( move 2 , 6 ; move 3 , 4 )  decode:( move 2 , 6 ; move 3 , 4 ) 
[688] c:3 is:( move 2 , 3 ; move 5 , 5 )  decode:( move 2 , 3 ; move 5 , 5 ) 
[689] c:0 is:loop 0 , 4 , move 7 , 0 - 9  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[690] c:3 is:( move 3 , 8 ; move 2 , 2 )  decode:( move 3 , 8 ; move 2 , 2 ) 
[691] c:3 is:( move 2 , 5 ; move 4 , 4 )  decode:( move 2 , 5 ; move 4 , 4 ) 
[692] c:3 is:( move 3 , 2 ; move 2 , 8 )  decode:( move 3 , 2 ; move 2 , 8 ) 
[693] c:3 is:( move 4 , 0 ; move 9 , 2 )  decode:( move 4 , 0 ; move 9 , 2 ) 
[694] c:0 is:( move 4 , 2 ; move 3 , 6 )  decode:( move 4 , 2 ; move 3 , ul + 4 ) 
[695] c:3 is:loop 0 , 3 , move 3 , 4 * 9  decode:loop 0 , 3 , move 3 , 4 * 9 
[696] c:0 is:( move 9 , 0 ; move 2 , 4 )  decode:( move 9 , 0 ; move 3 , 4 ) 
[697] c:0 is:loop 0 , 4 , move 5 , 5 / 4  decode:loop 0 , 4 , move ul - ua , 0 - 5 
[698] c:3 is:( move 3 , 4 ; move 3 , 5 )  decode:( move 3 , 4 ; move 3 , 5 ) 
[699] c:0 is:loop 0 , 4 , move 5 , 4 * 6  decode:loop 0 , 4 , move 4 , 8 * 3 
[700] c:0 is:loop 0 , 7 , move 4 , 4 * 4  decode:loop 0 , 4 , move 3 + 4 , 9 0 - 3 
[701] c:3 is:( move 2 , 0 ; move 8 , 5 )  decode:( move 2 , 0 ; move 8 , 5 ) 
[702] c:3 is:( move 2 , 3 ; move 4 , 6 )  decode:( move 2 , 3 ; move 4 , 6 ) 
[703] c:3 is:( move 3 , 3 ; move 2 , 7 )  decode:( move 3 , 3 ; move 2 , 7 ) 
[704] c:3 is:( move 3 , 3 ; move 4 , 5 )  decode:( move 3 , 3 ; move 4 , 5 ) 
[705] c:0 is:loop 0 , 2 , move 0 - 9 , 9  decode:loop 0 , 3 , move 9 , 9 - v0 
[706] c:3 is:( move 4 , 4 ; move 4 , 3 )  decode:( move 4 , 4 ; move 4 , 3 ) 
[707] c:0 is:loop 0 , 7 , move 3 + 2 , 9  decode:loop 0 , 4 , move ua , 0 - 9 
[708] c:3 is:loop 0 , 3 , move 4 , 3 / 8  decode:loop 0 , 3 , move 4 , 3 / 8 
[709] c:3 is:( move 9 , 0 ; move 4 , 2 )  decode:( move 9 , 0 ; move 4 , 2 ) 
[710] c:3 is:( move 2 , 7 ; move 4 , 2 )  decode:( move 2 , 7 ; move 4 , 2 ) 
[711] c:3 is:( move 3 , 2 ; move 8 , 2 )  decode:( move 3 , 2 ; move 8 , 2 ) 
[712] c:3 is:( move 4 , 4 ; move 3 , 4 )  decode:( move 4 , 4 ; move 3 , 4 ) 
[713] c:3 is:( move 4 , 6 ; move 3 , 2 )  decode:( move 4 , 6 ; move 3 , 2 ) 
[714] c:3 is:( move 4 , 3 ; move 4 , 4 )  decode:( move 4 , 3 ; move 4 , 4 ) 
[715] c:0 is:( move 3 , 2 ; move 4 , 6 )  decode:( move 2 , 2 ; move ul - ua , 4 ) 
[716] c:3 is:( move 4 , 5 ; move 4 , 2 )  decode:( move 4 , 5 ; move 4 , 2 ) 
[717] c:0 is:( move 4 , 0 ; move 6 , 5 )  decode:( move 4 , 0 ; move ul - ua , 2 ) 
[718] c:3 is:( move 4 , 0 ; move 4 , 7 )  decode:( move 4 , 0 ; move 4 , 7 ) 
[719] c:0 is:loop 0 , 4 , move 4 , 7 / 3  decode:loop 0 , 4 , move 5 , 7 / 3 
[720] c:0 is:loop 0 , 3 , move 8 , 4 * 4  decode:loop 0 , 3 , move 4 + 3 , 4 * 4 
[721] c:3 is:loop 0 , 3 , move 4 , 9 / 2  decode:loop 0 , 3 , move 4 , 9 / 2 
[722] c:0 is:loop 0 , 4 , move 0 - 7 , 9  decode:loop 0 , 4 , move 0 - ua , 9 
[723] c:0 is:( move 3 , 7 ; move 4 , 2 )  decode:( move 3 , 4 + 3 ; move 4 , 2 ) 
[724] c:0 is:( move 6 , 0 ; move 5 , 5 )  decode:( move ul - ua , 0 ; move 5 , 5 ) 
[725] c:3 is:( move 2 , 3 ; move 4 , 7 )  decode:( move 2 , 3 ; move 4 , 7 ) 
[726] c:0 is:loop 0 , 3 , move 4 , 7 / 5  decode:loop 0 , 3 , move 4 , 2 / v0 
[727] c:3 is:( move 4 , 3 ; move 3 , 6 )  decode:( move 4 , 3 ; move 3 , 6 ) 
[728] c:3 is:loop 0 , 4 , move 0 - 8 , 9  decode:loop 0 , 4 , move 0 - 8 , 9 
[729] c:3 is:( move 4 , 6 ; move 4 , 2 )  decode:( move 4 , 6 ; move 4 , 2 ) 
[730] c:3 is:( move 4 , 3 ; move 4 , 5 )  decode:( move 4 , 3 ; move 4 , 5 ) 
[731] c:3 is:( move 5 , 3 ; move 3 , 5 )  decode:( move 5 , 3 ; move 3 , 5 ) 
[732] c:3 is:( move 4 , 3 ; move 5 , 4 )  decode:( move 4 , 3 ; move 5 , 4 ) 
[733] c:0 is:( move 4 , 4 - move 3 , 3 )  decode:move ua , 2 / 3 
[734] c:3 is:( move 5 , 0 ; move 4 , 7 )  decode:( move 5 , 0 ; move 4 , 7 ) 
[735] c:3 is:loop 0 , 4 , move 3 , 4 * 9  decode:loop 0 , 4 , move 3 , 4 * 9 
[736] c:0 is:loop 0 , 4 , move 8 , 4 * 4  decode:loop 0 , 4 , move ua + 2 , 4 * 4 
[737] c:0 is:loop 0 , 4 , move 4 , 8 / 3  decode:loop 0 , 4 , move 4 , 3 / 3 / 2 
[738] c:3 is:( move 2 , 7 ; move 3 , 4 )  decode:( move 2 , 7 ; move 3 , 4 ) 
[739] c:3 is:( move 4 , 5 ; move 2 , 5 )  decode:( move 4 , 5 ; move 2 , 5 ) 
[740] c:3 is:( move 3 , 2 - move 7 , 2 )  decode:( move 3 , 2 - move 7 , 2 ) 
[741] c:3 is:( move 4 , 2 ; move 2 , 8 )  decode:( move 4 , 2 ; move 2 , 8 ) 
[742] c:3 is:( move 5 , 4 ; move 5 , 2 )  decode:( move 5 , 4 ; move 5 , 2 ) 
[743] c:0 is:( move 9 , 0 ; move 5 , 2 )  decode:( move 9 , ul ; move 5 , 2 ) 
[744] c:3 is:( move 9 , 0 ; move 3 , 4 )  decode:( move 9 , 0 ; move 3 , 4 ) 
[745] c:3 is:( move 2 , 2 ; move 5 , 7 )  decode:( move 2 , 2 ; move 5 , 7 ) 
[746] c:3 is:( move 3 , 4 ; move 4 , 5 )  decode:( move 3 , 4 ; move 4 , 5 ) 
[747] c:3 is:( move 5 , 3 ; move 4 , 4 )  decode:( move 5 , 3 ; move 4 , 4 ) 
[748] c:0 is:( move 7 , 0 ; move 7 , 2 )  decode:( move ua + ul , 0 ; move 7 , 2 ) 
[749] c:3 is:( move 4 , 8 ; move 2 , 2 )  decode:( move 4 , 8 ; move 2 , 2 ) 
[750] c:3 is:( move 3 , 6 ; move 3 , 4 )  decode:( move 3 , 6 ; move 3 , 4 ) 
[751] c:3 is:( move 3 , 6 ; move 4 , 3 )  decode:( move 3 , 6 ; move 4 , 3 ) 
[752] c:3 is:( move 4 , 6 ; move 2 , 4 )  decode:( move 4 , 6 ; move 2 , 4 ) 
[753] c:3 is:( move 3 , 2 ; move 4 , 7 )  decode:( move 3 , 2 ; move 4 , 7 ) 
[754] c:3 is:( move 3 , 0 ; move 5 , 8 )  decode:( move 3 , 0 ; move 5 , 8 ) 
[755] c:0 is:loop 0 , 3 , move 0 - 9 , 9  decode:loop 0 , 3 , move 9 , 9 
[756] c:3 is:( move 4 , 2 ; move 5 , 5 )  decode:( move 4 , 2 ; move 5 , 5 ) 
[757] c:3 is:( move 3 , 5 ; move 4 , 4 )  decode:( move 3 , 5 ; move 4 , 4 ) 
[758] c:3 is:( move 4 , 5 ; move 3 , 4 )  decode:( move 4 , 5 ; move 3 , 4 ) 
[759] c:0 is:loop 0 , 4 , move 4 , 9 * 3  decode:loop 0 , 4 , move 4 , 3 * 9 
[760] c:0 is:( move 9 , 3 ; move 2 , 2 )  decode:( move 9 , 3 ; move 3 , 2 ) 
[761] c:3 is:( move 5 , 2 ; move 4 , 5 )  decode:( move 5 , 2 ; move 4 , 5 ) 
[762] c:3 is:( move 4 , 0 ; move 3 , 9 )  decode:( move 4 , 0 ; move 3 , 9 ) 
[763] c:3 is:( move 8 , 3 ; move 3 , 2 )  decode:( move 8 , 3 ; move 3 , 2 ) 
[764] c:0 is:( move 9 , 0 ; move 6 , 2 )  decode:( move 9 , 0 ; move ua , 2 ) 
[765] c:0 is:( move 3 , 2 - move 7 , 3 )  decode:move 3 * 3 , 2 / 3 
[766] c:3 is:( move 5 , 2 ; move 4 , 6 )  decode:( move 5 , 2 ; move 4 , 6 ) 
[767] c:3 is:( move 6 , 0 ; move 9 , 2 )  decode:( move 6 , 0 ; move 9 , 2 ) 
[768] c:3 is:( move 5 , 5 ; move 3 , 4 )  decode:( move 5 , 5 ; move 3 , 4 ) 
[769] c:3 is:( move 9 , 0 ; move 4 , 4 )  decode:( move 9 , 0 ; move 4 , 4 ) 
[770] c:0 is:( move 3 , 8 ; move 2 , 4 )  decode:( move 3 , ua * ua ; move 2 , 4 ) 
[771] c:3 is:( move 3 , 2 ; move 4 , 8 )  decode:( move 3 , 2 ; move 4 , 8 ) 
[772] c:3 is:( move 3 , 3 ; move 4 , 7 )  decode:( move 3 , 3 ; move 4 , 7 ) 
[773] c:0 is:loop 0 , 4 , move 2 - 8 , 8  decode:loop 0 , 4 , move 2 - ua , 8 
[774] c:0 is:loop 0 , 5 , move 5 , 8 / 2  decode:loop 0 , 4 , move ua - v0 , 0 - 4 
[775] c:3 is:( move 3 , 2 ; move 4 , 8 )  decode:( move 3 , 2 ; move 4 , 8 ) 
[776] c:3 is:( move 4 , 2 ; move 3 , 8 )  decode:( move 4 , 2 ; move 3 , 8 ) 
[777] c:3 is:( move 4 , 6 ; move 5 , 2 )  decode:( move 4 , 6 ; move 5 , 2 ) 
[778] c:3 is:( move 4 , 0 ; move 4 , 9 )  decode:( move 4 , 0 ; move 4 , 9 ) 
[779] c:3 is:( move 3 , 4 ; move 5 , 5 )  decode:( move 3 , 4 ; move 5 , 5 ) 
[780] c:3 is:loop 0 , 4 , move 0 - 9 , 9  decode:loop 0 , 4 , move 0 - 9 , 9 
[781] c:3 is:( move 5 , 5 ; move 5 , 2 )  decode:( move 5 , 5 ; move 5 , 2 ) 
[782] c:3 is:( move 3 , 5 ; move 4 , 5 )  decode:( move 3 , 5 ; move 4 , 5 ) 
[783] c:3 is:( move 4 , 3 ; move 3 , 7 )  decode:( move 4 , 3 ; move 3 , 7 ) 
[784] c:3 is:( move 5 , 6 ; move 4 , 2 )  decode:( move 5 , 6 ; move 4 , 2 ) 
[785] c:3 is:( move 4 , 3 ; move 5 , 5 )  decode:( move 4 , 3 ; move 5 , 5 ) 
[786] c:3 is:( move 4 , 5 ; move 3 , 5 )  decode:( move 4 , 5 ; move 3 , 5 ) 
[787] c:3 is:( move 4 , 4 ; move 4 , 5 )  decode:( move 4 , 4 ; move 4 , 5 ) 
[788] c:3 is:( move 5 , 3 ; move 5 , 4 )  decode:( move 5 , 3 ; move 5 , 4 ) 
[789] c:3 is:( move 4 , 2 ; move 4 , 7 )  decode:( move 4 , 2 ; move 4 , 7 ) 
[790] c:0 is:( move 4 , 2 / move 3 , 4 )  decode:move 4 + 3 , 0 / 4 
[791] c:0 is:( move 2 , 9 ; move 4 , 2 )  decode:( move ua - 4 , 9 ; move 4 , 2 ) 
[792] c:3 is:( move 5 , 4 ; move 4 , 4 )  decode:( move 5 , 4 ; move 4 , 4 ) 
[793] c:3 is:( move 9 , 3 ; move 3 , 2 )  decode:( move 9 , 3 ; move 3 , 2 ) 
[794] c:3 is:( move 4 , 4 ; move 5 , 4 )  decode:( move 4 , 4 ; move 5 , 4 ) 
[795] c:0 is:loop 0 , 4 , move 9 , 0 - 9  decode:loop 0 , 4 , move 3 + ua , 0 - 9 
[796] c:3 is:( move 3 , 9 ; move 3 , 2 )  decode:( move 3 , 9 ; move 3 , 2 ) 
[797] c:3 is:( move 4 , 0 ; move 9 , 4 )  decode:( move 4 , 0 ; move 9 , 4 ) 
[798] c:3 is:( move 4 , 2 ; move 5 , 6 )  decode:( move 4 , 2 ; move 5 , 6 ) 
[799] c:3 is:( move 5 , 2 ; move 5 , 5 )  decode:( move 5 , 2 ; move 5 , 5 ) 
[800] c:3 is:( move 4 , 0 ; move 8 , 5 )  decode:( move 4 , 0 ; move 8 , 5 ) 
[801] c:3 is:( move 4 , 8 ; move 3 , 2 )  decode:( move 4 , 8 ; move 3 , 2 ) 
[802] c:0 is:( move 4 , 2 ; move 8 , 4 )  decode:( move 4 , 2 ; move 4 + 4 , 4 ) 
[803] c:3 is:( move 4 , 6 ; move 3 , 5 )  decode:( move 4 , 6 ; move 3 , 5 ) 
[804] c:3 is:( move 3 , 2 ; move 8 , 5 )  decode:( move 3 , 2 ; move 8 , 5 ) 
[805] c:3 is:( move 4 , 5 ; move 5 , 4 )  decode:( move 4 , 5 ; move 5 , 4 ) 
[806] c:3 is:( move 5 , 3 ; move 3 , 7 )  decode:( move 5 , 3 ; move 3 , 7 ) 
[807] c:3 is:( move 4 , 2 ; move 5 , 7 )  decode:( move 4 , 2 ; move 5 , 7 ) 
[808] c:3 is:( move 5 , 5 ; move 3 , 5 )  decode:( move 5 , 5 ; move 3 , 5 ) 
[809] c:3 is:( move 2 , 4 ; move 5 , 7 )  decode:( move 2 , 4 ; move 5 , 7 ) 
[810] c:3 is:( move 5 , 4 ; move 4 , 5 )  decode:( move 5 , 4 ; move 4 , 5 ) 
[811] c:3 is:( move 4 , 9 ; move 3 , 2 )  decode:( move 4 , 9 ; move 3 , 2 ) 
[812] c:3 is:( move 4 , 2 ; move 4 , 8 )  decode:( move 4 , 2 ; move 4 , 8 ) 
[813] c:0 is:( move 8 , 2 ; move 4 , 4 )  decode:( move 8 , ua / 3 ; move 4 , 4 ) 
[814] c:0 is:( move 5 , 3 ; move 4 , 6 )  decode:( move ul - ua , 6 ; move 4 , 3 ) 
[815] c:0 is:( move 9 , 0 ; move 7 , 2 )  decode:( move 9 , 0 ; move ua + ul , 2 ) 
[816] c:3 is:( move 4 , 3 ; move 7 , 4 )  decode:( move 4 , 3 ; move 7 , 4 ) 
[817] c:3 is:( move 3 , 2 ; move 5 , 8 )  decode:( move 3 , 2 ; move 5 , 8 ) 
[818] c:3 is:( move 4 , 0 ; move 5 , 9 )  decode:( move 4 , 0 ; move 5 , 9 ) 
[819] c:3 is:( move 4 , 4 ; move 8 , 2 )  decode:( move 4 , 4 ; move 8 , 2 ) 
[820] c:3 is:( move 3 , 5 ; move 5 , 5 )  decode:( move 3 , 5 ; move 5 , 5 ) 
[821] c:3 is:( move 3 , 9 ; move 4 , 2 )  decode:( move 3 , 9 ; move 4 , 2 ) 
[822] c:3 is:( move 4 , 6 ; move 4 , 4 )  decode:( move 4 , 6 ; move 4 , 4 ) 
[823] c:3 is:( move 3 , 4 ; move 4 , 7 )  decode:( move 3 , 4 ; move 4 , 7 ) 
[824] c:3 is:( move 5 , 6 ; move 4 , 3 )  decode:( move 5 , 6 ; move 4 , 3 ) 
[825] c:3 is:( move 2 , 8 ; move 4 , 4 )  decode:( move 2 , 8 ; move 4 , 4 ) 
[826] c:0 is:( move 4 , 3 * move 4 , 4 )  decode:move 4 * 2 , 2 / 3 
[827] c:0 is:( move 5 , 5 ; move 4 , 4 )  decode:( move 5 , 9 * 5 ; move 4 , 4 ) 
[828] c:0 is:( move 2 , 7 ; move 5 , 4 )  decode:( move 2 , 7 ; move ua - ul , 4 ) 
[829] c:3 is:( move 4 , 4 ; move 5 , 5 )  decode:( move 4 , 4 ; move 5 , 5 ) 
[830] c:0 is:( move 2 , 7 ; move 4 , 5 )  decode:( move 3 , 4 / ua ; move 4 , 5 ) 
[831] c:0 is:( move 9 , 5 ; move 2 , 2 )  decode:( move 9 , 5 ; move 3 , 2 ) 
[832] c:3 is:( move 8 , 0 ; move 8 , 2 )  decode:( move 8 , 0 ; move 8 , 2 ) 
[833] c:3 is:( move 9 , 4 ; move 3 , 2 )  decode:( move 9 , 4 ; move 3 , 2 ) 
[834] c:0 is:( move 5 , 3 ; move 5 , 5 )  decode:( move 5 , 3 ; move ul - ua , 5 ) 
[835] c:3 is:( move 9 , 3 ; move 4 , 2 )  decode:( move 9 , 3 ; move 4 , 2 ) 
[836] c:3 is:( move 3 , 7 ; move 3 , 5 )  decode:( move 3 , 7 ; move 3 , 5 ) 
[837] c:3 is:( move 3 , 3 ; move 3 , 9 )  decode:( move 3 , 3 ; move 3 , 9 ) 
[838] c:3 is:( move 4 , 3 ; move 4 , 7 )  decode:( move 4 , 3 ; move 4 , 7 ) 
[839] c:0 is:loop 0 , 4 , move 5 , 4 * 9  decode:loop 0 , 4 , move 5 , 4 * 4 - v0 
[840] c:3 is:( move 5 , 2 ; move 4 , 7 )  decode:( move 5 , 2 ; move 4 , 7 ) 
[841] c:3 is:( move 5 , 6 ; move 5 , 2 )  decode:( move 5 , 6 ; move 5 , 2 ) 
[842] c:0 is:( move 8 , 3 ; move 5 , 2 )  decode:( move ua + 2 , 3 ; move 5 , 2 ) 
[843] c:3 is:( move 5 , 4 ; move 8 , 2 )  decode:( move 5 , 4 ; move 8 , 2 ) 
[844] c:3 is:( move 5 , 3 ; move 4 , 7 )  decode:( move 5 , 3 ; move 4 , 7 ) 
[845] c:3 is:( move 4 , 3 ; move 3 , 9 )  decode:( move 4 , 3 ; move 3 , 9 ) 
[846] c:3 is:( move 4 , 2 ; move 8 , 5 )  decode:( move 4 , 2 ; move 8 , 5 ) 
[847] c:3 is:( move 3 , 4 ; move 5 , 7 )  decode:( move 3 , 4 ; move 5 , 7 ) 
[848] c:3 is:( move 5 , 4 ; move 4 , 6 )  decode:( move 5 , 4 ; move 4 , 6 ) 
[849] c:3 is:( move 5 , 5 ; move 4 , 5 )  decode:( move 5 , 5 ; move 4 , 5 ) 
[850] c:3 is:( move 2 , 9 ; move 4 , 4 )  decode:( move 2 , 9 ; move 4 , 4 ) 
[851] c:3 is:( move 5 , 6 ; move 3 , 5 )  decode:( move 5 , 6 ; move 3 , 5 ) 
[852] c:3 is:( move 4 , 7 ; move 3 , 5 )  decode:( move 4 , 7 ; move 3 , 5 ) 
[853] c:3 is:( move 4 , 3 ; move 5 , 7 )  decode:( move 4 , 3 ; move 5 , 7 ) 
[854] c:3 is:( move 4 , 8 ; move 5 , 2 )  decode:( move 4 , 8 ; move 5 , 2 ) 
[855] c:3 is:( move 4 , 7 ; move 5 , 3 )  decode:( move 4 , 7 ; move 5 , 3 ) 
[856] c:3 is:( move 4 , 3 ; move 4 , 8 )  decode:( move 4 , 3 ; move 4 , 8 ) 
[857] c:3 is:( move 5 , 4 ; move 5 , 5 )  decode:( move 5 , 4 ; move 5 , 5 ) 
[858] c:0 is:( move 5 , 5 ; move 7 , 2 )  decode:( move 5 , 4 ; move 7 , 2 ) 
[859] c:3 is:( move 4 , 3 ; move 8 , 4 )  decode:( move 4 , 3 ; move 8 , 4 ) 
[860] c:3 is:( move 9 , 3 ; move 5 , 2 )  decode:( move 9 , 3 ; move 5 , 2 ) 
[861] c:3 is:( move 3 , 8 ; move 3 , 5 )  decode:( move 3 , 8 ; move 3 , 5 ) 
[862] c:2 is:loop 0 , 4 , move 4 , 9 + 8  decode:loop 0 , 4 , move 4 , 9 + 8 
[863] c:3 is:( move 5 , 2 ; move 3 , 9 )  decode:( move 5 , 2 ; move 3 , 9 ) 
[864] c:3 is:( move 4 , 9 ; move 4 , 2 )  decode:( move 4 , 9 ; move 4 , 2 ) 
[865] c:3 is:( move 4 , 4 ; move 3 , 8 )  decode:( move 4 , 4 ; move 3 , 8 ) 
[866] c:3 is:( move 4 , 5 ; move 5 , 5 )  decode:( move 4 , 5 ; move 5 , 5 ) 
[867] c:3 is:( move 3 , 9 ; move 3 , 4 )  decode:( move 3 , 9 ; move 3 , 4 ) 
[868] c:3 is:( move 5 , 4 ; move 3 , 7 )  decode:( move 5 , 4 ; move 3 , 7 ) 
[869] c:2 is:( move 5 , 6 ; move 4 , 4 )  decode:( move 5 , 6 ; move 4 , 4 ) 
[870] c:3 is:( move 5 , 2 ; move 5 , 7 )  decode:( move 5 , 2 ; move 5 , 7 ) 
[871] c:3 is:( move 4 , 2 ; move 4 , 9 )  decode:( move 4 , 2 ; move 4 , 9 ) 
[872] c:3 is:( move 4 , 7 ; move 4 , 4 )  decode:( move 4 , 7 ; move 4 , 4 ) 
[873] c:3 is:( move 4 , 5 ; move 3 , 7 )  decode:( move 4 , 5 ; move 3 , 7 ) 
[874] c:3 is:( move 4 , 6 ; move 4 , 5 )  decode:( move 4 , 6 ; move 4 , 5 ) 
[875] c:3 is:( move 3 , 6 ; move 8 , 2 )  decode:( move 3 , 6 ; move 8 , 2 ) 
[876] c:3 is:( move 9 , 3 ; move 3 , 4 )  decode:( move 9 , 3 ; move 3 , 4 ) 
[877] c:0 is:( move 7 , 3 ; move 8 , 2 )  decode:( move ua + ul , 3 ; move 8 , 2 ) 
[878] c:3 is:( move 4 , 6 ; move 2 , 8 )  decode:( move 4 , 6 ; move 2 , 8 ) 
[879] c:3 is:( move 4 , 9 ; move 3 , 4 )  decode:( move 4 , 9 ; move 3 , 4 ) 
[880] c:3 is:( move 3 , 9 ; move 3 , 5 )  decode:( move 3 , 9 ; move 3 , 5 ) 
[881] c:3 is:( move 4 , 4 ; move 7 , 5 )  decode:( move 4 , 4 ; move 7 , 5 ) 
[882] c:3 is:( move 4 , 3 ; move 5 , 8 )  decode:( move 4 , 3 ; move 5 , 8 ) 
[883] c:0 is:( move 6 , 4 ; move 8 , 2 )  decode:( move 6 , 4 ; move ua + 2 , 2 ) 
[884] c:3 is:( move 4 , 2 ; move 5 , 9 )  decode:( move 4 , 2 ; move 5 , 9 ) 
[885] c:3 is:( move 9 , 2 ; move 5 , 4 )  decode:( move 9 , 2 ; move 5 , 4 ) 
[886] c:3 is:( move 5 , 5 ; move 4 , 6 )  decode:( move 5 , 5 ; move 4 , 6 ) 
[887] c:3 is:( move 9 , 4 ; move 3 , 4 )  decode:( move 9 , 4 ; move 3 , 4 ) 
[888] c:3 is:( move 4 , 0 ; move 8 , 8 )  decode:( move 4 , 0 ; move 8 , 8 ) 
[889] c:0 is:( move 5 , 5 ; move 3 , 7 )  decode:( move ua - ul , 5 ; move 3 , 7 ) 
[890] c:3 is:( move 5 , 4 ; move 4 , 7 )  decode:( move 5 , 4 ; move 4 , 7 ) 
[891] c:3 is:( move 8 , 0 ; move 8 , 4 )  decode:( move 8 , 0 ; move 8 , 4 ) 
[892] c:3 is:( move 5 , 3 ; move 7 , 5 )  decode:( move 5 , 3 ; move 7 , 5 ) 
[893] c:3 is:( move 3 , 5 ; move 4 , 8 )  decode:( move 3 , 5 ; move 4 , 8 ) 
[894] c:3 is:( move 3 , 6 ; move 4 , 7 )  decode:( move 3 , 6 ; move 4 , 7 ) 
[895] c:3 is:( move 6 , 3 ; move 9 , 2 )  decode:( move 6 , 3 ; move 9 , 2 ) 
[896] c:0 is:loop 0 , 4 , move 9 , 7 / 3  decode:loop 0 , 4 , move 9 , 7 / 7 
[897] c:3 is:( move 9 , 5 ; move 4 , 2 )  decode:( move 9 , 5 ; move 4 , 2 ) 
[898] c:0 is:( move 4 , 6 / move 4 , 2 )  decode:move ua , 4 * 3 
[899] c:3 is:( move 9 , 3 ; move 4 , 4 )  decode:( move 9 , 3 ; move 4 , 4 ) 
[900] c:3 is:( move 3 , 0 ; move 8 , 9 )  decode:( move 3 , 0 ; move 8 , 9 ) 
[901] c:3 is:( move 5 , 7 ; move 3 , 5 )  decode:( move 5 , 7 ; move 3 , 5 ) 
[902] c:3 is:( move 4 , 9 ; move 5 , 2 )  decode:( move 4 , 9 ; move 5 , 2 ) 
[903] c:0 is:loop 0 , 3 , move 3 , 9 * 9  decode:loop 0 , 3 , move 3 , 4 * 9 
[904] c:0 is:( move 5 , 4 ; move 3 , 8 )  decode:( move 5 , 4 ; move 3 , 9 + 4 ) 
[905] c:0 is:( move 9 , 4 ; move 5 , 2 )  decode:( move ua + 3 , 4 ; move 5 , 2 ) 
[906] c:3 is:( move 8 , 6 ; move 4 , 2 )  decode:( move 8 , 6 ; move 4 , 2 ) 
[907] c:0 is:loop 0 , 4 , move 2 , 9 * 9  decode:loop 0 , 4 , move 2 , 9 + 9 
[908] c:3 is:loop 0 , 4 , move 4 , 8 * 8  decode:loop 0 , 4 , move 4 , 8 * 8 
[909] c:3 is:( move 4 , 9 ; move 3 , 4 )  decode:( move 4 , 9 ; move 3 , 4 ) 
[910] c:0 is:( move 4 , 5 ; move 5 , 6 )  decode:( move 4 , 5 ; move 2 + 4 , 3 ) 
[911] c:3 is:( move 4 , 7 ; move 5 , 4 )  decode:( move 4 , 7 ; move 5 , 4 ) 
[912] c:3 is:( move 6 , 6 ; move 6 , 2 )  decode:( move 6 , 6 ; move 6 , 2 ) 
[913] c:3 is:( move 4 , 3 ; move 4 , 9 )  decode:( move 4 , 3 ; move 4 , 9 ) 
[914] c:3 is:( move 5 , 9 ; move 4 , 2 )  decode:( move 5 , 9 ; move 4 , 2 ) 
[915] c:3 is:( move 5 , 3 ; move 8 , 4 )  decode:( move 5 , 3 ; move 8 , 4 ) 
[916] c:3 is:( move 4 , 4 ; move 4 , 8 )  decode:( move 4 , 4 ; move 4 , 8 ) 
[917] c:3 is:( move 4 , 5 ; move 4 , 7 )  decode:( move 4 , 5 ; move 4 , 7 ) 
[918] c:3 is:( move 9 , 0 ; move 9 , 2 )  decode:( move 9 , 0 ; move 9 , 2 ) 
[919] c:3 is:( move 3 , 4 ; move 4 , 9 )  decode:( move 3 , 4 ; move 4 , 9 ) 
[920] c:3 is:( move 3 , 9 ; move 5 , 4 )  decode:( move 3 , 9 ; move 5 , 4 ) 
[921] c:3 is:( move 5 , 8 ; move 4 , 4 )  decode:( move 5 , 8 ; move 4 , 4 ) 
[922] c:3 is:( move 8 , 4 ; move 4 , 5 )  decode:( move 8 , 4 ; move 4 , 5 ) 
[923] c:3 is:( move 4 , 9 ; move 3 , 5 )  decode:( move 4 , 9 ; move 3 , 5 ) 
[924] c:0 is:loop 0 , 4 , move v0 , v0  decode:loop 0 , 4 , move v0 , 6 0 
[925] c:1 is:( move 9 , 5 ; move 5 , 2 )  decode:( move 9 , 5 ; move 4 , 2 ) 
[926] c:3 is:( move 4 , 6 ; move 4 , 7 )  decode:( move 4 , 6 ; move 4 , 7 ) 
[927] c:0 is:( move 7 , 9 ; move 3 , 2 )  decode:( move ua , 9 ; move 3 , 2 ) 
[928] c:3 is:( move 3 , 7 ; move 4 , 7 )  decode:( move 3 , 7 ; move 4 , 7 ) 
[929] c:0 is:loop 0 , 2 , move 0 - ua , 2  decode:( move ua , 4 ; move ua , 0 - 2 ) 
[930] c:3 is:( move 5 , 5 ; move 4 , 7 )  decode:( move 5 , 5 ; move 4 , 7 ) 
[931] c:3 is:( move 4 , 7 ; move 3 , 7 )  decode:( move 4 , 7 ; move 3 , 7 ) 
[932] c:3 is:( move 4 , 3 ; move 5 , 9 )  decode:( move 4 , 3 ; move 5 , 9 ) 
[933] c:3 is:( move 3 , 5 ; move 4 , 9 )  decode:( move 3 , 5 ; move 4 , 9 ) 
[934] c:3 is:( move 9 , 6 ; move 4 , 2 )  decode:( move 9 , 6 ; move 4 , 2 ) 
[935] c:3 is:( move 4 , 4 ; move 9 , 4 )  decode:( move 4 , 4 ; move 9 , 4 ) 
[936] c:0 is:( move 3 , 4 ; move 6 , 8 )  decode:( move 3 , 4 ; move ua , 8 ) 
[937] c:3 is:( move 5 , 9 ; move 5 , 2 )  decode:( move 5 , 9 ; move 5 , 2 ) 
[938] c:3 is:( move 7 , 3 ; move 9 , 2 )  decode:( move 7 , 3 ; move 9 , 2 ) 
[939] c:3 is:( move 4 , 9 ; move 4 , 4 )  decode:( move 4 , 9 ; move 4 , 4 ) 
[940] c:3 is:( move 9 , 0 ; move 8 , 4 )  decode:( move 9 , 0 ; move 8 , 4 ) 
[941] c:3 is:( move 3 , 5 ; move 8 , 5 )  decode:( move 3 , 5 ; move 8 , 5 ) 
[942] c:3 is:( move 8 , 5 ; move 4 , 4 )  decode:( move 8 , 5 ; move 4 , 4 ) 
[943] c:3 is:( move 5 , 8 ; move 3 , 5 )  decode:( move 5 , 8 ; move 3 , 5 ) 
[944] c:3 is:( move 4 , 8 ; move 4 , 5 )  decode:( move 4 , 8 ; move 4 , 5 ) 
[945] c:0 is:( move 8 , 2 ; move 3 , 8 )  decode:( move ua + 2 , 2 ; move 3 , 8 ) 
[946] c:0 is:( move 2 , 9 ; move 4 , 6 )  decode:( move 3 , 9 ; move 3 , 6 ) 
[947] c:3 is:( move 4 , 6 ; move 3 , 8 )  decode:( move 4 , 6 ; move 3 , 8 ) 
[948] c:3 is:( move 5 , 7 ; move 4 , 5 )  decode:( move 5 , 7 ; move 4 , 5 ) 
[949] c:3 is:loop 0 , 2 , move ua , 0 - 2  decode:loop 0 , 2 , move ua , 0 - 2 
[950] c:3 is:( move 5 , 6 ; move 8 , 2 )  decode:( move 5 , 6 ; move 8 , 2 ) 
[951] c:3 is:( move 4 , 5 ; move 4 , 8 )  decode:( move 4 , 5 ; move 4 , 8 ) 
[952] c:3 is:( move 9 , 3 ; move 7 , 2 )  decode:( move 9 , 3 ; move 7 , 2 ) 
[953] c:0 is:loop 0 , 4 , move 7 , 7 - 9  decode:loop 0 , 4 , move 4 + 3 , 0 - 2 
[954] c:3 is:( move 5 , 4 ; move 4 , 9 )  decode:( move 5 , 4 ; move 4 , 9 ) 
[955] c:3 is:( move 9 , 5 ; move 4 , 4 )  decode:( move 9 , 5 ; move 4 , 4 ) 
[956] c:3 is:( move 4 , 9 ; move 3 , 6 )  decode:( move 4 , 9 ; move 3 , 6 ) 
[957] c:0 is:( move 9 , 0 ; move 4 , 9 )  decode:( move 9 , ul ; move 4 , 9 ) 
[958] c:0 is:( move 4 , 3 ; move 6 , 9 )  decode:( move 4 , 3 ; move ul - ua , 6 ) 
[959] c:3 is:( move 2 , 9 ; move 3 , 8 )  decode:( move 2 , 9 ; move 3 , 8 ) 
[960] c:3 is:( move 5 , 4 ; move 9 , 4 )  decode:( move 5 , 4 ; move 9 , 4 ) 
[961] c:3 is:( move 5 , 9 ; move 4 , 4 )  decode:( move 5 , 9 ; move 4 , 4 ) 
[962] c:3 is:loop 0 , 3 , move 0 - ua , 2  decode:loop 0 , 3 , move 0 - ua , 2 
[963] c:3 is:( move 2 , 9 ; move 4 , 7 )  decode:( move 2 , 9 ; move 4 , 7 ) 
[964] c:0 is:( move 5 , 6 ; move 3 , 8 )  decode:( move ul - ua , 9 ; move 3 , 8 ) 
[965] c:3 is:loop 0 , 2 , move ua , 0 - 3  decode:loop 0 , 2 , move ua , 0 - 3 
[966] c:0 is:( move 4 , 8 ; move 3 , 7 )  decode:( move 4 , 8 ; move 3 , 3 / 4 ) 
[967] c:3 is:loop 0 , 3 , move ua , 0 - 2  decode:loop 0 , 3 , move ua , 0 - 2 
[968] c:3 is:( move 3 , 6 ; move 4 , 9 )  decode:( move 3 , 6 ; move 4 , 9 ) 
[969] c:0 is:loop 0 , 5 , move v0 , v0  decode:( move 3 , 6 ; move 4 , 4 ) 
[970] c:0 is:( move 9 , 2 ; move 3 , 8 )  decode:( move 9 , 2 ; move 3 , 9 + 4 ) 
[971] c:0 is:( move 9 , 4 ; move 7 , 2 )  decode:( move 9 , 4 ; move ua + ul , 2 ) 
[972] c:3 is:( move 4 , 8 ; move 8 , 2 )  decode:( move 4 , 8 ; move 8 , 2 ) 
[973] c:3 is:( move 3 , 6 ; move 8 , 5 )  decode:( move 3 , 6 ; move 8 , 5 ) 
[974] c:0 is:( move 9 , 3 ; move 6 , 4 )  decode:( move 9 , 3 ; move ua , 4 ) 
[975] c:0 is:loop 0 , 2 , move ua + 2 , 2  decode:( move ua + 2 , 2 ; move 9 , 2 ) 
[976] c:0 is:loop 0 , 2 , move 0 - 2 , ul  decode:( move 0 - 2 , 0 ; move 3 , ul ) 
[977] c:3 is:( move 5 , 6 ; move 9 , 2 )  decode:( move 5 , 6 ; move 9 , 2 ) 
[978] c:3 is:( move 4 , 9 ; move 4 , 5 )  decode:( move 4 , 9 ; move 4 , 5 ) 
[979] c:3 is:( move 2 , 9 ; move 9 , 2 )  decode:( move 2 , 9 ; move 9 , 2 ) 
[980] c:0 is:loop 0 , 4 , move 4 , 9 / 8  decode:loop 0 , 4 , move 4 , 0 - 8 
[981] c:3 is:( move 5 , 4 ; move 5 , 8 )  decode:( move 5 , 4 ; move 5 , 8 ) 
[982] c:3 is:( move 3 , 9 ; move 5 , 5 )  decode:( move 3 , 9 ; move 5 , 5 ) 
[983] c:0 is:( move 5 , 9 ; move 3 , 5 )  decode:( move ul - ua , 6 ; move 3 , 5 ) 
[984] c:0 is:( move 9 , 3 ; move 8 , 2 )  decode:( move 9 , 3 ; move ua + 2 , 2 ) 
[985] c:3 is:( move 9 , 8 ; move 4 , 2 )  decode:( move 9 , 8 ; move 4 , 2 ) 
[986] c:0 is:( move 3 , 8 ; move 4 , 8 )  decode:loop 0 , 2 , move 3 + v0 , 8 
[987] c:3 is:loop 0 , 4 , move 0 - ua , 2  decode:loop 0 , 4 , move 0 - ua , 2 
[988] c:0 is:loop 0 , 6 , move v0 , v0  decode:loop 0 , 4 , move ua - 3 , v0 - 8 
[989] c:3 is:( move 4 , 7 ; move 5 , 7 )  decode:( move 4 , 7 ; move 5 , 7 ) 
[990] c:2 is:loop 0 , 3 , move ua , 0 - 3  decode:loop 0 , 3 , move ua , 0 - 3 
[991] c:0 is:( move 9 , 3 ; move 9 , 2 )  decode:loop 0 , 2 , move 3 * 3 , 3 - v0 
[992] c:2 is:( move 4 , 9 ; move 3 , 7 )  decode:( move 4 , 9 ; move 3 , 7 ) 
[993] c:0 is:loop 0 , 3 , move 0 - ua , 3  decode:loop 0 , 3 , move ua , 3 
[994] c:0 is:loop 0 , ua , move 3 + 2 , 2  decode:loop 0 , 4 , move ua - ul , 5 - v0 
[995] c:2 is:( move 3 , 4 ; move 8 , 8 )  decode:( move 3 , 4 ; move 8 , 8 ) 
[996] c:3 is:( move 3 , 9 ; move 9 , 2 )  decode:( move 3 , 9 ; move 9 , 2 ) 
[997] c:3 is:( move 5 , 9 ; move 4 , 5 )  decode:( move 5 , 9 ; move 4 , 5 ) 
[998] c:3 is:( move 9 , 6 ; move 3 , 5 )  decode:( move 9 , 6 ; move 3 , 5 ) 
[999] c:3 is:( move 2 , 9 ; move 4 , 8 )  decode:( move 2 , 9 ; move 4 , 8 ) 
[1000] c:1 is:loop 0 , 3 , move 0 - 2 , ul  decode:loop 0 , 3 , move 2 , ul 
[1001] c:3 is:loop 0 , 2 , move 0 - ua , 4  decode:loop 0 , 2 , move 0 - ua , 4 
[1002] c:3 is:( move 4 , 8 ; move 9 , 2 )  decode:( move 4 , 8 ; move 9 , 2 ) 
[1003] c:0 is:( move 5 , 6 ; move 4 , 8 )  decode:( move ul - ua , 6 ; move 4 , 8 ) 
[1004] c:3 is:( move 9 , 9 ; move 3 , 2 )  decode:( move 9 , 9 ; move 3 , 2 ) 
[1005] c:3 is:( move 9 , 5 ; move 5 , 4 )  decode:( move 9 , 5 ; move 5 , 4 ) 
[1006] c:3 is:( move 4 , 6 ; move 9 , 4 )  decode:( move 4 , 6 ; move 9 , 4 ) 
[1007] c:3 is:loop 0 , 3 , move ua + 2 , 2  decode:loop 0 , 3 , move ua + 2 , 2 
[1008] c:3 is:( move 5 , 7 ; move 4 , 7 )  decode:( move 5 , 7 ; move 4 , 7 ) 
[1009] c:0 is:loop 0 , 2 , move ua , 0 - 4  decode:( move ua , 0 - 3 ; move ua , 4 ) 
[1010] c:3 is:( move 9 , 3 ; move 3 , 8 )  decode:( move 9 , 3 ; move 3 , 8 ) 
[1011] c:3 is:( move 4 , 6 ; move 4 , 9 )  decode:( move 4 , 6 ; move 4 , 9 ) 
[1012] c:3 is:( move 3 , 9 ; move 4 , 7 )  decode:( move 3 , 9 ; move 4 , 7 ) 
[1013] c:3 is:loop 0 , 4 , move ua , 0 - 2  decode:loop 0 , 4 , move ua , 0 - 2 
[1014] c:3 is:( move 9 , 3 ; move 7 , 4 )  decode:( move 9 , 3 ; move 7 , 4 ) 
[1015] c:3 is:( move 4 , 9 ; move 5 , 5 )  decode:( move 4 , 9 ; move 5 , 5 ) 
[1016] c:3 is:( move 4 , 9 ; move 8 , 2 )  decode:( move 4 , 9 ; move 8 , 2 ) 
[1017] c:3 is:( move 4 , 9 ; move 4 , 6 )  decode:( move 4 , 9 ; move 4 , 6 ) 
[1018] c:3 is:loop 0 , 2 , move 0 - ua , 4  decode:loop 0 , 2 , move 0 - ua , 4 
[1019] c:3 is:( move 3 , 9 ; move 3 , 8 )  decode:( move 3 , 9 ; move 3 , 8 ) 
[1020] c:0 is:( move 8 , 6 ; move 7 , 2 )  decode:( move 8 , 6 ; move ua , 2 ) 
[1021] c:0 is:( move 9 , 8 ; move 3 , 4 )  decode:( move ua + 3 , 9 ; move 3 , 4 ) 
[1022] c:2 is:loop 0 , 3 , move ua , 0 - 4  decode:loop 0 , 3 , move v0 + ua , 0 - 4 
[1023] c:0 is:loop 0 , 2 , move ua + 2 , 4  decode:( move 9 , 4 ; move ua + 2 , 4 ) 
[1024] c:3 is:( move 4 , 4 ; move 8 , 8 )  decode:( move 4 , 4 ; move 8 , 8 ) 
[1025] c:0 is:loop 0 , 2 , move 3 - ua , 2  decode:( move 3 , 2 ; move 3 - ua , 2 ) 
[1026] c:0 is:( move 9 , 3 ; move 8 , 4 )  decode:( move 9 , 3 ; move 9 , 4 ) 
[1027] c:3 is:( move 9 , 9 ; move 4 , 2 )  decode:( move 9 , 9 ; move 4 , 2 ) 
[1028] c:3 is:( move 9 , 3 ; move 3 , 9 )  decode:( move 9 , 3 ; move 3 , 9 ) 
[1029] c:3 is:loop 0 , 4 , move ua + 2 , 2  decode:loop 0 , 4 , move ua + 2 , 2 
[1030] c:0 is:loop 0 , 4 , move 0 - ua , 3  decode:loop 0 , 4 , move v0 - ua , 3 
[1031] c:0 is:loop 0 , 5 , move 0 - ua , 2  decode:loop 0 , 4 , move ua - ua , 0 - v0 
[1032] c:3 is:( move 3 , 9 ; move 8 , 4 )  decode:( move 3 , 9 ; move 8 , 4 ) 
[1033] c:3 is:( move 5 , 9 ; move 8 , 2 )  decode:( move 5 , 9 ; move 8 , 2 ) 
[1034] c:3 is:( move 9 , 2 ; move 9 , 4 )  decode:( move 9 , 2 ; move 9 , 4 ) 
[1035] c:3 is:( move 5 , 9 ; move 2 , 8 )  decode:( move 5 , 9 ; move 2 , 8 ) 
[1036] c:3 is:loop 0 , 3 , move 0 - 3 , ul  decode:loop 0 , 3 , move 0 - 3 , ul 
[1037] c:3 is:( move 4 , 9 ; move 9 , 2 )  decode:( move 4 , 9 ; move 9 , 2 ) 
[1038] c:0 is:loop 0 , ua , move 3 + 3 , 2  decode:loop 0 , 4 , move ua , 2 
[1039] c:3 is:( move 3 , 9 ; move 4 , 8 )  decode:( move 3 , 9 ; move 4 , 8 ) 
[1040] c:3 is:( move 4 , 9 ; move 4 , 7 )  decode:( move 4 , 9 ; move 4 , 7 ) 
[1041] c:0 is:loop 0 , 2 , move 0 - 4 , ul  decode:loop 0 , 2 , move 0 - 4 , 2 - 3 
[1042] c:3 is:loop 0 , 3 , move 0 - ua , 4  decode:loop 0 , 3 , move 0 - ua , 4 
[1043] c:3 is:( move 5 , 9 ; move 4 , 6 )  decode:( move 5 , 9 ; move 4 , 6 ) 
[1044] c:0 is:loop 0 , 5 , move ua , 0 - 2  decode:loop 0 , 4 , move ua + ul , 0 - 8 
[1045] c:0 is:loop 0 , 4 , move 0 - 2 , ul  decode:loop 0 , 4 , move 0 - 2 , 4 * 3 
[1046] c:3 is:( move 9 , 6 ; move 7 , 2 )  decode:( move 9 , 6 ; move 7 , 2 ) 
[1047] c:3 is:( move 4 , 8 ; move 8 , 4 )  decode:( move 4 , 8 ; move 8 , 4 ) 
[1048] c:2 is:loop 0 , 3 , move 2 - ua , 2  decode:loop 0 , 3 , move 2 - ua , 2 
[1049] c:3 is:loop 0 , 3 , move ua - 2 , 2  decode:loop 0 , 3 , move ua - 2 , 2 
[1050] c:3 is:( move 4 , 9 ; move 3 , 8 )  decode:( move 4 , 9 ; move 3 , 8 ) 
[1051] c:0 is:( move 6 , 9 ; move 3 , 6 )  decode:( move ua , 9 ; move 3 , 6 ) 
[1052] c:3 is:loop 0 , 4 , move 0 - ua , 4  decode:loop 0 , 4 , move 0 - ua , 4 
[1053] c:3 is:loop 0 , 2 , move 2 - ua , 4  decode:loop 0 , 2 , move 2 - ua , 4 
[1054] c:3 is:( move 4 , 9 ; move 3 , 9 )  decode:( move 4 , 9 ; move 3 , 9 ) 
[1055] c:0 is:( move 9 , 3 ; move 9 , 4 )  decode:( 9 , 3 , 3 , 3 ; move 9 / v0 
[1056] c:3 is:loop 0 , 4 , move ua , 0 - 4  decode:loop 0 , 4 , move ua , 0 - 4 
[1057] c:0 is:( move 9 , 9 ; move 2 , 5 )  decode:( move 9 , 9 ; move 4 - ua , 5 ) 
[1058] c:0 is:loop 0 , 5 , move ua , 0 - 3  decode:loop 0 , 3 , move ua , 0 - 3 
[1059] c:0 is:loop 0 , 5 , move 0 - ua , 3  decode:loop loop loop 0 , 4 , move ua , 3 
[1060] c:3 is:( move 4 , 8 ; move 4 , 9 )  decode:( move 4 , 8 ; move 4 , 9 ) 
[1061] c:0 is:loop 0 , 2 , move 2 , ua / 2  decode:move 4 , 2 / 3 
[1062] c:3 is:( move 9 , 9 ; move 5 , 2 )  decode:( move 9 , 9 ; move 5 , 2 ) 
[1063] c:3 is:loop 0 , 3 , move 0 - 4 , ul  decode:loop 0 , 3 , move 0 - 4 , ul 
[1064] c:0 is:( move 9 , 6 ; move 8 , 2 )  decode:( move 9 , 6 ; move ua + 2 , 2 ) 
[1065] c:3 is:( move 5 , 9 ; move 4 , 7 )  decode:( move 5 , 9 ; move 4 , 7 ) 
[1066] c:0 is:( move 9 , 8 ; move 4 , 4 )  decode:( move 9 , ua * ua ; move 4 , 4 ) 
[1067] c:3 is:( move 5 , 9 ; move 3 , 8 )  decode:( move 5 , 9 ; move 3 , 8 ) 
[1068] c:3 is:loop 0 , 3 , move ua + 2 , 4  decode:loop 0 , 3 , move ua + 2 , 4 
[1069] c:3 is:loop 0 , 3 , move 3 - ua , 2  decode:loop 0 , 3 , move 3 - ua , 2 
[1070] c:0 is:loop 0 , 2 , move 4 - ua , 2  decode:loop 0 , 2 , move ua - 4 , 2 
[1071] c:0 is:loop 0 , 4 , move 0 - 3 , ul  decode:loop 0 , 4 , move 3 - ua , ul 
[1072] c:0 is:( move 6 , 9 ; move 7 , 3 )  decode:( move 6 , 9 ; move 7 , 0 - 3 ) 
[1073] c:0 is:loop 0 , 2 , move 3 , ua / 2  decode:move 3 * 3 , 3 
[1074] c:0 is:loop 0 , 5 , move ua + 2 , 3  decode:loop 0 , 4 , move v0 - 8 - 4 - 4 
[1075] c:0 is:loop 0 , 4 , move ua - 3 , 2  decode:loop 0 , 4 , move 3 , 2 
[1076] c:0 is:loop 0 , 6 , move 2 , 0 - ul  decode:loop 0 , 4 , move 3 - ua , 0 - 8 
[1077] c:0 is:( move 5 , 9 ; move 4 , 8 )  decode:( move ul - ua , 9 ; move 4 , 8 ) 
[1078] c:0 is:loop 0 , 5 , move 0 - ua , 4  decode:loop 0 , 4 , move ua ,    4 
[1079] c:3 is:loop 0 , 2 , move ua , 3 / 2  decode:loop 0 , 2 , move ua , 3 / 2 
[1080] c:0 is:loop 0 , 5 , move ua - 2 , 2  decode:loop 0 , 4 , move ua - 2 , 2 
[1081] c:0 is:loop 0 , ua , move 0 - 4 , 5  decode:loop 0 , 4 , move 0 - 4 , 5 
[1082] c:3 is:( move 9 , 9 ; move 4 , 4 )  decode:( move 9 , 9 ; move 4 , 4 ) 
[1083] c:0 is:loop 0 , ua , move 3 , 3 + 4  decode:loop 0 , 4 , move 4 , 0 - 4 / 3 
[1084] c:3 is:loop 0 , 2 , move 3 - ua , 4  decode:loop 0 , 2 , move 3 - ua , 4 
[1085] c:3 is:( move 3 , 9 ; move 5 , 9 )  decode:( move 3 , 9 ; move 5 , 9 ) 
[1086] c:0 is:( move ua , 0 ; move 2 , 2 )  decode:( move ua , ul ; move 4 - ua , 2 ) 
[1087] c:3 is:loop 0 , 2 , move 2 , ua / 3  decode:loop 0 , 2 , move 2 , ua / 3 
[1088] c:3 is:( move 9 , 9 ; move 3 , 5 )  decode:( move 9 , 9 ; move 3 , 5 ) 
[1089] c:0 is:loop 0 , 3 , move 2 , 2 / ua  decode:loop 0 , 4 , move v0 , v0 / ua 
[1090] c:3 is:loop 0 , 4 , move 0 - 4 , ul  decode:loop 0 , 4 , move 0 - 4 , ul 
[1091] c:0 is:loop 0 , 6 , move 0 - 2 , ul  decode:loop 0 , 4 , move 3 - ua , 5 
[1092] c:3 is:( move 5 , 9 ; move 3 , 9 )  decode:( move 5 , 9 ; move 3 , 9 ) 
[1093] c:3 is:loop 0 , 3 , move 2 - ua , 4  decode:loop 0 , 3 , move 2 - ua , 4 
[1094] c:0 is:loop 0 , 4 , move ua + 2 , 4  decode:loop 0 , 4 , move 2 + ua , 4 
[1095] c:0 is:loop 0 , 5 , move 2 - ua , 2  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 2 
[1096] c:0 is:loop 0 , 5 , move ua , 0 - 4  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[1097] c:0 is:loop 0 , 3 , move 2 - ua , 5  decode:loop 0 , 3 , move 0 - 4 , 5 
[1098] c:3 is:loop 0 , 2 , move ua , 2 / 4  decode:loop 0 , 2 , move ua , 2 / 4 
[1099] c:3 is:loop 0 , 2 , move 0 - ua , 8  decode:loop 0 , 2 , move 0 - ua , 8 
[1100] c:0 is:loop 0 , 7 , move 0 - ua , 3  decode:loop 0 , 4 , move v0 - 7 , 0 - 3 
[1101] c:3 is:loop 0 , 4 , move 2 , 2 / ua  decode:loop 0 , 4 , move 2 , 2 / ua 
[1102] c:0 is:loop 0 , 2 , move 4 , 2 / ua  decode:loop 0 , 2 , move 4 , ua / ua 
[1103] c:3 is:( move 3 , 0 ; move ua , 2 )  decode:( move 3 , 0 ; move ua , 2 ) 
[1104] c:3 is:loop 0 , 3 , move ua , 3 / 2  decode:loop 0 , 3 , move ua , 3 / 2 
[1105] c:0 is:loop 0 , 4 , move 4 - ua , 2  decode:loop 0 , 4 , move ua - 4 , 2 
[1106] c:3 is:( move 9 , 9 ; move 5 , 4 )  decode:( move 9 , 9 ; move 5 , 4 ) 
[1107] c:0 is:loop 0 , 3 , move 2 - ua , 5  decode:loop 0 , 3 , move 0 - 4 , 5 
[1108] c:3 is:loop 0 , 2 , move 3 , ua / 3  decode:loop 0 , 2 , move 3 , ua / 3 
[1109] c:0 is:loop 0 , 6 , move ua + 2 , 3  decode:loop 0 , 4 , move 3 + 3 , 3 
[1110] c:0 is:loop 0 , 7 , move ua , 0 - 3  decode:loop 0 , 3 , move = = 3 - 9 - 3 
[1111] c:0 is:loop 0 , 2 , move ua , 5 * 2  decode:loop 0 , 2 , move ua , 0 - 5 / v0 
[1112] c:0 is:loop 0 , 2 , move ua , 0 - 8  decode:( move ua , 6 ; move ua , 8 ) 
[1113] c:0 is:loop 0 , 5 , move 0 - 4 , ul  decode:loop 0 , 4 , move 0 - 4 , ul 
[1114] c:0 is:loop 1 , 6 , move 0 - ua , 3  decode:loop 0 , 4 , move 0 - ua , 3 
[1115] c:0 is:( move ua , 0 ; move 2 , 3 )  decode:( move ua , 0 ; move ul , 3 ) 
[1116] c:3 is:( move 4 , 9 ; move 5 , 9 )  decode:( move 4 , 9 ; move 5 , 9 ) 
[1117] c:3 is:( move ua , 0 ; move 3 , 2 )  decode:( move ua , 0 ; move 3 , 2 ) 
[1118] c:0 is:loop 0 , 2 , move 4 - ua , 4  decode:loop 0 , 4 , move v0 , 4 
[1119] c:0 is:loop 0 , 6 , move 0 - 3 , ul  decode:0 loop 0 , 4 , move 4 , ua / ul , 0 ua 3 , 0 
[1120] c:3 is:loop 0 , 2 , move 2 , ua / 4  decode:loop 0 , 2 , move 2 , ua / 4 
[1121] c:0 is:loop 0 , 6 , move ua , 0 - 4  decode:loop 0 , 4 , move ua + ul , 0 - 0 5 2 2 / 
[1122] c:0 is:( move 2 , 0 ; move ua , 3 )  decode:move 4 * 2 , 2 move ua 0 , 3 
[1123] c:0 is:loop 0 , 5 , move ua + 2 , 4  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[1124] c:3 is:( move 6 , 3 ; move 9 , 9 )  decode:( move 6 , 3 ; move 9 , 9 ) 
[1125] c:0 is:loop 0 , 6 , move 2 - ua , 2  decode:loop 0 , 4 , move ul - ua , 0 - 4 
[1126] c:0 is:loop 0 , ua , move 2 , 2 / 4  decode:loop 0 , 4 , move 3 , 7 / 3 
[1127] c:0 is:loop 0 , 3 , move ua - 2 , 5  decode:loop 0 , 3 , move ua - 2 , v0 - 5 
[1128] c:0 is:loop 0 , 2 , move 3 , 3 / ua  decode:loop 0 , 2 , move 3 , ua / ua 
[1129] c:0 is:loop 0 , 6 , move 0 - ua , 4  decode:loop 0 , 4 , move ua + ul , 0 - 5 0 2 5 / 
[1130] c:0 is:loop 0 , 5 , move 4 , 0 - ul  decode:loop 0 , 4 , move 4 , 0 - 4 * 3 
[1131] c:0 is:loop 0 , 3 , move ua - 2 , 5  decode:loop 0 , 3 , move ua - 2 , v0 - 5 
[1132] c:0 is:loop 0 , 2 , move ua - 4 , 4  decode:loop 0 , 2 , move 2 , 4 
[1133] c:0 is:loop 0 , 7 , move ua , 0 - 4  decode:loop 0 , 4 , move ua + ul , 0 - 5 0 2 2 / 
[1134] c:0 is:loop 0 , 2 , move 3 , ua / 4  decode:( move 3 , 0 ; move 3 , ua / 4 ) 
[1135] c:0 is:loop 0 , 2 , move ua , 4 / 3  decode:( move ua , 4 * 3 ; move ua , 5 ) 
[1136] c:0 is:loop 0 , 2 , move 0 - ua , 9  decode:loop 0 , 3 , move v0 - ua , 9 
[1137] c:0 is:loop 0 , 4 , move 3 , 2 / ua  decode:loop 0 , 4 , move 4 / v0 , 2 / ua 
[1138] c:3 is:loop 0 , 3 , move 0 - ua , 8  decode:loop 0 , 3 , move 0 - ua , 8 
[1139] c:3 is:( move 2 , 2 ; move ua , 2 )  decode:( move 2 , 2 ; move ua , 2 ) 
[1140] c:0 is:( move ua , 0 ; move 2 , 4 )  decode:( move ua , 0 ; move 4 - ua , 4 ) 
[1141] c:3 is:( move 9 , 9 ; move 5 , 5 )  decode:( move 9 , 9 ; move 5 , 5 ) 
[1142] c:0 is:loop 0 , 2 , move 4 - ua , 5  decode:loop 0 , 2 , move 0 - 2 , 5 
[1143] c:0 is:loop 0 , 2 , move 3 - ua , 6  decode:( move 4 , 9 ; move 3 , 6 ) 
[1144] c:0 is:loop 0 , 3 , move ua - 3 , 5  decode:loop 0 , 3 , move 3 , 3 * 5 
[1145] c:0 is:loop 0 , 2 , move ua , 3 * 5  decode:( move ua , 8 ; move ua , 5 * 3 ) 
[1146] c:3 is:loop 0 , 2 , move ua , 0 - 9  decode:loop 0 , 2 , move ua , 0 - 9 
[1147] c:0 is:loop 2 , 7 , move 0 - ua , 2  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[1148] c:0 is:loop 0 , 3 , move 3 / 2 , ul  decode:loop 0 , 2 , move 2 , ul 
[1149] c:3 is:loop 0 , 3 , move 3 , ua / 3  decode:loop 0 , 3 , move 3 , ua / 3 
[1150] c:0 is:loop 0 , 5 , move 2 , 2 / ua  decode:loop 0 , 4 , move ua - 4 , ua / ua 
[1151] c:0 is:loop 0 , 6 , move ua + 2 , 4  decode:loop 0 , 4 , move ua + v0 , 0 - 4 
[1152] c:0 is:loop 0 , 3 , move 3 , 3 / ua  decode:loop 0 , 3 , move 3 , ua / ua 
[1153] c:0 is:loop 0 , 3 , move ua , 2 * 5  decode:loop 0 , 3 , move ua , 2 + 5 / 2 
[1154] c:3 is:( move 3 , 0 ; move 2 , ul )  decode:( move 3 , 0 ; move 2 , ul ) 
[1155] c:3 is:loop 0 , 4 , move ua , 3 / 2  decode:loop 0 , 4 , move ua , 3 / 2 
[1156] c:0 is:loop 0 , 5 , move ul , 2 - 3  decode:loop 0 , 4 , move v0 , 2 
[1157] c:0 is:loop 0 , 6 , move 3 - ua , 2  decode:loop 0 , 4 , move 4 - v0 , 4 
[1158] c:0 is:loop 0 , 2 , move 4 , 3 / ua  decode:loop 0 , 2 , move 3 + v0 , ua / ua 
[1159] c:3 is:( move 2 , 0 ; move 3 , ul )  decode:( move 2 , 0 ; move 3 , ul ) 
[1160] c:0 is:loop 0 , 7 , move ua - 2 , 2  decode:loop 0 , 4 , move ua - ul , 0 - 4 
[1161] c:3 is:( move 3 , 0 ; move ul , 2 )  decode:( move 3 , 0 ; move ul , 2 ) 
[1162] c:3 is:loop 0 , 4 , move 4 - ua , 3  decode:loop 0 , 4 , move 4 - ua , 3 
[1163] c:0 is:loop 0 , 4 , move ua - 2 , 5  decode:loop 0 , 4 , move 4 , 5 
[1164] c:0 is:loop 0 , 7 , move 0 - ua , 4  decode:0 loop 0 , 4 , move ua + ul , 0 - 8 ua 8 8 / 
[1165] c:3 is:( move 2 , 0 ; move ua , 4 )  decode:( move 2 , 0 ; move ua , 4 ) 
[1166] c:0 is:loop 0 , 2 , move 3 , 4 / ua  decode:loop 0 , 3 , move 2 , 7 
[1167] c:0 is:loop 0 , 4 , move 2 - ua , 5  decode:loop 0 , 4 , move 4 , 5 
[1168] c:0 is:loop 0 , 5 , move 2 - ua , 4  decode:loop 0 , 4 , move 2 - ua , 0 - 4 
[1169] c:3 is:loop 0 , 2 , move ua , 4 * 4  decode:loop 0 , 2 , move ua , 4 * 4 
[1170] c:3 is:( move ua , 0 ; move 4 , 2 )  decode:( move ua , 0 ; move 4 , 2 ) 
[1171] c:0 is:loop 0 , ua , move 0 - 3 , 8  decode:loop 0 , 4 , move 4 - v0 , 2 
[1172] c:0 is:loop 0 , 5 , move ua - 4 , 2  decode:loop 0 , 4 , move 3 , 3 * 8 
[1173] c:3 is:( move 4 , 0 ; move ua , 2 )  decode:( move 4 , 0 ; move ua , 2 ) 
[1174] c:3 is:loop 0 , 3 , move ua , 0 - 8  decode:loop 0 , 3 , move ua , 0 - 8 
[1175] c:0 is:( move 9 , 9 ; move 8 , 2 )  decode:( move 9 , 9 ; move ua + ul , 2 ) 
[1176] c:0 is:loop 0 , 4 , move ua - 2 , 5  decode:loop 0 , 4 , move 4 , 5 
[1177] c:3 is:loop 0 , 3 , move 3 - ua , 5  decode:loop 0 , 3 , move 3 - ua , 5 
[1178] c:1 is:( move ua , 2 ; move 2 , 3 )  decode:( move ua , 2 ; move ul , 3 ) 
[1179] c:3 is:loop 0 , 3 , move ua - 4 , 5  decode:loop 0 , 3 , move ua - 4 , 5 
[1180] c:3 is:( move 5 , 0 ; move ua , 2 )  decode:( move 5 , 0 ; move ua , 2 ) 
[1181] c:0 is:( move ua , 0 ; move 2 , 5 )  decode:( move ua , 0 ; move ua - 4 , 5 ) 
[1182] c:0 is:loop 0 , 7 , move 3 , ua - 2  decode:loop 0 , 4 , move 0 - 4 , 0 - 3 
[1183] c:3 is:loop 0 , 2 , move 4 , ua / 4  decode:loop 0 , 2 , move 4 , ua / 4 
[1184] c:0 is:loop 0 , 3 , move 3 - ua , 6  decode:( move 4 , 9 ; move ul - ua , 9 ) 
[1185] c:3 is:( move ua , 2 ; move 3 , 2 )  decode:( move ua , 2 ; move 3 , 2 ) 
[1186] c:0 is:loop 0 , 5 , move 3 - ua , 4  decode:loop 0 , 4 , move 0 - 4 , 0 - 9 
[1187] c:0 is:loop 0 , 3 , move 3 , 4 / ua  decode:loop 0 , 3 , move 3 , 2 / 5 
[1188] c:0 is:loop 0 , ua , move 0 - 4 , 8  decode:0 loop 0 , 4 , move ul - ua , 0 - 3 
[1189] c:3 is:( move 9 , 9 ; move 9 , 2 )  decode:( move 9 , 9 ; move 9 , 2 ) 
[1190] c:0 is:loop 0 , 5 , move ua , 4 * 2  decode:loop 0 , 4 , move ua , 8 
[1191] c:0 is:loop 0 , 7 , move 0 - 4 , ul  decode:loop 0 , 4 , move 0 - 5 , 0 - v0 
[1192] c:2 is:( move 4 , 0 ; move 2 , ul )  decode:( move 4 , 0 ; move 2 , ul ) 
[1193] c:0 is:loop 0 , 3 , move ua , 3 * 5  decode:loop 0 , 3 , move ua , 3 + 4 / 3 
[1194] c:3 is:loop 0 , 4 , move 3 - ua , 5  decode:loop 0 , 4 , move 3 - ua , 5 
[1195] c:0 is:loop 0 , 2 , move ua - 2 , 8  decode:loop 0 , 2 , move 4 , 8 
[1196] c:3 is:( move ua , 0 ; move 3 , 4 )  decode:( move ua , 0 ; move 3 , 4 ) 
[1197] c:0 is:loop 0 , 3 , move 0 - ua , 9  decode:loop 0 , 3 , move ua , 9 
[1198] c:3 is:( move ua , 3 ; move 2 , 2 )  decode:( move ua , 3 ; move 2 , 2 ) 
[1199] c:3 is:loop 0 , 3 , move 4 , ua / 3  decode:loop 0 , 3 , move 4 , ua / 3 
[1200] c:0 is:loop 0 , 4 , move ua , 0 - 8  decode:loop 0 , 4 , move ua - v0 , 0 - 8 
[1201] c:0 is:loop 0 , 5 , move 2 , ul / 2  decode:loop 0 , 3 , move 3 , 2 / 3 
[1202] c:3 is:loop 0 , 4 , move 0 - ua , 8  decode:loop 0 , 4 , move 0 - ua , 8 
[1203] c:0 is:loop 0 , 2 , move 4 , 4 / ua  decode:loop 0 , 4 , move v0 + ul , 4 / ua 
[1204] c:3 is:( move ua , 0 ; move 5 , 2 )  decode:( move ua , 0 ; move 5 , 2 ) 
[1205] c:0 is:loop 0 , 5 , move ua - 3 , 4  decode:0 0 loop 0 , 4 , move 4 , 4 - 3 
[1206] c:3 is:( move 2 , 2 ; move 2 , ul )  decode:( move 2 , 2 ; move 2 , ul ) 
[1207] c:0 is:loop 0 , 6 , move ua , 2 - 4  decode:loop 0 , 4 , move ua + ul , 0 - 8 
[1208] c:0 is:loop 0 , 3 , move ua - 3 , 6  decode:loop 0 , 3 , move 3 - ua , 6 
[1209] c:3 is:( move 2 , 0 ; move 4 , ul )  decode:( move 2 , 0 ; move 4 , ul ) 
[1210] c:0 is:( move 4 , 0 ; move ua , 3 )  decode:( move 3 , 0 ; move ua , 3 ) 
[1211] c:3 is:( move 2 , 0 ; move ua , 5 )  decode:( move 2 , 0 ; move ua , 5 ) 
[1212] c:3 is:loop 0 , 4 , move ua - 3 , 5  decode:loop 0 , 4 , move ua - 3 , 5 
[1213] c:0 is:loop 0 , 2 , move ua , 3 + 8  decode:( move ua , 0 ; move ua , ua / 4 ) 
[1214] c:0 is:( move 4 , 0 ; move ul , 2 )  decode:( move 4 , 2 ; move ul , 0 - 2 ) 
[1215] c:3 is:( move ua , 0 ; move 4 , 3 )  decode:( move ua , 0 ; move 4 , 3 ) 
[1216] c:3 is:loop 0 , 4 , move 2 , 4 / ua  decode:loop 0 , 4 , move 2 , 4 / ua 
[1217] c:0 is:loop 0 , 2 , move 2 + ua , 9  decode:loop 0 , 3 , move v0 + ua , 9 
[1218] c:0 is:loop 0 , 2 , move 2 - ua , 8  decode:loop 0 , 2 , move 2 - ua , ua / 4 
[1219] c:3 is:loop 0 , 3 , move ua , 0 - 9  decode:loop 0 , 3 , move ua , 0 - 9 
[1220] c:0 is:loop 0 , 6 , move ul , 4 + 2  decode:( move 3 , ua / 4 ; move 3 , ul ) 
[1221] c:0 is:( move 3 , 9 ; move 9 , 8 )  decode:( move 3 , 9 ; move 9 , 9 + 4 ) 
[1222] c:0 is:loop 0 , 7 , move ua - 3 , 2  decode:loop 0 , 4 , move 4 , 0 - 4 
[1223] c:0 is:loop 0 , 2 , move 4 , 4 / ua  decode:loop 0 , 4 , move v0 + ul , 4 / ua 
[1224] c:0 is:loop 0 , 3 , move ua , 4 * 4  decode:loop 0 , 3 , move v0 - ua , 4 * 4 
[1225] c:0 is:loop 0 , 4 , move 3 / 2 , ul  decode:loop 0 , 4 , move ul , ul 
[1226] c:0 is:loop 0 , 3 , move ua , 5 / 2  decode:loop 0 , 3 , move ua , 0 - 5 / 2 
[1227] c:3 is:( move 2 , 3 ; move ua , 2 )  decode:( move 2 , 3 ; move ua , 2 ) 
[1228] c:0 is:loop 0 , 2 , move ua , 5 / 3  decode:( move ua , 8 ; move ua , 8 ) 
[1229] c:3 is:( move 3 , 2 ; move ua , 2 )  decode:( move 3 , 2 ; move ua , 2 ) 
[1230] c:0 is:loop 0 , 4 , move ua , 2 * 5  decode:loop 0 , 4 , move ua , 5 * 3 
[1231] c:3 is:loop 0 , 2 , move 2 - ua , 9  decode:loop 0 , 2 , move 2 - ua , 9 
[1232] c:1 is:( move 4 , 0 ; move 3 , ul )  decode:( move 4 , 0 ; move 3 , ul ) 
[1233] c:3 is:loop 0 , 4 , move ua , 4 * 4  decode:loop 0 , 4 , move ua , 4 * 4 
[1234] c:0 is:loop 0 , 7 , move ua , 2 - 4  decode:loop 0 , 4 , move : : - ua , ua 0 5 ua 4 * 
[1235] c:3 is:( move ua , 0 ; move 6 , 2 )  decode:( move ua , 0 ; move 6 , 2 ) 
[1236] c:0 is:loop 0 , 5 , move 4 , 4 + ul  decode:loop 0 , 4 , move 4 , 5 
[1237] c:3 is:( move ua , 3 ; move 3 , 2 )  decode:( move ua , 3 ; move 3 , 2 ) 
[1238] c:3 is:( move 3 , 0 ; move ul , 4 )  decode:( move 3 , 0 ; move ul , 4 ) 
[1239] c:3 is:loop 0 , 3 , move 4 , ua / 4  decode:loop 0 , 3 , move 4 , ua / 4 
[1240] c:0 is:loop 0 , 7 , move 4 , ua - 2  decode:loop 0 , 4 , move ua - ul , 0 - 5 0 
[1241] c:0 is:loop 0 , 4 , move 4 - ua , 5  decode:loop 0 , 3 , move 0 - 3 , 4 * 3 
[1242] c:3 is:( move 5 , 0 ; move 2 , ul )  decode:( move 5 , 0 ; move 2 , ul ) 
[1243] c:3 is:loop 0 , 3 , move 5 , ua / 3  decode:loop 0 , 3 , move 5 , ua / 3 
[1244] c:0 is:loop 0 , 3 , move ua - 3 , 7  decode:loop 0 , 3 , move 3 - ua , 7 
[1245] c:3 is:( move 3 , 0 ; move ua , 5 )  decode:( move 3 , 0 ; move ua , 5 ) 
[1246] c:3 is:( move ua , 0 ; move 4 , 4 )  decode:( move ua , 0 ; move 4 , 4 ) 
[1247] c:3 is:loop 0 , 3 , move 3 - ua , 7  decode:loop 0 , 3 , move 3 - ua , 7 
[1248] c:0 is:loop 0 , 3 , move 2 + ua , 9  decode:loop 0 , 3 , move 8 , 9 
[1249] c:0 is:( move 4 , 0 ; move ul , 3 )  decode:move ua , 2 / 3 
[1250] c:3 is:( move 2 , 3 ; move 2 , ul )  decode:( move 2 , 3 ; move 2 , ul ) 
[1251] c:3 is:( move 2 , ul ; move 3 , 2 )  decode:( move 2 , ul ; move 3 , 2 ) 
[1252] c:0 is:loop 0 , 3 , move 2 - ua , 8  decode:loop 0 , 3 , move 0 - 4 , 8 
[1253] c:3 is:( move ua , 0 ; move 5 , 3 )  decode:( move ua , 0 ; move 5 , 3 ) 
[1254] c:3 is:( move 3 , 2 ; move 2 , ul )  decode:( move 3 , 2 ; move 2 , ul ) 
[1255] c:0 is:loop 0 , 6 , move 4 , ua - 3  decode:loop 0 , 4 , move 3 - ua , 0 - 3 
[1256] c:3 is:( move ua , 2 ; move 4 , 2 )  decode:( move ua , 2 ; move 4 , 2 ) 
[1257] c:3 is:( move 6 , 0 ; move ua , 2 )  decode:( move 6 , 0 ; move ua , 2 ) 
[1258] c:0 is:loop 0 , 4 , move ul , 2 / 4  decode:loop 0 , 2 , move 2 , 2 / 4 
[1259] c:3 is:( move 3 , 2 ; move ul , 2 )  decode:( move 3 , 2 ; move ul , 2 ) 
[1260] c:0 is:loop 0 , 7 , move ul , 3 + 3  decode:loop 0 , 4 , move 2 , 4 * 3 
[1261] c:0 is:loop 0 , 5 , move 2 , 4 / ua  decode:loop 0 , 4 , move 3 , 5 / 3 
[1262] c:0 is:loop 0 , 4 , move ua , 5 / 2  decode:loop 0 , 4 , move ua , 0 - 4 
[1263] c:3 is:loop 0 , 3 , move ua - 2 , 8  decode:loop 0 , 3 , move ua - 2 , 8 
[1264] c:3 is:( move 3 , 0 ; move 4 , ul )  decode:( move 3 , 0 ; move 4 , ul ) 
[1265] c:0 is:loop 0 , 6 , move 2 , 3 / ua  decode:loop 0 , 4 , move 3 , 3 / 7 
[1266] c:3 is:( move 3 , 3 ; move ua , 2 )  decode:( move 3 , 3 ; move ua , 2 ) 
[1267] c:3 is:( move 2 , 0 ; move 5 , ul )  decode:( move 2 , 0 ; move 5 , ul ) 
[1268] c:3 is:( move ul , 2 ; move 3 , 2 )  decode:( move ul , 2 ; move 3 , 2 ) 
[1269] c:3 is:( move 2 , 4 ; move ua , 2 )  decode:( move 2 , 4 ; move ua , 2 ) 
[1270] c:0 is:loop 0 , 3 , move 4 - ua , 6  decode:( move 3 , 9 ; move 3 , 4 / 3 ) 
[1271] c:0 is:loop 0 , 6 , move ua , 4 * 2  decode:loop 0 , 4 , move 4 + 2 , ua / 5 
[1272] c:3 is:loop 0 , 4 , move 0 - ua , 9  decode:loop 0 , 4 , move 0 - ua , 9 
[1273] c:3 is:( move 2 , 2 ; move 3 , ul )  decode:( move 2 , 2 ; move 3 , ul ) 
[1274] c:0 is:loop 0 , 6 , move ul , 4 + 3  decode:loop 0 , 4 , move ul , ul 
[1275] c:3 is:loop 0 , 2 , move 2 - ua , 9  decode:loop 0 , 2 , move 2 - ua , 9 
[1276] c:0 is:loop 0 , 5 , move 3 / 2 , ul  decode:loop 0 , 3 , move 2 , ul 
[1277] c:0 is:loop 0 , 4 , move ua / 2 , 5  decode:loop 0 , 4 , move ua - 3 , 5 
[1278] c:0 is:loop 0 , 4 , move ua , 3 * 5  decode:loop 0 , 4 , move ua , 0 - 5 / 3 
[1279] c:0 is:( move ua , 0 ; move 2 , 6 )  decode:( move ua , 0 ; move 2 , 3 - 3 ) 
[1280] c:3 is:loop 0 , 4 , move 0 - ua , 9  decode:loop 0 , 4 , move 0 - ua , 9 
[1281] c:0 is:loop 0 , 7 , move 2 , ua - 4  decode:loop 0 , 4 , move 4 - ua , 4 
[1282] c:1 is:( move 2 , 0 ; move ua , 6 )  decode:( move 2 , 0 ; move ua , ul + 4 ) 
[1283] c:3 is:( move 3 , ul ; move 2 , 2 )  decode:( move 3 , ul ; move 2 , 2 ) 
[1284] c:3 is:( move ul , 0 ; move 5 , 2 )  decode:( move ul , 0 ; move 5 , 2 ) 
[1285] c:3 is:( move ua , 4 ; move 2 , 2 )  decode:( move ua , 4 ; move 2 , 2 ) 
[1286] c:3 is:loop 0 , 4 , move ua , 0 - 9  decode:loop 0 , 4 , move ua , 0 - 9 
[1287] c:3 is:( move 4 , 2 ; move ua , 2 )  decode:( move 4 , 2 ; move ua , 2 ) 
[1288] c:0 is:loop 0 , 5 , move 4 , ua - 4  decode:loop 0 , 4 , move 5 , 0 - 4 
[1289] c:0 is:loop 0 , 4 , move ua , 3 * 5  decode:loop 0 , 4 , move ua , 0 - 5 / 3 
[1290] c:3 is:( move ua , 0 ; move 3 , 5 )  decode:( move ua , 0 ; move 3 , 5 ) 
[1291] c:3 is:loop 0 , 4 , move ua , 0 - 9  decode:loop 0 , 4 , move ua , 0 - 9 
[1292] c:0 is:loop 0 , 3 , move ua , 3 + 8  decode:loop 0 , 3 , move ua , 2 + 4 / 4 
[1293] c:3 is:( move 4 , 2 ; move ul , 2 )  decode:( move 4 , 2 ; move ul , 2 ) 
[1294] c:3 is:loop 0 , 4 , move 4 - ua , 6  decode:loop 0 , 4 , move 4 - ua , 6 
[1295] c:3 is:( move 3 , 3 ; move ul , 2 )  decode:( move 3 , 3 ; move ul , 2 ) 
[1296] c:3 is:( move ua , 0 ; move 4 , 5 )  decode:( move ua , 0 ; move 4 , 5 ) 
[1297] c:3 is:( move 4 , 2 ; move 2 , ul )  decode:( move 4 , 2 ; move 2 , ul ) 
[1298] c:0 is:loop 0 , 3 , move 6 , ua / 3  decode:loop 0 , 3 , move = ua , ua / 3 
[1299] c:0 is:loop 0 , 5 , move 2 , ul / 4  decode:loop 0 , 4 , move ul + v0 , ul / ua 
[1300] c:3 is:loop 0 , 3 , move ua - 3 , 8  decode:loop 0 , 3 , move ua - 3 , 8 
[1301] c:3 is:( move 5 , 0 ; move 3 , ul )  decode:( move 5 , 0 ; move 3 , ul ) 
[1302] c:0 is:loop 0 , 5 , move ua , 4 * 4  decode:loop 0 , 4 , move ua , 0 - 9 
[1303] c:3 is:loop 0 , 3 , move 3 - ua , 8  decode:loop 0 , 3 , move 3 - ua , 8 
[1304] c:0 is:loop 0 , 5 , move ul , 4 * 3  decode:loop 0 , 4 , move ul , v0 / 3 
[1305] c:3 is:( move 3 , ul ; move 2 , 3 )  decode:( move 3 , ul ; move 2 , 3 ) 
[1306] c:0 is:loop 0 , 7 , move 4 + ul , 3  decode:loop loop loop 0 , 4 , move 0 - 4 , 9 
[1307] c:3 is:( move 2 , 2 ; move 4 , ul )  decode:( move 2 , 2 ; move 4 , ul ) 
[1308] c:0 is:loop 0 , 4 , move ua , 5 / 3  decode:loop 0 , 4 , move ua , ua / 4 
[1309] c:3 is:( move ua , 4 ; move 3 , 2 )  decode:( move ua , 4 ; move 3 , 2 ) 
[1310] c:0 is:loop 0 , 4 , move 5 / 2 , ul  decode:loop 0 , 3 , move 3 , ul 
[1311] c:3 is:( move 3 , ul ; move 3 , 2 )  decode:( move 3 , ul ; move 3 , 2 ) 
[1312] c:3 is:( move ua , 0 ; move 7 , 2 )  decode:( move ua , 0 ; move 7 , 2 ) 
[1313] c:3 is:( move 3 , 0 ; move 5 , ul )  decode:( move 3 , 0 ; move 5 , ul ) 
[1314] c:0 is:loop 0 , 6 , move 3 / 2 , ul  decode:loop 0 , 4 , move ul - 4 , 2 - 3 
[1315] c:3 is:( move 4 , 3 ; move ua , 2 )  decode:( move 4 , 3 ; move ua , 2 ) 
[1316] c:0 is:loop 0 , 7 , move 4 , ua - 3  decode:loop 0 , 3 , move 3 - ua , 3 3 - 3 
[1317] c:3 is:( move 2 , ul ; move 4 , 2 )  decode:( move 2 , ul ; move 4 , 2 ) 
[1318] c:0 is:loop 0 , 7 , move 3 , ua - 4  decode:loop 0 , 4 , move 3 - ua , 0 - 5 
[1319] c:0 is:loop 0 , 6 , move 2 , 4 / ua  decode:loop 0 , 4 , move 3 , 4 / 3 
[1320] c:3 is:( move ul , 2 ; move 4 , 2 )  decode:( move ul , 2 ; move 4 , 2 ) 
[1321] c:3 is:loop 0 , 4 , move 2 - ua , 8  decode:loop 0 , 4 , move 2 - ua , 8 
[1322] c:0 is:loop 0 , 2 , move ua , 4 * 7  decode:( move ua , 6 ; move ua , 9 ) 
[1323] c:3 is:loop 0 , 2 , move 5 , ua / 5  decode:loop 0 , 2 , move 5 , ua / 5 
[1324] c:0 is:( move 5 , 2 ; move ua , 2 )  decode:( move 4 , 2 ; move ua , 2 ) 
[1325] c:0 is:( move ul , 3 ; move 3 , 2 )  decode:( move 3 , 3 ; move 2 , 3 ) 
[1326] c:3 is:( move 4 , 0 ; move ul , 4 )  decode:( move 4 , 0 ; move ul , 4 ) 
[1327] c:3 is:( move 4 , 2 ; move ua , 3 )  decode:( move 4 , 2 ; move ua , 3 ) 
[1328] c:0 is:loop 0 , 5 , move ul - 4 , 4  decode:loop 0 , 4 , move 3 - ua , 4 * 4 
[1329] c:3 is:( move ua , 0 ; move 5 , 4 )  decode:( move ua , 0 ; move 5 , 4 ) 
[1330] c:0 is:( move ua , 3 + move 3 , 2 )  decode:move 0 , , ua + move 3 , 2 ) 
[1331] c:3 is:( move 3 , 2 ; move ua , 4 )  decode:( move 3 , 2 ; move ua , 4 ) 
[1332] c:3 is:( move ua , 3 ; move 4 , 2 )  decode:( move ua , 3 ; move 4 , 2 ) 
[1333] c:0 is:loop 0 , 4 , move ua , 3 + 8  decode:loop 0 , 4 , move ua , ua / 8 
[1334] c:3 is:( move 2 , 3 ; move ua , 4 )  decode:( move 2 , 3 ; move ua , 4 ) 
[1335] c:3 is:( move 9 , 9 ; move 4 , 9 )  decode:( move 9 , 9 ; move 4 , 9 ) 
[1336] c:0 is:loop 0 , 7 , move 2 , ul / 2  decode:loop 0 , 4 , move 3 , 3 / 3 
[1337] c:0 is:loop 0 , 3 , move ua - 9 , 2  decode:loop 0 , 3 , move 3 , 2 
[1338] c:3 is:( move 3 , 3 ; move 2 , ul )  decode:( move 3 , 3 ; move 2 , ul ) 
[1339] c:1 is:( move ua , 0 ; move 2 , 7 )  decode:( move ua , 0 ; move 4 - ua , 7 ) 
[1340] c:3 is:( move 2 , 5 ; move ua , 2 )  decode:( move 2 , 5 ; move ua , 2 ) 
[1341] c:3 is:( move ua , 3 ; move 2 , 4 )  decode:( move ua , 3 ; move 2 , 4 ) 
[1342] c:0 is:loop 0 , 7 , move ul - 4 , 2  decode:loop 0 , 4 - 4 - 4 1 - 4 , 4 
[1343] c:3 is:( move 4 , ul ; move 2 , 2 )  decode:( move 4 , ul ; move 2 , 2 ) 
[1344] c:0 is:( move 5 , 0 ; move ua , 4 )  decode:( move 5 , 0 ; move ul - ua , 4 ) 
[1345] c:3 is:( move 3 , 4 ; move ua , 2 )  decode:( move 3 , 4 ; move ua , 2 ) 
[1346] c:3 is:loop 0 , 4 , move ua - 4 , 6  decode:loop 0 , 4 , move ua - 4 , 6 
[1347] c:0 is:loop 0 , 2 , move 3 , ul / 6  decode:loop 0 , 2 , move 3 , 6 / v0 
[1348] c:3 is:( move 3 , 2 ; move 3 , ul )  decode:( move 3 , 2 ; move 3 , ul ) 
[1349] c:0 is:loop 0 , 7 , move 2 , 3 / ua  decode:loop 0 , 4 , move 3 , 3 / 4 
[1350] c:3 is:loop 0 , 3 , move ua - 4 , 7  decode:loop 0 , 3 , move ua - 4 , 7 
[1351] c:3 is:( move 2 , 3 ; move 3 , ul )  decode:( move 2 , 3 ; move 3 , ul ) 
[1352] c:0 is:loop 0 , 7 , move ua , 3 * 3  decode:loop 0 , 4 , move ua , 0 - 9 
[1353] c:0 is:( move ua , 2 ; move 2 , 5 )  decode:( move ua , ua ; move ua - 4 , 5 ) 
[1354] c:3 is:( move ua , 2 ; move 3 , 4 )  decode:( move ua , 2 ; move 3 , 4 ) 
[1355] c:3 is:loop 0 , 4 , move ua - 2 , 8  decode:loop 0 , 4 , move ua - 2 , 8 
[1356] c:3 is:( move 4 , 4 ; move ua , 2 )  decode:( move 4 , 4 ; move ua , 2 ) 
[1357] c:3 is:( move 3 , ul ; move 2 , 4 )  decode:( move 3 , ul ; move 2 , 4 ) 
[1358] c:3 is:( move 5 , 3 ; move ua , 2 )  decode:( move 5 , 3 ; move ua , 2 ) 
[1359] c:0 is:( move 4 , ul ; move 3 , 2 )  decode:( move 4 , ua / 4 ; move 3 , 2 ) 
[1360] c:3 is:( move ua , 5 ; move 3 , 2 )  decode:( move ua , 5 ; move 3 , 2 ) 
[1361] c:3 is:( move 6 , 2 ; move ua , 2 )  decode:( move 6 , 2 ; move ua , 2 ) 
[1362] c:0 is:loop 0 , 4 , move 3 - ua , 8  decode:loop 0 , 4 , move 0 - 3 , 8 
[1363] c:0 is:loop 0 , 7 , move 4 , ua - 4  decode:loop 0 , 4 , move 4 - ua , 5 - 9 
[1364] c:3 is:( move 3 , 0 ; move ua , 7 )  decode:( move 3 , 0 ; move ua , 7 ) 
[1365] c:3 is:( move 6 , 0 ; move ua , 4 )  decode:( move 6 , 0 ; move ua , 4 ) 
[1366] c:3 is:( move 4 , 2 ; move ua , 4 )  decode:( move 4 , 2 ; move ua , 4 ) 
[1367] c:3 is:( move 3 , 3 ; move 3 , ul )  decode:( move 3 , 3 ; move 3 , ul ) 
[1368] c:0 is:loop 0 , 7 , move 4 - ua , 4  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[1369] c:0 is:loop 0 , 4 , move 4 , ua / 5  decode:loop 0 , 4 , move 4 , 5 
[1370] c:0 is:loop 0 , 6 , move ua , 4 * 4  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[1371] c:3 is:( move 3 , 5 ; move ua , 2 )  decode:( move 3 , 5 ; move ua , 2 ) 
[1372] c:3 is:( move 4 , 0 ; move 5 , ul )  decode:( move 4 , 0 ; move 5 , ul ) 
[1373] c:3 is:( move 3 , 4 ; move ul , 2 )  decode:( move 3 , 4 ; move ul , 2 ) 
[1374] c:3 is:( move 2 , 4 ; move 3 , ul )  decode:( move 2 , 4 ; move 3 , ul ) 
[1375] c:3 is:( move 2 , 2 ; move ua , 6 )  decode:( move 2 , 2 ; move ua , 6 ) 
[1376] c:3 is:( move 2 , 4 ; move ua , 4 )  decode:( move 2 , 4 ; move ua , 4 ) 
[1377] c:3 is:( move 3 , 4 ; move ua , 3 )  decode:( move 3 , 4 ; move ua , 3 ) 
[1378] c:3 is:( move ua , 2 ; move 2 , 6 )  decode:( move ua , 2 ; move 2 , 6 ) 
[1379] c:3 is:( move ua , 2 ; move 3 , 5 )  decode:( move ua , 2 ; move 3 , 5 ) 
[1380] c:3 is:( move ua , 3 ; move 3 , 4 )  decode:( move ua , 3 ; move 3 , 4 ) 
[1381] c:0 is:( move ua , 3 ; move 4 , 3 )  decode:loop 0 , 2 , move ua , 3 
[1382] c:0 is:loop 0 , 7 , move 2 , 4 / ua  decode:loop 0 , 4 , move ua - 3 , ua / 5 
[1383] c:3 is:( move 2 , 3 ; move 4 , ul )  decode:( move 2 , 3 ; move 4 , ul ) 
[1384] c:3 is:( move ul , 4 ; move 3 , 2 )  decode:( move ul , 4 ; move 3 , 2 ) 
[1385] c:3 is:( move 3 , ul ; move 4 , 2 )  decode:( move 3 , ul ; move 4 , 2 ) 
[1386] c:0 is:( move 8 , 0 ; move ua , 2 )  decode:( move 4 + 4 , 0 ; move ua , 2 ) 
[1387] c:0 is:loop 0 , 4 , move 2 , ua / 7  decode:loop 0 , 3 , move 3 , ua / 7 
[1388] c:0 is:loop 0 , 6 , move ua , 0 - 9  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[1389] c:3 is:( move 5 , 0 ; move ul , 4 )  decode:( move 5 , 0 ; move ul , 4 ) 
[1390] c:0 is:loop 0 , 6 , move 2 , ul / 4  decode:loop 0 , 4 , move 3 , 3 + 9 
[1391] c:0 is:loop 0 , 3 , move 3 , ua / 7  decode:loop 0 , 3 , move 3 , 7 
[1392] c:0 is:loop 0 , 4 , move 3 , ua / 6  decode:loop 0 , 3 , move 3 - ua , ul 
[1393] c:0 is:( move 5 , 0 ; move 4 , ul )  decode:( move 4 , 0 ; move 4 , ul ) 
[1394] c:3 is:loop 0 , 3 , move ua - 4 , 8  decode:loop 0 , 3 , move ua - 4 , 8 
[1395] c:3 is:( move 3 , 2 ; move 4 , ul )  decode:( move 3 , 2 ; move 4 , ul ) 
[1396] c:3 is:loop 0 , 4 , move ua - 4 , 7  decode:loop 0 , 4 , move ua - 4 , 7 
[1397] c:0 is:loop 0 , 2 , move 4 , ul / 6  decode:loop 0 , 2 , move 4 , 6 / 0 
[1398] c:3 is:( move ua , 4 ; move 2 , 4 )  decode:( move ua , 4 ; move 2 , 4 ) 
[1399] c:3 is:( move ua , 3 ; move 5 , 2 )  decode:( move ua , 3 ; move 5 , 2 ) 
[1400] c:3 is:( move 4 , 2 ; move 3 , ul )  decode:( move 4 , 2 ; move 3 , ul ) 
[1401] c:3 is:( move ua , 4 ; move 3 , 3 )  decode:( move ua , 4 ; move 3 , 3 ) 
[1402] c:3 is:loop 0 , 3 , move 4 , ua / 6  decode:loop 0 , 3 , move 4 , ua / 6 
[1403] c:0 is:( move 2 , ul ; move 5 , 2 )  decode:( move 4 - ua , ul ; move 4 , 2 ) 
[1404] c:3 is:loop 0 , 4 , move 4 - ua , 7  decode:loop 0 , 4 , move 4 - ua , 7 
[1405] c:3 is:loop 0 , 4 , move ua - 3 , 8  decode:loop 0 , 4 , move ua - 3 , 8 
[1406] c:0 is:loop 0 , 4 , move ua / 4 , 5  decode:loop 0 , 3 , move 2 , 5 
[1407] c:3 is:( move 3 , 4 ; move 2 , ul )  decode:( move 3 , 4 ; move 2 , ul ) 
[1408] c:3 is:( move 4 , 3 ; move ul , 2 )  decode:( move 4 , 3 ; move ul , 2 ) 
[1409] c:2 is:( move 4 , 3 ; move 2 , ul )  decode:( move 4 , 3 ; move 2 , ul ) 
[1410] c:3 is:( move ua , 2 ; move 4 , 4 )  decode:( move ua , 2 ; move 4 , 4 ) 
[1411] c:3 is:( move 3 , 2 ; move ua , 5 )  decode:( move 3 , 2 ; move ua , 5 ) 
[1412] c:3 is:( move 2 , 3 ; move ua , 5 )  decode:( move 2 , 3 ; move ua , 5 ) 
[1413] c:0 is:loop 0 , 4 , move 9 - ua , 2  decode:loop 0 , 3 , move 3 , 2 
[1414] c:3 is:loop 0 , 3 , move 4 - ua , 8  decode:loop 0 , 3 , move 4 - ua , 8 
[1415] c:0 is:loop 0 , 4 , move ua , 7 * 3  decode:loop 0 , 3 , move ua , 7 * 3 
[1416] c:3 is:( move ua , 0 ; move 2 , 8 )  decode:( move ua , 0 ; move 2 , 8 ) 
[1417] c:0 is:( move 2 , 0 ; move ua , 8 )  decode:( move 2 , 0 ; move ua , ua * ua ) 
[1418] c:3 is:( move 2 , ul ; move 3 , 4 )  decode:( move 2 , ul ; move 3 , 4 ) 
[1419] c:0 is:loop 0 , 2 , move ua , 9 * 3  decode:( move ua , ua * ua ; move ua , 2 ) 
[1420] c:0 is:( move ul , 0 ; move 3 , 6 )  decode:move 4 , * 3 , ; 3 
[1421] c:0 is:loop 0 , 6 , move ul , 2 / 4  decode:loop 0 , 3 , move 2 , 4 / 3 
[1422] c:3 is:( move ua , 4 ; move 4 , 2 )  decode:( move ua , 4 ; move 4 , 2 ) 
[1423] c:3 is:( move ua , 0 ; move 6 , 4 )  decode:( move ua , 0 ; move 6 , 4 ) 
[1424] c:0 is:loop 0 , 6 , move ua + 2 , 9  decode:loop 0 , 4 , move ua + 3 , 0 - 9 
[1425] c:3 is:( move 3 , ul ; move 3 , 4 )  decode:( move 3 , ul ; move 3 , 4 ) 
[1426] c:0 is:( move 2 , ul ; move 5 , 3 )  decode:( move 3 + 3 , ul ; move 3 , 3 ) 
[1427] c:3 is:( move 2 , 0 ; move 8 , ul )  decode:( move 2 , 0 ; move 8 , ul ) 
[1428] c:0 is:( move 2 , 7 ; move ua , 2 )  decode:( move 2 , ul - 3 ; move ua , 2 ) 
[1429] c:3 is:( move 4 , ul ; move 2 , 4 )  decode:( move 4 , ul ; move 2 , 4 ) 
[1430] c:3 is:( move 3 , 6 ; move ua , 2 )  decode:( move 3 , 6 ; move ua , 2 ) 
[1431] c:3 is:( move ua , 6 ; move 3 , 2 )  decode:( move ua , 6 ; move 3 , 2 ) 
[1432] c:3 is:( move ua , 3 ; move 3 , 5 )  decode:( move ua , 3 ; move 3 , 5 ) 
[1433] c:3 is:( move 3 , 4 ; move ua , 4 )  decode:( move 3 , 4 ; move ua , 4 ) 
[1434] c:3 is:( move 2 , 4 ; move ua , 5 )  decode:( move 2 , 4 ; move ua , 5 ) 
[1435] c:0 is:( move 2 , 2 / move ua , 3 )  decode:( move 3 / 2 , move ua , 3 ) 
[1436] c:3 is:( move 3 , ul ; move 5 , 2 )  decode:( move 3 , ul ; move 5 , 2 ) 
[1437] c:0 is:loop 0 , 7 , move ul , 4 * 3  decode:loop 0 , 3 , move 4 - ua , v0 - 3 
[1438] c:3 is:( move 3 , 2 ; move 5 , ul )  decode:( move 3 , 2 ; move 5 , ul ) 
[1439] c:3 is:( move ua , 3 ; move 4 , 4 )  decode:( move ua , 3 ; move 4 , 4 ) 
[1440] c:0 is:loop 0 , 4 , move 4 , ua / 6  decode:loop 0 , 3 , move 4 , 0 - 4 / 3 
[1441] c:0 is:( move 3 , 2 ; move ua , 6 )  decode:( move 3 , 2 ; move ua , 5 ) 
[1442] c:3 is:( move ul , 4 ; move 4 , 2 )  decode:( move ul , 4 ; move 4 , 2 ) 
[1443] c:0 is:loop 0 , 3 , move ua - 9 , 4  decode:loop 0 , 3 , move 3 , 4 
[1444] c:3 is:loop 0 , 3 , move ua , 3 * 9  decode:loop 0 , 3 , move ua , 3 * 9 
[1445] c:3 is:( move 5 , 2 ; move ua , 4 )  decode:( move 5 , 2 ; move ua , 4 ) 
[1446] c:3 is:( move ua , 0 ; move 9 , 2 )  decode:( move ua , 0 ; move 9 , 2 ) 
[1447] c:0 is:( move ua + 4 , move 2 , 4 )  decode:( move ua , 9 ; move 4 , 4 ) 
[1448] c:3 is:( move ua , 2 ; move 5 , 4 )  decode:( move ua , 2 ; move 5 , 4 ) 
[1449] c:3 is:( move 4 , 4 ; move 2 , ul )  decode:( move 4 , 4 ; move 2 , ul ) 
[1450] c:0 is:( move ua , 3 ; move 6 , 2 )  decode:( move ua , 3 ; move ua , 2 ) 
[1451] c:3 is:( move 3 , 0 ; move 7 , ul )  decode:( move 3 , 0 ; move 7 , ul ) 
[1452] c:3 is:( move 2 , 5 ; move 3 , ul )  decode:( move 2 , 5 ; move 3 , ul ) 
[1453] c:0 is:( move 7 , 0 ; move ua , 4 )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[1454] c:3 is:( move 4 , 0 ; move ua , 7 )  decode:( move 4 , 0 ; move ua , 7 ) 
[1455] c:0 is:loop 0 , 7 , move ul , 2 / 4  decode:loop 0 , 4 , move 2 , 3 / 4 
[1456] c:0 is:( move 3 , 5 ; move ua , 3 )  decode:( move 3 , ua * ua ; move ua , 3 ) 
[1457] c:3 is:( move 2 , 3 ; move ua , 6 )  decode:( move 2 , 3 ; move ua , 6 ) 
[1458] c:3 is:( move ua , 2 ; move 3 , 6 )  decode:( move ua , 2 ; move 3 , 6 ) 
[1459] c:3 is:( move 3 , 3 ; move 4 , ul )  decode:( move 3 , 3 ; move 4 , ul ) 
[1460] c:3 is:loop 0 , 3 , move ua - 4 , 9  decode:loop 0 , 3 , move ua - 4 , 9 
[1461] c:3 is:( move 9 , 0 ; move ua , 2 )  decode:( move 9 , 0 ; move ua , 2 ) 
[1462] c:3 is:( move ua , 0 ; move 7 , 4 )  decode:( move ua , 0 ; move 7 , 4 ) 
[1463] c:3 is:( move 4 , 3 ; move ua , 4 )  decode:( move 4 , 3 ; move ua , 4 ) 
[1464] c:0 is:loop 0 , 4 , move 3 , ua / 7  decode:loop 0 , 4 , move 3 , 3 / 7 
[1465] c:3 is:( move 2 , 4 ; move 4 , ul )  decode:( move 2 , 4 ; move 4 , ul ) 
[1466] c:3 is:( move 4 , 2 ; move 4 , ul )  decode:( move 4 , 2 ; move 4 , ul ) 
[1467] c:3 is:( move 2 , 2 ; move ua , 7 )  decode:( move 2 , 2 ; move ua , 7 ) 
[1468] c:3 is:( move 4 , 5 ; move ua , 2 )  decode:( move 4 , 5 ; move ua , 2 ) 
[1469] c:3 is:( move ua , 0 ; move 6 , 5 )  decode:( move ua , 0 ; move 6 , 5 ) 
[1470] c:0 is:( move 4 , 3 ; move 3 , ul )  decode:( move 3 , 3 ; move 4 , ul ) 
[1471] c:3 is:( move 4 , ul ; move 4 , 2 )  decode:( move 4 , ul ; move 4 , 2 ) 
[1472] c:3 is:( move ua , 4 ; move 5 , 2 )  decode:( move ua , 4 ; move 5 , 2 ) 
[1473] c:3 is:( move 2 , ul ; move 4 , 4 )  decode:( move 2 , ul ; move 4 , 4 ) 
[1474] c:3 is:( move ua , 5 ; move 4 , 2 )  decode:( move ua , 5 ; move 4 , 2 ) 
[1475] c:0 is:loop 0 , 7 , move ua , 4 * 4  decode:loop 0 , 4 , move ua + ul , 4 * 4 
[1476] c:3 is:( move ua , 2 ; move 4 , 5 )  decode:( move ua , 2 ; move 4 , 5 ) 
[1477] c:3 is:( move 4 , 2 ; move ua , 5 )  decode:( move 4 , 2 ; move ua , 5 ) 
[1478] c:0 is:loop 0 , 3 , move 4 , ua / 7  decode:loop 0 , 3 , move 4 , 3 / 7 
[1479] c:0 is:loop 0 , 4 , move ua , 4 * 7  decode:loop 0 , 4 , move ua , 4 * 4 
[1480] c:3 is:loop 0 , 4 , move ua , 7 / 3  decode:loop 0 , 4 , move ua , 7 / 3 
[1481] c:0 is:( move 6 , 0 ; move ua , 5 )  decode:( move ul - ua , 0 ; move ua , 5 ) 
[1482] c:3 is:( move ua , 4 ; move 2 , 5 )  decode:( move ua , 4 ; move 2 , 5 ) 
[1483] c:3 is:( move 3 , 4 ; move 3 , ul )  decode:( move 3 , 4 ; move 3 , ul ) 
[1484] c:3 is:( move 6 , 3 ; move ua , 2 )  decode:( move 6 , 3 ; move ua , 2 ) 
[1485] c:3 is:( move ua , 0 ; move 4 , 8 )  decode:( move ua , 0 ; move 4 , 8 ) 
[1486] c:3 is:( move 7 , 3 ; move ua , 2 )  decode:( move 7 , 3 ; move ua , 2 ) 
[1487] c:3 is:( move 3 , 4 ; move 4 , ul )  decode:( move 3 , 4 ; move 4 , ul ) 
[1488] c:3 is:( move 3 , 3 ; move ua , 6 )  decode:( move 3 , 3 ; move ua , 6 ) 
[1489] c:0 is:( move 4 , 0 ; move ua , 8 )  decode:( move 4 , 0 ; move ua , ua * ua ) 
[1490] c:3 is:( move 3 , 0 ; move 8 , ul )  decode:( move 3 , 0 ; move 8 , ul ) 
[1491] c:3 is:( move 4 , 3 ; move ul , 4 )  decode:( move 4 , 3 ; move ul , 4 ) 
[1492] c:3 is:( move 4 , 3 ; move 4 , ul )  decode:( move 4 , 3 ; move 4 , ul ) 
[1493] c:3 is:( move 6 , 4 ; move ua , 2 )  decode:( move 6 , 4 ; move ua , 2 ) 
[1494] c:0 is:( move ua , 3 ; move 3 , 6 )  decode:( move ua , 3 ; move 3 , 2 + 4 ) 
[1495] c:3 is:( move 2 , 5 ; move ua , 5 )  decode:( move 2 , 5 ; move ua , 5 ) 
[1496] c:0 is:loop 0 , 4 , move 4 - ua , 9  decode:loop 0 , 3 , move 3 , 9 
[1497] c:0 is:( move 4 , 6 ; move ua , 2 )  decode:( move 4 , : ua / ; move ua , 2 ) 
[1498] c:3 is:( move ua , 0 ; move 8 , 4 )  decode:( move ua , 0 ; move 8 , 4 ) 
[1499] c:3 is:( move 3 , ul ; move 5 , 3 )  decode:( move 3 , ul ; move 5 , 3 ) 
[1500] c:0 is:( move 8 , 2 ; move ua , 2 )  decode:( move ua + 2 , 2 ; move ua , 2 ) 
[1501] c:0 is:loop 0 , 7 , move 4 / 3 , ul  decode:loop 0 , 3 , move 3 , 4 / 3 
[1502] c:3 is:( move 3 , 3 ; move 5 , ul )  decode:( move 3 , 3 ; move 5 , ul ) 
[1503] c:3 is:( move 2 , 8 ; move ua , 2 )  decode:( move 2 , 8 ; move ua , 2 ) 
[1504] c:3 is:( move 4 , 5 ; move ua , 3 )  decode:( move 4 , 5 ; move ua , 3 ) 
[1505] c:3 is:loop 0 , 4 , move ul , 2 / 8  decode:loop 0 , 4 , move ul , 2 / 8 
[1506] c:3 is:( move ua , 4 ; move 4 , 4 )  decode:( move ua , 4 ; move 4 , 4 ) 
[1507] c:3 is:( move ul , 0 ; move 4 , 7 )  decode:( move ul , 0 ; move 4 , 7 ) 
[1508] c:0 is:loop 0 , 4 , move ua , 8 / 3  decode:loop 0 , 4 , move ua , 0 - 3  / 4 
[1509] c:3 is:( move 4 , 2 ; move 5 , ul )  decode:( move 4 , 2 ; move 5 , ul ) 
[1510] c:3 is:( move ua , 3 ; move 4 , 5 )  decode:( move ua , 3 ; move 4 , 5 ) 
[1511] c:3 is:( move 5 , 4 ; move ul , 2 )  decode:( move 5 , 4 ; move ul , 2 ) 
[1512] c:3 is:( move 4 , 4 ; move 3 , ul )  decode:( move 4 , 4 ; move 3 , ul ) 
[1513] c:3 is:( move 6 , 2 ; move ua , 4 )  decode:( move 6 , 2 ; move ua , 4 ) 
[1514] c:0 is:( move 4 , 5 ; move 2 , ul )  decode:( move 3 , 5 ; move 2 , ul ) 
[1515] c:3 is:( move 3 , 3 ; move ul , 5 )  decode:( move 3 , 3 ; move ul , 5 ) 
[1516] c:3 is:( move 4 , 3 ; move ua , 5 )  decode:( move 4 , 3 ; move ua , 5 ) 
[1517] c:3 is:( move 4 , 4 ; move ua , 4 )  decode:( move 4 , 4 ; move ua , 4 ) 
[1518] c:0 is:( move ua , 2 ; move 5 , 5 )  decode:( move ua , ua / 3 ; move 5 , 5 ) 
[1519] c:3 is:( move 5 , 2 ; move ua , 5 )  decode:( move 5 , 2 ; move ua , 5 ) 
[1520] c:3 is:( move 5 , 2 ; move 4 , ul )  decode:( move 5 , 2 ; move 4 , ul ) 
[1521] c:3 is:( move 5 , 5 ; move ua , 2 )  decode:( move 5 , 5 ; move ua , 2 ) 
[1522] c:3 is:( move ua , 3 ; move 5 , 4 )  decode:( move ua , 3 ; move 5 , 4 ) 
[1523] c:0 is:( move 4 , 5 ; move ul , 2 )  decode:( move ul , 5 ; move 3 - ua , 2 ) 
[1524] c:3 is:( move ua , 6 ; move 4 , 2 )  decode:( move ua , 6 ; move 4 , 2 ) 
[1525] c:3 is:( move 3 , 2 ; move ua , 7 )  decode:( move 3 , 2 ; move ua , 7 ) 
[1526] c:3 is:( move ul , 6 ; move 3 , 2 )  decode:( move ul , 6 ; move 3 , 2 ) 
[1527] c:3 is:( move 5 , 3 ; move 3 , ul )  decode:( move 5 , 3 ; move 3 , ul ) 
[1528] c:3 is:( move 4 , 0 ; move 7 , ul )  decode:( move 4 , 0 ; move 7 , ul ) 
[1529] c:3 is:( move 4 , ul ; move 5 , 2 )  decode:( move 4 , ul ; move 5 , 2 ) 
[1530] c:0 is:loop 0 , 4 , move ua , 3 * 9  decode:0 0 loop 0 , 4 , move ua , ua * 3 
[1531] c:1 is:( move ua , 3 ; move 2 , 7 )  decode:( move ua , 3 ; move 3 , 7 ) 
[1532] c:0 is:loop 0 , 4 , move ua , 7 * 5  decode:loop 0 , 4 , move ua , 0 - 9 
[1533] c:3 is:( move 5 , ul ; move 2 , 4 )  decode:( move 5 , ul ; move 2 , 4 ) 
[1534] c:3 is:( move ua , 5 ; move 5 , 2 )  decode:( move ua , 5 ; move 5 , 2 ) 
[1535] c:3 is:( move ua , 4 ; move 3 , 5 )  decode:( move ua , 4 ; move 3 , 5 ) 
[1536] c:0 is:loop 0 , 4 , move ua - 8 , 5  decode:loop 0 , 4 , move = 1 - 4 , ua / 4 
[1537] c:3 is:( move 2 , ul ; move 4 , 5 )  decode:( move 2 , ul ; move 4 , 5 ) 
[1538] c:3 is:( move 3 , 7 ; move ua , 2 )  decode:( move 3 , 7 ; move ua , 2 ) 
[1539] c:3 is:( move ua , 2 ; move 2 , 8 )  decode:( move ua , 2 ; move 2 , 8 ) 
[1540] c:3 is:( move 2 , 4 ; move 5 , ul )  decode:( move 2 , 4 ; move 5 , ul ) 
[1541] c:3 is:( move 3 , ul ; move 4 , 4 )  decode:( move 3 , ul ; move 4 , 4 ) 
[1542] c:3 is:( move ul , 4 ; move 3 , 4 )  decode:( move ul , 4 ; move 3 , 4 ) 
[1543] c:0 is:loop 0 , 3 , move ua , 4 * 9  decode:loop 0 , 3 , move ua , 0 - 8 
[1544] c:3 is:( move ua , 5 ; move 3 , 4 )  decode:( move ua , 5 ; move 3 , 4 ) 
[1545] c:3 is:( move 3 , 4 ; move ua , 5 )  decode:( move 3 , 4 ; move ua , 5 ) 
[1546] c:0 is:loop 0 , 4 , move 3 , ua / 8  decode:loop 0 , 4 , move 3 , 3 / 4 
[1547] c:3 is:( move 4 , 2 ; move ul , 5 )  decode:( move 4 , 2 ; move ul , 5 ) 
[1548] c:3 is:( move 5 , ul ; move 4 , 2 )  decode:( move 5 , ul ; move 4 , 2 ) 
[1549] c:0 is:loop 0 , 2 , move ua , 9 / 4  decode:( move ua , 4 / 3 ; move ua , 4 ) 
[1550] c:0 is:( move ua , 0 ; move 9 , 3 )  decode:( move 9 , 0 ; move ua + 3 , 3 ) 
[1551] c:3 is:( move 2 , ul ; move 7 , 2 )  decode:( move 2 , ul ; move 7 , 2 ) 
[1552] c:3 is:( move 4 , ul ; move 3 , 4 )  decode:( move 4 , ul ; move 3 , 4 ) 
[1553] c:3 is:( move ua , 2 ; move 3 , 7 )  decode:( move ua , 2 ; move 3 , 7 ) 
[1554] c:0 is:loop 0 , 4 , move 9 - ua , 5  decode:loop 0 , 4 , move 3 , 5 
[1555] c:3 is:( move ua , 8 ; move 3 , 2 )  decode:( move ua , 8 ; move 3 , 2 ) 
[1556] c:3 is:( move 3 , 3 ; move ua , 7 )  decode:( move 3 , 3 ; move ua , 7 ) 
[1557] c:3 is:( move 5 , ul ; move 5 , 2 )  decode:( move 5 , ul ; move 5 , 2 ) 
[1558] c:3 is:( move ua , 4 ; move 4 , 5 )  decode:( move ua , 4 ; move 4 , 5 ) 
[1559] c:0 is:( move 4 , 5 ; move 3 , ul )  decode:( move 3 , 5 ; move 3 , ul ) 
[1560] c:0 is:( move ul , 0 ; move 4 , 8 )  decode:( move ul , 0 ; move 4 , ua * ua ) 
[1561] c:3 is:( move ua , 0 ; move 8 , 5 )  decode:( move ua , 0 ; move 8 , 5 ) 
[1562] c:3 is:( move 4 , 5 ; move ua , 4 )  decode:( move 4 , 5 ; move ua , 4 ) 
[1563] c:3 is:( move 5 , 3 ; move 4 , ul )  decode:( move 5 , 3 ; move 4 , ul ) 
[1564] c:3 is:( move ul , 4 ; move 4 , 4 )  decode:( move ul , 4 ; move 4 , 4 ) 
[1565] c:3 is:( move 2 , 4 ; move ua , 7 )  decode:( move 2 , 4 ; move ua , 7 ) 
[1566] c:3 is:( move 5 , 6 ; move ua , 2 )  decode:( move 5 , 6 ; move ua , 2 ) 
[1567] c:0 is:loop 0 , 4 , move 3 , ua / 9  decode:loop 0 , 3 , move 3 , 3 / 7 
[1568] c:0 is:( move ua , 3 ; move 8 , 2 )  decode:( move 5 , 3 ; move 8 , 2 ) 
[1569] c:0 is:( move 3 , 4 / move ua , 2 )  decode:move 4 * 2 , 2 / 3 
[1570] c:3 is:( move ua , 6 ; move 3 , 4 )  decode:( move ua , 6 ; move 3 , 4 ) 
[1571] c:0 is:( move 8 , 3 ; move ua , 2 )  decode:( move ua + 2 , 3 ; move ua , 2 ) 
[1572] c:3 is:( move 5 , 4 ; move ua , 4 )  decode:( move 5 , 4 ; move ua , 4 ) 
[1573] c:3 is:( move ua , 5 ; move 4 , 4 )  decode:( move ua , 5 ; move 4 , 4 ) 
[1574] c:0 is:( move ua , 4 - move 3 , 4 )  decode:( move ua , 4 / move 3 , 4 ) 
[1575] c:3 is:( move 7 , 2 ; move ua , 4 )  decode:( move 7 , 2 ; move ua , 4 ) 
[1576] c:3 is:( move ua , 6 ; move 5 , 2 )  decode:( move ua , 6 ; move 5 , 2 ) 
[1577] c:3 is:( move 5 , 3 ; move ua , 5 )  decode:( move 5 , 3 ; move ua , 5 ) 
[1578] c:0 is:loop 0 , 4 , move ua , 8 * 5  decode:loop 0 , 4 , move ua , 0 - 5 / 5 
[1579] c:0 is:loop 0 , 4 , move ua - 9 , 5  decode:loop 0 , 4 , move 4 - ua , 5 
[1580] c:3 is:( move ua , 2 ; move 7 , 4 )  decode:( move ua , 2 ; move 7 , 4 ) 
[1581] c:3 is:( move 4 , 0 ; move ua , 9 )  decode:( move 4 , 0 ; move ua , 9 ) 
[1582] c:0 is:( move 3 , 2 / move ua , 4 )  decode:( move 3 , ul ; move ua , ul ) 
[1583] c:3 is:( move 4 , ul ; move 4 , 4 )  decode:( move 4 , ul ; move 4 , 4 ) 
[1584] c:3 is:( move 4 , 0 ; move 8 , ul )  decode:( move 4 , 0 ; move 8 , ul ) 
[1585] c:3 is:( move 5 , 2 ; move 5 , ul )  decode:( move 5 , 2 ; move 5 , ul ) 
[1586] c:3 is:( move 3 , 5 ; move ua , 5 )  decode:( move 3 , 5 ; move ua , 5 ) 
[1587] c:3 is:( move 3 , ul ; move 7 , 2 )  decode:( move 3 , ul ; move 7 , 2 ) 
[1588] c:0 is:loop 0 , 4 , move ua , 4 * 9  decode:loop 0 , 4 , move 4 + v0 , 2 * 3 
[1589] c:3 is:( move 3 , 5 ; move 4 , ul )  decode:( move 3 , 5 ; move 4 , ul ) 
[1590] c:3 is:( move 9 , 0 ; move ua , 4 )  decode:( move 9 , 0 ; move ua , 4 ) 
[1591] c:3 is:( move ul , 3 ; move 4 , 5 )  decode:( move ul , 3 ; move 4 , 5 ) 
[1592] c:3 is:( move 3 , ul ; move 4 , 5 )  decode:( move 3 , ul ; move 4 , 5 ) 
[1593] c:0 is:( move ua , 4 ; move 7 , 2 )  decode:( move ua , 4 ; move ua + ul , 2 ) 
[1594] c:3 is:( move 4 , 4 ; move 4 , ul )  decode:( move 4 , 4 ; move 4 , ul ) 
[1595] c:3 is:( move 3 , 6 ; move 3 , ul )  decode:( move 3 , 6 ; move 3 , ul ) 
[1596] c:0 is:( move ua , 6 ; move 2 , 5 )  decode:( move ua , 6 ; move 3 , 5 ) 
[1597] c:0 is:( move 7 , 4 ; move ua , 2 )  decode:( move ua + ul , 4 ; move 5 , 2 ) 
[1598] c:3 is:( move 4 , ul ; move 3 , 5 )  decode:( move 4 , ul ; move 3 , 5 ) 
[1599] c:3 is:( move 2 , 7 ; move ua , 4 )  decode:( move 2 , 7 ; move ua , 4 ) 
[1600] c:3 is:( move ua , 2 ; move 8 , 3 )  decode:( move ua , 2 ; move 8 , 3 ) 
[1601] c:3 is:( move 2 , 9 ; move ua , 2 )  decode:( move 2 , 9 ; move ua , 2 ) 
[1602] c:3 is:( move 5 , 5 ; move ua , 3 )  decode:( move 5 , 5 ; move ua , 3 ) 
[1603] c:3 is:( move 2 , 3 ; move ua , 8 )  decode:( move 2 , 3 ; move ua , 8 ) 
[1604] c:0 is:( move 8 , 2 ; move ua , 3 )  decode:( move 8 , 2 ; move ua , 0 - 3 ) 
[1605] c:0 is:( move 8 , 2 ; move 2 , ul )  decode:( move 8 , 2 ; move 4 - ua , 2 ) 
[1606] c:3 is:( move 4 , 4 ; move ua , 5 )  decode:( move 4 , 4 ; move ua , 5 ) 
[1607] c:0 is:( move ua , 3 ; move 2 , 8 )  decode:( move ua , 3 ; move 2 , 5 ) 
[1608] c:3 is:( move ua , 3 ; move 9 , 2 )  decode:( move ua , 3 ; move 9 , 2 ) 
[1609] c:0 is:( move 2 , ul - move 7 , 2 )  decode:( move 2 , ul ; move 7 , 2 / 2 ) 
[1610] c:3 is:( move ua , 3 ; move 7 , 4 )  decode:( move ua , 3 ; move 7 , 4 ) 
[1611] c:3 is:( move 7 , ul ; move 4 , 2 )  decode:( move 7 , ul ; move 4 , 2 ) 
[1612] c:3 is:( move 8 , 2 ; move ua , 4 )  decode:( move 8 , 2 ; move ua , 4 ) 
[1613] c:3 is:( move 3 , 6 ; move 4 , ul )  decode:( move 3 , 6 ; move 4 , ul ) 
[1614] c:0 is:( move 4 , 4 / move ua , 2 )  decode:move 4 * 2 , 0 , 4 0 / v0 
[1615] c:3 is:( move 4 , ul ; move 4 , 5 )  decode:( move 4 , ul ; move 4 , 5 ) 
[1616] c:3 is:( move ua , 0 ; move 6 , 8 )  decode:( move ua , 0 ; move 6 , 8 ) 
[1617] c:3 is:( move 4 , 2 ; move ua , 8 )  decode:( move 4 , 2 ; move ua , 8 ) 
[1618] c:0 is:( move ua , 7 ; move 2 , 5 )  decode:( move ua , 7 ; move 9 , 0 - 2 ) 
[1619] c:3 is:( move 5 , 5 ; move ua , 4 )  decode:( move 5 , 5 ; move ua , 4 ) 
[1620] c:3 is:( move 3 , 2 ; move ua , 9 )  decode:( move 3 , 2 ; move ua , 9 ) 
[1621] c:3 is:( move 4 , 8 ; move ua , 2 )  decode:( move 4 , 8 ; move ua , 2 ) 
[1622] c:3 is:( move 5 , 3 ; move 5 , ul )  decode:( move 5 , 3 ; move 5 , ul ) 
[1623] c:3 is:( move 4 , 4 ; move 5 , ul )  decode:( move 4 , 4 ; move 5 , ul ) 
[1624] c:3 is:( move 4 , 5 ; move ua , 5 )  decode:( move 4 , 5 ; move ua , 5 ) 
[1625] c:3 is:( move 5 , 4 ; move 4 , ul )  decode:( move 5 , 4 ; move 4 , ul ) 
[1626] c:3 is:( move 8 , 4 ; move ua , 2 )  decode:( move 8 , 4 ; move ua , 2 ) 
[1627] c:0 is:( move 3 , 6 ; move ua , 5 )  decode:( move 3 , 0 ; move ua , 5 ) 
[1628] c:3 is:( move ua , 5 ; move 4 , 5 )  decode:( move ua , 5 ; move 4 , 5 ) 
[1629] c:0 is:( move ua , 7 ; move 5 , 2 )  decode:( move ua , 4 + 3 ; move 5 , 2 ) 
[1630] c:3 is:( move 3 , 3 ; move ua , 8 )  decode:( move 3 , 3 ; move ua , 8 ) 
[1631] c:3 is:( move ua , 2 ; move 4 , 8 )  decode:( move ua , 2 ; move 4 , 8 ) 
[1632] c:3 is:( move 3 , ul ; move 4 , 6 )  decode:( move 3 , ul ; move 4 , 6 ) 
[1633] c:3 is:( move ua , 0 ; move 5 , 9 )  decode:( move ua , 0 ; move 5 , 9 ) 
[1634] c:3 is:( move 2 , 7 ; move 4 , ul )  decode:( move 2 , 7 ; move 4 , ul ) 
[1635] c:3 is:( move ul , 4 ; move 4 , 5 )  decode:( move ul , 4 ; move 4 , 5 ) 
[1636] c:3 is:( move ua , 9 ; move 3 , 2 )  decode:( move ua , 9 ; move 3 , 2 ) 
[1637] c:3 is:( move 9 , 3 ; move ua , 2 )  decode:( move 9 , 3 ; move ua , 2 ) 
[1638] c:3 is:( move 4 , 4 ; move ul , 5 )  decode:( move 4 , 4 ; move ul , 5 ) 
[1639] c:3 is:( move 5 , ul ; move 3 , 5 )  decode:( move 5 , ul ; move 3 , 5 ) 
[1640] c:3 is:( move ua , 4 ; move 3 , 7 )  decode:( move ua , 4 ; move 3 , 7 ) 
[1641] c:3 is:( move ua , 5 ; move 7 , 2 )  decode:( move ua , 5 ; move 7 , 2 ) 
[1642] c:3 is:( move 4 , 0 ; move 9 , ul )  decode:( move 4 , 0 ; move 9 , ul ) 
[1643] c:3 is:( move 6 , 6 ; move ua , 2 )  decode:( move 6 , 6 ; move ua , 2 ) 
[1644] c:3 is:( move 5 , 4 ; move ua , 5 )  decode:( move 5 , 4 ; move ua , 5 ) 
[1645] c:3 is:( move ua , 8 ; move 4 , 2 )  decode:( move ua , 8 ; move 4 , 2 ) 
[1646] c:0 is:( move ua , 3 ; move 6 , 5 )  decode:( move ua , 3 ; move ul - ua , 5 ) 
[1647] c:3 is:( move 3 , ul ; move 8 , 2 )  decode:( move 3 , ul ; move 8 , 2 ) 
[1648] c:3 is:( move ua , 6 ; move 3 , 5 )  decode:( move ua , 6 ; move 3 , 5 ) 
[1649] c:0 is:( move ul , 0 ; move 5 , 8 )  decode:( move ul , 0 ; move 5 , ua * ua ) 
[1650] c:3 is:( move 2 , ul ; move 3 , 8 )  decode:( move 2 , ul ; move 3 , 8 ) 
[1651] c:0 is:( move ua , 4 ; move 2 , 8 )  decode:( move ua , 4 ; move 2 , 9 + 4 ) 
[1652] c:0 is:( move ua , 6 ; move 4 , 4 )  decode:( move ua , 6 ; move 5 , 4 ) 
[1653] c:3 is:( move 4 , ul ; move 8 , 2 )  decode:( move 4 , ul ; move 8 , 2 ) 
[1654] c:3 is:( move ua , 6 ; move 4 , 5 )  decode:( move ua , 6 ; move 4 , 5 ) 
[1655] c:0 is:( move ua , 3 ; move 3 , 9 )  decode:( move ua , 9 ; move 3 , 9 ) 
[1656] c:0 is:( move 4 , 7 ; move 3 , ul )  decode:( move 4 , 4 / 3 ; move 3 , ul ) 
[1657] c:0 is:( move 6 , ul ; move 6 , 2 )  decode:( move 6 , ul ; move ua , 2 ) 
[1658] c:3 is:( move 5 , 8 ; move ua , 2 )  decode:( move 5 , 8 ; move ua , 2 ) 
[1659] c:3 is:( move 4 , 2 ; move ua , 9 )  decode:( move 4 , 2 ; move ua , 9 ) 
[1660] c:3 is:( move ua , 3 ; move 8 , 4 )  decode:( move ua , 3 ; move 8 , 4 ) 
[1661] c:3 is:( move 4 , 6 ; move ua , 5 )  decode:( move 4 , 6 ; move ua , 5 ) 
[1662] c:0 is:( move ua , 5 ; move 6 , 4 )  decode:( move 6 , 5 ; move ua , 4 ) 
[1663] c:3 is:( move ua , 2 ; move 9 , 4 )  decode:( move ua , 2 ; move 9 , 4 ) 
[1664] c:0 is:( move 8 , 4 ; move ua , 3 )  decode:( move ua + 2 , 4 ; move ua , 3 ) 
[1665] c:3 is:( move 5 , 5 ; move ua , 5 )  decode:( move 5 , 5 ; move ua , 5 ) 
[1666] c:3 is:( move ua , 5 ; move 5 , 5 )  decode:( move ua , 5 ; move 5 , 5 ) 
[1667] c:3 is:( move ua , 2 ; move 4 , 9 )  decode:( move ua , 2 ; move 4 , 9 ) 
[1668] c:0 is:( move ul , 6 ; move 3 , 5 )  decode:( move ul , 6 ; move 3 , 3 / 2 ) 
[1669] c:3 is:( move 9 , 2 ; move ua , 4 )  decode:( move 9 , 2 ; move ua , 4 ) 
[1670] c:0 is:( move ua , 7 ; move 5 , 3 )  decode:( move ua , 3 / 4 ; move 5 , 3 ) 
[1671] c:3 is:( move 5 , 2 ; move ua , 8 )  decode:( move 5 , 2 ; move ua , 8 ) 
[1672] c:3 is:( move ua , 8 ; move 3 , 4 )  decode:( move ua , 8 ; move 3 , 4 ) 
[1673] c:0 is:( move 3 , ul ; move 3 , 8 )  decode:( move 3 , ul ; move 3 , ua * ua ) 
[1674] c:3 is:( move 4 , 6 ; move 4 , ul )  decode:( move 4 , 6 ; move 4 , ul ) 
[1675] c:0 is:( move ul , 4 ; move 4 , 6 )  decode:move 4 , 2 * 2 
[1676] c:0 is:( move 4 , 8 ; move ua , 3 )  decode:( move 3 , 8 ; move ua , 3 ) 
[1677] c:0 is:( move ua , 4 ; move 9 , 2 )  decode:( move ua , 9 ; move 9 , 0 - 2 ) 
[1678] c:3 is:( move 2 , 9 ; move ua , 4 )  decode:( move 2 , 9 ; move ua , 4 ) 
[1679] c:3 is:( move 4 , ul ; move 5 , 5 )  decode:( move 4 , ul ; move 5 , 5 ) 
[1680] c:0 is:( move ua , 6 ; move 7 , 2 )  decode:( move ua , 6 ; move  3 , 4 + v) 0 
[1681] c:3 is:( move ua , 9 ; move 4 , 2 )  decode:( move ua , 9 ; move 4 , 2 ) 
[1682] c:0 is:loop 0 , 4 , move ua - 8 , 8  decode:loop 0 , 4 , move 0 - v0 , 8 
[1683] c:3 is:( move ua , 0 ; move 7 , 8 )  decode:( move ua , 0 ; move 7 , 8 ) 
[1684] c:3 is:( move 3 , 6 ; move ua , 6 )  decode:( move 3 , 6 ; move ua , 6 ) 
[1685] c:0 is:( move ua , 4 / move 5 , 2 )  decode:( move ua , 4 / move 4 , 2 / 4 ) 
[1686] c:3 is:( move ua , 8 ; move 5 , 2 )  decode:( move ua , 8 ; move 5 , 2 ) 
[1687] c:3 is:( move 8 , ul ; move 4 , 2 )  decode:( move 8 , ul ; move 4 , 2 ) 
[1688] c:3 is:( move 3 , 4 ; move 7 , ul )  decode:( move 3 , 4 ; move 7 , ul ) 
[1689] c:3 is:( move 4 , 9 ; move ua , 2 )  decode:( move 4 , 9 ; move ua , 2 ) 
[1690] c:3 is:( move ua , 5 ; move 8 , 2 )  decode:( move ua , 5 ; move 8 , 2 ) 
[1691] c:0 is:( move 7 , 6 ; move ua , 2 )  decode:( move ua , 6 ; move 7 , 2 ) 
[1692] c:3 is:( move ua , 4 ; move 4 , 7 )  decode:( move ua , 4 ; move 4 , 7 ) 
[1693] c:3 is:( move ua , 3 ; move 7 , 5 )  decode:( move ua , 3 ; move 7 , 5 ) 
[1694] c:0 is:( move 5 , 4 ; move ua , 6 )  decode:( move ul - ua , ul ; move ua , 6 ) 
[1695] c:0 is:( move 3 , ul ; move 4 , 7 )  decode:( move 3 , 4 ; move 4 , 4 / ua ) 
[1696] c:0 is:( move 6 , 2 ; move ua , 8 )  decode:( move 6 , 2 ; move ua , ua * ua ) 
[1697] c:3 is:( move 8 , ul ; move 4 , 3 )  decode:( move 8 , ul ; move 4 , 3 ) 
[1698] c:3 is:( move ua , 5 ; move 7 , 4 )  decode:( move ua , 5 ; move 7 , 4 ) 
[1699] c:3 is:( move ua , 5 ; move 8 , 3 )  decode:( move ua , 5 ; move 8 , 3 ) 
[1700] c:3 is:( move ua , 9 ; move 3 , 4 )  decode:( move ua , 9 ; move 3 , 4 ) 
[1701] c:3 is:( move 5 , ul ; move 5 , 5 )  decode:( move 5 , ul ; move 5 , 5 ) 
[1702] c:3 is:( move 6 , ul ; move 3 , 6 )  decode:( move 6 , ul ; move 3 , 6 ) 
[1703] c:3 is:( move ul , 4 ; move 3 , 8 )  decode:( move ul , 4 ; move 3 , 8 ) 
[1704] c:0 is:( move 8 , 5 ; move ua , 3 )  decode:( move ua + 2 , 5 ; move ua , 3 ) 
[1705] c:3 is:( move 8 , 4 ; move 3 , ul )  decode:( move 8 , 4 ; move 3 , ul ) 
[1706] c:3 is:( move ua , 7 ; move 4 , 5 )  decode:( move ua , 7 ; move 4 , 5 ) 
[1707] c:3 is:( move 4 , 5 ; move ua , 7 )  decode:( move 4 , 5 ; move ua , 7 ) 
[1708] c:3 is:( move ua , 5 ; move 4 , 7 )  decode:( move ua , 5 ; move 4 , 7 ) 
[1709] c:3 is:( move 5 , 2 ; move ua , 9 )  decode:( move 5 , 2 ; move ua , 9 ) 
[1710] c:3 is:( move 4 , 8 ; move ua , 4 )  decode:( move 4 , 8 ; move ua , 4 ) 
[1711] c:3 is:( move 9 , 2 ; move 4 , ul )  decode:( move 9 , 2 ; move 4 , ul ) 
[1712] c:3 is:( move 5 , ul ; move 4 , 6 )  decode:( move 5 , ul ; move 4 , 6 ) 
[1713] c:3 is:( move 3 , ul ; move 3 , 9 )  decode:( move 3 , ul ; move 3 , 9 ) 
[1714] c:3 is:( move 5 , 6 ; move 4 , ul )  decode:( move 5 , 6 ; move 4 , ul ) 
[1715] c:0 is:( move ua , 3 ; move 5 , 8 )  decode:( move ua , 3 ; move 5 , ua * ua ) 
[1716] c:3 is:( move 4 , 7 ; move ua , 5 )  decode:( move 4 , 7 ; move ua , 5 ) 
[1717] c:3 is:( move ua , 3 ; move 8 , 5 )  decode:( move ua , 3 ; move 8 , 5 ) 
[1718] c:3 is:( move 8 , 6 ; move ua , 2 )  decode:( move 8 , 6 ; move ua , 2 ) 
[1719] c:0 is:( move 8 , 3 ; move ua , 5 )  decode:( move ua + 2 , 3 ; move ua , 5 ) 
[1720] c:3 is:( move ua , 8 ; move 4 , 4 )  decode:( move ua , 8 ; move 4 , 4 ) 
[1721] c:3 is:( move 3 , 9 ; move ua , 4 )  decode:( move 3 , 9 ; move ua , 4 ) 
[1722] c:3 is:( move 2 , 7 ; move ua , 7 )  decode:( move 2 , 7 ; move ua , 7 ) 
[1723] c:3 is:( move ua , 8 ; move 3 , 5 )  decode:( move ua , 8 ; move 3 , 5 ) 
[1724] c:3 is:( move 9 , ul ; move 4 , 2 )  decode:( move 9 , ul ; move 4 , 2 ) 
[1725] c:3 is:( move 8 , 0 ; move ua , 8 )  decode:( move 8 , 0 ; move ua , 8 ) 
[1726] c:3 is:( move 3 , 6 ; move ua , 7 )  decode:( move 3 , 6 ; move ua , 7 ) 
[1727] c:3 is:( move ua , 9 ; move 3 , 4 )  decode:( move ua , 9 ; move 3 , 4 ) 
[1728] c:0 is:( move ua , 2 ; move 7 , 7 )  decode:( move 7 , 2 ; move 7 , 7 ) 
[1729] c:3 is:( move ua , 9 ; move 5 , 2 )  decode:( move ua , 9 ; move 5 , 2 ) 
[1730] c:0 is:( move ua , 4 ; move 4 , 8 )  decode:( move ua , 4 ; move 4 , 9 + 4 ) 
[1731] c:0 is:( move 4 , 8 ; move 3 , ul )  decode:( move 3 , 8 ; move 4 , ul ) 
[1732] c:3 is:( move ua , 0 ; move 8 , 8 )  decode:( move ua , 0 ; move 8 , 8 ) 
[1733] c:3 is:( move 5 , ul ; move 8 , 2 )  decode:( move 5 , ul ; move 8 , 2 ) 
[1734] c:0 is:( move 4 , 4 / move ua , 4 )  decode:( move 3 , 4 / move ua , 4 ) 
[1735] c:0 is:( move 2 , 5 ; move ua , 9 )  decode:( move 2 , 9 / ua ; move ua , 9 ) 
[1736] c:3 is:( move 5 , 9 ; move ua , 2 )  decode:( move 5 , 9 ; move ua , 2 ) 
[1737] c:3 is:( move ua , 6 ; move 3 , 7 )  decode:( move ua , 6 ; move 3 , 7 ) 
[1738] c:3 is:( move 4 , ul ; move 3 , 8 )  decode:( move 4 , ul ; move 3 , 8 ) 
[1739] c:3 is:( move ua , 4 ; move 9 , 3 )  decode:( move ua , 4 ; move 9 , 3 ) 
[1740] c:0 is:( move 5 , 5 ; move 5 , ul )  decode:( move 5 , 5 ; move 4 , ul ) 
[1741] c:3 is:( move 2 , 6 ; move ua , 8 )  decode:( move 2 , 6 ; move ua , 8 ) 
[1742] c:3 is:( move ua , 6 ; move 5 , 5 )  decode:( move ua , 6 ; move 5 , 5 ) 
[1743] c:3 is:( move 9 , 3 ; move ua , 4 )  decode:( move 9 , 3 ; move ua , 4 ) 
[1744] c:3 is:( move ua , 6 ; move 8 , 2 )  decode:( move ua , 6 ; move 8 , 2 ) 
[1745] c:3 is:( move 3 , 3 ; move 9 , ul )  decode:( move 3 , 3 ; move 9 , ul ) 
[1746] c:0 is:loop 0 , 4 , move 9 - ua , 8  decode:loop 0 , 4 , move 3 , 8 
[1747] c:0 is:( move 8 , ul ; move 5 , 2 )  decode:( move 8 , ul ; move 4 , 2 ) 
[1748] c:3 is:( move ua , 9 ; move 2 , 5 )  decode:( move ua , 9 ; move 2 , 5 ) 
[1749] c:3 is:( move 5 , 6 ; move ua , 5 )  decode:( move 5 , 6 ; move ua , 5 ) 
[1750] c:3 is:( move ua , 3 ; move 4 , 9 )  decode:( move ua , 3 ; move 4 , 9 ) 
[1751] c:3 is:( move 3 , 5 ; move ua , 8 )  decode:( move 3 , 5 ; move ua , 8 ) 
[1752] c:3 is:( move 9 , 5 ; move ua , 2 )  decode:( move 9 , 5 ; move ua , 2 ) 
[1753] c:3 is:( move 5 , ul ; move 3 , 7 )  decode:( move 5 , ul ; move 3 , 7 ) 
[1754] c:3 is:( move 3 , ul ; move 8 , 4 )  decode:( move 3 , ul ; move 8 , 4 ) 
[1755] c:0 is:( move ua , 6 ; move 6 , 5 )  decode:( move ua , 6 ; move ul - ua , 5 ) 
[1756] c:3 is:( move 3 , 9 ; move 4 , ul )  decode:( move 3 , 9 ; move 4 , ul ) 
[1757] c:3 is:( move ua , 9 ; move 4 , 4 )  decode:( move ua , 9 ; move 4 , 4 ) 
[1758] c:3 is:( move ua , 5 ; move 8 , 4 )  decode:( move ua , 5 ; move 8 , 4 ) 
[1759] c:3 is:( move ua , 0 ; move 8 , 9 )  decode:( move ua , 0 ; move 8 , 9 ) 
[1760] c:0 is:( move 6 , 6 ; move ua , 5 )  decode:( move ul - ua , 9 ; move ua , 5 ) 
[1761] c:0 is:( move ua , 8 ; move 4 , 5 )  decode:( move ua , ua / 4 ; move 4 , 5 ) 
[1762] c:3 is:( move ul , 3 ; move 8 , 5 )  decode:( move ul , 3 ; move 8 , 5 ) 
[1763] c:0 is:( move 9 , 6 ; move ua , 2 )  decode:( move 9 , 9 ; move ua , 2 ) 
[1764] c:3 is:( move ua , 6 ; move 3 , 8 )  decode:( move ua , 6 ; move 3 , 8 ) 
[1765] c:3 is:( move ua , 4 ; move 4 , 9 )  decode:( move ua , 4 ; move 4 , 9 ) 
[1766] c:0 is:( move ua , 9 ; move 5 , 3 )  decode:( move ua , 9 ; move 5 , 0 - 3 ) 
[1767] c:3 is:( move ua , 9 ; move 3 , 5 )  decode:( move ua , 9 ; move 3 , 5 ) 
[1768] c:3 is:( move ua , 8 ; move 5 , 4 )  decode:( move ua , 8 ; move 5 , 4 ) 
[1769] c:3 is:( move 4 , 7 ; move 5 , ul )  decode:( move 4 , 7 ; move 5 , ul ) 
[1770] c:3 is:( move 3 , ul ; move 4 , 9 )  decode:( move 3 , ul ; move 4 , 9 ) 
[1771] c:3 is:( move 4 , 9 ; move ua , 4 )  decode:( move 4 , 9 ; move ua , 4 ) 
[1772] c:3 is:( move ua , 8 ; move 7 , 2 )  decode:( move ua , 8 ; move 7 , 2 ) 
[1773] c:3 is:( move 3 , 9 ; move ua , 5 )  decode:( move 3 , 9 ; move ua , 5 ) 
[1774] c:0 is:( move ua , 3 ; move 6 , 8 )  decode:( move ua , 3 ; move 6 , ua * ua ) 
[1775] c:3 is:( move 4 , 5 ; move ua , 8 )  decode:( move 4 , 5 ; move ua , 8 ) 
[1776] c:3 is:( move 4 , 4 ; move ua , 9 )  decode:( move 4 , 4 ; move ua , 9 ) 
[1777] c:3 is:( move ua , 3 ; move 5 , 9 )  decode:( move ua , 3 ; move 5 , 9 ) 
[1778] c:3 is:( move 4 , ul ; move 5 , 7 )  decode:( move 4 , ul ; move 5 , 7 ) 
[1779] c:3 is:( move 3 , 8 ; move 5 , ul )  decode:( move 3 , 8 ; move 5 , ul ) 
[1780] c:3 is:( move 9 , 0 ; move ua , 8 )  decode:( move 9 , 0 ; move ua , 8 ) 
[1781] c:1 is:( move 6 , 6 ; move 4 , ul )  decode:( move 3 , 6 ; move ua - ul , ul ) 
[1782] c:3 is:( move ua , 7 ; move 3 , 7 )  decode:( move ua , 7 ; move 3 , 7 ) 
[1783] c:3 is:( move 4 , ul ; move 8 , 4 )  decode:( move 4 , ul ; move 8 , 4 ) 
[1784] c:3 is:( move ua , 4 ; move 9 , 4 )  decode:( move ua , 4 ; move 9 , 4 ) 
[1785] c:3 is:( move 5 , 5 ; move ua , 7 )  decode:( move 5 , 5 ; move ua , 7 ) 
[1786] c:3 is:( move ua , 8 ; move 8 , 2 )  decode:( move ua , 8 ; move 8 , 2 ) 
[1787] c:3 is:( move 4 , 6 ; move ua , 8 )  decode:( move 4 , 6 ; move ua , 8 ) 
[1788] c:3 is:( move 5 , 4 ; move ua , 9 )  decode:( move 5 , 4 ; move ua , 9 ) 
[1789] c:3 is:( move 9 , 0 ; move ua , 9 )  decode:( move 9 , 0 ; move ua , 9 ) 
[1790] c:3 is:( move ua , 9 ; move 4 , 5 )  decode:( move ua , 9 ; move 4 , 5 ) 
[1791] c:0 is:( move 7 , ul ; move 8 , 2 )  decode:( move 8 , ul ; move ua + ul , 2 ) 
[1792] c:0 is:( move 9 , 5 ; move ua , 4 )  decode:( move ua + 3 , 5 ; move ua , 4 ) 
[1793] c:0 is:( move 8 , 8 ; move ua , 2 )  decode:( move ua + 2 , 8 ; move ua , 2 ) 
[1794] c:3 is:( move ua , 6 ; move 9 , 3 )  decode:( move ua , 6 ; move 9 , 3 ) 
[1795] c:3 is:( move 5 , 8 ; move ua , 5 )  decode:( move 5 , 8 ; move ua , 5 ) 
[1796] c:3 is:( move 9 , 6 ; move ua , 3 )  decode:( move 9 , 6 ; move ua , 3 ) 
[1797] c:3 is:( move ua , 8 ; move 5 , 5 )  decode:( move ua , 8 ; move 5 , 5 ) 
[1798] c:3 is:( move 3 , 9 ; move 5 , ul )  decode:( move 3 , 9 ; move 5 , ul ) 
[1799] c:0 is:( move ua , 6 ; move 4 , 8 )  decode:( move ua , 6 ; move 4 , ua * ua ) 
[1800] c:0 is:( move ua , 4 ; move 6 , 8 )  decode:( move ua , 4 ; move ua , 8 ) 
[1801] c:2 is:( move 5 , 5 ; move ua , 8 )  decode:( move 5 , 5 ; move ua , 8 ) 
[1802] c:3 is:( move 5 , 9 ; move ua , 4 )  decode:( move 5 , 9 ; move ua , 4 ) 
[1803] c:3 is:( move 5 , 9 ; move 3 , ul )  decode:( move 5 , 9 ; move 3 , ul ) 
[1804] c:3 is:( move 4 , 9 ; move 4 , ul )  decode:( move 4 , 9 ; move 4 , ul ) 
[1805] c:0 is:( move 9 , ul ; move 6 , 2 )  decode:( move 9 , ul ; move ua , 2 ) 
[1806] c:3 is:( move ua , 9 ; move 5 , 4 )  decode:( move ua , 9 ; move 5 , 4 ) 
[1807] c:3 is:( move 4 , 9 ; move ua , 5 )  decode:( move 4 , 9 ; move ua , 5 ) 
[1808] c:0 is:( move 8 , 2 ; move ua , 8 )  decode:( move ua + 2 , 2 ; move ua , 8 ) 
[1809] c:0 is:( move 5 , 7 ; move 5 , ul )  decode:( move 5 , 5 / 5 ; move 5 , ul ) 
[1810] c:3 is:( move 5 , ul ; move 8 , 4 )  decode:( move 5 , ul ; move 8 , 4 ) 
[1811] c:3 is:( move 3 , 9 ; move ua , 6 )  decode:( move 3 , 9 ; move ua , 6 ) 
[1812] c:3 is:( move ua , 5 ; move 4 , 9 )  decode:( move ua , 5 ; move 4 , 9 ) 
[1813] c:0 is:( move ua , 6 ; move 7 , 5 )  decode:( move ua , 9 ; move 7 , 5 ) 
[1814] c:3 is:( move 8 , 9 ; move ua , 2 )  decode:( move 8 , 9 ; move ua , 2 ) 
[1815] c:3 is:( move 5 , 9 ; move 4 , ul )  decode:( move 5 , 9 ; move 4 , ul ) 
[1816] c:3 is:( move 9 , ul ; move 4 , 5 )  decode:( move 9 , ul ; move 4 , 5 ) 
[1817] c:3 is:( move 8 , 2 ; move ua , 9 )  decode:( move 8 , 2 ; move ua , 9 ) 
[1818] c:3 is:( move 9 , 8 ; move ua , 2 )  decode:( move 9 , 8 ; move ua , 2 ) 
[1819] c:3 is:( move ua , 9 ; move 5 , 5 )  decode:( move ua , 9 ; move 5 , 5 ) 
[1820] c:0 is:loop 3 , 2 , move ul - 9 , 9  decode:0 0 loop 0 , 3 , move 0 - ua , 9 
[1821] c:3 is:( move 5 , ul ; move 4 , 9 )  decode:( move 5 , ul ; move 4 , 9 ) 
[1822] c:0 is:( move 2 , 9 ; move ua , 8 )  decode:( move 2 , 9 ; move ua , 9 + 4 ) 
[1823] c:3 is:( move ua , 6 ; move 4 , 9 )  decode:( move ua , 6 ; move 4 , 9 ) 
[1824] c:3 is:( move 4 , 9 ; move 5 , ul )  decode:( move 4 , 9 ; move 5 , ul ) 
[1825] c:3 is:( move ua , 9 ; move 3 , 7 )  decode:( move ua , 9 ; move 3 , 7 ) 
[1826] c:0 is:( move ua , 9 ; move 4 , 6 )  decode:( move ua , 9 ; move 4 , 4 + 4 ) 
[1827] c:3 is:( move 9 , ul ; move 7 , 2 )  decode:( move 9 , ul ; move 7 , 2 ) 
[1828] c:0 is:( move 4 , 8 ; move ua , 7 )  decode:( move 4 , 8 ; move ua , 3 / 4 ) 
[1829] c:3 is:( move ua , 9 ; move 8 , 2 )  decode:( move ua , 9 ; move 8 , 2 ) 
[1830] c:3 is:( move 4 , 6 ; move ua , 9 )  decode:( move 4 , 6 ; move ua , 9 ) 
[1831] c:0 is:( move 6 , 4 ; move ua , 9 )  decode:( move ua , 4 ; move ua , 9 ) 
[1832] c:0 is:( move ua , 4 ; move 7 , 8 )  decode:( move ua , 4 ; move ua + ul , 8 ) 
[1833] c:3 is:( move 7 , 3 ; move ua , 9 )  decode:( move 7 , 3 ; move ua , 9 ) 
[1834] c:0 is:( move ua , 8 ; move 8 , 3 )  decode:( move ua + ul , 8 ; move 8 , 3 ) 
[1835] c:0 is:( move ua , 8 ; move 4 , 7 )  decode:( move ua , 8 ; move 4 , 4 / 3 ) 
[1836] c:3 is:( move 5 , 9 ; move ua , 5 )  decode:( move 5 , 9 ; move ua , 5 ) 
[1837] c:3 is:( move 4 , 9 ; move ua , 6 )  decode:( move 4 , 9 ; move ua , 6 ) 
[1838] c:3 is:( move ua , 2 ; move 8 , 9 )  decode:( move ua , 2 ; move 8 , 9 ) 
[1839] c:0 is:( move 6 , 9 ; move 4 , ul )  decode:( move ua , 9 ; move 4 , ul ) 
[1840] c:3 is:( move ua , 9 ; move 3 , 8 )  decode:( move ua , 9 ; move 3 , 8 ) 
[1841] c:0 is:( move 6 , 9 ; move ua , 5 )  decode:( move ua , 9 ; move ua , 5 ) 
[1842] c:3 is:( move 9 , 9 ; move ua , 2 )  decode:( move 9 , 9 ; move ua , 2 ) 
[1843] c:3 is:( move 5 , 9 ; move 5 , ul )  decode:( move 5 , 9 ; move 5 , ul ) 
[1844] c:0 is:( move 3 , 9 ; move ua , 8 )  decode:( move 3 , 9 ; move ua , 7 + 4 ) 
[1845] c:3 is:( move 6 , 6 ; move ua , 8 )  decode:( move 6 , 6 ; move ua , 8 ) 
[1846] c:0 is:( move ua , 2 ; move 9 , 9 )  decode:( move 0 - ua , 3 ; move 9 , 9 ) 
[1847] c:3 is:( move 9 , 3 ; move ua , 8 )  decode:( move 9 , 3 ; move ua , 8 ) 
[1848] c:3 is:( move ua , 9 ; move 9 , 2 )  decode:( move ua , 9 ; move 9 , 2 ) 
[1849] c:0 is:( move 9 , ul ; move 8 , 2 )  decode:( move 9 , ul ; move 9 , 2 ) 
[1850] c:0 is:loop 0 , ua , move ua , 0 - 3  decode:0 0 loop 0 , 4 , move ua , 0 - 3 
[1851] c:0 is:( move 9 , 6 ; move ua , 5 )  decode:( move 9 , 8 ; move ua , 5 ) 
[1852] c:3 is:( move 9 , 2 ; move ua , 9 )  decode:( move 9 , 2 ; move ua , 9 ) 
[1853] c:0 is:( move 9 , 8 ; move ul , 2 )  decode:( move ul , ul ; move ua + 3 , 2 ) 
[1854] c:3 is:( move 4 , 9 ; move ua , 8 )  decode:( move 4 , 9 ; move ua , 8 ) 
[1855] c:3 is:( move ua , 8 ; move 5 , 8 )  decode:( move ua , 8 ; move 5 , 8 ) 
[1856] c:3 is:( move 4 , ul ; move 8 , 8 )  decode:( move 4 , ul ; move 8 , 8 ) 
[1857] c:3 is:( move ua , 8 ; move 4 , 9 )  decode:( move ua , 8 ; move 4 , 9 ) 
[1858] c:3 is:( move 9 , ul ; move 9 , 2 )  decode:( move 9 , ul ; move 9 , 2 ) 
[1859] c:3 is:loop 0 , 2 , move ua + ul , 2  decode:loop 0 , 2 , move ua + ul , 2 
[1860] c:3 is:( move 4 , 8 ; move ua , 9 )  decode:( move 4 , 8 ; move ua , 9 ) 
[1861] c:3 is:( move 9 , 3 ; move ua , 9 )  decode:( move 9 , 3 ; move ua , 9 ) 
[1862] c:3 is:( move 9 , 8 ; move ua , 4 )  decode:( move 9 , 8 ; move ua , 4 ) 
[1863] c:3 is:( move 4 , 9 ; move ua , 9 )  decode:( move 4 , 9 ; move ua , 9 ) 
[1864] c:3 is:( move 9 , 9 ; move ua , 4 )  decode:( move 9 , 9 ; move ua , 4 ) 
[1865] c:3 is:( move 5 , 9 ; move ua , 8 )  decode:( move 5 , 9 ; move ua , 8 ) 
[1866] c:3 is:( move 9 , ul ; move 9 , 3 )  decode:( move 9 , ul ; move 9 , 3 ) 
[1867] c:0 is:loop 0 , 2 , move ul - ua , 2  decode:( move ul - ua , 2 ; move 5 , 2 ) 
[1868] c:3 is:loop 0 , 3 , move ua + ul , 2  decode:loop 0 , 3 , move ua + ul , 2 
[1869] c:3 is:( move ua , 9 ; move 4 , 9 )  decode:( move ua , 9 ; move 4 , 9 ) 
[1870] c:3 is:( move 9 , 4 ; move ua , 9 )  decode:( move 9 , 4 ; move ua , 9 ) 
[1871] c:3 is:loop 0 , 3 , move ua - ul , 2  decode:loop 0 , 3 , move ua - ul , 2 
[1872] c:3 is:( move 5 , 9 ; move ua , 9 )  decode:( move 5 , 9 ; move ua , 9 ) 
[1873] c:3 is:( move 4 , ul ; move 9 , 9 )  decode:( move 4 , ul ; move 9 , 9 ) 
[1874] c:3 is:loop 0 , 3 , move ul - ua , 2  decode:loop 0 , 3 , move ul - ua , 2 
[1875] c:3 is:loop 0 , 3 , move 2 , ua * ua  decode:loop 0 , 3 , move 2 , ua * ua 
[1876] c:3 is:( move 9 , ul ; move 4 , 9 )  decode:( move 9 , ul ; move 4 , 9 ) 
[1877] c:0 is:loop 0 , 3 , move 2 - ua , ul  decode:loop 0 , 3 , move 0 - 4 , ul 
[1878] c:0 is:loop 0 , 2 , move 3 , ua * ua  decode:loop 0 , 2 , move 3 , ua / v0 
[1879] c:0 is:loop 0 , 2 , move ul - ua , 3  decode:loop 0 , 2 , move ua - ul , 3 
[1880] c:0 is:loop 0 , 3 , move ua - 2 , ul  decode:loop 0 , 3 , move 4 , ul 
[1881] c:0 is:loop 0 , 2 , move 3 - ua , ul  decode:( move 3 , 2 ; move 3 , ul ) 
[1882] c:3 is:loop 0 , 4 , move ua + ul , 2  decode:loop 0 , 4 , move ua + ul , 2 
[1883] c:0 is:( move 6 , 9 ; move ua , 8 )  decode:( move 6 , 9 ; move ua , 9 + 4 ) 
[1884] c:3 is:loop 0 , 2 , move ul - ua , 4  decode:loop 0 , 2 , move ul - ua , 4 
[1885] c:3 is:( move 9 , 6 ; move ua , 9 )  decode:( move 9 , 6 ; move ua , 9 ) 
[1886] c:0 is:loop 0 , 2 , move 4 , ua * ua  decode:loop 0 , 2 , move 4 , ua + v0 + ua 
[1887] c:0 is:loop 0 , 4 , move ua - 2 , ul  decode:loop 0 , 4 , move 4 , ul 
[1888] c:3 is:loop 0 , 3 , move ua + ul , 4  decode:loop 0 , 3 , move ua + ul , 4 
[1889] c:3 is:( move 8 , 8 ; move ua , 8 )  decode:( move 8 , 8 ; move ua , 8 ) 
[1890] c:3 is:loop 0 , 2 , move ua , ua / 3  decode:loop 0 , 2 , move ua , ua / 3 
[1891] c:0 is:loop 0 , 4 , move ua - ul , 2  decode:loop 0 , 4 , move 5 , 2 
[1892] c:3 is:loop 0 , 4 , move ul - ua , 2  decode:loop 0 , 4 , move ul - ua , 2 
[1893] c:3 is:( move ua , 0 ; move ua , 2 )  decode:( move ua , 0 ; move ua , 2 ) 
[1894] c:0 is:loop 0 , 3 , move ua - 3 , ul  decode:loop 0 , 3 , move 3 , ul 
[1895] c:3 is:loop 0 , 3 , move 3 - ua , ul  decode:loop 0 , 3 , move 3 - ua , ul 
[1896] c:0 is:loop 0 , 4 , move 2 - ua , ul  decode:loop 0 , 4 , move ul - ua , ul 
[1897] c:0 is:loop 0 , ua , move ua , 3 / 2  decode:loop 0 , 4 , move 4 + 3 , 0 - 8 
[1898] c:0 is:loop 0 , 5 , move ua + ul , 2  decode:loop 0 , 4 , move 4 + 4 , ua ua * 2 
[1899] c:3 is:loop 0 , 3 , move 3 , ua * ua  decode:loop 0 , 3 , move 3 , ua * ua 
[1900] c:0 is:loop 0 , 2 , move ua , ua / 4  decode:loop 0 , 3 , move ua / v0 , ua / 4 
[1901] c:0 is:loop 0 , 6 , move ua + ul , 2  decode:loop 0 , 4 , move ua + 2 , ua / 5 
[1902] c:3 is:loop 0 , 3 , move 4 , ua * ua  decode:loop 0 , 3 , move 4 , ua * ua 
[1903] c:3 is:loop 0 , 3 , move ul - ua , 4  decode:loop 0 , 3 , move ul - ua , 4 
[1904] c:3 is:loop 0 , 3 , move ua , ua / 3  decode:loop 0 , 3 , move ua , ua / 3 
[1905] c:0 is:loop 0 , 5 , move ua - ul , 2  decode:loop 0 , 4 , move ua - ul , 2 
[1906] c:3 is:( move ua , 0 ; move ua , 3 )  decode:( move ua , 0 ; move ua , 3 ) 
[1907] c:3 is:( move 2 , 0 ; move ua , ul )  decode:( move 2 , 0 ; move ua , ul ) 
[1908] c:3 is:( move ua , 9 ; move 8 , 8 )  decode:( move ua , 9 ; move 8 , 8 ) 
[1909] c:0 is:loop 0 , 2 , move ua - ul , 5  decode:( move 5 , 5 ; move 5 , 5 ) 
[1910] c:0 is:loop 0 , 5 , move 2 - ua , ul  decode:loop 0 , 4 , move ul - ua , ul 
[1911] c:3 is:( move ua , 0 ; move 2 , ul )  decode:( move ua , 0 ; move 2 , ul ) 
[1912] c:0 is:loop 0 , 3 , move 4 - ua , ul  decode:loop 0 , 3 , move ua - 4 , ul 
[1913] c:0 is:loop 0 , 4 , move ua - 3 , ul  decode:loop 0 , 4 , move 3 , ul 
[1914] c:0 is:loop 0 , 2 , move ul - ua , 5  decode:( move 5 , 5 ; move 5 , 5 ) 
[1915] c:3 is:loop 0 , 4 , move 3 , ua * ua  decode:loop 0 , 4 , move 3 , ua * ua 
[1916] c:3 is:( move ua , 0 ; move ul , 2 )  decode:( move ua , 0 ; move ul , 2 ) 
[1917] c:3 is:loop 0 , 4 , move 3 - ua , ul  decode:loop 0 , 4 , move 3 - ua , ul 
[1918] c:3 is:loop 0 , 4 , move ua + ul , 4  decode:loop 0 , 4 , move ua + ul , 4 
[1919] c:0 is:loop 0 , 5 , move ul - ua , 2  decode:loop 0 , 4 , move - 2 - ua , 2 
[1920] c:3 is:loop 0 , 2 , move 5 , ua * ua  decode:loop 0 , 2 , move 5 , ua * ua 
[1921] c:0 is:loop 0 , 5 , move ua - 2 , ul  decode:loop 0 , 4 , move 0 - 4 , 3 / 3 
[1922] c:0 is:loop 0 , 5 , move ua + ul , 3  decode:loop 0 , 4 , move v0 - 8 , 3 
[1923] c:0 is:loop 0 , 5 , move ul - ua , 3  decode:loop 0 , 4 , move 5 , 3 
[1924] c:3 is:loop 0 , 4 , move 4 , ua * ua  decode:loop 0 , 4 , move 4 , ua * ua 
[1925] c:3 is:( move ua , 9 ; move 9 , 8 )  decode:( move ua , 9 ; move 9 , 8 ) 
[1926] c:0 is:loop 0 , 4 , move ul - ua , 4  decode:loop 0 , 4 , move ua - ul , 4 
[1927] c:3 is:( move ua , 0 ; move ua , 4 )  decode:( move ua , 0 ; move ua , 4 ) 
[1928] c:0 is:loop 0 , 3 , move 3 , ul / ua  decode:loop 0 , 3 , move 3 / v0 , ul / ua 
[1929] c:0 is:loop 0 , 5 , move ua + ul , 4  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[1930] c:3 is:loop 0 , 3 , move ul - ua , 5  decode:loop 0 , 3 , move ul - ua , 5 
[1931] c:0 is:loop 0 , 4 , move ua - 4 , ul  decode:loop 0 , 4 , move 2 , ul 
[1932] c:3 is:( move ua , 0 ; move 3 , ul )  decode:( move ua , 0 ; move 3 , ul ) 
[1933] c:0 is:loop 0 , 2 , move 6 , ua * ua  decode:loop 0 , 2 , move ua , ua * ua 
[1934] c:0 is:loop 0 , 4 , move 4 - ua , ul  decode:loop 0 , 4 , move 0 - 2 , ul 
[1935] c:0 is:loop 0 , 6 , move 2 , ua * ua  decode:loop 0 , 4 , move 3 , ua * ua 
[1936] c:0 is:loop 0 , 4 , move ua / 2 , ul  decode:loop 0 , 4 , move 3 , ul 
[1937] c:0 is:( move ua , 0 ; move ul , 3 )  decode:move ua , 3 
[1938] c:3 is:loop 0 , 3 , move ua , ua / 4  decode:loop 0 , 3 , move ua , ua / 4 
[1939] c:0 is:loop 0 , 5 , move 3 , ua * ua  decode:loop 0 , 4 , move ua - 3 , 0 - ua 0 
[1940] c:0 is:loop 0 , 3 , move ua - ul , 5  decode:loop 0 , 3 , move ua - 2 , 5 
[1941] c:0 is:loop 0 , 6 , move ua + ul , 3  decode:loop 0 , 4 , move 3 + 4 , 3 
[1942] c:3 is:loop 0 , 3 , move 5 , ua * ua  decode:loop 0 , 3 , move 5 , ua * ua 
[1943] c:0 is:loop 0 , 6 , move ua - 2 , ul  decode:loop 0 , 4 , move 0 - 5 , 3 / 3 
[1944] c:0 is:loop 0 , 7 , move ua + ul , 2  decode:loop 0 , 4 , move ua + ul , 0 - 8 0 
[1945] c:0 is:loop 0 , 6 , move ua - ul , 2  decode:loop 0 , 4 , move 5 * 3 , 3 
[1946] c:0 is:loop 0 , 6 , move 2 - ua , ul  decode:loop 0 , 4 , move 0 - ua , 0 - v0 
[1947] c:0 is:loop 0 , 6 , move ul - ua , 2  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[1948] c:3 is:( move 3 , 0 ; move ua , ul )  decode:( move 3 , 0 ; move ua , ul ) 
[1949] c:0 is:loop 0 , 4 , move 2 , ul / ua  decode:loop 0 , ua / 4 / 4 , ua / ua 
[1950] c:0 is:loop 0 , 7 , move ua + ul , 3  decode:loop 0 , 4 , move loop loop loop , loop - v0 
[1951] c:0 is:( move ua , move ua + 2 , 2 )  decode:( move ua , 9 ; move 2 , 2 ) 
[1952] c:0 is:loop 0 , 5 , move 4 , ua * ua  decode:0 0 loop 0 , 4 , move 5 , 4 * v0 
[1953] c:3 is:( move ul , 0 ; move 3 , ul )  decode:( move ul , 0 ; move 3 , ul ) 
[1954] c:0 is:loop 0 , 6 , move ua - 3 , ul  decode:loop 0 , 4 , move 4 , 4 * 6 
[1955] c:0 is:loop 0 , 5 , move ul - ua , 4  decode:loop 0 , 4 , move ua , 0 - 6 ua * 4 
[1956] c:3 is:( move ua , 2 ; move ua , 3 )  decode:( move ua , 2 ; move ua , 3 ) 
[1957] c:0 is:loop 0 , 4 , move ua - ul , 5  decode:loop 0 , 4 , move ul - ua , 5 
[1958] c:3 is:loop 0 , 2 , move ul - ua , 7  decode:loop 0 , 2 , move ul - ua , 7 
[1959] c:3 is:( move 9 , 9 ; move ua , 9 )  decode:( move 9 , 9 ; move ua , 9 ) 
[1960] c:3 is:( move ua , 2 ; move ul , 2 )  decode:( move ua , 2 ; move ul , 2 ) 
[1961] c:3 is:( move 2 , ul ; move ua , 2 )  decode:( move 2 , ul ; move ua , 2 ) 
[1962] c:0 is:loop 0 , 2 , move ua - ul , 7  decode:( move ul - ua , 4 ; move 5 , 7 ) 
[1963] c:3 is:( move ul , 2 ; move ua , 2 )  decode:( move ul , 2 ; move ua , 2 ) 
[1964] c:3 is:( move 2 , 2 ; move ua , ul )  decode:( move 2 , 2 ; move ua , ul ) 
[1965] c:3 is:( move ua , ul ; move 2 , 2 )  decode:( move ua , ul ; move 2 , 2 ) 
[1966] c:0 is:loop 0 , 5 , move ua - ul , 4  decode:loop 0 , 4 , move ua , 0 - 5 / 3 
[1967] c:0 is:loop 0 , 6 , move 3 - ua , ul  decode:loop 0 , 4 , move 4 , 0 - 5 
[1968] c:3 is:( move ua , 0 ; move ua , 5 )  decode:( move ua , 0 ; move ua , 5 ) 
[1969] c:0 is:loop 0 , 4 , move ua / 3 , ul  decode:loop 0 , 4 , move 2 , ul 
[1970] c:3 is:( move ua , 0 ; move ul , 4 )  decode:( move ua , 0 ; move ul , 4 ) 
[1971] c:3 is:( move ua , 3 ; move ua , 2 )  decode:( move ua , 3 ; move ua , 2 ) 
[1972] c:3 is:( move ua , 2 ; move 2 , ul )  decode:( move ua , 2 ; move 2 , ul ) 
[1973] c:0 is:loop 0 , 5 , move 2 , ul / ua  decode:loop 0 , 4 , move 4 / v0 , ul / ua 
[1974] c:0 is:loop 0 , 3 , move 6 , ua * ua  decode:loop 0 , 3 , move 4 + v0 , ua * ua 
[1975] c:3 is:( move ua , 0 ; move 4 , ul )  decode:( move ua , 0 ; move 4 , ul ) 
[1976] c:3 is:loop 0 , 4 , move ul - ua , 5  decode:loop 0 , 4 , move ul - ua , 5 
[1977] c:3 is:( move 4 , 0 ; move ua , ul )  decode:( move 4 , 0 ; move ua , ul ) 
[1978] c:0 is:loop 0 , 2 , move ua + ul , 8  decode:loop 0 , 2 , move ua + v0 , 8 
[1979] c:0 is:loop 0 , 6 , move ua + ul , 4  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[1980] c:0 is:loop 0 , 6 , move ul - ua , 3  decode:loop 0 , 4 , move 0 - 5 , 3 
[1981] c:3 is:loop 0 , 4 , move 5 , ua * ua  decode:loop 0 , 4 , move 5 , ua * ua 
[1982] c:3 is:( move ua , 4 ; move ua , 2 )  decode:( move ua , 4 ; move ua , 2 ) 
[1983] c:3 is:( move ul , 0 ; move 4 , ul )  decode:( move ul , 0 ; move 4 , ul ) 
[1984] c:0 is:loop 0 , 6 , move 4 - ua , ul  decode:loop 0 , 4 , move 3 - ua , 4 / 3 
[1985] c:3 is:( move 3 , ul ; move ua , 2 )  decode:( move 3 , ul ; move ua , 2 ) 
[1986] c:0 is:loop 0 , 6 , move ua - 4 , ul  decode:loop 0 , 4 , move 3 , 4 / 3 
[1987] c:3 is:( move 3 , 2 ; move ua , ul )  decode:( move 3 , 2 ; move ua , ul ) 
[1988] c:0 is:loop 0 , ua , move ua - 2 , 9  decode:loop 0 , 4 , move ul - ua , 0 - 9 4 
[1989] c:3 is:loop 0 , 2 , move ua - ul , 8  decode:loop 0 , 2 , move ua - ul , 8 
[1990] c:3 is:( move ua , 0 ; move ul , 5 )  decode:( move ua , 0 ; move ul , 5 ) 
[1991] c:3 is:( move ua , 3 ; move 2 , ul )  decode:( move ua , 3 ; move 2 , ul ) 
[1992] c:3 is:loop 0 , 3 , move ua + ul , 8  decode:loop 0 , 3 , move ua + ul , 8 
[1993] c:0 is:loop 0 , 2 , move ul + ua , 9  decode:0 0 loop 0 , 3 , move ua + v0 , 9 
[1994] c:0 is:loop 0 , 5 , move ul - 4 , ul  decode:loop 0 , 4 , move 3 - ua , ul 
[1995] c:0 is:loop 0 , 4 , move 6 , ua * ua  decode:loop 0 , 4 , move ua , ua * ua 
[1996] c:3 is:( move ul , 0 ; move ua , 5 )  decode:( move ul , 0 ; move ua , 5 ) 
[1997] c:0 is:( move 5 , 0 ; move ua , ul )  decode:( move ua , 0 ; move 5 , ul ) 
[1998] c:0 is:loop 0 , 6 , move ua - ul , 4  decode:loop 0 , 4 , move ua , 5 * 5 
[1999] c:3 is:( move 2 , 3 ; move ua , ul )  decode:( move 2 , 3 ; move ua , ul ) 
[2000] c:0 is:loop 0 , 7 , move 3 , ua * ua  decode:loop 0 , 4 4 * 4 ; move 4 4 
[2001] c:0 is:loop 0 , 6 , move ul , 2 / ua  decode:( move 3 , 2 - 9 ; move 3 , ul ) 
[2002] c:3 is:( move ua , 2 ; move ua , 4 )  decode:( move ua , 2 ; move ua , 4 ) 
[2003] c:3 is:loop 0 , 2 , move ul - ua , 8  decode:loop 0 , 2 , move ul - ua , 8 
[2004] c:0 is:loop 0 , 7 , move ul - ua , 3  decode:loop 0 , 4 , move v0 + 3 , 9 
[2005] c:0 is:( move ua , ul ; move 2 , 3 )  decode:( move ua , 5 ; move 2 , 4 ) 
[2006] c:0 is:loop 0 , 6 , move ul - ua , 4  decode:loop 0 , 4 , move ua , 0 - 6 / 3 
[2007] c:0 is:loop 0 , 7 , move ua + ul , 4  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[2008] c:0 is:( move 2 , ul ; move ua , 3 )  decode:( move 3 , ul ; move 2 + 3 , 3 ) 
[2009] c:3 is:( move ua , 2 ; move 3 , ul )  decode:( move ua , 2 ; move 3 , ul ) 
[2010] c:3 is:( move ua , 0 ; move 5 , ul )  decode:( move ua , 0 ; move 5 , ul ) 
[2011] c:0 is:loop 0 , 6 , move ua / 2 , ul  decode:0 loop 0 , 4 , move 4 , 4 * 3 
[2012] c:0 is:loop 0 , 7 , move ua - ul , 4  decode:loop 0 , 4 , move ua , 4 * 0 / 4 
[2013] c:3 is:( move ul , 2 ; move 3 , ul )  decode:( move ul , 2 ; move 3 , ul ) 
[2014] c:0 is:( move ua , ul ; move 4 , 2 )  decode:( move ua , ua / 3 ; move 4 , 2 ) 
[2015] c:3 is:( move ua , 4 ; move 2 , ul )  decode:( move ua , 4 ; move 2 , ul ) 
[2016] c:0 is:( move ua , 4 ; move ul , 2 )  decode:( move ua , 4 ; move ul , 5 ) 
[2017] c:3 is:( move ua , 5 ; move ua , 2 )  decode:( move ua , 5 ; move ua , 2 ) 
[2018] c:3 is:( move 4 , 2 ; move ua , ul )  decode:( move 4 , 2 ; move ua , ul ) 
[2019] c:0 is:loop 0 , 7 , move ul , 2 / ua  decode:loop 0 , 4 , move 2 , 7 
[2020] c:0 is:loop 0 , 7 , move ul - ua , 4  decode:loop 0 , 4 , move ua , 0 - 2 - 3 
[2021] c:3 is:( move ul , 0 ; move 5 , ul )  decode:( move ul , 0 ; move 5 , ul ) 
[2022] c:3 is:( move 2 , ul ; move 3 , ul )  decode:( move 2 , ul ; move 3 , ul ) 
[2023] c:3 is:( move ua , ul ; move 2 , 4 )  decode:( move ua , ul ; move 2 , 4 ) 
[2024] c:3 is:( move ua , 4 ; move ua , 3 )  decode:( move ua , 4 ; move ua , 3 ) 
[2025] c:3 is:( move 3 , ul ; move ua , 3 )  decode:( move 3 , ul ; move ua , 3 ) 
[2026] c:0 is:loop 0 , 5 , move ul , ul / 3  decode:( move 2 , 2 ; move 3 , 2 / 4 ) 
[2027] c:3 is:( move 5 , 0 ; move ul , ul )  decode:( move 5 , 0 ; move ul , ul ) 
[2028] c:3 is:( move ul , 4 ; move ua , 2 )  decode:( move ul , 4 ; move ua , 2 ) 
[2029] c:0 is:loop 0 , 7 , move 4 , ua * ua  decode:loop 0 , 4 4 * 3 ; move 5 , 4 
[2030] c:3 is:( move 4 , ul ; move ua , 2 )  decode:( move 4 , ul ; move ua , 2 ) 
[2031] c:3 is:( move ua , 2 ; move 4 , ul )  decode:( move ua , 2 ; move 4 , ul ) 
[2032] c:3 is:loop 0 , 2 , move ul - ua , 9  decode:loop 0 , 2 , move ul - ua , 9 
[2033] c:3 is:( move 3 , ul ; move 2 , ul )  decode:( move 3 , ul ; move 2 , ul ) 
[2034] c:3 is:( move ua , 3 ; move 3 , ul )  decode:( move ua , 3 ; move 3 , ul ) 
[2035] c:3 is:loop 0 , 3 , move ul - ua , 8  decode:loop 0 , 3 , move ul - ua , 8 
[2036] c:3 is:( move ul , 0 ; move ua , 6 )  decode:( move ul , 0 ; move ua , 6 ) 
[2037] c:3 is:( move ua , 3 ; move ua , 4 )  decode:( move ua , 3 ; move ua , 4 ) 
[2038] c:3 is:( move 2 , ul ; move ua , 4 )  decode:( move 2 , ul ; move ua , 4 ) 
[2039] c:0 is:loop 0 , 3 , move ua - ul , 8  decode:loop 0 , 3 , move 5 , 8 
[2040] c:3 is:( move 3 , 2 ; move ul , ul )  decode:( move 3 , 2 ; move ul , ul ) 
[2041] c:3 is:( move 3 , ul ; move ul , 2 )  decode:( move 3 , ul ; move ul , 2 ) 
[2042] c:3 is:( move 2 , 4 ; move ua , ul )  decode:( move 2 , 4 ; move ua , ul ) 
[2043] c:3 is:( move 3 , 3 ; move ua , ul )  decode:( move 3 , 3 ; move ua , ul ) 
[2044] c:0 is:loop 0 , 6 , move ua / 3 , ul  decode:loop 0 , 4 , move ua - 4 , 5 
[2045] c:0 is:loop 0 , 6 , move ul - ua , 5  decode:loop 0 , 4 , move ua , ua * 5 
[2046] c:0 is:loop 0 , 5 , move ul , ul / 4  decode:loop 0 , 4 , move v0 , v0 / 8 
[2047] c:3 is:( move ua , 4 ; move 3 , ul )  decode:( move ua , 4 ; move 3 , ul ) 
[2048] c:3 is:loop 0 , 4 , move ua - ul , 8  decode:loop 0 , 4 , move ua - ul , 8 
[2049] c:0 is:loop 0 , 3 , move ul - ua , 9  decode:loop 0 , 3 , move 5 , 9 
[2050] c:3 is:( move 4 , 2 ; move ul , ul )  decode:( move 4 , 2 ; move ul , ul ) 
[2051] c:0 is:loop 0 , 4 , move ua - 8 , ul  decode:0 loop 0 , 4 , move 4 - ua , ul 
[2052] c:3 is:( move ua , 3 ; move ua , 5 )  decode:( move ua , 3 ; move ua , 5 ) 
[2053] c:0 is:loop 0 , 4 , move ul - ua , 8  decode:loop 0 , 4 , move 0 - ua , 8 
[2054] c:3 is:( move 4 , ul ; move 2 , ul )  decode:( move 4 , ul ; move 2 , ul ) 
[2055] c:2 is:( move ua , 5 ; move 2 , ul )  decode:( move ua , 5 ; move 2 , ul ) 
[2056] c:2 is:( move ul , 3 ; move 3 , ul )  decode:( move ul , 3 ; move 3 , ul ) 
[2057] c:0 is:( move 2 , ul ; move ua , 5 )  decode:( move 2 , 4 ; move ua , 5 ) 
[2058] c:2 is:( move ua , ul ; move 4 , 3 )  decode:( move ua , ul ; move 4 , 3 ) 
[2059] c:2 is:( move ul , 2 ; move 4 , ul )  decode:( move ul , 2 ; move 4 , ul ) 
[2060] c:2 is:( move 3 , 4 ; move ua , ul )  decode:( move 3 , 4 ; move ua , ul ) 
[2061] c:2 is:( move ua , 3 ; move 4 , ul )  decode:( move ua , 3 ; move 4 , ul ) 
[2062] c:2 is:( move 3 , ul ; move ua , 4 )  decode:( move 3 , ul ; move ua , 4 ) 
[2063] c:2 is:( move ua , ul ; move 2 , 5 )  decode:( move ua , ul ; move 2 , 5 ) 
[2064] c:2 is:( move ua , 5 ; move ua , 3 )  decode:( move ua , 5 ; move ua , 3 ) 
[2065] c:2 is:( move ua , ul ; move 3 , 4 )  decode:( move ua , ul ; move 3 , 4 ) 
[2066] c:2 is:( move 4 , 3 ; move ua , ul )  decode:( move 4 , 3 ; move ua , ul ) 
[2067] c:2 is:( move ua , 2 ; move ul , 5 )  decode:( move ua , 2 ; move ul , 5 ) 
[2068] c:2 is:( move ua , 0 ; move ua , 8 )  decode:( move ua , 0 ; move ua , 8 ) 
[2069] c:0 is:( move 5 , 2 ; move ua , ul )  decode:( move 5 , 2 ; move ul - ua , ul ) 
[2070] c:2 is:( move ua , 3 ; move ul , 4 )  decode:( move ua , 3 ; move ul , 4 ) 
[2071] c:2 is:( move 4 , ul ; move ul , 2 )  decode:( move 4 , ul ; move ul , 2 ) 
[2072] c:2 is:( move ul , 0 ; move ua , 7 )  decode:( move ul , 0 ; move ua , 7 ) 
[2073] c:2 is:( move ua , 6 ; move ua , 2 )  decode:( move ua , 6 ; move ua , 2 ) 
[2074] c:2 is:( move 5 , ul ; move ua , 2 )  decode:( move 5 , ul ; move ua , 2 ) 
[2075] c:2 is:( move ul , 2 ; move ua , 5 )  decode:( move ul , 2 ; move ua , 5 ) 
[2076] c:2 is:( move ua , 2 ; move 5 , ul )  decode:( move ua , 2 ; move 5 , ul ) 
[2077] c:2 is:( move ul , 5 ; move ua , 2 )  decode:( move ul , 5 ; move ua , 2 ) 
[2078] c:0 is:( move ua , ul ; move 5 , 2 )  decode:( move ua , ul ; move ua - 2 , 2 ) 
[2079] c:2 is:( move 2 , ul ; move 4 , ul )  decode:( move 2 , ul ; move 4 , ul ) 
[2080] c:2 is:( move ua , 4 ; move 4 , ul )  decode:( move ua , 4 ; move 4 , ul ) 
[2081] c:2 is:( move ul , 4 ; move ua , 4 )  decode:( move ul , 4 ; move ua , 4 ) 
[2082] c:2 is:( move 5 , ul ; move 2 , ul )  decode:( move 5 , ul ; move 2 , ul ) 
[2083] c:0 is:( move ul , 2 ; move ua , 6 )  decode:( move ul , 2 ; move ua , 5 ) 
[2084] c:0 is:( move ua , 7 ; move ua , 2 )  decode:( move ua , 4 / ua ; move ua , 2 ) 
[2085] c:0 is:( move 2 , ul ; move ua , 6 )  decode:( move 3 , ul ; move 4 , 6 ) 
[2086] c:2 is:( move 4 , ul ; move ua , 4 )  decode:( move 4 , ul ; move ua , 4 ) 
[2087] c:2 is:( move ua , ul ; move 2 , 6 )  decode:( move ua , ul ; move 2 , 6 ) 
[2088] c:2 is:( move ua , 3 ; move ul , 5 )  decode:( move ua , 3 ; move ul , 5 ) 
[2089] c:2 is:( move 2 , 6 ; move ua , ul )  decode:( move 2 , 6 ; move ua , ul ) 
[2090] c:2 is:( move 6 , ul ; move ua , 2 )  decode:( move 6 , ul ; move ua , 2 ) 
[2091] c:2 is:( move ua , 6 ; move 2 , ul )  decode:( move ua , 6 ; move 2 , ul ) 
[2092] c:2 is:( move 4 , ul ; move 3 , ul )  decode:( move 4 , ul ; move 3 , ul ) 
[2093] c:0 is:( move ua , 5 ; move 3 , ul )  decode:( move 3 , 9 ; move ua , 2 - 3 ) 
[2094] c:2 is:( move 3 , 5 ; move ua , ul )  decode:( move 3 , 5 ; move ua , ul ) 
[2095] c:2 is:( move ul , 3 ; move 4 , ul )  decode:( move ul , 3 ; move 4 , ul ) 
[2096] c:2 is:( move ul , ul ; move 5 , 2 )  decode:( move ul , ul ; move 5 , 2 ) 
[2097] c:0 is:( move 3 , ul ; move 4 , ul )  decode:loop 0 , 2 , move 3 , ul / v0 
[2098] c:2 is:( move ua , ul ; move 3 , 5 )  decode:( move ua , ul ; move 3 , 5 ) 
[2099] c:0 is:loop 0 , 6 , move ul , ul / 4  decode:( move 3 , 2 / 4 ; move 3 , ul ) 
[2100] c:2 is:( move 2 , ul ; move 5 , ul )  decode:( move 2 , ul ; move 5 , ul ) 
[2101] c:2 is:( move ua , ul ; move 6 , 2 )  decode:( move ua , ul ; move 6 , 2 ) 
[2102] c:2 is:( move ua , 5 ; move ua , 4 )  decode:( move ua , 5 ; move ua , 4 ) 
[2103] c:2 is:( move ua , 0 ; move ua , 9 )  decode:( move ua , 0 ; move ua , 9 ) 
[2104] c:2 is:( move ul , 3 ; move ua , 5 )  decode:( move ul , 3 ; move ua , 5 ) 
[2105] c:2 is:( move 3 , ul ; move ua , 5 )  decode:( move 3 , ul ; move ua , 5 ) 
[2106] c:2 is:( move ua , ul ; move 4 , 4 )  decode:( move ua , ul ; move 4 , 4 ) 
[2107] c:0 is:( move 3 , 4 ; move ul , ul )  decode:( move 2 , 4 ; move ul , ul ) 
[2108] c:2 is:( move 5 , ul ; move 3 , ul )  decode:( move 5 , ul ; move 3 , ul ) 
[2109] c:2 is:( move 2 , 7 ; move ua , ul )  decode:( move 2 , 7 ; move ua , ul ) 
[2110] c:2 is:( move ua , 6 ; move ua , 4 )  decode:( move ua , 6 ; move ua , 4 ) 
[2111] c:2 is:( move ul , ul ; move 4 , 4 )  decode:( move ul , ul ; move 4 , 4 ) 
[2112] c:2 is:( move 2 , ul ; move ua , 7 )  decode:( move 2 , ul ; move ua , 7 ) 
[2113] c:2 is:( move ul , 0 ; move 8 , ul )  decode:( move ul , 0 ; move 8 , ul ) 
[2114] c:2 is:( move 3 , ul ; move ua , 6 )  decode:( move 3 , ul ; move ua , 6 ) 
[2115] c:2 is:( move 5 , 3 ; move ul , ul )  decode:( move 5 , 3 ; move ul , ul ) 
[2116] c:2 is:( move 5 , ul ; move ua , 4 )  decode:( move 5 , ul ; move ua , 4 ) 
[2117] c:2 is:( move 4 , 4 ; move ul , ul )  decode:( move 4 , 4 ; move ul , ul ) 
[2118] c:2 is:( move ul , 4 ; move ua , 5 )  decode:( move ul , 4 ; move ua , 5 ) 
[2119] c:0 is:( move ua , 5 ; move 4 , ul )  decode:( move 4 , 5 ; move ua , ul ) 
[2120] c:2 is:( move ua , 6 ; move 3 , ul )  decode:( move ua , 6 ; move 3 , ul ) 
[2121] c:2 is:( move ua , ul ; move 5 , 4 )  decode:( move ua , ul ; move 5 , 4 ) 
[2122] c:2 is:( move ul , 4 ; move 4 , ul )  decode:( move ul , 4 ; move 4 , ul ) 
[2123] c:2 is:( move ua , 2 ; move ua , 8 )  decode:( move ua , 2 ; move ua , 8 ) 
[2124] c:1 is:( move ul , 7 ; move ua , 2 )  decode:( move ul , 0 ; move ua , 0 - 2 ) 
[2125] c:0 is:( move ua , 2 / move 3 , ul )  decode:move ua , 2 / 3 
[2126] c:2 is:( move 4 , 5 ; move ua , ul )  decode:( move 4 , 5 ; move ua , ul ) 
[2127] c:2 is:( move 3 , 6 ; move ua , ul )  decode:( move 3 , 6 ; move ua , ul ) 
[2128] c:2 is:( move ua , ul ; move 6 , 3 )  decode:( move ua , ul ; move 6 , 3 ) 
[2129] c:2 is:( move 7 , ul ; move ua , 2 )  decode:( move 7 , ul ; move ua , 2 ) 
[2130] c:0 is:( move 4 , ul ; move ul , 4 )  decode:( move ul , ul ; move 4 , 4 ) 
[2131] c:2 is:( move ua , ul ; move 4 , 5 )  decode:( move ua , ul ; move 4 , 5 ) 
[2132] c:2 is:( move ul , 3 ; move 5 , ul )  decode:( move ul , 3 ; move 5 , ul ) 
[2133] c:2 is:( move ua , 4 ; move ul , 5 )  decode:( move ua , 4 ; move ul , 5 ) 
[2134] c:2 is:( move ua , 7 ; move ua , 3 )  decode:( move ua , 7 ; move ua , 3 ) 
[2135] c:0 is:loop 0 , 7 , move ul , ul / 4  decode:( move 3 , 2 / 4 ; move 4 , 7 ) 
[2136] c:0 is:( move ua , 3 - move 4 , ul )  decode:move ua + 3 , 2 / ua 
[2137] c:2 is:( move 4 , ul ; move ua , 5 )  decode:( move 4 , ul ; move ua , 5 ) 
[2138] c:2 is:( move ua , 8 ; move ua , 2 )  decode:( move ua , 8 ; move ua , 2 ) 
[2139] c:0 is:( move ua , 2 ; move ua , 9 )  decode:( move ua , ua / 3 ; move ua , 9 ) 
[2140] c:2 is:( move 5 , ul ; move ua , 5 )  decode:( move 5 , ul ; move ua , 5 ) 
[2141] c:2 is:( move ua , 6 ; move ua , 5 )  decode:( move ua , 6 ; move ua , 5 ) 
[2142] c:2 is:( move ua , 9 ; move ua , 2 )  decode:( move ua , 9 ; move ua , 2 ) 
[2143] c:2 is:( move ua , 8 ; move ua , 3 )  decode:( move ua , 8 ; move ua , 3 ) 
[2144] c:2 is:( move 4 , ul ; move ul , 5 )  decode:( move 4 , ul ; move ul , 5 ) 
[2145] c:2 is:( move 8 , ul ; move ua , 2 )  decode:( move 8 , ul ; move ua , 2 ) 
[2146] c:2 is:( move 3 , 7 ; move ua , ul )  decode:( move 3 , 7 ; move ua , ul ) 
[2147] c:2 is:( move ul , ul ; move 5 , 4 )  decode:( move ul , ul ; move 5 , 4 ) 
[2148] c:2 is:( move ua , 5 ; move 5 , ul )  decode:( move ua , 5 ; move 5 , ul ) 
[2149] c:0 is:( move 4 , 5 ; move ul , ul )  decode:( move ul , 5 ; move 4 , ul ) 
[2150] c:0 is:( move 5 , ul ; move 4 , ul )  decode:( move 4 , ul ; move 4 , ul ) 
[2151] c:2 is:( move ua , ul ; move 2 , 8 )  decode:( move ua , ul ; move 2 , 8 ) 
[2152] c:2 is:( move 3 , ul ; move ua , 7 )  decode:( move 3 , ul ; move ua , 7 ) 
[2153] c:0 is:( move 2 , 8 ; move ua , ul )  decode:( move 2 , ua / 4 ; move ua , ul ) 
[2154] c:0 is:( move ua , ul ; move 5 , 5 )  decode:( move 5 , ul ; move 5 , 5 ) 
[2155] c:2 is:( move ul , 6 ; move ua , 4 )  decode:( move ul , 6 ; move ua , 4 ) 
[2156] c:2 is:( move 4 , 6 ; move ua , ul )  decode:( move 4 , 6 ; move ua , ul ) 
[2157] c:2 is:( move 4 , ul ; move ua , 6 )  decode:( move 4 , ul ; move ua , 6 ) 
[2158] c:2 is:( move ua , 7 ; move ua , 4 )  decode:( move ua , 7 ; move ua , 4 ) 
[2159] c:2 is:( move ua , ul ; move 3 , 7 )  decode:( move ua , ul ; move 3 , 7 ) 
[2160] c:0 is:( move 5 , 4 ; move ul , ul )  decode:( move ul , 4 ; move 5 , ul ) 
[2161] c:2 is:( move ua , 8 ; move 2 , ul )  decode:( move ua , 8 ; move 2 , ul ) 
[2162] c:2 is:( move 5 , 5 ; move ua , ul )  decode:( move 5 , 5 ; move ua , ul ) 
[2163] c:2 is:( move ua , 3 ; move ua , 8 )  decode:( move ua , 3 ; move ua , 8 ) 
[2164] c:2 is:( move 4 , ul ; move 5 , ul )  decode:( move 4 , ul ; move 5 , ul ) 
[2165] c:2 is:( move 3 , ul ; move 7 , ul )  decode:( move 3 , ul ; move 7 , ul ) 
[2166] c:2 is:( move 9 , ul ; move ua , 2 )  decode:( move 9 , ul ; move ua , 2 ) 
[2167] c:2 is:( move ua , 9 ; move ua , 3 )  decode:( move ua , 9 ; move ua , 3 ) 
[2168] c:2 is:( move ua , ul ; move 8 , 3 )  decode:( move ua , ul ; move 8 , 3 ) 
[2169] c:2 is:( move 3 , ul ; move ua , 8 )  decode:( move 3 , ul ; move ua , 8 ) 
[2170] c:2 is:( move 2 , 9 ; move ua , ul )  decode:( move 2 , 9 ; move ua , ul ) 
[2171] c:2 is:( move ua , 7 ; move 4 , ul )  decode:( move ua , 7 ; move 4 , ul ) 
[2172] c:0 is:( move 4 , ul ; move 6 , ul )  decode:( move 0 - 4 , ul ; move ua , 4 ) 
[2173] c:0 is:( move 8 , ul ; move ul , 2 )  decode:( move ua + ul , ul ; move ul , 2 ) 
[2174] c:2 is:( move ua , 8 ; move ua , 4 )  decode:( move ua , 8 ; move ua , 4 ) 
[2175] c:2 is:( move ul , 2 ; move 8 , ul )  decode:( move ul , 2 ; move 8 , ul ) 
[2176] c:0 is:( move ul , 7 ; move ua , 4 )  decode:( move ul , 0 ; move ua , 4 ) 
[2177] c:2 is:( move ua , 4 ; move ua , 8 )  decode:( move ua , 4 ; move ua , 8 ) 
[2178] c:2 is:( move ua , ul ; move 9 , 2 )  decode:( move ua , ul ; move 9 , 2 ) 
[2179] c:2 is:( move 3 , 8 ; move ua , ul )  decode:( move 3 , 8 ; move ua , ul ) 
[2180] c:2 is:( move ul , 4 ; move ua , 7 )  decode:( move ul , 4 ; move ua , 7 ) 
[2181] c:2 is:( move 4 , 7 ; move ua , ul )  decode:( move 4 , 7 ; move ua , ul ) 
[2182] c:2 is:( move ua , ul ; move 7 , 4 )  decode:( move ua , ul ; move 7 , 4 ) 
[2183] c:2 is:( move ua , 3 ; move ua , 9 )  decode:( move ua , 3 ; move ua , 9 ) 
[2184] c:2 is:( move ul , 5 ; move 5 , ul )  decode:( move ul , 5 ; move 5 , ul ) 
[2185] c:2 is:( move ua , 8 ; move 3 , ul )  decode:( move ua , 8 ; move 3 , ul ) 
[2186] c:2 is:( move 8 , 2 ; move ul , ul )  decode:( move 8 , 2 ; move ul , ul ) 
[2187] c:2 is:( move ul , ul ; move 3 , 8 )  decode:( move ul , ul ; move 3 , 8 ) 
[2188] c:0 is:( move 7 , 4 ; move ul , ul )  decode:( move ua , 4 ; move ul , ul ) 
[2189] c:2 is:( move 4 , 8 ; move ua , ul )  decode:( move 4 , 8 ; move ua , ul ) 
[2190] c:2 is:( move 3 , 9 ; move ua , ul )  decode:( move 3 , 9 ; move ua , ul ) 
[2191] c:2 is:( move ua , 9 ; move ua , 4 )  decode:( move ua , 9 ; move ua , 4 ) 
[2192] c:2 is:( move ua , 9 ; move 3 , ul )  decode:( move ua , 9 ; move 3 , ul ) 
[2193] c:2 is:( move ua , 8 ; move 4 , ul )  decode:( move ua , 8 ; move 4 , ul ) 
[2194] c:2 is:( move 9 , ul ; move ua , 3 )  decode:( move 9 , ul ; move ua , 3 ) 
[2195] c:2 is:( move ua , ul ; move 8 , 4 )  decode:( move ua , ul ; move 8 , 4 ) 
[2196] c:2 is:( move ua , 8 ; move ua , 5 )  decode:( move ua , 8 ; move ua , 5 ) 
[2197] c:2 is:( move 4 , 9 ; move ua , ul )  decode:( move 4 , 9 ; move ua , ul ) 
[2198] c:2 is:( move ul , ul ; move 8 , 4 )  decode:( move ul , ul ; move 8 , 4 ) 
[2199] c:2 is:( move ul , 8 ; move 4 , ul )  decode:( move ul , 8 ; move 4 , ul ) 
[2200] c:2 is:( move ua , ul ; move 4 , 9 )  decode:( move ua , ul ; move 4 , 9 ) 
[2201] c:0 is:( move 8 , ul ; move ul , 4 )  decode:( move ua + ul , ul ; move ul , 4 ) 
[2202] c:2 is:( move 4 , ul ; move ua , 9 )  decode:( move 4 , ul ; move ua , 9 ) 
[2203] c:2 is:( move 4 , 8 ; move ul , ul )  decode:( move 4 , 8 ; move ul , ul ) 
[2204] c:2 is:( move ua , 5 ; move ua , 9 )  decode:( move ua , 5 ; move ua , 9 ) 
[2205] c:0 is:( move 8 , 4 ; move ul , ul )  decode:( move ul , 4 ; move 8 , ul ) 
[2206] c:2 is:( move ua , 9 ; move ua , 5 )  decode:( move ua , 9 ; move ua , 5 ) 
[2207] c:2 is:( move 9 , 4 ; move ul , ul )  decode:( move 9 , 4 ; move ul , ul ) 
[2208] c:2 is:( move 5 , ul ; move ua , 9 )  decode:( move 5 , ul ; move ua , 9 ) 
[2209] c:2 is:( move ua , 6 ; move ua , 9 )  decode:( move ua , 6 ; move ua , 9 ) 
[2210] c:2 is:( move 9 , ul ; move ul , 4 )  decode:( move 9 , ul ; move ul , 4 ) 
[2211] c:2 is:( move ua , ul ; move 5 , 9 )  decode:( move ua , ul ; move 5 , 9 ) 
[2212] c:2 is:( move 7 , ul ; move ua , 8 )  decode:( move 7 , ul ; move ua , 8 ) 
[2213] c:0 is:( move ua , 9 / move ua , 3 )  decode:( move ua , 3 + move 4 , 3 + 3 ) 
[2214] c:2 is:( move 9 , 5 ; move ul , ul )  decode:( move 9 , 5 ; move ul , ul ) 
[2215] c:2 is:( move ua , 8 ; move ua , 9 )  decode:( move ua , 8 ; move ua , 9 ) 
[2216] c:2 is:( move ua , ul ; move 8 , 8 )  decode:( move ua , ul ; move 8 , 8 ) 
[2217] c:2 is:( move ua , ul ; move 8 , 9 )  decode:( move ua , ul ; move 8 , 9 ) 
[2218] c:2 is:( move ua , ul ; move 9 , 8 )  decode:( move ua , ul ; move 9 , 8 ) 
[2219] c:2 is:( move 9 , ul ; move ul , 7 )  decode:( move 9 , ul ; move ul , 7 ) 
[2220] c:2 is:( move ua , ul ; move 9 , 9 )  decode:( move ua , ul ; move 9 , 9 ) 
[2221] c:2 is:loop 0 , 2 , move ua , ua * ua  decode:loop 0 , 2 , move ua , ua * ua 
[2222] c:0 is:loop 0 , 3 , move ua , ua * ua  decode:loop 0 , 3 , move 4 + 2 , ua * ua 
[2223] c:2 is:loop 0 , 4 , move ua , ua * ua  decode:loop 0 , 4 , move ua , ua * ua 
[2224] c:0 is:loop 0 , 2 , move 0 - 2 , v0  decode:( move 2 , 0 ; move 2 , ul ) 
[2225] c:0 is:loop 0 , 5 , move ua , ua * ua  decode:loop 0 , 4 , move ua , 7 * 3 
[2226] c:2 is:loop 0 , 3 , move 0 - 2 , v0  decode:loop 0 , 3 , move 0 - 2 , v0 
[2227] c:0 is:loop 0 , 3 , move 2 , 0 - v0  decode:loop 0 , 3 , move 2 , ua / v0 
[2228] c:2 is:loop 0 , 2 , move 3 , 0 - v0  decode:loop 0 , 2 , move 3 , 0 - v0 
[2229] c:2 is:loop 0 , 2 , move 0 - 3 , v0  decode:loop 0 , 2 , move 0 - 3 , v0 
[2230] c:0 is:loop 0 , 2 , move 4 , 0 - v0  decode:( move 4 , 0 ; move 4 , 2 - 3 ) 
[2231] c:0 is:loop 0 , 3 , move 2 , 2 + v0  decode:loop 0 , 4 , move 2 , 9 + v0 
[2232] c:2 is:loop 0 , 2 , move 0 - 4 , v0  decode:loop 0 , 2 , move 0 - 4 , v0 
[2233] c:0 is:loop 0 , 6 , move ua , ua * ua  decode:loop 0 , 4 , move ua + ul , ua * ua 
[2234] c:0 is:loop 0 , 4 , move 0 - v0 , 2  decode:loop 0 , 3 , move 2 , v0 + 2 
[2235] c:2 is:( move ul , 0 ; move ua , ul )  decode:( move ul , 0 ; move ua , ul ) 
[2236] c:2 is:loop 0 , 3 , move 0 - 3 , v0  decode:loop 0 , 3 , move 0 - 3 , v0 
[2237] c:0 is:loop 0 , 3 , move 3 , 0 - v0  decode:0 loop 0 , 3 , move 3 , ua / v0 
[2238] c:2 is:( move ua , 0 ; move ul , ul )  decode:( move ua , 0 ; move ul , ul ) 
[2239] c:0 is:loop 0 , 4 , move v0 , 0 - 2  decode:loop 0 , 4 , move v0 - 2 , 0 - 2 
[2240] c:0 is:loop 0 , 2 , move 0 - 5 , v0  decode:( move 5 , ul ; move 5 , 2 - 3 ) 
[2241] c:2 is:( move ua , 2 ; move ua , ul )  decode:( move ua , 2 ; move ua , ul ) 
[2242] c:0 is:loop 0 , 4 , move 2 , 2 + v0  decode:loop 0 , 4 , move 2 , 2 + 4 / v0 
[2243] c:0 is:loop 0 , 4 , move v0 , 0 - 3  decode:( move 3 , 2 - 3 ; move 3 , 3 ) 
[2244] c:0 is:loop 0 , 2 , move 3 , v0 - 2  decode:( move 3 , 0 ; move 3 , ul ) 
[2245] c:0 is:loop 0 , 7 , move ua , ua * ua  decode:loop 0 , 4 , move ua + ul , 0 - 8 
[2246] c:0 is:loop 0 , 3 , move 4 , 0 - v0  decode:loop 0 , 3 , move ua - 2 , 0 - v0 
[2247] c:0 is:loop 0 , 5 , move v0 , 0 - 2  decode:loop 0 , 3 , move ua - 2 , v0 - 4 
[2248] c:0 is:loop 0 , 3 , move 2 , 3 + v0  decode:loop 0 , 3 , move 2 , 3 + 4 / v0 
[2249] c:1 is:loop 0 , 2 , move 5 , 0 - v0  decode:loop 0 , 2 , move ua - 2 , 0 - v0 
[2250] c:2 is:( move ua , ul ; move ua , 2 )  decode:( move ua , ul ; move ua , 2 ) 
[2251] c:0 is:loop 0 , 3 , move v0 + 3 , 2  decode:loop 0 , 3 , move 4 , 2 
[2252] c:0 is:loop 0 , 2 , move v0 - 3 , 2  decode:loop 0 , 2 , move 3 - v0 , 2 
[2253] c:2 is:loop 0 , 3 , move 0 - 4 , v0  decode:loop 0 , 3 , move 0 - 4 , v0 
[2254] c:2 is:loop 0 , 3 , move 3 , 2 + v0  decode:loop 0 , 3 , move 3 , 2 + v0 
[2255] c:0 is:loop 0 , 4 , move 2 + v0 , 2  decode:loop 0 , 4 , move 4 , 2 
[2256] c:2 is:loop 0 , 4 , move 2 , 2 - v0  decode:loop 0 , 4 , move 2 , 2 - v0 
[2257] c:2 is:loop 0 , 3 , move 3 , 3 + v0  decode:loop 0 , 3 , move 3 , 3 + v0 
[2258] c:2 is:( move ua , 2 ; move ul , ul )  decode:( move ua , 2 ; move ul , ul ) 
[2259] c:2 is:( move 2 , ul ; move ua , ul )  decode:( move 2 , ul ; move ua , ul ) 
[2260] c:0 is:loop 0 , 3 , move 2 + v0 , 4  decode:loop 0 , 2 , move 0 - 4 , 4 
[2261] c:2 is:( move ul , 2 ; move ua , ul )  decode:( move ul , 2 ; move ua , ul ) 
[2262] c:0 is:loop 0 , 4 , move 2 + v0 , 3  decode:loop 0 , 4 , move 3 + v0 , 3 
[2263] c:2 is:loop 0 , 2 , move 3 , v0 - 3  decode:loop 0 , 2 , move 3 , v0 - 3 
[2264] c:2 is:( move ua , ul ; move 2 , ul )  decode:( move ua , ul ; move 2 , ul ) 
[2265] c:0 is:loop 0 , 3 , move 2 , v0 + 4  decode:( move 3 , 4 ; move 3 , 7 ) 
[2266] c:2 is:loop 0 , 3 , move 4 , 2 + v0  decode:loop 0 , 3 , move 4 , 2 + v0 
[2267] c:0 is:loop 0 , 5 , move v0 , 0 - 3  decode:( move 3 , 4 ; move 4 , 3 ) 
[2268] c:2 is:loop 0 , 4 , move 3 , 2 + v0  decode:loop 0 , 4 , move 3 , 2 + v0 
[2269] c:0 is:loop 0 , 4 , move v0 , 0 - 4  decode:( move 3 , 6 ; move 3 , 4 ) 
[2270] c:0 is:loop 0 , 2 , move v0 - 4 , 2  decode:loop 0 , 2 , move 3 - ua , 2 
[2271] c:2 is:loop 0 , 3 , move 2 , v0 - 3  decode:loop 0 , 3 , move 2 , v0 - 3 
[2272] c:0 is:loop 0 , 3 , move 3 , v0 - 2  decode:( move ua , ul / 6 ; move 3 , ul ) 
[2273] c:0 is:loop 0 , 5 , move 0 - 3 , v0  decode:loop 0 , 4 , move 0 - 4 , v0 * 3 
[2274] c:0 is:loop 0 , 3 , move 0 - 5 , v0  decode:loop 0 , 3 , move 0 - 4 , v0 
[2275] c:0 is:loop 0 , 6 , move v0 , 0 - 2  decode:0 0 loop 0 , 4 , move v0 - ua , 9 0 0 0 
[2276] c:0 is:loop 0 , 5 , move 2 + v0 , 2  decode:0 loop 0 , 4 , move v0 + 4 , ul - 0 
[2277] c:0 is:loop 0 , 3 , move 2 , 3 - v0  decode:( move 3 , 0 - 3 ; move 3 , 4 ) 
[2278] c:2 is:( move ul , ul ; move ua , 2 )  decode:( move ul , ul ; move ua , 2 ) 
[2279] c:2 is:( move ua , ul ; move ua , 3 )  decode:( move ua , ul ; move ua , 3 ) 
[2280] c:2 is:loop 0 , 3 , move 2 , v0 * 2  decode:loop 0 , 3 , move 2 , v0 * 2 
[2281] c:0 is:loop 0 , 3 , move 4 + v0 , 2  decode:loop 0 , 3 , move ul - ua , 2 
[2282] c:0 is:loop 0 , 4 , move 3 + v0 , 2  decode:loop 0 , 3 , move v0 + 4 , 2 
[2283] c:2 is:loop 0 , 2 , move 4 , v0 - 2  decode:loop 0 , 2 , move 4 , v0 - 2 
[2284] c:0 is:loop 0 , 3 , move 5 , 0 - v0  decode:loop 0 , 4 , move 4 , 0 - v0 
[2285] c:0 is:loop 0 , 4 , move 2 , v0 - 2  decode:loop 0 , 4 , move 2 , v0 - 3 
[2286] c:0 is:loop 0 , 4 , move 2 , 3 + v0  decode:loop 0 , 3 , move 3 , 3 + 3 / v0 
[2287] c:2 is:loop 0 , 2 , move 2 , v0 / 2  decode:loop 0 , 2 , move 2 , v0 / 2 
[2288] c:0 is:loop 0 , 6 , move 0 - 2 , v0  decode:loop 0 , 4 , move 3 - ua , 3 * 5 
[2289] c:0 is:loop 0 , 5 , move 2 , v0 + 2  decode:( move 3 , 9 ; move 5 , 7 + 4 ) 
[2290] c:2 is:loop 0 , 4 , move 2 , v0 * 2  decode:loop 0 , 4 , move 2 , v0 * 2 
[2291] c:0 is:loop 0 , 4 , move 3 , 2 - v0  decode:( move 3 , 4 ; move ua + 3 , 4 ) 
[2292] c:0 is:loop 0 , 5 , move v0 + 3 , 2  decode:loop 0 , 4 , move v0 + 4 , 4 
[2293] c:0 is:loop 0 , 4 , move v0 * 2 , 2  decode:loop 0 , 4 , move v0 - 4 , 2 
[2294] c:0 is:loop 0 , 4 , move 2 + v0 , 4  decode:loop 0 , 4 , move 4 , 4 
[2295] c:2 is:loop 0 , 4 , move v0 , 2 - 3  decode:loop 0 , 4 , move v0 , 2 - 3 
[2296] c:0 is:loop 0 , 5 , move 2 , v0 - 2  decode:loop 0 , 4 , move 4 - ua , v0 - 3 
[2297] c:2 is:loop 0 , 3 , move v0 + 3 , 4  decode:loop 0 , 3 , move v0 + 3 , 4 
[2298] c:2 is:loop 0 , 4 , move 3 , 3 + v0  decode:loop 0 , 4 , move 3 , 3 + v0 
[2299] c:0 is:loop 0 , 3 , move 2 , 4 - v0  decode:loop 0 , 2 , move 3 , 4 0 - 4 
[2300] c:2 is:loop 0 , 4 , move 2 , v0 - 3  decode:loop 0 , 4 , move 2 , v0 - 3 
[2301] c:2 is:( move 3 , ul ; move ua , ul )  decode:( move 3 , ul ; move ua , ul ) 
[2302] c:0 is:loop 0 , 3 , move 2 , 3 * v0  decode:loop 0 , 2 , move 3 , 3 * v0 
[2303] c:0 is:loop 0 , 5 , move 3 + 2 , v0  decode:loop 0 , 4 , move ua , v0 / 2 
[2304] c:2 is:loop 0 , 2 , move 5 , v0 - 2  decode:loop 0 , 2 , move 5 , v0 - 2 
[2305] c:2 is:loop 0 , 4 , move 0 - 5 , v0  decode:loop 0 , 4 , move 0 - 5 , v0 
[2306] c:0 is:loop 0 , 6 , move 0 - 3 , v0  decode:loop 0 , 4 , move 5 , 3 / 3 0 
[2307] c:0 is:loop 0 , 3 , move 3 , 3 - v0  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[2308] c:0 is:loop 0 , 2 , move 3 , v0 - 4  decode:loop 0 , 4 , move v0 , v0 - 4 
[2309] c:0 is:loop 0 , 6 , move v0 , 0 - 3  decode:loop 0 , 3 , move 0 - 4 , 4 * 4 
[2310] c:0 is:loop 0 , 5 , move v0 , 0 - 4  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[2311] c:0 is:loop 0 , 4 , move v0 + 4 , 2  decode:loop 0 , 4 , move ua , 2 
[2312] c:0 is:loop 0 , 5 , move 3 , v0 + 2  decode:loop 0 , 4 , move 3 - ua , v0 + 9 
[2313] c:0 is:loop 0 , 3 , move v0 + 4 , 3  decode:loop 0 , 3 , move v0 - ua , 3 
[2314] c:2 is:loop 0 , 3 , move 3 , v0 + 4  decode:loop 0 , 3 , move 3 , v0 + 4 
[2315] c:0 is:loop 0 , 6 , move ul , ul / ua  decode:loop 0 , 3 , move 2 , 2 / 6 
[2316] c:0 is:loop 0 , 4 , move 2 , v0 + 4  decode:( move 2 , 4 ; move ua , ua * ua ) 
[2317] c:2 is:loop 0 , 3 , move 3 , v0 - 3  decode:loop 0 , 3 , move 3 , v0 - 3 
[2318] c:2 is:loop 0 , 3 , move 2 , v0 / 2  decode:loop 0 , 3 , move 2 , v0 / 2 
[2319] c:0 is:loop 0 , 3 , move 2 , v0 - 4  decode:loop 0 , 4 , move 2 - v0 , 4 / 0 
[2320] c:0 is:loop 0 , 5 , move v0 , 3 + 2  decode:loop 0 , 4 , move 4 - ua , 3 / v0 
[2321] c:0 is:loop 0 , 2 , move 4 , v0 - 3  decode:loop 0 , 2 , move 0 - 4 , v0 - 3 
[2322] c:0 is:loop 0 , 3 , move v0 + 2 , 5  decode:loop 0 , 3 , move 3 , 5 
[2323] c:0 is:loop 0 , 3 , move v0 - 4 , 2  decode:loop 0 , 3 , move 3 - ua , 2 
[2324] c:0 is:loop 0 , 4 , move 2 , 3 - v0  decode:loop 0 , 4 , move 2 , 3 + 4 - v0 
[2325] c:0 is:loop 0 , 2 , move 3 , v0 / 2  decode:( move 3 , 0 ; move 3 , 2 / 4 ) 
[2326] c:2 is:( move ua , ul ; move 3 , ul )  decode:( move ua , ul ; move 3 , ul ) 
[2327] c:2 is:loop 0 , 4 , move 0 - v0 , 5  decode:loop 0 , 4 , move 0 - v0 , 5 
[2328] c:0 is:loop 0 , 4 , move 5 , 0 - v0  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[2329] c:0 is:loop 0 , 5 , move 0 - 4 , v0  decode:loop 0 , 4 , move 0 - 5 , v0 + 5 
[2330] c:0 is:loop 0 , 5 , move 2 , 2 - v0  decode:( move 3 , 2 / 3 ; move ua , 4 ) 
[2331] c:0 is:loop 0 , 3 , move 4 , v0 + 3  decode:loop 0 , 3 , move 4 , 3 + v0 
[2332] c:0 is:loop 0 , 7 , move 0 - 2 , v0  decode:loop 0 , 4 , move 0 - 3 , 0 - 3 
[2333] c:0 is:loop 0 , 6 , move v0 + 2 , 2  decode:loop 0 , 4 , move 0 - ua , 9 
[2334] c:0 is:loop 0 , 7 , move v0 , 0 - 2  decode:loop 0 , 4 , move v0 + 4 , 0 - 4 
[2335] c:2 is:( move ul , 3 ; move ua , ul )  decode:( move ul , 3 ; move ua , ul ) 
[2336] c:2 is:loop 0 , 3 , move 3 , v0 * 2  decode:loop 0 , 3 , move 3 , v0 * 2 
[2337] c:0 is:loop 0 , 6 , move 2 , 2 + v0  decode:( move 4 , 9 ; move ua + ul , 7 ) 
[2338] c:0 is:loop 0 , 5 , move 2 + v0 , 3  decode:loop 0 , 4 , move 0 - 4 , 3 
[2339] c:0 is:loop 0 , 5 , move 2 , v0 + 3  decode:loop 0 , 4 , move 0 - 2 , 4 / v0 
[2340] c:2 is:loop 0 , 3 , move 2 , 2 / v0  decode:loop 0 , 3 , move 2 , 2 / v0 
[2341] c:2 is:loop 0 , 4 , move 3 , v0 - 2  decode:loop 0 , 4 , move 3 , v0 - 2 
[2342] c:2 is:( move ua , ul ; move ua , 4 )  decode:( move ua , ul ; move ua , 4 ) 
[2343] c:2 is:loop 0 , 4 , move 4 , 2 + v0  decode:loop 0 , 4 , move 4 , 2 + v0 
[2344] c:0 is:loop 0 , 3 , move 2 , v0 * 4  decode:loop 0 , 3 , move ua - 4 , 3 - v0 
[2345] c:0 is:loop 0 , 4 , move 2 , 2 / v0  decode:loop 0 , 3 , move ua - 4 , 2 / v0 
[2346] c:0 is:loop 0 , 6 , move v0 , 0 - 4  decode:loop 0 , 3 , move 5 , 0 - v0 / 5 
[2347] c:2 is:loop 0 , 4 , move 2 , v0 / 2  decode:loop 0 , 4 , move 2 , v0 / 2 
[2348] c:0 is:loop 0 , 3 , move 4 , 3 - v0  decode:loop 0 , 3 , move ua - 2 , 3 - v0 
[2349] c:2 is:loop 0 , 3 , move 2 , v0 / 3  decode:loop 0 , 3 , move 2 , v0 / 3 
[2350] c:0 is:loop 0 , 3 , move 3 / 2 , v0  decode:loop 0 , 3 , move 2 , v0 
[2351] c:2 is:loop 0 , 3 , move 3 , 4 - v0  decode:loop 0 , 3 , move 3 , 4 - v0 
[2352] c:0 is:loop 0 , 5 , move 2 * v0 , 2  decode:( move 8 , 2 / 4 ; move 8 , 2 ) 
[2353] c:0 is:loop 0 , 5 , move 4 + v0 , 2  decode:loop 0 , 4 , move v0 + ua , 4 
[2354] c:0 is:loop 0 , 2 , move 5 , v0 - 3  decode:loop 0 , 2 , move ua - 2 , v0 - 3 
[2355] c:0 is:loop 0 , 5 , move 2 , 2 * v0  decode:loop 0 , 4 , move ua - 4 , 3 + v0 
[2356] c:2 is:( move ua , ul ; move 4 , ul )  decode:( move ua , ul ; move 4 , ul ) 
[2357] c:2 is:loop 0 , 4 , move 3 , 2 * v0  decode:loop 0 , 4 , move 3 , 2 * v0 
[2358] c:0 is:loop 0 , 5 , move v0 , 2 - 3  decode:loop 0 , 3 , move v0 - 4 , 5 / 3 
[2359] c:0 is:loop 0 , 4 , move 3 , 3 - v0  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[2360] c:0 is:loop 0 , 5 , move 2 , 4 + v0  decode:loop 0 , 4 , move ua - 4 , 9 * v0 
[2361] c:0 is:loop 0 , 5 , move 3 + v0 , 3  decode:loop 0 , 4 , move ua - v0 , 3 
[2362] c:0 is:loop 0 , 6 , move 3 + 2 , v0  decode:loop 0 , 4 , move 4 + 2 , 0 - 0 4 
[2363] c:0 is:loop 0 , 4 , move 3 + v0 , 4  decode:loop 0 , 4 , move v0 + 2 , 4 
[2364] c:0 is:loop 0 , 2 , move 4 , v0 / 2  decode:loop 0 , 3 , move 3 , v0 / 2 
[2365] c:0 is:loop 0 , 3 , move 2 , 3 / v0  decode:( move 2 , 4 ; move 3 , 0 - 2 ) 
[2366] c:0 is:loop 0 , 3 , move 3 , v0 - 4  decode:loop 0 , 3 , move 3 , v0 - 9 
[2367] c:0 is:( move ua , 5 ; move ua , ul )  decode:( move ua , 9 ; move ua , ul ) 
[2368] c:0 is:loop 0 , 4 , move v0 + 2 , 5  decode:loop 0 , 4 , move 3 - ua , 5 
[2369] c:2 is:loop 0 , 2 , move 3 , v0 / 3  decode:loop 0 , 2 , move 3 , v0 / 3 
[2370] c:0 is:loop 0 , 7 , move v0 , 0 - 3  decode:loop 0 , 3 , move ul - ua , 4 * 4 
[2371] c:2 is:loop 0 , 3 , move 3 , 2 / v0  decode:loop 0 , 3 , move 3 , 2 / v0 
[2372] c:0 is:loop 0 , 6 , move 3 + v0 , 2  decode:loop 0 , 4 , move 0 - 7 , 7 - v0 
[2373] c:2 is:( move ul , ul ; move ua , 4 )  decode:( move ul , ul ; move ua , 4 ) 
[2374] c:0 is:loop 0 , 4 , move 5 , 2 + v0  decode:loop 0 , 4 , move v0 + 2 , 2 / 2 2 
[2375] c:0 is:loop 0 , 5 , move 2 + v0 , 4  decode:loop 0 , 4 , move 0 - 5 , 0 - 3 
[2376] c:2 is:loop 0 , 3 , move 4 , v0 - 3  decode:loop 0 , 3 , move 4 , v0 - 3 
[2377] c:0 is:loop 0 , 4 , move 2 , v0 + 5  decode:( move 2 , 4 ; move ua - ul , 4 ) 
[2378] c:0 is:loop 0 , 3 , move v0 + 3 , 5  decode:loop 0 , 3 , move ua - 3 , 5 
[2379] c:2 is:( move ua , 4 ; move ul , ul )  decode:( move ua , 4 ; move ul , ul ) 
[2380] c:0 is:loop 0 , 6 , move 0 - 4 , v0  decode:loop 0 , 4 , move ua - v0 , 0 - 7 
[2381] c:0 is:loop 0 , 5 , move v0 , 3 + 3  decode:( move ua , 8 ; move 4 , 4 / 3 ) 
[2382] c:0 is:loop 0 , 4 , move 2 , 4 - v0  decode:loop 0 , 3 , move 4 - ua , 4 / v0 
[2383] c:0 is:loop 0 , 5 , move 2 , 3 - v0  decode:( move 3 , ul / 3 ; move ua , 4 ) 
[2384] c:2 is:( move ua , ul ; move ul , 4 )  decode:( move ua , ul ; move ul , 4 ) 
[2385] c:2 is:loop 0 , 4 , move 4 + v0 , 3  decode:loop 0 , 4 , move 4 + v0 , 3 
[2386] c:0 is:loop 0 , 3 , move 4 , 2 * v0  decode:loop 0 , 3 , move ua - 2 , 2 * v0 
[2387] c:2 is:loop 0 , 4 , move 2 , v0 - 4  decode:loop 0 , 4 , move 2 , v0 - 4 
[2388] c:0 is:loop 0 , 3 , move v0 + 2 , 6  decode:loop 0 , 3 , move 3 , 6 
[2389] c:0 is:loop 0 , 7 , move v0 + 2 , 2  decode:loop 0 , 4 , move 3 + 4 , 0 - 4 
[2390] c:2 is:loop 0 , 3 , move v0 - 5 , 2  decode:loop 0 , 3 , move v0 - 5 , 2 
[2391] c:0 is:loop 0 , 6 , move 2 + v0 , 3  decode:loop 0 , 4 , move v0 + 4 , 0 - 3 
[2392] c:0 is:loop 0 , 6 , move v0 - 2 , 2  decode:loop 0 , 4 , move 3 - ua , 9 
[2393] c:2 is:( move ul , 4 ; move ua , ul )  decode:( move ul , 4 ; move ua , ul ) 
[2394] c:2 is:( move 3 , ul ; move ul , ul )  decode:( move 3 , ul ; move ul , ul ) 
[2395] c:0 is:loop 0 , 6 , move 2 , 3 + v0  decode:loop 0 , 4 , move 3 , 4 / v0 
[2396] c:0 is:loop 0 , 7 , move 0 - 3 , v0  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[2397] c:0 is:loop 0 , 5 , move 5 , 0 - v0  decode:loop 0 , 4 , move ua , ua * 7 
[2398] c:0 is:loop 0 , 7 , move 2 , 2 + v0  decode:loop 0 , 4 , move 3 , 9 + v0 
[2399] c:0 is:loop 0 , 5 , move 2 , v0 - 3  decode:( move 3 , 0 - 3 ; move 4 , 4 ) 
[2400] c:0 is:loop 0 , 4 , move 3 , v0 - 3  decode:loop 0 , 4 , move v0 * 2 , 0 - 3 
[2401] c:0 is:loop 0 , 3 , move v0 - 3 , 4  decode:loop 0 , 4 , move v0 , 4 
[2402] c:0 is:loop 0 , 3 , move v0 + 4 , 4  decode:loop 0 , 3 , move ua - v0 , 4 
[2403] c:0 is:loop 0 , 2 , move v0 - 4 , 4  decode:loop 0 , 2 , move 3 - ua , 4 
[2404] c:0 is:loop 0 , 5 , move 3 , v0 - 2  decode:loop 0 , 4 , move 3 , v0 - 2 
[2405] c:2 is:( move ul , ul ; move 3 , ul )  decode:( move ul , ul ; move 3 , ul ) 
[2406] c:0 is:loop 0 , 6 , move v0 , 3 + 2  decode:0 loop 0 , 4 , move 3 - ua , 3 * 4 
[2407] c:2 is:loop 0 , 3 , move 3 , v0 / 2  decode:loop 0 , 3 , move 3 , v0 / 2 
[2408] c:0 is:loop 0 , 3 , move 3 / v0 , 2  decode:( move 4 , 2 ; move 3 , 2 ) 
[2409] c:0 is:loop 0 , 3 , move 5 , 3 + v0  decode:loop 0 , 3 , move v0 - ua , 3 / 3 
[2410] c:0 is:loop 0 , 3 , move 3 , v0 + 5  decode:loop 0 , 3 , move 3 , 5 + v0 
[2411] c:0 is:loop 0 , 4 , move v0 * 3 , 2  decode:loop 0 , 4 , move v0 * 2 , 2 
[2412] c:0 is:loop 0 , 6 , move 2 - v0 , 2  decode:loop 0 , 4 , move ua - 4 , 9 
[2413] c:2 is:loop 0 , 3 , move 3 , 3 * v0  decode:loop 0 , 3 , move 3 , 3 * v0 
[2414] c:0 is:loop 0 , 5 , move 3 , 2 - v0  decode:( move 4 , 2 ; move  4 , 4 + v) 0 
[2415] c:0 is:loop 0 , 3 , move 5 , v0 * 2  decode:loop 0 , 3 , move ua - ul , v0 * 2 
[2416] c:2 is:loop 0 , 4 , move 3 , 5 + v0  decode:loop 0 , 4 , move 3 , 5 + v0 
[2417] c:2 is:loop 0 , 4 , move 3 , v0 - 4  decode:loop 0 , 4 , move 3 , v0 - 4 
[2418] c:0 is:loop 0 , 4 , move 3 , v0 * 3  decode:( move 5 , 9 ; move 5 , 3 ) 
[2419] c:0 is:loop 0 , 3 , move 4 + v0 , 5  decode:loop 0 , 4 , move 3 + v0 , 5 
[2420] c:0 is:loop 0 , 7 , move 0 - 4 , v0  decode:loop 0 , 4 , move 0 - ua , 4 + v0 
[2421] c:0 is:loop 0 , 4 , move 2 , 3 / v0  decode:loop 0 , 3 , move 3 / v0 , 0 - 3 
[2422] c:2 is:loop 0 , 4 , move 2 , 4 * v0  decode:loop 0 , 4 , move 2 , 4 * v0 
[2423] c:0 is:loop 0 , 4 , move v0 * 2 , 4  decode:loop 0 , 4 , move v0 + ul , 4 
[2424] c:0 is:loop 0 , 5 , move 2 , 4 - v0  decode:( move 4 , 4 + 3 ; move 5 , 5 ) 
[2425] c:2 is:( move ua , ul ; move ul , 5 )  decode:( move ua , ul ; move ul , 5 ) 
[2426] c:2 is:loop 0 , 4 , move 4 , v0 - 3  decode:loop 0 , 4 , move 4 , v0 - 3 
[2427] c:0 is:loop 0 , 5 , move 2 , 2 / v0  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[2428] c:0 is:loop 0 , 3 , move 5 , 3 - v0  decode:loop 0 , 3 , move ua - v0 , 3 - 3 
[2429] c:0 is:loop 0 , 5 , move 2 * v0 , 3  decode:0 0 loop 0 , 4 , move ua 3 , 3 
[2430] c:0 is:loop 0 , 7 , move v0 + 2 , 3  decode:loop 0 , 4 , move ua , 3 * 4 
[2431] c:0 is:loop 0 , 3 , move v0 + 2 , 7  decode:loop 0 , 3 , move 3 , 2 / 3 
[2432] c:2 is:loop 0 , 3 , move 4 , 4 - v0  decode:loop 0 , 3 , move 4 , 4 - v0 
[2433] c:0 is:loop 0 , 7 , move v0 - 2 , 2  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[2434] c:0 is:loop 0 , 6 , move 2 , v0 - 3  decode:( move 4 , 0 - 3 ; move 5 , 4 ) 
[2435] c:0 is:loop 0 , 6 , move 2 + v0 , 4  decode:loop 0 , 4 , move ua , ua / ua ua 
[2436] c:0 is:loop 0 , 5 , move 3 + v0 , 4  decode:loop 0 , 4 , move ua , 7 * 3 
[2437] c:2 is:loop 0 , 3 , move v0 * 4 , 3  decode:loop 0 , 3 , move v0 * 4 , 3 
[2438] c:0 is:loop 0 , 3 , move v0 * 2 , 5  decode:loop 0 , 3 , move 2 , v0 + 7 
[2439] c:0 is:loop 0 , 5 , move 2 - v0 , 4  decode:loop 0 , 3 , move 2 , v0 - 2 
[2440] c:0 is:loop 0 , 5 , move 2 , v0 - 4  decode:( move 4 , 4 * 3 ; move 5 , 4 ) 
[2441] c:2 is:loop 0 , 3 , move 2 , v0 / 4  decode:loop 0 , 3 , move 2 , v0 / 4 
[2442] c:0 is:loop 0 , 6 , move 3 + v0 , 3  decode:loop 0 , 4 , move v0 - ua , 0 - 3 
[2443] c:0 is:loop 0 , 4 , move 2 , v0 + 6  decode:loop 0 , 4 , move 2 , v0 + 8 
[2444] c:0 is:loop 0 , 6 , move v0 - 2 , 3  decode:( move 3 , 9 ; move 3 , 9 ) 
[2445] c:0 is:loop 0 , 7 , move 2 - v0 , 2  decode:loop 0 , 4 , move 3 - ua , 6 / 3 
[2446] c:2 is:loop 0 , 4 , move 2 , v0 / 3  decode:loop 0 , 4 , move 2 , v0 / 3 
[2447] c:0 is:loop 0 , 4 , move v0 , 2 / 3  decode:loop 0 , 4 , move v0 , 3 / 3 
[2448] c:2 is:loop 0 , 3 , move 4 , v0 - 4  decode:loop 0 , 3 , move 4 , v0 - 4 
[2449] c:0 is:loop 0 , 3 , move 5 , v0 - 3  decode:loop 0 , 3 , move ua - v0 , 0 - 3 
[2450] c:0 is:loop 0 , 4 , move v0 + 3 , 5  decode:loop 0 , 4 , move 3 - ua , 5 
[2451] c:0 is:loop 0 , 3 , move 3 , v0 / 3  decode:loop 0 , 4 , move ua - 4 , v0 / ua 
[2452] c:0 is:loop 0 , 2 , move v0 - 6 , 3  decode:loop 0 , 2 , move v0 - ua , 3 
[2453] c:0 is:loop 0 , 7 , move v0 , 3 + 2  decode:loop 0 , 4 , move ua - ul , 9 / 4 
[2454] c:0 is:loop 0 , 2 , move v0 + 2 , 8  decode:loop 0 , 4 , move v0 , 8 
[2455] c:0 is:loop 0 , 4 , move 6 , v0 + 2  decode:loop 0 , 4 , move ua , 2 + 2 , 2 2 
[2456] c:2 is:loop 0 , 4 , move 4 , 3 - v0  decode:loop 0 , 4 , move 4 , 3 - v0 
[2457] c:0 is:loop 0 , 3 , move v0 - 4 , 4  decode:loop 0 , 3 , move 0 - 3 , 4 
[2458] c:0 is:loop 0 , 4 , move v0 , 3 / 2  decode:( move 3 , 9 ; move 3 , 3 / 2 ) 
[2459] c:0 is:loop 0 , 3 , move v0 + 5 , 4  decode:loop 0 , 3 , move ua , 4 
[2460] c:0 is:loop 0 , 3 , move 4 , v0 * 3  decode:loop 0 , 3 , move 3 - ua , 3 * v0 
[2461] c:2 is:loop 0 , 4 , move 3 , v0 / 2  decode:loop 0 , 4 , move 3 , v0 / 2 
[2462] c:0 is:loop 0 , 5 , move 3 , v0 - 3  decode:( move 4 , 7 ; move ua + 2 , 4 ) 
[2463] c:0 is:loop 0 , 2 , move 6 , v0 - 3  decode:loop 0 , 2 , move ua , v0 - 3 
[2464] c:0 is:loop 0 , 3 , move 4 - v0 , 4  decode:loop 0 , 3 , move 3 , 4 
[2465] c:2 is:loop 0 , 4 , move 3 , 2 / v0  decode:loop 0 , 4 , move 3 , 2 / v0 
[2466] c:0 is:loop 0 , 4 , move v0 + 6 , 2  decode:loop 0 , 4 , move v0 + v0 , 2 
[2467] c:2 is:loop 0 , 3 , move 3 , 3 / v0  decode:loop 0 , 3 , move 3 , 3 / v0 
[2468] c:0 is:loop 0 , 5 , move 3 , 3 - v0  decode:( move 4 , 2 ; move 4 + ua , 4 ) 
[2469] c:0 is:loop 0 , 5 , move v0 - 2 , 4  decode:loop 0 , 4 , move v0 , 0 - 9 
[2470] c:0 is:loop 0 , 5 , move v0 , 4 + 3  decode:( move 4 , 9 ; move ua - ul , 5 ) 
[2471] c:0 is:loop 0 , 6 , move 2 , v0 * 2  decode:loop 0 , 4 , move 3 , 3 + v0 
[2472] c:0 is:loop 0 , 5 , move 3 , 2 * v0  decode:loop 0 , 4 , move ua - 3 , v0 / 2 
[2473] c:0 is:loop 0 , 3 , move 3 - v0 , 5  decode:loop 0 , 3 , move 2 , 3 / 3 
[2474] c:2 is:loop 0 , 4 , move 4 + v0 , 4  decode:loop 0 , 4 , move 4 + v0 , 4 
[2475] c:0 is:loop 0 , 5 , move 4 + v0 , 3  decode:loop 0 , 4 , move ua - ua , 3 
[2476] c:0 is:loop 0 , 3 , move 2 , 4 / v0  decode:loop 0 , 4 , move v0 , 4 
[2477] c:0 is:loop 0 , 4 , move 3 , 4 - v0  decode:loop 0 , 4 , move ua - 4 , 4 - v0 
[2478] c:0 is:( move 4 , ul ; move ul , ul )  decode:( move ul , ul ; move 4 , ul ) 
[2479] c:0 is:loop 0 , 3 , move 3 , v0 * 4  decode:loop 0 , 3 , move 3 , 4 * v0 
[2480] c:0 is:loop 0 , 7 , move v0 , 0 - 4  decode:loop 0 , 4 , move ua - ul , 0 - 4 
[2481] c:0 is:loop 0 , 5 , move 2 , 3 * v0  decode:( move 4 , 3 ; move 4 , 4 ) 
[2482] c:0 is:loop 0 , 7 , move 3 + v0 , 2  decode:loop 0 , 4 , move v0 + ua , 0 - 8 
[2483] c:0 is:loop 0 , 4 , move v0 * 3 , 3  decode:loop 0 , 3 , move v0 * 3 , 3 
[2484] c:2 is:loop 0 , 3 , move 4 , 2 / v0  decode:loop 0 , 3 , move 4 , 2 / v0 
[2485] c:2 is:( move ua , 5 ; move ul , ul )  decode:( move ua , 5 ; move ul , ul ) 
[2486] c:0 is:loop 0 , 3 , move 4 / v0 , 2  decode:loop 0 , 3 , move 3 - ua , 2 
[2487] c:0 is:loop 0 , 2 , move 4 , v0 / 3  decode:( move 3 , 0 ; move 4 , 4 / ua ) 
[2488] c:0 is:loop 0 , 6 , move v0 , 2 - 3  decode:loop 0 , 4 , move 0 - 3 , 0 - 9 
[2489] c:0 is:loop 0 , 3 , move 4 , v0 / 2  decode:loop 0 , 3 , move ua - 3 , v0 / 2 
[2490] c:2 is:loop 0 , 3 , move 3 , v0 / 4  decode:loop 0 , 3 , move 3 , v0 / 4 
[2491] c:2 is:loop 0 , 3 , move 4 , 5 - v0  decode:loop 0 , 3 , move 4 , 5 - v0 
[2492] c:2 is:loop 0 , 3 , move 5 , 4 - v0  decode:loop 0 , 3 , move 5 , 4 - v0 
[2493] c:2 is:loop 0 , 4 , move v0 , 2 / 4  decode:loop 0 , 4 , move v0 , 2 / 4 
[2494] c:0 is:loop 0 , 4 , move 2 , v0 / 4  decode:loop 0 , 4 , move v0 , v0 / 4 
[2495] c:2 is:loop 0 , 3 , move 5 , 2 / v0  decode:loop 0 , 3 , move 5 , 2 / v0 
[2496] c:0 is:loop 0 , 4 , move 4 , 3 * v0  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[2497] c:0 is:loop 0 , 7 , move 2 , v0 * 2  decode:loop 0 , 4 , move ua - 3 , 3 / 4 
[2498] c:0 is:loop 0 , 4 , move 4 , v0 / 2  decode:loop 0 , 4 , move 4 , 2 / 2 
[2499] c:0 is:loop 0 , 6 , move 2 , 2 / v0  decode:loop 0 , 4 , move 0 - 3 , v0 * 4 
[2500] c:0 is:( move 5 , ul ; move ul , ul )  decode:( move ul , ul ; move 5 , ul ) 
[2501] c:0 is:loop 0 , 5 , move 3 , 4 - v0  decode:( move 2 - ua , 5 ; move 7 , 7 ) 
[2502] c:0 is:loop 0 , 4 , move 2 , v0 - 6  decode:loop 0 , 3 , move 2 , 4 - 4 / v0 
[2503] c:2 is:loop 0 , 3 , move 4 , v0 + 6  decode:loop 0 , 3 , move 4 , v0 + 6 
[2504] c:0 is:loop 0 , 5 , move v0 , 2 / 3  decode:( move 4 , ul / ua ; move 5 , 7 ) 
[2505] c:0 is:loop 0 , 6 , move 2 , v0 / 2  decode:loop 0 , 4 , move 3 , v0 * 5 
[2506] c:0 is:loop 0 , 7 , move 3 , 2 - v0  decode:( move ua , 2 ; move 4 + ua , 4 ) 
[2507] c:0 is:loop 0 , 6 , move 3 , v0 - 3  decode:( move 4 , 9 ; move ua , 4 ) 
[2508] c:0 is:loop 0 , 4 , move v0 - 6 , 2  decode:loop 0 , 4 , move v0 - ua , 2 
[2509] c:0 is:loop 0 , 4 , move 2 , v0 * 5  decode:loop 0 , 4 , move 2 , ua / v0 
[2510] c:0 is:loop 0 , 3 , move 3 * v0 , 5  decode:( move 3 , 4 + 3 ; move ua , 5 ) 
[2511] c:2 is:loop 0 , 4 , move 3 , v0 / 3  decode:loop 0 , 4 , move 3 , v0 / 3 
[2512] c:0 is:loop 0 , 3 , move v0 - 5 , 4  decode:loop 0 , 3 , move v0 - ua , 4 
[2513] c:2 is:loop 0 , 3 , move 3 , 4 / v0  decode:loop 0 , 3 , move 3 , 4 / v0 
[2514] c:0 is:loop 0 , 3 , move 2 - 7 , v0  decode:loop 0 , 3 , move 0 - 4 , v0 
[2515] c:2 is:loop 0 , 3 , move 4 , 4 * v0  decode:loop 0 , 3 , move 4 , 4 * v0 
[2516] c:0 is:loop 0 , 7 , move 2 - 3 , v0  decode:loop 0 , 3 , move 2 , v0 + 9 
[2517] c:0 is:loop 0 , 5 , move v0 , 3 / 2  decode:loop 0 , 3 , move 3 - ua , v0 - 2 
[2518] c:0 is:loop 0 , 4 , move 2 , v0 + 7  decode:loop 0 , 4 , move 2 , 0 - 9 
[2519] c:0 is:loop 0 , 5 , move 2 , 3 / v0  decode:loop 0 , 3 , move 3 , 3 / v0 
[2520] c:0 is:loop 0 , 4 , move 3 , 5 - v0  decode:loop 0 , 3 , move 3 - ua , 0 - v0 
[2521] c:2 is:loop 0 , 4 , move 3 , v0 + 6  decode:loop 0 , 4 , move 3 , v0 + 6 
[2522] c:2 is:loop 0 , 3 , move 3 , 6 - v0  decode:loop 0 , 3 , move 3 , 6 - v0 
[2523] c:0 is:loop 0 , 6 , move 3 , 2 * v0  decode:( move 9 , 6 ; move ua , 0 - 4 ) 
[2524] c:0 is:loop 0 , 7 , move v0 + 2 , 4  decode:loop 0 , 4 , move 4 + 3 , 4 , 4 4 4 4 , 
[2525] c:0 is:loop 0 , 7 , move 3 - v0 , 2  decode:loop 0 , 4 , move 3 , 3 * 5 
[2526] c:0 is:loop 0 , 4 , move 2 , 6 - v0  decode:loop 0 , 3 , move ua - 4 , 6 / v0 
[2527] c:0 is:loop 0 , 7 , move v0 - 3 , 2  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[2528] c:0 is:loop 0 , 5 , move v0 , 3 * 3  decode:( move 4 , 4 ; move 4 , 0 - 4 ) 
[2529] c:0 is:loop 0 , 7 , move v0 - 2 , 3  decode:( move 4 , 2 ; move 4 , 3 ) 
[2530] c:0 is:loop 0 , 5 , move 3 , 2 / v0  decode:loop 0 , 4 , move 0 - 3 , 3 + v0 
[2531] c:0 is:loop 0 , 6 , move v0 - 2 , 4  decode:loop 0 , 3 , move 3 , 2 * 5 
[2532] c:0 is:loop 0 , 7 , move 3 , v0 - 2  decode:( move 9 , 4 * 4 ; move ua , 4 ) 
[2533] c:0 is:loop 0 , 5 , move v0 + 4 , 4  decode:loop 0 , 4 , move ua + v0 , 0 - 9 
[2534] c:0 is:loop 0 , 4 , move 4 , 4 - v0  decode:loop 0 , 4 , move ua - 2 , 4 - v0 
[2535] c:0 is:loop 0 , 5 , move 3 , v0 * 3  decode:( move ua , 3 ; move ua , 4 * 4 ) 
[2536] c:0 is:loop 0 , 6 , move v0 / 2 , 2  decode:loop 0 , 3 , move 3 , v0 + 9 
[2537] c:0 is:loop 0 , 4 , move 2 , 4 / v0  decode:loop 0 , 4 , move 2 , 4 + v0 
[2538] c:0 is:loop 0 , 3 , move 4 , v0 - 5  decode:loop 0 , 3 , move 4 , v0 - 9 
[2539] c:0 is:loop 0 , 6 , move 4 + v0 , 3  decode:loop 0 , 4 , move 0 - ua , 0 - 3 
[2540] c:0 is:loop 0 , 6 , move 3 + v0 , 4  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[2541] c:0 is:loop 0 , 6 , move 3 , 3 - v0  decode:( move ua , 9 ; move ua + 4 , 4 ) 
[2542] c:2 is:loop 0 , 4 , move v0 * 3 , 4  decode:loop 0 , 4 , move v0 * 3 , 4 
[2543] c:0 is:loop 0 , 5 , move 3 , v0 / 2  decode:loop 0 , 4 , move 3 , v0 /  
[2544] c:0 is:loop 0 , 4 , move v0 + 2 , 7  decode:( move ua , 9 ; move ua , 3 / 2 ) 
[2545] c:0 is:loop 0 , 6 , move 2 , v0 - 4  decode:( move ua , 3 * 4 ; move 3 , 2 ) 
[2546] c:0 is:loop 0 , 6 , move 2 * v0 , 3  decode:loop 0 , 4 , move ua + 2 , 0 - 3 
[2547] c:0 is:loop 0 , 5 , move v0 , 4 * 2  decode:loop 0 , 3 , move 3 - ua , 0 - 4 
[2548] c:0 is:loop 0 , 3 , move v0 + 2 , 8  decode:loop 0 , 3 , move 3 , v0 + 8 
[2549] c:0 is:loop 0 , 4 , move 3 , v0 * 4  decode:loop 0 , 4 , move 3 , 4 * v0 
[2550] c:0 is:loop 0 , 7 , move v0 + 3 , 3  decode:loop 0 , 4 , move 0 - ua , 3 - 3 
[2551] c:0 is:loop 0 , 5 , move 3 , v0 - 4  decode:loop 0 , 4 , move 3 , v0 - 4 
[2552] c:3 is:loop 0 , 3 , move 4 , 3 / v0  decode:loop 0 , 3 , move 4 , 3 / v0 
[2553] c:0 is:loop 0 , 6 , move 2 , 4 - v0  decode:( move 3 , 8 ; move ua + ul , 2 ) 
[2554] c:3 is:loop 0 , 3 , move 3 , v0 - 6  decode:loop 0 , 3 , move 3 , v0 - 6 
[2555] c:0 is:loop 0 , 4 , move v0 + 5 , 4  decode:loop 0 , 4 , move v0 + 4 , 4 
[2556] c:0 is:loop 0 , 5 , move v0 * 2 , 4  decode:loop 0 , 3 , move 4 + 3 , 0 - v+ 0 
[2557] c:0 is:loop 0 , 4 , move 3 , 3 / v0  decode:loop 0 , 3 , move ua - 3 , 3 / v0 
[2558] c:0 is:loop 0 , 4 , move v0 , 4 * 3  decode:( move 3 , ul ; move 2 , 2 / 3 ) 
[2559] c:0 is:loop 0 , 3 , move 3 , v0 + 7  decode:loop 0 , 3 , move 3 , 7 + v0 
[2560] c:0 is:loop 0 , 7 , move 2 , 3 - v0  decode:loop 0 , 3 , move 2 - ua , 3 - v0 
[2561] c:3 is:loop 0 , 4 , move 4 , v0 - 4  decode:loop 0 , 4 , move 4 , v0 - 4 
[2562] c:0 is:loop 0 , 3 , move 4 / 3 , v0  decode:loop 0 , 2 , move 2 , v0 
[2563] c:3 is:loop 0 , 4 , move 3 , v0 - 5  decode:loop 0 , 4 , move 3 , v0 - 5 
[2564] c:0 is:loop 0 , 3 , move 8 , v0 + 2  decode:loop 0 , 3 , move ua + 2 , v0 + 2 
[2565] c:3 is:loop 0 , 2 , move 4 , v0 / 4  decode:loop 0 , 2 , move 4 , v0 / 4 
[2566] c:3 is:loop 0 , 4 , move v0 * 2 , 5  decode:loop 0 , 4 , move v0 * 2 , 5 
[2567] c:3 is:loop 0 , 3 , move 3 / v0 , 4  decode:loop 0 , 3 , move 3 / v0 , 4 
[2568] c:0 is:loop 0 , 3 , move 5 , v0 - 4  decode:loop 0 , 3 , move ua - 2 , v0 - 4 
[2569] c:0 is:loop 0 , 7 , move 2 - v0 , 3  decode:( move 4 , 0 - 4 ; move 4 , 3 ) 
[2570] c:3 is:( move ua , ul ; move ul , 7 )  decode:( move ua , ul ; move ul , 7 ) 
[2571] c:0 is:loop 0 , 5 , move 4 / v0 , 2  decode:loop 0 , 3 , move 0 - 4 , 2 
[2572] c:0 is:loop 0 , 3 , move 5 , 3 / v0  decode:loop 0 , 3 , move 2 - ua , 3 / v0 
[2573] c:0 is:loop 0 , 3 , move 7 , v0 - 3  decode:loop 0 , 3 , move 4 + 3 , v0 - 3 
[2574] c:0 is:loop 0 , 2 , move v0 - 4 , 7  decode:( move 4 , 4 ; move 3 , 7 ) 
[2575] c:0 is:loop 0 , 4 , move v0 , 3 / 4  decode:loop 0 , 3 , move 4 - ua , 3 / 4 
[2576] c:3 is:loop 0 , 4 , move 4 , 5 - v0  decode:loop 0 , 4 , move 4 , 5 - v0 
[2577] c:3 is:loop 0 , 3 , move v0 - 4 , 6  decode:loop 0 , 3 , move v0 - 4 , 6 
[2578] c:0 is:loop 0 , 4 , move 0 - v0 , 9  decode:( move 3 , 4 / 3 ; move 3 , 9 ) 
[2579] c:0 is:loop 0 , 7 , move v0 + 3 , 4  decode:loop 0 , 4 , move v0 + ua , v0 0 0 0 4 * 
[2580] c:0 is:loop 0 , 4 , move v0 , 4 * 4  decode:loop 0 , 4 , move v0 - 2 , 4 0 0 0 
[2581] c:0 is:loop 0 , 6 , move v0 + 4 , 4  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[2582] c:0 is:loop 0 , 6 , move 3 , v0 / 2  decode:loop 0 , 4 , move 4 , v0 * 8 
[2583] c:0 is:loop 0 , 4 , move v0 - 4 , 5  decode:loop 0 , 4 , move 4 - ua , 5 
[2584] c:3 is:loop 0 , 4 , move 5 , 4 - v0  decode:loop 0 , 4 , move 5 , 4 - v0 
[2585] c:0 is:( move 3 , ul / move ua , ul )  decode:( move 3 , ul ; move ua , ul / 4 ) 
[2586] c:0 is:loop 0 , 3 , move 4 , v0 * 5  decode:loop 0 , 3 , move 4 , 2 * 5 
[2587] c:0 is:loop 0 , 2 , move 3 , v0 / 6  decode:( move 3 , 0 ; move 2 , ul - 3 ) 
[2588] c:0 is:loop 0 , 3 , move 2 , 8 - v0  decode:loop 0 , 4 , move v0 , 2 / ua 
[2589] c:0 is:loop 0 , 6 , move v0 , 4 * 2  decode:loop 0 , 4 , move 0 - 4 , 5 / v0 
[2590] c:3 is:( move ua , 8 ; move ua , ul )  decode:( move ua , 8 ; move ua , ul ) 
[2591] c:2 is:loop 0 , 3 , move 3 , v0 + 8  decode:( move 3 , 2 ; move 4 , 4 ) 
[2592] c:3 is:loop 0 , 3 , move v0 - 8 , 2  decode:loop 0 , 3 , move v0 - 8 , 2 
[2593] c:3 is:loop 0 , 4 , move 2 , v0 / 5  decode:loop 0 , 4 , move 2 , v0 / 5 
[2594] c:0 is:loop 0 , 6 , move 3 - v0 , 4  decode:loop 0 , 3 , move 3 , 4 - v0 
[2595] c:0 is:loop 0 , 3 , move 4 - v0 , 6  decode:( move 4 , 6 ; move 4 , 7 ) 
[2596] c:3 is:loop 0 , 4 , move 3 , v0 - 6  decode:loop 0 , 4 , move 3 , v0 - 6 
[2597] c:0 is:loop 0 , 4 , move 4 , 4 * v0  decode:loop 0 , 4 , move ua - 3 , 4 * v0 
[2598] c:0 is:loop 0 , 3 , move 4 / v0 , 4  decode:loop 0 , 3 , move 3 - ua , 4 
[2599] c:0 is:loop 0 , 7 , move v0 + 4 , 3  decode:loop 0 , 4 , move 3 - 3 , 3 - 3 
[2600] c:0 is:loop 0 , 7 , move 2 , v0 * 3  decode:loop 0 , 3 , move 2 - ua , 3 / 2 
[2601] c:0 is:( move ua , ul ; move ua , 8 )  decode:( move ua , ul ; move 7 , 8 ) 
[2602] c:0 is:loop 0 , 4 , move 4 , v0 - 5  decode:loop 0 , 4 , move ua - 2 , v0 - 5 
[2603] c:0 is:loop 0 , 4 , move v0 + 6 , 4  decode:loop 0 , 4 , move v0 + ua , 4 
[2604] c:0 is:loop 0 , 4 , move 4 - v0 , 5  decode:loop 0 , 4 , move 4 - ua , 5 
[2605] c:0 is:loop 0 , 7 , move 3 , 2 * v0  decode:loop 0 , 4 , move ua - 2 , 3 / 4 
[2606] c:0 is:loop 0 , 7 , move 4 - v0 , 2  decode:loop 0 , 4 , move 3 - ua , v0 + 2 
[2607] c:0 is:loop 0 , 5 , move 3 , v0 / 3  decode:loop 0 , 4 , move 3 , v0 / 3 
[2608] c:0 is:loop 0 , 2 , move v0 + 4 , 8  decode:loop 0 , 3 , move 3 + v0 , 8 
[2609] c:0 is:loop 0 , 6 , move v0 , 3 * 3  decode:loop 0 , 4 , move 3 , 0 - 9 
[2610] c:0 is:loop 0 , 6 , move v0 - 3 , 4  decode:loop 0 , 3 , move 3 , 4 + v0 
[2611] c:0 is:loop 0 , 3 , move v0 * 2 , 7  decode:loop 0 , 3 , move 2 , 2 / 4 
[2612] c:0 is:loop 0 , 3 , move 4 , 4 / v0  decode:loop 0 , 3 , move ua - 2 , 4 / v0 
[2613] c:0 is:loop 0 , 4 , move 3 , 6 - v0  decode:loop 0 , 3 , move 3 + v0 , 6 / 3 
[2614] c:3 is:loop 0 , 4 , move 4 , 3 / v0  decode:loop 0 , 4 , move 4 , 3 / v0 
[2615] c:0 is:loop 0 , 5 , move v0 , 4 * 3  decode:loop 0 , 4 , move 2 , v0 + ua 
[2616] c:0 is:loop 0 , 7 , move v0 / 2 , 2  decode:loop 0 , 3 , move 3 - ua , 0 - 9 
[2617] c:0 is:loop 0 , 3 , move 4 , 6 - v0  decode:loop 0 , 3 , move 4 , 3 + 5 / v0 
[2618] c:3 is:loop 0 , 4 , move 2 , v0 / 5  decode:loop 0 , 4 , move 2 , v0 / 5 
[2619] c:3 is:loop 0 , 4 , move 5 , v0 - 4  decode:loop 0 , 4 , move 5 , v0 - 4 
[2620] c:0 is:loop 0 , 7 , move v0 - 2 , 4  decode:loop 0 , 4 , move 3 - ua , 4 * 4 
[2621] c:3 is:loop 0 , 4 , move 2 , 5 / v0  decode:loop 0 , 4 , move 2 , 5 / v0 
[2622] c:0 is:loop 0 , 4 , move v0 + 2 , 8  decode:loop 0 , 4 , move 3 , 8 
[2623] c:0 is:loop 0 , 2 , move 8 , v0 - 3  decode:loop 0 , 3 , move 4 + v0 , 3 - 3 
[2624] c:0 is:loop 0 , 3 , move 5 , 4 * v0  decode:loop 0 , 4 , move 4 , 4 * v0 
[2625] c:0 is:loop 0 , 3 , move 3 , v0 * 6  decode:( move 5 , 4 ; move 4 , 4 * 3 ) 
[2626] c:0 is:loop 0 , 3 , move v0 - 5 , 5  decode:loop 0 , 3 , move v0 - ua , 5 
[2627] c:0 is:loop 0 , 4 , move 3 , v0 + 7  decode:loop 0 , 4 , move 3 , 9 / v0 
[2628] c:0 is:loop 0 , 4 , move 3 , v0 * 5  decode:loop 0 , 4 , move 3 , 5 * v0 
[2629] c:0 is:loop 0 , 7 , move 2 , 2 / v0  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[2630] c:0 is:loop 0 , 3 , move 2 + v0 , 9  decode:loop 0 , 3 , move 0 - 3 , 9 
[2631] c:0 is:loop 0 , 7 , move 3 - v0 , 3  decode:loop 0 , 3 , move 3 , 2 * v0 
[2632] c:0 is:loop 0 , 3 , move 2 , v0 / 6  decode:loop 0 , 3 , move 2 , 6 / v0 
[2633] c:3 is:loop 0 , 4 , move 3 , 4 / v0  decode:loop 0 , 4 , move 3 , 4 / v0 
[2634] c:0 is:loop 0 , 3 , move v0 + 3 , 8  decode:loop 0 , 3 , move 4 , ua / 8 
[2635] c:0 is:loop 0 , 5 , move 3 , 3 / v0  decode:loop 0 , 3 , move ua - 2 , 3 / v0 
[2636] c:0 is:loop 0 , 7 , move 2 - v0 , 4  decode:0 0 loop 0 , 3 , move 4 , 0 - v0 
[2637] c:3 is:loop 0 , 4 , move 2 , v0 + 8  decode:loop 0 , 4 , move 2 , v0 + 8 
[2638] c:3 is:loop 0 , 4 , move 4 , v0 + 6  decode:loop 0 , 4 , move 4 , v0 + 6 
[2639] c:0 is:loop 0 , 5 , move 4 , v0 / 2  decode:loop 0 , 4 , move ua - 2 , v0 / 2 
[2640] c:0 is:loop 0 , 4 , move 2 / v0 , 5  decode:loop 0 , 3 , move 2 , 5 
[2641] c:0 is:loop 0 , 5 , move v0 , 2 / 4  decode:loop 0 , 4 , move 4 - ua , 3 * 4 
[2642] c:0 is:loop 0 , 5 , move 2 , v0 / 4  decode:loop 0 , 3 , move 3 , v0 / 3 
[2643] c:0 is:loop 0 , 4 , move v0 - 7 , 2  decode:loop 0 , 4 , move 0 - ua , 2 
[2644] c:0 is:loop 0 , 7 , move v0 - 3 , 3  decode:( move 3 , 0 ; move 4 , 3 ) 
[2645] c:0 is:loop 0 , 4 , move 3 , v0 / 4  decode:loop 0 , 4 , move 4 / v0 , 2 / 4 
[2646] c:0 is:loop 0 , 4 , move v0 , 4 / 3  decode:( move 3 , 9 ; move 3 , 3 / 2 ) 
[2647] c:0 is:loop 0 , 6 , move v0 , 3 / 2  decode:loop 0 , 4 , move 0 - 4 , 9 / v0 
[2648] c:0 is:loop 0 , 5 , move 4 , v0 * 3  decode:loop 0 , 3 , move 0 - ua , v0 * 4 
[2649] c:0 is:loop 0 , 4 , move 4 , v0 - 6  decode:loop 0 , 4 , move 4 , v0 + 6 
[2650] c:0 is:loop 0 , 4 , move v0 , 3 / 5  decode:loop 0 , 3 , move 2 , 4 / 4 
[2651] c:0 is:loop 0 , 7 , move v0 , 3 / 2  decode:loop 0 , 4 , move 4 + v0 , 2 * 8 
[2652] c:3 is:loop 0 , 3 , move v0 - 4 , 7  decode:loop 0 , 3 , move v0 - 4 , 7 
[2653] c:0 is:loop 0 , 3 , move 6 , 3 / v0  decode:loop 0 , 3 , move ua , 3 / v0 
[2654] c:0 is:loop 0 , 4 , move 3 , 6 * v0  decode:loop 0 , 4 , move 3 , v0 * 7 
[2655] c:0 is:loop 0 , 4 , move 2 , v0 - 8  decode:( move ua , 0 - 4 ; move 2 , 8 ) 
[2656] c:0 is:loop 0 , 4 , move v0 + 3 , 8  decode:loop 0 , 4 , move v0 + 2 , 8 
[2657] c:0 is:loop 0 , 4 , move v0 * 2 , 7  decode:loop 0 , 4 , move v0 * 2 , 2 * 4 
[2658] c:0 is:loop 0 , 5 , move 3 , 4 / v0  decode:loop 0 , 4 , move 4 , 4 / v0 
[2659] c:0 is:loop 0 , 7 , move 3 - v0 , 4  decode:loop 0 , 4 , move 3 - ua , 0 - 0 4 
[2660] c:0 is:loop 0 , 6 , move 4 , v0 * 3  decode:loop 0 , 4 , move 4 + 3 , 0 - 0 v0 
[2661] c:0 is:loop 0 , 5 , move v0 , 4 / 3  decode:loop 0 , 4 , move 4 - ua , v0 - 4 
[2662] c:0 is:loop 0 , 3 , move v0 + 3 , 9  decode:loop 0 , 3 , move ua - 2 , 9 
[2663] c:0 is:loop 0 , 2 , move v0 - 4 , 8  decode:loop 0 , 2 , move 3 - ua , ua * ua 
[2664] c:0 is:loop 0 , 7 , move 2 , v0 / 3  decode:loop 0 , 4 , move ua - 3 , v0 / 4 
[2665] c:0 is:loop 0 , 7 , move 3 , v0 * 3  decode:loop 0 , 3 , move ua + v0 , 0 - 3 
[2666] c:0 is:loop 0 , 6 , move 3 , v0 * 4  decode:loop 0 , 4 , move 4 , 4 * v0 
[2667] c:3 is:loop 0 , 3 , move 5 , 4 / v0  decode:loop 0 , 3 , move 5 , 4 / v0 
[2668] c:0 is:loop 0 , 7 , move v0 - 3 , 4  decode:loop 0 , 4 , move 3 - ua , 4 * 4 
[2669] c:0 is:loop 0 , 5 , move v0 , 3 / 4  decode:( move 4 , ua * ua ; move 5 , ul ) 
[2670] c:0 is:loop 0 , 5 , move 4 , 3 / v0  decode:loop 0 , 3 , move ua , 3 / v0 
[2671] c:0 is:loop 0 , 4 , move v0 + 2 , 9  decode:loop 0 , 3 , move 5 , 9 
[2672] c:0 is:loop 0 , 7 , move v0 , 4 * 2  decode:loop 0 , 4 , move ua - ul , 9 * 3 
[2673] c:3 is:loop 0 , 4 , move 5 , 5 - v0  decode:loop 0 , 4 , move 5 , 5 - v0 
[2674] c:0 is:loop 0 , 4 , move 4 , 5 * v0  decode:loop 0 , 4 , move ua - 3 , v0 * 5 
[2675] c:0 is:loop 0 , 4 , move v0 - 4 , 6  decode:loop 0 , 4 , move 4 - ua , 6 
[2676] c:0 is:loop 0 , 4 , move 2 , v0 + 9  decode:loop 0 , 4 , move 2 , 4 + 4 / v0 
[2677] c:0 is:loop 0 , 2 , move 4 , v0 / 6  decode:loop 0 , 2 , move 4 , v0 / 4 
[2678] c:3 is:loop 0 , 3 , move 4 , v0 + 8  decode:loop 0 , 3 , move 4 , v0 + 8 
[2679] c:0 is:loop 0 , 3 , move 4 , 5 / v0  decode:loop 0 , 3 , move 3 - ua , 5 / v0 
[2680] c:0 is:loop 0 , 3 , move v0 * 4 , 6  decode:loop 0 , 3 , move 4 , 7 / 4 
[2681] c:3 is:loop 0 , 3 , move 3 , v0 + 9  decode:loop 0 , 3 , move 3 , v0 + 9 
[2682] c:0 is:loop 0 , 7 , move 2 , v0 * 4  decode:loop 0 , 4 , move 3 - ua , 2 - v0 
[2683] c:3 is:loop 0 , 4 , move 3 , 5 / v0  decode:loop 0 , 4 , move 3 , 5 / v0 
[2684] c:0 is:( move ul , 8 ; move ua , ul )  decode:( move ul , ul ; move ua , ul ) 
[2685] c:0 is:loop 0 , 3 , move 3 - v0 , 8  decode:loop 0 , 3 , move 2 , v0 + 4 
[2686] c:3 is:loop 0 , 3 , move v0 - 8 , 3  decode:loop 0 , 3 , move v0 - 8 , 3 
[2687] c:3 is:loop 0 , 4 , move 4 , 4 / v0  decode:loop 0 , 4 , move 4 , 4 / v0 
[2688] c:0 is:loop 0 , 4 , move 4 , 7 + v0  decode:loop 0 , 4 , move 4 , 9 / v0 
[2689] c:3 is:loop 0 , 4 , move 3 , v0 + 8  decode:loop 0 , 4 , move 3 , v0 + 8 
[2690] c:0 is:loop 0 , 2 , move 4 , v0 + 9  decode:loop 0 , 2 , move ua - 2 , v0 + 9 
[2691] c:0 is:loop 0 , 6 , move 4 , v0 / 2  decode:loop 0 , 4 , move ua , v0 / 2 
[2692] c:3 is:loop 0 , 4 , move 5 , 3 / v0  decode:loop 0 , 4 , move 5 , 3 / v0 
[2693] c:3 is:loop 0 , 4 , move 4 , 6 - v0  decode:loop 0 , 4 , move 4 , 6 - v0 
[2694] c:3 is:( move ua , ul ; move ua , 9 )  decode:( move ua , ul ; move ua , 9 ) 
[2695] c:0 is:loop 0 , 6 , move 3 , 3 / v0  decode:loop 0 , 4 , move ua - 2 , 0 - 8 
[2696] c:0 is:loop 0 , 5 , move v0 , 4 * 4  decode:loop 0 , 3 , move 3 - ua , 2 * 5 
[2697] c:3 is:loop 0 , 4 , move 3 , 7 - v0  decode:loop 0 , 4 , move 3 , 7 - v0 
[2698] c:3 is:loop 0 , 4 , move v0 - 8 , 2  decode:loop 0 , 4 , move v0 - 8 , 2 
[2699] c:0 is:loop 0 , 7 , move 3 / 2 , v0  decode:loop 0 , 4 , move ua - 4 , 9 / v0 
[2700] c:0 is:loop 0 , 3 , move v0 - 3 , 8  decode:loop 0 , 3 , move 2 , v0 + 8 
[2701] c:3 is:loop 0 , 3 , move 2 , v0 - 9  decode:loop 0 , 3 , move 2 , v0 - 9 
[2702] c:0 is:loop 0 , 7 , move v0 , 3 * 3  decode:loop 0 , 4 , move ul - ua , 0 - 4 * 0 
[2703] c:0 is:loop 0 , 4 , move 2 , 8 - v0  decode:loop 0 , 4 , move v0 , 2 / 4 
[2704] c:3 is:loop 0 , 4 , move 2 , v0 * 7  decode:loop 0 , 4 , move 2 , v0 * 7 
[2705] c:0 is:loop 0 , 6 , move 2 , 4 / v0  decode:loop 0 , 4 , move 3 - ua , v0 + 4 
[2706] c:3 is:loop 0 , 3 , move 3 , v0 - 8  decode:loop 0 , 3 , move 3 , v0 - 8 
[2707] c:3 is:loop 0 , 3 , move 4 + v0 , 8  decode:loop 0 , 3 , move 4 + v0 , 8 
[2708] c:0 is:loop 0 , 6 , move v0 / 2 , 4  decode:loop 0 , 3 , move ua - 4 , 9 
[2709] c:0 is:loop 0 , 4 , move v0 + 4 , 8  decode:loop 0 , 4 , move 4 + v0 , 9 * 4 
[2710] c:3 is:loop 0 , 3 , move 3 / v0 , 7  decode:loop 0 , 3 , move 3 / v0 , 7 
[2711] c:3 is:loop 0 , 4 , move 4 , 5 / v0  decode:loop 0 , 4 , move 4 , 5 / v0 
[2712] c:3 is:loop 0 , 3 , move 3 , v0 * 8  decode:loop 0 , 3 , move 3 , v0 * 8 
[2713] c:0 is:loop 0 , 6 , move 3 , v0 / 4  decode:0 loop 0 , 4 , move 4 , 4 * 3 
[2714] c:0 is:loop 0 , 4 , move 3 + v0 , 9  decode:loop 0 , 4 , move v0 + 3 , 9 
[2715] c:0 is:loop 0 , 3 , move 3 , v0 - 9  decode:loop 0 , 3 , move 3 - ua , v0 - 9 
[2716] c:3 is:loop 0 , 4 , move 5 , 4 / v0  decode:loop 0 , 4 , move 5 , 4 / v0 
[2717] c:0 is:loop 0 , 3 , move 4 + v0 , 9  decode:loop 0 , 3 , move ua , 9 
[2718] c:0 is:loop 0 , 7 , move 3 , 4 * v0  decode:loop 0 , 4 , move ua - v0 , 9 * 3 
[2719] c:0 is:loop 0 , 6 , move 4 , v0 * 4  decode:loop 0 , 4 , move ua , 0 - 4 * 4 
[2720] c:0 is:loop 0 , 7 , move 2 , v0 / 4  decode:loop 0 , 4 , move 3 , v0 * 6 
[2721] c:0 is:loop 0 , 4 , move 4 / v0 , 5  decode:loop 0 , 4 , move 3 , 5 
[2722] c:3 is:loop 0 , 3 , move 5 , v0 + 8  decode:loop 0 , 3 , move 5 , v0 + 8 
[2723] c:3 is:( move ul , 9 ; move ua , ul )  decode:( move ul , 9 ; move ua , ul ) 
[2724] c:0 is:loop 0 , 4 , move 4 - v0 , 7  decode:loop 0 , 4 , move 4 - ua , 7 
[2725] c:0 is:loop 0 , 4 , move 2 , v0 * 8  decode:loop 0 , 3 , move 3 , v0 * 8 
[2726] c:0 is:loop 0 , 3 , move 4 / v0 , 6  decode:( move 4 , 6 ; move ua , 7 ) 
[2727] c:1 is:loop 0 , 4 , move v0 - 7 , 4  decode:loop 0 , 4 , move v0 - ua , 4 
[2728] c:0 is:loop 0 , 7 , move 2 , 4 / v0  decode:loop 0 , 4 , move 4 , v0 * 5 
[2729] c:3 is:( move 8 , ul ; move ul , ul )  decode:( move 8 , ul ; move ul , ul ) 
[2730] c:0 is:loop 0 , 6 , move v0 , 4 * 4  decode:loop 0 , 3 , move v0 + 2 , 0 - 9 
[2731] c:0 is:loop 0 , 7 , move v0 / 2 , 4  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[2732] c:0 is:loop 0 , 6 , move v0 , 4 / 3  decode:loop 0 , 4 , move 4 , ua / v0 + ua 
[2733] c:0 is:loop 0 , 4 , move 5 , 5 * v0  decode:loop 0 , 4 , move v0 - ua , 5 * 3 
[2734] c:0 is:loop 0 , 4 , move 2 , 9 - v0  decode:loop 0 , 4 , move 2 , v0 - 9 
[2735] c:3 is:loop 0 , 3 , move 3 , 7 / v0  decode:loop 0 , 3 , move 3 , 7 / v0 
[2736] c:0 is:loop 0 , 4 , move 3 , 9 + v0  decode:0 loop 0 , 4 , move 3 , 3 + 9 
[2737] c:0 is:loop 0 , 4 , move v0 * 2 , 8  decode:loop 0 , 3 , move 4 , 8 
[2738] c:0 is:loop 0 , 7 , move 3 , v0 / 3  decode:loop 0 , 4 , move ua - ul , v0 + 8 
[2739] c:0 is:loop 0 , 3 , move 4 - v0 , 8  decode:loop 0 , 3 , move 3 , 8 
[2740] c:0 is:loop 0 , 4 , move 3 , 6 / v0  decode:loop 0 , 4 , move 3 , 6 - v0 
[2741] c:3 is:loop 0 , 4 , move 3 , v0 * 7  decode:loop 0 , 4 , move 3 , v0 * 7 
[2742] c:0 is:loop 0 , 4 , move 2 , v0 - 9  decode:( move 2 , 0 - 2 ; move ua , 4 ) 
[2743] c:0 is:loop 0 , 4 , move 5 , 7 + v0  decode:loop 0 , 4 , move ua - v0 , 9 
[2744] c:0 is:loop 0 , 5 , move 4 , 4 / v0  decode:loop 0 , 4 , move 4 , 4 * 3 / v0 
[2745] c:0 is:loop 0 , 4 , move 4 , 8 + v0  decode:loop 0 , 4 , move 4 , 0 - v0 + 2 
[2746] c:3 is:loop 0 , 3 , move 4 , v0 * 7  decode:loop 0 , 3 , move 4 , v0 * 7 
[2747] c:2 is:loop 0 , 3 , move 2 , v0 * 9  decode:loop 0 , 4 , move v0 , v0 * 9 
[2748] c:0 is:loop 0 , 6 , move v0 , 3 / 4  decode:loop 0 , 4 , move v0 * 2 , 2 / 4 
[2749] c:0 is:loop 0 , 4 , move 2 , 7 / v0  decode:loop 0 , 3 , move 3 , 7 / v0 
[2750] c:3 is:( move ul , ul ; move 8 , ul )  decode:( move ul , ul ; move 8 , ul ) 
[2751] c:0 is:loop 0 , 3 , move 4 , v0 + 9  decode:loop 0 , 3 , move ua - 2 , 9 / v0 
[2752] c:3 is:loop 0 , 3 , move 4 , v0 * 8  decode:loop 0 , 3 , move 4 , v0 * 8 
[2753] c:0 is:loop 0 , 7 , move v0 , 4 / 3  decode:loop 0 , 4 , move v0 + 4 , ua / 4 
[2754] c:0 is:loop 0 , 4 , move 2 , v0 * 9  decode:loop 0 , 4 , move 2 , v0 + 9 
[2755] c:0 is:loop 0 , 4 , move 4 , 9 + v0  decode:loop 0 , 4 , move 4 , ua / 9 
[2756] c:3 is:loop 0 , 4 , move 3 , v0 * 8  decode:loop 0 , 4 , move 3 , v0 * 8 
[2757] c:0 is:loop 0 , 3 , move v0 - 5 , 8  decode:loop 0 , 3 , move 0 - 4 , 8 
[2758] c:0 is:loop 0 , 4 , move 3 , v0 - 9  decode:loop 0 , 4 , move 3 , 9 9 9 
[2759] c:0 is:loop 0 , 4 , move v0 * 2 , 9  decode:loop 0 , 3 , move v0 - ua , 9 
[2760] c:3 is:loop 0 , 3 , move 4 , 7 / v0  decode:loop 0 , 3 , move 4 , 7 / v0 
[2761] c:0 is:loop 0 , 4 , move 5 , 5 / v0  decode:loop 0 , 4 , move ua - 2 , 5 / v0 
[2762] c:0 is:loop 0 , 3 , move 4 / v0 , 7  decode:loop 0 , 3 , move ua - 3 , 7 
[2763] c:0 is:loop 0 , 7 , move 3 , 4 / v0  decode:loop 0 , 4 , move ua - v0 , 4 * 4 
[2764] c:0 is:loop 0 , 4 , move 4 , v0 * 7  decode:loop 0 , 4 , move 4 , 7 * 7 
[2765] c:0 is:loop 0 , 3 , move 3 , v0 / 8  decode:loop 0 , 3 , move 3 , v0 / 4 
[2766] c:3 is:loop 0 , 4 , move v0 - 8 , 4  decode:loop 0 , 4 , move v0 - 8 , 4 
[2767] c:0 is:loop 0 , 3 , move v0 * 3 , 9  decode:( move 3 , ua / 3 ; move ua , 4 ) 
[2768] c:0 is:loop 0 , 4 , move 3 , 9 - v0  decode:loop 0 , 4 , move 0 - 3 , 9 - v0 
[2769] c:3 is:loop 0 , 3 , move 4 , v0 - 9  decode:loop 0 , 3 , move 4 , v0 - 9 
[2770] c:0 is:loop 0 , 7 , move v0 , 4 * 4  decode:loop 0 , 4 , move 4 , 0 - 0 - 3 
[2771] c:3 is:loop 0 , 4 , move 2 , 8 / v0  decode:loop 0 , 4 , move 2 , 8 / v0 
[2772] c:0 is:loop 0 , 4 , move v0 , 2 / 8  decode:loop 0 , 4 , move v0 , 8 / 2 
[2773] c:0 is:loop 0 , 4 , move 5 , 8 + v0  decode:loop 0 , 4 , move v0 + 3 , 0 - 8 
[2774] c:0 is:loop 0 , 4 , move 6 , 5 * v0  decode:loop 0 , 4 , move 4 + v0 , 0 * 5 
[2775] c:0 is:loop 0 , 3 , move 5 , v0 + 9  decode:loop 0 , 3 , move ua - 2 , 9 + v0 
[2776] c:0 is:loop 0 , 4 , move 4 , 6 / v0  decode:loop 0 , 4 , move 4 , 6 + v0 
[2777] c:0 is:loop 0 , 4 , move 4 + v0 , 9  decode:loop 0 , 4 , move ua , 0 - 9 
[2778] c:0 is:loop 0 , 6 , move 4 , 4 / v0  decode:loop 0 , 4 , move v0 - ua , 4 * 4 
[2779] c:0 is:loop 0 , 3 , move 4 * v0 , 8  decode:( move 8 , 0 - 4 ; move 8 , 8 ) 
[2780] c:0 is:loop 0 , 4 , move 5 , 7 * v0  decode:loop 0 , 4 , move 4 + v0 , 7 * 3 
[2781] c:3 is:loop 0 , 4 , move 3 , v0 * 9  decode:loop 0 , 4 , move 3 , v0 * 9 
[2782] c:3 is:loop 0 , 4 , move 4 , v0 * 8  decode:loop 0 , 4 , move 4 , v0 * 8 
[2783] c:0 is:loop 0 , 4 , move 3 / v0 , 8  decode:loop 0 , 3 , move 3 , 8 
[2784] c:3 is:loop 0 , 4 , move v0 * 3 , 9  decode:loop 0 , 4 , move v0 * 3 , 9 
[2785] c:0 is:loop 0 , 3 , move 4 * v0 , 9  decode:loop 0 , 3 , move 4 + v0 , 9 
[2786] c:2 is:loop 0 , 4 , move 5 + v0 , 9  decode:loop 0 , 4 , move 5 + v0 , 0 - 9 
[2787] c:0 is:loop 0 , 3 , move 5 - v0 , 9  decode:loop 0 , 3 , move 3 + v0 , 9 
[2788] c:0 is:loop 0 , 4 , move 6 , 8 + v0  decode:loop 0 , 4 , move v0 + 4 , 8 / 8 
[2789] c:0 is:loop 0 , 3 , move 3 , 9 / v0  decode:( move 4 , 9 ; move 4 , 9 ) 
[2790] c:3 is:loop 0 , 3 , move 4 , v0 * 9  decode:loop 0 , 3 , move 4 , v0 * 9 
[2791] c:3 is:loop 0 , 4 , move 3 , 8 / v0  decode:loop 0 , 4 , move 3 , 8 / v0 
[2792] c:3 is:loop 0 , 3 , move 4 , 8 / v0  decode:loop 0 , 3 , move 4 , 8 / v0 
[2793] c:0 is:loop 0 , 6 , move 3 + v0 , 9  decode:loop 0 , 4 , move ua + v0 , 0 - 9 
[2794] c:0 is:loop 0 , 4 , move v0 - 4 , 9  decode:loop 0 , 4 , move v0 + ul , 9 
[2795] c:0 is:loop 0 , 4 , move 4 / v0 , 7  decode:loop 0 , 4 , move 3 , 7 
[2796] c:3 is:loop 0 , 4 , move 4 , 8 / v0  decode:loop 0 , 4 , move 4 , 8 / v0 
[2797] c:3 is:loop 0 , 4 , move 5 , v0 * 8  decode:loop 0 , 4 , move 5 , v0 * 8 
[2798] c:3 is:loop 0 , 2 , move v0 - 8 , 8  decode:loop 0 , 2 , move v0 - 8 , 8 
[2799] c:0 is:loop 0 , 3 , move 5 , v0 * 9  decode:loop 0 , 3 , move ua - ul , v0 * 9 
[2800] c:0 is:loop 0 , 4 , move 6 + v0 , 9  decode:loop 0 , 4 , move v0 + ua , 9 
[2801] c:1 is:loop 0 , 4 , move 4 , v0 * 9  decode:loop 0 , 4 , move 4 , 9 * v0 
[2802] c:3 is:loop 0 , 3 , move v0 - 8 , 8  decode:loop 0 , 3 , move v0 - 8 , 8 
[2803] c:3 is:loop 0 , 4 , move 4 , 9 / v0  decode:loop 0 , 4 , move 4 , 9 / v0 
[2804] c:0 is:loop 0 , 3 , move 6 , 9 / v0  decode:loop 0 , 3 , move 3 + 2 , 9 / v0 
[2805] c:3 is:loop 0 , 4 , move v0 - 8 , 8  decode:loop 0 , 4 , move v0 - 8 , 8 
[2806] c:0 is:loop 0 , 4 , move 5 , 9 / v0  decode:loop 0 , 4 , move ua - v0 , 9 / 2 
[2807] c:3 is:loop 0 , 4 , move v0 - 7 , 9  decode:loop 0 , 4 , move v0 - 7 , 9 
[2808] c:0 is:loop 0 , 2 , move v0 + ua , 2  decode:( move ua , 2 ; move ua + ul , 2 ) 
[2809] c:0 is:loop 0 , 3 , move ua , v0 + 2  decode:loop 0 , 3 , move ua , 2 + v0 
[2810] c:0 is:loop 0 , 2 , move 2 - ua , v0  decode:loop 0 , 2 , move 0 - 4 , v0 
[2811] c:0 is:loop 0 , ua , move 4 , 0 - v0  decode:7 0 loop 0 , 4 , move ua - ul , 0 - 4 
[2812] c:0 is:loop 0 , 3 , move v0 + ua , 2  decode:loop 0 , 3 , move ua + ul , 2 
[2813] c:3 is:loop 0 , 2 , move ua , v0 - 2  decode:loop 0 , 2 , move ua , v0 - 2 
[2814] c:0 is:loop 0 , 2 , move v0 - ua , 2  decode:( move 0 - ua , 2 ; move 5 , 2 ) 
[2815] c:0 is:loop 0 , 2 , move ua - 2 , v0  decode:( move 4 , 0 ; move 4 , ul ) 
[2816] c:0 is:loop 0 , 2 , move ua - v0 , 2  decode:( move ua , 2 ; move 5 , 2 ) 
[2817] c:0 is:loop 0 , 2 , move ua - 3 , v0  decode:( move 3 , 0 ; move 3 , ul ) 
[2818] c:3 is:loop 0 , 2 , move ua , v0 - 3  decode:loop 0 , 2 , move ua , v0 - 3 
[2819] c:0 is:loop 0 , 2 , move ua + v0 , 4  decode:( move ua , 4 ; move ua + ul , 4 ) 
[2820] c:3 is:loop 0 , 3 , move v0 - ua , 2  decode:loop 0 , 3 , move v0 - ua , 2 
[2821] c:0 is:loop 0 , 3 , move v0 + 2 , ul  decode:loop 0 , 3 , move 3 , ul 
[2822] c:0 is:loop 0 , 4 , move 0 - v0 , ul  decode:loop 0 , 4 , move v0 , v0 - 4 
[2823] c:0 is:loop 0 , 4 , move ua , v0 + 2  decode:loop 0 , 4 , move ua , 2 + v0 
[2824] c:0 is:loop 0 , ua , move 5 , 0 - v0  decode:loop 0 , 4 , move 4 + 3 , ua * ua 
[2825] c:3 is:loop 0 , 3 , move ua - v0 , 2  decode:loop 0 , 3 , move ua - v0 , 2 
[2826] c:0 is:loop 0 , 3 , move ua - 2 , v0  decode:loop 0 , 3 , move 4 , v0 
[2827] c:3 is:loop 0 , 3 , move 2 - ua , v0  decode:loop 0 , 3 , move 2 - ua , v0 
[2828] c:0 is:loop 0 , 3 , move ua + v0 , 3  decode:loop 0 , 4 , move v0 * 3 , 3 
[2829] c:0 is:loop 0 , 2 , move ua - v0 , 3  decode:loop 0 , 2 , move v0 - ua , 3 
[2830] c:3 is:loop 0 , 4 , move v0 - ua , 2  decode:loop 0 , 4 , move v0 - ua , 2 
[2831] c:3 is:loop 0 , 3 , move 3 + v0 , ul  decode:loop 0 , 3 , move 3 + v0 , ul 
[2832] c:3 is:loop 0 , 3 , move ua - v0 , 3  decode:loop 0 , 3 , move ua - v0 , 3 
[2833] c:0 is:loop 0 , 3 , move ua - 3 , v0  decode:loop 0 , 3 , move 3 - ua , v0 
[2834] c:3 is:loop 0 , 3 , move 3 - ua , v0  decode:loop 0 , 3 , move 3 - ua , v0 
[2835] c:0 is:loop 0 , 3 , move v0 + ua , 4  decode:loop 0 , 3 , move ua + v0 , 4 
[2836] c:3 is:loop 0 , 4 , move ua - v0 , 2  decode:loop 0 , 4 , move ua - v0 , 2 
[2837] c:3 is:loop 0 , 2 , move v0 - 3 , ul  decode:loop 0 , 2 , move v0 - 3 , ul 
[2838] c:0 is:loop 0 , 4 , move 2 + v0 , ul  decode:loop 0 , 4 , move 3 , ul 0 / v0 0 0 0 
[2839] c:0 is:loop 0 , 2 , move ua - v0 , 4  decode:( move ua , 4 ; move 5 , 4 ) 
[2840] c:3 is:loop 0 , 2 , move v0 - ua , 4  decode:loop 0 , 2 , move v0 - ua , 4 
[2841] c:0 is:loop 0 , 3 , move ua , v0 - 3  decode:loop 0 , 3 , move 3 + 3 , v0 - 3 
[2842] c:3 is:loop 0 , 3 , move v0 - ua , 3  decode:loop 0 , 3 , move v0 - ua , 3 
[2843] c:0 is:loop 0 , 3 , move 2 , ul - v0  decode:loop 0 , 4 , move v0 , ul - 4 ) 
[2844] c:0 is:loop 0 , 3 , move 2 , v0 - ul  decode:( move 4 , 0 ; move 4 - ua , ul ) 
[2845] c:0 is:loop 0 , 2 , move ua , v0 - 4  decode:( move ua , 2 - 9 ; move ua , 3 ) 
[2846] c:0 is:loop 0 , 4 , move v0 + ul , 2  decode:loop 0 , 3 , move 3 - ua , 2 
[2847] c:0 is:loop 0 , 4 , move ua + v0 , 3  decode:loop 0 , 4 , move v0 * 3 , 0 - 3 
[2848] c:3 is:loop 0 , 3 , move ua , 3 - v0  decode:loop 0 , 3 , move ua , 3 - v0 
[2849] c:3 is:loop 0 , 2 , move v0 - 4 , ul  decode:loop 0 , 2 , move v0 - 4 , ul 
[2850] c:0 is:loop 0 , 5 , move ua + v0 , 3  decode:loop 0 , 4 , move v0 - ua , 0 - 1 
[2851] c:3 is:loop 0 , 3 , move ua , 4 - v0  decode:loop 0 , 3 , move ua , 4 - v0 
[2852] c:3 is:loop 0 , 2 , move v0 - ua , 5  decode:loop 0 , 2 , move v0 - ua , 5 
[2853] c:3 is:( move ul , ul ; move ua , ul )  decode:( move ul , ul ; move ua , ul ) 
[2854] c:0 is:loop 0 , 5 , move ua - 2 , v0  decode:loop 0 , 4 , move 4 + v0 , 0 0 0 0 0 
[2855] c:0 is:loop 0 , 5 , move v0 - ua , 2  decode:loop 0 , 4 , move v0 - ua , 4 
[2856] c:0 is:loop 0 , 4 , move ul , v0 - 2  decode:move 4 , 3 - 3 
[2857] c:0 is:loop 0 , 3 , move 3 , v0 - ul  decode:loop 0 , 3 , move ua - 3 , v0 - ul 
[2858] c:3 is:loop 0 , 3 , move ua , v0 - 4  decode:loop 0 , 3 , move ua , v0 - 4 
[2859] c:0 is:loop 0 , 5 , move 2 - ua , v0  decode:loop 0 , 4 , move 0 - 4 , v0 + 4 
[2860] c:0 is:( move ua , ul ; move ul , ul )  decode:( move ul , ul ; move ua - ul , ul ) 
[2861] c:0 is:loop 0 , 3 , move v0 + ul , 4  decode:loop 0 , 3 , move 2 , v0 + 2 
[2862] c:0 is:loop 0 , 4 , move 2 , v0 - ul  decode:( move 3 , ul - 3 ; move 4 , 2 ) 
[2863] c:0 is:loop 0 , 2 , move ua - v0 , 5  decode:( move ua , 5 ; move 5 , 5 ) 
[2864] c:0 is:loop 0 , 4 , move 3 , v0 + ul  decode:( move 3 , ul ; move 5 , 3 + 2 ) 
[2865] c:3 is:loop 0 , 3 , move ua - v0 , 4  decode:loop 0 , 3 , move ua - v0 , 4 
[2866] c:0 is:loop 0 , 3 , move 4 + v0 , ul  decode:loop 0 , 3 , move v0 + 4 , 2 - 3 
[2867] c:3 is:loop 0 , 3 , move ua / v0 , 2  decode:loop 0 , 3 , move ua / v0 , 2 
[2868] c:3 is:loop 0 , 4 , move ua + v0 , 4  decode:loop 0 , 4 , move ua + v0 , 4 
[2869] c:0 is:loop 0 , 2 , move ua , v0 - 5  decode:( move ua , 9 + 4 ; move ua , 4 ) 
[2870] c:0 is:loop 0 , 5 , move ul + v0 , 2  decode:loop 0 , 3 , move 5 , 2 
[2871] c:0 is:loop 0 , 4 , move v0 - 2 , ul  decode:loop 0 , 4 , move v0 - v0 
[2872] c:3 is:loop 0 , 4 , move ul , 2 - v0  decode:loop 0 , 4 , move ul , 2 - v0 
[2873] c:0 is:loop 0 , 3 , move 3 , ul - v0  decode:( move 3 , ul ; move ua , 2 - 3 ) 
[2874] c:0 is:loop 0 , 3 , move 4 - ua , v0  decode:loop 0 , 3 , move 0 - 2 , v0 
[2875] c:3 is:loop 0 , 3 , move v0 - ua , 4  decode:loop 0 , 3 , move v0 - ua , 4 
[2876] c:0 is:loop 0 , 4 , move 2 , ul - v0  decode:loop 0 , 4 , move 2 , v0 - 2 
[2877] c:3 is:loop 0 , 3 , move ua - 4 , v0  decode:loop 0 , 3 , move ua - 4 , v0 
[2878] c:0 is:loop 0 , 5 , move ul , v0 + 2  decode:( move 2 , 0 - 3 ; move 3 , 4 ) 
[2879] c:0 is:loop 0 , 3 , move 3 - v0 , ul  decode:( move 4 , ul ; move 2 , ul ) 
[2880] c:0 is:loop 0 , 5 , move ua - 3 , v0  decode:loop 0 , 4 , move 4 , v0 + 2 
[2881] c:0 is:loop 0 , 4 , move ul + v0 , 4  decode:loop 0 , 4 , move v0 + ul , 4 
[2882] c:1 is:loop 0 , 3 , move 3 , v0 / ua  decode:loop 0 , 3 , move 3 , v0 / ua 
[2883] c:0 is:loop 0 , 5 , move ul , 3 + v0  decode:( move 2 , ul ; move 3 , ua * ua ) 
[2884] c:3 is:loop 0 , 4 , move 2 , ua / v0  decode:loop 0 , 4 , move 2 , ua / v0 
[2885] c:0 is:loop 0 , 6 , move 2 - ua , v0  decode:loop 0 , 4 , move ua , v0 + 7 
[2886] c:0 is:loop 0 , 4 , move v0 , 2 / ua  decode:( move 3 , ul ; move 2 , 2 / 4 ) 
[2887] c:0 is:loop 0 , 4 , move ul , 4 + v0  decode:loop 0 , 4 , move ul , v0 + 4 
[2888] c:0 is:loop 0 , 6 , move 2 , ua - v0  decode:loop 0 , 4 , move 3 , 2 / v0 
[2889] c:0 is:loop 0 , 6 , move ua - 2 , v0  decode:0 loop 0 , 4 , move ua , 0 - 3 0 0 
[2890] c:0 is:loop 0 , 5 , move 3 , ua - v0  decode:loop 0 , 4 , move 3 + v0 , 0 - 9 
[2891] c:0 is:loop 0 , 4 , move ul , v0 - 3  decode:loop 0 , 2 , move v0 - 3 , 3 / 2 
[2892] c:0 is:loop 0 , 5 , move v0 - 2 , ul  decode:( move 2 , 4 ; move 4 , ul ) 
[2893] c:0 is:loop 0 , 3 , move ua - v0 , 5  decode:loop 0 , 3 , move ua - 2 , 5 
[2894] c:3 is:loop 0 , 3 , move ua , 4 * v0  decode:loop 0 , 3 , move ua , 4 * v0 
[2895] c:3 is:loop 0 , 3 , move 5 , ul + v0  decode:loop 0 , 3 , move 5 , ul + v0 
[2896] c:3 is:loop 0 , 3 , move 4 , v0 - ul  decode:loop 0 , 3 , move 4 , v0 - ul 
[2897] c:0 is:loop 0 , 5 , move 2 - v0 , ul  decode:( move 2 , ul ; move 4 , ul ) 
[2898] c:0 is:loop 0 , 5 , move 3 - ua , v0  decode:loop 0 , 4 , move 0 - 4 , v0 + 3 
[2899] c:0 is:loop 0 , 6 , move v0 + ua , 3  decode:loop 0 , 4 , move v0 + 3 , 3 
[2900] c:0 is:loop 0 , 4 , move v0 - ua , 4  decode:loop 0 loop 0 , 3 , move ua , 4 
[2901] c:3 is:loop 0 , 3 , move v0 - 4 , ul  decode:loop 0 , 3 , move v0 - 4 , ul 
[2902] c:3 is:loop 0 , 3 , move ua , 3 / v0  decode:loop 0 , 3 , move ua , 3 / v0 
[2903] c:3 is:loop 0 , 3 , move 2 , ul / v0  decode:loop 0 , 3 , move 2 , ul / v0 
[2904] c:0 is:loop 0 , 4 , move ua - v0 , 4  decode:loop 0 , 3 , move ua , 4 
[2905] c:3 is:loop 0 , 3 , move ua , 5 - v0  decode:loop 0 , 3 , move ua , 5 - v0 
[2906] c:0 is:loop 0 , 4 , move ua / v0 , 2  decode:loop 0 , 3 , move ua / v0 , 2 
[2907] c:0 is:loop 0 , 4 , move 3 , ul - v0  decode:loop 0 , 4 , move ua - 4 , ul - v0 
[2908] c:0 is:loop 0 , 5 , move ul + v0 , 3  decode:loop 0 , 4 , move 3 - ua , 9 * v0 
[2909] c:3 is:loop 0 , 4 , move 4 , v0 + ul  decode:loop 0 , 4 , move 4 , v0 + ul 
[2910] c:0 is:loop 0 , 3 , move 4 - v0 , ul  decode:loop 0 , 3 , move 0 - 3 , ul 
[2911] c:0 is:loop 0 , 6 , move ul , 2 + v0  decode:loop 0 , 4 , move v0 , v0 - 4 
[2912] c:0 is:loop 0 , 3 , move 4 , ul - v0  decode:( move 4 , ul ; move ua + 2 , ul ) 
[2913] c:0 is:loop 0 , 5 , move ul - v0 , 2  decode:loop 0 , 3 , move 2 , 0 - 4 
[2914] c:3 is:loop 0 , 3 , move ua , v0 - 5  decode:loop 0 , 3 , move ua , v0 - 5 
[2915] c:0 is:loop 0 , 4 , move 2 , v0 / ua  decode:loop 0 , 3 , move ua - 4 , v0 / ua 
[2916] c:0 is:loop 0 , 4 , move 2 * v0 , ul  decode:( move 5 , 3 ; move 2 + 4 , ul ) 
[2917] c:3 is:loop 0 , 3 , move v0 - ua , 5  decode:loop 0 , 3 , move v0 - ua , 5 
[2918] c:0 is:loop 0 , 4 , move ul , v0 * 2  decode:loop 0 , 4 , move 2 - v0 , 2 / 2 
[2919] c:0 is:loop 0 , 5 , move v0 - ul , 2  decode:( move 3 , 9 ; move 4 , 4 ) 
[2920] c:0 is:loop 0 , 6 , move v0 + ul , 2  decode:loop 0 , 4 , move v0 + 4 , 9 
[2921] c:0 is:loop 0 , 4 , move 3 , v0 - ul  decode:loop 0 , 3 , move 3 , v0 - ul 
[2922] c:0 is:loop 0 , 4 , move ua , 5 - v0  decode:loop 0 , 4 , move ua , 0 - 5 - v0 
[2923] c:0 is:loop 0 , 5 , move 3 , v0 - ul  decode:0 loop 0 , 3 , move ua , v0 - ul 
[2924] c:0 is:loop 0 , 6 , move v0 - ul , 2  decode:loop 0 , 3 , move ua - 3 , 0 - 9 
[2925] c:0 is:loop 0 , 3 , move 3 / v0 , ul  decode:loop 0 , 3 , move 4 - ua , ul 
[2926] c:0 is:loop 0 , 4 , move 4 - v0 , ul  decode:loop 0 , 4 , move 4 - ua , ul 
[2927] c:0 is:loop 0 , 5 , move ul + v0 , 4  decode:loop 0 , 3 , move 0 - 5 , v0 + 4 
[2928] c:0 is:loop 0 , 5 , move v0 - 3 , ul  decode:( move 0 - 3 , ul ; move 3 , ul ) 
[2929] c:0 is:loop 0 , 6 , move 3 , ua - v0  decode:loop 0 , 4 , move 4 , 0 - v0 * 4 
[2930] c:0 is:loop 0 , 7 , move ul , v0 + 2  decode:loop 0 , 4 , move v0 , 6 / 2 
[2931] c:0 is:loop 0 , ua , move 3 , 4 / v0  decode:loop 0 , 4 , move 2 - ua , v0 + 4 
[2932] c:0 is:loop 0 , 5 , move 4 , v0 + ul  decode:loop 0 , 4 , move 4 + v0 , 3 + 3 
[2933] c:0 is:loop 0 , 4 , move v0 + ul , 5  decode:loop 0 , 4 , move 4 - ua , v0 - 5 
[2934] c:0 is:loop 0 , 4 , move 3 , ua / v0  decode:loop 0 , 4 , move ua - 4 , ua / v0 
[2935] c:0 is:loop 0 , 5 , move 4 , ua - v0  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[2936] c:0 is:loop 0 , 7 , move 2 , ua - v0  decode:loop 0 , 4 , move 3 , 4 / v0 
[2937] c:0 is:loop 0 , 6 , move 2 , v0 - ul  decode:loop 0 , 3 , move 3 - ua , 3 * v0 
[2938] c:0 is:loop 0 , 4 , move ul , 2 / v0  decode:loop 0 , 2 , move 2 , 2 / v0 
[2939] c:0 is:loop 0 , 6 , move ul - v0 , 2  decode:loop 0 , 3 , move 3 + v0 , 0 - 4 
[2940] c:0 is:loop 0 , 6 , move 3 - ua , v0  decode:loop 0 , 4 , move ul - ua , 3 * 5 
[2941] c:0 is:loop 0 , 7 , move v0 + ul , 2  decode:loop 0 , 4 , move ua , 0 - 9 
[2942] c:0 is:loop 0 , 6 , move v0 - 2 , ul  decode:loop 0 , 3 , move 0 - 3 , ul / v0 
[2943] c:0 is:loop 0 , 6 , move 2 - v0 , ul  decode:loop 0 , 3 , move 3 , ul / v0 
[2944] c:3 is:loop 0 , 4 , move ua , v0 - 5  decode:loop 0 , 4 , move ua , v0 - 5 
[2945] c:3 is:loop 0 , 4 , move 2 , ul / v0  decode:loop 0 , 4 , move 2 , ul / v0 
[2946] c:0 is:loop 0 , 3 , move ua , v0 * 5  decode:( move ua , 0 ; move 9 , 9 + 4 ) 
[2947] c:0 is:loop 0 , 4 , move 4 , v0 - ul  decode:loop 0 , 3 , move ua - 2 , v0 - ul 
[2948] c:0 is:loop 0 , 4 , move 5 , ul + v0  decode:loop 0 , 4 , move 5 , 0 - v0 + ul 
[2949] c:0 is:loop 0 , 5 , move 2 , ua / v0  decode:( move 4 , 0 ; move 4 , 9 ) 
[2950] c:0 is:loop 0 , 6 , move ua - 3 , v0  decode:loop 0 , 4 , move ua - ul , 0 - v0 0 
[2951] c:0 is:loop 0 , 5 , move ua - v0 , 4  decode:loop 0 , 4 , move ua - v0 , 4 / 4 
[2952] c:0 is:loop 0 , 3 , move 3 , ul / v0  decode:loop 0 , 3 , move 3 , ul / 3 
[2953] c:0 is:loop 0 , 2 , move v0 + ua , 8  decode:loop 0 , 2 , move 4 + 3 , 8 
[2954] c:3 is:loop 0 , 3 , move ua / v0 , 4  decode:loop 0 , 3 , move ua / v0 , 4 
[2955] c:0 is:loop 0 , 4 , move 2 / v0 , ul  decode:loop 0 , 4 , move 0 - v0 , ul 
[2956] c:0 is:loop 0 , 5 , move ul , 2 * v0  decode:loop 0 , 3 , move 2 , v0 + 9 
[2957] c:0 is:loop 0 , 5 , move ul , 3 - v0  decode:( move 2 , 0 ; move 4 , 0 - 4 ) 
[2958] c:0 is:loop 0 , 6 , move 2 , ul - v0  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[2959] c:0 is:loop 0 , 5 , move 3 , ul - v0  decode:loop 0 , 4 , move 3 , ul - v0 
[2960] c:0 is:loop 0 , 4 , move 4 , ul - v0  decode:loop 0 , 4 , move 3 , ul - v0 
[2961] c:0 is:loop 0 , 4 , move v0 - 4 , ul  decode:loop 0 , 4 , move 4 - ua , ul 
[2962] c:0 is:loop 0 , 7 , move 2 , ul + v0  decode:loop 0 , 4 , move 3 / v0 , 4 / 4 
[2963] c:0 is:loop 0 , 5 , move ul , v0 - 3  decode:( move 3 , 4 ; move ul , 4 ) 
[2964] c:0 is:loop 0 , 5 , move 2 , v0 / ua  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[2965] c:0 is:loop 0 , 3 , move 6 , ul + v0  decode:loop 0 , 3 , move 2 + 4 , ul + v0 
[2966] c:0 is:loop 0 , 6 , move v0 - 3 , ul  decode:loop 0 , 3 , move 3 - ua , ul / v0 
[2967] c:0 is:loop 0 , 2 , move ua , v0 + 9  decode:( move ua , 9 ; move ua , 9 ) 
[2968] c:0 is:loop 0 , 4 , move ua , 7 + v0  decode:loop 0 , 4 , move v0 + 4 , 7 + 7 
[2969] c:0 is:loop 0 , 4 , move ul + v0 , 6  decode:, 0 loop 0 , 3 , move 3 , 6 
[2970] c:0 is:loop 0 , 5 , move v0 - ua , 5  decode:loop 0 , 4 , move ua - 2 , v0 - 9 
[2971] c:0 is:loop 0 , 7 , move ua - 3 , v0  decode:loop 0 , 4 , move ua , 3 * 3 - v0 
[2972] c:3 is:loop 0 , 4 , move ua , v0 - 6  decode:loop 0 , 4 , move ua , v0 - 6 
[2973] c:2 is:loop 0 , 4 , move ul , v0 / 3  decode:loop 0 , 4 , move ul , v0 / 3 
[2974] c:3 is:loop 0 , 2 , move ua - v0 , 8  decode:loop 0 , 2 , move ua - v0 , 8 
[2975] c:3 is:loop 0 , 3 , move ua , v0 + 8  decode:loop 0 , 3 , move ua , v0 + 8 
[2976] c:0 is:loop 0 , 6 , move 2 , ua / v0  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[2977] c:0 is:loop 0 , 4 , move 3 , ul / v0  decode:loop 0 , 3 , move 3 , ul / v0 
[2978] c:3 is:loop 0 , 2 , move ua + v0 , 9  decode:loop 0 , 2 , move ua + v0 , 9 
[2979] c:0 is:loop 0 , 7 , move v0 - ul , 2  decode:loop 0 , 4 , move ua - 2 , 0 - 9 
[2980] c:0 is:loop 0 , 5 , move ul , v0 - 4  decode:loop 0 , 4 , move v0 , v0 / 4 
[2981] c:0 is:loop 0 , 4 , move 3 / v0 , ul  decode:loop 0 , 4 , move 2 , ul 
[2982] c:0 is:loop 0 , 5 , move 4 , v0 - ul  decode:loop 0 , 3 , move v0 - ua , v0 0 0 
[2983] c:0 is:loop 0 , 4 , move ul , v0 * 4  decode:loop 0 , 4 , move ul , v0 + 4 
[2984] c:0 is:loop 0 , 5 , move v0 - ul , 4  decode:loop 0 , 4 , move 4 - ua , 0 - 9 
[2985] c:0 is:loop 0 , 5 , move 2 , ul / v0  decode:loop 0 , 4 , move ua - 4 , 3 - v0 
[2986] c:3 is:loop 0 , 2 , move v0 - ua , 8  decode:loop 0 , 2 , move v0 - ua , 8 
[2987] c:0 is:loop 0 , 4 , move ua , 5 * v0  decode:loop 0 , 4 , move 4 * v0 , ua * 4 
[2988] c:0 is:loop 0 , 5 , move ul , 4 - v0  decode:( move 2 , 9 ; move 3 , 0 - 4 ) 
[2989] c:0 is:loop 0 , 4 , move v0 , 4 / ua  decode:loop 0 , 4 , move v0 , v0 / 4 
[2990] c:0 is:loop 0 , 3 , move 4 / v0 , ul  decode:loop 0 , 3 , move 3 , ul 
[2991] c:0 is:loop 0 , 7 , move 2 - v0 , ul  decode:loop 0 , 3 , move 4 , 0 - v0 / 4 
[2992] c:0 is:loop 0 , 6 , move 4 - ua , v0  decode:loop 0 , 4 , move 3 - ua , v0 + 2 
[2993] c:0 is:loop 0 , 5 , move ul - v0 , 4  decode:loop 0 , 4 , move ua - 4 , 4 * 4 
[2994] c:0 is:loop 0 , 7 , move v0 - 2 , ul  decode:loop 0 , 3 , move 0 - 4 , 4 / 3 
[2995] c:0 is:loop 0 , 5 , move v0 , ua / 3  decode:loop 0 , 3 , move 3 - ua , v0 - 4 
[2996] c:0 is:loop 0 , 4 , move ua , 6 - v0  decode:loop 0 , 4 , move 4 + v0 , 6 - 3 
[2997] c:0 is:loop 0 , 5 , move 4 , ul - v0  decode:loop 0 , 3 , move ua , v0 - 3 
[2998] c:0 is:loop 0 , 4 , move 4 , ua / v0  decode:loop 0 , 4 , move 4 , 4 * v0 
[2999] c:0 is:loop 0 , 7 , move 3 , ua - v0  decode:loop 0 , 4 , move ua - 2 , v0 + 7 
[3000] c:0 is:loop 0 , 5 , move v0 , 3 / ua  decode:loop 0 , 3 , move 3 , 3 / 4 
[3001] c:0 is:loop 0 , 6 , move ul + v0 , 4  decode:0 loop 0 , 4 , move 5 , 0 - 3 0 
[3002] c:0 is:loop 0 , 5 , move 3 , ua / v0  decode:loop 0 , 4 , move 3 , 0 - v0 / 3 
[3003] c:0 is:loop 0 , 4 , move v0 , ua / 4  decode:( move 3 , 0 ; move 3 , 8 ) 
[3004] c:0 is:loop 0 , 7 , move 3 - ua , v0  decode:loop 0 , 4 , move 0 - ua , 3 + v0 
[3005] c:0 is:loop 0 , 7 , move ul - v0 , 2  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 
[3006] c:0 is:loop 0 , 6 , move 2 , v0 / ua  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[3007] c:0 is:loop 0 , 6 , move 3 - v0 , ul  decode:loop 0 , 3 , move 3 , ul / v0 
[3008] c:0 is:loop 0 , 4 , move ua / v0 , 4  decode:loop 0 , 3 , move ua / v0 , 4 
[3009] c:0 is:loop 0 , 6 , move v0 - ul , 4  decode:loop 0 , 4 , move 3 , 2 * 0 - v0 
[3010] c:0 is:loop 0 , 4 , move 4 / v0 , ul  decode:loop 0 , 4 , move 4 - ua , ul / 3 
[3011] c:0 is:loop 0 , 6 , move 4 - v0 , ul  decode:0 0 loop 0 , 4 , move 4 - ua , ul 
[3012] c:0 is:loop 0 , 6 , move ul , 4 - v0  decode:( move 2 , 2 ; move 4 , 4 ) 
[3013] c:0 is:loop 0 , 7 , move 4 - ua , v0  decode:loop 0 , 4 , move 0 - 4 , 2 / v0 
[3014] c:0 is:loop 0 , 6 , move 3 , ua / v0  decode:loop 0 , 4 , move 4 , 0 - v0 * 3 
[3015] c:3 is:loop 0 , 2 , move v0 - ua , 9  decode:loop 0 , 2 , move v0 - ua , 9 
[3016] c:0 is:loop 0 , 6 , move v0 / 2 , ul  decode:loop 0 , 4 , move 0 - 2 , 3 / 4 
[3017] c:0 is:loop 0 , 7 , move 3 , v0 - ul  decode:loop 0 , 3 , move ua + v0 , 0 - 2 
[3018] c:1 is:loop 0 , 2 , move ua - v0 , 9  decode:loop 0 , 2 , move ua - v0 , 9 
[3019] c:0 is:loop 0 , 7 , move 3 - v0 , ul  decode:loop 0 , 4 , move 3 , 4 * v0 
[3020] c:0 is:loop 0 , 6 , move ul - v0 , 4  decode:loop 0 , 3 , move 0 - 4 , 4 * 4 
[3021] c:0 is:loop 0 , 3 , move ua + v0 , 9  decode:loop 0 , 3 , move   v0 , 9 
[3022] c:0 is:loop 0 , 2 , move ua , v0 - 9  decode:loop 0 , 2 , move 0 - ua , v0 - 8 
[3023] c:0 is:loop 0 , 7 , move ul + v0 , 4  decode:0 loop 0 , 4 , move ua , 2 * 3 
[3024] c:0 is:loop 0 , 7 , move 2 , ua / v0  decode:loop 0 , 4 , move 0 - 3 , 2 
[3025] c:0 is:loop 0 , 6 , move v0 , ua / 3  decode:loop 0 , 4 , move 0 - 4 , v0 * 4 
[3026] c:0 is:loop 0 , 7 , move v0 - 3 , ul  decode:loop 0 , 4 , move 0 - 3 , 4 / 4 
[3027] c:0 is:loop 0 , 6 , move 2 , ul / v0  decode:loop 0 , 4 , move 3 , 0 - v0 / 4 
[3028] c:0 is:loop 0 , 7 , move ul , 2 * v0  decode:( move 3 , ul ; move 4 , 0 - 4 ) 
[3029] c:0 is:loop 0 , 6 , move ul , 2 / v0  decode:loop 0 , 4 , move v0 , v0 - 4 
[3030] c:0 is:loop 0 , 7 , move 3 , ul - v0  decode:loop 0 , 4 , move ua - v0 , 0 - 8 
[3031] c:0 is:loop 0 , 7 , move 4 , ua - v0  decode:loop 0 , 4 , move 4 + v0 , ua * 4 
[3032] c:0 is:loop 0 , 5 , move v0 , 4 / ua  decode:loop 0 , 3 , move 3 - ua , 3 * 4 
[3033] c:0 is:loop 0 , 5 , move v0 , ua / 4  decode:loop 0 , 3 , move ua - 3 , v0 + 4 
[3034] c:0 is:loop 0 , 6 , move v0 - 4 , ul  decode:loop 0 , 3 , move 3 - ua , v0 * 2 
[3035] c:0 is:loop 0 , 7 , move ua - 4 , v0  decode:loop 0 , 4 , move ua - 2 , ua * ua 
[3036] c:0 is:loop 0 , 4 , move ua , v0 + 8  decode:loop 0 , 4 , move v0 + ua , ua * 8 
[3037] c:0 is:loop 0 , 3 , move ua , v0 + 9  decode:loop 0 , 3 , move ua , 9 + v0 
[3038] c:0 is:loop 0 , 4 , move 7 , v0 + ul  decode:loop 0 , 4 , move ua + ul , v0 + ul 
[3039] c:3 is:loop 0 , 3 , move ua - v0 , 8  decode:loop 0 , 3 , move ua - v0 , 8 
[3040] c:3 is:loop 0 , 3 , move 8 , v0 + ul  decode:loop 0 , 3 , move 8 , v0 + ul 
[3041] c:0 is:loop 0 , 4 , move ul + v0 , 7  decode:0 2 loop 0 , 4 , move 2 , 3 + 3 2 
[3042] c:0 is:loop 0 , 7 , move ul , 3 * v0  decode:loop 0 , 4 , move 2 , v0 + 4 
[3043] c:0 is:loop 0 , 7 , move v0 - 4 , ul  decode:loop 0 , 4 , move 3 - ua , v0 - 5 
[3044] c:0 is:loop 0 , 7 , move ul - v0 , 4  decode:loop 0 , 4 , move 2 - ua , 0 - 4 
[3045] c:0 is:loop 0 , 4 , move v0 - ua , 8  decode:loop 0 , 3 , move v0 - ua , 8 
[3046] c:0 is:loop 0 , 3 , move ul + v0 , 9  decode:( move 3 , 5 ; move 3 , 3 ) 
[3047] c:3 is:loop 0 , 3 , move v0 - ua , 9  decode:loop 0 , 3 , move v0 - ua , 9 
[3048] c:0 is:loop 0 , 5 , move ul , v0 / 4  decode:loop 0 , 4 , move ul , v0 / 3 
[3049] c:0 is:loop 0 , 5 , move v0 , ul / 4  decode:( move 2 - ua , 4 ; move 4 , 9 ) 
[3050] c:0 is:loop 0 , 3 , move 9 , ul + v0  decode:loop 0 , 3 , move 9 , v0 + v0 
[3051] c:0 is:loop 0 , 6 , move ul , 3 / v0  decode:loop 0 , 4 , move v0 , v0 - 4 
[3052] c:3 is:loop 0 , 3 , move ua , v0 * 8  decode:loop 0 , 3 , move ua , v0 * 8 
[3053] c:0 is:loop 0 , 7 , move 3 , ua / v0  decode:loop 0 , 4 , move 4 , 0 - 4 * v0 
[3054] c:0 is:loop 0 , 7 , move 4 - v0 , ul  decode:loop 0 , 4 , move ul + v0 , ul 
[3055] c:0 is:loop 0 , 7 , move 4 , v0 - ul  decode:loop 0 , 3 , move v0 * ua , 0 - 8 
[3056] c:0 is:loop 0 , 7 , move v0 - ul , 4  decode:loop 0 , 3 , move ul - ua , 3 - v0 
[3057] c:0 is:loop 0 , 7 , move 4 , ul - v0  decode:loop 0 , 4 , move 4 + 3 , ua * ua 
[3058] c:0 is:loop 0 , 4 , move v0 + ul , 8  decode:loop 0 , 4 , move 4 - ua , v0 + 4 
[3059] c:0 is:loop 0 , 6 , move v0 , ua / 4  decode:loop 0 , 4 , move 4 , 4 * 4 / v0 
[3060] c:0 is:loop 0 , 7 , move v0 , ua / 3  decode:loop 0 , 3 , move v0 + 4 , 0 - 3 
[3061] c:0 is:loop 0 , 7 , move ul , 2 / v0  decode:loop 0 , 4 , move 2 , 4 +  8 
[3062] c:0 is:loop 0 , 7 , move v0 / 2 , ul  decode:loop 0 , 4 , move 0 - 3 , 4 / v0 
[3063] c:0 is:loop 0 , 7 , move v0 / 3 , ul  decode:loop 0 , 3 , move 4 - ua , 4 / v0 
[3064] c:0 is:loop 0 , 7 , move v0 , ua / 4  decode:loop 0 , 4 , move 0 - ua , 0 - 8 
[3065] c:0 is:loop 0 , 6 , move ul , 4 / v0  decode:loop 0 , 3 , move 4 - ua , v0 - 4 
[3066] c:0 is:loop 0 , 4 , move 9 , ul + v0  decode:loop 0 , 4 , move 4 * v0 , 0 - 0 ul 
[3067] c:3 is:loop 0 , 3 , move ua , v0 * 9  decode:loop 0 , 3 , move ua , v0 * 9 
[3068] c:0 is:loop 0 , 4 , move ua - 9 , v0  decode:loop 0 , 3 , move 0 - 3 , v0 
[3069] c:0 is:loop 0 , 4 , move ul + v0 , 9  decode:loop 0 , 3 , move 3 - ua , 9 
[3070] c:3 is:loop 0 , 4 , move ua - v0 , 9  decode:loop 0 , 4 , move ua - v0 , 9 
[3071] c:0 is:loop 0 , 7 , move ul , 3 / v0  decode:loop 0 , 4 , move v0 , v0 - 4 
[3072] c:0 is:loop 0 , 4 , move v0 , ul / 6  decode:( move 4 , 2 ; move 4 , 6 ) 
[3073] c:0 is:loop 0 , 7 , move ul , v0 * 4  decode:loop 0 , 4 , move 2 , 9 
[3074] c:3 is:loop 0 , 4 , move ua - v0 , 9  decode:loop 0 , 4 , move ua - v0 , 9 
[3075] c:0 is:loop 0 , 7 , move v0 / 4 , ul  decode:( move 2 , 4 ; move 3 , 2 ) 
[3076] c:0 is:loop 0 , 4 , move ua / v0 , 8  decode:loop 0 , 4 , move 3 + v0 , 8 
[3077] c:0 is:loop 0 , 4 , move ua , 9 / v0  decode:loop 0 , 4 , move 3 + 4 , 9 / v0 
[3078] c:3 is:loop 0 , 4 , move ua / v0 , 9  decode:loop 0 , 4 , move ua / v0 , 9 
[3079] c:0 is:loop 0 , 7 , move ul + v0 , 9  decode:loop 0 , 4 , move 2 - ua , 4 * 4 
[3080] c:0 is:loop 0 , 2 , move ua - ul , v0  decode:( move 5 , 0 ; move ua - 2 , ul ) 
[3081] c:0 is:loop 0 , 2 , move ul - ua , v0  decode:( move 5 , 0 - 3 ; move 5 , ul ) 
[3082] c:3 is:loop 0 , 3 , move ua , v0 + ul  decode:loop 0 , 3 , move ua , v0 + ul 
[3083] c:3 is:loop 0 , 3 , move ua - ul , v0  decode:loop 0 , 3 , move ua - ul , v0 
[3084] c:3 is:loop 0 , 3 , move ul - ua , v0  decode:loop 0 , 3 , move ul - ua , v0 
[3085] c:3 is:loop 0 , 4 , move ua , v0 + ul  decode:loop 0 , 4 , move ua , v0 + ul 
[3086] c:0 is:loop 0 , 3 , move v0 + ul , ul  decode:( move 3 , ul / 4 ; move 4 , ul ) 
[3087] c:3 is:loop 0 , 4 , move ul - ua , v0  decode:loop 0 , 4 , move ul - ua , v0 
[3088] c:0 is:loop 0 , ua , move ua - v0 , 5  decode:loop 0 , 4 , move v0 * ua , 0 - 9 
[3089] c:3 is:loop 0 , 4 , move ua - ul , v0  decode:loop 0 , 4 , move ua - ul , v0 
[3090] c:3 is:loop 0 , 4 , move v0 , ua * ua  decode:loop 0 , 4 , move v0 , ua * ua 
[3091] c:0 is:loop 0 , 4 , move v0 + ul , ul  decode:loop 0 , 4 , move 3 , v0 + ul 
[3092] c:0 is:loop 0 , 5 , move ua - ul , v0  decode:loop 0 , 4 , move ua , 0 - v0 / 2 
[3093] c:0 is:loop 0 , 5 , move ul - ua , v0  decode:loop 0 , 4 , move ul - ua , v0 * 3 
[3094] c:0 is:loop 0 , 5 , move ul + v0 , ul  decode:loop 0 , 4 , move 3 - ua , 2 / v0 
[3095] c:3 is:loop 0 , 4 , move ul , v0 - ul  decode:loop 0 , 4 , move ul , v0 - ul 
[3096] c:0 is:loop 0 , 4 , move v0 - ul , ul  decode:move 4 , 3 
[3097] c:0 is:loop 0 , 5 , move v0 , ua * ua  decode:loop 0 , 3 , move 3 - ua , 3 + v0 
[3098] c:0 is:loop 0 , 4 , move ul , ul - v0  decode:loop 0 , 2 , move ul + v0 , ua * ua 
[3099] c:0 is:loop 0 , 5 , move ul - v0 , ul  decode:( move 3 , ul ; move 4 , ul ) 
[3100] c:0 is:loop 0 , 5 , move v0 - ul , ul  decode:( move 3 , 4 ; move 4 , ul ) 
[3101] c:0 is:loop 0 , 4 , move ul , v0 / ua  decode:loop 0 , 4 , move v; move ul , 2 / ua 
[3102] c:0 is:loop 0 , 4 , move ul , ua / v0  decode:( move ul , 0 ; move 3 , 0 - 8 ) 
[3103] c:0 is:loop 0 , 6 , move v0 , ua * ua  decode:loop 0 , 4 , move 0 - 4 , 0 - 8 
[3104] c:0 is:loop 0 , 6 , move ul - ua , v0  decode:loop 0 , 4 , move 4 + 3 , 0 - 0 4 
[3105] c:0 is:loop 0 , 6 , move ua - ul , v0  decode:loop 0 , 4 , move 4 + 3 , 0 - 0 8 
[3106] c:0 is:loop 0 , 7 , move ul , v0 + ul  decode:( move 3 , 2 - 3 ; move 3 , 9 ) 
[3107] c:0 is:loop 0 , 7 , move v0 , ua * ua  decode:loop 0 , 4 , move ul - ua , 0 - 4 
[3108] c:0 is:loop 0 , 6 , move ul - v0 , ul  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[3109] c:0 is:loop 0 , 6 , move v0 - ul , ul  decode:loop 0 , 3 , move 4 , 3 + 4 / v0 
[3110] c:0 is:loop 0 , 5 , move ul , v0 / ua  decode:loop 0 , 3 , move 2 , v0 / 2 
[3111] c:0 is:loop 0 , 4 , move ul , ul / v0  decode:loop 0 , 2 , move 2 , 4 / 4 
[3112] c:0 is:loop 0 , 5 , move v0 , ul / ua  decode:( move ua , 4 ; move 4 , 6 ) 
[3113] c:0 is:loop 0 , 5 , move ul , ul / v0  decode:loop 0 , 4 , move ul , 4 / v0 
[3114] c:0 is:loop 0 , 7 , move v0 - ul , ul  decode:loop 0 , 4 , move 0 - 4 , 4 * 3 
[3115] c:0 is:loop 0 , 6 , move ul , ua / v0  decode:loop 0 , 3 , move 2 , ua / 0 - 4 
[3116] c:0 is:loop 0 , 4 , move 0 - 2 , 0 - 2  decode:loop 0 , 3 , move 0 - 3 , 0 - 2 
[3117] c:0 is:loop 0 , 6 , move ul , v0 / ua  decode:loop 0 , 4 , move 2 , v0 / 4 
[3118] c:0 is:loop 0 , 7 , move ul - v0 , ul  decode:loop 0 , 4 , move 4 , 4 * 0 - v0 
[3119] c:0 is:loop 0 , 7 , move ul , ua / v0  decode:loop 0 , 3 , move 2 , 4 / v0 
[3120] c:0 is:loop 0 , 2 , move 0 - 3 , 0 - 4  decode:( move 3 , ul - 9 ; move 3 , 4 ) 
[3121] c:3 is:loop 0 , 4 , move 0 - 3 , 0 - 2  decode:loop 0 , 4 , move 0 - 3 , 0 - 2 
[3122] c:3 is:loop 0 , 4 , move 0 - 3 , 0 - 2  decode:loop 0 , 4 , move 0 - 3 , 0 - 2 
[3123] c:3 is:loop 0 , 2 , move 0 - 3 , 2 - 3  decode:loop 0 , 2 , move 0 - 3 , 2 - 3 
[3124] c:3 is:loop 0 , 3 , move 0 - 2 , 2 - 3  decode:loop 0 , 3 , move 0 - 2 , 2 - 3 
[3125] c:0 is:loop 0 , 7 , move ul , ul / v0  decode:loop 0 , 4 , move 2 , v0 - 7 
[3126] c:3 is:loop 0 , 3 , move 0 - 4 , 0 - 3  decode:loop 0 , 3 , move 0 - 4 , 0 - 3 
[3127] c:0 is:loop 0 , 2 , move 0 - 4 , 0 - 4  decode:( move 4 , 9 / 2 ; move 4 , 4 ) 
[3128] c:0 is:loop 0 , 4 , move 0 - 4 , 0 - 2  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 
[3129] c:0 is:loop 0 , 4 , move 4 + 2 , 0 - 2  decode:loop 0 , 4 , move ua , 0 - 2 
[3130] c:3 is:loop 0 , 4 , move 0 - 4 , 0 - 3  decode:loop 0 , 4 , move 0 - 4 , 0 - 3 
[3131] c:3 is:loop 0 , 3 , move 4 + 3 , 0 - 2  decode:loop 0 , 3 , move 4 + 3 , 0 - 2 
[3132] c:0 is:loop 0 , 4 , move 0 - 2 , 2 - 3  decode:loop 0 , 4 , move 0 - 2 , 4 * 3 
[3133] c:3 is:loop 0 , 4 , move 0 - 5 , 0 - 2  decode:loop 0 , 4 , move 0 - 5 , 0 - 2 
[3134] c:3 is:loop 0 , 3 , move 0 - 3 , 2 - 3  decode:loop 0 , 3 , move 0 - 3 , 2 - 3 
[3135] c:0 is:loop 0 , 4 , move 0 - 3 , 2 - 3  decode:loop 0 , 4 , move 0 - 3 , 4 * 3 
[3136] c:3 is:loop 0 , 4 , move 0 - 3 , 0 - 5  decode:loop 0 , 4 , move 0 - 3 , 0 - 5 
[3137] c:3 is:loop 0 , 3 , move 0 - 4 , 2 - 3  decode:loop 0 , 3 , move 0 - 4 , 2 - 3 
[3138] c:0 is:( move 0 - 3 , 0 ; move 2 , 2 )  decode:( move 3 , 0 ; move 2 , ul ) 
[3139] c:0 is:loop 0 , 4 , move 0 - 4 , 2 - 3  decode:loop 0 , 4 , move 0 - 4 , 4 * 3 
[3140] c:3 is:( move 2 , 0 ; move 2 , 0 - 4 )  decode:( move 2 , 0 ; move 2 , 0 - 4 ) 
[3141] c:0 is:loop 0 , 2 , move 0 - 2 , 4 / 3  decode:loop 0 , 2 , move 0 - 2 , ua / 4 
[3142] c:3 is:loop 0 , 4 , move 0 - 4 , 0 - 5  decode:loop 0 , 4 , move 0 - 4 , 0 - 5 
[3143] c:0 is:loop 0 , 3 , move 0 - 3 , 3 / 2  decode:loop 0 , 3 , move 3 - ua , 4 / 4 
[3144] c:0 is:loop 0 , 3 , move 0 - 3 , 2 / 3  decode:loop 0 , 3 , move 0 - 3 , 2 / 9 
[3145] c:0 is:loop 0 , 4 , move 0 - 2 , 0 - 7  decode:loop 0 , 4 , move 0 - 2 , 9 / v0 
[3146] c:0 is:loop 0 , 4 , move 0 - 6 , 0 - 3  decode:loop 0 , 4 , move 0 - 0 - 0 - 3 
[3147] c:3 is:loop 0 , 2 , move 0 - 4 , 3 / 2  decode:loop 0 , 2 , move 0 - 4 , 3 / 2 
[3148] c:3 is:( move 2 , 0 ; move 4 , 0 - 2 )  decode:( move 2 , 0 ; move 4 , 0 - 2 ) 
[3149] c:0 is:loop 0 , 4 , move 0 - 2 , 2 / 3  decode:loop 0 , 4 , move 0 - 2 , 4 / 3 
[3150] c:0 is:loop 0 , 4 , move 4 + 3 , 0 - 4  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[3151] c:0 is:loop 0 , 3 , move 0 - 2 , 3 / 4  decode:loop 0 , 3 , move 2 , 4 / 4 
[3152] c:0 is:( move 5 , 0 ; move 2 , 0 - 2 )  decode:( move 5 , 0 ; move 4 - ua , 2 ) 
[3153] c:0 is:loop 0 , 4 , move 0 - 3 , 3 / 2  decode:loop 0 , 4 , move 3 - ua , 3 / 4 
[3154] c:3 is:( move 3 , 0 ; move 4 , 0 - 2 )  decode:( move 3 , 0 ; move 4 , 0 - 2 ) 
[3155] c:2 is:loop 0 , 3 , move 0 - 4 , 3 / 2  decode:loop 0 , 3 , move 4 , 3 / 2 
[3156] c:0 is:loop 0 , 6 , move 0 - 2 , 3 * 2  decode:loop 0 , 3 , move 2 - ua , 0 - 4 
[3157] c:3 is:loop 0 , 4 , move 0 - 2 , 2 / 4  decode:loop 0 , 4 , move 0 - 2 , 2 / 4 
[3158] c:3 is:loop 0 , 3 , move 0 - 3 , 4 * 3  decode:loop 0 , 3 , move 0 - 3 , 4 * 3 
[3159] c:0 is:( move 0 - 2 , 2 ; move 2 , 3 )  decode:( move ul , 2 ; move 3 , ul ) 
[3160] c:0 is:loop 0 , 4 , move 0 - 3 , 2 / 3  decode:loop 0 , 4 , move 3 - ua , 2 / 3 
[3161] c:0 is:loop 0 , 4 , move 0 - 2 , 4 * 3  decode:loop 0 , 4 , move 4 - ua , 4 * 3 
[3162] c:3 is:loop 0 , 4 , move 0 - 8 , 0 - 2  decode:loop 0 , 4 , move 0 - 8 , 0 - 2 
[3163] c:0 is:loop 0 , 2 , move 3 + 2 , 2 / 4  decode:loop 0 , 4 , move 2 , 2 / ua 
[3164] c:0 is:( move 2 , 2 ; move 3 , 0 - 2 )  decode:( move 3 , 0 ; move 2 , 2 ) 
[3165] c:0 is:( move 2 , 2 ; move 4 , 0 - 2 )  decode:( move 4 , 0 ; move 2 , 2 ) 
[3166] c:1 is:loop 0 , 2 , move 0 - 4 , 0 - 9  decode:0 0 loop 0 , 2 , move 0 - 4 , 9 
[3167] c:3 is:loop 0 , 2 , move 0 - 4 , 4 * 4  decode:loop 0 , 2 , move 0 - 4 , 4 * 4 
[3168] c:0 is:loop 0 , 3 , move 0 - 3 , 2 / 5  decode:loop 0 , 4 , move 1 - 4 , 2 / 5 
[3169] c:3 is:loop 0 , 4 , move 0 - 2 , 3 / 4  decode:loop 0 , 4 , move 0 - 2 , 3 / 4 
[3170] c:3 is:loop 0 , 3 , move 0 - 4 , 2 * 5  decode:loop 0 , 3 , move 0 - 4 , 2 * 5 
[3171] c:3 is:( move 0 - 4 , 0 ; move 4 , 2 )  decode:( move 0 - 4 , 0 ; move 4 , 2 ) 
[3172] c:3 is:loop 0 , 2 , move 4 + 2 , 4 * 3  decode:loop 0 , 2 , move 4 + 2 , 4 * 3 
[3173] c:0 is:loop 0 , 3 , move 0 - 3 , 4 / 3  decode:loop 0 , 3 , move 0 - 3 , 0 - 3 
[3174] c:0 is:( move 0 - 4 , 0 ; move 2 , 4 )  decode:( move 4 , 0 ; move 2 , ul ) 
[3175] c:3 is:( move 4 , 0 ; move 4 , 0 - 2 )  decode:( move 4 , 0 ; move 4 , 0 - 2 ) 
[3176] c:0 is:loop 0 , 4 , move 0 - 2 , 4 / 3  decode:loop 0 , 3 , move 3 - ua , ua / 4 
[3177] c:0 is:( move 2 , 3 ; move 0 - 3 , 2 )  decode:( move 2 , 3 ; move 3 , 5 ) 
[3178] c:0 is:( move 3 , 0 ; move 0 - 4 , 3 )  decode:( move 2 , 0 ; move ua , 3 + 3 ) 
[3179] c:0 is:loop 0 , 4 , move 0 - 4 , 3 / 2  decode:loop 0 , 4 , move 4 , 3 / 2 
[3180] c:3 is:loop 0 , 4 , move 0 - 7 , 0 - 4  decode:loop 0 , 4 , move 0 - 7 , 0 - 4 
[3181] c:3 is:loop 0 , 3 , move 0 - 4 , 0 - 8  decode:loop 0 , 3 , move 0 - 4 , 0 - 8 
[3182] c:3 is:loop 0 , 4 , move 0 - 8 , 0 - 3  decode:loop 0 , 4 , move 0 - 8 , 0 - 3 
[3183] c:0 is:( move 2 - 3 , 0 ; move 3 , 2 )  decode:( move 3 , 0 - 2 ; move 3 , 2 ) 
[3184] c:0 is:loop 0 , 4 , move 0 - 2 , 2 / 5  decode:loop 0 , 4 , move 0 - 2 , 0 - 5 
[3185] c:0 is:( move 4 , 0 ; move 2 , 0 - 4 )  decode:( move 3 , 0 ; move 2 , 0 - 4 ) 
[3186] c:0 is:loop 0 , 2 , move 2 + 3 , 3 / 4  decode:loop 0 , 3 , move 4 / v0 , 7 
[3187] c:0 is:loop 0 , 3 , move 4 + 2 , 0 - 8  decode:loop 0 , 3 , move ua - v0 , 0 - 8 
[3188] c:0 is:loop 0 , 3 , move 0 - 4 , 4 / 3  decode:loop 0 , 3 , move 0 - 4 , 0 - 3 0 
[3189] c:0 is:( move 0 - 4 , 0 ; move 4 , 3 )  decode:( move 4 , 6 ; move 4 , 4 / 3 ) 
[3190] c:0 is:( move 0 - 2 , 4 ; move 3 , 2 )  decode:( move 2 , 4 ; move 3 , 2 ) 
[3191] c:3 is:loop 0 , 4 , move 0 - 8 , 0 - 4  decode:loop 0 , 4 , move 0 - 8 , 0 - 4 
[3192] c:3 is:loop 0 , 3 , move 0 - 4 , 0 - 9  decode:loop 0 , 3 , move 0 - 4 , 0 - 9 
[3193] c:0 is:loop 0 , 3 , move 4 , 4 * 0 - 4  decode:loop 0 , 3 , move 4 , 0 - 4 * 4 
[3194] c:0 is:( move 4 , 2 ; move 3 , 0 - 2 )  decode:( move 3 , 2 ; move 4 , 0 - 2 ) 
[3195] c:3 is:( move 2 , 0 ; move 4 , 2 - 3 )  decode:( move 2 , 0 ; move 4 , 2 - 3 ) 
[3196] c:0 is:loop 0 , 4 , move 0 - 3 , 4 / 3  decode:loop 0 , 4 , move 0 - 3 , 0 - 0 4 3 / 
[3197] c:2 is:loop 0 , 4 , move 0 - 3 , 3 / 4  decode:loop 0 , 4 , move 3 - ua , 3 / 4 
[3198] c:0 is:loop 0 , 2 , move 4 + 2 , 4 / 3  decode:( move ua , 4 * 3 ; move ua , 5 ) 
[3199] c:3 is:loop 0 , 4 , move 0 - 4 , 0 - 8  decode:loop 0 , 4 , move 0 - 4 , 0 - 8 
[3200] c:0 is:( move 3 , 2 ; move 4 , 0 - 2 )  decode:( move 3 , 2 ; move 4 , 0 - 4 ) 
[3201] c:0 is:loop 0 , 4 , move 3 , 0 - 4 * 4  decode:loop 0 , 4 , move 3 , 4 * 4 
[3202] c:3 is:( move 4 , 0 ; move 3 , 0 - 4 )  decode:( move 4 , 0 ; move 3 , 0 - 4 ) 
[3203] c:0 is:( move 6 , 0 ; move 2 , 0 - 3 )  decode:( move ua , 0 ; move 2 , 0 - 3 ) 
[3204] c:0 is:( move 4 , 0 ; move 2 , 2 - 3 )  decode:( move 3 , 0 ; move 4 , ul ) 
[3205] c:2 is:( move 4 , 0 ; move 5 , 0 - 2 )  decode:( move 4 , ul ; move 5 , 0 - 2 ) 
[3206] c:0 is:( move 2 - 3 , 0 ; move 4 , 2 )  decode:( move ul , 0 ; move 4 , 2 ) 
[3207] c:0 is:loop 0 , 4 , move 3 + 3 , 0 - 8  decode:loop 0 , 4 , move ua - v0 , 0 - 8 
[3208] c:0 is:( move 0 - 3 , 0 ; move 5 , 4 )  decode:( move 3 , 0 ; move 5 , ul ) 
[3209] c:0 is:loop 0 , 4 , move 0 - 4 , 5 * 3  decode:loop 0 , 4 , move 4 , 5 * 3 
[3210] c:0 is:loop 0 , 4 , move 4 , 4 * 0 - 4  decode:loop 0 , 4 , move 4 , 4 * 4 
[3211] c:0 is:( move 3 , 2 ; move 0 - 5 , 2 )  decode:( move 3 , 2 ; move 5 , 2 - 3 ) 
[3212] c:3 is:( move 4 , 0 - 2 ; move 2 , 4 )  decode:( move 4 , 0 - 2 ; move 2 , 4 ) 
[3213] c:0 is:( move 4 , 0 ; move 3 , 2 - 3 )  decode:( move 3 , 0 ; move 4 , ul ) 
[3214] c:0 is:( move 4 , 3 ; move 3 , 0 - 2 )  decode:( move 3 , 3 ; move 4 , 0 - 2 ) 
[3215] c:0 is:( move 3 + 2 , 0 ; move 3 , 5 )  decode:( move 5 , 0 ; move 3 , 5 ) 
[3216] c:1 is:( move 3 , 0 ; move 5 , 0 - 4 )  decode:( move 3 , 0 ; move 5 , 0 - 4 ) 
[3217] c:0 is:( move 5 , 0 - 2 ; move 3 , 2 )  decode:( move 3 , 0 - 2 ; move 3 , 2 ) 
[3218] c:0 is:loop 0 , 4 , move 4 + 3 , 3 / 2  decode:loop 0 , 4 , move 4 + 3 , 0 - 8 
[3219] c:3 is:( move 3 , 0 ; move 4 , 2 - 3 )  decode:( move 3 , 0 ; move 4 , 2 - 3 ) 
[3220] c:3 is:( move 0 - 2 , 4 ; move 3 , 3 )  decode:( move 0 - 2 , 4 ; move 3 , 3 ) 
[3221] c:0 is:loop 0 , 4 , move 0 - 4 , 4 / 3  decode:loop 0 , 4 , move 0 - 4 , 0 - 5 
[3222] c:2 is:( move 2 , 0 ; move 3 , 3 / 2 )  decode:( move 2 , 2 ; move 3 , 3 / 2 ) 
[3223] c:0 is:( move 4 , 0 - 3 ; move 3 , 2 )  decode:( move 3 , 0 - 3 ; move 3 , 2 ) 
[3224] c:3 is:( move 4 , 0 ; move 4 , 0 - 4 )  decode:( move 4 , 0 ; move 4 , 0 - 4 ) 
[3225] c:0 is:( move 3 , 2 ; move 5 , 0 - 2 )  decode:( move 5 , 2 ; move 3 , 0 - 2 ) 
[3226] c:0 is:( move 4 , 0 ; move 4 , 0 - 5 )  decode:( move 4 , 0 ; move 4 , 4 / 3 ) 
[3227] c:0 is:( move 5 , 2 ; move 4 , 0 - 2 )  decode:( move 4 , 2 ; move ua - ul , 2 ) 
[3228] c:3 is:( move 3 , 0 - 2 ; move 3 , 5 )  decode:( move 3 , 0 - 2 ; move 3 , 5 ) 
[3229] c:3 is:( move 2 , 0 - 4 ; move 5 , 2 )  decode:( move 2 , 0 - 4 ; move 5 , 2 ) 
[3230] c:0 is:( move 5 , 4 ; move 0 - 2 , 2 )  decode:( move ul - ua , 4 ; move 2 , 2 ) 
[3231] c:0 is:( move 5 , 0 - 2 ; move 4 , 2 )  decode:( move 4 , 0 - 2 ; move 4 , 2 ) 
[3232] c:2 is:( move 4 , 0 - 3 ; move 4 , 2 )  decode:( move 4 , 0 - 3 ; move 4 , 2 ) 
[3233] c:0 is:( move 4 , 2 - 3 ; move 2 , 2 )  decode:( move 2 , 0 - 2 ; move 3 , 2 ) 
[3234] c:3 is:( move 3 , 0 ; move 5 , 2 - 3 )  decode:( move 3 , 0 ; move 5 , 2 - 3 ) 
[3235] c:3 is:loop 0 , 3 , move 4 + 3 , 4 * 4  decode:loop 0 , 3 , move 4 + 3 , 4 * 4 
[3236] c:3 is:( move 3 , 0 ; move 3 , 3 / 2 )  decode:( move 3 , 0 ; move 3 , 3 / 2 ) 
[3237] c:0 is:( move 4 , 3 ; move 2 , 0 - 4 )  decode:( move 2 , ua / 4 ; move 4 , 4 ) 
[3238] c:3 is:( move 5 , 0 - 3 ; move 3 , 2 )  decode:( move 5 , 0 - 3 ; move 3 , 2 ) 
[3239] c:0 is:( move 2 , 2 ; move 4 , 2 - 3 )  decode:( move 2 , 2 ; move ua - 3 , ul ) 
[3240] c:0 is:( move 4 , 4 ; move 0 - 3 , 2 )  decode:( move 4 , 4 ; move 3 , 5 ) 
[3241] c:3 is:( move 3 , 2 ; move 4 , 0 - 4 )  decode:( move 3 , 2 ; move 4 , 0 - 4 ) 
[3242] c:0 is:( move 4 + 4 , 0 ; move 3 , 3 )  decode:( move 8 , 0 ; move 3 , 3 ) 
[3243] c:3 is:( move 4 , 0 - 2 ; move 5 , 2 )  decode:( move 4 , 0 - 2 ; move 5 , 2 ) 
[3244] c:0 is:( move 5 , 0 ; move 4 , 0 - 4 )  decode:( move 4 , 0 ; move 5 , 0 - 4 ) 
[3245] c:0 is:loop 0 , 4 , move 4 + 3 , 2 * 5  decode:loop 0 , 4 , move ua + ul , 0 - 5 2 2 * 
[3246] c:2 is:( move 9 , 0 ; move 2 , 0 - 2 )  decode:( move 2 , 0 ; move 9 , 2 ) 
[3247] c:3 is:( move 4 , 0 - 3 ; move 2 , 4 )  decode:( move 4 , 0 - 3 ; move 2 , 4 ) 
[3248] c:3 is:( move 2 , 3 ; move 3 , 2 - 3 )  decode:( move 2 , 3 ; move 3 , 2 - 3 ) 
[3249] c:0 is:( move 2 , 3 ; move 0 - 4 , 4 )  decode:( move 2 , 3 ; move 4 , ul ) 
[3250] c:0 is:( move 5 , 0 ; move 3 , 2 + 4 )  decode:( move 2 , 0 ; move ua - ul , 7 ) 
[3251] c:3 is:loop 0 , 4 , move 0 - 4 , 5 / 3  decode:loop 0 , 4 , move 0 - 4 , 5 / 3 
[3252] c:3 is:loop 0 , 4 , move 4 + 3 , 0 - 8  decode:loop 0 , 4 , move 4 + 3 , 0 - 8 
[3253] c:0 is:( move 5 , 0 - 2 ; move 2 , 4 )  decode:( move ul - ua , ul ; move 2 , 4 ) 
[3254] c:2 is:( move 3 , 0 ; move 2 , 4 * 3 )  decode:( move 3 , 0 ; move 2 , ul ) 
[3255] c:0 is:( move 0 - 4 , 2 ; move 4 , 3 )  decode:( move 4 , 2 ; move 4 , 3 ) 
[3256] c:0 is:( move 4 , 3 ; move 0 - 4 , 2 )  decode:( move 4 , 3 ; move 4 , 5 ) 
[3257] c:0 is:loop 0 , 4 , move 0 - 5 , 4 / 3  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[3258] c:0 is:( move 4 + 3 , 2 ; move 4 , 2 )  decode:( move ua + ul , 2 ; move 4 , 2 ) 
[3259] c:0 is:( move 0 - 7 , 0 ; move 3 , 4 )  decode:( move 0 - 4 , 0 ; move 3 , 4 ) 
[3260] c:0 is:( move 0 - 4 , 4 ; move 4 , 2 )  decode:( move 4 , 4 ; move 4 , 5 ) 
[3261] c:3 is:( move 2 , 4 ; move 3 , 2 - 3 )  decode:( move 2 , 4 ; move 3 , 2 - 3 ) 
[3262] c:3 is:( move 3 , 0 - 2 ; move 4 , 5 )  decode:( move 3 , 0 - 2 ; move 4 , 5 ) 
[3263] c:0 is:loop 0 , 4 , move 3 + 3 , 3 + 8  decode:loop 0 , 4 , move 3 + 3 , ua / 4 
[3264] c:0 is:( move 5 , 0 - 2 ; move 3 , 4 )  decode:( move 3 , 0 - 2 ; move 3 , 4 ) 
[3265] c:0 is:( move 5 , 0 - 4 ; move 3 , 2 )  decode:( move 3 , 9 / 4 ; move 3 , 2 ) 
[3266] c:0 is:( move 0 - 3 , 3 ; move 4 , 4 )  decode:( move 3 , 6 ; move 4 , ul ) 
[3267] c:0 is:( move 0 - 4 , 2 ; move 4 , 4 )  decode:( move 4 , 0 - 2 ; move 4 , ul ) 
[3268] c:3 is:( move 5 , 0 - 3 ; move 4 , 2 )  decode:( move 5 , 0 - 3 ; move 4 , 2 ) 
[3269] c:0 is:loop 0 , 4 , move 4 , 0 - 7 * 3  decode:loop 0 , 4 , move 4 , 0 - 2 
[3270] c:0 is:( move 4 , 2 ; move 3 , 4 + 2 )  decode:( move 4 , 2 ; move 3 , 2 + 4 ) 
[3271] c:0 is:( move 3 , 2 - 3 ; move 2 , 4 )  decode:( move 2 , 0 ; move 3 , 0 - 4 ) 
[3272] c:3 is:loop 0 , 3 , move 0 - 3 , 3 * 9  decode:loop 0 , 3 , move 0 - 3 , 3 * 9 
[3273] c:0 is:loop 0 , 3 , move 3 , 3 * 0 - 9  decode:loop 0 , 3 , move 3 , 9 + v0 
[3274] c:3 is:( move 3 , 2 - 3 ; move 4 , 2 )  decode:( move 3 , 2 - 3 ; move 4 , 2 ) 
[3275] c:0 is:( move 4 , 3 ; move 0 - 3 , 4 )  decode:( move 4 , 3 ; move 3 , ul ) 
[3276] c:3 is:( move 4 , 2 ; move 4 , 0 - 4 )  decode:( move 4 , 2 ; move 4 , 0 - 4 ) 
[3277] c:3 is:( move 2 , 0 ; move 4 , 4 * 3 )  decode:( move 2 , 0 ; move 4 , 4 * 3 ) 
[3278] c:3 is:( move 4 , 0 - 2 ; move 4 , 4 )  decode:( move 4 , 0 - 2 ; move 4 , 4 ) 
[3279] c:3 is:( move 3 , 3 ; move 4 , 0 - 4 )  decode:( move 3 , 3 ; move 4 , 0 - 4 ) 
[3280] c:0 is:( move 2 , 3 ; move 4 , 2 - 3 )  decode:( move 4 , 2 ; move 4 - ua , ul ) 
[3281] c:0 is:( move 4 , 0 ; move 5 , 2 - 3 )  decode:loop 0 , 2 , move ua - 2 , 0 - v0 
[3282] c:3 is:( move 3 , 0 - 4 ; move 3 , 4 )  decode:( move 3 , 0 - 4 ; move 3 , 4 ) 
[3283] c:0 is:( move 4 , 2 ; move 0 - 5 , 3 )  decode:( move 3 , 2 ; move ul - ua , 3 ) 
[3284] c:0 is:( move 4 , 2 ; move 3 , 2 - 3 )  decode:( move 3 , 0 - 2 ; move 4 , ul ) 
[3285] c:0 is:( move 4 , 2 ; move 0 - 4 , 4 )  decode:( move 4 , 2 ; move 4 , ul ) 
[3286] c:3 is:( move 3 , 3 ; move 3 , 2 - 3 )  decode:( move 3 , 3 ; move 3 , 2 - 3 ) 
[3287] c:0 is:( move 4 , 3 ; move 2 , 2 - 3 )  decode:( move 2 , 3 ; move 4 , 2 - 3 ) 
[3288] c:3 is:( move 5 , 0 - 2 ; move 5 , 2 )  decode:( move 5 , 0 - 2 ; move 5 , 2 ) 
[3289] c:0 is:( move 2 , 2 ; move 2 + 4 , 5 )  decode:( move 2 , 2 ; move ua , 5 ) 
[3290] c:3 is:( move 3 , 0 - 3 ; move 4 , 4 )  decode:( move 3 , 0 - 3 ; move 4 , 4 ) 
[3291] c:0 is:( move 4 , 0 ; move 5 , 3 + 3 )  decode:( move 3 , 0 ; move ul - ua , 3 ) 
[3292] c:0 is:( move 4 , 3 ; move 3 , 0 - 4 )  decode:( move 3 , 3 ; move 4 , 0 - 4 ) 
[3293] c:0 is:( move 4 , 2 - 3 ; move 3 , 2 )  decode:( move 3 , 4 * 3 ; move 3 , 2 ) 
[3294] c:3 is:( move 4 , 0 ; move 3 , 3 / 2 )  decode:( move 4 , 0 ; move 3 , 3 / 2 ) 
[3295] c:3 is:( move 4 , 0 - 4 ; move 5 , 2 )  decode:( move 4 , 0 - 4 ; move 5 , 2 ) 
[3296] c:0 is:( move 4 , 2 ; move 0 - 7 , 2 )  decode:( move 4 , 2 ; move 7 , 5 ) 
[3297] c:0 is:( move 5 , 4 ; move 0 - 4 , 2 )  decode:( move 5 , 4 ; move 4 , 5 ) 
[3298] c:0 is:( move 4 , 0 ; move 0 - 9 , 2 )  decode:( move 4 , 0 ; move 9 , 5 / 4 ) 
[3299] c:0 is:loop 0 , 4 , move 0 - 2 , 3 / 9  decode:loop 0 , 4 , move 0 - 2 , 4 / 5 
[3300] c:0 is:( move 5 , 3 ; move 3 , 0 - 4 )  decode:( move 3 , 2 ; move 5 , 0 - 4 ) 
[3301] c:0 is:loop 0 , 2 , move 4 - 9 , 2 - 3  decode:loop 0 , 2 , move v0 - ua , 2 - 3 
[3302] c:0 is:( move 5 , 2 ; move 0 - 4 , 4 )  decode:( move 5 , 2 ; move 4 , ul ) 
[3303] c:0 is:( move 2 , 2 ; move 4 , 2 / 3 )  decode:( move 2 , 2 ; move 4 , 3 / 2 ) 
[3304] c:3 is:( move 3 , 0 - 4 ; move 4 , 4 )  decode:( move 3 , 0 - 4 ; move 4 , 4 ) 
[3305] c:0 is:( move 0 - 4 , 4 ; move 4 , 3 )  decode:( move 4 , 4 ; move 3 , ul + 4 ) 
[3306] c:3 is:( move 5 , 0 ; move 2 , 2 / 4 )  decode:( move 5 , 0 ; move 2 , 2 / 4 ) 
[3307] c:2 is:( move 3 , 0 ; move 5 , 3 / 2 )  decode:( move 3 , 0 ; move 5 , 3 / 2 ) 
[3308] c:1 is:( move 5 , 3 ; move 4 , 0 - 3 )  decode:( move 5 , 3 ; move 4 , 0 - 3 ) 
[3309] c:0 is:( move 4 , 5 ; move 4 , 0 - 2 )  decode:( move 4 , 6 ; move 4 , 0 - 2 ) 
[3310] c:0 is:( move 3 , 0 ; move 4 , 5 * 2 )  decode:( move 3 , 0 ; move 4 , 9 ) 
[3311] c:3 is:( move 3 , 0 ; move 4 , 4 * 3 )  decode:( move 3 , 0 ; move 4 , 4 * 3 ) 
[3312] c:3 is:( move 0 - 4 , 2 ; move 5 , 4 )  decode:( move 0 - 4 , 2 ; move 5 , 4 ) 
[3313] c:0 is:loop 0 , 4 , move 0 - 7 , 0 - 9  decode:loop 0 , 4 , move 0 - ua , 0 - 9 
[3314] c:0 is:( move 3 , 4 ; move 4 , 0 - 4 )  decode:( move 0 - 4 , 0 ; move 3 , 4 ) 
[3315] c:0 is:( move 0 - 3 , 3 ; move 4 , 5 )  decode:( move 3 , 0 ; move 4 , ua * ua ) 
[3316] c:0 is:( move 4 , 0 - 3 ; move 3 , 5 )  decode:( move 3 , 5 ; move 4 , 5 / 4 ) 
[3317] c:0 is:( move 4 , 0 ; move 3 , 4 * 3 )  decode:( move 4 , 9 ; move 3 , 4 * 3 ) 
[3318] c:0 is:( move 4 , 0 - 6 ; move 3 , 2 )  decode:( move 4 , 2 / 6 ; move 3 , 2 ) 
[3319] c:3 is:( move 3 , 0 - 3 ; move 4 , 5 )  decode:( move 3 , 0 - 3 ; move 4 , 5 ) 
[3320] c:1 is:( move 5 , 0 ; move 3 , 3 / 2 )  decode:( move 5 , 0 ; move 3 , 3 / 2 ) 
[3321] c:0 is:( move 0 - 4 , 4 ; move 3 , 4 )  decode:( move 4 , ul / 4 ; move 3 , 4 ) 
[3322] c:0 is:( move 5 , 2 ; move 4 , 0 - 4 )  decode:( move 4 , 2 ; move 5 , 0 - 4 ) 
[3323] c:0 is:loop 0 , 3 , move 0 - 3 , 4 * 9  decode:loop 0 , 3 , move 3 , 3 * 9 
[3324] c:2 is:loop 0 , 3 , move 0 - 4 , 3 * 9  decode:loop 0 , 3 , move 0 - 4 , 3 * 9 
[3325] c:1 is:( move 4 , 3 ; move 4 , 0 - 4 )  decode:( move 4 , 3 ; move 4 , 0 - 4 ) 
[3326] c:0 is:( move 4 , 0 ; move 4 , 0 - 7 )  decode:( move 3 , 0 ; move 4 , 7 + 7 ) 
[3327] c:0 is:( move 4 , 3 ; move 0 - 4 , 4 )  decode:( move 4 , 3 ; move 4 , ul ) 
[3328] c:3 is:( move 3 , 3 ; move 5 , 0 - 4 )  decode:( move 3 , 3 ; move 5 , 0 - 4 ) 
[3329] c:0 is:( move 3 , 3 ; move 4 , 2 - 3 )  decode:( move 4 , 3 ; move 3 , 2 - 3 ) 
[3330] c:3 is:( move 4 , 0 - 2 ; move 5 , 4 )  decode:( move 4 , 0 - 2 ; move 5 , 4 ) 
[3331] c:0 is:loop 0 , 4 , move 0 - 4 , 7 * 4  decode:loop 0 , 4 , move ua - 3 , 7 * 4 
[3332] c:3 is:( move 4 , 0 ; move 3 , 2 / 4 )  decode:( move 4 , 0 ; move 3 , 2 / 4 ) 
[3333] c:0 is:( move 4 , 0 ; move 4 , 4 * 3 )  decode:( move 3 , 0 ; move 4 , 4 * 3 ) 
[3334] c:0 is:( move 4 , 0 ; move 2 , 2 - 8 )  decode:( move 2 , 0 ; move ua - ul , 3 ) 
[3335] c:0 is:( move 0 - 7 , 0 ; move 4 , 5 )  decode:( move  7 , 3 3 ; move 4 , 5 ) 
[3336] c:0 is:( move 9 , 0 - 2 ; move 3 , 2 )  decode:( move 3 , 0 ; move 9 , 2 ) 
[3337] c:0 is:( move 4 , 3 ; move 0 - 7 , 2 )  decode:( move 4 , 3 ; move ua + ul , 2 ) 
[3338] c:3 is:( move 4 , 0 - 4 ; move 4 , 4 )  decode:( move 4 , 0 - 4 ; move 4 , 4 ) 
[3339] c:2 is:( move 4 , 2 - 3 ; move 3 , 4 )  decode:( move 4 , 2 - 3 ; move 3 , 4 ) 
[3340] c:0 is:loop 0 , 4 , move 2 - 4 , 2 / 7  decode:loop 0 , 4 , move 2 - 4 , 2 / 5 
[3341] c:3 is:( move 3 , 0 ; move 4 , 4 / 3 )  decode:( move 3 , 0 ; move 4 , 4 / 3 ) 
[3342] c:0 is:loop 0 , 4 , move 3 + 2 , 3 * 9  decode:loop 0 , 4 , move 5 , 1 - ua / 3 
[3343] c:0 is:( move 5 , 0 - 4 ; move 3 , 4 )  decode:( move 3 , 0 - 4 ; move 3 , 4 ) 
[3344] c:3 is:( move 9 , 0 - 3 ; move 2 , 2 )  decode:( move 9 , 0 - 3 ; move 2 , 2 ) 
[3345] c:3 is:( move 4 , 4 ; move 4 , 0 - 4 )  decode:( move 4 , 4 ; move 4 , 0 - 4 ) 
[3346] c:3 is:( move 3 , 4 ; move 4 , 2 - 3 )  decode:( move 3 , 4 ; move 4 , 2 - 3 ) 
[3347] c:0 is:( move 0 - 4 , 4 ; move 3 , 5 )  decode:( move 4 , 4 ; move 3 , ua * ua ) 
[3348] c:0 is:( move 3 , 3 ; move 0 - 8 , 2 )  decode:( move 3 , 3 ; move 8 , 2 - 3 ) 
[3349] c:3 is:( move 3 , 2 - 3 ; move 4 , 4 )  decode:( move 3 , 2 - 3 ; move 4 , 4 ) 
[3350] c:0 is:( move 4 , 0 - 4 ; move 3 , 5 )  decode:( move 3 , 0 - 4 ; move 3 , 5 ) 
[3351] c:0 is:( move 3 , 3 / 2 ; move 2 , 4 )  decode:( move 3 , 2 / 2 ; move 3 , 4 ) 
[3352] c:0 is:( move 3 , 4 * 3 ; move 3 , 2 )  decode:( move 3 , 3 * 4 ; move 3 , 2 ) 
[3353] c:0 is:( move 4 , 0 - 2 ; move 3 , 7 )  decode:( move 3 , 0 - 2 ; move 3 , 7 ) 
[3354] c:0 is:( move 0 - 4 , 6 ; move 4 , 2 )  decode:( move 4 , 3 ; move 4 , 5 ) 
[3355] c:0 is:( move 5 , 2 - 3 ; move 4 , 2 )  decode:( move 2 - ua , 2 ; move 4 , 2 ) 
[3356] c:3 is:( move 4 , 3 ; move 4 , 2 - 3 )  decode:( move 4 , 3 ; move 4 , 2 - 3 ) 
[3357] c:0 is:( move 0 - 3 , 4 ; move 4 , 5 )  decode:( move 3 , 4 ; move 4 , ua * ua ) 
[3358] c:3 is:( move 3 , 3 / 2 ; move 4 , 2 )  decode:( move 3 , 3 / 2 ; move 4 , 2 ) 
[3359] c:0 is:( move 5 , 0 - 2 ; move 4 , 5 )  decode:( move 2 - ua , ul ; move 4 , 5 ) 
[3360] c:0 is:( move 2 , 3 * 4 ; move 4 , 2 )  decode:( move 2 , 4 * 3 ; move 4 , 2 ) 
[3361] c:0 is:( move 5 , 0 ; move 3 , 2 / 4 )  decode:( move 5 , 0 ; move 3 , 4 / ua ) 
[3362] c:1 is:( move 2 , 3 ; move 4 , 3 / 2 )  decode:( move 2 , 3 ; move 4 , 7 + 4 ) 
[3363] c:0 is:( move 4 , 2 ; move 5 , 2 - 3 )  decode:( move ul - ua , ul ; move 4 , ul ) 
[3364] c:0 is:( move 4 , 2 - 3 ; move 2 , 5 )  decode:( move 2 , ul ; move 4 , 5 ) 
[3365] c:0 is:loop 0 , 7 , move 9 - 3 , 2 - 0  decode:loop 0 , 4 , move ua + ul , 0 - 2 
[3366] c:3 is:( move 3 , 2 ; move 4 , 3 / 2 )  decode:( move 3 , 2 ; move 4 , 3 / 2 ) 
[3367] c:3 is:( move 5 , 0 - 3 ; move 4 , 4 )  decode:( move 5 , 0 - 3 ; move 4 , 4 ) 
[3368] c:0 is:( move 0 - 7 , 3 ; move 4 , 2 )  decode:( move 0 - 0 , 3 ; move 5 , 2 ) 
[3369] c:0 is:( move 4 , 2 ; move 9 , 0 - 2 )  decode:( move 9 , ua ; move 4 , 2 ) 
[3370] c:0 is:( move 3 + 4 , 2 ; move 5 , 4 )  decode:( move 7 , 2 ; move ua - 2 , 4 ) 
[3371] c:3 is:( move 3 , 2 - 3 ; move 4 , 5 )  decode:( move 3 , 2 - 3 ; move 4 , 5 ) 
[3372] c:3 is:( move 2 , 2 / 3 ; move 4 , 4 )  decode:( move 2 , 2 / 3 ; move 4 , 4 ) 
[3373] c:3 is:( move 4 , 0 ; move 4 , 3 * 5 )  decode:( move 4 , 0 ; move 4 , 3 * 5 ) 
[3374] c:0 is:( move 4 , 2 ; move 0 - 7 , 4 )  decode:( move 4 , 2 ; move ua + ul , 7 ) 
[3375] c:3 is:( move 4 , 4 * 4 ; move 2 , 2 )  decode:( move 4 , 4 * 4 ; move 2 , 2 ) 
[3376] c:0 is:( move 2 - 9 , 0 ; move 4 , 2 )  decode:( move 0 - 9 , 0 ; move 4 , 2 ) 
[3377] c:3 is:( move 3 , 2 / 3 ; move 3 , 4 )  decode:( move 3 , 2 / 3 ; move 3 , 4 ) 
[3378] c:3 is:( move 5 , 3 / 2 ; move 3 , 2 )  decode:( move 5 , 3 / 2 ; move 3 , 2 ) 
[3379] c:3 is:( move 4 , 2 - 3 ; move 4 , 4 )  decode:( move 4 , 2 - 3 ; move 4 , 4 ) 
[3380] c:3 is:( move 3 , 4 * 4 ; move 3 , 2 )  decode:( move 3 , 4 * 4 ; move 3 , 2 ) 
[3381] c:3 is:( move 5 , 0 - 4 ; move 4 , 4 )  decode:( move 5 , 0 - 4 ; move 4 , 4 ) 
[3382] c:3 is:( move 3 , 4 ; move 3 , 3 / 2 )  decode:( move 3 , 4 ; move 3 , 3 / 2 ) 
[3383] c:0 is:( move 4 , 2 ; move 3 , 3 * 4 )  decode:( move 3 , 2 ; move 3 , 3 * 4 ) 
[3384] c:3 is:( move 3 , 2 / 4 ; move 4 , 2 )  decode:( move 3 , 2 / 4 ; move 4 , 2 ) 
[3385] c:3 is:( move 9 , 0 - 4 ; move 2 , 2 )  decode:( move 9 , 0 - 4 ; move 2 , 2 ) 
[3386] c:0 is:( move 9 , 0 ; move 4 , 0 - 4 )  decode:( move 9 , ul ; move 4 , 0 - 4 ) 
[3387] c:0 is:( move 5 , 0 - 3 ; move 4 , 5 )  decode:( move 4 , 0 - 3 ; move 4 , 7 ) 
[3388] c:3 is:( move 3 , 3 ; move 4 , 3 / 2 )  decode:( move 3 , 3 ; move 4 , 3 / 2 ) 
[3389] c:0 is:( move 4 , 6 ; move 0 - 3 , 4 )  decode:( move 4 , 6 ; move 3 , 7 ) 
[3390] c:3 is:( move 4 , 3 / 2 ; move 4 , 2 )  decode:( move 4 , 3 / 2 ; move 4 , 2 ) 
[3391] c:3 is:( move 2 , 3 ; move 4 , 2 / 4 )  decode:( move 2 , 3 ; move 4 , 2 / 4 ) 
[3392] c:3 is:( move 2 , 4 ; move 4 , 2 / 3 )  decode:( move 2 , 4 ; move 4 , 2 / 3 ) 
[3393] c:0 is:( move 3 , 2 ; move 4 , 0 - 8 )  decode:( move 3 , 2 ; move 4 , 3 / 4 ) 
[3394] c:0 is:( move 3 , 4 ; move 7 + 2 , 2 )  decode:( move 3 , 4 ; move ua + 2 , 2 ) 
[3395] c:0 is:( move 5 , 3 ; move 4 , 2 - 3 )  decode:( move 4 , 5 ; move ua - 2 , ul ) 
[3396] c:3 is:( move 3 , 0 ; move 5 , 4 / 3 )  decode:( move 3 , 0 ; move 5 , 4 / 3 ) 
[3397] c:3 is:( move 2 , 2 / 6 ; move 3 , 2 )  decode:( move 2 , 2 / 6 ; move 3 , 2 ) 
[3398] c:3 is:( move 3 , 3 * 4 ; move 4 , 2 )  decode:( move 3 , 3 * 4 ; move 4 , 2 ) 
[3399] c:3 is:( move 2 , 2 / 3 ; move 4 , 4 )  decode:( move 2 , 2 / 3 ; move 4 , 4 ) 
[3400] c:3 is:( move 2 , 4 ; move 4 , 2 / 3 )  decode:( move 2 , 4 ; move 4 , 2 / 3 ) 
[3401] c:3 is:( move 4 , 4 ; move 4 , 2 - 3 )  decode:( move 4 , 4 ; move 4 , 2 - 3 ) 
[3402] c:3 is:( move 0 - 4 , 0 ; move 4 , 9 )  decode:( move 0 - 4 , 0 ; move 4 , 9 ) 
[3403] c:0 is:( move 4 , 6 ; move 3 , 0 - 4 )  decode:( move 3 , 6 ; move 4 , 0 - 4 ) 
[3404] c:3 is:( move 5 , 0 ; move 3 , 4 / 3 )  decode:( move 5 , 0 ; move 3 , 4 / 3 ) 
[3405] c:3 is:( move 3 , 4 ; move 2 , 2 / 4 )  decode:( move 3 , 4 ; move 2 , 2 / 4 ) 
[3406] c:0 is:( move 3 , 5 ; move 4 , 4 + 2 )  decode:( move 3 , 5 ; move 4 , 2 + 4 ) 
[3407] c:3 is:( move 3 , 4 / 3 ; move 3 , 2 )  decode:( move 3 , 4 / 3 ; move 3 , 2 ) 
[3408] c:3 is:( move 3 , 0 ; move 4 , 7 + 4 )  decode:( move 3 , 0 ; move 4 , 7 + 4 ) 
[3409] c:0 is:( move 3 , 2 ; move 4 , 3 * 4 )  decode:( move 3 , ua * 3 ; move 4 , 9 ) 
[3410] c:0 is:( move 3 , 2 ; move 4 + 7 , 2 )  decode:( move 3 , 2 ; move ua + 7 , 2 ) 
[3411] c:0 is:( move 3 , 5 ; move 4 + 2 , 4 )  decode:( move 3 , 5 ; move ua , 4 ) 
[3412] c:0 is:( move 9 , 3 ; move 3 , 0 - 2 )  decode:( move 3 , 2 ; move 9 , 0 - 2 ) 
[3413] c:0 is:loop 0 , 4 , move 4 + 2 , 3 * 9  decode:loop 0 , 4 , move 4 + 3 , 0 - 9 
[3414] c:0 is:( move 0 - 3 , 9 ; move 3 , 2 )  decode:( move 3 , 8 ; move 3 , 2 ) 
[3415] c:0 is:( move 0 - 7 , 4 ; move 4 , 2 )  decode:( move 0 - ua , 4 ; move 4 , 2 ) 
[3416] c:0 is:( move 4 * 2 , 3 ; move 4 , 3 )  decode:( move ua + 2 , 3 ; move 4 , 3 ) 
[3417] c:0 is:( move 3 , 6 ; move 4 , 0 - 4 )  decode:( move 4 , 6 ; move 3 , 0 - 4 ) 
[3418] c:3 is:( move 5 , 0 ; move 4 , 4 * 3 )  decode:( move 5 , 0 ; move 4 , 4 * 3 ) 
[3419] c:0 is:( move 4 , 2 / 3 ; move 2 , 5 )  decode:( move 5 , 4 / ua ; move 2 , 5 ) 
[3420] c:3 is:( move 4 , 4 * 4 ; move 3 , 2 )  decode:( move 4 , 4 * 4 ; move 3 , 2 ) 
[3421] c:3 is:( move 4 , 5 / 2 ; move 3 , 2 )  decode:( move 4 , 5 / 2 ; move 3 , 2 ) 
[3422] c:3 is:( move 3 , 3 / 2 ; move 4 , 4 )  decode:( move 3 , 3 / 2 ; move 4 , 4 ) 
[3423] c:0 is:( move 4 , 8 ; move 4 , 0 - 2 )  decode:( move 4 , 9 ; move 4 , 0 - 2 ) 
[3424] c:0 is:( move 5 , 5 ; move 4 , 0 - 4 )  decode:( move 4 , 4 ; move ul - ua , 4 ) 
[3425] c:3 is:( move 9 , 0 - 3 ; move 4 , 2 )  decode:( move 9 , 0 - 3 ; move 4 , 2 ) 
[3426] c:3 is:( move 5 , 0 ; move 4 , 4 * 4 )  decode:( move 5 , 0 ; move 4 , 4 * 4 ) 
[3427] c:1 is:( move 3 , 4 + 6 ; move 4 , 2 )  decode:( move 3 , 4 + 6 ; move 4 , 2 ) 
[3428] c:0 is:( move 9 , 4 ; move 0 - 3 , 2 )  decode:( move 9 , 4 ; move 3 , 5 ) 
[3429] c:3 is:( move 4 , 3 ; move 3 , 4 * 3 )  decode:( move 4 , 3 ; move 3 , 4 * 3 ) 
[3430] c:0 is:( move 4 , 3 ; move 9 , 0 - 2 )  decode:( move 9 , 0 - 3 ; move 4 , 2 ) 
[3431] c:3 is:( move 4 , 3 ; move 4 , 3 / 2 )  decode:( move 4 , 3 ; move 4 , 3 / 2 ) 
[3432] c:0 is:( move 5 , 2 + 5 ; move 5 , 2 )  decode:( move 5 , 5 + 3 ; move 5 , 2 ) 
[3433] c:3 is:( move 9 , 3 ; move 4 , 0 - 2 )  decode:( move 9 , 3 ; move 4 , 0 - 2 ) 
[3434] c:3 is:( move 3 , 3 ; move 4 , 4 * 3 )  decode:( move 3 , 3 ; move 4 , 4 * 3 ) 
[3435] c:0 is:( move 4 , 6 + 4 ; move 3 , 2 )  decode:( move 4 , 2 / 5 ; move 3 , 2 ) 
[3436] c:0 is:( move 9 - 0 , 3 ; move 4 , 2 )  decode:( move 9 , 3 ; move 4 , 2 ) 
[3437] c:3 is:( move 3 , 2 ; move 4 , 4 / 3 )  decode:( move 3 , 2 ; move 4 , 4 / 3 ) 
[3438] c:3 is:( move 3 , 2 / 4 ; move 3 , 4 )  decode:( move 3 , 2 / 4 ; move 3 , 4 ) 
[3439] c:0 is:( move 3 , 9 ; move 4 , 0 - 2 )  decode:( move 4 , 9 ; move 3 , 0 - 2 ) 
[3440] c:0 is:( move 3 , 2 ; move 3 , 7 + 4 )  decode:loop 0 , 3 , move 0 - 2 , 3 * 4 
[3441] c:0 is:( move 4 , 4 ; move 3 , 0 - 7 )  decode:( move 3 , 4 ; move 4 , 7 / 4 ) 
[3442] c:3 is:( move 9 , 0 - 4 ; move 3 , 2 )  decode:( move 9 , 0 - 4 ; move 3 , 2 ) 
[3443] c:3 is:( move 3 , 0 - 9 ; move 4 , 2 )  decode:( move 3 , 0 - 9 ; move 4 , 2 ) 
[3444] c:3 is:( move 3 , 2 / 6 ; move 3 , 2 )  decode:( move 3 , 2 / 6 ; move 3 , 2 ) 
[3445] c:0 is:( move 3 , 8 ; move 2 + 4 , 2 )  decode:( move 3 , 8 ; move ua , 2 ) 
[3446] c:0 is:( move 4 , 4 ; move 3 , 2 / 3 )  decode:( move 4 , 4 ; move 3 , 3 / 2 ) 
[3447] c:0 is:( move 9 , 2 ; move 2 + 3 , 3 )  decode:( move 9 , 2 ; move 3 + 3 , 3 ) 
[3448] c:3 is:( move 4 , 2 / 3 ; move 3 , 4 )  decode:( move 4 , 2 / 3 ; move 3 , 4 ) 
[3449] c:3 is:( move 4 , 4 ; move 3 , 3 / 2 )  decode:( move 4 , 4 ; move 3 , 3 / 2 ) 
[3450] c:0 is:( move 4 , 3 ; move 3 , 2 / 4 )  decode:( move 2 , 3 ; move 4 , 2 / 4 ) 
[3451] c:0 is:( move 0 - 3 , 9 ; move 4 , 2 )  decode:( move 3 , 9 ; move 4 , 2 ) 
[3452] c:3 is:( move 3 , 3 ; move 4 , 2 / 4 )  decode:( move 3 , 3 ; move 4 , 2 / 4 ) 
[3453] c:0 is:( move 9 , 0 - 2 ; move 3 , 4 )  decode:( move 3 , 2 ; move 9 , 0 - 4 ) 
[3454] c:0 is:( move 4 , 2 ; move 3 + 3 , 7 )  decode:( move 4 , 2 ; move ul - ua , 7 ) 
[3455] c:0 is:( move 9 , 2 ; move 4 , 0 - 3 )  decode:( move 9 , 2 ; move 4 + 3 , 3 ) 
[3456] c:2 is:( move 4 , 2 ; move 3 , 4 / 3 )  decode:( move 4 , 2 ; move 3 , 4 / 3 ) 
[3457] c:3 is:( move 3 , 3 ; move 4 , 2 / 4 )  decode:( move 3 , 3 ; move 4 , 2 / 4 ) 
[3458] c:0 is:( move 5 , 0 ; move 4 , 5 / 2 )  decode:( move 5 , 0 ; move 4 , 5 * 2 ) 
[3459] c:3 is:( move 4 , 0 - 9 ; move 3 , 2 )  decode:( move 4 , 0 - 9 ; move 3 , 2 ) 
[3460] c:3 is:( move 3 , 3 ; move 3 , 4 / 3 )  decode:( move 3 , 3 ; move 3 , 4 / 3 ) 
[3461] c:3 is:( move 0 - 7 , 4 ; move 3 , 4 )  decode:( move 0 - 7 , 4 ; move 3 , 4 ) 
[3462] c:3 is:( move 4 , 2 ; move 4 , 2 / 4 )  decode:( move 4 , 2 ; move 4 , 2 / 4 ) 
[3463] c:3 is:( move 4 , 2 * 5 ; move 4 , 2 )  decode:( move 4 , 2 * 5 ; move 4 , 2 ) 
[3464] c:3 is:( move 5 , 0 ; move 4 , 4 / 3 )  decode:( move 5 , 0 ; move 4 , 4 / 3 ) 
[3465] c:3 is:( move 5 , 2 ; move 4 + 4 , 4 )  decode:( move 5 , 2 ; move 4 + 4 , 4 ) 
[3466] c:3 is:( move 3 , 6 ; move 3 * 3 , 2 )  decode:( move 3 , 6 ; move 3 * 3 , 2 ) 
[3467] c:0 is:( move 4 , 2 ; move 4 , 4 * 3 )  decode:( move 4 , 2 ; move 4 , 3 * 4 ) 
[3468] c:0 is:( move 5 , 4 ; move 4 , 2 - 3 )  decode:( move 4 , 4 ; move 5 , ul ) 
[3469] c:3 is:( move 3 , 2 / 4 ; move 3 , 4 )  decode:( move 3 , 2 / 4 ; move 3 , 4 ) 
[3470] c:0 is:( move 4 , 3 * 4 ; move 4 , 2 )  decode:( move 4 , 4 * 3 ; move 4 , 2 ) 
[3471] c:0 is:( move 4 + 3 , 3 ; move 4 , 5 )  decode:( move ua + ul , 3 ; move 4 , 5 ) 
[3472] c:0 is:( move 4 , 4 / 3 ; move 3 , 2 )  decode:( move 3 , 4 / 3 ; move 3 , 2 ) 
[3473] c:3 is:( move 5 , 2 / 4 ; move 3 , 2 )  decode:( move 5 , 2 / 4 ; move 3 , 2 ) 
[3474] c:0 is:( move 6 , 4 ; move 3 , 2 + 4 )  decode:( move ua , 4 ; move 3 , 2 + 4 ) 
[3475] c:3 is:( move 3 , 0 - 4 ; move 9 , 2 )  decode:( move 3 , 0 - 4 ; move 9 , 2 ) 
[3476] c:0 is:( move 4 , 3 ; move 0 - 4 , 7 )  decode:( move 4 , 3 ; move 4 , 5 / 2 ) 
[3477] c:0 is:( move 4 , 0 ; move 4 , 5 / 3 )  decode:( move 4 , 0 ; move 4 , ua * ua ) 
[3478] c:0 is:( move 5 , 0 - 4 ; move 4 , 5 )  decode:( move 4 , 0 - 4 ; move 4 , 5 ) 
[3479] c:0 is:( move 0 - 4 , 9 ; move 3 , 2 )  decode:( move 4 , 9 ; move 3 , ul ) 
[3480] c:2 is:( move 3 , 4 * 3 ; move 3 , 4 )  decode:( move 3 , 4 * 4 ; move 3 , 4 ) 
[3481] c:0 is:( move 4 + 2 , 3 ; move 5 , 5 )  decode:( move ua , 3 ; move ul - ua , 5 ) 
[3482] c:0 is:( move 3 , 2 - 3 ; move 4 , 6 )  decode:( move 3 , 2 ; move 3 , 6 ) 
[3483] c:0 is:( move 0 - 4 , 3 ; move 4 , 7 )  decode:( move 4 , 0 ; move 4 , 5 / 2 ) 
[3484] c:3 is:( move 3 , 4 * 4 ; move 5 , 2 )  decode:( move 3 , 4 * 4 ; move 5 , 2 ) 
[3485] c:0 is:( move 8 , 3 ; move 4 , 0 - 4 )  decode:( move 4 , 3 ; move ua + 2 , 4 ) 
[3486] c:0 is:( move 9 , 3 ; move 4 + 2 , 2 )  decode:( move 9 , 3 ; move ua , 2 ) 
[3487] c:3 is:( move 5 , 3 / 2 ; move 5 , 2 )  decode:( move 5 , 3 / 2 ; move 5 , 2 ) 
[3488] c:3 is:( move 9 , 0 - 3 ; move 3 , 4 )  decode:( move 9 , 0 - 3 ; move 3 , 4 ) 
[3489] c:3 is:( move 4 , 4 / 3 ; move 4 , 2 )  decode:( move 4 , 4 / 3 ; move 4 , 2 ) 
[3490] c:0 is:( move 3 , 3 ; move 4 , 4 / 3 )  decode:( move 3 , 3 ; move 4 , 3 / 2 ) 
[3491] c:0 is:( move 4 , 4 ; move 4 , 0 - 7 )  decode:( move 3 , 4 ; move 4 , 7 ) 
[3492] c:0 is:( move 4 , 3 ; move 4 , 4 * 3 )  decode:( move 3 , 3 ; move 4 , 4 * 3 ) 
[3493] c:0 is:( move 9 , 4 ; move 4 , 0 - 2 )  decode:( move 4 , 2 ; move 9 , 2 ) 
[3494] c:3 is:( move 3 , 9 + 2 ; move 4 , 2 )  decode:( move 3 , 9 + 2 ; move 4 , 2 ) 
[3495] c:3 is:( move 5 , 4 * 4 ; move 3 , 2 )  decode:( move 5 , 4 * 4 ; move 3 , 2 ) 
[3496] c:3 is:( move 4 , 9 ; move 4 , 0 - 2 )  decode:( move 4 , 9 ; move 4 , 0 - 2 ) 
[3497] c:3 is:( move 3 , 4 ; move 4 , 2 / 4 )  decode:( move 3 , 4 ; move 4 , 2 / 4 ) 
[3498] c:0 is:( move 0 - 4 , 3 ; move 3 , 9 )  decode:( move 4 , 6 ; move 3 , 3 + 4 ) 
[3499] c:3 is:( move 4 , 0 - 9 ; move 4 , 2 )  decode:( move 4 , 0 - 9 ; move 4 , 2 ) 
[3500] c:3 is:( move 3 , 2 / 4 ; move 3 , 5 )  decode:( move 3 , 2 / 4 ; move 3 , 5 ) 
[3501] c:3 is:( move 4 , 4 ; move 4 , 3 / 2 )  decode:( move 4 , 4 ; move 4 , 3 / 2 ) 
[3502] c:0 is:( move 4 , 3 ; move 4 , 2 * 5 )  decode:( move 4 , 3 ; move 4 , 5 * 2 ) 
[3503] c:0 is:( move 4 , 2 ; move 3 , 8 + 3 )  decode:( move 4 , 2 ; move 3 , 8 ) 
[3504] c:0 is:( move 3 , 2 / 3 ; move 5 , 4 )  decode:( move 3 , 3 / 2 ; move 5 , 4 ) 
[3505] c:3 is:( move 4 , 3 ; move 4 , 2 / 4 )  decode:( move 4 , 3 ; move 4 , 2 / 4 ) 
[3506] c:0 is:( move 4 , 2 ; move 4 , 3 * 5 )  decode:( move 4 , 2 ; move 4 , 0 - 9 ) 
[3507] c:3 is:( move 2 , 2 / 7 ; move 4 , 2 )  decode:( move 2 , 2 / 7 ; move 4 , 2 ) 
[3508] c:3 is:( move 2 , 6 ; move 4 , 3 / 2 )  decode:( move 2 , 6 ; move 4 , 3 / 2 ) 
[3509] c:0 is:( move 9 , 5 ; move 3 , 0 - 2 )  decode:( move 3 , 3 ; move ua + 3 , 2 ) 
[3510] c:0 is:( move 3 , 2 / 4 ; move 4 , 4 )  decode:( move 3 , 2 / ua ; move 4 , 4 ) 
[3511] c:0 is:( move 4 , 4 * 4 ; move 4 , 2 )  decode:( move 4 , 0 - 9 ; move 4 , 2 ) 
[3512] c:3 is:( move 5 , 0 - 9 ; move 3 , 2 )  decode:( move 5 , 0 - 9 ; move 3 , 2 ) 
[3513] c:3 is:( move 5 , 3 ; move 3 , 2 / 4 )  decode:( move 5 , 3 ; move 3 , 2 / 4 ) 
[3514] c:0 is:( move 5 , 0 ; move 4 , 2 + 9 )  decode:( move 5 , 0 ; move 4 , ua / 4 ) 
[3515] c:3 is:( move 3 , 0 - 9 ; move 3 , 4 )  decode:( move 3 , 0 - 9 ; move 3 , 4 ) 
[3516] c:0 is:( move 4 , 9 ; move 3 + 2 , 2 )  decode:( move 4 , 9 ; move 5 , 2 ) 
[3517] c:0 is:( move 4 , 3 ; move 0 - 3 , 9 )  decode:( move 4 , 9 ; move 3 , 6 ) 
[3518] c:0 is:( move 6 , 0 ; move 4 , 4 * 4 )  decode:( move ua , 0 ; move 4 , 4 * 4 ) 
[3519] c:0 is:( move 4 , 5 ; move 0 - 3 , 7 )  decode:( move 4 , 4 + 3 ; move 3 , 7 ) 
[3520] c:3 is:( move 4 , 0 - 2 ; move 4 , 9 )  decode:( move 4 , 0 - 2 ; move 4 , 9 ) 
[3521] c:0 is:( move 4 , 2 ; move 4 , 4 * 4 )  decode:( move 4 , 2 ; move 4 , 9 ) 
[3522] c:3 is:( move 4 , 4 / 3 ; move 2 , 4 )  decode:( move 4 , 4 / 3 ; move 2 , 4 ) 
[3523] c:0 is:( move 9 , 0 - 4 ; move 4 , 2 )  decode:( move 9 , 4 * 5 ; move 4 , 2 ) 
[3524] c:3 is:( move 5 , 2 ; move 4 , 2 / 4 )  decode:( move 5 , 2 ; move 4 , 2 / 4 ) 
[3525] c:0 is:( move 4 , 3 ; move 4 , 0 - 8 )  decode:( move 4 , 3 ; move 4 , 3 / 2 ) 
[3526] c:0 is:( move 2 , 4 + 6 ; move 4 , 4 )  decode:( move 2 , 4 + ; ; move 4 , 4 ) 
[3527] c:0 is:( move 0 - 4 , 9 ; move 4 , 2 )  decode:( move 4 , 9 ; move 4 , 2 ) 
[3528] c:0 is:( move 4 , 2 ; move 4 , 0 - 9 )  decode:( move 4 , 2 ; move 4 , 9 ) 
[3529] c:2 is:( move 4 , 4 ; move 3 , 2 / 4 )  decode:( move 4 , 4 ; move 3 , 2 / 8 ) 
[3530] c:0 is:( move 3 , 6 ; move 3 , 2 / 3 )  decode:( move 3 , 6 ; move 3 , 3 / 3 ) 
[3531] c:3 is:( move 4 , 3 ; move 3 , 4 / 3 )  decode:( move 4 , 3 ; move 3 , 4 / 3 ) 
[3532] c:1 is:( move 5 , 2 * 5 ; move 4 , 2 )  decode:( move 5 , 2 * 5 ; move 4 , 2 ) 
[3533] c:3 is:( move 4 , 4 ; move 4 , 3 / 2 )  decode:( move 4 , 4 ; move 4 , 3 / 2 ) 
[3534] c:0 is:( move 4 , 5 ; move 3 + 4 , 4 )  decode:( move 4 , 5 ; move ua + ul , 4 ) 
[3535] c:3 is:( move 4 , 2 / 4 ; move 3 , 4 )  decode:( move 4 , 2 / 4 ; move 3 , 4 ) 
[3536] c:3 is:( move 3 , 2 / 6 ; move 4 , 2 )  decode:( move 3 , 2 / 6 ; move 4 , 2 ) 
[3537] c:3 is:( move 9 , 2 ; move 4 , 0 - 4 )  decode:( move 9 , 2 ; move 4 , 0 - 4 ) 
[3538] c:3 is:( move 3 , 3 ; move 4 , 4 * 4 )  decode:( move 3 , 3 ; move 4 , 4 * 4 ) 
[3539] c:0 is:( move 3 , 3 / 4 ; move 5 , 2 )  decode:( move 3 , 4 / 4 ; move 5 , 2 ) 
[3540] c:0 is:( move 3 , 3 / 2 ; move 5 , 4 )  decode:( move 3 , ua / 4 ; move 5 , 4 ) 
[3541] c:0 is:( move 4 , 9 ; move 0 - 3 , 3 )  decode:( move 4 , 9 ; move 3 , 2 ) 
[3542] c:0 is:( move 4 , 2 ; move 3 , 7 * 3 )  decode:( move 3 , ul ; move 4 , 0 - 4 ) 
[3543] c:0 is:( move 5 , 0 - 2 ; move 4 , 9 )  decode:( move ul - ua , ul ; move 4 , 6 ) 
[3544] c:0 is:( move 3 , 4 ; move 4 , 2 / 5 )  decode:( move 3 , 4 ; move 4 , 2 / 4 ) 
[3545] c:3 is:( move 4 , 4 * 3 ; move 3 , 5 )  decode:( move 4 , 4 * 3 ; move 3 , 5 ) 
[3546] c:0 is:( move 4 , 2 / 6 ; move 2 , 4 )  decode:( move 2 , 2 / 6 ; move 4 , 9 ) 
[3547] c:3 is:( move 3 , 2 / 6 ; move 3 , 4 )  decode:( move 3 , 2 / 6 ; move 3 , 4 ) 
[3548] c:3 is:( move 3 , 2 / 4 ; move 4 , 5 )  decode:( move 3 , 2 / 4 ; move 4 , 5 ) 
[3549] c:0 is:( move 4 , 0 - 3 ; move 4 , 9 )  decode:( move 4 , 3 * 4 ; move 4 , 9 ) 
[3550] c:3 is:( move 4 , 2 / 6 ; move 4 , 2 )  decode:( move 4 , 2 / 6 ; move 4 , 2 ) 
[3551] c:0 is:( move 5 , 3 ; move 4 , 4 * 3 )  decode:( move 5 , 3 ; move 4 , 4 * 4 ) 
[3552] c:0 is:( move 9 , 2 ; move 4 + 4 , 2 )  decode:( move 9 , 2 ; move ua + 2 , 2 ) 
[3553] c:3 is:( move 4 , 4 ; move 4 , 2 / 4 )  decode:( move 4 , 4 ; move 4 , 2 / 4 ) 
[3554] c:3 is:( move 4 , 2 * 5 ; move 4 , 4 )  decode:( move 4 , 2 * 5 ; move 4 , 4 ) 
[3555] c:3 is:( move 4 , 4 * 4 ; move 3 , 4 )  decode:( move 4 , 4 * 4 ; move 3 , 4 ) 
[3556] c:3 is:( move 4 , 4 / 3 ; move 3 , 4 )  decode:( move 4 , 4 / 3 ; move 3 , 4 ) 
[3557] c:0 is:( move 4 - 3 , 2 ; move 3 , 8 )  decode:( move ul , 2 ; move 3 , ua * ua ) 
[3558] c:3 is:( move 4 , 9 + 2 ; move 4 , 2 )  decode:( move 4 , 9 + 2 ; move 4 , 2 ) 
[3559] c:3 is:( move 3 , 4 ; move 4 , 7 + 3 )  decode:( move 3 , 4 ; move 4 , 7 + 3 ) 
[3560] c:3 is:( move 5 , 4 / 3 ; move 2 , 4 )  decode:( move 5 , 4 / 3 ; move 2 , 4 ) 
[3561] c:0 is:( move 3 , 9 ; move 0 - 4 , 4 )  decode:( move 3 , 9 ; move 4 , ul ) 
[3562] c:3 is:( move 3 , 2 - 9 ; move 4 , 2 )  decode:( move 3 , 2 - 9 ; move 4 , 2 ) 
[3563] c:0 is:( move 9 , 4 ; move 2 , 2 + 4 )  decode:( move 9 , 4 ; move 3 , 2 + 4 ) 
[3564] c:0 is:( move 9 , 2 - 3 ; move 4 , 2 )  decode:( move 3 , 9 ; move ua , 0 - 2 ) 
[3565] c:0 is:( move 3 , 6 ; move 4 + 3 , 5 )  decode:( move 3 , 9 ; move ua + ul , 5 ) 
[3566] c:3 is:( move 4 , 3 / 2 ; move 4 , 5 )  decode:( move 4 , 3 / 2 ; move 4 , 5 ) 
[3567] c:3 is:( move 4 , 6 ; move 3 , 2 / 3 )  decode:( move 4 , 6 ; move 3 , 2 / 3 ) 
[3568] c:0 is:( move 6 , 4 * 3 ; move 4 , 2 )  decode:( move ua , 4 * 3 ; move 4 , 2 ) 
[3569] c:3 is:( move 4 , 7 ; move 4 , 4 + 2 )  decode:( move 4 , 7 ; move 4 , 4 + 2 ) 
[3570] c:3 is:( move 4 , 4 * 4 ; move 2 , 5 )  decode:( move 4 , 4 * 4 ; move 2 , 5 ) 
[3571] c:0 is:( move 3 , 5 ; move 4 , 4 * 3 )  decode:( move 3 , 5 ; move 4 , 2 / 3 ) 
[3572] c:0 is:( move 9 , 0 - 4 ; move 3 , 4 )  decode:( move 9 , 0 - 4 ; move 3 , 2 ) 
[3573] c:0 is:( move 4 , 4 ; move 3 , 4 / 3 )  decode:( move 3 , 4 ; move 4 , 4 / 3 ) 
[3574] c:3 is:( move 4 , 2 / 4 ; move 4 , 4 )  decode:( move 4 , 2 / 4 ; move 4 , 4 ) 
[3575] c:3 is:( move 5 , 2 ; move 4 , 4 / 3 )  decode:( move 5 , 2 ; move 4 , 4 / 3 ) 
[3576] c:0 is:( move 4 , 3 * 4 ; move 4 , 4 )  decode:( move 4 , 4 * 3 ; move 4 , 4 ) 
[3577] c:3 is:( move 9 , 0 - 3 ; move 4 , 4 )  decode:( move 9 , 0 - 3 ; move 4 , 4 ) 
[3578] c:0 is:( move 4 , 2 / 3 ; move 4 , 5 )  decode:( move 4 , 3 / 2 ; move 4 , 5 ) 
[3579] c:0 is:( move 4 , 2 - 9 ; move 3 , 2 )  decode:( move 3 , 9 / 2 ; move 4 , 2 ) 
[3580] c:3 is:( move 4 , 4 / 3 ; move 3 , 4 )  decode:( move 4 , 4 / 3 ; move 3 , 4 ) 
[3581] c:3 is:( move 4 , 2 ; move 4 + 4 , 7 )  decode:( move 4 , 2 ; move 4 + 4 , 7 ) 
[3582] c:0 is:( move 5 , 2 / 3 ; move 4 , 4 )  decode:( move 5 , 3 / 2 ; move 4 , 4 ) 
[3583] c:0 is:( move 2 , 4 + 9 ; move 4 , 2 )  decode:( move 4 , 4 / ua ; move 4 , 2 ) 
[3584] c:3 is:( move 9 , 4 + 3 ; move 3 , 2 )  decode:( move 9 , 4 + 3 ; move 3 , 2 ) 
[3585] c:3 is:( move 5 , 3 ; move 3 , 4 / 3 )  decode:( move 5 , 3 ; move 3 , 4 / 3 ) 
[3586] c:3 is:( move 4 , 2 / 4 ; move 4 , 4 )  decode:( move 4 , 2 / 4 ; move 4 , 4 ) 
[3587] c:3 is:( move 3 , 9 ; move 3 , 2 - 3 )  decode:( move 3 , 9 ; move 3 , 2 - 3 ) 
[3588] c:0 is:( move 9 , 0 - 2 ; move 4 , 5 )  decode:( move 4 , 0 ; move 9 , 4 * 3 ) 
[3589] c:3 is:( move 5 , 4 * 3 ; move 5 , 2 )  decode:( move 5 , 4 * 3 ; move 5 , 2 ) 
[3590] c:3 is:( move 2 , 4 + 3 ; move 4 , 8 )  decode:( move 2 , 4 + 3 ; move 4 , 8 ) 
[3591] c:3 is:( move 4 , 3 ; move 4 , 4 / 3 )  decode:( move 4 , 3 ; move 4 , 4 / 3 ) 
[3592] c:0 is:( move 4 , 6 + 4 ; move 5 , 2 )  decode:( move 4 , 4 + 6 ; move 5 , 2 ) 
[3593] c:3 is:( move 4 , 2 / 4 ; move 3 , 5 )  decode:( move 4 , 2 / 4 ; move 3 , 5 ) 
[3594] c:3 is:( move 5 , 2 / 4 ; move 3 , 4 )  decode:( move 5 , 2 / 4 ; move 3 , 4 ) 
[3595] c:0 is:( move 5 , 4 / 3 ; move 4 , 2 )  decode:( move 4 , ul / 3 ; move 4 , 2 ) 
[3596] c:3 is:( move 4 , 2 / 4 ; move 4 , 5 )  decode:( move 4 , 2 / 4 ; move 4 , 5 ) 
[3597] c:0 is:( move 5 , 7 ; move 3 * 3 , 2 )  decode:( move 5 , 7 ; move 3 + ua , 2 ) 
[3598] c:0 is:( move 5 , 0 ; move 4 , 4 * 7 )  decode:( move ul - ua , 3 ; move 5 , 6 ) 
[3599] c:3 is:( move 4 , 4 ; move 4 , 4 * 4 )  decode:( move 4 , 4 ; move 4 , 4 * 4 ) 
[3600] c:0 is:( move 4 , 3 ; move 9 , 2 - 3 )  decode:( move 3 , 3 ; move 9 , 2 - 3 ) 
[3601] c:2 is:( move 3 , 5 ; move 4 , 7 + 3 )  decode:( move 3 , 5 ; move 4 , 9 ) 
[3602] c:0 is:( move 4 , 3 ; move 4 + 7 , 4 )  decode:( move 4 , 3 ; move  + 7 , 4 ) 
[3603] c:0 is:loop 0 , 4 , move v0 , 0 - v0  decode:loop 0 , 3 , move 2 , 0 - 3 0 
[3604] c:3 is:( move 3 , 9 ; move 4 , 2 - 3 )  decode:( move 3 , 9 ; move 4 , 2 - 3 ) 
[3605] c:0 is:( move 3 , 0 ; move 4 , 4 * 9 )  decode:( move 3 , 0 ; move 4 , 3 / 2 ) 
[3606] c:3 is:( move 3 , 2 * 5 ; move 5 , 5 )  decode:( move 3 , 2 * 5 ; move 5 , 5 ) 
[3607] c:0 is:( move 4 , 9 + 2 ; move 5 , 2 )  decode:( move 4 , 2 + 9 ; move 5 , 2 ) 
[3608] c:3 is:( move 3 , 9 + 2 ; move 4 , 4 )  decode:( move 3 , 9 + 2 ; move 4 , 4 ) 
[3609] c:3 is:( move 5 , 3 ; move 4 , 4 * 4 )  decode:( move 5 , 3 ; move 4 , 4 * 4 ) 
[3610] c:3 is:( move 4 , 4 ; move 4 , 3 / 4 )  decode:( move 4 , 4 ; move 4 , 3 / 4 ) 
[3611] c:0 is:( move 4 , 3 ; move 3 - 7 , 4 )  decode:( move 4 , 3 ; move 4 , ul ) 
[3612] c:3 is:loop 0 , 2 , move 0 - ua , 0 - 2  decode:loop 0 , 2 , move 0 - ua , 0 - 2 
[3613] c:3 is:( move 3 , 6 ; move 5 , 3 / 2 )  decode:( move 3 , 6 ; move 5 , 3 / 2 ) 
[3614] c:0 is:( move 4 , 4 ; move 4 , 5 * 3 )  decode:( move 4 , 4 ; move 4 , 0 - 9 ) 
[3615] c:3 is:( move 4 , 9 ; move 4 , 0 - 4 )  decode:( move 4 , 9 ; move 4 , 0 - 4 ) 
[3616] c:3 is:( move 4 , 4 ; move 4 , 7 + 3 )  decode:( move 4 , 4 ; move 4 , 7 + 3 ) 
[3617] c:3 is:( move 4 , 2 ; move 4 , 5 / 4 )  decode:( move 4 , 2 ; move 4 , 5 / 4 ) 
[3618] c:0 is:( move 3 , 9 ; move 4 , 0 - 5 )  decode:( move 4 , 9 ; move 3 , 4 / 3 ) 
[3619] c:0 is:( move 4 , 9 + 2 ; move 3 , 4 )  decode:( move 4 , 2 - 5 ; move 3 , 4 ) 
[3620] c:3 is:( move 2 , 2 - 9 ; move 4 , 4 )  decode:( move 2 , 2 - 9 ; move 4 , 4 ) 
[3621] c:3 is:( move 5 , 3 * 4 ; move 4 , 4 )  decode:( move 5 , 3 * 4 ; move 4 , 4 ) 
[3622] c:0 is:( move 3 , 6 ; move 4 , 3 * 4 )  decode:( move 3 , 6 ; move 4 , 4 * 3 ) 
[3623] c:3 is:( move 4 , 0 - 9 ; move 4 , 4 )  decode:( move 4 , 0 - 9 ; move 4 , 4 ) 
[3624] c:3 is:( move 4 , 4 / 5 ; move 4 , 2 )  decode:( move 4 , 4 / 5 ; move 4 , 2 ) 
[3625] c:3 is:( move 5 , 4 / 3 ; move 3 , 4 )  decode:( move 5 , 4 / 3 ; move 3 , 4 ) 
[3626] c:3 is:( move 4 , 4 / 3 ; move 3 , 5 )  decode:( move 4 , 4 / 3 ; move 3 , 5 ) 
[3627] c:0 is:( move 4 , 3 ; move 4 , 3 / 5 )  decode:( move 4 , 3 ; move 4 , 7 ) 
[3628] c:3 is:( move 5 , 2 / 4 ; move 4 , 4 )  decode:( move 5 , 2 / 4 ; move 4 , 4 ) 
[3629] c:0 is:( move 5 , 9 ; move 3 , 0 - 4 )  decode:( move 3 , 9 ; move 5 , 0 - 4 ) 
[3630] c:0 is:( move 9 , 4 ; move 4 , 0 - 4 )  decode:( move 4 , 4 ; move 3 * 3 , 4 ) 
[3631] c:0 is:( move 4 , 2 * 5 ; move 4 , 5 )  decode:( move 4 , 5 * 5 ; move 4 , 5 ) 
[3632] c:0 is:( move 4 , 9 * 2 ; move 3 , 2 )  decode:( move 3 , 2 - 9 ; move 4 , 2 ) 
[3633] c:3 is:( move 4 , 4 ; move 5 , 4 * 3 )  decode:( move 4 , 4 ; move 5 , 4 * 3 ) 
[3634] c:0 is:( move 0 - 3 , 9 ; move 4 , 5 )  decode:( move 3 , 4 * 3 ; move 4 , 5 ) 
[3635] c:3 is:( move 3 , 4 / 3 ; move 4 , 5 )  decode:( move 3 , 4 / 3 ; move 4 , 5 ) 
[3636] c:3 is:( move 3 , 0 - 9 ; move 5 , 4 )  decode:( move 3 , 0 - 9 ; move 5 , 4 ) 
[3637] c:3 is:( move 4 , 4 * 4 ; move 4 , 4 )  decode:( move 4 , 4 * 4 ; move 4 , 4 ) 
[3638] c:3 is:( move 4 , 4 * 4 ; move 4 , 4 )  decode:( move 4 , 4 * 4 ; move 4 , 4 ) 
[3639] c:3 is:( move 4 , 4 ; move 4 , 4 / 3 )  decode:( move 4 , 4 ; move 4 , 4 / 3 ) 
[3640] c:3 is:( move 5 , 0 - 9 ; move 3 , 4 )  decode:( move 5 , 0 - 9 ; move 3 , 4 ) 
[3641] c:0 is:( move 4 , 3 ; move 4 + 7 , 4 )  decode:( move 4 , 3 ; move  + 7 , 4 ) 
[3642] c:0 is:( move 5 , 2 ; move 5 , 4 / 3 )  decode:( move 5 , 2 ; move 5 , 3 / 2 ) 
[3643] c:3 is:( move 9 , 4 ; move 3 , 2 + 4 )  decode:( move 9 , 4 ; move 3 , 2 + 4 ) 
[3644] c:0 is:( move 4 , 2 - 9 ; move 4 , 2 )  decode:( move 4 , 9 - 2 ; move 4 , 2 ) 
[3645] c:3 is:( move 9 , 4 + 3 ; move 4 , 2 )  decode:( move 9 , 4 + 3 ; move 4 , 2 ) 
[3646] c:0 is:( move 5 , 2 ; move 4 , 4 + 7 )  decode:( move 5 , 2 ; move 4 , 5 + 7 ) 
[3647] c:0 is:( move 4 , 2 ; move 4 , 7 * 3 )  decode:( move 4 , ul ; move 4 , 0 - 4 ) 
[3648] c:3 is:( move 3 , 2 / 6 ; move 4 , 4 )  decode:( move 3 , 2 / 6 ; move 4 , 4 ) 
[3649] c:3 is:( move 4 + 3 , 9 ; move 4 , 2 )  decode:( move 4 + 3 , 9 ; move 4 , 2 ) 
[3650] c:0 is:( move 4 , 2 ; move 3 , 2 / 8 )  decode:( move 4 , 2 ; move 3 , 2 / 5 ) 
[3651] c:3 is:( move 4 , 4 ; move 4 + 7 , 3 )  decode:( move 4 , 4 ; move 4 + 7 , 3 ) 
[3652] c:3 is:( move 5 , 3 ; move 4 , 4 / 3 )  decode:( move 5 , 3 ; move 4 , 4 / 3 ) 
[3653] c:3 is:( move 4 , 4 / 3 ; move 5 , 3 )  decode:( move 4 , 4 / 3 ; move 5 , 3 ) 
[3654] c:1 is:( move 5 , 4 / 5 ; move 3 , 2 )  decode:( move 5 , 4 / 5 ; move 3 , 2 ) 
[3655] c:3 is:( move 5 , 2 / 4 ; move 3 , 5 )  decode:( move 5 , 2 / 4 ; move 3 , 5 ) 
[3656] c:0 is:( move 5 , 4 * 4 ; move 4 , 3 )  decode:loop 0 , 4 , move 2 , 0 - 3 
[3657] c:3 is:( move 4 , 6 ; move 4 , 4 * 3 )  decode:( move 4 , 6 ; move 4 , 4 * 3 ) 
[3658] c:0 is:( move 4 , 4 ; move 3 , 2 / 7 )  decode:( move 3 , 4 ; move 4 , 2 / ua ) 
[3659] c:0 is:( move 4 , 6 ; move 4 , 0 - 8 )  decode:( move 4 , 4 / 3 ; move 4 , 8 ) 
[3660] c:0 is:( move 4 , 9 ; move 4 , 0 - 5 )  decode:( move 4 , 9 ; move 4 , 4 / 3 ) 
[3661] c:0 is:( move 4 , 5 ; move 4 , 5 / 2 )  decode:( move 4 , 0 - 2 ; move 4 , 9 ) 
[3662] c:0 is:( move 5 , 4 ; move 4 , 4 * 4 )  decode:( move 4 , 4 ; move 4 , 4 * 4 ) 
[3663] c:0 is:( move 4 , 4 + 9 ; move 3 , 3 )  decode:( move 4 , 0 - 4 ; move 3 , 3 ) 
[3664] c:3 is:( move 4 , 4 / 3 ; move 4 , 5 )  decode:( move 4 , 4 / 3 ; move 4 , 5 ) 
[3665] c:3 is:( move 4 , 3 * 4 ; move 5 , 5 )  decode:( move 4 , 3 * 4 ; move 5 , 5 ) 
[3666] c:0 is:( move 4 , 2 + 9 ; move 4 , 4 )  decode:( move 4 , 9 + 2 ; move 4 , 4 ) 
[3667] c:2 is:( move 9 , 2 - 3 ; move 4 , 4 )  decode:( move 9 , 2 - 3 ; move 4 , 4 ) 
[3668] c:3 is:( move 4 , 5 ; move 4 , 7 + 3 )  decode:( move 4 , 5 ; move 4 , 7 + 3 ) 
[3669] c:0 is:( move 3 , 6 ; move 6 , 3 / 2 )  decode:( move 3 , 6 ; move ua , 3 / 2 ) 
[3670] c:3 is:( move 4 , 0 - 9 ; move 4 , 5 )  decode:( move 4 , 0 - 9 ; move 4 , 5 ) 
[3671] c:3 is:( move 4 , 4 ; move 4 , 7 + 4 )  decode:( move 4 , 4 ; move 4 , 7 + 4 ) 
[3672] c:0 is:( move 3 , 4 * 4 ; move 6 , 4 )  decode:( move 3 , 4 * 4 ; move ua , 4 ) 
[3673] c:1 is:( move 4 , 4 / 3 ; move 5 , 4 )  decode:( move 4 , 4 / 3 ; move 5 , 4 ) 
[3674] c:0 is:( move 3 , 4 ; move 4 , 7 * 3 )  decode:( move 3 , 4 ; move 4 , 0 - 4 ) 
[3675] c:3 is:( move 4 , 2 - 9 ; move 4 , 3 )  decode:( move 4 , 2 - 9 ; move 4 , 3 ) 
[3676] c:3 is:( move 3 , 6 ; move 4 , 4 / 3 )  decode:( move 3 , 6 ; move 4 , 4 / 3 ) 
[3677] c:0 is:( move 4 , 3 / 4 ; move 4 , 5 )  decode:( move 4 , 7 ; move 4 , 5 ) 
[3678] c:0 is:( move 9 , 0 - 6 ; move 3 , 4 )  decode:( move 9 , ul / 4 ; move 3 , 4 ) 
[3679] c:0 is:loop 0 , 3 , move 3 + v0 , v0  decode:loop 0 , 3 , move 4 , v0 
[3680] c:0 is:( move 4 , 2 ; move 5 , 4 / 5 )  decode:( move 4 , 2 ; move ul - ua , 4 ) 
[3681] c:0 is:loop 0 , 2 , move v0 - 3 , v0  decode:loop 0 , 4 , move v0 , v0 
[3682] c:0 is:( move 4 , 9 ; move 3 , 4 + 3 )  decode:( move 4 , 9 ; move 3 , 7 ) 
[3683] c:0 is:loop 0 , 4 , move v0 , v0 + 2  decode:loop 0 , 4 , move v0 - 2 , ua / 4 
[3684] c:3 is:( move 5 , 4 * 4 ; move 4 , 4 )  decode:( move 5 , 4 * 4 ; move 4 , 4 ) 
[3685] c:0 is:( move 0 - 9 , 5 ; move 3 , 5 )  decode:( move 9 , ua * 5 ; move 3 , 5 ) 
[3686] c:0 is:( move 9 , 5 * 2 ; move 3 , 2 )  decode:( move 9 , ul * 5 ; move 3 , 2 ) 
[3687] c:0 is:( move 3 , 4 - 9 ; move 4 , 2 )  decode:( move 3 , 4 / move 3 , 0 - 2 ) 
[3688] c:3 is:( move 5 , 4 / 3 ; move 4 , 4 )  decode:( move 5 , 4 / 3 ; move 4 , 4 ) 
[3689] c:0 is:( move 4 , 5 / 3 ; move 3 , 5 )  decode:( move 4 , ua * ua ; move 3 , 5 ) 
[3690] c:3 is:( move 4 , 4 * 4 ; move 4 , 5 )  decode:( move 4 , 4 * 4 ; move 4 , 5 ) 
[3691] c:0 is:( move 5 , 5 / 2 ; move 4 , 4 )  decode:( move 5 ,  2 2 ; move 4 , 4 ) 
[3692] c:3 is:loop 0 , 3 , move 0 - ua , 0 - 2  decode:loop 0 , 3 , move 0 - ua , 0 - 2 
[3693] c:0 is:( move 4 , 9 ; move 5 , 0 - 4 )  decode:( move 5 , 9 ; move 4 , 0 - 4 ) 
[3694] c:0 is:( move 9 , 2 / 3 ; move 4 , 2 )  decode:( move 9 , 4 / 3 ; move 4 , 2 ) 
[3695] c:0 is:( move 4 , 4 / 7 ; move 3 , 2 )  decode:( move 4 , 2 / 4 ; move 3 , 2 ) 
[3696] c:0 is:( move 4 , 6 ; move 3 , 4 + 6 )  decode:( move 4 , 6 ; move 3 , 9 ) 
[3697] c:3 is:loop 0 , 2 , move ua + 2 , 0 - 2  decode:loop 0 , 2 , move ua + 2 , 0 - 2 
[3698] c:3 is:( move 4 , 2 ; move 5 , 5 / 4 )  decode:( move 4 , 2 ; move 5 , 5 / 4 ) 
[3699] c:3 is:( move 4 , 2 / 6 ; move 4 , 4 )  decode:( move 4 , 2 / 6 ; move 4 , 4 ) 
[3700] c:0 is:( move 2 , 9 + 4 ; move 4 , 4 )  decode:( move 2 , 4 / ua ; move 4 , 4 ) 
[3701] c:3 is:( move 9 , 4 * 3 ; move 3 , 2 )  decode:( move 9 , 4 * 3 ; move 3 , 2 ) 
[3702] c:0 is:( move 9 , 2 / 4 ; move 3 , 2 )  decode:( move 9 , 3 / 4 ; move 3 , 2 ) 
[3703] c:0 is:loop 0 , 4 , move 2 + v0 , v0  decode:0 0 loop 0 , 4 , move 4 , v0 
[3704] c:0 is:( move 3 , 4 * 3 ; move 9 , 2 )  decode:( move 3 , 3 * 5 ; move 9 , 2 ) 
[3705] c:3 is:( move 9 , 2 ; move 4 + 4 , 4 )  decode:( move 9 , 2 ; move 4 + 4 , 4 ) 
[3706] c:0 is:loop 0 , 7 , move 5 , 2 - 9 - 4  decode:loop 0 , 3 , move 3 - 9 , = 3 - 3 
[3707] c:0 is:( move 4 , 4 ; move 4 , 7 * 3 )  decode:( move 4 , 4 ; move 4 , 0 - 4 ) 
[3708] c:3 is:loop 0 , 3 , move 0 - ua , 0 - 3  decode:loop 0 , 3 , move 0 - ua , 0 - 3 
[3709] c:0 is:( move 4 , 9 ; move 3 * 3 , 3 )  decode:( move 4 , 9 ; move 3 + 3 , 3 ) 
[3710] c:2 is:( move 3 , 4 * 3 ; move 8 , 4 )  decode:( move 3 , 4 * 3 ; move 8 , 4 ) 
[3711] c:0 is:( move 9 , 4 * 3 ; move 2 , 4 )  decode:( move 2 , 4 ; move ua + 3 , 4 ) 
[3712] c:0 is:( move 3 , 4 * 6 ; move 4 , 5 )  decode:( move 3 , 4 ; move 4 , 5 ) 
[3713] c:0 is:loop 0 , 4 , move v0 - 2 , v0  decode:loop 0 , 4 , move v0 , v0 
[3714] c:3 is:( move 4 , 4 * 3 ; move 4 , 7 )  decode:( move 4 , 4 * 3 ; move 4 , 7 ) 
[3715] c:1 is:( move 9 , 4 * 4 ; move 3 , 2 )  decode:( move 9 , 4 * 4 ; move 3 , 2 ) 
[3716] c:0 is:loop 0 , 2 , move 2 - ua , 0 - 2  decode:loop 0 , 2 , move 0 - 4 , 0 - 4 
[3717] c:3 is:( move 4 , 2 - 9 ; move 4 , 4 )  decode:( move 4 , 2 - 9 ; move 4 , 4 ) 
[3718] c:0 is:( move 9 , 0 - 9 ; move 3 , 2 )  decode:( move 9 , 0 - 5 ; move 3 , 2 ) 
[3719] c:0 is:( move 4 , 9 * 2 ; move 5 , 2 )  decode:loop 0 , 2 , move 2 - ua , 0 - 4 
[3720] c:0 is:( move 5 , 9 ; move 4 , 2 - 3 )  decode:( move 4 , 9 ; move ua - 2 , ul ) 
[3721] c:0 is:( move 4 , 9 * 4 ; move 3 , 2 )  decode:( move 4 , ul * 9 ; move 3 , 2 ) 
[3722] c:0 is:loop 0 , 5 , move v0 , v0 + 2  decode:( move 3 , 9 ; move ua + ul , 8 ) 
[3723] c:0 is:( move 4 , 6 ; move 4 , 6 + 4 )  decode:( move 4 , ua / 5 ; move 4 , 9 ) 
[3724] c:0 is:loop 0 , 3 , move 2 , v0 * v0  decode:( move 3 , 0 ; move 3 , 4 ) 
[3725] c:0 is:( move 4 , 6 ; move 3 , 3 + 8 )  decode:loop 0 , 3 , move v0 + ul , 3 / 4 
[3726] c:0 is:( move 3 , 9 * 4 ; move 4 , 2 )  decode:( move 3 , 4 * 4 ; move 4 , 2 ) 
[3727] c:3 is:( move 9 , 4 + 3 ; move 4 , 4 )  decode:( move 9 , 4 + 3 ; move 4 , 4 ) 
[3728] c:0 is:loop 0 , 4 , move v0 , v0 + 3  decode:( move ul , 4 ; move 5 , 4 + 4 ) 
[3729] c:0 is:( move 5 , 5 ; move 4 , 4 / 3 )  decode:( move 4 , 5 ; move 5 , 4 / 3 ) 
[3730] c:3 is:loop 0 , 3 , move ua + 2 , 0 - 2  decode:loop 0 , 3 , move ua + 2 , 0 - 2 
[3731] c:0 is:( move 3 , 9 ; move 3 , 4 * 3 )  decode:( move 3 , 9 ; move 3 , 4 / 2 ) 
[3732] c:3 is:( move 5 , 4 * 4 ; move 4 , 5 )  decode:( move 5 , 4 * 4 ; move 4 , 5 ) 
[3733] c:0 is:loop 0 , 5 , move 2 + v0 , v0  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[3734] c:0 is:( move 5 , 4 / 3 ; move 4 , 5 )  decode:( move 4 , 4 / 3 ; move 4 , 5 ) 
[3735] c:0 is:( move 2 , 9 ; move 5 , 4 + 4 )  decode:( move 4 - ua , 9 ; move 5 , 8 ) 
[3736] c:0 is:loop 0 , 4 , move 2 - v0 , v0  decode:loop 0 , 4 , move v0 , v0 
[3737] c:1 is:( move 9 , 4 / 3 ; move 3 , 2 )  decode:( move 9 , 4 / 3 ; move 3 , 2 ) 
[3738] c:0 is:( move 3 , 2 - 9 ; move 4 , 5 )  decode:loop 0 , 4 , move v0 , 2 - 4 
[3739] c:3 is:loop 0 , 3 , move v0 + 4 , v0  decode:loop 0 , 3 , move v0 + 4 , v0 
[3740] c:0 is:( move 9 , 3 / 2 ; move 3 , 4 )  decode:( move 9 , 9 / 2 ; move 3 , 4 ) 
[3741] c:0 is:loop 0 , 2 , move v0 - 4 , v0  decode:( move 3 , ul ; move 4 , ul ) 
[3742] c:0 is:( move 5 , 2 ; move 5 , 4 / 5 )  decode:( move 5 , 2 ; move 5 , 2 / 5 ) 
[3743] c:0 is:( move 4 , 3 ; move 3 , 7 * 5 )  decode:( move 4 , 3 ; move 3 , 9 ) 
[3744] c:0 is:( move 3 , 9 ; move 4 , 3 / 2 )  decode:( move 3 , 9 ; move 3 , 3 / 2 ) 
[3745] c:3 is:loop 0 , 4 , move 0 - ua , 0 - 2  decode:loop 0 , 4 , move 0 - ua , 0 - 2 
[3746] c:0 is:loop 0 , 4 , move 3 + v0 , v0  decode:loop 0 , 4 , move ua - 2 , v0 
[3747] c:0 is:( move 9 , 2 / 4 ; move 4 , 2 )  decode:( move 9 , 4 / ua ; move 4 , 2 ) 
[3748] c:3 is:( move 5 , 4 / 5 ; move 5 , 2 )  decode:( move 5 , 4 / 5 ; move 5 , 2 ) 
[3749] c:0 is:( move 9 , 4 + 4 ; move 5 , 2 )  decode:( move 9 , ua / 4 ; move 5 , 2 ) 
[3750] c:3 is:loop 0 , 4 , move v0 , v0 - 2  decode:loop 0 , 4 , move v0 , v0 - 2 
[3751] c:0 is:( move 4 , 2 ; move 7 , 7 + 4 )  decode:( move 4 , 2 ; move ua + ul , 8 ) 
[3752] c:0 is:( move 4 , 4 * 3 ; move 3 , 9 )  decode:( move 4 , 4 * 3 ; move 4 , 9 ) 
[3753] c:0 is:loop 0 , 5 , move v0 - 2 , v0  decode:( move 2 , 3 ; move 3 - ua , 7 ) 
[3754] c:0 is:( move 3 + 4 , 9 ; move 4 , 5 )  decode:( move ua + ul , 9 ; move 4 , 5 ) 
[3755] c:0 is:( move 5 , 4 / 5 ; move 4 , 4 )  decode:( move 5 , 4 ; move 4 , 4 ) 
[3756] c:3 is:loop 0 , 3 , move ua + 2 , 0 - 3  decode:loop 0 , 3 , move ua + 2 , 0 - 3 
[3757] c:0 is:loop 0 , 3 , move ua - 2 , 0 - 2  decode:loop 0 , 3 , move 4 , 0 - 2 
[3758] c:3 is:( move 4 , 5 ; move 4 , 5 / 4 )  decode:( move 4 , 5 ; move 4 , 5 / 4 ) 
[3759] c:0 is:loop 0 , 5 , move v0 , 3 + v0  decode:( move 3 , 3 ; move ua , 4 * 3 ) 
[3760] c:0 is:( move 4 , 2 / 9 ; move 3 , 4 )  decode:( move 4 , ul / 4 ; move 3 , 4 ) 
[3761] c:0 is:loop 0 , 4 , move ua + 2 , 0 - 2  decode:loop 0 , 4 , move 2 + 2 , 0 - 2 
[3762] c:3 is:( move 9 , 2 / 6 ; move 3 , 2 )  decode:( move 9 , 2 / 6 ; move 3 , 2 ) 
[3763] c:0 is:( move 4 , 9 ; move 3 , 2 / 4 )  decode:( move 3 , 9 ; move 4 , 4 / 3 ) 
[3764] c:0 is:loop 0 , 3 , move v0 - 4 , v0  decode:( move ul - ua , 0 ; move 4 , ul ) 
[3765] c:0 is:( move 4 , 9 ; move 3 , 2 / 4 )  decode:( move 3 , 9 ; move 4 , 4 / 3 ) 
[3766] c:0 is:( move 4 , 2 ; move 9 , 4 * 4 )  decode:( move 3 , 9 / 4 ; move ua , 9 ) 
[3767] c:3 is:loop 0 , 3 , move 3 , v0 * v0  decode:loop 0 , 3 , move 3 , v0 * v0 
[3768] c:0 is:( move 5 , 5 / 4 ; move 4 , 4 )  decode:( move 5 , 4 / 4 ; move 4 , 4 ) 
[3769] c:0 is:( move 9 , 4 * 3 ; move 4 , 3 )  decode:loop 0 , 3 , move v0 * 4 , 3 
[3770] c:0 is:( move 4 , 2 + 8 ; move 3 , 8 )  decode:( move 4 , 2 + 5 ; move 3 , 8 ) 
[3771] c:0 is:loop 0 , 4 , move v0 * 2 , v0  decode:loop 0 , 3 , move v0 + 4 , 3 
[3772] c:0 is:( move 5 , 2 / 6 ; move 4 , 5 )  decode:( move 5 , 2 / ua ; move 4 , 5 ) 
[3773] c:0 is:( move 3 , 9 ; move 4 , 4 * 3 )  decode:loop 0 , 3 , move 4 - ua , 9 - v0 
[3774] c:0 is:( move 4 , 4 ; move 4 , 7 * 4 )  decode:( move 4 , 4 ; move 4 , 4 * 4 ) 
[3775] c:0 is:loop 0 , 3 , move 4 - v0 , v0  decode:( move 4 , ul ; move 4 , 0 - 2 ) 
[3776] c:0 is:loop 0 , 4 , move 4 + v0 , v0  decode:loop 0 , 4 , move v0 + 4 , v0 
[3777] c:3 is:( move 9 , 9 + 2 ; move 3 , 2 )  decode:( move 9 , 9 + 2 ; move 3 , 2 ) 
[3778] c:0 is:loop 0 , 3 , move 0 - ua , 0 - 4  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[3779] c:0 is:loop 0 , 5 , move v0 , 2 - v0  decode:loop 0 , 3 , move 3 - ua , 0 - v0 
[3780] c:0 is:loop 0 , 5 , move v0 + 3 , v0  decode:loop 0 , 4 , move ua , 0 - v0 + ul 
[3781] c:3 is:( move 9 , 3 / 2 ; move 4 , 4 )  decode:( move 9 , 3 / 2 ; move 4 , 4 ) 
[3782] c:0 is:loop 0 , 5 , move 2 - v0 , v0  decode:( move 2 , 0 ; move 3 ; move 3 , 8 ) 
[3783] c:3 is:( move 4 , 2 / 6 ; move 6 , 4 )  decode:( move 4 , 2 / 6 ; move 6 , 4 ) 
[3784] c:0 is:( move 4 , 9 ; move 2 , 4 / 3 )  decode:( move 2 , 4 ; move 4 , 5 ) 
[3785] c:0 is:loop 0 , 4 , move v0 * v0 , 2  decode:( move 5 , 9 ; move 9 , 2 ) 
[3786] c:3 is:( move 9 , 2 ; move 9 , 0 - 4 )  decode:( move 9 , 2 ; move 9 , 0 - 4 ) 
[3787] c:0 is:loop 0 , 4 , move v0 , v0 + 4  decode:( move 3 , 0 ; move 3 , 4 * 3 ) 
[3788] c:3 is:loop 0 , 2 , move ua + 2 , 0 - 4  decode:loop 0 , 2 , move ua + 2 , 0 - 4 
[3789] c:3 is:loop 0 , 4 , move v0 , v0 * 2  decode:loop 0 , 4 , move v0 , v0 * 2 
[3790] c:0 is:loop 0 , 4 , move v0 , v0 - 3  decode:( move ul , 4 ; move 5 , ul ) 
[3791] c:3 is:( move 9 , 4 * 3 ; move 3 , 4 )  decode:( move 9 , 4 * 3 ; move 3 , 4 ) 
[3792] c:0 is:( move 4 , 4 / 3 ; move 3 , 8 )  decode:( move 3 , 4 / 3 ; move 3 , 8 ) 
[3793] c:0 is:( move 9 , 0 - 9 ; move 4 , 2 )  decode:( move 9 , 0 - 4 ; move 4 , 2 ) 
[3794] c:0 is:loop 0 , 4 , move 2 , v0 / v0  decode:loop 0 , 3 , move ua - 4 , v0 / 2 
[3795] c:0 is:loop 0 , 5 , move v0 - 3 , v0  decode:loop 0 , 4 , move 0 - v0 , v0 
[3796] c:0 is:( move 4 , 9 ; move 4 , 4 * 3 )  decode:( move 3 , 9 ; move 4 , 4 * 3 ) 
[3797] c:0 is:loop 0 , 4 , move v0 , v0 / 2  decode:( move 3 , 3 ; move 3 , 5 ) 
[3798] c:3 is:( move 9 , 2 / 6 ; move 4 , 2 )  decode:( move 9 , 2 / 6 ; move 4 , 2 ) 
[3799] c:0 is:loop 0 , 4 , move v0 * 3 , v0  decode:loop 0 , 3 , move v0 * 3 , 0 - 3 
[3800] c:0 is:loop 0 , 6 , move 0 - ua , 0 - 2  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[3801] c:0 is:( move 5 , 4 / 5 ; move 4 , 5 )  decode:( move 5 , 4 ; move 4 , 5 ) 
[3802] c:0 is:loop 0 , 5 , move v0 , v0 + 4  decode:loop 0 , 3 , move 3 - ua , 9 * v0 
[3803] c:0 is:loop 0 , 4 , move 2 - ua , 0 - 2  decode:loop 0 , 4 , move 0 - 4 , 0 - 2 
[3804] c:0 is:loop 0 , 6 , move 2 - v0 , v0  decode:loop 0 , 4 , move ul + v0 , 3 * 3 
[3805] c:3 is:( move 9 , 3 ; move 4 , 4 * 4 )  decode:( move 9 , 3 ; move 4 , 4 * 4 ) 
[3806] c:0 is:loop 0 , 4 , move 3 , v0 * v0  decode:loop 0 , 4 , move 3 , v0 * 4 
[3807] c:0 is:loop 0 , 5 , move 2 * v0 , v0  decode:loop 0 , 4 , move 4 + v0 , ua / 3 
[3808] c:3 is:( move 4 , 9 + 9 ; move 2 , 2 )  decode:( move 4 , 9 + 9 ; move 2 , 2 ) 
[3809] c:0 is:loop 0 , 5 , move v0 + 4 , v0  decode:loop 0 , 4 , move ua + ul , v0 + ul 
[3810] c:0 is:loop 0 , 6 , move v0 , v0 - 2  decode:loop 0 , 3 , move 2 - ua , v0 - 3 
[3811] c:0 is:loop 0 , 6 , move v0 - 2 , v0  decode:loop 0 , 4 , move ua - 4 , v0 * 3 
[3812] c:0 is:loop 0 , 6 , move v0 , 3 + v0  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[3813] c:0 is:( move 2 , 9 ; move 9 , 3 + 3 )  decode:( move 3 , 9 ; move 9 , 3 + 4 ) 
[3814] c:0 is:loop 0 , 4 , move 0 - ua , 0 - 4  decode:loop 0 , 4 , move ua , 0 - 4 
[3815] c:0 is:loop 0 , 5 , move v0 , 2 * v0  decode:( move ua , 4 * 3 ; move 4 , 8 ) 
[3816] c:0 is:loop 0 , 3 , move 3 / v0 , v0  decode:( move 4 , 0 ; move 3 , 2 ) 
[3817] c:0 is:loop 0 , 4 , move 0 - ua , 0 - 4  decode:loop 0 , 4 , move ua , 0 - 4 
[3818] c:0 is:loop 0 , 5 , move v0 , v0 - 3  decode:( move 5 , 2 / 4 ; move 4 , ul ) 
[3819] c:0 is:( move 3 - 8 , 2 ; move 4 , 8 )  decode:( move ul - ua , 2 ; move 4 , 8 ) 
[3820] c:0 is:( move 9 , 3 / 4 ; move 3 , 4 )  decode:( move ua + 2 , 4 ; move 3 , 4 ) 
[3821] c:0 is:( move 3 , 9 ; move 4 , 4 * 4 )  decode:( move 4 , 3 ; move 3 , 4 ) 
[3822] c:0 is:( move 4 + 3 , 9 ; move 8 , 2 )  decode:( move ua + ul , 9 ; move 8 , 2 ) 
[3823] c:0 is:loop 0 , 4 , move ua + 2 , 0 - 3  decode:loop 0 , 4 , move 2 + ua , 0 - 3 
[3824] c:3 is:( move 4 , 4 * 3 ; move 4 , 9 )  decode:( move 4 , 4 * 3 ; move 4 , 9 ) 
[3825] c:0 is:loop 0 , 4 , move v0 , 2 / v0  decode:( move 4 , 5 ; move 3 , 4 / 3 ) 
[3826] c:0 is:loop 0 , 5 , move v0 , 3 - v0  decode:( move 4 , 5 ; move ua , ul ) 
[3827] c:3 is:( move 9 , 4 * 3 ; move 4 , 4 )  decode:( move 9 , 4 * 3 ; move 4 , 4 ) 
[3828] c:0 is:loop 0 , 3 , move 3 , v0 / v0  decode:loop 0 , 3 , move 3 , v0 * v0 
[3829] c:0 is:loop 0 , 5 , move 2 , v0 * v0  decode:( move 5 , 0 ; move 4 , 5 * 2 ) 
[3830] c:0 is:loop 0 , 4 , move v0 , 5 + v0  decode:( move 3 , 4 ; move 3 , 3 / 2 ) 
[3831] c:0 is:loop 0 , 6 , move v0 , 2 - v0  decode:loop 0 , 4 , move 0 - 4 , 3 * 3 
[3832] c:0 is:( move 4 , 9 ; move 3 , 4 / 3 )  decode:( move 3 , ul ; move 4 , 5 ) 
[3833] c:0 is:loop 0 , 4 , move v0 , 4 - v0  decode:( move 2 , 9 ; move 4 , 0 - 2 ) 
[3834] c:0 is:loop 0 , 3 , move 2 + ua , 0 - 4  decode:loop 0 , 3 , move ua + 2 , 0 - 4 
[3835] c:0 is:loop 0 , 3 , move 4 , v0 * v0  decode:loop 0 , 4 , move 3 , v0 * v0 
[3836] c:0 is:loop 0 , 4 , move 5 + v0 , v0  decode:loop 0 , 4 , move 5 + v0 
[3837] c:0 is:loop 0 , 5 , move 3 - v0 , v0  decode:loop 0 , 3 , move 4 - ua , v0 / 2 
[3838] c:0 is:loop 0 , 6 , move v0 , 4 + v0  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 
[3839] c:0 is:loop 0 , 2 , move 0 - 3 , 2 / ua  decode:loop 0 , 2 , move 0 - 3 , 2 / 4 
[3840] c:0 is:( move 4 , 9 ; move 3 , 9 + 2 )  decode:( move 4 , 9 ; move 3 , 9 + 4 ) 
[3841] c:0 is:loop 0 , 2 , move 2 - ua , 0 - 5  decode:loop 0 , 2 , move 2 - ua , 0 - 4 
[3842] c:0 is:loop 0 , 2 , move 0 - ua , 3 / 2  decode:( move 6 , 3 ; move ua , 8 ) 
[3843] c:3 is:( move 4 , 4 * 4 ; move 4 , 9 )  decode:( move 4 , 4 * 4 ; move 4 , 9 ) 
[3844] c:0 is:loop 0 , 7 , move 2 - v0 , v0  decode:loop 0 , 3 , move 4 , 3 / v0 
[3845] c:0 is:( move 9 , 9 ; move 4 , 0 - 4 )  decode:( move 4 , 9 ; move ua + 3 , 4 ) 
[3846] c:3 is:( move 4 , 8 ; move 4 , 3 + 8 )  decode:( move 4 , 8 ; move 4 , 3 + 8 ) 
[3847] c:3 is:( move 3 , 9 ; move 4 , 7 + 4 )  decode:( move 3 , 9 ; move 4 , 7 + 4 ) 
[3848] c:3 is:loop 0 , 2 , move 2 - ua + 4 , 2  decode:loop 0 , 2 , move 2 - ua + 4 , 2 
[3849] c:0 is:loop 0 , 6 , move 3 - v0 , v0  decode:loop 0 , 3 , move 3 , v0 * 3 
[3850] c:3 is:loop 0 , 4 , move ua + 2 , 0 - 4  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[3851] c:0 is:loop 0 , 6 , move v0 , 3 - v0  decode:loop 0 , 3 , move v0 - ua , 3 - 3 
[3852] c:3 is:loop 0 , 3 , move 2 - ua , 0 - 4  decode:loop 0 , 3 , move 2 - ua , 0 - 4 
[3853] c:0 is:loop 0 , 6 , move 2 , v0 * v0  decode:loop 0 , 4 , move 3 , 3 - v0 / 4 
[3854] c:0 is:loop 0 , 7 , move v0 - 2 , v0  decode:loop 0 , 4 , move v0 - 4 , 3 / 4 
[3855] c:0 is:loop 0 , 5 , move v0 , 4 - v0  decode:( move 2 , 2 ; move ua + 2 , 2 ) 
[3856] c:3 is:loop 0 , 4 , move 4 , v0 * v0  decode:loop 0 , 4 , move 4 , v0 * v0 
[3857] c:0 is:loop 0 , 7 , move v0 , v0 - 2  decode:loop 0 , 4 , move ul - ua , 4 * 4 
[3858] c:0 is:loop 0 , 4 , move v0 - 5 , v0  decode:loop 0 , 3 , move 0 - 4 , v0 
[3859] c:0 is:( move 9 , 9 ; move 4 + 3 , 2 )  decode:( move 9 , 9 ; move ua , 2 ) 
[3860] c:0 is:loop 0 , 3 , move 4 / v0 , v0  decode:( move ua , 0 ; move 4 , ua / 3 ) 
[3861] c:0 is:( move ua , 0 ; move 2 , 0 - 2 )  decode:( move ua , 0 ; move 4 - ua , 2 ) 
[3862] c:0 is:loop 0 , 4 , move ua - 3 , 0 - 2  decode:loop 0 , 4 , move 3 , 0 - 2 
[3863] c:3 is:( move 9 , 4 * 4 ; move 4 , 4 )  decode:( move 9 , 4 * 4 ; move 4 , 4 ) 
[3864] c:0 is:loop 0 , 4 , move v0 , v0 / 3  decode:loop 0 , 4 , move v0 , 3 / 4 
[3865] c:0 is:loop 0 , 7 , move v0 , 2 - v0  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[3866] c:0 is:loop 0 , 4 , move v0 , 4 * v0  decode:( move ul , 2 ; move 4 , 4 / 4 ) 
[3867] c:0 is:loop 0 , 4 , move 3 - ua , 0 - 2  decode:loop 0 , 4 , move 0 - 3 , 0 - 2 
[3868] c:0 is:loop 0 , 4 , move v0 , 3 / v0  decode:loop 0 , 4 , move v0 , 3 / 2 0 
[3869] c:0 is:loop 0 , 6 , move v0 , 2 * v0  decode:loop 0 , 3 , move ua - ul , v0 - 9 
[3870] c:0 is:loop 0 , 5 , move v0 , v0 - 4  decode:( move 2 , 9 ; move 9 , 2 ) 
[3871] c:3 is:loop 0 , 3 , move 4 , v0 / v0  decode:loop 0 , 3 , move 4 , v0 / v0 
[3872] c:0 is:( move 0 - 2 , 0 ; move ua , 2 )  decode:( move ua , 0 - 2 ; move 2 , 5 ) 
[3873] c:0 is:( move 5 , 9 ; move 4 , 2 / 4 )  decode:( move 4 , 9 ; move ua , 4 / ua ) 
[3874] c:0 is:loop 0 , 4 , move v0 * v0 , 4  decode:loop 0 , 4 , move v0 * 2 , 4 
[3875] c:0 is:loop 0 , 7 , move v0 , 3 + v0  decode:( move ua + 3 , 2 ; move 9 , 7 ) 
[3876] c:0 is:loop 0 , 5 , move 0 - ua , 0 - 4  decode:loop 0 , 4 , move ua + ul , 0 - 5 2 2 / 
[3877] c:0 is:loop 0 , 2 , move 2 - ua , 2 - 3  decode:( move 4 , 0 - 2 ; move 4 , ul ) 
[3878] c:0 is:loop 0 , 6 , move v0 - 3 , v0  decode:loop 0 , 4 , move 2 - 4 , v0 * 2 
[3879] c:0 is:loop 0 , 5 , move 3 , v0 * v0  decode:loop 0 , 4 , move 3 , v0 * 4 
[3880] c:0 is:loop 0 , 6 , move v0 , v0 - 3  decode:loop 0 , 3 , move v0 + 4 , 0 - 3 
[3881] c:0 is:loop 0 , 5 , move ua + 2 , 0 - 3  decode:loop 0 , 4 , move 2 - ua + 3 , 0 0 0 0 9 0 0 / , 0 0 
[3882] c:0 is:loop 0 , 5 , move v0 , 3 * v0  decode:( move 3 , ua / 3 ; move ua , 4 ) 
[3883] c:3 is:( move 9 , 0 - 9 ; move 4 , 4 )  decode:( move 9 , 0 - 9 ; move 4 , 4 ) 
[3884] c:3 is:( move 9 , 4 / 3 ; move 4 , 4 )  decode:( move 9 , 4 / 3 ; move 4 , 4 ) 
[3885] c:0 is:loop 0 , 5 , move v0 , 2 / v0  decode:( move ua - ul , 3 ; move ua , 4 ) 
[3886] c:3 is:( move 9 , 5 / 2 ; move 4 , 4 )  decode:( move 9 , 5 / 2 ; move 4 , 4 ) 
[3887] c:0 is:( move 4 , 9 ; move 4 , 0 - 9 )  decode:( move 4 , 9 ; move 4 , 9 ) 
[3888] c:0 is:loop 0 , 5 , move v0 , v0 / 2  decode:loop 0 , 3 , move 3 , v0 + 2 
[3889] c:0 is:loop 0 , 7 , move v0 - 3 , v0  decode:loop 0 , 4 , move 3 , 0 - v0 
[3890] c:0 is:( move ua , 0 ; move 0 - 2 , 3 )  decode:( move ua , 0 ; move 3 - ua , 3 ) 
[3891] c:0 is:loop 0 , 6 , move 3 , v0 * v0  decode:loop 0 , 4 , move 4 , ua / 4 
[3892] c:0 is:loop 0 , 5 , move 4 , v0 * v0  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[3893] c:0 is:loop 0 , 6 , move v0 / 2 , v0  decode:loop 0 , 3 , move v0 + ul , 4 
[3894] c:3 is:( move ua + 2 , 0 ; move 2 , 2 )  decode:( move ua + 2 , 0 ; move 2 , 2 ) 
[3895] c:0 is:loop 0 , 6 , move v0 , v0 / 2  decode:loop 0 , 4 , move 4 , 5 / 8 
[3896] c:0 is:loop 0 , 4 , move 4 , v0 / v0  decode:loop 0 , 4 , move 4 , v0 - v0 
[3897] c:3 is:loop 0 , 3 , move 3 - ua , 0 - 4  decode:loop 0 , 3 , move 3 - ua , 0 - 4 
[3898] c:3 is:loop 0 , 4 , move 2 - ua , 0 - 4  decode:loop 0 , 4 , move 2 - ua , 0 - 4 
[3899] c:0 is:loop 0 , 5 , move v0 , 3 / v0  decode:loop 0 , 4 , move 2 , 3 - v0 
[3900] c:3 is:loop 0 , 3 , move 3 - ua , 0 - 4  decode:loop 0 , 3 , move 3 - ua , 0 - 4 
[3901] c:0 is:loop 0 , 7 , move v0 , 3 - v0  decode:( move ua + ul , 0 ; move 8 , 4 ) 
[3902] c:0 is:loop 0 , 6 , move 0 - ua , 0 - 4  decode:loop 0 , 4 , move ua + ul , 0 - 5 2 2 5 + 
[3903] c:0 is:loop 0 , 3 , move 0 - ua , 3 / 2  decode:loop 0 , 3 , move 0 - ua , 0 - 8 
[3904] c:0 is:loop 0 , 3 , move 2 - ua , 2 - 3  decode:loop 0 , 3 , move 0 - 4 , 2 - 3 
[3905] c:0 is:loop 0 , 2 , move 3 - ua , 0 - 5  decode:loop 0 , 2 , move 0 - 4 , 0 - 5 
[3906] c:3 is:( move 9 , 9 + 4 ; move 4 , 2 )  decode:( move 9 , 9 + 4 ; move 4 , 2 ) 
[3907] c:3 is:( move 2 , 9 ; move 9 , 4 + 4 )  decode:( move 2 , 9 ; move 9 , 4 + 4 ) 
[3908] c:0 is:( move 9 , 9 ; move 6 , 0 - 3 )  decode:( move ua + 3 , 9 ; move ua , 3 ) 
[3909] c:0 is:( move 3 , 4 ; move 7 , 7 + 7 )  decode:( move 3 , 4 ; move 7 , 7 + 4 ) 
[3910] c:3 is:( move 3 , 0 ; move ua , 0 - 2 )  decode:( move 3 , 0 ; move ua , 0 - 2 ) 
[3911] c:0 is:loop 0 , 5 , move v0 , v0 * 4  decode:loop 0 , 4 , move ua - 4 , 3 * 9 
[3912] c:0 is:loop 0 , 3 , move ua - 2 , 2 - 3  decode:loop 0 , 3 , move 4 , 2 - 3 
[3913] c:0 is:loop 0 , 7 , move v0 , v0 - 3  decode:loop 0 , 4 , move 3 + 3 , v0 - 9 
[3914] c:0 is:loop 0 , 4 , move v0 , 4 / v0  decode:loop 0 , 3 , move v0 - 3 , 4 
[3915] c:0 is:loop 0 , 6 , move v0 , v0 * 3  decode:loop 0 , 3 , move ua - ul , v0 * 4 
[3916] c:0 is:loop 0 , 7 , move v0 , v0 + 4  decode:loop 0 , 4 , move ua - ul , v0 + 9 
[3917] c:0 is:( move 0 - 2 , 0 ; move ua , 3 )  decode:( move 2 , 0 ; move ua , 3 - 4 ) 
[3918] c:3 is:( move 9 , 9 ; move 4 , 2 - 3 )  decode:( move 9 , 9 ; move 4 , 2 - 3 ) 
[3919] c:0 is:loop 0 , 7 , move 3 - v0 , v0  decode:loop 0 , 4 , move 3 , 3 * v0 
[3920] c:3 is:loop 0 , 2 , move 0 - 2 , ua / 4  decode:loop 0 , 2 , move 0 - 2 , ua / 4 
[3921] c:0 is:loop 0 , 5 , move v0 , v0 / 3  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[3922] c:0 is:( move 3 , 0 ; move ua + 2 , 2 )  decode:( move 3 , 0 ; move 8 , 2 ) 
[3923] c:0 is:loop 0 , 4 , move 0 - 3 , 2 / ua  decode:loop 0 , 4 , move 3 - ua , 2 / ua 
[3924] c:3 is:loop 0 , 2 , move 0 - ua , 0 - 9  decode:loop 0 , 2 , move 0 - ua , 0 - 9 
[3925] c:0 is:loop 0 , 5 , move v0 , v0 / 4  decode:loop 0 , 4 , move v0 + ul , 4 / 3 
[3926] c:0 is:loop 0 , 2 , move 2 - ua , 2 / 3  decode:loop 0 , 3 , move 3 - ua , 2 / 3 
[3927] c:0 is:loop 0 , 4 , move 3 , 0 - 2 / ua  decode:0 0 loop 0 , 3 , move 4 , 3 * 3 
[3928] c:0 is:loop 0 , 6 , move 4 , v0 * v0  decode:loop 0 , 4 , move 3 + 4 , v0 + ua 
[3929] c:0 is:loop 0 , 7 , move v0 / 2 , v0  decode:( move 4 , 4 * 3 ; move 5 , 9 ) 
[3930] c:3 is:loop 0 , 4 , move ua - 2 , 0 - 5  decode:loop 0 , 4 , move ua - 2 , 0 - 5 
[3931] c:0 is:loop 0 , 7 , move v0 , v0 / 2  decode:loop 0 , 4 , move ua - 2 , 0 - 9 
[3932] c:3 is:loop 0 , 2 , move 0 - ua , 4 * 4  decode:loop 0 , 2 , move 0 - ua , 4 * 4 
[3933] c:0 is:loop 0 , 3 , move 3 - ua , 2 - 3  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[3934] c:0 is:( move ua , 0 ; move 0 - 4 , 2 )  decode:( move ua , 0 ; move 4 , 2 ) 
[3935] c:0 is:( move 4 , 3 ; move 4 , 9 + 9 )  decode:( move 4 , 2 - 3 ; move 4 , ul ) 
[3936] c:3 is:( move 3 , 0 ; move ua , 0 - 3 )  decode:( move 3 , 0 ; move ua , 0 - 3 ) 
[3937] c:3 is:( move ua , 0 ; move 4 , 0 - 2 )  decode:( move ua , 0 ; move 4 , 0 - 2 ) 
[3938] c:0 is:loop 0 , 2 , move ua - 2 , 2 / 3  decode:( move 4 , 7 ; move 4 , 7 ) 
[3939] c:0 is:( move 0 - 2 , 0 ; move 3 , ul )  decode:( move 2 , 0 - 2 ; move 3 , 4 ) 
[3940] c:3 is:( move ua + 2 , 0 ; move 3 , 2 )  decode:( move ua + 2 , 0 ; move 3 , 2 ) 
[3941] c:0 is:loop 0 , 7 , move v0 - 4 , v0  decode:loop 0 , 4 , move 0 - 3 , v0 0 
[3942] c:0 is:loop 0 , 3 , move 0 - 2 , 4 / ua  decode:loop 0 , 3 , move 2 - 4 , 2 / 4 
[3943] c:3 is:loop 0 , 4 , move 0 - ua , 3 / 2  decode:loop 0 , 4 , move 0 - ua , 3 / 2 
[3944] c:0 is:loop 0 , 3 , move 0 - 3 , 3 / ua  decode:loop 0 , 3 , move 0 - 3 , ua / ua 
[3945] c:3 is:loop 0 , 4 , move 3 - ua , 0 - 4  decode:loop 0 , 4 , move 3 - ua , 0 - 4 
[3946] c:0 is:loop 0 , 7 , move 4 - v0 , v0  decode:loop 0 , 3 , move 3 + v0 , 3 * 3 
[3947] c:0 is:loop 0 , 4 , move ua - 2 , 2 - 3  decode:0 2 loop 0 , 4 , move 4 , 2 - 4 
[3948] c:0 is:( move 4 , 9 ; move 4 , 7 * 3 )  decode:( move 4 , ua * ua ; move 4 , ul ) 
[3949] c:0 is:( move 0 - 4 , 0 ; move ua , 2 )  decode:( move 4 , 0 ; move ua , 2 ) 
[3950] c:3 is:loop 0 , 3 , move 3 - ua , 0 - 5  decode:loop 0 , 3 , move 3 - ua , 0 - 5 
[3951] c:0 is:( move 0 - 3 , 0 ; move 2 , ul )  decode:( move 3 , 0 ; move 2 , 4 ) 
[3952] c:3 is:loop 0 , 4 , move 2 - ua , 2 - 3  decode:loop 0 , 4 , move 2 - ua , 2 - 3 
[3953] c:0 is:loop 0 , 2 , move 2 - ua , 3 / 2  decode:loop 0 , 2 , move 2 - ua , 3 / 4 
[3954] c:0 is:( move 4 , 0 ; move ua , 0 - 2 )  decode:( move 3 , 0 ; move ua , 0 - 2 ) 
[3955] c:0 is:loop 0 , 3 , move ua - 3 , 0 - 5  decode:loop 0 , 3 , move ua - 3 , 4 / 5 
[3956] c:3 is:( move 0 - ua , 0 ; move 4 , 2 )  decode:( move 0 - ua , 0 ; move 4 , 2 ) 
[3957] c:0 is:loop 0 , 3 , move ua - 3 , 2 - 3  decode:loop 0 , 3 , move 3 - ua , 2 - 3 
[3958] c:0 is:( move 4 , 0 ; move 0 - ua , 2 )  decode:( move 4 , 0 ; move 6 , 5 ) 
[3959] c:0 is:loop 0 , 6 , move v0 , v0 / 3  decode:loop 0 , 4 , move 4 , ua / v0 / 2 
[3960] c:3 is:loop 0 , 3 , move 0 - ua , 0 - 8  decode:loop 0 , 3 , move 0 - ua , 0 - 8 
[3961] c:0 is:loop 0 , 5 , move v0 , 4 / v0  decode:( move 5 , 5 ; move 4 , ul ) 
[3962] c:3 is:loop 0 , 4 , move 2 - ua , 0 - 5  decode:loop 0 , 4 , move 2 - ua , 0 - 5 
[3963] c:0 is:loop 0 , 6 , move v0 , 4 * v0  decode:loop 0 , 4 , move 0 - 4 , 3 3 / 3 
[3964] c:0 is:( move ua , 2 ; move 0 - 2 , 3 )  decode:( move ua , 2 ; move 2 , 2 + 4 ) 
[3965] c:0 is:( move 0 - 3 , 0 ; move 3 , ul )  decode:( move 3 , 0 ; move 3 , 4 * 3 ) 
[3966] c:0 is:( move 2 - 3 , 0 ; move ua , 2 )  decode:( move ul , 0 - 0 ; move ua , 2 ) 
[3967] c:0 is:( move ua , 2 ; move 3 , 0 - 2 )  decode:( move 3 , 0 ; move ua , 2 ) 
[3968] c:2 is:loop 0 , 3 , move 0 - 4 , ua / 3  decode:0 0 loop 0 , 3 , move 4 , ua / 3 
[3969] c:0 is:( move 0 - 3 , 2 ; move ua , 2 )  decode:( move 3 , 2 ; move ua , 5 ) 
[3970] c:3 is:( move ua + 2 , 0 ; move 2 , 4 )  decode:( move ua + 2 , 0 ; move 2 , 4 ) 
[3971] c:0 is:loop 0 , 6 , move v0 , v0 / 4  decode:loop 0 , 3 , move 4 , 0 - 5 
[3972] c:0 is:loop 0 , 7 , move 4 , v0 * v0  decode:loop 0 , 4 , move ua , v0 + ua 
[3973] c:0 is:loop 0 , 3 , move ua - 2 , 3 / 2  decode:loop 0 , 3 , move 4 , 3 / 2 
[3974] c:0 is:( move ua + 2 , 2 ; move 2 , 2 )  decode:( move 8 , 2 ; move 3 , 2 ) 
[3975] c:1 is:loop 0 , 4 , move 3 - ua , 2 - 3  decode:loop 0 , 4 , move 3 - ua , 2 - 3 
[3976] c:0 is:( move 2 , 3 ; move ua , 0 - 2 )  decode:( move ua , 0 - 2 ; move 2 , 4 ) 
[3977] c:0 is:( move 3 , 9 ; move 9 , 2 * 5 )  decode:( move 3 , 9 ; move 9 , 5 * 2 ) 
[3978] c:3 is:loop 0 , 4 , move 0 - ua , 0 - 8  decode:loop 0 , 4 , move 0 - ua , 0 - 8 
[3979] c:3 is:loop 0 , 4 , move 3 - ua , 0 - 5  decode:loop 0 , 4 , move 3 - ua , 0 - 5 
[3980] c:3 is:( move ua , 0 ; move 3 , 0 - 4 )  decode:( move ua , 0 ; move 3 , 0 - 4 ) 
[3981] c:0 is:loop 0 , 3 , move 0 - ua , 4 * 4  decode:loop 0 , 3 , move v0 + 4 , 4 * 4 
[3982] c:3 is:( move ua + 2 , 0 ; move 4 , 2 )  decode:( move ua + 2 , 0 ; move 4 , 2 ) 
[3983] c:0 is:loop 0 , 3 , move 4 - ua , 2 - 3  decode:loop 0 , 3 , move 0 - 2 , 4 / 3 
[3984] c:3 is:loop 0 , 2 , move 0 - 4 , 4 / ua  decode:loop 0 , 2 , move 0 - 4 , 4 / ua 
[3985] c:0 is:( move 9 , 2 / 6 ; move 6 , 4 )  decode:( move 9 , 2 / 6 ; move ua , 4 ) 
[3986] c:1 is:loop 0 , 4 , move ua - 3 , 0 - 5  decode:loop 0 , 4 , move ua - 3 , ua / 5 
[3987] c:3 is:( move 5 , 0 ; move ua , 0 - 2 )  decode:( move 5 , 0 ; move ua , 0 - 2 ) 
[3988] c:3 is:( move 0 - ua , 0 ; move 5 , 2 )  decode:( move 0 - ua , 0 ; move 5 , 2 ) 
[3989] c:0 is:loop 0 , 7 , move v0 , v0 / 3  decode:loop 0 , 4 , move 5 , ua / 4 
[3990] c:0 is:( move 9 , 9 + 4 ; move 4 , 4 )  decode:( move 9 , ua + 4 ; move 4 , 4 ) 
[3991] c:0 is:( move 9 , 4 - 9 ; move 3 , 4 )  decode:( move 3 , 9 ; move 9 , 4 ) 
[3992] c:0 is:( move 4 - 9 , 9 ; move 3 , 4 )  decode:( move ul - ua , 9 ; move 3 , 4 ) 
[3993] c:0 is:( move ua , 0 ; move 5 , 0 - 2 )  decode:( move ua , ul / 4 ; move 5 , 2 ) 
[3994] c:0 is:loop 0 , 3 , move 0 - 3 , 4 / ua  decode:loop 0 , 3 , move 0 - 3 , 2 / 4 
[3995] c:0 is:( move 9 , 2 * 9 ; move 4 , 4 )  decode:( move 9 , 0 * 2 ; move 4 , 4 ) 
[3996] c:3 is:loop 0 , 3 , move 2 - ua , 3 / 2  decode:loop 0 , 3 , move 2 - ua , 3 / 2 
[3997] c:0 is:( move 9 , 4 * 9 ; move 4 , 2 )  decode:( move 9 , ul * 9 ; move 4 , 2 ) 
[3998] c:0 is:loop 0 , 3 , move ua , 4 * 0 - 4  decode:loop 0 , 3 , move ua , 4 * 4 
[3999] c:3 is:( move ua , 0 - 2 ; move 3 , 2 )  decode:( move ua , 0 - 2 ; move 3 , 2 ) 
[4000] c:3 is:( move 0 - ua , 0 ; move 3 , 4 )  decode:( move 0 - ua , 0 ; move 3 , 4 ) 
[4001] c:0 is:loop 0 , 2 , move 3 - ua , 3 / 2  decode:( move 3 , 3 ; move 4 , 8 ) 
[4002] c:0 is:( move ua , 0 ; move 2 , 2 - 3 )  decode:( move 2 , 0 ; move ua , ul ) 
[4003] c:0 is:loop 0 , 2 , move 4 , 0 - ua / 4  decode:0 loop 0 , 2 , move 4 , 4 + 4 4 
[4004] c:0 is:loop 0 , 7 , move v0 / 3 , v0  decode:( move 3 , 9 + 4 ; move 3 , 4 ) 
[4005] c:0 is:( move 5 , 0 ; move 0 - ua , 2 )  decode:( move 5 , 0 ; move ua , 2 / 3 ) 
[4006] c:3 is:loop 0 , 2 , move 0 - 4 , ua / 4  decode:loop 0 , 2 , move 0 - 4 , ua / 4 
[4007] c:0 is:( move 3 , 2 ; move ua , 0 - 2 )  decode:( move 0 - ua , 0 ; move 3 , 2 ) 
[4008] c:0 is:loop 0 , 4 , move 0 - ua , 2 * 5  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[4009] c:0 is:( move 4 , 0 ; move ua + 2 , 2 )  decode:( move 4 , 0 ; move 9 , 2 ) 
[4010] c:0 is:( move ua , 0 ; move 4 , 0 - 3 )  decode:( move 0 - ua , 0 ; move ua , 3 ) 
[4011] c:3 is:( move 2 , 0 ; move ua , 2 - 3 )  decode:( move 2 , 0 ; move ua , 2 - 3 ) 
[4012] c:3 is:loop 0 , 3 , move 0 - ua , 0 - 9  decode:loop 0 , 3 , move 0 - ua , 0 - 9 
[4013] c:3 is:( move ua , 0 - 3 ; move 2 , 2 )  decode:( move ua , 0 - 3 ; move 2 , 2 ) 
[4014] c:0 is:loop 0 , 2 , move 2 - ua , 3 * 4  decode:( move 4 , 5 ; move 4 , 4 / 2 ) 
[4015] c:0 is:( move 3 , 0 ; move 2 - ua , 2 )  decode:( move 3 , 0 ; move 4 , 5 ) 
[4016] c:3 is:( move ua + 2 , 2 ; move 3 , 2 )  decode:( move ua + 2 , 2 ; move 3 , 2 ) 
[4017] c:0 is:( move ua , 0 - 2 ; move 4 , 2 )  decode:( move 3 , 0 - 2 ; move 4 , 2 ) 
[4018] c:3 is:( move 3 , 0 - 3 ; move ua , 2 )  decode:( move 3 , 0 - 3 ; move ua , 2 ) 
[4019] c:3 is:( move 0 - ua , 2 ; move 2 , 4 )  decode:( move 0 - ua , 2 ; move 2 , 4 ) 
[4020] c:0 is:loop 0 , 2 , move 3 - ua , 4 * 3  decode:( move 3 , 5 ; move 4 , 4 / ua ) 
[4021] c:3 is:( move ua + 2 , 0 ; move 2 , 5 )  decode:( move ua + 2 , 0 ; move 2 , 5 ) 
[4022] c:0 is:( move 4 , 0 - 2 ; move ua , 2 )  decode:( move 0 - ua , 0 ; move ua , 2 ) 
[4023] c:3 is:( move ua + 2 , 0 ; move 2 , 5 )  decode:( move ua + 2 , 0 ; move 2 , 5 ) 
[4024] c:0 is:loop 0 , 4 , move 4 - ua , 2 - 3  decode:loop 0 , 4 , move v0 - 4 , 2 - 3 
[4025] c:0 is:loop 0 , 3 , move 3 + 2 , ua / 4  decode:loop 0 , 3 , move ul - ua , ua / 4 
[4026] c:0 is:loop 0 , 2 , move 2 - ua , 3 / 4  decode:( move 5 , 4 ; move 4 , 7 ) 
[4027] c:3 is:( move 2 , 0 - 2 ; move 3 , ul )  decode:( move 2 , 0 - 2 ; move 3 , ul ) 
[4028] c:0 is:( move 5 , 0 ; move ua + 2 , 2 )  decode:( move 5 , 0 ; move 8 , 2 ) 
[4029] c:0 is:( move ua , 3 ; move 3 , 0 - 2 )  decode:( move 3 , 2 ; move ua , 0 - 2 ) 
[4030] c:0 is:( move 3 , 0 ; move 0 - ua , 5 )  decode:( move 3 , 0 ; move ua , 5 / 4 ) 
[4031] c:3 is:( move ua + 2 , 0 ; move 5 , 2 )  decode:( move ua + 2 , 0 ; move 5 , 2 ) 
[4032] c:0 is:( move 4 , 0 ; move 0 - ua , 4 )  decode:( move 4 , 0 ; move ua , ul ) 
[4033] c:0 is:( move 2 , 2 ; move 0 - 3 , ul )  decode:( move 2 , 2 ; move 3 , 4 ) 
[4034] c:0 is:( move 0 - 3 , 2 ; move ua , 3 )  decode:( move 0 - 4 , 2 ; move ua , 3 ) 
[4035] c:3 is:loop 0 , 4 , move ua , 0 - 4 * 4  decode:loop 0 , 4 , move ua , 0 - 4 * 4 
[4036] c:0 is:( move 4 , 2 ; move 0 - ua , 2 )  decode:( move 4 , 2 ; move ua , 5 ) 
[4037] c:3 is:loop 0 , 3 , move ua - 3 , 3 / 2  decode:loop 0 , 3 , move ua - 3 , 3 / 2 
[4038] c:3 is:( move ua , 0 - 3 ; move 3 , 2 )  decode:( move ua , 0 - 3 ; move 3 , 2 ) 
[4039] c:0 is:loop 0 , 4 , move 0 - ua , 0 - 9  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[4040] c:3 is:( move ua + 2 , 0 ; move 3 , 4 )  decode:( move ua + 2 , 0 ; move 3 , 4 ) 
[4041] c:0 is:loop 0 , 3 , move ua - 3 , 2 / 3  decode:loop 0 , 3 , move 3 - ua , 2 / 3 
[4042] c:0 is:loop 0 , 4 , move 4 - ua , 0 - 5  decode:loop 0 , 4 , move ua - 4 , ua / 4 
[4043] c:0 is:( move 4 , 2 ; move ua , 0 - 2 )  decode:( move ul - ua , 0 ; move 4 , 2 ) 
[4044] c:0 is:loop 0 , 4 , move 0 - ua , 4 * 4  decode:loop 0 , 4 , move v0 - ua , 4 * 4 
[4045] c:3 is:loop 0 , 3 , move ua + 2 , 0 - 9  decode:loop 0 , 3 , move ua + 2 , 0 - 9 
[4046] c:0 is:( move 0 - 3 , 0 ; move ul , 4 )  decode:( move 3 , 0 ; move ul , ul ) 
[4047] c:0 is:( move ua , 0 ; move 2 - 3 , 3 )  decode:move 0 ua 0 , 0 
[4048] c:0 is:loop 0 , 2 , move 4 + 2 , ua / 4  decode:loop 0 , 3 , move 4 + v0 , ua / 4 
[4049] c:0 is:( move ua , 2 ; move 4 , 0 - 2 )  decode:( move 4 , 2 ; move ua , 0 - 2 ) 
[4050] c:0 is:( move ua , 0 ; move 0 - 4 , 4 )  decode:( move ua , 0 ; move 4 , ul ) 
[4051] c:0 is:loop 0 , 7 , move v0 , v0 / 4  decode:loop 0 , 4 , move 4 , 4 * 0 - 4 
[4052] c:0 is:loop 0 , 2 , move 2 - ua , 2 / 5  decode:( move 4 , 7 ; move 4 , 4 + 2 ) 
[4053] c:0 is:loop 0 , 7 , move 4 / v0 , v0  decode:loop 0 , 3 , move 4 , v0 
[4054] c:3 is:( move ua + 2 , 3 ; move 2 , 2 )  decode:( move ua + 2 , 3 ; move 2 , 2 ) 
[4055] c:0 is:( move 0 - ua , 2 ; move 4 , 2 )  decode:( move 0 - ua , 2 ; move ua , 2 ) 
[4056] c:0 is:( move 2 , 2 ; move 0 - ua , 4 )  decode:( move 2 , 2 ; move ua , ul ) 
[4057] c:0 is:( move 4 , 0 ; move ua + 3 , 2 )  decode:( move 4 , 0 ; move 3 + ua , 2 ) 
[4058] c:3 is:( move ua , 0 - 2 ; move 2 , 4 )  decode:( move ua , 0 - 2 ; move 2 , 4 ) 
[4059] c:0 is:loop 0 , 3 , move 0 - 3 , ua / 5  decode:loop 0 , 3 , move 0 - 3 , 0 - 5 
[4060] c:0 is:( move ua , 0 ; move 3 , 2 - 3 )  decode:( move 3 , 0 ; move ua , ul ) 
[4061] c:0 is:loop 0 , 3 , move ua , 7 * 0 - 2  decode:loop 0 , 3 , move ua , 0 - 0 - 8 
[4062] c:0 is:loop 0 , 3 , move 3 - ua , 3 / 2  decode:loop 0 , 4 , move 4 - ua , 3 / 2 
[4063] c:0 is:( move 3 , 0 ; move ua , 2 - 3 )  decode:( move 3 , 0 ; move d3 , 2 - 3 ) 
[4064] c:3 is:( move 2 , 0 - 2 ; move ua , 4 )  decode:( move 2 , 0 - 2 ; move ua , 4 ) 
[4065] c:0 is:loop 0 , 2 , move 2 - ua , 4 / 3  decode:( move 4 , 9 ; move 5 , 5 ) 
[4066] c:0 is:( move 0 - 2 , 2 ; move ua , 4 )  decode:( move 2 , 4 ; move ua , ul ) 
[4067] c:0 is:loop 0 , 3 , move ua - 3 , 2 / 3  decode:loop 0 , 3 , move 3 - ua , 2 / 3 
[4068] c:3 is:( move ua , 0 ; move 4 , 0 - 4 )  decode:( move ua , 0 ; move 4 , 0 - 4 ) 
[4069] c:0 is:( move ua , 3 ; move 0 - 2 , 3 )  decode:( move ua , 3 ; move 2 , 2 - 3 ) 
[4070] c:0 is:( move 0 - 3 , 0 ; move 4 , ul )  decode:( move 3 , 0 ; move 4 , ua / 3 ) 
[4071] c:3 is:loop 0 , 3 , move 3 - ua , 2 / 3  decode:loop 0 , 3 , move 3 - ua , 2 / 3 
[4072] c:3 is:loop 0 , 4 , move 2 - ua , 3 / 2  decode:loop 0 , 4 , move 2 - ua , 3 / 2 
[4073] c:0 is:( move ua , 2 ; move 0 - 4 , 2 )  decode:( move ua , 2 ; move 4 , 2 - 3 ) 
[4074] c:0 is:loop 0 , 4 , move ua - 2 , 3 / 2  decode:loop 0 , 4 , move 4 , 3 / 2 
[4075] c:1 is:( move 0 - 4 , 0 ; move 3 , ul )  decode:( move 0 - 4 , 0 ; move 3 , ul ) 
[4076] c:3 is:( move 0 - ua , 0 ; move 4 , 4 )  decode:( move 0 - ua , 0 ; move 4 , 4 ) 
[4077] c:0 is:( move ua , 0 ; move 7 , 0 - 2 )  decode:( move ua , 0 ; move 7 , 2 - 3 ) 
[4078] c:3 is:( move ua , 0 - 3 ; move 4 , 2 )  decode:( move ua , 0 - 3 ; move 4 , 2 ) 
[4079] c:3 is:loop 0 , 4 , move ua - 2 , 0 - 8  decode:loop 0 , 4 , move ua - 2 , 0 - 8 
[4080] c:0 is:loop 0 , 4 , move ua - 4 * 3 , 2  decode:loop 0 , 4 , move ul - ua , 2 
[4081] c:0 is:( move ua , 0 - 2 ; move 3 , 4 )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[4082] c:3 is:( move 3 , 0 ; move ua + 2 , 5 )  decode:( move 3 , 0 ; move ua + 2 , 5 ) 
[4083] c:3 is:loop 0 , 3 , move 2 - ua , 4 * 4  decode:loop 0 , 3 , move 2 - ua , 4 * 4 
[4084] c:3 is:( move 3 - ua , 0 ; move 4 , 2 )  decode:( move 3 - ua , 0 ; move 4 , 2 ) 
[4085] c:0 is:( move ua , 2 ; move 3 , 0 - 4 )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[4086] c:3 is:loop 0 , 4 , move v0 , v0 * 9  decode:loop 0 , 4 , move v0 , v0 * 9 
[4087] c:0 is:( move ua , 4 ; move 3 , 0 - 2 )  decode:( move 3 , 2 ; move ua , 2 ) 
[4088] c:0 is:( move ua , 2 ; move 5 , 0 - 2 )  decode:( move 5 , 2 ; move ua , 0 - 2 ) 
[4089] c:3 is:( move 0 - ua , 0 ; move 4 , 5 )  decode:( move 0 - ua , 0 ; move 4 , 5 ) 
[4090] c:0 is:( move ua , 0 ; move 3 / 2 , 2 )  decode:( move ua , ul ; move 2 , 0 - 2 ) 
[4091] c:0 is:loop 0 , 4 , move ua - 3 , 3 / 2  decode:0 loop 0 , 4 , move 3 , 3 / 2 
[4092] c:3 is:( move 5 , 0 ; move ua + 3 , 2 )  decode:( move 5 , 0 ; move ua + 3 , 2 ) 
[4093] c:3 is:( move 3 , 2 ; move ua , 0 - 4 )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[4094] c:3 is:( move 3 , 0 - 2 ; move ua , 4 )  decode:( move 3 , 0 - 2 ; move ua , 4 ) 
[4095] c:0 is:( move 4 , 3 ; move 0 - ua , 2 )  decode:( move 4 , 3 ; move ua , 5 ) 
[4096] c:0 is:loop 0 , 2 , move ua - 3 * 4 , 4  decode:loop 0 , 2 , move v0 - ua , 4 
[4097] c:0 is:( move 0 - 3 , 2 ; move 3 , ul )  decode:( move 3 , 0 ; move 3 , 0 - 4 ) 
[4098] c:0 is:( move 4 , 3 ; move ua , 0 - 2 )  decode:( move 0 - ua , ul ; move 4 , 2 ) 
[4099] c:3 is:( move 3 , 0 - 4 ; move ua , 2 )  decode:( move 3 , 0 - 4 ; move ua , 2 ) 
[4100] c:3 is:( move 2 , 0 - 2 ; move 4 , ul )  decode:( move 2 , 0 - 2 ; move 4 , ul ) 
[4101] c:0 is:loop 0 , 2 , move 3 - ua , 2 + 8  decode:( move 3 , 2 / 4 ; move 4 , 9 ) 
[4102] c:0 is:loop 0 , 3 , move 2 - ua , 4 / 3  decode:loop 0 , 3 , move 2 - ua , 0 - 3 
[4103] c:3 is:( move ua + 2 , 2 ; move 4 , 2 )  decode:( move ua + 2 , 2 ; move 4 , 2 ) 
[4104] c:3 is:( move 0 - ua , 3 ; move 4 , 2 )  decode:( move 0 - ua , 3 ; move 4 , 2 ) 
[4105] c:3 is:( move ua , 0 - 4 ; move 3 , 2 )  decode:( move ua , 0 - 4 ; move 3 , 2 ) 
[4106] c:3 is:( move 3 , 9 + 9 ; move 9 , 2 )  decode:( move 3 , 9 + 9 ; move 9 , 2 ) 
[4107] c:0 is:( move 5 , 2 ; move ua , 0 - 2 )  decode:( move ua , 0 ; move ul - ua , 2 ) 
[4108] c:0 is:( move 3 , 2 ; move 0 - ua , 4 )  decode:( move 3 , 2 ; move ua , ul ) 
[4109] c:0 is:loop 0 , 3 , move ua - 2 , 4 / 3  decode:loop 0 , 3 , move ua - 2 , 0 - 4 0 3 / 
[4110] c:0 is:loop 0 , 4 , move ua + 2 , 3 * 5  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[4111] c:0 is:loop 0 , 4 , move ua + 2 , 0 - 9  decode:loop 0 , 4 , move v0 + ua , 0 - 9 
[4112] c:3 is:( move ua + 2 , 4 ; move 2 , 2 )  decode:( move ua + 2 , 4 ; move 2 , 2 ) 
[4113] c:3 is:loop 0 , 3 , move ua + 3 , 4 * 4  decode:loop 0 , 3 , move ua + 3 , 4 * 4 
[4114] c:3 is:loop 0 , 2 , move 4 + 3 , ua / 4  decode:loop 0 , 2 , move 4 + 3 , ua / 4 
[4115] c:0 is:( move 0 - 3 , 2 ; move ua , 4 )  decode:( move 3 , 4 ; move ua , ul ) 
[4116] c:3 is:loop 0 , 3 , move 3 - ua , 2 * 5  decode:loop 0 , 3 , move 3 - ua , 2 * 5 
[4117] c:0 is:( move 3 , 2 ; move 3 + ua , 2 )  decode:( move 3 , 2 ; move ua + 3 , 2 ) 
[4118] c:0 is:( move ua , 2 ; move 0 - 3 , 4 )  decode:( move ua , 2 ; move 3 , ul ) 
[4119] c:0 is:( move ua , 3 ; move 0 - 4 , 2 )  decode:( move ua , 3 ; move 4 , 2 ) 
[4120] c:3 is:loop 0 , 3 , move 3 - ua , 3 * 4  decode:loop 0 , 3 , move 3 - ua , 3 * 4 
[4121] c:3 is:( move 2 , 4 ; move ua + 2 , 2 )  decode:( move 2 , 4 ; move ua + 2 , 2 ) 
[4122] c:0 is:( move 5 , 0 ; move 2 - ua , 2 )  decode:( move 4 , 0 ; move 5 , 5 ) 
[4123] c:3 is:( move 2 , 0 ; move ua + 3 , 5 )  decode:( move 2 , 0 ; move ua + 3 , 5 ) 
[4124] c:0 is:loop 0 , 3 , move ua - 3 , 3 * 4  decode:loop 0 , 3 , move 3 - ua , 3 * 4 
[4125] c:0 is:( move 6 , 0 ; move ua + 2 , 2 )  decode:( move ua , 0 ; move 9 , 2 ) 
[4126] c:0 is:( move 4 , 0 ; move 0 - 4 , ul )  decode:( move 4 , 0 ; move 4 , ua / 3 ) 
[4127] c:1 is:( move 2 - ua , 0 ; move 3 , 4 )  decode:( move 2 - ua , 0 ; move 3 , 4 ) 
[4128] c:0 is:loop 0 , 4 , move v0 , 8 / v0  decode:loop 0 , 4 , move v0 , 0 - 9 
[4129] c:3 is:( move 4 , 0 - 3 ; move ua , 2 )  decode:( move 4 , 0 - 3 ; move ua , 2 ) 
[4130] c:3 is:( move 2 , 0 - 3 ; move 3 , ul )  decode:( move 2 , 0 - 3 ; move 3 , ul ) 
[4131] c:3 is:( move ua , 0 ; move 5 , 0 - 4 )  decode:( move ua , 0 ; move 5 , 0 - 4 ) 
[4132] c:3 is:loop 0 , 4 , move 3 - ua , 3 / 2  decode:loop 0 , 4 , move 3 - ua , 3 / 2 
[4133] c:3 is:( move 0 - ua , 2 ; move 3 , 4 )  decode:( move 0 - ua , 2 ; move 3 , 4 ) 
[4134] c:0 is:( move 4 , 0 ; move ua , 2 - 3 )  decode:( move 3 , 0 ; move ua , 2 - 3 ) 
[4135] c:0 is:( move 2 - 3 , 2 ; move ua , 2 )  decode:( move ua , 4 ; move ul , 2 ) 
[4136] c:0 is:( move 2 , 2 ; move 4 + ua , 2 )  decode:( move 2 , 2 ; move ua + 4 , 2 ) 
[4137] c:0 is:loop 0 , 3 , move 2 - ua , 5 * 3  decode:loop 0 , 3 , move 2 - ua , 0 - 9 
[4138] c:0 is:loop 0 , 6 , move 0 - 4 , ul - 3  decode:loop 0 , 4 , move 5 , 0 - 4 
[4139] c:0 is:loop 0 , 4 , move 2 - ua , 2 * 5  decode:loop 0 , 4 , move 0 - 4 , 0 - 5 0 
[4140] c:0 is:( move 4 , 2 ; move 2 + ua , 2 )  decode:( move 4 , 2 ; move  4 , 4 + v) 0 
[4141] c:0 is:( move ua , 0 - 2 ; move 4 , 3 )  decode:( move 4 , 0 - 2 ; move ua , 3 ) 
[4142] c:0 is:( move ua , 3 ; move 4 , 0 - 2 )  decode:( move - ua - - 3 ; move ua , 2 ) 
[4143] c:0 is:( move 3 , 3 ; move ua + 2 , 2 )  decode:( move 3 , 3 ; move 2 + ua , 2 ) 
[4144] c:3 is:loop 0 , 4 , move v0 * v0 , 9  decode:loop 0 , 4 , move v0 * v0 , 9 
[4145] c:0 is:( move 0 - 4 , 0 ; move ua , 5 )  decode:( move 4 , 0 ; move ua , 5 / 3 ) 
[4146] c:0 is:loop 0 , 3 , move 3 - ua , 0 - 8  decode:loop 0 , 3 , move 3 - ua , 3 * 8 
[4147] c:0 is:( move 3 , 2 ; move 0 - ua , 4 )  decode:( move 3 , 2 ; move ua , ul ) 
[4148] c:0 is:( move ua , 0 ; move 2 , 3 / 2 )  decode:( move ua , 0 ; move 2 , 8 ) 
[4149] c:0 is:( move 4 , 0 ; move ua + 2 , 4 )  decode:( move 4 , 0 ; move 9 , 4 ) 
[4150] c:2 is:loop 0 , 3 , move 2 - ua , 2 / 5  decode:loop 0 , 3 , move 2 - ua , 2 / 5 
[4151] c:1 is:( move 2 - ua , 0 ; move 3 , 4 )  decode:( move 2 - ua , 0 ; move 3 , 4 ) 
[4152] c:0 is:loop 0 , 3 , move 3 + 4 , ua / 3  decode:loop 0 , 3 , move v0 + ua , ua / 3 
[4153] c:3 is:( move ua , 0 - 2 ; move 5 , 2 )  decode:( move ua , 0 - 2 ; move 5 , 2 ) 
[4154] c:3 is:( move ua , 2 - 3 ; move 2 , 2 )  decode:( move ua , 2 - 3 ; move 2 , 2 ) 
[4155] c:0 is:( move 5 , 0 - 2 ; move ua , 2 )  decode:( move ua , 0 - 2 ; move ua , 2 ) 
[4156] c:0 is:loop 0 , 3 , move 0 - 4 , ua / 5  decode:loop 0 , 3 , move 0 - 4 , 0 - 5 
[4157] c:3 is:( move ua + 3 , 2 ; move 3 , 2 )  decode:( move ua + 3 , 2 ; move 3 , 2 ) 
[4158] c:0 is:loop 0 , 4 , move ua + 2 , 7 + 3  decode:loop 0 , 4 , move ua + 2 , 0 - + + 2 
[4159] c:0 is:( move ua + 2 , 0 ; move 5 , 3 )  decode:( move ua + 3 , 0 ; move 5 , 3 ) 
[4160] c:0 is:( move ua , 2 ; move 2 , 2 - 3 )  decode:( move 2 , 0 - 2 ; move ua , ul ) 
[4161] c:0 is:loop 0 , 3 , move 3 + 3 , ua / 4  decode:loop 0 , 3 , move 4 + v0 , ua / 4 
[4162] c:3 is:( move ua + 2 , 0 ; move 4 , 4 )  decode:( move ua + 2 , 0 ; move 4 , 4 ) 
[4163] c:0 is:( move 0 - ua , 3 ; move 2 , 4 )  decode:( move ua , 6 ; move 4 , 4 / ua ) 
[4164] c:3 is:loop 0 , 3 , move ua - 3 , 2 / 4  decode:loop 0 , 3 , move ua - 3 , 2 / 4 
[4165] c:0 is:( move ua , 0 ; move 4 , 2 - 3 )  decode:( move 4 , 0 ; move ua , ul ) 
[4166] c:3 is:( move 0 - ua , 2 ; move 4 , 4 )  decode:( move 0 - ua , 2 ; move 4 , 4 ) 
[4167] c:3 is:( move 3 , 3 ; move ua + 3 , 2 )  decode:( move 3 , 3 ; move ua + 3 , 2 ) 
[4168] c:0 is:( move 4 , 3 ; move ua + 2 , 2 )  decode:( move 4 , 3 ; move 2 + ua , 2 ) 
[4169] c:0 is:( move 0 - ua , 0 ; move 5 , 5 )  decode:( move ul - ua , 0 ; move 5 , 5 ) 
[4170] c:3 is:loop 0 , 4 , move 3 - ua , 2 * 5  decode:loop 0 , 4 , move 3 - ua , 2 * 5 
[4171] c:0 is:( move 6 , 0 ; move ua + 3 , 2 )  decode:( move ua , 0 ; move ua + 3 , 2 ) 
[4172] c:0 is:( move 2 , 4 ; move 2 - ua , 2 )  decode:( move 2 , 4 ; move ua - ul , 2 ) 
[4173] c:0 is:loop 0 , 2 , move ua - 2 , 4 / 5  decode:( move 4 , 7 ; move 5 , 5 / 4 ) 
[4174] c:3 is:( move ua , 0 - 3 ; move 5 , 2 )  decode:( move ua , 0 - 3 ; move 5 , 2 ) 
[4175] c:0 is:( move 5 , 3 ; move 0 - ua , 2 )  decode:( move 2 - ua , ul ; move ua , 2 ) 
[4176] c:3 is:loop 0 , 4 , move ua - 4 , 3 / 2  decode:loop 0 , 4 , move ua - 4 , 3 / 2 
[4177] c:0 is:( move 3 , 0 ; move ua + 3 , 5 )  decode:( move 3 , 0 ; move 3 + ua , 5 ) 
[4178] c:0 is:( move 2 - ua , 2 ; move 4 , 2 )  decode:( move 4 , 2 ; move 4 , 2 ) 
[4179] c:3 is:loop 0 , 4 , move 2 - ua , 0 - 9  decode:loop 0 , 4 , move 2 - ua , 0 - 9 
[4180] c:3 is:( move 3 , 2 - 3 ; move ua , 2 )  decode:( move 3 , 2 - 3 ; move ua , 2 ) 
[4181] c:0 is:( move 4 , 0 - 2 ; move 3 , ul )  decode:( move 3 , 0 - 2 ; move 3 , ul ) 
[4182] c:3 is:loop 0 , 4 , move 3 + ua , 4 * 4  decode:loop 0 , 4 , move 3 + ua , 4 * 4 
[4183] c:3 is:( move 3 , 4 ; move ua + 2 , 2 )  decode:( move 3 , 4 ; move ua + 2 , 2 ) 
[4184] c:0 is:( move 4 , 4 ; move 0 - ua , 2 )  decode:( move 4 , 4 ; move 2 + 4 , 2 ) 
[4185] c:0 is:( move ua , 0 - 2 ; move 4 , 4 )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[4186] c:0 is:( move 3 - ua , 0 ; move 5 , 2 )  decode:( move 3 , 0 - 2 ; move 5 , 2 ) 
[4187] c:3 is:( move 4 , 0 - 4 ; move ua , 2 )  decode:( move 4 , 0 - 4 ; move ua , 2 ) 
[4188] c:3 is:( move ul , 0 ; move 4 , 2 - 3 )  decode:( move ul , 0 ; move 4 , 2 - 3 ) 
[4189] c:0 is:loop 0 , 4 , move 0 - 6 , ua / 3  decode:loop 0 , 3 , move ul - ua , ua / 3 
[4190] c:3 is:( move 5 , 0 - 3 ; move ua , 2 )  decode:( move 5 , 0 - 3 ; move ua , 2 ) 
[4191] c:0 is:( move ua , 4 ; move 4 , 0 - 2 )  decode:( move 4 , 2 ; move ua , 2 ) 
[4192] c:1 is:( move ua + 2 , 3 ; move 4 , 2 )  decode:( move ua + 2 , 3 ; move 4 , 2 ) 
[4193] c:3 is:( move 4 , 0 - 2 ; move ua , 4 )  decode:( move 4 , 0 - 2 ; move ua , 4 ) 
[4194] c:0 is:( move ua , 0 - 5 ; move 3 , 2 )  decode:( move ua , 0 - 4 ; move 3 , 2 ) 
[4195] c:0 is:( move 0 - ua , 2 ; move 3 , 5 )  decode:( move ua , 5 ; move 3 , ua * ua ) 
[4196] c:0 is:( move 0 - ua , 4 ; move 3 , 3 )  decode:( move ua , 4 ; move 3 , ul + 4 ) 
[4197] c:0 is:( move 4 , 0 ; move 4 - ua , 2 )  decode:( move 3 , 0 ; move 3 , 2 ) 
[4198] c:0 is:( move ua , 3 ; move 5 , 0 - 2 )  decode:( move ul - ua , ul ; move ua , 2 ) 
[4199] c:3 is:( move 3 , 0 - 2 ; move 4 , ul )  decode:( move 3 , 0 - 2 ; move 4 , ul ) 
[4200] c:3 is:( move ul , 0 - 2 ; move 3 , 4 )  decode:( move ul , 0 - 2 ; move 3 , 4 ) 
[4201] c:0 is:loop 0 , 4 , move 0 - 4 , ua / 5  decode:loop 0 , 4 , move 4 , 0 - 5 
[4202] c:3 is:( move 3 , 2 ; move ua + 2 , 4 )  decode:( move 3 , 2 ; move ua + 2 , 4 ) 
[4203] c:0 is:( move 4 , 4 ; move ua , 0 - 2 )  decode:( move 0 - ua , 2 ; move 4 , 2 ) 
[4204] c:0 is:( move 3 , 5 ; move ua , 0 - 2 )  decode:( move ua , 6 ; move 3 , 0 - 2 ) 
[4205] c:0 is:( move 4 * 2 , 0 ; move ua , 3 )  decode:( move ua + 2 , 0 ; move ua , 3 ) 
[4206] c:0 is:loop 0 , 6 , move 0 - 2 , ul / 4  decode:loop 0 , 4 , move 3 / 2 , 2 / ua 
[4207] c:0 is:loop 0 , 4 , move 4 - ua , 3 / 2  decode:loop 0 , 4 , move ua - 4 , 3 / 2 
[4208] c:3 is:( move 0 - ua , 3 ; move 5 , 2 )  decode:( move 0 - ua , 3 ; move 5 , 2 ) 
[4209] c:0 is:( move 2 , 4 ; move 0 - ua , 4 )  decode:( move 2 , 4 ; move ua , ul ) 
[4210] c:0 is:( move 3 , 2 ; move 4 + ua , 2 )  decode:( move 3 , 2 ; move ua + 4 , 2 ) 
[4211] c:0 is:loop 0 , 4 , move ua - 2 , 0 - 9  decode:loop 0 , 4 , move 2 - ua , 0 - 9 
[4212] c:3 is:( move 2 , 0 ; move ua , 2 / 4 )  decode:( move 2 , 0 ; move ua , 2 / 4 ) 
[4213] c:3 is:loop 0 , 3 , move 3 - ua , 3 / 4  decode:loop 0 , 3 , move 3 - ua , 3 / 4 
[4214] c:0 is:( move 3 , 3 ; move 0 - ua , 4 )  decode:( move 3 , 3 ; move ua , ul ) 
[4215] c:0 is:loop 0 , 3 , move ua - 4 , 3 * 4  decode:loop 0 , 3 , move 4 - ua , 4 * 3 
[4216] c:0 is:( move 0 - 3 , 2 ; move ua , 5 )  decode:( move 3 , 2 ; move ua , ua * ua ) 
[4217] c:3 is:( move 4 , 2 ; move ua , 0 - 4 )  decode:( move 4 , 2 ; move ua , 0 - 4 ) 
[4218] c:3 is:loop 0 , 4 , move 2 - ua , 4 / 3  decode:loop 0 , 4 , move 2 - ua , 4 / 3 
[4219] c:0 is:loop 0 , 4 , move 2 - ua , 4 * 4  decode:loop 0 , 4 , move 4 , 4 * 4 
[4220] c:0 is:( move 5 , 0 ; move 0 - ua , 5 )  decode:( move 5 , 0 ; move ua , ua * ua ) 
[4221] c:0 is:( move 0 - 4 , 4 ; move ua , 2 )  decode:( move 4 , 7 ; move ua , 5 ) 
[4222] c:0 is:loop 0 , 4 , move ua - 3 , 0 - 8  decode:loop 0 , 4 , move ua - 3 , 9 / 2 
[4223] c:3 is:loop 0 , 3 , move ua - 3 , 4 / 3  decode:loop 0 , 3 , move ua - 3 , 4 / 3 
[4224] c:3 is:( move 2 , 4 ; move ua + 3 , 2 )  decode:( move 2 , 4 ; move ua + 3 , 2 ) 
[4225] c:3 is:( move 2 , ul ; move 3 , 0 - 4 )  decode:( move 2 , ul ; move 3 , 0 - 4 ) 
[4226] c:0 is:loop 0 , 3 , move 4 + 4 , ua / 3  decode:loop 0 , 3 , move ua + 2 , ua / 3 
[4227] c:0 is:loop 0 , 3 , move 3 - ua , 4 / 3  decode:loop 0 , 3 , move 3 - ua , 0 - 3 
[4228] c:3 is:( move 2 , 0 - 3 ; move 4 , ul )  decode:( move 2 , 0 - 3 ; move 4 , ul ) 
[4229] c:3 is:( move 2 , 2 ; move ua + 5 , 2 )  decode:( move 2 , 2 ; move ua + 5 , 2 ) 
[4230] c:3 is:loop 0 , 4 , move ua - 2 , 4 / 3  decode:loop 0 , 4 , move ua - 2 , 4 / 3 
[4231] c:3 is:( move ua , 0 ; move 3 , 3 / 2 )  decode:( move ua , 0 ; move 3 , 3 / 2 ) 
[4232] c:0 is:( move ua + 3 , 2 ; move 4 , 2 )  decode:( move 3 + ua , 2 ; move 4 , 2 ) 
[4233] c:0 is:loop 0 , 4 , move 0 - ua , 7 * 3  decode:loop 0 , 4 , move 0 - ua , 0 - 4 0 
[4234] c:3 is:( move ua , 0 - 3 ; move 3 , 4 )  decode:( move ua , 0 - 3 ; move 3 , 4 ) 
[4235] c:0 is:( move 4 , 2 ; move 0 - ua , 4 )  decode:( move 4 , 2 ; move  4 , 3 / 4 ) 
[4236] c:3 is:( move 4 , 0 ; move ua + 2 , 5 )  decode:( move 4 , 0 ; move ua + 2 , 5 ) 
[4237] c:3 is:( move 3 , 0 ; move ua , 3 / 2 )  decode:( move 3 , 0 ; move ua , 3 / 2 ) 
[4238] c:3 is:( move ua , 0 - 4 ; move 4 , 2 )  decode:( move ua , 0 - 4 ; move 4 , 2 ) 
[4239] c:3 is:loop 0 , 3 , move 4 + 3 , ua / 4  decode:loop 0 , 3 , move 4 + 3 , ua / 4 
[4240] c:0 is:( move 4 - ua , 0 ; move 4 , 2 )  decode:( move 2 , 0 ; move 4 , 5 ) 
[4241] c:0 is:( move 4 , 2 ; move 2 - ua , 2 )  decode:( move 4 , 2 ; move 4 , 5 ) 
[4242] c:0 is:( move 2 , 0 ; move ua , 4 * 3 )  decode:( move 3 , 0 ; move ua , 4 * 3 ) 
[4243] c:0 is:( move 2 + ua , 5 ; move 2 , 2 )  decode:( move ua + 2 , 5 ; move 2 , 2 ) 
[4244] c:0 is:( move ua , 2 - 3 ; move 3 , 2 )  decode:( move 3 , ul ; move ua , 0 - 2 ) 
[4245] c:3 is:( move 0 - ua , 4 ; move 4 , 2 )  decode:( move 0 - ua , 4 ; move 4 , 2 ) 
[4246] c:0 is:( move 3 - ua , 0 ; move 3 , 4 )  decode:( move 3 , 3 ; move 3 , 4 ) 
[4247] c:3 is:( move ua + 2 , 2 ; move 5 , 2 )  decode:( move ua + 2 , 2 ; move 5 , 2 ) 
[4248] c:2 is:( move ua , 3 ; move 2 , 2 - 3 )  decode:( move 2 , 3 ; move ua , 2 - 3 ) 
[4249] c:3 is:( move ua + 2 , 0 ; move 7 , 2 )  decode:( move ua + 2 , 0 ; move 7 , 2 ) 
[4250] c:0 is:( move ua , 2 ; move 3 , 2 - 3 )  decode:( move 3 , 0 - 2 ; move ua , ul ) 
[4251] c:3 is:( move 0 - ua , 3 ; move 3 , 4 )  decode:( move 0 - ua , 3 ; move 3 , 4 ) 
[4252] c:0 is:loop 0 , 3 , move ua - 3 , 3 / 4  decode:loop 0 , 3 , move 3 - ua , 3 / 4 
[4253] c:3 is:( move 2 - ua , 0 ; move 4 , 4 )  decode:( move 2 - ua , 0 ; move 4 , 4 ) 
[4254] c:0 is:( move 0 - ua , 0 ; move 2 , 8 )  decode:( move ua , 0 ; move 2 , 8 ) 
[4255] c:0 is:( move 3 , 2 ; move ua , 2 - 3 )  decode:( move ua , ul ; move 3 , ul ) 
[4256] c:0 is:( move 2 , 4 + 3 ; move ua , 2 )  decode:( move 2 , 7 ; move ua , 2 ) 
[4257] c:3 is:( move 2 , 2 ; move ua + 2 , 5 )  decode:( move 2 , 2 ; move ua + 2 , 5 ) 
[4258] c:0 is:( move 2 , 2 - 3 ; move 2 , ul )  decode:( move 2 , 0 - 3 ; move 2 , ul ) 
[4259] c:3 is:( move ua + 2 , 4 ; move 3 , 2 )  decode:( move ua + 2 , 4 ; move 3 , 2 ) 
[4260] c:0 is:( move ua , 3 ; move 0 - 3 , 4 )  decode:( move ua , 3 ; move 3 , ul ) 
[4261] c:0 is:( move ua , 0 ; move 5 , 2 - 3 )  decode:( move ua , ua / 4 ; move 5 , ul ) 
[4262] c:0 is:loop 0 , 3 , move 4 - ua , 4 * 3  decode:loop 0 , 3 , move ua - 4 , v0 - 3 
[4263] c:3 is:loop 0 , 4 , move 4 - ua , 2 / 3  decode:loop 0 , 4 , move 4 - ua , 2 / 3 
[4264] c:0 is:( move 4 , 2 ; move 3 + ua , 2 )  decode:( move 4 , 2 ; move ua + 3 , 2 ) 
[4265] c:3 is:( move 4 , 0 - 4 ; move ua , 2 )  decode:( move 4 , 0 - 4 ; move ua , 2 ) 
[4266] c:0 is:( move ua , 3 ; move 3 , 0 - 4 )  decode:( move 3 , 2 / 3 ; move ua , 4 ) 
[4267] c:0 is:loop 0 , 3 , move ua - 2 * 5 , 4  decode:loop 0 , 3 , move 0 - 4 , 4 
[4268] c:3 is:loop 0 , 3 , move 4 - ua , 2 / 4  decode:loop 0 , 3 , move 4 - ua , 2 / 4 
[4269] c:3 is:( move 0 - 2 , ul ; move 4 , 3 )  decode:( move 0 - 2 , ul ; move 4 , 3 ) 
[4270] c:0 is:( move ua , 4 ; move 0 - 3 , 3 )  decode:( move ua , 4 ; move 3 , 2 + 4 ) 
[4271] c:3 is:loop 0 , 3 , move 3 - ua , 4 * 4  decode:loop 0 , 3 , move 3 - ua , 4 * 4 
[4272] c:0 is:loop 0 , 4 , move ua - 4 , 2 / 3  decode:loop 0 , 4 , move 2 , 3 * 5 
[4273] c:0 is:( move 4 , 0 - 3 ; move 2 , ul )  decode:( move 3 , 0 - 3 ; move 2 , ul ) 
[4274] c:0 is:loop 0 , 4 , move ua - 4 , 2 * 5  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[4275] c:0 is:loop 0 , 3 , move 3 - ua , 2 / 6  decode:loop 0 , 3 , move 3 - ua , 2 /  ua 
[4276] c:0 is:( move ul , 0 ; move 5 , 2 - 3 )  decode:( move ul , 0 ; move 5 , ul ) 
[4277] c:0 is:loop 0 , 4 , move 0 - ua , 7 / 3  decode:loop 0 , 4 , move ua , 7 / 3 
[4278] c:0 is:( move 2 - 3 , 3 ; move ua , 3 )  decode:( move ul , 0 ; move ua , 2 + 4 ) 
[4279] c:0 is:loop 0 , 3 , move ua - 3 , 5 / 3  decode:loop 0 , 3 , move 3 - ua , 5 / 3 
[4280] c:0 is:( move 2 - ua , 0 ; move 7 , 2 )  decode:( move 4 , 0 ; move ua + ul , 2 ) 
[4281] c:0 is:loop 0 , 3 , move ua - 4 , 2 / 5  decode:loop 0 , 4 , move 2 , 2 / 5 
[4282] c:0 is:( move 4 , 2 - 3 ; move ua , 2 )  decode:( move 3 , 2 - 3 ; move ua , 2 ) 
[4283] c:0 is:( move ua + 2 , 3 + move 2 , 4 )  decode:move move 2 , 4 ; move ua + 2 , 3 ) 
[4284] c:3 is:( move 4 , 2 ; move ua + 4 , 2 )  decode:( move 4 , 2 ; move ua + 4 , 2 ) 
[4285] c:0 is:( move 4 , 0 ; move ua + 3 , 5 )  decode:( move 4 , 0 ; move 3 + ua , 5 ) 
[4286] c:3 is:loop 0 , 4 , move 3 - ua , 3 / 4  decode:loop 0 , 4 , move 3 - ua , 3 / 4 
[4287] c:0 is:( move 3 - ua , 2 ; move 4 , 2 )  decode:( move 3 , 2 ; move 4 , 2 ) 
[4288] c:3 is:( move 3 , 3 ; move 3 - ua , 2 )  decode:( move 3 , 3 ; move 3 - ua , 2 ) 
[4289] c:0 is:loop 0 , 3 , move 4 - ua , 5 / 2  decode:loop 0 , 3 , move 4 - ua , 0 - 9 
[4290] c:0 is:loop 0 , 3 , move 4 - ua , 2 / 5  decode:loop 0 , 4 , move = 5 - ua , 2 / 4 
[4291] c:3 is:( move ua , 4 ; move 2 , 2 + 4 )  decode:( move ua , 4 ; move 2 , 2 + 4 ) 
[4292] c:3 is:( move ua + 2 , 5 ; move 3 , 2 )  decode:( move ua + 2 , 5 ; move 3 , 2 ) 
[4293] c:3 is:( move 3 , 3 ; move ua , 2 - 3 )  decode:( move 3 , 3 ; move ua , 2 - 3 ) 
[4294] c:0 is:( move ua + 2 , 0 ; move 6 , 4 )  decode:( move ua + 2 , 0 ; move ua , 4 ) 
[4295] c:3 is:( move ua , 0 ; move 3 , 2 / 4 )  decode:( move ua , 0 ; move 3 , 2 / 4 ) 
[4296] c:0 is:loop 0 , 4 , move 3 - ua , 3 * 5  decode:loop 0 , 4 , move 3 - ua , 0 - 4 
[4297] c:0 is:( move ua , 0 - 4 ; move 5 , 2 )  decode:loop 0 , 2 , move ua , 0 - 4 - v0 
[4298] c:0 is:( move 3 , 4 ; move ua , 0 - 4 )  decode:( move ua , 0 ; move 3 , 4 ) 
[4299] c:0 is:( move ua , 0 - 2 ; move 4 , 5 )  decode:( move 4 , 6 ; move ua , 4 / 3 ) 
[4300] c:3 is:( move 5 , 0 ; move ua + 2 , 5 )  decode:( move 5 , 0 ; move ua + 2 , 5 ) 
[4301] c:0 is:( move 5 , 0 ; move 2 - ua , 4 )  decode:( move 5 , 0 ; move 4 , ul ) 
[4302] c:3 is:( move 2 , 0 - 4 ; move 4 , ul )  decode:( move 2 , 0 - 4 ; move 4 , ul ) 
[4303] c:0 is:( move 7 , 2 ; move ua , 0 - 2 )  decode:( move ua , 2 ; move 7 , 0 - 2 ) 
[4304] c:0 is:( move 4 , 0 ; move ua , 0 - 7 )  decode:( move 4 , 0 ; move ua , 4 * 3 ) 
[4305] c:0 is:( move 2 , 6 ; move 2 + ua , 2 )  decode:( move 2 , 4 ; move ua + 2 , 2 ) 
[4306] c:0 is:( move 0 - ua , 0 ; move 4 , 7 )  decode:( move ua , 3 ; move 4 , 7 v0 ) 
[4307] c:0 is:( move 5 , 2 ; move 0 - ua , 4 )  decode:( move 5 , 2 ; move  4 , 3 / v) 0 
[4308] c:0 is:( move ua , 3 / 2 ; move 2 , 2 )  decode:( move ua , 3 / 2 ; move 2 , 4 ) 
[4309] c:3 is:loop 0 , 4 , move 3 - ua , 4 * 4  decode:loop 0 , 4 , move 3 - ua , 4 * 4 
[4310] c:0 is:( move ua - 2 , 3 ; move 4 , 2 )  decode:( move 4 , 3 ; move ua - 2 , 2 ) 
[4311] c:3 is:( move 2 - ua , 2 ; move 3 , 4 )  decode:( move 2 - ua , 2 ; move 3 , 4 ) 
[4312] c:0 is:loop 0 , 4 , move ua - 4 , 2 / 4  decode:loop 0 , 4 , move v0 + ul , 2 / 4 
[4313] c:0 is:( move 0 - ua , 6 ; move 3 , 2 )  decode:( move ua , 6 ; move 3 , ul ) 
[4314] c:3 is:( move ua , 0 - 3 ; move 3 , 5 )  decode:( move ua , 0 - 3 ; move 3 , 5 ) 
[4315] c:0 is:( move ua + 2 , 0 ; move 6 , 4 )  decode:( move ua + 2 , 0 ; move ua , 4 ) 
[4316] c:3 is:( move 2 , 4 ; move ua + 2 , 4 )  decode:( move 2 , 4 ; move ua + 2 , 4 ) 
[4317] c:0 is:( move 2 , 0 ; move ua , 3 / 4 )  decode:( move 2 , 0 ; move ua , ul / 4 ) 
[4318] c:0 is:( move 5 , 2 ; move 2 - ua , 2 )  decode:( move 2 - ua , 0 ; move 5 , 2 ) 
[4319] c:3 is:( move 3 , 0 - 4 ; move 3 , ul )  decode:( move 3 , 0 - 4 ; move 3 , ul ) 
[4320] c:3 is:loop 0 , 3 , move 3 - ua , 3 / 5  decode:loop 0 , 3 , move 3 - ua , 3 / 5 
[4321] c:0 is:( move 7 , 0 ; move ua + 3 , 2 )  decode:( move ua , 0 ; move ua + 3 , 2 ) 
[4322] c:3 is:( move 3 , 0 - 3 ; move 4 , ul )  decode:( move 3 , 0 - 3 ; move 4 , ul ) 
[4323] c:3 is:( move 9 , 0 ; move ua , 0 - 2 )  decode:( move 9 , 0 ; move ua , 0 - 2 ) 
[4324] c:0 is:loop 0 , 4 , move 4 - ua , 0 - 8  decode:loop 0 , 4 , move ua - 4 , 3 8 
[4325] c:0 is:( move ua , 2 / 3 ; move 2 , 2 )  decode:( move ua , 4 / ua ; move 2 , 2 ) 
[4326] c:3 is:( move 4 , 0 - 3 ; move ua , 4 )  decode:( move 4 , 0 - 3 ; move ua , 4 ) 
[4327] c:0 is:( move ua , 6 ; move 3 , 0 - 2 )  decode:( move 3 , 4 ; move ua , 2 ) 
[4328] c:0 is:( move 2 - ua , 2 ; move 5 , 2 )  decode:( move 4 , 2 ; move 5 , 5 ) 
[4329] c:2 is:( move ua - 2 , 2 ; move 3 , 4 )  decode:( move 5 , 2 ; move 3 , 4 ) 
[4330] c:3 is:( move ua , 2 - 3 ; move 4 , 2 )  decode:( move ua , 2 - 3 ; move 4 , 2 ) 
[4331] c:0 is:loop 0 , 3 , move 4 - ua , 3 / 4  decode:loop 0 , 3 , move 4 - ua , v0 - 4 
[4332] c:0 is:( move ua , 0 ; move 3 , 3 * 4 )  decode:( move ua , 0 ; move 3 , 4 * 3 ) 
[4333] c:0 is:( move 2 - ua , 0 ; move 5 , 4 )  decode:( move 0 - 4 , 0 ; move 5 , 4 ) 
[4334] c:0 is:( move 3 , 6 ; move 0 - ua , 2 )  decode:( move 3 , 8 ; move ua , ul ) 
[4335] c:3 is:loop 0 , 4 , move 4 - ua , 5 * 2  decode:loop 0 , 4 , move 4 - ua , 5 * 2 
[4336] c:0 is:( move 3 - ua , 0 ; move 4 , 4 )  decode:( move 3 , 3 ; move 4 , 4 ) 
[4337] c:0 is:loop 0 , 4 , move ua + 2 , 7 / 2  decode:loop 0 , 4 , move 2 - 8 + v0 - 9 
[4338] c:3 is:( move ua , 4 + 3 ; move 3 , 2 )  decode:( move ua , 4 + 3 ; move 3 , 2 ) 
[4339] c:0 is:( move 4 , 5 ; move ua , 0 - 2 )  decode:( move 0 - ua , 3 ; move 4 , 2 ) 
[4340] c:3 is:( move ua + 2 , 3 ; move 3 , 4 )  decode:( move ua + 2 , 3 ; move 3 , 4 ) 
[4341] c:0 is:( move 2 - 3 , ul ; move 3 , 2 )  decode:( move 3 , ul ; move ul , 2 ) 
[4342] c:0 is:loop 0 , 4 , move 2 - ua , 9 + 2  decode:loop 0 , 4 , move 2 - ua , 3 / 2 
[4343] c:0 is:( move 5 , 3 ; move 2 + ua , 2 )  decode:( move 5 , 3 ; move ua + 2 , 2 ) 
[4344] c:3 is:( move 2 , 5 ; move ua + 3 , 2 )  decode:( move 2 , 5 ; move ua + 3 , 2 ) 
[4345] c:0 is:( move ua , 0 ; move 7 , 0 - 4 )  decode:( move ua , 0 ; move 7 , 7 * 4 ) 
[4346] c:0 is:( move 2 , 3 ; move 3 + ua , 4 )  decode:( move 2 , 3 ; move ua + 3 , 4 ) 
[4347] c:0 is:loop 0 , 4 , move ua - 4 , 3 * 4  decode:loop 0 , 4 , move 2 , 3 * 4 * v0 
[4348] c:0 is:( move ua - 2 , 0 ; move 5 , 4 )  decode:( move 4 , 0 ; move 5 , 4 ) 
[4349] c:3 is:( move 0 - ua , 4 ; move 5 , 2 )  decode:( move 0 - ua , 4 ; move 5 , 2 ) 
[4350] c:3 is:( move 0 - ua , 4 ; move 3 , 4 )  decode:( move 0 - ua , 4 ; move 3 , 4 ) 
[4351] c:0 is:loop 0 , 5 , move ul - 2 , 2 / 4  decode:loop 0 , 4 , move 0 - v0 , 4 / 3 
[4352] c:0 is:loop 0 , 7 , move 4 - ua , 2 - 3  decode:loop 0 , 4 , move 0 - 4 , 0 - 8 
[4353] c:3 is:( move ua , 3 ; move 3 , 2 + 4 )  decode:( move ua , 3 ; move 3 , 2 + 4 ) 
[4354] c:3 is:( move 3 , 0 - 4 ; move ua , 4 )  decode:( move 3 , 0 - 4 ; move ua , 4 ) 
[4355] c:3 is:( move 5 , 2 ; move ua , 0 - 4 )  decode:( move 5 , 2 ; move ua , 0 - 4 ) 
[4356] c:0 is:loop 0 , 4 , move ua - 3 , 4 / 3  decode:loop 0 , 4 , move 3 , 3 / 4 0 
[4357] c:3 is:( move 0 - ua , 2 ; move 4 , 5 )  decode:( move 0 - ua , 2 ; move 4 , 5 ) 
[4358] c:0 is:loop 0 , 3 , move 4 + 4 , ua / 4  decode:loop 0 , 3 , move 4 + 3 , ua / 4 
[4359] c:3 is:( move ua , 2 ; move 5 , 0 - 4 )  decode:( move ua , 2 ; move 5 , 0 - 4 ) 
[4360] c:3 is:( move 2 , ul ; move 4 , 0 - 4 )  decode:( move 2 , ul ; move 4 , 0 - 4 ) 
[4361] c:0 is:( move 3 , 3 ; move 0 - ua , 5 )  decode:( move 3 , 3 ; move ua , 5 / 2 ) 
[4362] c:0 is:( move ua , 3 ; move 3 , 2 - 3 )  decode:( move 3 , 3 ; move ua , 2 - 3 ) 
[4363] c:0 is:( move 4 , 2 ; move ua , 2 - 3 )  decode:( move 0 - ua , ul ; move 4 , ul ) 
[4364] c:0 is:( move ua , 4 ; move 2 , 2 - 3 )  decode:( move 2 , 0 ; move ua , ul ) 
[4365] c:3 is:loop 0 , 4 , move 3 - ua , 0 - 9  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[4366] c:3 is:( move 2 , 2 - 3 ; move ua , 4 )  decode:( move 2 , 2 - 3 ; move ua , 4 ) 
[4367] c:0 is:( move ua , 0 - 5 ; move 4 , 2 )  decode:( move 4 , 5 / 5 ; move 4 , 2 ) 
[4368] c:0 is:( move 4 , 4 + 2 ; move ua , 2 )  decode:( move 4 , : ua / ; move ua , 2 ) 
[4369] c:0 is:( move ua , 3 + 3 ; move 4 , 2 )  decode:( move ua , 6 ; move 4 , 2 ) 
[4370] c:0 is:( move 4 , 2 ; move 0 - ua , 5 )  decode:( move 4 , 2 ; move ua , 5 ) 
[4371] c:3 is:( move 3 , 0 ; move ua , 4 * 3 )  decode:( move 3 , 0 ; move ua , 4 * 3 ) 
[4372] c:3 is:( move 4 , 0 ; move ua + 4 , 4 )  decode:( move 4 , 0 ; move ua + 4 , 4 ) 
[4373] c:0 is:( move 4 , 0 ; move 2 - ua , 5 )  decode:( move 4 , 0 ; move 4 , ua * ua ) 
[4374] c:0 is:( move 3 , 4 ; move 0 - ua , 4 )  decode:( move 3 , 4 ; move ua , ul ) 
[4375] c:3 is:loop 0 , 3 , move ua - 4 , 4 / 3  decode:loop 0 , 3 , move ua - 4 , 4 / 3 
[4376] c:3 is:( move 3 , 3 ; move ua + 2 , 4 )  decode:( move 3 , 3 ; move ua + 2 , 4 ) 
[4377] c:3 is:( move 2 , 0 ; move ua , 4 / 3 )  decode:( move 2 , 0 ; move ua , 4 / 3 ) 
[4378] c:3 is:( move 0 - ua , 2 ; move 5 , 4 )  decode:( move 0 - ua , 2 ; move 5 , 4 ) 
[4379] c:0 is:( move 4 , 0 - 4 ; move 2 , ul )  decode:( move 3 , 0 ; move 2 , 2 - 3 ) 
[4380] c:2 is:( move 3 , 4 ; move 2 - ua , 2 )  decode:( move 3 , 4 ; move 4 , 5 ) 
[4381] c:0 is:( move 0 - 4 , 3 ; move 3 , ul )  decode:( move 4 , 0 ; move 3 , ua / 3 ) 
[4382] c:0 is:loop 0 , 4 , move ua , 0 - 7 * 4  decode:loop 0 , 4 , move ua , 4 * 4 
[4383] c:0 is:( move 0 - ua , 3 ; move 6 , 2 )  decode:( move ul - ua , 3 ; move ua , 2 ) 
[4384] c:0 is:( move 0 - 3 , 4 ; move ua , 4 )  decode:( move 3 , ul ; move ua , ul ) 
[4385] c:0 is:( move 3 + ua , 2 ; move 5 , 2 )  decode:( move 9 , 2 ; move 5 , 2 ) 
[4386] c:3 is:loop 0 , 4 , move 3 - ua , 4 / 3  decode:loop 0 , 4 , move 3 - ua , 4 / 3 
[4387] c:3 is:( move 3 , 2 ; move ua + 3 , 4 )  decode:( move 3 , 2 ; move ua + 3 , 4 ) 
[4388] c:0 is:( move ua , 3 ; move 4 , 0 - 4 )  decode:( move 4 , 3 ; move ua , 0 - 4 ) 
[4389] c:0 is:( move 4 , 0 - 5 ; move ua , 2 )  decode:( move ua , 4 / 5 ; move ua , 2 ) 
[4390] c:3 is:( move 2 , 3 ; move ua + 2 , 5 )  decode:( move 2 , 3 ; move ua + 2 , 5 ) 
[4391] c:0 is:( move 3 , ul ; move 5 , 0 - 2 )  decode:( move 3 , ua / 4 ; move 4 , 2 ) 
[4392] c:3 is:( move 2 , 0 - 7 ; move ua , 2 )  decode:( move 2 , 0 - 7 ; move ua , 2 ) 
[4393] c:0 is:( move 0 - ua , 5 ; move 4 , 2 )  decode:( move ua , 5 ; move 4 , 5 ) 
[4394] c:0 is:( move 3 / 2 , 0 ; move 3 , ul )  decode:( move 2 , 0 ; move 3 , ul ) 
[4395] c:3 is:loop 0 , 4 , move 4 - ua , 3 * 4  decode:loop 0 , 4 , move 4 - ua , 3 * 4 
[4396] c:0 is:( move 2 , 2 ; move 2 - ua , 5 )  decode:( move 2 , 2 ; move 4 , ua * ua ) 
[4397] c:3 is:( move 3 , 0 ; move ua , 2 / 4 )  decode:( move 3 , 0 ; move ua , 2 / 4 ) 
[4398] c:0 is:( move 4 , 3 ; move 0 - ua , 4 )  decode:( move 4 , 3 ; move ua , 2 / 5 ) 
[4399] c:0 is:( move ua , 0 ; move 3 / 2 , 4 )  decode:( move ua , 0 ; move 2 , 4 ) 
[4400] c:0 is:( move ua , 0 - 3 ; move 6 , 2 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[4401] c:0 is:( move 5 , 2 ; move 3 + ua , 2 )  decode:( move 5 , 2 ; move ua + 3 , 2 ) 
[4402] c:0 is:( move 4 , 3 ; move 3 + ua , 2 )  decode:( move 4 , 3 ; move 9 , 2 ) 
[4403] c:0 is:( move 2 - ua , 3 ; move 4 , 2 )  decode:( move 4 , 6 ; move 4 , 2 - 3 ) 
[4404] c:3 is:loop 0 , 4 , move 4 + 3 , ua / 4  decode:loop 0 , 4 , move 4 + 3 , ua / 4 
[4405] c:0 is:( move 4 , 4 ; move ua , 0 - 3 )  decode:( move ua , 4 ; move 4 , 0 - 3 ) 
[4406] c:0 is:loop 0 , 4 , move ua - 4 , 0 - 8  decode:loop 0 , 4 , move ua - 4 , 8 
[4407] c:3 is:( move 5 , 0 - 2 ; move ua , 4 )  decode:( move 5 , 0 - 2 ; move ua , 4 ) 
[4408] c:3 is:loop 0 , 3 , move 4 - ua , 4 / 3  decode:loop 0 , 3 , move 4 - ua , 4 / 3 
[4409] c:0 is:( move 4 , 2 ; move ua , 0 - 5 )  decode:( move 4 , 2 ; move ua , 5 / 4 ) 
[4410] c:3 is:( move 3 , 0 - 3 ; move 4 , ul )  decode:( move 3 , 0 - 3 ; move 4 , ul ) 
[4411] c:0 is:( move 4 + 3 , 0 ; move ua , 5 )  decode:( move ua + ul , 0 ; move ua , 5 ) 
[4412] c:0 is:( move 5 , 0 ; move ua - 2 , 4 )  decode:( move 5 , 0 ; move 2 - ua , 4 ) 
[4413] c:0 is:( move 0 - 3 , ul ; move 5 , 2 )  decode:( move 3 , ul ; move 5 , 2 ) 
[4414] c:3 is:( move ua + 2 , 4 ; move 4 , 2 )  decode:( move ua + 2 , 4 ; move 4 , 2 ) 
[4415] c:3 is:( move 4 , ul ; move 4 , 0 - 2 )  decode:( move 4 , ul ; move 4 , 0 - 2 ) 
[4416] c:0 is:loop 0 , 3 , move ua - 3 , 3 / 5  decode:( move 5 , 5 ; move 5 , 5 ) 
[4417] c:0 is:loop 0 , 3 , move ua - 3 , 2 / 6  decode:loop 0 , 3 , move 3 , 2 / 6 
[4418] c:0 is:loop 0 , 4 , move ua - 3 , 3 / 4  decode:loop 0 , 4 , move 3 , 3 / 4 
[4419] c:3 is:( move ua , 2 ; move 7 , 0 - 2 )  decode:( move ua , 2 ; move 7 , 0 - 2 ) 
[4420] c:0 is:( move 3 , 7 ; move ua , 0 - 2 )  decode:( move ua , ua * ua ; move 3 , 2 ) 
[4421] c:0 is:( move 2 , 3 ; move ua , 2 / 3 )  decode:( move 2 , 3 ; move ua , 4 / ua ) 
[4422] c:0 is:( move 0 - 4 , 0 ; move ua , 8 )  decode:( move 4 , 0 ; move ua , 8 ) 
[4423] c:3 is:( move 5 , 2 ; move 3 - ua , 2 )  decode:( move 5 , 2 ; move 3 - ua , 2 ) 
[4424] c:0 is:loop 0 , 4 , move 4 - ua , 2 / 5  decode:loop 0 , 4 , move ua - 4 , 5 / 5 
[4425] c:0 is:( move 0 - 7 , 0 ; move 4 , ul )  decode:( move 0 - 4 , 0 ; move 4 , ul ) 
[4426] c:3 is:( move ua + 2 , 4 ; move 3 , 4 )  decode:( move ua + 2 , 4 ; move 3 , 4 ) 
[4427] c:0 is:( move 2 , 2 - 3 ; move 4 , ul )  decode:( move 3 , 2 - 3 ; move 4 , ul ) 
[4428] c:0 is:( move 3 / 2 , 0 ; move 4 , ul )  decode:( move ul , 0 ; move 4 , ul ) 
[4429] c:3 is:( move ua + 2 , 4 ; move 5 , 2 )  decode:( move ua + 2 , 4 ; move 5 , 2 ) 
[4430] c:0 is:( move 4 , 6 ; move 0 - ua , 2 )  decode:( move 4 , 8 ; move ua , ul ) 
[4431] c:1 is:loop 0 , 4 , move ua - 4 , 0 - 9  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[4432] c:0 is:( move 2 , ul ; move 4 * 2 , 2 )  decode:( move 2 , ul ; move 4 + 4 , 2 ) 
[4433] c:3 is:( move ua + 4 , 4 ; move 3 , 2 )  decode:( move ua + 4 , 4 ; move 3 , 2 ) 
[4434] c:3 is:( move ua + 3 , 2 ; move 4 , 4 )  decode:( move ua + 3 , 2 ; move 4 , 4 ) 
[4435] c:3 is:( move 4 , 0 ; move 3 - ua , 5 )  decode:( move 4 , 0 ; move 3 - ua , 5 ) 
[4436] c:0 is:( move 4 , ul ; move 5 , 0 - 2 )  decode:( move 4 , ua / 3 ; move 5 , 2 ) 
[4437] c:3 is:loop 0 , 4 , move 0 - ua , 9 * 3  decode:loop 0 , 4 , move 0 - ua , 9 * 3 
[4438] c:0 is:( move 6 , 3 ; move ua + 2 , 2 )  decode:( move 5 , 3 ; move ua + 2 , 2 ) 
[4439] c:0 is:( move 0 - 4 , 3 ; move ua , 5 )  decode:( move 4 , 6 ; move ua , 5 / 4 ) 
[4440] c:0 is:( move ua + 2 , 2 ; move 7 , 2 )  decode:( move ua + 2 , 2 ; move ua , 2 ) 
[4441] c:0 is:( move 2 , 0 ; move 4 , ua / 4 )  decode:( move 4 - ua , 2 ; move 4 , 8 ) 
[4442] c:0 is:( move 5 , 0 ; move 0 - ua , 7 )  decode:( move 5 , 0 ; move ua , 4 ) 
[4443] c:0 is:( move 2 , 2 ; move ua - 4 , 4 )  decode:( move 2 , 0 - 4 ; move 3 , 4 ) 
[4444] c:0 is:( move ua , 0 ; move 0 - 7 , 5 )  decode:( move ua , 0 ; move ua + ul , 5 ) 
[4445] c:0 is:( move 3 , 5 ; move 3 + ua , 2 )  decode:( move 3 , 5 ; move ua + 3 , 2 ) 
[4446] c:3 is:( move 2 - ua , 2 ; move 3 , 5 )  decode:( move 2 - ua , 2 ; move 3 , 5 ) 
[4447] c:0 is:( move 9 , 0 ; move ua + 2 , 2 )  decode:( move 9 , ul ; move ua + 2 , 2 ) 
[4448] c:3 is:loop 0 , 4 , move ua - 4 , 3 / 4  decode:loop 0 , 4 , move ua - 4 , 3 / 4 
[4449] c:0 is:( move 4 , 3 ; move ua , 2 - 3 )  decode:( move 3 , 3 ; move ua , 2 - 3 ) 
[4450] c:3 is:( move 2 , 5 ; move ua + 4 , 2 )  decode:( move 2 , 5 ; move ua + 4 , 2 ) 
[4451] c:0 is:( move 4 + 3 , 2 ; move ua , 4 )  decode:( move 7 , 2 ; move ua , 4 ) 
[4452] c:0 is:( move 4 , 2 ; move ua + 3 , 4 )  decode:( move 4 , ul ; move ua + 3 , 4 ) 
[4453] c:3 is:( move ua , 0 - 2 ; move 7 , 3 )  decode:( move ua , 0 - 2 ; move 7 , 3 ) 
[4454] c:0 is:( move ua + 2 , 2 ; move 5 , 4 )  decode:( move 8 , 2 ; move 5 , 4 ) 
[4455] c:3 is:( move ua + 2 , 0 ; move 9 , 2 )  decode:( move ua + 2 , 0 ; move 9 , 2 ) 
[4456] c:0 is:( move ua , 6 ; move 4 , 0 - 2 )  decode:( move 4 , 0 - 4 ; move ua , 2 ) 
[4457] c:3 is:( move 0 - ua , 2 ; move 5 , 5 )  decode:( move 0 - ua , 2 ; move 5 , 5 ) 
[4458] c:0 is:( move 4 , 6 ; move ua , 0 - 2 )  decode:( move 0 - ua , 4 ; move 4 , 2 ) 
[4459] c:0 is:( move ua , 4 ; move 5 , 0 - 3 )  decode:( move ul - ua , ul ; move ua , 3 ) 
[4460] c:0 is:( move 5 , 0 - 3 ; move ua , 4 )  decode:( move ul - ua , ul ; move ua , 7 ) 
[4461] c:0 is:( move ua , 0 - 3 ; move 4 , 5 )  decode:( move 4 , 0 - 3 ; move 4 , 5 ) 
[4462] c:3 is:( move ua + 2 , 3 ; move 3 , 5 )  decode:( move ua + 2 , 3 ; move 3 , 5 ) 
[4463] c:0 is:( move 0 - 3 , 5 ; move ua , 4 )  decode:( move 3 , ua * ua ; move ua , ul ) 
[4464] c:0 is:( move 3 , 0 ; move ua , 4 / 3 )  decode:( move 3 , ul / 4 ; move ua , 5 ) 
[4465] c:0 is:( move 4 , 4 ; move ua , 0 - 4 )  decode:( move ua , 0 ; move 4 , 4 ) 
[4466] c:0 is:( move 6 , 0 - 3 ; move ua , 3 )  decode:( move ua , 0 - 3 ; move ua , 3 ) 
[4467] c:3 is:( move ua + 2 , 6 ; move 3 , 2 )  decode:( move ua + 2 , 6 ; move 3 , 2 ) 
[4468] c:0 is:( move ua , 3 ; move 4 , 2 - 3 )  decode:( move 4 , 2 ; move ua , ul ) 
[4469] c:3 is:( move 3 , 5 ; move ua + 2 , 3 )  decode:( move 3 , 5 ; move ua + 2 , 3 ) 
[4470] c:3 is:( move 3 , 0 ; move 4 , ua / 3 )  decode:( move 3 , 0 ; move 4 , ua / 3 ) 
[4471] c:3 is:( move 4 , 5 ; move ua + 2 , 2 )  decode:( move 4 , 5 ; move ua + 2 , 2 ) 
[4472] c:3 is:loop 0 , 4 , move 4 - ua , 0 - 9  decode:loop 0 , 4 , move 4 - ua , 0 - 9 
[4473] c:3 is:( move 3 , 2 ; move ua , 3 / 2 )  decode:( move 3 , 2 ; move ua , 3 / 2 ) 
[4474] c:3 is:( move ua , 2 - 3 ; move 4 , 3 )  decode:( move ua , 2 - 3 ; move 4 , 3 ) 
[4475] c:3 is:( move 2 , 7 ; move ua + 2 , 2 )  decode:( move 2 , 7 ; move ua + 2 , 2 ) 
[4476] c:3 is:loop 0 , 4 , move 4 - ua , 4 * 4  decode:loop 0 , 4 , move 4 - ua , 4 * 4 
[4477] c:0 is:( move ua , 4 ; move 6 , 0 - 2 )  decode:( move ua , 4 ; move ua , 0 - 2 ) 
[4478] c:0 is:( move 0 - 4 , ul ; move 4 , 3 )  decode:( move 4 , 4 ; move 4 , ul + 4 ) 
[4479] c:0 is:( move 3 / 2 , 0 ; move ua , 5 )  decode:( move / 3 , 0 ; ; move ua , 5 ) 
[4480] c:0 is:( move 3 , 4 ; move 0 - 4 , ul )  decode:( move 3 , 4 ; move 4 , 2 ) 
[4481] c:3 is:( move 2 , 2 / 4 ; move ua , 2 )  decode:( move 2 , 2 / 4 ; move ua , 2 ) 
[4482] c:3 is:( move 3 , 4 ; move ua , 2 - 3 )  decode:( move 3 , 4 ; move ua , 2 - 3 ) 
[4483] c:0 is:( move ua , 6 ; move 0 - 3 , 3 )  decode:( move ua , 6 ; move 3 , ul ) 
[4484] c:3 is:( move 8 , 0 ; move ua + 3 , 2 )  decode:( move 8 , 0 ; move ua + 3 , 2 ) 
[4485] c:3 is:( move ua + 2 , 5 ; move 4 , 2 )  decode:( move ua + 2 , 5 ; move 4 , 2 ) 
[4486] c:3 is:( move ua + 2 , 3 ; move 6 , 2 )  decode:( move ua + 2 , 3 ; move 6 , 2 ) 
[4487] c:3 is:loop 0 , 4 , move ua - 4 , 4 / 3  decode:loop 0 , 4 , move ua - 4 , 4 / 3 
[4488] c:0 is:( move 5 , 5 ; move ua , 0 - 2 )  decode:( move ua , 6 ; move ua - 2 , 2 ) 
[4489] c:1 is:( move ua , 0 - 3 ; move 7 , 2 )  decode:( move ua , 0 - 3 ; move 7 , 2 ) 
[4490] c:0 is:( move 5 , 0 ; move 2 - ua , 5 )  decode:( move 5 , 0 ; move 4 - ua , 5 ) 
[4491] c:0 is:( move 4 , 4 ; move ua + 3 , 2 )  decode:( move 4 , 4 ; move 9 , 2 ) 
[4492] c:3 is:( move ua + 2 , 3 ; move 4 , 4 )  decode:( move ua + 2 , 3 ; move 4 , 4 ) 
[4493] c:0 is:( move 6 , 0 ; move 2 - ua , 4 )  decode:( move 6 , 0 ; move 4 , ul ) 
[4494] c:0 is:( move ua , 0 - 2 ; move 8 , 2 )  decode:( move ua + 2 , 0 ; move 8 , 2 ) 
[4495] c:0 is:( move 0 - 4 , 6 ; move ua , 2 )  decode:( move 4 , 9 ; move ua , 2 ) 
[4496] c:0 is:( move ua , 7 ; move 0 - 3 , 2 )  decode:( move ua , 4 + 3 ; move 3 , 2 ) 
[4497] c:0 is:loop 0 , 6 , move 3 / 2 , 2 / ua  decode:loop 0 , 4 , move 2 , 2 / 4 
[4498] c:3 is:( move ua + 3 , 4 ; move 4 , 2 )  decode:( move ua + 3 , 4 ; move 4 , 2 ) 
[4499] c:0 is:( move 0 - ua , 6 ; move 4 , 2 )  decode:( move ua , 9 ; move 4 , 2 - 3 ) 
[4500] c:0 is:( move ua , 3 + move 3 , 3 + 3 )  decode:( move ua , 9 ; move 3 , 4 ) 
[4501] c:0 is:( move ua , 6 ; move 0 - 4 , 2 )  decode:( move 0 - ua , 9 ; move 4 , 2 ) 
[4502] c:0 is:( move 5 , 3 ; move 2 - ua , 2 )  decode:( move ul - ua , 6 ; move 4 , 2 ) 
[4503] c:0 is:( move 5 , 2 ; move 0 - ua , 5 )  decode:( move 5 , 2 ; move ua , ua * ua ) 
[4504] c:0 is:( move 0 - 3 , 0 ; move ua , 9 )  decode:( move 3 , 9 ; move ua , 9 / 2 ) 
[4505] c:0 is:( move 4 , 3 ; move 0 - ua , 5 )  decode:( move 4 , 3 ; move ua , ua * ua ) 
[4506] c:3 is:( move 2 , 5 ; move ua + 2 , 4 )  decode:( move 2 , 5 ; move ua + 2 , 4 ) 
[4507] c:0 is:( move 3 , 0 ; move ua , 2 / 5 )  decode:( move 3 , 6 ; move ua , 2 / 5 ) 
[4508] c:3 is:( move 0 - ua , 4 ; move 4 , 4 )  decode:( move 0 - ua , 4 ; move 4 , 4 ) 
[4509] c:0 is:( move 4 , 2 ; move 0 - ua , 6 )  decode:( move 4 , ua / 3 ; move ua , 9 ) 
[4510] c:3 is:( move 0 - ua , 3 ; move 4 , 5 )  decode:( move 0 - ua , 3 ; move 4 , 5 ) 
[4511] c:0 is:loop 0 , 2 , move 2 - ua , 3 * 9  decode:( move 2 - ua , 5 ; move 5 , 5 ) 
[4512] c:0 is:( move 2 , ul ; move 3 + 4 , 3 )  decode:( move 3 , ul ; move 3 + 4 , 3 ) 
[4513] c:3 is:( move 4 , 0 - 3 ; move ua , 5 )  decode:( move 4 , 0 - 3 ; move ua , 5 ) 
[4514] c:3 is:( move 3 , 2 - 3 ; move ua , 4 )  decode:( move 3 , 2 - 3 ; move ua , 4 ) 
[4515] c:0 is:( move 4 , ul ; move 3 , 0 - 4 )  decode:( move 3 , ul ; move 4 , 0 - 4 ) 
[4516] c:0 is:( move ua , 0 - 4 ; move 3 , 5 )  decode:( move 3 , 9 / 2 ; move 5 , 5 ) 
[4517] c:0 is:loop 0 , 4 , move ua - 3 , 9 + 2  decode:loop 0 , 4 , move ua - 3 , ua / 5 
[4518] c:3 is:( move 4 , 4 ; move 2 - ua , 2 )  decode:( move 4 , 4 ; move 2 - ua , 2 ) 
[4519] c:3 is:( move ua , 3 / 2 ; move 3 , 2 )  decode:( move ua , 3 / 2 ; move 3 , 2 ) 
[4520] c:0 is:( move 5 , 2 ; move 4 + ua , 2 )  decode:( move 5 , 2 ; move ua + 4 , 2 ) 
[4521] c:0 is:( move ua , 4 ; move 3 , 2 - 3 )  decode:( move 3 , 4 ; move ua , ul ) 
[4522] c:0 is:( move 5 , 3 ; move 3 + ua , 2 )  decode:( move 5 , 3 ; move 9 , 2 ) 
[4523] c:3 is:( move 3 , 4 ; move ua + 2 , 4 )  decode:( move 3 , 4 ; move ua + 2 , 4 ) 
[4524] c:0 is:loop 0 , 6 , move ua / 2 , 3 / 2  decode:loop 0 , 4 , move 5 , 3 / 8 
[4525] c:3 is:( move 0 - ua , 4 ; move 3 , 5 )  decode:( move 0 - ua , 4 ; move 3 , 5 ) 
[4526] c:0 is:loop 0 , 4 , move ua - 3 , 5 / 3  decode:loop 0 , 4 , move 3 , 5 / 3 
[4527] c:0 is:( move 3 , 4 ; move 0 - ua , 5 )  decode:( move 3 , 4 ; move ua , ua * ua ) 
[4528] c:0 is:( move ua , 0 ; move 8 , 0 - 4 )  decode:( move ua , 0 ; move 9 , 0 - 4 ) 
[4529] c:0 is:( move 5 , 0 - 4 ; move ua , 3 )  decode:( move ua , 0 - 4 ; move ua , 3 ) 
[4530] c:3 is:loop 0 , 4 , move 4 - ua , 3 / 4  decode:loop 0 , 4 , move 4 - ua , 3 / 4 
[4531] c:3 is:loop 0 , 4 , move 3 - ua , 4 * 5  decode:loop 0 , 4 , move 3 - ua , 4 * 5 
[4532] c:3 is:( move 4 , 0 - 4 ; move 3 , ul )  decode:( move 4 , 0 - 4 ; move 3 , ul ) 
[4533] c:3 is:( move 3 , 3 ; move ua + 2 , 5 )  decode:( move 3 , 3 ; move ua + 2 , 5 ) 
[4534] c:3 is:( move ua + 2 , 0 ; move 7 , 4 )  decode:( move ua + 2 , 0 ; move 7 , 4 ) 
[4535] c:0 is:( move 5 , ul ; move 0 - 4 , 2 )  decode:( move 5 , ul ; move 4 , 5 ) 
[4536] c:3 is:( move 4 , 0 - 3 ; move 4 , ul )  decode:( move 4 , 0 - 3 ; move 4 , ul ) 
[4537] c:0 is:( move ua , 0 - 4 ; move 2 , 6 )  decode:( move 2 , 0 - 4 ; move ua , ul ) 
[4538] c:0 is:( move 5 , 2 - 3 ; move ua , 2 )  decode:( move ul - ua , 2 ; move ua , 2 ) 
[4539] c:0 is:( move 5 , 0 - 2 ; move ua , 5 )  decode:( move ua , 0 - 2 ; move ua , 5 ) 
[4540] c:3 is:loop 0 , 4 , move 4 + 4 , ua / 4  decode:loop 0 , 4 , move 4 + 4 , ua / 4 
[4541] c:0 is:( move ua , 2 ; move 8 , 0 - 2 )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[4542] c:3 is:( move ua + 3 , 5 ; move 3 , 2 )  decode:( move ua + 3 , 5 ; move 3 , 2 ) 
[4543] c:3 is:( move 2 - ua , 3 ; move 3 , 4 )  decode:( move 2 - ua , 3 ; move 3 , 4 ) 
[4544] c:0 is:( move 4 , 0 - 4 ; move ua , 4 )  decode:( move ua , 0 - 4 ; move ua , 4 ) 
[4545] c:0 is:( move ua , 3 ; move 0 - 7 , 2 )  decode:( move ua , 3 ; move ua , 2 ) 
[4546] c:0 is:( move 3 , ul ; move 4 , 0 - 4 )  decode:loop 0 , 3 , move 3 , 3 * 3 - v0 
[4547] c:3 is:( move ua , 0 ; move 4 , 5 * 2 )  decode:( move ua , 0 ; move 4 , 5 * 2 ) 
[4548] c:0 is:( move ua - 3 , 2 ; move 3 , 4 )  decode:( move 3 , 2 ; move 3 , 4 ) 
[4549] c:2 is:( move 2 , 2 ; move ua , 2 / 4 )  decode:( move 2 , 2 ; move ua , 2 / 2 ) 
[4550] c:0 is:( move 2 , 6 ; move 0 - ua , 4 )  decode:( move 2 , 6 ; move ua , ul / 4 ) 
[4551] c:3 is:( move ua + 2 , 4 ; move 2 , 5 )  decode:( move ua + 2 , 4 ; move 2 , 5 ) 
[4552] c:2 is:( move 5 , 0 ; move ua , 3 / 2 )  decode:( move 5 , 0 ; move ua , ua / 4 ) 
[4553] c:0 is:( move 4 , ul ; move 0 - 4 , 3 )  decode:( move 4 , ul ; move 4 , ul + 4 ) 
[4554] c:3 is:( move 3 , 2 ; move ua + 3 , 5 )  decode:( move 3 , 2 ; move ua + 3 , 5 ) 
[4555] c:0 is:( move ul , 0 ; move 4 , 2 / 3 )  decode:( move ul , 0 ; move 4 , ul ) 
[4556] c:0 is:( move ua , 0 - 4 ; move 6 , 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 2 
[4557] c:0 is:( move 0 - 3 , 4 ; move ua , 5 )  decode:( move 3 , ul ; move ua , ua * ua ) 
[4558] c:3 is:( move 4 - ua , 2 ; move 4 , 2 )  decode:( move 4 - ua , 2 ; move 4 , 2 ) 
[4559] c:0 is:( move 3 , 5 ; move 0 - ua , 4 )  decode:( move 3 , 4 ; move ua , ul ) 
[4560] c:0 is:( move 0 - ua , 3 ; move 3 , 6 )  decode:( move ua , 0 ; move 3 , 3 ) 
[4561] c:0 is:( move 3 , 2 - 3 ; move 3 , ul )  decode:( move 3 , 3 ; move 3 , 2 - 3 ) 
[4562] c:0 is:loop 0 , 4 , move ua - 4 , 2 / 6  decode:loop 0 , 4 , move 2 , 2 / 8 
[4563] c:0 is:( move 0 - 4 , 7 ; move ua , 2 )  decode:( move 4 , 4 / move ua , ul ) 
[4564] c:0 is:( move ua - 3 , 0 ; move 5 , 5 )  decode:( move 3 - ua , 3 ; move 5 , 5 ) 
[4565] c:3 is:( move 2 - ua , 3 ; move 4 , 4 )  decode:( move 2 - ua , 3 ; move 4 , 4 ) 
[4566] c:3 is:( move 5 , 2 / ua ; move 2 , 2 )  decode:( move 5 , 2 / ua ; move 2 , 2 ) 
[4567] c:0 is:( move 2 , 2 / 4 ; move 2 , ul )  decode:( move 2 , 2 / 2 ; move 3 , ul ) 
[4568] c:0 is:( move 3 , 2 ; move ua , 4 * 3 )  decode:( move 3 , 2 ; move ua , 2 * 5 ) 
[4569] c:0 is:( move 0 - 4 , 3 ; move 5 , ul )  decode:( move 4 , ul ; move 5 , ua / 3 ) 
[4570] c:0 is:( move 4 , 0 ; move ua , 5 / 2 )  decode:( move 4 , 0 ; move ua , 5 * 2 ) 
[4571] c:0 is:loop 0 , 3 , move 3 - ua , 2 / 8  decode:loop 0 , 3 , move 3 - ua , 2 / 9 
[4572] c:3 is:( move ua + 2 , 6 ; move 2 , 4 )  decode:( move ua + 2 , 6 ; move 2 , 4 ) 
[4573] c:3 is:loop 0 , 3 , move 2 - ua , 3 * 9  decode:loop 0 , 3 , move 2 - ua , 3 * 9 
[4574] c:3 is:( move ua , 0 ; move 4 , 4 / 3 )  decode:( move ua , 0 ; move 4 , 4 / 3 ) 
[4575] c:0 is:( move 3 , 2 / 3 ; move 2 , ul )  decode:( move 3 , 2 / 2 ; move 2 , ul ) 
[4576] c:0 is:( move 4 , 3 ; move ua + 3 , 4 )  decode:( move 4 , 3 ; move 3 + ua , 4 ) 
[4577] c:0 is:( move 4 , 4 ; move ua , 2 - 3 )  decode:( move 3 , 4 ; move ua , 2 - 3 ) 
[4578] c:0 is:( move 4 , 2 - 3 ; move 3 , ul )  decode:( move 3 , 2 - 3 ; move 3 , ul ) 
[4579] c:3 is:( move ua + 3 , 4 ; move 2 , 5 )  decode:( move ua + 3 , 4 ; move 2 , 5 ) 
[4580] c:3 is:( move ua + 3 , 6 ; move 3 , 2 )  decode:( move ua + 3 , 6 ; move 3 , 2 ) 
[4581] c:3 is:( move ua + 2 , 3 ; move 4 , 5 )  decode:( move ua + 2 , 3 ; move 4 , 5 ) 
[4582] c:0 is:( move 4 , ul ; move 3 , 2 - 3 )  decode:loop 0 , 3 , move ua - 4 , v0 
[4583] c:0 is:( move 2 , 6 ; move ua , 2 - 3 )  decode:( move ua , ua * 6 ; move 2 , ul ) 
[4584] c:2 is:( move 4 + 3 , 3 ; move 3 , ul )  decode:( move 4 + 3 , 3 ; move 3 , ul ) 
[4585] c:0 is:( move 4 , 2 ; move 0 - ua , 7 )  decode:( move 4 , 2 ; move ua , 7 ) 
[4586] c:3 is:( move 2 , 0 - 9 ; move ua , 2 )  decode:( move 2 , 0 - 9 ; move ua , 2 ) 
[4587] c:0 is:( move 2 , 9 ; move ua , 0 - 2 )  decode:( move ua , 4 ; move 2 , 2 ) 
[4588] c:3 is:( move 4 , 3 ; move ua + 2 , 5 )  decode:( move 4 , 3 ; move ua + 2 , 5 ) 
[4589] c:0 is:( move 3 , 6 ; move 0 - ua , 4 )  decode:( move 3 , 6 ; move ua , 4 + 4 ) 
[4590] c:3 is:( move ua , 2 ; move 4 , 3 / 2 )  decode:( move ua , 2 ; move 4 , 3 / 2 ) 
[4591] c:3 is:( move ua , 3 / 2 ; move 4 , 2 )  decode:( move ua , 3 / 2 ; move 4 , 2 ) 
[4592] c:0 is:( move ua , 4 ; move 4 , 4 + 2 )  decode:( move ua , 4 ; move 4 , 2 + 4 ) 
[4593] c:0 is:( move 5 , 0 - 3 ; move ua , 5 )  decode:( move ul - ua , 0 ; move ua , 5 ) 
[4594] c:3 is:( move ua , 2 * 5 ; move 3 , 2 )  decode:( move ua , 2 * 5 ; move 3 , 2 ) 
[4595] c:0 is:( move 4 , 6 ; move ua , 0 - 3 )  decode:( move ua , 6 ; move 4 , 3 ) 
[4596] c:0 is:( move 4 + 3 , 4 ; move ua , 3 )  decode:( move ua + ul , 4 ; move ua , 3 ) 
[4597] c:3 is:( move ua , 2 ; move 3 , 3 * 4 )  decode:( move ua , 2 ; move 3 , 3 * 4 ) 
[4598] c:0 is:( move ua + 2 , 3 ; move 7 , 2 )  decode:( move ua + 3 , 3 ; move 7 , 2 ) 
[4599] c:3 is:( move ua , 2 ; move 3 , 2 / 4 )  decode:( move ua , 2 ; move 3 , 2 / 4 ) 
[4600] c:0 is:( move 4 , 4 ; move 2 + ua , 4 )  decode:( move 4 , 4 ; move ua + 2 , 4 ) 
[4601] c:0 is:( move 3 , 4 ; move 2 - ua , 4 )  decode:( move 3 , 4 ; move 4 , 2 / 5 ) 
[4602] c:3 is:( move ua , 4 * 4 ; move 2 , 2 )  decode:( move ua , 4 * 4 ; move 2 , 2 ) 
[4603] c:0 is:loop 0 , 4 , move ua , 4 * 0 - 9  decode:loop 0 , 4 , move ua , 4 * 4 / 9 
[4604] c:0 is:( move ua , 2 - 3 ; move 4 , 4 )  decode:( move 4 , :  3 ; move 4 , 4 ) 
[4605] c:0 is:( move 4 , 0 ; move ua , 4 / 3 )  decode:( move 4 , ul / move ua , 4 / 3 ) 
[4606] c:3 is:loop 0 , 4 , move 4 - ua , 4 * 5  decode:loop 0 , 4 , move 4 - ua , 4 * 5 
[4607] c:3 is:( move ua + 2 , 0 ; move 4 , 8 )  decode:( move ua + 2 , 0 ; move 4 , 8 ) 
[4608] c:0 is:loop 0 , 4 , move ua - 4 , 4 * 5  decode:loop 0 , 4 , move 4 - ua , 4 * 5 
[4609] c:3 is:( move 2 - ua , 0 ; move 3 , 8 )  decode:( move 2 - ua , 0 ; move 3 , 8 ) 
[4610] c:0 is:( move ua , 0 ; move 3 , 4 * 5 )  decode:( move ua , 0 ; move 3 , 2 - 3 ) 
[4611] c:0 is:( move 5 , 3 ; move 0 - ua , 5 )  decode:( move 5 , 3 ; move ua , ua * ua ) 
[4612] c:3 is:( move ua , 4 * 3 ; move 3 , 2 )  decode:( move ua , 4 * 3 ; move 3 , 2 ) 
[4613] c:0 is:( move 5 , 4 ; move ua + 3 , 2 )  decode:( move 5 , 4 ; move 3 + ua , 2 ) 
[4614] c:0 is:( move 4 , 4 + move 0 - ua , 4 )  decode:move 4 * 3 , 0 / ua 
[4615] c:0 is:( move 3 , 6 ; move 2 - ua , 2 )  decode:( move 3 , 6 ; move 4 , 2 - 3 ) 
[4616] c:0 is:( move 9 , 2 ; move ua , 0 - 2 )  decode:( move 0 - ua , 0 ; move 9 , 2 ) 
[4617] c:3 is:( move 4 , 0 ; move 4 , ua / 3 )  decode:( move 4 , 0 ; move 4 , ua / 3 ) 
[4618] c:3 is:( move 0 - ua , 6 ; move 5 , 2 )  decode:( move 0 - ua , 6 ; move 5 , 2 ) 
[4619] c:0 is:( move 4 , 5 ; move 3 + ua , 2 )  decode:( move 4 , 5 ; move ua + 3 , 2 ) 
[4620] c:0 is:( move ua , 0 ; move 0 - 8 , 5 )  decode:( move ua , ul / 4 ; move 8 , 5 ) 
[4621] c:3 is:( move ua + 3 , 2 ; move 7 , 2 )  decode:( move ua + 3 , 2 ; move 7 , 2 ) 
[4622] c:3 is:( move ua + 2 , 3 ; move 5 , 4 )  decode:( move ua + 2 , 3 ; move 5 , 4 ) 
[4623] c:2 is:( move 4 + 3 , 3 ; move 3 , ul )  decode:( move 4 + 3 , 3 ; move 3 , ul ) 
[4624] c:0 is:( move ua , 5 ; move 4 , 0 - 4 )  decode:( move 4 , ul ; move ua , 4 ) 
[4625] c:0 is:( move 5 , 2 - 3 ; move ua , 3 )  decode:( move 5 , 0 - 3 ; move ua , 3 ) 
[4626] c:3 is:( move 4 , 6 ; move ua + 2 , 2 )  decode:( move 4 , 6 ; move ua + 2 , 2 ) 
[4627] c:0 is:loop 0 , 4 , move 3 - ua , 4 / 5  decode:loop 0 , 4 , move 0 - 3 , 5 / 4 
[4628] c:3 is:( move 2 - ua , 2 ; move 4 , 5 )  decode:( move 2 - ua , 2 ; move 4 , 5 ) 
[4629] c:3 is:( move 4 , 2 - 3 ; move ua , 4 )  decode:( move 4 , 2 - 3 ; move ua , 4 ) 
[4630] c:0 is:loop 0 , 3 , move 3 - ua , 3 * 8  decode:loop 0 , 3 , move 3 - ua , 4 * 8 
[4631] c:3 is:( move ua , 0 - 4 ; move 4 , 5 )  decode:( move ua , 0 - 4 ; move 4 , 5 ) 
[4632] c:0 is:( move 3 / 2 , 2 ; move 3 , ul )  decode:( move 2 , 2 ; move 3 , ul ) 
[4633] c:0 is:( move ua , 5 ; move 0 - 4 , 4 )  decode:( move ua , 5 ; move 4 , ul ) 
[4634] c:3 is:( move 4 , 3 / 2 ; move ua , 2 )  decode:( move 4 , 3 / 2 ; move ua , 2 ) 
[4635] c:0 is:loop 0 , 4 , move 4 - ua , 5 / 3  decode:loop 0 , 4 , move ua - 4 , 5 / 3 
[4636] c:0 is:( move ua , 0 - 2 ; move 3 , 8 )  decode:( move 3 , 9 ; move ua , 9 / 2 ) 
[4637] c:3 is:( move 4 , 0 - 4 ; move 4 , ul )  decode:( move 4 , 0 - 4 ; move 4 , ul ) 
[4638] c:3 is:( move 6 , 3 ; move ua + 3 , 2 )  decode:( move 6 , 3 ; move ua + 3 , 2 ) 
[4639] c:0 is:( move 4 , 2 ; move 2 - ua , 5 )  decode:( move 4 , 2 ; move 4 , 5 ) 
[4640] c:0 is:( move 3 , 4 * 3 ; move ua , 2 )  decode:( move 3 , 3 * 4 ; move ua , 2 ) 
[4641] c:0 is:( move 0 - 4 , 2 ; move ua , 7 )  decode:( move 4 , 2 ; move ua , 7 ) 
[4642] c:0 is:( move 4 , 0 - 4 ; move ua , 5 )  decode:( move 3 , 0 - 4 ; move ua , 5 ) 
[4643] c:0 is:( move 0 - ua , 3 ; move 5 , 5 )  decode:( move ua , 6 ; move 5 , ua * ua ) 
[4644] c:0 is:( move 4 , 4 ; move 0 - ua , 5 )  decode:( move 4 , 4 ; move ua , ua * ua ) 
[4645] c:1 is:( move ua , 2 / 4 ; move 3 , 2 )  decode:( move ua , 2 / 4 ; move 3 , 2 ) 
[4646] c:3 is:( move 9 , 0 ; move ua + 3 , 2 )  decode:( move 9 , 0 ; move ua + 3 , 2 ) 
[4647] c:3 is:( move 4 , ul ; move 4 , 0 - 4 )  decode:( move 4 , ul ; move 4 , 0 - 4 ) 
[4648] c:0 is:( move ua - 2 , 2 ; move 5 , 4 )  decode:( move 2 - ua , 5 ; move 5 , 4 ) 
[4649] c:0 is:( move ua - 2 , 4 ; move 5 , 2 )  decode:( move 4 , 4 ; move 5 , 2 ) 
[4650] c:3 is:( move 3 , 2 ; move ua , 2 / 4 )  decode:( move 3 , 2 ; move ua , 2 / 4 ) 
[4651] c:0 is:( move 3 , 0 ; move ua , 4 * 5 )  decode:( move 3 , 0 ; move ua , 5 * 4 ) 
[4652] c:0 is:( move 3 , 3 ; move 0 - ua , 7 )  decode:( move 3 , 3 ; move ua , 7 ) 
[4653] c:0 is:( move ua , 3 / 4 ; move 2 , 2 )  decode:( move ua , 4 / 3 ; move 2 , 2 ) 
[4654] c:2 is:( move ua , 0 ; move 4 , 5 / 2 )  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[4655] c:3 is:( move 3 , 3 ; move ua , 3 / 2 )  decode:( move 3 , 3 ; move ua , 3 / 2 ) 
[4656] c:0 is:( move ua - 4 , 3 ; move 4 , 2 )  decode:( move ua - 4 , 0 ; move 4 , 2 ) 
[4657] c:0 is:( move ua , 2 ; move 9 , 0 - 2 )  decode:( move 9 , ua / 2 ; move ua , 2 ) 
[4658] c:3 is:( move 0 - ua , 4 ; move 4 , 5 )  decode:( move 0 - ua , 4 ; move 4 , 5 ) 
[4659] c:3 is:( move 2 - ua , 0 ; move 4 , 7 )  decode:( move 2 - ua , 0 ; move 4 , 7 ) 
[4660] c:0 is:( move 0 - 4 , ul ; move 3 , 5 )  decode:( move 4 , ul ; move 3 - ua , 5 ) 
[4661] c:3 is:( move ua , 0 - 3 ; move 6 , 4 )  decode:( move ua , 0 - 3 ; move 6 , 4 ) 
[4662] c:3 is:( move 2 - ua , 3 ; move 3 , 5 )  decode:( move 2 - ua , 3 ; move 3 , 5 ) 
[4663] c:3 is:( move 6 , 2 ; move ua + 2 , 4 )  decode:( move 6 , 2 ; move ua + 2 , 4 ) 
[4664] c:3 is:( move ua + 2 , 4 ; move 3 , 5 )  decode:( move ua + 2 , 4 ; move 3 , 5 ) 
[4665] c:0 is:( move 2 - ua , 0 ; move 9 , 2 )  decode:( move 4 , 0 ; move 9 , 2 ) 
[4666] c:3 is:( move ua , 0 - 3 ; move 8 , 2 )  decode:( move ua , 0 - 3 ; move 8 , 2 ) 
[4667] c:0 is:( move 3 , 2 - 3 ; move 4 , ul )  decode:( move 4 , 2 - 3 ; move 4 , ul ) 
[4668] c:0 is:( move 4 + 3 , 4 ; move ul , 2 )  decode:( move ua , 4 ; move ul , 2 ) 
[4669] c:3 is:( move 2 , 4 * 4 ; move ua , 2 )  decode:( move 2 , 4 * 4 ; move ua , 2 ) 
[4670] c:0 is:( move 8 , 0 - 2 ; move 2 , ul )  decode:( move 9 , 0 - 2 ; move 2 , ul ) 
[4671] c:0 is:( move 5 , ua - 3 ; move 3 , 2 )  decode:( move 5 , 0 - 3 ; move 3 , 2 ) 
[4672] c:0 is:( move 0 - ua , 0 ; move 8 , 5 )  decode:( move ua , ua / 2 ; move 8 , 5 ) 
[4673] c:0 is:( move 2 , 5 ; move 2 - ua , 4 )  decode:( move 2 , 5 ; move ua - ul , 4 ) 
[4674] c:3 is:( move ua + 4 , 4 ; move 4 , 2 )  decode:( move ua + 4 , 4 ; move 4 , 2 ) 
[4675] c:0 is:( move 3 / 2 , 4 ; move ua , 2 )  decode:( move 2 , 4 ; move ua , 2 ) 
[4676] c:3 is:( move 4 , 2 ; move ua , 3 / 2 )  decode:( move 4 , 2 ; move ua , 3 / 2 ) 
[4677] c:0 is:( move 4 , 2 ; move ua - 3 , 4 )  decode:( move 4 , 2 ; move 3 - ua , ul ) 
[4678] c:2 is:( move 4 - ua , 2 ; move 5 , 2 )  decode:( move 4 - ua , 2 ; move 5 , 2 ) 
[4679] c:3 is:( move 2 , ua / 4 ; move 3 , 2 )  decode:( move 2 , ua / 4 ; move 3 , 2 ) 
[4680] c:3 is:( move ua , 3 ; move 3 , 2 / 3 )  decode:( move ua , 3 ; move 3 , 2 / 3 ) 
[4681] c:0 is:( move 3 , 8 ; move ua , 0 - 2 )  decode:( move ua , 6 ; move 3 , 2 ) 
[4682] c:0 is:( move ua + 2 , 2 ; move 6 , 4 )  decode:( move 2 + ua , 2 ; move ua , 4 ) 
[4683] c:3 is:( move 2 , 4 ; move ua , 3 / 2 )  decode:( move 2 , 4 ; move ua , 3 / 2 ) 
[4684] c:0 is:( move 9 , 0 ; move ua - 2 , 2 )  decode:( move 9 , 0 ; move 4 , 2 ) 
[4685] c:3 is:( move 2 , ul ; move 2 , 2 / 4 )  decode:( move 2 , ul ; move 2 , 2 / 4 ) 
[4686] c:3 is:( move 3 , 3 ; move ua + 4 , 4 )  decode:( move 3 , 3 ; move ua + 4 , 4 ) 
[4687] c:0 is:( move 5 , 2 ; move ua + 3 , 4 )  decode:( move 5 , 2 ; move 3 + 3 , 4 ) 
[4688] c:3 is:( move ua + 2 , 0 ; move 3 , 9 )  decode:( move ua + 2 , 0 ; move 3 , 9 ) 
[4689] c:0 is:( move 0 - ua , 3 ; move 4 , 6 )  decode:( move ua , 0 ; move 4 , 3 ) 
[4690] c:0 is:( move ua , 6 ; move 3 , 0 - 4 )  decode:( move 3 , 0 - 2 ; move ua , 4 ) 
[4691] c:0 is:( move ua , 6 ; move 0 - 5 , 2 )  decode:( move ua , 6 ; move 5 , ul ) 
[4692] c:0 is:( move ua - 2 , 2 ; move 4 , 5 )  decode:( move 4 , 2 ; move 4 , 5 ) 
[4693] c:0 is:( move 4 , 2 ; move ua - 2 , 5 )  decode:( move 4 , 2 ; move 4 , 5 ) 
[4694] c:0 is:( move 9 , 0 - 2 ; move ua , 2 )  decode:( move ua , 0 - 9 ; move ua , 2 ) 
[4695] c:3 is:( move ua , 3 / 2 ; move 2 , 4 )  decode:( move ua , 3 / 2 ; move 2 , 4 ) 
[4696] c:3 is:( move 7 , 3 ; move ua + 2 , 2 )  decode:( move 7 , 3 ; move ua + 2 , 2 ) 
[4697] c:3 is:( move 3 , 2 ; move ua + 2 , 7 )  decode:( move 3 , 2 ; move ua + 2 , 7 ) 
[4698] c:3 is:( move 8 , 0 ; move ua + 2 , 4 )  decode:( move 8 , 0 ; move ua + 2 , 4 ) 
[4699] c:0 is:( move ua , 4 ; move 4 , 2 - 3 )  decode:( move 4 , 4 ; move ua , ul ) 
[4700] c:0 is:loop 0 , 4 , move 0 - ua , 9 * 4  decode:loop 0 , 4 , move 0 - ua , 0 - 8 
[4701] c:0 is:loop 0 , 4 , move 4 - ua , 3 * 6  decode:loop 0 , 4 , move 4 - ua , v0 / 6 
[4702] c:0 is:( move 4 , 7 ; move ua , 0 - 2 )  decode:( move ua , ua * ua ; move 4 , 2 ) 
[4703] c:3 is:( move ua , 2 / 3 ; move 4 , 2 )  decode:( move ua , 2 / 3 ; move 4 , 2 ) 
[4704] c:0 is:( move ua , 0 ; move 8 + 2 , 4 )  decode:( move ua , 0 ; move ua + 4 , 4 ) 
[4705] c:0 is:( move 2 , 3 ; move 4 + 4 , ul )  decode:( move 2 , 3 ; move  move 7 , ul ) 
[4706] c:3 is:( move 2 , 4 * 3 ; move 2 , ul )  decode:( move 2 , 4 * 3 ; move 2 , ul ) 
[4707] c:0 is:( move ua , 3 ; move 0 - 8 , 2 )  decode:( move ua , 3 ; move 8 , ul ) 
[4708] c:0 is:( move 0 - ua , 6 ; move 3 , 4 )  decode:( move ua , 9 ; move 3 , ul ) 
[4709] c:0 is:( move 8 , 2 ; move ua + 2 , 2 )  decode:( move ua + 2 , 2 ; move 9 , 2 ) 
[4710] c:0 is:( move 4 , 8 ; move ua , 0 - 2 )  decode:( move ua , 6 ; move 4 , 2 ) 
[4711] c:3 is:( move 4 , 5 ; move ua , 2 - 3 )  decode:( move 4 , 5 ; move ua , 2 - 3 ) 
[4712] c:3 is:( move 4 , ul ; move 3 * 3 , 2 )  decode:( move 4 , ul ; move 3 * 3 , 2 ) 
[4713] c:0 is:( move ua , 6 ; move 3 + 4 , 2 )  decode:( move ua , 6 ; move  3 , 4 + v) 0 
[4714] c:3 is:( move ua , 0 - 3 ; move 9 , 2 )  decode:( move ua , 0 - 3 ; move 9 , 2 ) 
[4715] c:0 is:loop 0 , 4 , move 2 - ua , 9 / 2  decode:loop 0 , 4 , move 2 - ua , 0 - 8 
[4716] c:3 is:( move 3 , 0 - 9 ; move ua , 2 )  decode:( move 3 , 0 - 9 ; move ua , 2 ) 
[4717] c:3 is:( move 5 , 0 - 3 ; move 5 , ul )  decode:( move 5 , 0 - 3 ; move 5 , ul ) 
[4718] c:0 is:( move ua , 2 ; move 4 + 2 , 7 )  decode:( move ua , 2 ; move ua , 7 ) 
[4719] c:3 is:( move 3 , 4 * 4 ; move ua , 2 )  decode:( move 3 , 4 * 4 ; move ua , 2 ) 
[4720] c:3 is:( move 3 , 3 ; move ua , 4 * 3 )  decode:( move 3 , 3 ; move ua , 4 * 3 ) 
[4721] c:3 is:( move 6 , 4 ; move ua + 3 , 2 )  decode:( move 6 , 4 ; move ua + 3 , 2 ) 
[4722] c:0 is:( move ua + 2 , 4 ; move 7 , 2 )  decode:( move ua + 2 , 4 ; move ua , 2 ) 
[4723] c:0 is:( move ua , 0 ; move 2 , 3 - 9 )  decode:( move 2 , 0 ; move ua , ul ) 
[4724] c:0 is:( move ua , 6 ; move 4 , 0 - 4 )  decode:( move 4 , 6 ; move ua , 0 - 4 ) 
[4725] c:0 is:( move 3 - ua , 4 ; move 3 , 4 )  decode:( move 3 , ul ; move 3 , 4 ) 
[4726] c:0 is:( move ua + 3 , 2 ; move 6 , 4 )  decode:( move ua + 3 , 2 ; move ua , 4 ) 
[4727] c:0 is:( move 5 , 2 ; move 3 , 2 / ua )  decode:( move ua , 2 ; move 3 , 2 / ua ) 
[4728] c:0 is:( move ua , 0 ; move 8 + 3 , 4 )  decode:( move 4 , 0 ; move 3 + 3 3 , 4 ) 
[4729] c:3 is:( move 3 , 2 - 3 ; move 5 , ul )  decode:( move 3 , 2 - 3 ; move 5 , ul ) 
[4730] c:3 is:( move 4 , 3 ; move ua + 4 , 4 )  decode:( move 4 , 3 ; move ua + 4 , 4 ) 
[4731] c:3 is:( move 3 , 3 ; move ua , 2 / 4 )  decode:( move 3 , 3 ; move ua , 2 / 4 ) 
[4732] c:0 is:( move 7 , 4 ; move ua + 2 , 2 )  decode:( move ua + ul , 4 ; move 8 , 2 ) 
[4733] c:0 is:( move ua + 2 , 3 ; move 6 , 4 )  decode:( move ua + 2 , 3 ; move ua , 4 ) 
[4734] c:3 is:( move 4 , 6 ; move 2 - ua , 2 )  decode:( move 4 , 6 ; move 2 - ua , 2 ) 
[4735] c:0 is:( move 2 / 4 , 4 ; move ua , 2 )  decode:( move ul , 4 ; move ua , 2 ) 
[4736] c:3 is:( move 3 , ua / 4 ; move 3 , 2 )  decode:( move 3 , ua / 4 ; move 3 , 2 ) 
[4737] c:0 is:( move ua , 2 ; move 4 , 2 * 5 )  decode:( move ua , 2 ; move 4 , 9 ) 
[4738] c:0 is:( move 4 + 3 , ul ; move 3 , 4 )  decode:( move ua , ul ; move 3 , 4 ) 
[4739] c:0 is:( move ua , 3 ; move 9 , 0 - 2 )  decode:( move 3 + ua , 3 ; move ua , 2 ) 
[4740] c:0 is:( move 0 - ua , 9 ; move 3 , 2 )  decode:( move ua , 9 ; move 3 , 2 - 3 ) 
[4741] c:0 is:( move 4 , 4 ; move 2 - ua , 4 )  decode:( move 4 , 4 ; move 4 , ul ) 
[4742] c:0 is:loop 0 , 4 , move 4 - ua , 4 * 6  decode:loop 0 , 4 , move 4 - ua , 4 * 3 
[4743] c:3 is:( move 3 , 3 ; move 4 , 2 / ua )  decode:( move 3 , 3 ; move 4 , 2 / ua ) 
[4744] c:3 is:( move ua , 0 - 4 ; move 5 , 5 )  decode:( move ua , 0 - 4 ; move 5 , 5 ) 
[4745] c:1 is:( move ul , 2 ; move 3 , 2 / 4 )  decode:( move ul , 2 ; move 3 , 3 / 2 ) 
[4746] c:3 is:( move 5 , 3 ; move ua + 2 , 5 )  decode:( move 5 , 3 ; move ua + 2 , 5 ) 
[4747] c:0 is:( move 7 , 3 ; move ua + 3 , 2 )  decode:( move 7 , 3 ; move 9 , 2 ) 
[4748] c:1 is:( move 4 , 2 / 4 ; move ua , 2 )  decode:( move 4 , 3 / 4 ; move ua , 2 ) 
[4749] c:0 is:( move 6 , 3 ; move ua , 0 - 5 )  decode:( move ua , 3 ; move 5 , 5 / 4 ) 
[4750] c:0 is:( move 2 , 6 ; move ua + 2 , 5 )  decode:( move 3 , 2 / 3 ; move 8 , 5 ) 
[4751] c:0 is:( move 2 , 6 ; move 3 + ua , 4 )  decode:( move 2 , 6 ; move ua + 3 , 4 ) 
[4752] c:0 is:( move 6 , 4 ; move ua , 0 - 4 )  decode:( move ua , 4 ; move ua , 0 - 4 ) 
[4753] c:0 is:( move ua , 6 ; move 3 , 2 - 3 )  decode:( move 3 , 2 ; move ua , ul ) 
[4754] c:0 is:( move 4 , 6 ; move ua , 0 - 4 )  decode:( move 0 - ua , 2 ; move 4 , 4 ) 
[4755] c:3 is:( move 3 , 5 ; move ua + 3 , 4 )  decode:( move 3 , 5 ; move ua + 3 , 4 ) 
[4756] c:0 is:( move 3 , 4 ; move ua , 2 / 3 )  decode:( move 3 , 4 ; move ua , 7 ) 
[4757] c:3 is:( move ua , 2 / 6 ; move 2 , 2 )  decode:( move ua , 2 / 6 ; move 2 , 2 ) 
[4758] c:0 is:( move 3 , 6 ; move 0 - 4 , ul )  decode:( move 3 , 6 ; move 4 , 2 ) 
[4759] c:3 is:( move 2 - ua , 3 ; move 5 , 4 )  decode:( move 2 - ua , 3 ; move 5 , 4 ) 
[4760] c:1 is:( move 2 , 2 / 4 ; move ua , 4 )  decode:( move 2 , 4 / ua ; move ua , 4 ) 
[4761] c:0 is:( move 4 , 4 ; move 4 + 2 , ul )  decode:( move 4 , 4 ; move ua , ul ) 
[4762] c:3 is:( move ua , 2 * 5 ; move 4 , 2 )  decode:( move ua , 2 * 5 ; move 4 , 2 ) 
[4763] c:3 is:( move 4 , 3 ; move 2 - ua , 5 )  decode:( move 4 , 3 ; move 2 - ua , 5 ) 
[4764] c:0 is:( move ua , 9 ; move 3 , 0 - 2 )  decode:( move 3 , 4 ; move ua , 2 ) 
[4765] c:1 is:( move 9 , 0 ; move ua + 2 , 4 )  decode:( move 9 , 0 ; move 9 , 4 ) 
[4766] c:1 is:( move 3 , 2 ; move ua , 2 / 5 )  decode:( move 3 , 2 ; move ua , 2 / 5 ) 
[4767] c:0 is:( move ua , 8 ; move 4 , 0 - 2 )  decode:( move 4 , 9 ; move ua , 2 ) 
[4768] c:0 is:loop 0 , 4 , move 3 - ua , 2 * 9  decode:loop 0 , 4 , move 3 - ua , 9 * 9 
[4769] c:0 is:( move 0 - 4 , 5 ; move ua , 5 )  decode:( move 4 , ua * ua ; move ua , 5 ) 
[4770] c:0 is:( move 9 , 0 ; move 0 - ua , 5 )  decode:( move 9 , 0 ; move ua , ua * ua ) 
[4771] c:0 is:loop 0 , 4 , move 4 - ua , 2 / 7  decode:loop 0 , 4 , move 0 - 2 , 2 / 0  
[4772] c:3 is:( move 4 , 0 ; move 4 , 4 / ua )  decode:( move 4 , 0 ; move 4 , 4 / ua ) 
[4773] c:0 is:( move ua , 0 ; move 0 - 7 , 7 )  decode:( move ua , 0 ; move 7 , 7 ) 
[4774] c:0 is:loop 0 , 3 , move 3 - ua , 3 / 8  decode:loop 0 , 4 , move 4 - ua , 2 / 5 
[4775] c:3 is:( move ua , 0 ; move 5 , 4 / 3 )  decode:( move ua , 0 ; move 5 , 4 / 3 ) 
[4776] c:3 is:( move 9 , 0 - 3 ; move ua , 2 )  decode:( move 9 , 0 - 3 ; move ua , 2 ) 
[4777] c:0 is:( move 2 , 3 ; move 0 - ua , 9 )  decode:( move 2 , 3 ; move ua , 4 * 3 ) 
[4778] c:0 is:( move ua , 2 - 3 ; move 4 , 5 )  decode:( move 4 , 7 ; move ua , 5 ) 
[4779] c:3 is:( move ua , 4 ; move 2 , 2 / 4 )  decode:( move ua , 4 ; move 2 , 2 / 4 ) 
[4780] c:0 is:( move 0 - ua , 2 ; move 3 , 9 )  decode:( move ua , 5 ; move 3 , 9 / 4 ) 
[4781] c:0 is:( move 5 , 0 ; move ua , 4 / 3 )  decode:( move 4 , 0 ; move ua , 4 / 3 ) 
[4782] c:3 is:( move 4 , 4 * 3 ; move ua , 2 )  decode:( move 4 , 4 * 3 ; move ua , 2 ) 
[4783] c:0 is:( move 4 , 0 ; move ua , 3 + 8 )  decode:( move 4 , 0 ; move ua , ua / 4 ) 
[4784] c:3 is:( move 2 , 9 ; move ua + 2 , 2 )  decode:( move 2 , 9 ; move ua + 2 , 2 ) 
[4785] c:0 is:( move 4 + 3 , 3 ; move ua , 5 )  decode:( move ua + ul , 3 ; move ua , 5 ) 
[4786] c:3 is:( move ua , 4 / 3 ; move 3 , 2 )  decode:( move ua , 4 / 3 ; move 3 , 2 ) 
[4787] c:0 is:( move 6 , 2 ; move ua + 3 , 4 )  decode:( move ua , 2 ; move ua + 3 , 4 ) 
[4788] c:0 is:( move 0 - 4 , 5 ; move 4 , ul )  decode:( move 4 , 9 ; move 4 , 0 - 4 ) 
[4789] c:0 is:loop 0 , 3 , move ua - 9 , 3 - 4  decode:loop 0 , 3 , move 0 - 3 , 3 - v0 
[4790] c:0 is:( move 3 , 2 ; move ua , 5 * 3 )  decode:( move 3 , 2 ; move ua , 0 - 9 ) 
[4791] c:0 is:( move 9 , 0 ; move ua - 3 , 2 )  decode:( move 9 , 0 ; move 3 - ua , 2 ) 
[4792] c:3 is:( move 4 , 2 - 3 ; move 4 , ul )  decode:( move 4 , 2 - 3 ; move 4 , ul ) 
[4793] c:3 is:( move 4 , 5 ; move ua + 2 , 4 )  decode:( move 4 , 5 ; move ua + 2 , 4 ) 
[4794] c:3 is:( move ua , 0 ; move 4 , 7 + 4 )  decode:( move ua , 0 ; move 4 , 7 + 4 ) 
[4795] c:0 is:( move 0 - ua , 3 ; move 3 , 8 )  decode:( move ua , 6 ; move 3 , 8 ) 
[4796] c:0 is:( move ua , 2 ; move 0 - 3 , 9 )  decode:( move ua , 2 ; move 3 , 9 ) 
[4797] c:3 is:( move 3 , 2 ; move ua , 4 / 3 )  decode:( move 3 , 2 ; move ua , 4 / 3 ) 
[4798] c:3 is:( move ua + 2 , 3 ; move 5 , 5 )  decode:( move ua + 2 , 3 ; move 5 , 5 ) 
[4799] c:0 is:( move 4 , 4 ; move 2 - ua , 4 )  decode:( move 4 , 4 ; move 4 , ul ) 
[4800] c:0 is:( move 4 , 2 ; move 0 - 7 , ul )  decode:( move 4 , 2 ; move ua + ul , ul ) 
[4801] c:0 is:( move 3 , 9 ; move ua , 0 - 2 )  decode:( move ua , 7 ; move 3 , 2 ) 
[4802] c:3 is:( move 4 , 2 - 3 ; move ua , 5 )  decode:( move 4 , 2 - 3 ; move ua , 5 ) 
[4803] c:0 is:( move 2 - ua , 3 ; move 4 , 5 )  decode:( move 4 , 6 ; move 4 , 5 ) 
[4804] c:3 is:( move ua , 0 - 9 ; move 3 , 2 )  decode:( move ua , 0 - 9 ; move 3 , 2 ) 
[4805] c:0 is:( move ua , 5 / 2 ; move 3 , 2 )  decode:( move ua , 0 - 2 ; move 3 , 2 ) 
[4806] c:3 is:( move ua + 2 , 6 ; move 5 , 2 )  decode:( move ua + 2 , 6 ; move 5 , 2 ) 
[4807] c:0 is:( move 2 , 3 / 2 ; move ua , 5 )  decode:( move 3 , ua / 4 ; move ua , 5 ) 
[4808] c:0 is:( move 4 , 8 ; move 0 - ua , 2 )  decode:( move 4 , 8 ; move ua , ul ) 
[4809] c:3 is:( move 5 , 4 ; move 3 - ua , 2 )  decode:( move 5 , 4 ; move 3 - ua , 2 ) 
[4810] c:3 is:( move 3 , 0 ; move ua , 5 / 4 )  decode:( move 3 , 0 ; move ua , 5 / 4 ) 
[4811] c:0 is:( move 5 , 2 ; move 2 - ua , 5 )  decode:( move 5 , 2 ; move 4 , 5 ) 
[4812] c:0 is:( move ua + 2 , 3 ; move 8 , 2 )  decode:( move 8 , 3 ; move 8 , 2 ) 
[4813] c:0 is:( move ua , 0 - 5 ; move 4 , 5 )  decode:( move 4 , 5 / 5 ; move 4 , 5 ) 
[4814] c:0 is:( move 3 , 4 ; move 3 - ua , 4 )  decode:( move 3 , 4 ; move 3 , ul ) 
[4815] c:3 is:( move 9 , 3 ; move ua , 0 - 2 )  decode:( move 9 , 3 ; move ua , 0 - 2 ) 
[4816] c:3 is:( move 4 , 2 ; move ua , 2 * 5 )  decode:( move 4 , 2 ; move ua , 2 * 5 ) 
[4817] c:3 is:( move 2 , ul ; move 3 , 2 / 4 )  decode:( move 2 , ul ; move 3 , 2 / 4 ) 
[4818] c:0 is:loop 0 , 4 , move ua - 9 , 2 * 3  decode:loop 0 , 3 , move 4 , 3 * 3 
[4819] c:3 is:( move 2 , 4 ; move ua , 5 * 2 )  decode:( move 2 , 4 ; move ua , 5 * 2 ) 
[4820] c:0 is:( move ua , 2 / 4 ; move 4 , 2 )  decode:( move ua , 9 + 4 ; move 5 , 2 ) 
[4821] c:3 is:( move ua , 0 - 3 ; move 7 , 4 )  decode:( move ua , 0 - 3 ; move 7 , 4 ) 
[4822] c:3 is:( move ua + 4 , 4 ; move 3 , 4 )  decode:( move ua + 4 , 4 ; move 3 , 4 ) 
[4823] c:0 is:( move 5 , 5 ; move 0 - ua , 4 )  decode:( move 5 , 9 ; move ua , 2 / 3 ) 
[4824] c:0 is:( move ua - 3 , 2 ; move 5 , 4 )  decode:( move 3 , 2 ; move ua - ul , 4 ) 
[4825] c:3 is:( move ua , 4 * 4 ; move 3 , 2 )  decode:( move ua , 4 * 4 ; move 3 , 2 ) 
[4826] c:0 is:( move 3 , 6 ; move ua , 2 - 3 )  decode:( move ua , ua * ua ; move 3 , ul ) 
[4827] c:0 is:( move 3 , 6 + 4 ; move ua , 2 )  decode:( move 3 , 0 - 4 ; move ua , 2 ) 
[4828] c:0 is:loop 0 , 4 , move 4 - ua , 2 - 9  decode:loop 0 , 3 , move 0 - 3 , 9 / 4 
[4829] c:0 is:loop 0 , 4 , move 2 - ua , 3 * 9  decode:loop 0 , 4 , move 2 - ua , 9 * 3 
[4830] c:3 is:( move 3 , 3 ; move ua + 5 , 4 )  decode:( move 3 , 3 ; move ua + 5 , 4 ) 
[4831] c:3 is:( move ua , 3 ; move 3 , 4 * 3 )  decode:( move ua , 3 ; move 3 , 4 * 3 ) 
[4832] c:0 is:( move ua - 3 , 5 ; move 4 , 2 )  decode:( move 3 , 5 ; move 4 , 2 ) 
[4833] c:3 is:( move 3 , 4 * 3 ; move ua , 3 )  decode:( move 3 , 4 * 3 ; move ua , 3 ) 
[4834] c:0 is:( move ua - 3 , 3 ; move 4 , 4 )  decode:( move 3 , 3 ; move 4 , 4 ) 
[4835] c:0 is:( move 4 , 2 ; move ua , 2 / 4 )  decode:loop 0 , 3 , move 3 - ua , 2 * v0 
[4836] c:0 is:( move ua + 3 , 5 ; move 3 , 4 )  decode:( move ua + 3 , ua + 3 , 4 4 ) 
[4837] c:0 is:( move 5 , ul ; move 4 , 0 - 4 )  decode:( move ua , ul ; move 4 , 0 - 4 ) 
[4838] c:3 is:( move ul , 0 ; move 4 , 4 / 3 )  decode:( move ul , 0 ; move 4 , 4 / 3 ) 
[4839] c:0 is:( move ua , 2 / 3 ; move 5 , 2 )  decode:( move ua , 4 / ua ; move 5 , 2 ) 
[4840] c:3 is:( move ua + 2 , 4 ; move 5 , 4 )  decode:( move ua + 2 , 4 ; move 5 , 4 ) 
[4841] c:3 is:( move ua , 3 / 2 ; move 5 , 2 )  decode:( move ua , 3 / 2 ; move 5 , 2 ) 
[4842] c:3 is:( move 3 , 2 ; move ua + 2 , 8 )  decode:( move 3 , 2 ; move ua + 2 , 8 ) 
[4843] c:0 is:( move 5 , 2 - 3 ; move 3 , ul )  decode:( move 3 , 2 - 3 ; move 3 , ul ) 
[4844] c:0 is:( move 3 , 2 / 4 ; move 2 , ul )  decode:( move 3 , 2 / 2 ; move 3 , ul ) 
[4845] c:0 is:( move 2 , 2 * 5 ; move ua , 4 )  decode:( move 2 , 0 - 2 ; move ua , 4 ) 
[4846] c:3 is:( move ua + 2 , 6 ; move 3 , 4 )  decode:( move ua + 2 , 6 ; move 3 , 4 ) 
[4847] c:0 is:( move 2 , 4 ; move 3 - ua , 5 )  decode:( move 4 - ua , 4 ; move 3 , 5 ) 
[4848] c:3 is:( move ua , 0 - 2 ; move 8 , 4 )  decode:( move ua , 0 - 2 ; move 8 , 4 ) 
[4849] c:0 is:( move 5 , 8 ; move ua , 0 - 2 )  decode:( move ua , 9 ; move 5 , 2 ) 
[4850] c:0 is:( move ua , 2 ; move 4 , 3 * 5 )  decode:( move ua , 2 ; move 4 , 0 - 4 ) 
[4851] c:3 is:( move 3 , 8 ; move ua + 3 , 2 )  decode:( move 3 , 8 ; move ua + 3 , 2 ) 
[4852] c:0 is:( move 3 / 2 , 4 ; move ua , 4 )  decode:( move 2 , 4 ; move ua , 4 ) 
[4853] c:0 is:( move 3 / 2 , 3 ; move 4 , ul )  decode:( move 2 , 4 ; move 4 , ul ) 
[4854] c:0 is:( move 4 , 9 ; move 0 - ua , 2 )  decode:( move 4 , 9 ; move ua , 2 ) 
[4855] c:3 is:( move ua , 2 ; move 9 , 0 - 4 )  decode:( move ua , 2 ; move 9 , 0 - 4 ) 
[4856] c:3 is:( move 3 , 4 * 3 ; move ua , 4 )  decode:( move 3 , 4 * 3 ; move ua , 4 ) 
[4857] c:0 is:( move 4 , 3 / 4 ; move ua , 2 )  decode:( move 4 , 4 / 5 ; move ua , 2 ) 
[4858] c:3 is:( move 9 , 0 ; move ua + 3 , 4 )  decode:( move 9 , 0 ; move ua + 3 , 4 ) 
[4859] c:0 is:loop 0 , 4 , move ua - 8 , 4 * 3  decode:loop 0 , 4 , move  4 - ua , 4 * 3 
[4860] c:0 is:( move 3 - ua , 4 ; move 4 , 4 )  decode:( move 3 , ul ; move 4 , ul ) 
[4861] c:0 is:( move 4 , 2 ; move 2 - ua , 7 )  decode:( move 4 , 2 ; move 4 , 7 - 5 ) 
[4862] c:0 is:( move 2 , 4 ; move ua , 3 / 4 )  decode:( move 2 , 4 ; move ua , 7 ) 
[4863] c:3 is:( move 4 , 3 / 2 ; move ua , 4 )  decode:( move 4 , 3 / 2 ; move ua , 4 ) 
[4864] c:3 is:( move 3 , 2 - 3 ; move ua , 7 )  decode:( move 3 , 2 - 3 ; move ua , 7 ) 
[4865] c:0 is:( move 4 - ua , 4 ; move 5 , 2 )  decode:( move 2 , ul ; move 5 , 5 ) 
[4866] c:0 is:( move 9 , 2 ; move ua - 2 , 2 )  decode:( move 9 , 2 ; move 4 , 2 ) 
[4867] c:0 is:loop 0 , 4 , move ua - 8 , 0 - 8  decode:loop 0 , 4 , move v0 - 4 , 2 
[4868] c:0 is:loop 0 , 4 , move 4 - ua , 2 / 8  decode:loop 0 , 4 , move 4 - ua , 2 / 9 
[4869] c:3 is:loop 0 , 4 , move ua - 3 , 3 * 9  decode:loop 0 , 4 , move ua - 3 , 3 * 9 
[4870] c:0 is:( move 5 , 2 / ua ; move 4 , 2 )  decode:( move 5 , 2 / ua ; move 5 , 2 ) 
[4871] c:0 is:( move ua , 6 ; move 4 + 3 , 3 )  decode:( move 3 + 3 , 6 ; move ua , 3 ) 
[4872] c:0 is:( move 2 , 6 ; move ua , 2 / 3 )  decode:( move 2 , 6 ; move ua , 2 / 4 ) 
[4873] c:0 is:( move 4 , 2 ; move ua , 4 / 3 )  decode:( move 4 , 2 ; move ua , 3 / 4 ) 
[4874] c:3 is:( move 2 , 2 / 4 ; move 4 , ul )  decode:( move 2 , 2 / 4 ; move 4 , ul ) 
[4875] c:3 is:( move 0 - ua , 6 ; move 4 , 5 )  decode:( move 0 - ua , 6 ; move 4 , 5 ) 
[4876] c:3 is:( move ul , 2 / 3 ; move 3 , 4 )  decode:( move ul , 2 / 3 ; move 3 , 4 ) 
[4877] c:3 is:( move 5 , 3 ; move ua , 3 / 2 )  decode:( move 5 , 3 ; move ua , 3 / 2 ) 
[4878] c:3 is:( move ua , 4 / 3 ; move 2 , 4 )  decode:( move ua , 4 / 3 ; move 2 , 4 ) 
[4879] c:0 is:loop 0 , 4 , move 3 - ua , 3 * 9  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[4880] c:3 is:( move 9 , 0 - 4 ; move ua , 2 )  decode:( move 9 , 0 - 4 ; move ua , 2 ) 
[4881] c:3 is:( move ua + 2 , 6 ; move 4 , 4 )  decode:( move ua + 2 , 6 ; move 4 , 4 ) 
[4882] c:0 is:( move ua , 9 ; move 0 - 3 , 3 )  decode:( move ua , 9 ; move 3 , 3 + 4 ) 
[4883] c:0 is:loop 0 , 4 , move ua - 4 , 3 - 9  decode:loop 0 , 4 , move 2 , 2 / 9 
[4884] c:0 is:( move 4 , 0 ; move ua , 4 / 5 )  decode:( move 4 , 0 ; move ua , 4 / 3 ) 
[4885] c:2 is:( move 4 , ul ; move 3 , 2 / 3 )  decode:( move 4 , ul ; move 3 , 2 / 3 ) 
[4886] c:3 is:( move ua + 2 , 3 ; move 7 , 4 )  decode:( move ua + 2 , 3 ; move 7 , 4 ) 
[4887] c:0 is:( move ua + 2 , 6 ; move 6 , 2 )  decode:( move ua + 2 , 6 ; move ua , 2 ) 
[4888] c:3 is:( move ua , 4 / 3 ; move 4 , 2 )  decode:( move ua , 4 / 3 ; move 4 , 2 ) 
[4889] c:3 is:( move 2 , 4 ; move ua , 4 / 3 )  decode:( move 2 , 4 ; move ua , 4 / 3 ) 
[4890] c:3 is:( move 4 , 0 ; move ua , 5 / 4 )  decode:( move 4 , 0 ; move ua , 5 / 4 ) 
[4891] c:3 is:( move 3 , ul ; move 3 , 2 / 4 )  decode:( move 3 , ul ; move 3 , 2 / 4 ) 
[4892] c:3 is:( move ua + 2 , 9 ; move 3 , 2 )  decode:( move ua + 2 , 9 ; move 3 , 2 ) 
[4893] c:3 is:( move 4 , 5 * 3 ; move ua , 2 )  decode:( move 4 , 5 * 3 ; move ua , 2 ) 
[4894] c:0 is:( move 9 , 3 ; move 2 + ua , 2 )  decode:( move 9 , 3 ; move ua + 2 , 2 ) 
[4895] c:3 is:( move 4 , 0 ; move ua + 3 , 9 )  decode:( move 4 , 0 ; move ua + 3 , 9 ) 
[4896] c:3 is:( move ua , 4 ; move 3 , 2 / 4 )  decode:( move ua , 4 ; move 3 , 2 / 4 ) 
[4897] c:0 is:( move 4 , 9 ; move ua , 0 - 2 )  decode:( move ua , 4 ; move 4 , 2 ) 
[4898] c:3 is:( move 2 , 4 * 3 ; move 4 , ul )  decode:( move 2 , 4 * 3 ; move 4 , ul ) 
[4899] c:0 is:( move 5 , 2 ; move 4 , 2 / ua )  decode:( move 3 , 2 ; move ua , 2 / ua ) 
[4900] c:0 is:( move ua , 3 ; move 0 - 4 , 8 )  decode:( move ua , 3 ; move 4 , ua * ua ) 
[4901] c:0 is:( move 0 - 4 , 6 ; move ua , 5 )  decode:( move 4 , 9 ; move ua , ua * ua ) 
[4902] c:0 is:( move 2 , 9 ; move 2 - ua , 2 )  decode:( move 2 , 9 ; move 5 , 2 ) 
[4903] c:3 is:( move 4 , 6 ; move ua + 2 , 4 )  decode:( move 4 , 6 ; move ua + 2 , 4 ) 
[4904] c:3 is:( move ua , 2 / 6 ; move 3 , 2 )  decode:( move ua , 2 / 6 ; move 3 , 2 ) 
[4905] c:3 is:( move 3 , ul ; move 3 , 4 * 3 )  decode:( move 3 , ul ; move 3 , 4 * 3 ) 
[4906] c:3 is:( move 3 , 2 ; move 3 - ua , 7 )  decode:( move 3 , 2 ; move 3 - ua , 7 ) 
[4907] c:3 is:( move ua , 2 * 5 ; move 5 , 2 )  decode:( move ua , 2 * 5 ; move 5 , 2 ) 
[4908] c:0 is:( move 2 - ua , 0 ; move 8 , 5 )  decode:( move 4 , ua / 2 ; move 8 , 2 ) 
[4909] c:0 is:( move ua , 9 ; move 4 , 0 - 2 )  decode:( move 4 , 9 ; move ua , 0 - 2 ) 
[4910] c:3 is:( move 3 , 4 ; move 3 - ua , 5 )  decode:( move 3 , 4 ; move 3 - ua , 5 ) 
[4911] c:0 is:( move 4 , 7 ; move 2 - ua , 2 )  decode:( move 4 , 7 ; move 4 , 2 ) 
[4912] c:0 is:loop 0 , 4 , move 2 - ua , 4 * 9  decode:loop 0 , 4 , move 2 - ua , 9 * 3 
[4913] c:0 is:( move 3 , 2 / 6 ; move ua , 2 )  decode:( move 3 , 2 / 9 ; move ua , 2 ) 
[4914] c:3 is:( move ua , 3 / 2 ; move 4 , 4 )  decode:( move ua , 3 / 2 ; move 4 , 4 ) 
[4915] c:3 is:( move 2 , ul ; move 4 , 2 / 4 )  decode:( move 2 , ul ; move 4 , 2 / 4 ) 
[4916] c:0 is:( move ua - 2 , 6 ; move 3 , 4 )  decode:( move 2 - ua , 9 ; move 3 , 4 ) 
[4917] c:3 is:( move 0 - ua , 9 ; move 4 , 2 )  decode:( move 0 - ua , 9 ; move 4 , 2 ) 
[4918] c:3 is:( move 9 , 0 - 3 ; move ua , 3 )  decode:( move 9 , 0 - 3 ; move ua , 3 ) 
[4919] c:3 is:( move 4 , 4 * 4 ; move ua , 2 )  decode:( move 4 , 4 * 4 ; move ua , 2 ) 
[4920] c:0 is:( move 4 , 2 ; move ua , 0 - 9 )  decode:( move 3 , 2 ; move ua , 9 ) 
[4921] c:0 is:( move 3 , 3 ; move 4 - ua , 5 )  decode:( move 3 , 3 ; move 3 , 2 ) 
[4922] c:0 is:( move ua , 2 ; move 4 , 3 / 4 )  decode:( move ua , 2 ; move 4 , ul / 4 ) 
[4923] c:3 is:( move 2 - ua , 3 ; move 4 , 6 )  decode:( move 2 - ua , 3 ; move 4 , 6 ) 
[4924] c:0 is:( move 3 , 2 + 9 ; move ua , 2 )  decode:( move 3 , 9 + 2 ; move ua , 2 ) 
[4925] c:3 is:( move 4 , 5 ; move ua + 2 , 5 )  decode:( move 4 , 5 ; move ua + 2 , 5 ) 
[4926] c:3 is:( move 4 , 0 - 9 ; move ua , 2 )  decode:( move 4 , 0 - 9 ; move ua , 2 ) 
[4927] c:3 is:( move 4 , ua / 4 ; move 3 , 2 )  decode:( move 4 , ua / 4 ; move 3 , 2 ) 
[4928] c:0 is:( move 2 - ua , 6 ; move 3 , 4 )  decode:( move 5 , 9 ; move 3 , ul ) 
[4929] c:3 is:( move 6 , 6 ; move ua + 2 , 2 )  decode:( move 6 , 6 ; move ua + 2 , 2 ) 
[4930] c:0 is:( move ua , 0 - 2 ; move 4 , 9 )  decode:( move 4 , 0 - 2 ; move ua , 9 ) 
[4931] c:0 is:( move 4 , 3 ; move ua , 2 * 5 )  decode:( move 5 , 2 * 5 ; move ua , 9 ) 
[4932] c:0 is:( move 3 , 6 ; move 2 - ua , 4 )  decode:( move 3 , 6 ; move 4 , 4 / ua ) 
[4933] c:0 is:( move 4 , 2 ; move ua + 2 , 8 )  decode:( move 4 , 2 ; move 8 , 8 ) 
[4934] c:3 is:( move 4 , 3 ; move 3 - ua , 5 )  decode:( move 4 , 3 ; move 3 - ua , 5 ) 
[4935] c:0 is:( move 4 - ua , 4 ; move 3 , 4 )  decode:( move 4 , ul ; move 2 , ul ) 
[4936] c:0 is:( move 4 , 3 ; move ua , 3 * 4 )  decode:( move 4 , 3 ; move ua , 4 * 3 ) 
[4937] c:3 is:( move ua + 4 , 4 ; move 4 , 4 )  decode:( move ua + 4 , 4 ; move 4 , 4 ) 
[4938] c:3 is:( move 9 , 0 ; move ua - 2 , 4 )  decode:( move 9 , 0 ; move ua - 2 , 4 ) 
[4939] c:3 is:( move 4 , 2 ; move 3 , ua / 4 )  decode:( move 4 , 2 ; move 3 , ua / 4 ) 
[4940] c:3 is:( move 5 , 2 - 3 ; move ua , 5 )  decode:( move 5 , 2 - 3 ; move ua , 5 ) 
[4941] c:0 is:( move 0 - 4 , 6 ; move 4 , ul )  decode:( move 4 , 4 ; move 4 , 2 ) 
[4942] c:3 is:( move 5 , 3 ; move 2 - ua , 5 )  decode:( move 5 , 3 ; move 2 - ua , 5 ) 
[4943] c:0 is:( move 4 , 4 ; move 0 - ua , 7 )  decode:( move 4 , 4 ; move ua , 7 - 3 ) 
[4944] c:3 is:( move 3 , 4 ; move ua , 2 / 4 )  decode:( move 3 , 4 ; move ua , 2 / 4 ) 
[4945] c:3 is:( move ua , 4 * 4 ; move 4 , 2 )  decode:( move ua , 4 * 4 ; move 4 , 2 ) 
[4946] c:0 is:( move ua - 4 , 2 ; move 4 , 5 )  decode:( move 2 , 9 ; move 4 , 5 ) 
[4947] c:3 is:( move 3 , 4 ; move ua , 5 * 2 )  decode:( move 3 , 4 ; move ua , 5 * 2 ) 
[4948] c:0 is:( move 6 , 2 ; move 3 , 2 / ua )  decode:( move ua , 2 ; move 3 , 2 / ua ) 
[4949] c:0 is:( move 0 - 3 , 9 ; move ua , 3 )  decode:( move 4 , 4 * 3 ; move ua , 3 ) 
[4950] c:0 is:( move 5 , 3 ; move ua - 3 , 4 )  decode:( move 5 , 3 ; move 4 , 4 ) 
[4951] c:0 is:( move 5 , ul ; move 4 , 2 - 3 )  decode:( move 3 - ua , 0 ; move 4 , ul ) 
[4952] c:3 is:( move 5 , 6 ; move 2 - ua , 2 )  decode:( move 5 , 6 ; move 2 - ua , 2 ) 
[4953] c:3 is:( move 5 , 4 * 3 ; move ua , 2 )  decode:( move 5 , 4 * 3 ; move ua , 2 ) 
[4954] c:0 is:( move ua , 2 ; move 4 , 0 - 9 )  decode:( move ua , 2 ; move 4 , 9 ) 
[4955] c:0 is:( move 4 + 3 , 6 ; move ua , 3 )  decode:loop 0 , 4 , move 3 , 3 
[4956] c:0 is:( move 5 , 2 - 3 ; move 4 , ul )  decode:( move 4 , 2 - 3 ; move 4 , ul ) 
[4957] c:3 is:( move ua , 4 * 3 ; move 3 , 4 )  decode:( move ua , 4 * 3 ; move 3 , 4 ) 
[4958] c:0 is:( move 4 , 5 ; move 2 - ua , 4 )  decode:( move 4 , 5 ; move 4 , ul ) 
[4959] c:0 is:( move ua + 3 , 6 ; move 5 , 2 )  decode:( move 9 , 6 ; move 5 , 2 ) 
[4960] c:0 is:( move ua , 3 ; move 4 , 5 * 2 )  decode:( move ua , 3 ; move 4 , 7 + 4 ) 
[4961] c:3 is:( move 8 , 0 ; move ua + 4 , 4 )  decode:( move 8 , 0 ; move ua + 4 , 4 ) 
[4962] c:0 is:( move 4 , ua / 4 ; move 2 , 3 )  decode:( move 4 , ua / 4 ; move 3 , 3 ) 
[4963] c:0 is:( move 3 , 9 ; move ua + 2 , 2 )  decode:( move 3 , 9 ; move 2 + ua , 2 ) 
[4964] c:0 is:( move 4 , 2 ; move ua , 4 * 4 )  decode:( move 4 , 0 - 4 ; move ua , 3 ) 
[4965] c:0 is:( move ua + 2 , 2 ; move 8 , 4 )  decode:( move 2 - 8 , 2 ; move 8 , 4 ) 
[4966] c:0 is:( move 3 , 2 * 7 ; move ua , 2 )  decode:( move 3 , 2 / move ua , 2 ) 
[4967] c:0 is:( move 0 , 9 ; move 3 + ua , 4 )  decode:( move ua , 2 ; move 4 , 4 + 3 ) 
[4968] c:2 is:( move 4 , 0 ; move 3 - ua , 8 )  decode:( move 4 , 0 ; move 3 - ua , 8 ) 
[4969] c:0 is:( move 9 , 4 ; move ua , 0 - 2 )  decode:( move ua , 4 ; move 9 , 2 ) 
[4970] c:0 is:( move 4 - ua , 3 ; move 4 , 4 )  decode:( move 2 , 6 ; move 4 , ul ) 
[4971] c:0 is:( move ua , 3 + 4 ; move 7 , 2 )  decode:( move ua , 4 / 5 ; move 7 , 2 ) 
[4972] c:3 is:( move 2 , 4 ; move 3 , ua / 4 )  decode:( move 2 , 4 ; move 3 , ua / 4 ) 
[4973] c:0 is:( move 4 , 2 ; move ua , 3 / 4 )  decode:( move 4 , 2 ; move ua , 4 / 3 ) 
[4974] c:0 is:( move 3 , 2 / 4 ; move ua , 4 )  decode:( move 3 , 3 / 2 ; move ua , 4 ) 
[4975] c:0 is:( move ua + 2 , 4 ; move 8 , 2 )  decode:( move ua + 3 , 4 ; move 8 , 2 ) 
[4976] c:0 is:( move 3 , 2 ; move 2 - ua , 8 )  decode:( move 3 , 2 ; move 4 , 8 ) 
[4977] c:0 is:( move ua + 3 , 4 ; move 5 , 4 )  decode:( move 3 + ua , 4 ; move 5 , 4 ) 
[4978] c:3 is:( move 4 , 4 ; move ua , 3 / 2 )  decode:( move 4 , 4 ; move ua , 3 / 2 ) 
[4979] c:3 is:( move ua + 3 , 4 ; move 7 , 2 )  decode:( move ua + 3 , 4 ; move 7 , 2 ) 
[4980] c:0 is:( move 3 , 2 * 5 ; move 3 , ul )  decode:( move 3 , 0 - 4 ; move 3 , ul ) 
[4981] c:0 is:( move ua , 6 ; move 3 * 3 , 2 )  decode:( move ua , 9 ; move 3 * 3 , 2 ) 
[4982] c:3 is:( move ul , 3 ; move 4 , 3 / 2 )  decode:( move ul , 3 ; move 4 , 3 / 2 ) 
[4983] c:0 is:( move 4 , 6 + 4 ; move ua , 2 )  decode:( move 4 , 4 + 6 ; move ua , 2 ) 
[4984] c:0 is:( move 2 - ua , 4 ; move 5 , 4 )  decode:( move 4 , ul / 5 ; move 5 , 7 ) 
[4985] c:0 is:( move ua , 5 / 2 ; move 4 , 2 )  decode:( move ua , 2 / 5 ; move 4 , 2 ) 
[4986] c:0 is:( move ua , 3 / 4 ; move 4 , 2 )  decode:( move 0 - ua , 4 ; move 4 , 2 ) 
[4987] c:3 is:( move 9 , 2 ; move ua , 0 - 4 )  decode:( move 9 , 2 ; move ua , 0 - 4 ) 
[4988] c:0 is:( move 5 , 4 ; move 2 - ua , 4 )  decode:( move 5 , 4 ; move 4 , ul ) 
[4989] c:3 is:( move 5 , 3 / 2 ; move 2 , ul )  decode:( move 5 , 3 / 2 ; move 2 , ul ) 
[4990] c:0 is:( move ua + 2 , 3 ; move 9 , 2 )  decode:( move ua + 3 , 3 ; move 9 , 2 ) 
[4991] c:0 is:( move 4 , 2 ; move ua , 2 / 5 )  decode:( move 4 , 2 ; move ua , 2 / 2 ) 
[4992] c:0 is:( move 8 , 3 ; move ua + 3 , 2 )  decode:( move 7 , 3 ; move 9 , 2 ) 
[4993] c:0 is:( move ua , 3 * 6 ; move 3 , 2 )  decode:( move 3 , 9 / 2 ; move ua , 2 ) 
[4994] c:0 is:( move 3 + ua , 6 ; move 3 , 4 )  decode:( move ua + 3 , 6 ; move 3 , 4 ) 
[4995] c:3 is:( move ua , 0 ; move 6 , 4 / 3 )  decode:( move ua , 0 ; move 6 , 4 / 3 ) 
[4996] c:0 is:( move ua , 2 / 4 ; move 4 , 3 )  decode:( move 5 , 2 / 4 ; move 4 , 3 ) 
[4997] c:3 is:( move 2 - ua , 4 ; move 4 , 5 )  decode:( move 2 - ua , 4 ; move 4 , 5 ) 
[4998] c:0 is:( move ua , 6 ; move 4 , 2 - 3 )  decode:( move 4 , ua / 3 ; move ua , ul ) 
[4999] c:3 is:( move 4 , 4 / 3 ; move ua , 2 )  decode:( move 4 , 4 / 3 ; move ua , 2 ) 
[5000] c:3 is:( move 5 , 0 ; move 4 , 4 / ua )  decode:( move 5 , 0 ; move 4 , 4 / ua ) 
[5001] c:3 is:( move ua + 2 , 2 ; move 4 , 8 )  decode:( move ua + 2 , 2 ; move 4 , 8 ) 
[5002] c:0 is:( move 3 , 2 / 4 ; move ua , 4 )  decode:( move 3 , 3 / 2 ; move ua , 4 ) 
[5003] c:3 is:( move 4 , 9 + 2 ; move ua , 2 )  decode:( move 4 , 9 + 2 ; move ua , 2 ) 
[5004] c:0 is:( move 3 , 4 ; move ua , 5 / 2 )  decode:( move 3 , 4 ; move ua , 5 * 2 ) 
[5005] c:0 is:( move 3 , 9 ; move ua , 0 - 4 )  decode:( move ua , ua * ua ; move 3 , 4 ) 
[5006] c:3 is:( move 4 , ul ; move 2 , 4 / 3 )  decode:( move 4 , ul ; move 2 , 4 / 3 ) 
[5007] c:0 is:( move 4 , 2 ; move 2 - ua , 8 )  decode:( move 4 , 2 ; move 4 , 8 ) 
[5008] c:0 is:( move 4 , 2 ; move ua , 4 + 7 )  decode:( move 4 , 2 ; move ua , 3 + 8 ) 
[5009] c:3 is:( move 5 , 3 ; move 3 - ua , 5 )  decode:( move 5 , 3 ; move 3 - ua , 5 ) 
[5010] c:0 is:( move 4 , 5 ; move 3 , 2 / ua )  decode:( move 3 , 2 ; move 4 , 2 / ua ) 
[5011] c:3 is:( move ua + 2 , 6 ; move 7 , 2 )  decode:( move ua + 2 , 6 ; move 7 , 2 ) 
[5012] c:0 is:( move 4 , 2 ; move 4 , ua / 4 )  decode:( move 4 , 2 ; move 4 , 3 / 8 ) 
[5013] c:0 is:( move 3 , 9 ; move 2 - ua , 2 )  decode:( move 3 , 9 ; move 4 , 5 ) 
[5014] c:0 is:( move 2 , 9 ; move 2 + ua , 4 )  decode:( move 2 , 9 ; move ua + 2 , 4 ) 
[5015] c:0 is:( move 2 , 4 / 3 ; move ua , 5 )  decode:( move 2 , 0 ; move ua , 5 ) 
[5016] c:3 is:( move 2 , 9 ; move ua , 2 - 3 )  decode:( move 2 , 9 ; move ua , 2 - 3 ) 
[5017] c:3 is:( move ua , 0 - 9 ; move 3 , 4 )  decode:( move ua , 0 - 9 ; move 3 , 4 ) 
[5018] c:3 is:( move 2 - ua , 5 ; move 4 , 5 )  decode:( move 2 - ua , 5 ; move 4 , 5 ) 
[5019] c:3 is:( move 9 , 3 ; move 3 + ua , 2 )  decode:( move 9 , 3 ; move 3 + ua , 2 ) 
[5020] c:0 is:( move ua , 3 * 5 ; move 5 , 2 )  decode:( move ua , 0 - 5 ; move 5 , 2 ) 
[5021] c:3 is:( move 3 , ul ; move 4 , 4 * 3 )  decode:( move 3 , ul ; move 4 , 4 * 3 ) 
[5022] c:3 is:( move 4 , 4 ; move 4 , 2 / ua )  decode:( move 4 , 4 ; move 4 , 2 / ua ) 
[5023] c:3 is:( move 5 , 4 / 3 ; move ua , 2 )  decode:( move 5 , 4 / 3 ; move ua , 2 ) 
[5024] c:0 is:( move 4 - ua , 3 ; move 4 , 5 )  decode:( move 2 , ul - 3 ; move 4 , 2 ) 
[5025] c:3 is:( move 9 , 0 ; move ua + 4 , 4 )  decode:( move 9 , 0 ; move ua + 4 , 4 ) 
[5026] c:0 is:( move ua , 2 - 3 ; move 4 , 7 )  decode:( move 4 , ul - 9 ; move 4 , 7 ) 
[5027] c:3 is:( move ua , 4 / 3 ; move 3 , 4 )  decode:( move ua , 4 / 3 ; move 3 , 4 ) 
[5028] c:0 is:loop 0 , 3 , move 3 - ua , 4 / 9  decode:loop 0 , 3 , move 3 - ua , 2 / 9 
[5029] c:3 is:( move 3 , ul ; move 4 , 4 * 3 )  decode:( move 3 , ul ; move 4 , 4 * 3 ) 
[5030] c:3 is:( move ua , 4 * 3 ; move 4 , 4 )  decode:( move ua , 4 * 3 ; move 4 , 4 ) 
[5031] c:0 is:( move 6 , 2 ; move ua / 2 , 4 )  decode:( move ua , 2 ; move 3 - ua , 4 ) 
[5032] c:0 is:( move ua , 6 * 3 ; move 4 , 2 )  decode:( move ua , 2 * 3 ; move 4 , 2 ) 
[5033] c:0 is:( move 4 , 9 ; move 0 - ua , 3 )  decode:( move 4 , 9 ; move  move ua , 3 ) 
[5034] c:3 is:( move ua , 0 - 3 ; move 4 , 9 )  decode:( move ua , 0 - 3 ; move 4 , 9 ) 
[5035] c:0 is:( move 6 , 3 / 2 ; move ua , 3 )  decode:( move ua , 3 / 2 ; move ua , 3 ) 
[5036] c:0 is:( move 5 , 0 - 3 ; move ua , 8 )  decode:( move 5 , 5 ; move ua , ua * ua ) 
[5037] c:0 is:( move ua , 8 ; move 3 , 2 - 3 )  decode:( move 3 , 4 ; move ua , ul ) 
[5038] c:1 is:( move ua , 4 / 3 ; move 2 , 5 )  decode:( move ua , 4 / 3 ; move 2 , 5 ) 
[5039] c:0 is:( move ua , 3 ; move 4 , 0 - 9 )  decode:( move ua , 3 ; move 4 , 9 ) 
[5040] c:3 is:( move 4 , 4 * 4 ; move ua , 3 )  decode:( move 4 , 4 * 4 ; move ua , 3 ) 
[5041] c:0 is:( move 3 , 2 / 4 ; move ua , 5 )  decode:( move 3 , 4 / ua ; move ua , 5 ) 
[5042] c:0 is:( move 3 , 9 ; move 0 - ua , 4 )  decode:( move 3 , 9 ; move ua , ul / 4 ) 
[5043] c:3 is:( move ua , 2 / 6 ; move 4 , 2 )  decode:( move ua , 2 / 6 ; move 4 , 2 ) 
[5044] c:0 is:( move ua , 2 / 3 ; move 4 , 5 )  decode:( move ua , 4 / ua ; move 4 , 5 ) 
[5045] c:0 is:( move 2 - ua , 6 ; move 4 , 4 )  decode:( move 4 , 9 ; move 4 , 7 ) 
[5046] c:3 is:( move ua , 3 / 2 ; move 7 , 2 )  decode:( move ua , 3 / 2 ; move 7 , 2 ) 
[5047] c:3 is:( move 5 , 2 ; move ua , 4 / 3 )  decode:( move 5 , 2 ; move ua , 4 / 3 ) 
[5048] c:3 is:( move 3 , ua / 4 ; move 5 , 2 )  decode:( move 3 , ua / 4 ; move 5 , 2 ) 
[5049] c:0 is:( move 5 , 4 ; move ua , 3 / 2 )  decode:( move 5 , 0 - 4 ; move ua , 8 ) 
[5050] c:0 is:( move ua , 9 ; move 5 , 0 - 2 )  decode:( move 5 , 9 ; move ua , 0 - 2 ) 
[5051] c:3 is:( move 3 , 2 / 4 ; move 4 , ul )  decode:( move 3 , 2 / 4 ; move 4 , ul ) 
[5052] c:3 is:( move ua , 4 / 3 ; move 3 , 4 )  decode:( move ua , 4 / 3 ; move 3 , 4 ) 
[5053] c:3 is:( move ua + 2 , 3 ; move 3 , 9 )  decode:( move ua + 2 , 3 ; move 3 , 9 ) 
[5054] c:3 is:( move 3 , ua / 4 ; move 3 , 4 )  decode:( move 3 , ua / 4 ; move 3 , 4 ) 
[5055] c:0 is:( move 2 , 4 / 3 ; move 4 , ul )  decode:( move 2 , 4 / 3 ; move 5 , ul ) 
[5056] c:0 is:loop 0 , 4 , move 3 - ua , 9 * 4  decode:loop 0 , 4 , move 3 - ua , 9 * 3 
[5057] c:0 is:( move 0 - 5 , 9 ; move ua , 2 )  decode:( move 5 , 9 ; move ua , ul ) 
[5058] c:0 is:( move 3 , 2 / 6 ; move ul , 2 )  decode:( move 3 , 2 / 6 ; move 2 , 2 ) 
[5059] c:0 is:( move ua - 4 , 4 ; move 3 , 5 )  decode:( move 4 , 4 ; move 3 , 5 ) 
[5060] c:0 is:( move 6 , 3 ; move ua + 4 , 4 )  decode:( move 5 , 3 ; move ua + 4 , 4 ) 
[5061] c:3 is:( move 4 , 4 * 3 ; move ua , 4 )  decode:( move 4 , 4 * 3 ; move ua , 4 ) 
[5062] c:3 is:( move ua + 2 , 9 ; move 2 , 4 )  decode:( move ua + 2 , 9 ; move 2 , 4 ) 
[5063] c:3 is:( move 4 , ua / 4 ; move 2 , 4 )  decode:( move 4 , ua / 4 ; move 2 , 4 ) 
[5064] c:0 is:( move 4 , 5 * 2 ; move 3 , ul )  decode:( move 4 , 9 + 2 ; move 3 , ul ) 
[5065] c:0 is:( move ua , 3 ; move 3 + 7 , 4 )  decode:( move ua , 3 ; move ua + 4 , 4 ) 
[5066] c:0 is:( move 8 , 2 ; move ua + 3 , 4 )  decode:( move 9 , 2 ; move 3 + ua , 4 ) 
[5067] c:0 is:( move ua , 2 / 5 ; move 5 , 2 )  decode:( move ua , 9 + 5 ; move 5 , 2 ) 
[5068] c:3 is:( move 3 , 0 - 9 ; move ua , 4 )  decode:( move 3 , 0 - 9 ; move ua , 4 ) 
[5069] c:3 is:( move ua , 3 ; move 4 , 4 / 3 )  decode:( move ua , 3 ; move 4 , 4 / 3 ) 
[5070] c:0 is:( move 2 , 4 ; move ua , 5 / 3 )  decode:( move 2 , 4 ; move ua , 3 / 2 ) 
[5071] c:3 is:( move 4 , 4 * 3 ; move 3 , ul )  decode:( move 4 , 4 * 3 ; move 3 , ul ) 
[5072] c:0 is:( move 3 , 2 - 9 ; move ua , 2 )  decode:( move 3 , 2 * 5 ; move ua , 2 ) 
[5073] c:0 is:( move 4 , 6 ; move 2 - ua , 4 )  decode:( move 4 , 6 ; move 4 , ul ) 
[5074] c:3 is:( move ua , 4 * 3 ; move 5 , 3 )  decode:( move ua , 4 * 3 ; move 5 , 3 ) 
[5075] c:0 is:( move 4 , 0 ; move ua , 7 / 3 )  decode:( move 4 , 0 ; move ua , 0 - 4 ) 
[5076] c:3 is:( move 2 - ua , 4 ; move 4 , 6 )  decode:( move 2 - ua , 4 ; move 4 , 6 ) 
[5077] c:3 is:( move 5 , 5 ; move ua + 3 , 4 )  decode:( move 5 , 5 ; move ua + 3 , 4 ) 
[5078] c:0 is:( move 5 , 0 - 2 ; move ua , 9 )  decode:( move ul - ua , ul ; move ua , 9 ) 
[5079] c:0 is:loop 0 , 4 , move ua - 4 , 3 * 9  decode:loop 0 , 3 , move 3 , v0 + 9 
[5080] c:3 is:( move ua , 4 ; move 4 , 4 * 3 )  decode:( move ua , 4 ; move 4 , 4 * 3 ) 
[5081] c:0 is:( move 2 + ua , 9 ; move 4 , 2 )  decode:( move 8 , 9 ; move 4 , 2 ) 
[5082] c:0 is:( move ua , 0 ; move 4 , 2 * 9 )  decode:( move ua , 0 ; move 4 , 2 * 5 ) 
[5083] c:3 is:( move 4 , 3 / 2 ; move ua , 5 )  decode:( move 4 , 3 / 2 ; move ua , 5 ) 
[5084] c:0 is:( move ul , 3 ; move 3 , 4 / 3 )  decode:( move ul , 0 - 3 ; move 3 , 4 ) 
[5085] c:3 is:( move ua + 2 , 6 ; move 4 , 5 )  decode:( move ua + 2 , 6 ; move 4 , 5 ) 
[5086] c:0 is:( move ua , 9 ; move 3 , 0 - 4 )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[5087] c:3 is:( move 4 , ul ; move 2 , 4 / 3 )  decode:( move 4 , ul ; move 2 , 4 / 3 ) 
[5088] c:0 is:loop 0 , 4 , move 4 - ua , 3 / 8  decode:loop 0 , 4 , move 4 - ua , 2 / 5 
[5089] c:3 is:( move 4 , 4 / ua ; move 4 , 2 )  decode:( move 4 , 4 / ua ; move 4 , 2 ) 
[5090] c:0 is:( move 4 , 8 ; move 0 - 3 , ul )  decode:( move 3 , 8 ; move 4 , 0 - 4 ) 
[5091] c:0 is:( move 5 , 3 ; move 4 , 2 / ua )  decode:( move 4 , 3 ; move 5 , 2 / ua ) 
[5092] c:3 is:( move 2 , 3 ; move 5 , ua / 4 )  decode:( move 2 , 3 ; move 5 , ua / 4 ) 
[5093] c:0 is:( move ua , 3 ; move 3 , 4 + 7 )  decode:( move ua , 3 ; move 3 , 8 ) 
[5094] c:3 is:( move ua , 0 - 9 ; move 5 , 2 )  decode:( move ua , 0 - 9 ; move 5 , 2 ) 
[5095] c:3 is:( move 4 , 3 ; move ua , 4 * 4 )  decode:( move 4 , 3 ; move ua , 4 * 4 ) 
[5096] c:3 is:( move 4 , 4 ; move ua , 4 * 3 )  decode:( move 4 , 4 ; move ua , 4 * 3 ) 
[5097] c:3 is:( move ua + 2 , 6 ; move 5 , 4 )  decode:( move ua + 2 , 6 ; move 5 , 4 ) 
[5098] c:3 is:( move 5 , 0 ; move ua , 5 / 4 )  decode:( move 5 , 0 ; move ua , 5 / 4 ) 
[5099] c:0 is:( move ua , 4 ; move 3 , 4 / 3 )  decode:( move 3 , 4 ; move ua , 4 / 3 ) 
[5100] c:3 is:( move 4 , 2 / 3 ; move 4 , ul )  decode:( move 4 , 2 / 3 ; move 4 , ul ) 
[5101] c:0 is:( move 0 - 7 , 4 ; move ua , 5 )  decode:( move 7 , 4 ; move ua , ua * ua ) 
[5102] c:0 is:( move 4 , 8 ; move ua , 0 - 4 )  decode:( move ua , 4 ; move 4 , 4 ) 
[5103] c:3 is:( move ua , 3 ; move 4 , 4 * 4 )  decode:( move ua , 3 ; move 4 , 4 * 4 ) 
[5104] c:3 is:( move 5 , 0 - 9 ; move ua , 2 )  decode:( move 5 , 0 - 9 ; move ua , 2 ) 
[5105] c:3 is:( move 4 , 4 ; move 4 , 2 / ua )  decode:( move 4 , 4 ; move 4 , 2 / ua ) 
[5106] c:3 is:( move ua , 4 / 3 ; move 5 , 2 )  decode:( move ua , 4 / 3 ; move 5 , 2 ) 
[5107] c:0 is:( move 5 , 3 / 4 ; move ua , 2 )  decode:( move 5 , 4 / 5 ; move ua , 2 ) 
[5108] c:3 is:( move 4 , ua / 4 ; move 4 , 2 )  decode:( move 4 , ua / 4 ; move 4 , 2 ) 
[5109] c:0 is:( move ua , 9 + 2 ; move 3 , 3 )  decode:( move 3 , 9 + 2 ; move ua , 3 ) 
[5110] c:0 is:( move 4 , 4 ; move ua - 3 , 5 )  decode:( move 4 , 4 ; move 3 - ua , 5 ) 
[5111] c:3 is:( move 5 , 4 * 4 ; move ua , 2 )  decode:( move 5 , 4 * 4 ; move ua , 2 ) 
[5112] c:3 is:( move 4 , 2 / 6 ; move ua , 2 )  decode:( move 4 , 2 / 6 ; move ua , 2 ) 
[5113] c:3 is:( move 9 , 0 - 3 ; move ua , 4 )  decode:( move 9 , 0 - 3 ; move ua , 4 ) 
[5114] c:3 is:( move 4 , 3 ; move ua , 4 / 3 )  decode:( move 4 , 3 ; move ua , 4 / 3 ) 
[5115] c:0 is:( move ua , 3 ; move 3 , 4 * 5 )  decode:( move 3 , ul ; move ua , 5 ) 
[5116] c:3 is:( move 4 , 4 / 3 ; move 2 , ul )  decode:( move 4 , 4 / 3 ; move 2 , ul ) 
[5117] c:3 is:( move 9 , 3 ; move ua , 0 - 4 )  decode:( move 9 , 3 ; move ua , 0 - 4 ) 
[5118] c:3 is:( move ua , 2 * 5 ; move 4 , 4 )  decode:( move ua , 2 * 5 ; move 4 , 4 ) 
[5119] c:0 is:( move ua , 4 / 5 ; move 3 , 2 )  decode:( move ua , 4 ; move 3 , 2 ) 
[5120] c:3 is:( move ua , 2 / 4 ; move 4 , 4 )  decode:( move ua , 2 / 4 ; move 4 , 4 ) 
[5121] c:3 is:( move 4 , ul ; move 3 , 4 * 3 )  decode:( move 4 , ul ; move 3 , 4 * 3 ) 
[5122] c:0 is:( move 5 , 2 - 3 ; move 5 , ul )  decode:( move ul - ua , 2 ; move 5 , ul ) 
[5123] c:3 is:( move 5 , 2 / 4 ; move 2 , ul )  decode:( move 5 , 2 / 4 ; move 2 , ul ) 
[5124] c:3 is:( move ul , 2 / 4 ; move 3 , 4 )  decode:( move ul , 2 / 4 ; move 3 , 4 ) 
[5125] c:3 is:( move 4 , 3 / 2 ; move 4 , ul )  decode:( move 4 , 3 / 2 ; move 4 , ul ) 
[5126] c:0 is:( move 4 * 2 , ul ; move 4 , 4 )  decode:( move  + 3 , ul ; move 4 , 4 ) 
[5127] c:0 is:( move 9 , 3 ; move ua - 2 , 2 )  decode:( move 9 , 3 ; move 4 , 2 ) 
[5128] c:0 is:( move 4 , 6 ; move ua - 4 , 2 )  decode:( move 4 , 6 ; move 3 , 2 ) 
[5129] c:3 is:loop 0 , 4 , move 2 - ua , 9 / 4  decode:loop 0 , 4 , move 2 - ua , 9 / 4 
[5130] c:3 is:( move ua , 4 * 4 ; move 3 , 4 )  decode:( move ua , 4 * 4 ; move 3 , 4 ) 
[5131] c:3 is:( move ua , 9 + 2 ; move 4 , 2 )  decode:( move ua , 9 + 2 ; move 4 , 2 ) 
[5132] c:3 is:( move 5 , 2 / 4 ; move ua , 3 )  decode:( move 5 , 2 / 4 ; move ua , 3 ) 
[5133] c:0 is:( move 3 , 3 / 4 ; move ua , 4 )  decode:( move 3 , 4 / ua ; move ua , 4 ) 
[5134] c:3 is:( move ua , 4 * 3 ; move 3 , 5 )  decode:( move ua , 4 * 3 ; move 3 , 5 ) 
[5135] c:3 is:( move ua , 2 ; move 5 , 4 / 3 )  decode:( move ua , 2 ; move 5 , 4 / 3 ) 
[5136] c:3 is:( move 3 , 4 ; move ua , 3 / 4 )  decode:( move 3 , 4 ; move ua , 3 / 4 ) 
[5137] c:3 is:( move ua + 2 , 3 ; move 8 , 4 )  decode:( move ua + 2 , 3 ; move 8 , 4 ) 
[5138] c:1 is:( move 9 , 2 ; move 2 + ua , 4 )  decode:( move 9 , 2 ; move 4 + 4 , 4 ) 
[5139] c:0 is:( move 4 , 7 ; move 3 - ua , 2 )  decode:( move 4 , 7 ; move 3 , 5 ) 
[5140] c:3 is:( move 3 , 4 / 3 ; move ua , 4 )  decode:( move 3 , 4 / 3 ; move ua , 4 ) 
[5141] c:0 is:( move ua , 5 / 2 ; move 5 , 2 )  decode:( move ua , 2 / 5 ; move 5 , 2 ) 
[5142] c:0 is:( move 3 , 5 / 4 ; move ua , 2 )  decode:( move 3 , 4 / 4 ; move ua , 2 ) 
[5143] c:3 is:( move 4 , 3 ; move 4 - ua , 5 )  decode:( move 4 , 3 ; move 4 - ua , 5 ) 
[5144] c:3 is:( move 5 , 6 ; move ua + 2 , 4 )  decode:( move 5 , 6 ; move ua + 2 , 4 ) 
[5145] c:0 is:( move 9 , 2 - 3 ; move ua , 2 )  decode:( move ua , 9 / 3 ; move ua , 2 ) 
[5146] c:0 is:( move 4 , 4 + 6 ; move 2 , ul )  decode:( move 4 , 9 + 2 ; move 2 , ul ) 
[5147] c:0 is:( move 5 , 3 / 2 ; move ua , 4 )  decode:( move 5 , ua / 2 ; move ua , 4 ) 
[5148] c:3 is:( move 3 , 3 * 4 ; move ua , 5 )  decode:( move 3 , 3 * 4 ; move ua , 5 ) 
[5149] c:0 is:( move 0 - 4 , ul ; move 3 , 8 )  decode:( move 0 - 3 , ul ; move 3 , 8 ) 
[5150] c:3 is:( move 3 , 4 ; move ua , 4 / 3 )  decode:( move 3 , 4 ; move ua , 4 / 3 ) 
[5151] c:0 is:( move 4 , 8 ; move 0 - ua , 4 )  decode:( move 4 , 8 ; move ua , ul ) 
[5152] c:0 is:( move 2 , 4 ; move ua , 7 + 4 )  decode:( move 2 , 4 ; move ua , 3 / 2 ) 
[5153] c:0 is:( move 4 , ul ; move 4 , 0 - 7 )  decode:( move 4 , ul ; move 4 , 4 * 3 ) 
[5154] c:0 is:( move 3 , ul ; move 4 , 2 / 4 )  decode:( move 3 , ul ; move 4 , 4 / ua ) 
[5155] c:0 is:( move 4 , ul ; move 4 , 2 / 3 )  decode:( move 4 , ul ; move 4 , 2 / 5 ) 
[5156] c:0 is:( move ua , 2 ; move 0 - 7 , 7 )  decode:( move ua , 2 ; move 7 , 4 ) 
[5157] c:0 is:( move ua , 6 ; move 6 , 0 - 4 )  decode:( move ua , 6 ; move ua , 0 - 4 ) 
[5158] c:3 is:( move 4 , 2 / 4 ; move 3 , ul )  decode:( move 4 , 2 / 4 ; move 3 , ul ) 
[5159] c:3 is:( move 4 , 4 ; move ua , 5 * 2 )  decode:( move 4 , 4 ; move ua , 5 * 2 ) 
[5160] c:0 is:loop 0 , 4 , move 4 - ua , 3 * 9  decode:loop 0 , 3 , move 3 , v0 + 9 
[5161] c:0 is:( move 4 , 3 / ua ; move 2 , 5 )  decode:( move 4 , 9 + 4 ; move 3 , 5 ) 
[5162] c:3 is:( move 2 , 4 ; move 4 , ua / 4 )  decode:( move 2 , 4 ; move 4 , ua / 4 ) 
[5163] c:0 is:( move 9 , 3 ; move 0 - 4 , ul )  decode:( move 9 , 3 ; move 4 , ua / 4 ) 
[5164] c:0 is:( move ua , 2 ; move 4 , 5 / 4 )  decode:( move ua , 2 ; move 4 , 0 - 5 ) 
[5165] c:3 is:( move 4 , 4 * 4 ; move ua , 4 )  decode:( move 4 , 4 * 4 ; move ua , 4 ) 
[5166] c:3 is:( move 8 , 4 ; move ua + 2 , 4 )  decode:( move 8 , 4 ; move ua + 2 , 4 ) 
[5167] c:0 is:( move ua , 2 / 4 ; move 5 , 4 )  decode:( move ua , 3 / 4 ; move 5 , 4 ) 
[5168] c:3 is:( move 4 , 4 ; move ua , 4 / 3 )  decode:( move 4 , 4 ; move ua , 4 / 3 ) 
[5169] c:1 is:( move 3 , 4 ; move ua , 7 + 4 )  decode:( move 3 , 4 ; move ua , 7 + 4 ) 
[5170] c:3 is:( move 9 , 0 - 4 ; move ua , 4 )  decode:( move 9 , 0 - 4 ; move ua , 4 ) 
[5171] c:3 is:( move ua , 4 * 4 ; move 4 , 4 )  decode:( move ua , 4 * 4 ; move 4 , 4 ) 
[5172] c:0 is:( move 0 - ua , 4 ; move 4 , 9 )  decode:( move ul - ua , 4 ; move 4 , 9 ) 
[5173] c:3 is:( move 2 , 2 - 9 ; move ua , 4 )  decode:( move 2 , 2 - 9 ; move ua , 4 ) 
[5174] c:0 is:( move 5 , 3 ; move ua , 4 / 3 )  decode:( move 5 , 3 ; move 5 , 4 / 3 ) 
[5175] c:0 is:( move ua , 3 * 5 ; move 4 , 4 )  decode:( move ua , 0 - 4 ; move 4 , 4 ) 
[5176] c:3 is:( move ua , 6 ; move 4 , 3 / 2 )  decode:( move ua , 6 ; move 4 , 3 / 2 ) 
[5177] c:3 is:( move ua , 9 ; move 3 , 2 - 3 )  decode:( move ua , 9 ; move 3 , 2 - 3 ) 
[5178] c:0 is:( move 3 , 0 ; move ua , 3 / 9 )  decode:( move 3 , 0 ; move ua , 2 / 5 ) 
[5179] c:0 is:( move 4 , 4 * 3 ; move ua , 5 )  decode:loop 0 , 4 , move v0 + 2 , 4 / 3 
[5180] c:3 is:( move ua , 0 - 9 ; move 4 , 4 )  decode:( move ua , 0 - 9 ; move 4 , 4 ) 
[5181] c:3 is:( move ua , 9 + 2 ; move 3 , 4 )  decode:( move ua , 9 + 2 ; move 3 , 4 ) 
[5182] c:3 is:( move 4 , 4 / 3 ; move 3 , ul )  decode:( move 4 , 4 / 3 ; move 3 , ul ) 
[5183] c:0 is:( move 5 , 9 ; move ua , 0 - 3 )  decode:loop 0 , 3 , move v0 - ua , 3 
[5184] c:0 is:( move 3 , 9 ; move 0 - ua , 5 )  decode:( move 4 , 9 ; move ua , ua * ua ) 
[5185] c:0 is:( move ua , 3 / 4 ; move 4 , 4 )  decode:( move ua , 4 / 5 ; move 4 , 4 ) 
[5186] c:3 is:( move ua , 0 ; move 8 , 4 / 3 )  decode:( move ua , 0 ; move 8 , 4 / 3 ) 
[5187] c:0 is:( move ua , 2 / 3 ; move 2 , 8 )  decode:( move ua , 4 + 3 ; move 2 , 8 ) 
[5188] c:0 is:( move 3 , 4 / 3 ; move ua , 5 )  decode:( move 3 , ua / 5 ; move ua , 5 ) 
[5189] c:0 is:( move 3 , 8 ; move 2 - ua , 4 )  decode:( move 3 , 8 ; move 4 , ul ) 
[5190] c:0 is:( move 0 - 3 , 9 ; move ua , 5 )  decode:( move 3 , 9 ; move ua , 5 ) 
[5191] c:0 is:( move 4 , 2 / 6 ; move ul , 2 )  decode:( move 2 , 2 / 6 ; move 3 , 4 ) 
[5192] c:0 is:( move 3 , 9 ; move 0 - 4 , ul )  decode:( move 3 , 9 ; move 4 , ua / 3 ) 
[5193] c:3 is:loop 0 , 4 , move 3 - ua , 9 / 4  decode:loop 0 , 4 , move 3 - ua , 9 / 4 
[5194] c:0 is:( move 3 , 2 - 3 ; move ua , 9 )  decode:( move 3 , ua / 3 ; move ua , 4 ) 
[5195] c:0 is:( move 4 , 3 / 4 ; move ua , 4 )  decode:( move 4 , 4 / ua ; move ua , 4 ) 
[5196] c:0 is:( move 9 , 3 ; move ua + 2 , 4 )  decode:( move 9 , 3 ; move 8 , 4 ) 
[5197] c:0 is:( move ua + 3 , 6 ; move 4 , 5 )  decode:( move 9 , 6 ; move 4 , 5 ) 
[5198] c:3 is:( move 4 , ul ; move 4 , 2 / 4 )  decode:( move 4 , ul ; move 4 , 2 / 4 ) 
[5199] c:0 is:( move 3 , 3 ; move ua + 3 , 9 )  decode:( move 3 , 4 ; move ua + 3 , 9 ) 
[5200] c:3 is:( move 4 , 4 / 3 ; move ua , 4 )  decode:( move 4 , 4 / 3 ; move ua , 4 ) 
[5201] c:0 is:( move ua , 4 ; move 4 , 3 * 5 )  decode:( move 4 , 0 - 3 ; move ua , 4 ) 
[5202] c:3 is:( move ua + 2 , 9 ; move 3 , 4 )  decode:( move ua + 2 , 9 ; move 3 , 4 ) 
[5203] c:3 is:( move 3 , 4 * 4 ; move ua , 5 )  decode:( move 3 , 4 * 4 ; move ua , 5 ) 
[5204] c:0 is:( move 4 , 9 ; move ua , 0 - 4 )  decode:( move 0 - ua , 5 ; move 4 , 4 ) 
[5205] c:3 is:( move 4 , 2 / ua ; move 4 , 5 )  decode:( move 4 , 2 / ua ; move 4 , 5 ) 
[5206] c:0 is:( move 5 , 5 ; move ua , 2 / 3 )  decode:( move 5 , 5 ; move ua , 3 / 2 ) 
[5207] c:0 is:( move 5 , ul ; move 4 , 2 / 3 )  decode:( move 5 , ul ; move 4 , 2 / 5 ) 
[5208] c:3 is:( move ua , 5 ; move 4 , 2 / 4 )  decode:( move ua , 5 ; move 4 , 2 / 4 ) 
[5209] c:0 is:( move ua , 3 ; move 4 , 5 * 4 )  decode:( move 4 , 3 ; move ua , 5 * 4 ) 
[5210] c:3 is:( move ua , 2 - 9 ; move 4 , 2 )  decode:( move ua , 2 - 9 ; move 4 , 2 ) 
[5211] c:3 is:( move 3 , 0 - 9 ; move ua , 5 )  decode:( move 3 , 0 - 9 ; move ua , 5 ) 
[5212] c:0 is:( move 3 , 2 * 9 ; move ua , 2 )  decode:( move 3 , 9 + 9 ; move ua , 2 ) 
[5213] c:3 is:( move 5 , ua / 4 ; move 2 , 4 )  decode:( move 5 , ua / 4 ; move 2 , 4 ) 
[5214] c:3 is:( move 3 , 4 * 4 ; move 4 , ul )  decode:( move 3 , 4 * 4 ; move 4 , ul ) 
[5215] c:0 is:loop 0 , 4 , move 4 - ua , 3 / 9  decode:loop 0 , 4 , move ua - 4 , 2 / 9 
[5216] c:0 is:( move ua , 3 ; move 9 + 2 , 4 )  decode:( move ua , 3 ; move  + 2 , 4 ) 
[5217] c:3 is:( move ul , 4 ; move 4 , 2 / 4 )  decode:( move ul , 4 ; move 4 , 2 / 4 ) 
[5218] c:3 is:( move 4 , ul / 6 ; move 2 , 2 )  decode:( move 4 , ul / 6 ; move 2 , 2 ) 
[5219] c:0 is:( move 3 , 6 + 4 ; move 4 , ul )  decode:( move 3 , 3 + 4 ; move 4 , ul ) 
[5220] c:0 is:( move ua , 4 * 5 ; move 4 , 3 )  decode:( move 3 , ul ; move ua , 3 ) 
[5221] c:0 is:( move 4 , 0 - 9 ; move 3 , ul )  decode:( move 3 , 0 - 9 ; move 3 , ul ) 
[5222] c:0 is:( move 2 , 4 ; move ua , 5 / 4 )  decode:( move ua , ua / 3 ; move 2 , 5 ) 
[5223] c:3 is:( move 2 , 2 / 6 ; move 4 , ul )  decode:( move 2 , 2 / 6 ; move 4 , ul ) 
[5224] c:0 is:( move ua , 3 * 4 ; move 4 , 5 )  decode:( move ua , 4 * 3 ; move 4 , 5 ) 
[5225] c:3 is:( move ua , 4 * 4 ; move 3 , 5 )  decode:( move ua , 4 * 4 ; move 3 , 5 ) 
[5226] c:0 is:( move ua , 4 ; move 4 , 4 / 3 )  decode:( move ua , 4 ; move 4 , 4 * 3 ) 
[5227] c:3 is:( move 3 , ul ; move 4 , 4 / 3 )  decode:( move 3 , ul ; move 4 , 4 / 3 ) 
[5228] c:3 is:( move 5 , ua / 4 ; move 4 , 2 )  decode:( move 5 , ua / 4 ; move 4 , 2 ) 
[5229] c:0 is:( move ua , 0 ; move 8 , 8 + 2 )  decode:( move ua , 8 ; move 8 , 0 - 9 ) 
[5230] c:3 is:( move 9 , 4 + 3 ; move ua , 2 )  decode:( move 9 , 4 + 3 ; move ua , 2 ) 
[5231] c:3 is:( move ua , 9 + 4 ; move 3 , 2 )  decode:( move ua , 9 + 4 ; move 3 , 2 ) 
[5232] c:0 is:( move 5 , ua / 3 ; move 4 , 3 )  decode:( move 5 , 0 - 2 ; move 4 , 3 ) 
[5233] c:0 is:( move 9 , 0 ; move 2 , ua / 4 )  decode:( move 9 , 0 ; move 3 , 7 ) 
[5234] c:3 is:( move 4 , ua / 4 ; move 5 , 2 )  decode:( move 4 , ua / 4 ; move 5 , 2 ) 
[5235] c:0 is:( move 5 , 4 ; move 4 , 2 / ua )  decode:( move 4 , 4 ; move 4 , 2 / ua ) 
[5236] c:0 is:( move 3 - ua , 3 ; move 4 , 7 )  decode:( move 3 , 6 ; move 4 , 4 ) 
[5237] c:3 is:( move 5 , ul / 4 ; move 3 , 2 )  decode:( move 5 , ul / 4 ; move 3 , 2 ) 
[5238] c:0 is:( move 4 , 4 ; move ua , 3 * 5 )  decode:( move 4 , 4 ; move 5 , 5 * 2 ) 
[5239] c:3 is:( move ua , 3 / 2 ; move 5 , 5 )  decode:( move ua , 3 / 2 ; move 5 , 5 ) 
[5240] c:3 is:( move ua , 4 / 3 ; move 4 , 4 )  decode:( move ua , 4 / 3 ; move 4 , 4 ) 
[5241] c:0 is:( move 3 , 3 ; move ua , 5 / 4 )  decode:( move 3 , 3 ; move ua , 0 - 5 ) 
[5242] c:0 is:( move 4 , 9 ; move ua , 0 - 4 )  decode:( move 0 - ua , 5 ; move 4 , 4 ) 
[5243] c:3 is:( move 4 , 4 / 3 ; move ua , 4 )  decode:( move 4 , 4 / 3 ; move ua , 4 ) 
[5244] c:3 is:( move 4 , 6 ; move ua + 4 , 4 )  decode:( move 4 , 6 ; move ua + 4 , 4 ) 
[5245] c:0 is:( move 4 , 9 ; move 2 - ua , 2 )  decode:( move 4 , 9 ; move 4 , 2 - 3 ) 
[5246] c:0 is:( move 9 , 0 - 4 ; move 3 , ul )  decode:( move 3 , 0 ; move 9 , 2 - 3 ) 
[5247] c:0 is:( move 3 , ul ; move 4 , 4 * 4 )  decode:( move 3 , ul ; move 4 , 3 ) 
[5248] c:0 is:( move 9 , 3 ; move ua - 3 , 2 )  decode:( move 9 , 3 ; move 3 ; move 3 , ) 
[5249] c:3 is:( move 2 , 4 ; move 5 , ua / 4 )  decode:( move 2 , 4 ; move 5 , ua / 4 ) 
[5250] c:0 is:( move 9 , ul ; move 2 , 2 - 3 )  decode:( move 2 , v; move 3 + 3 , ul ) 
[5251] c:0 is:( move 5 , 6 ; move 4 - ua , 2 )  decode:( move 5 , 6 ; move 3 , ul ) 
[5252] c:3 is:( move 5 , ul / 3 ; move 2 , 4 )  decode:( move 5 , ul / 3 ; move 2 , 4 ) 
[5253] c:0 is:( move 4 , 4 + 6 ; move ua , 4 )  decode:( move 4 , ua / 4 ; move ua , 4 ) 
[5254] c:0 is:( move 4 , 4 ; move ua - 4 , 5 )  decode:( move 4 , 4 ; move 3 , 5 ) 
[5255] c:0 is:( move 4 , 8 ; move ua , 2 - 3 )  decode:( move ua , 8 ; move 4 , ul ) 
[5256] c:3 is:( move 4 , 2 / 3 ; move 5 , ul )  decode:( move 4 , 2 / 3 ; move 5 , ul ) 
[5257] c:0 is:( move 4 , 2 ; move 2 - ua , 9 )  decode:( move 4 , 2 ; move 4 , 3 * 4 ) 
[5258] c:3 is:( move ua , 0 - 9 ; move 3 , 5 )  decode:( move ua , 0 - 9 ; move 3 , 5 ) 
[5259] c:0 is:( move 2 , 9 ; move 3 + ua , 4 )  decode:( move 2 , 9 ; move d3 + 3 4 ) 
[5260] c:3 is:( move 4 , 2 / 6 ; move 2 , ul )  decode:( move 4 , 2 / 6 ; move 2 , ul ) 
[5261] c:0 is:( move ua + 3 , 9 ; move 3 , 3 )  decode:( move 3 , 9 ; move ua + 3 , 3 ) 
[5262] c:0 is:( move 0 - 3 , 9 ; move 4 , ul )  decode:( move 3 , 6 ; move 4 , 4 ) 
[5263] c:0 is:( move 3 , 9 ; move 3 - ua , 2 )  decode:( move 3 , 9 ; move 3 , 5 ) 
[5264] c:0 is:( move 3 - ua , 2 ; move 3 , 9 )  decode:( move 3 , ua ; move 3 , 9 / 4 ) 
[5265] c:0 is:( move ua + 2 , 3 ; move 9 , 4 )  decode:( move ua + 3 , 3 ; move 9 , 4 ) 
[5266] c:0 is:( move 3 , 5 ; move ua , 4 / 3 )  decode:( move 0 - ua , 0 ; move 3 , 4 ) 
[5267] c:0 is:( move ua , 2 + 9 ; move 5 , 2 )  decode:( move ua , 9 + 2 ; move 5 , 2 ) 
[5268] c:3 is:( move 4 , 4 * 3 ; move 4 , ul )  decode:( move 4 , 4 * 3 ; move 4 , ul ) 
[5269] c:0 is:( move 9 , 6 ; move ua , 0 - 2 )  decode:( move ua , 6 ; move 9 , 0 - 2 ) 
[5270] c:3 is:( move 3 , ua / 4 ; move 3 , 5 )  decode:( move 3 , ua / 4 ; move 3 , 5 ) 
[5271] c:0 is:( move 6 , 2 ; move ua , 4 / 3 )  decode:( move ua , ul / 4 ; move ua , 5 ) 
[5272] c:3 is:( move 2 , ua / 4 ; move 4 , 5 )  decode:( move 2 , ua / 4 ; move 4 , 5 ) 
[5273] c:0 is:( move 4 , 2 ; move ua , 7 * 3 )  decode:( move ua , ul ; move 4 , ua / 3 ) 
[5274] c:0 is:( move 5 , 2 + 9 ; move ua , 2 )  decode:( move 5 , 9 + 2 ; move ua , 2 ) 
[5275] c:3 is:( move ua , 4 ; move 5 , 4 * 3 )  decode:( move ua , 4 ; move 5 , 4 * 3 ) 
[5276] c:3 is:( move 3 , 4 / 3 ; move 4 , ul )  decode:( move 3 , 4 / 3 ; move 4 , ul ) 
[5277] c:3 is:( move ua + 3 , 9 ; move 4 , 2 )  decode:( move ua + 3 , 9 ; move 4 , 2 ) 
[5278] c:3 is:( move 4 , ua / 4 ; move 3 , 4 )  decode:( move 4 , ua / 4 ; move 3 , 4 ) 
[5279] c:0 is:( move 4 , 6 ; move ua - 3 , 4 )  decode:( move 4 , 6 ; move 4 , 4 ) 
[5280] c:0 is:( move 9 , 2 ; move ua + 3 , 4 )  decode:( move 9 , 2 ; move 3 + ua , 4 ) 
[5281] c:3 is:( move ua , 2 / 6 ; move 3 , 4 )  decode:( move ua , 2 / 6 ; move 3 , 4 ) 
[5282] c:3 is:( move 4 , 0 - 9 ; move ua , 4 )  decode:( move 4 , 0 - 9 ; move ua , 4 ) 
[5283] c:0 is:( move 4 , 6 ; move 3 , 2 / ua )  decode:( move 3 , 6 ; move 4 , 2 / ua ) 
[5284] c:0 is:( move 4 , ul ; move 4 , 5 * 2 )  decode:( move 4 , ul ; move 4 , ua * ua ) 
[5285] c:3 is:( move ua + 2 , 6 ; move 8 , 2 )  decode:( move ua + 2 , 6 ; move 8 , 2 ) 
[5286] c:3 is:( move 6 , 3 / 2 ; move ua , 4 )  decode:( move 6 , 3 / 2 ; move ua , 4 ) 
[5287] c:0 is:( move 9 , 3 ; move 0 - ua , 5 )  decode:( move 9 , 3 ; move ua , ua * ua ) 
[5288] c:0 is:( move 0 - ua , 9 ; move 3 , 5 )  decode:( move ua , 4 * 3 ; move 3 , 2 ) 
[5289] c:3 is:( move ua , 9 ; move 5 , 0 - 3 )  decode:( move ua , 9 ; move 5 , 0 - 3 ) 
[5290] c:0 is:( move 9 , 2 ; move ua - 4 , 2 )  decode:( move 9 , 2 ; move 3 , 2 ) 
[5291] c:0 is:( move ua , 3 / 4 ; move 6 , 2 )  decode:( move ua , 4 / 3 ; move ua , 2 ) 
[5292] c:0 is:( move ua + 2 , 4 ; move 4 , 8 )  decode:( move ua + 3 , 4 ; move 4 , 8 ) 
[5293] c:0 is:( move 2 - 3 , 9 ; move ua , 3 )  decode:move ua , 3 * 3 
[5294] c:0 is:( move 5 , 2 / 6 ; move ua , 2 )  decode:( move 5 , 9 / ua ; move ua , 2 ) 
[5295] c:0 is:( move 0 - 7 , 5 ; move 4 , ul )  decode:( move 3 - ua , 6 ; move 4 , ul ) 
[5296] c:0 is:( move ua + 3 , 6 ; move 7 , 2 )  decode:( move 9 , 6 ; move 7 , 2 ) 
[5297] c:0 is:( move 4 , 2 / 5 ; move ua , 4 )  decode:( move 4 , 2 / 6 ; move ua , 4 ) 
[5298] c:3 is:( move 3 , 2 / 6 ; move ua , 4 )  decode:( move 3 , 2 / 6 ; move ua , 4 ) 
[5299] c:3 is:( move 4 , 2 - 9 ; move ua , 2 )  decode:( move 4 , 2 - 9 ; move ua , 2 ) 
[5300] c:0 is:( move 4 , 2 / 4 ; move 4 , ul )  decode:( move 4 , 9 / 4 ; move 4 , ul ) 
[5301] c:0 is:( move 3 , 4 * 7 ; move ua , 2 )  decode:( move 3 , 9 ; move ua , 0 - 2 ) 
[5302] c:0 is:( move 9 , ul ; move 2 - 3 , 2 )  decode:( move 9 , ul ; move ul , ul ) 
[5303] c:3 is:( move 2 , 4 ; move 4 , ul / 4 )  decode:( move 2 , 4 ; move 4 , ul / 4 ) 
[5304] c:3 is:( move ua + 2 , 9 ; move 5 , 2 )  decode:( move ua + 2 , 9 ; move 5 , 2 ) 
[5305] c:0 is:( move 3 , 4 ; move 4 , ua / 4 )  decode:( move 3 , 4 ; move 4 , 3 / 2 ) 
[5306] c:0 is:( move ua , 4 / 3 ; move 3 , 5 )  decode:( move 3 , 3 / move ua , 5 ) 
[5307] c:3 is:( move 4 , 6 ; move ua , 3 / 2 )  decode:( move 4 , 6 ; move ua , 3 / 2 ) 
[5308] c:0 is:( move ua , 0 - 4 ; move 4 , 9 )  decode:( move 3 , 5 ; move ua , 9 ) 
[5309] c:3 is:( move 3 , ul / 6 ; move 3 , 2 )  decode:( move 3 , ul / 6 ; move 3 , 2 ) 
[5310] c:3 is:( move ua , 4 / 3 ; move 5 , 3 )  decode:( move ua , 4 / 3 ; move 5 , 3 ) 
[5311] c:0 is:( move ua , 6 ; move 3 , 2 / 4 )  decode:( move 2 , 6 ; move ua + ul , 7 ) 
[5312] c:0 is:( move ua , 9 ; move 4 , 0 - 4 )  decode:( move 4 , ua * ua ; move ua , 4 ) 
[5313] c:3 is:( move 4 , 5 ; move 4 + 4 , ul )  decode:( move 4 , 5 ; move 4 + 4 , ul ) 
[5314] c:3 is:( move 3 , 9 ; move ua , 2 - 3 )  decode:( move 3 , 9 ; move ua , 2 - 3 ) 
[5315] c:0 is:( move 4 , 3 ; move ua , 7 + 4 )  decode:( move 4 , 3 ; move ua , 9 + 4 ) 
[5316] c:0 is:( move 9 , 4 ; move ua + 2 , 3 )  decode:( move ua + 2 , 4 ; move 9 , 3 ) 
[5317] c:0 is:( move 3 , 4 ; move 4 + ua , 8 )  decode:( move 3 , 4 ; move 4 + 4 , 8 ) 
[5318] c:0 is:( move ua , 2 / 8 ; move 2 , 4 )  decode:( move ua , ul / 4 ; move 2 , 4 ) 
[5319] c:0 is:( move ua , 5 / 4 ; move 3 , 4 )  decode:( move 3 , 0 - 4 ; move 3 , 4 ) 
[5320] c:3 is:( move 4 , 4 ; move 3 + ua , 8 )  decode:( move 4 , 4 ; move 3 + ua , 8 ) 
[5321] c:0 is:( move 5 , 2 / 4 ; move 4 , ul )  decode:( move 5 , 3 / 4 ; move 4 , ul ) 
[5322] c:3 is:( move 4 , 7 ; move 2 - ua , 5 )  decode:( move 4 , 7 ; move 2 - ua , 5 ) 
[5323] c:0 is:( move 4 , ul ; move 4 , 5 / 2 )  decode:( move 4 , 2 / 6 ; move 4 , 9 ) 
[5324] c:3 is:( move ua , 9 + 5 ; move 3 , 2 )  decode:( move ua , 9 + 5 ; move 3 , 2 ) 
[5325] c:0 is:( move ua , 3 ; move 4 , 7 * 3 )  decode:( move 4 , 2 ; move ua , ua / 3 ) 
[5326] c:0 is:( move ua , 4 * 4 ; move 5 , 4 )  decode:loop 0 , 2 , move ua - 2 , v0 - 3 
[5327] c:3 is:( move 5 , 4 / ua ; move 2 , 5 )  decode:( move 5 , 4 / ua ; move 2 , 5 ) 
[5328] c:3 is:( move ua + 3 , 9 ; move 5 , 2 )  decode:( move ua + 3 , 9 ; move 5 , 2 ) 
[5329] c:3 is:( move 4 , 2 / 6 ; move 3 , ul )  decode:( move 4 , 2 / 6 ; move 3 , ul ) 
[5330] c:0 is:( move 3 , 9 ; move 3 + ua , 4 )  decode:( move 3 , 9 ; move d3 + 3 / v) 0 
[5331] c:0 is:( move 5 , 3 ; move 4 , ua / 4 )  decode:( move 5 , 3 ; move 4 , 7 + 4 ) 
[5332] c:0 is:( move ua , 3 / 4 ; move 5 , 4 )  decode:( move ua , 4 / 5 ; move 5 , 4 ) 
[5333] c:0 is:( move ua , 4 / 5 ; move 4 , 3 )  decode:( move ua , 4 ; move 4 , 3 ) 
[5334] c:0 is:( move 4 - ua , 2 ; move 4 , 8 )  decode:( move 3 , 2 ; move 4 , 8 ) 
[5335] c:0 is:( move ua , 5 ; move 4 , 4 * 4 )  decode:( move 4 , 5 ; move 5 , 4 * 4 ) 
[5336] c:3 is:( move 5 , ua / 3 ; move 4 , 4 )  decode:( move 5 , ua / 3 ; move 4 , 4 ) 
[5337] c:3 is:( move ua , 2 ; move 5 , 5 / 4 )  decode:( move ua , 2 ; move 5 , 5 / 4 ) 
[5338] c:0 is:( move 4 , 3 ; move 2 - ua , 9 )  decode:( move 4 , 3 ; move 4 , 6 ) 
[5339] c:0 is:( move ua , 6 ; move 0 - 3 , 9 )  decode:( move ua , 6 ; move 4 , 4 * 3 ) 
[5340] c:3 is:( move 4 , 4 / 3 ; move 4 , ul )  decode:( move 4 , 4 / 3 ; move 4 , ul ) 
[5341] c:3 is:( move 4 , ul ; move 4 , 4 / 3 )  decode:( move 4 , ul ; move 4 , 4 / 3 ) 
[5342] c:0 is:( move 4 , 5 ; move 4 , 3 / ua )  decode:( move 4 , 5 ; move 4 , 4 / ua ) 
[5343] c:3 is:( move 4 , ua / 3 ; move 4 , 5 )  decode:( move 4 , ua / 3 ; move 4 , 5 ) 
[5344] c:0 is:( move 5 , ul ; move 4 , 2 / 4 )  decode:( move 5 , ul ; move 4 , 2 / 5 ) 
[5345] c:3 is:( move 3 , 4 * 4 ; move 5 , ul )  decode:( move 3 , 4 * 4 ; move 5 , ul ) 
[5346] c:0 is:( move 4 , 5 ; move ua , 4 / 3 )  decode:( move 0 - ua , 0 ; move 4 , 5 ) 
[5347] c:3 is:( move 5 , ua / 4 ; move 2 , 5 )  decode:( move 5 , ua / 4 ; move 2 , 5 ) 
[5348] c:0 is:( move 4 , 9 ; move 0 - 4 , ul )  decode:( move 4 , 9 ; move 4 , ua / 3 ) 
[5349] c:0 is:( move 9 , 3 / 2 ; move ua , 2 )  decode:( move 9 , 9 + 4 ; move ua , 2 ) 
[5350] c:0 is:( move ua + 3 , 9 ; move 3 , 4 )  decode:( move 9 , 9 ; move 3 , 4 ) 
[5351] c:0 is:( move 9 , 6 ; move ua , 0 - 3 )  decode:loop 0 , 3 , move v0 * 3 , 3 
[5352] c:0 is:( move ua , 4 + 3 ; move 9 , 3 )  decode:( move ua , 3 + 9 ; move 9 , 3 ) 
[5353] c:3 is:( move ua , 4 + 6 ; move 4 , 5 )  decode:( move ua , 4 + 6 ; move 4 , 5 ) 
[5354] c:3 is:( move 4 , 6 ; move ua , 4 * 3 )  decode:( move 4 , 6 ; move ua , 4 * 3 ) 
[5355] c:3 is:( move 4 , 9 ; move 3 - ua , 2 )  decode:( move 4 , 9 ; move 3 - ua , 2 ) 
[5356] c:1 is:( move 3 , 9 + 2 ; move ua , 5 )  decode:( move 3 , 9 + 2 ; move ua , 5 ) 
[5357] c:0 is:( move 5 / 2 , 4 ; move 4 , ul )  decode:( move 3 , 4 ; move 4 , ul ) 
[5358] c:0 is:( move 4 , 3 ; move ua , 4 / 5 )  decode:( move 4 , 3 ; move ua , 5 / 4 ) 
[5359] c:3 is:( move 9 , 6 ; move ua + 2 , 2 )  decode:( move 9 , 6 ; move ua + 2 , 2 ) 
[5360] c:0 is:( move 4 , ul / 4 ; move 3 , 4 )  decode:( move 4 , ul / 4 ; move 4 , 4 ) 
[5361] c:3 is:( move 3 , 2 + 9 ; move 4 , ul )  decode:( move 3 , 2 + 9 ; move 4 , ul ) 
[5362] c:3 is:( move 4 , 3 ; move 3 - ua , 8 )  decode:( move 4 , 3 ; move 3 - ua , 8 ) 
[5363] c:3 is:( move ua , 9 + 4 ; move 4 , 2 )  decode:( move ua , 9 + 4 ; move 4 , 2 ) 
[5364] c:3 is:( move 4 , 0 - 9 ; move ua , 5 )  decode:( move 4 , 0 - 9 ; move ua , 5 ) 
[5365] c:0 is:( move ua , 9 ; move 2 - 3 , 4 )  decode:( move ua , 9 ; move  4 + 4 4 ) 
[5366] c:0 is:( move 5 , 4 ; move ua , 4 * 4 )  decode:( move ul - ua , ul ; move ua , 6 ) 
[5367] c:3 is:( move 5 , 2 / 4 ; move ua , 5 )  decode:( move 5 , 2 / 4 ; move ua , 5 ) 
[5368] c:3 is:( move 2 - ua , 4 ; move 5 , 7 )  decode:( move 2 - ua , 4 ; move 5 , 7 ) 
[5369] c:0 is:loop 0 , 4 , move 4 - ua , 4 / 9  decode:loop 0 , 4 , move 4 - ua , 3 / 9 
[5370] c:3 is:( move 5 , 0 - 9 ; move ua , 4 )  decode:( move 5 , 0 - 9 ; move ua , 4 ) 
[5371] c:3 is:( move ua , 4 / 3 ; move 7 , 2 )  decode:( move ua , 4 / 3 ; move 7 , 2 ) 
[5372] c:0 is:( move 5 , 3 / 4 ; move ua , 4 )  decode:( move 5 , 4 / 3 ; move ua , 4 ) 
[5373] c:0 is:( move 5 , 9 ; move ua , 0 - 4 )  decode:( move ua , ua * ua ; move 5 , 4 ) 
[5374] c:0 is:( move 0 - 4 , 9 ; move ua , 5 )  decode:( move 4 , 4 * 3 ; move ua , 5 ) 
[5375] c:0 is:( move 3 - ua , 3 ; move 4 , 8 )  decode:( move 3 , 6 ; move 4 , 8 ) 
[5376] c:0 is:( move 2 , 9 ; move ua , 2 / 3 )  decode:( move 2 , 9 ; move ua , 3 / 2 ) 
[5377] c:0 is:( move 6 , 2 / ua ; move 4 , 4 )  decode:( move ua , 2 / ua ; move 4 , 4 ) 
[5378] c:3 is:( move 4 , 9 ; move ua , 2 - 3 )  decode:( move 4 , 9 ; move ua , 2 - 3 ) 
[5379] c:1 is:( move 2 , 9 ; move ua , 3 / 2 )  decode:( move 2 , 9 ; move ua , 3 + 7 ) 
[5380] c:3 is:( move 3 , ua / 4 ; move 5 , 4 )  decode:( move 3 , ua / 4 ; move 5 , 4 ) 
[5381] c:0 is:( move 9 , 0 ; move 4 , ua / 3 )  decode:( move 9 , ul ; move 4 , ua / 3 ) 
[5382] c:0 is:( move ua , 6 ; move 4 , 3 * 4 )  decode:( move ua , 6 ; move 4 , 4 * 4 ) 
[5383] c:3 is:( move ua , 9 + 2 ; move 4 , 4 )  decode:( move ua , 9 + 2 ; move 4 , 4 ) 
[5384] c:3 is:( move 3 , ua / 4 ; move 7 , 2 )  decode:( move 3 , ua / 4 ; move 7 , 2 ) 
[5385] c:3 is:( move 5 , ua / 4 ; move 3 , 4 )  decode:( move 5 , ua / 4 ; move 3 , 4 ) 
[5386] c:3 is:( move 5 , 4 * 4 ; move ua , 4 )  decode:( move 5 , 4 * 4 ; move ua , 4 ) 
[5387] c:3 is:( move ua , 2 / 6 ; move 4 , 4 )  decode:( move ua , 2 / 6 ; move 4 , 4 ) 
[5388] c:3 is:( move 3 , 2 - 9 ; move ua , 4 )  decode:( move 3 , 2 - 9 ; move ua , 4 ) 
[5389] c:3 is:( move 6 , 9 ; move ua , 0 - 3 )  decode:( move 6 , 9 ; move ua , 0 - 3 ) 
[5390] c:0 is:( move 4 , 0 ; move ua , 9 * 4 )  decode:( move 4 , 0 ; move ua , 3 / 2 ) 
[5391] c:3 is:( move 4 , 0 - 9 ; move 4 , ul )  decode:( move 4 , 0 - 9 ; move 4 , ul ) 
[5392] c:3 is:( move 5 , 6 ; move ua , 3 / 2 )  decode:( move 5 , 6 ; move ua , 3 / 2 ) 
[5393] c:3 is:( move 5 , 4 ; move ua , 4 / 3 )  decode:( move 5 , 4 ; move ua , 4 / 3 ) 
[5394] c:0 is:( move 4 , ul ; move 4 , 2 / 5 )  decode:( move 3 , ul ; move 4 , 2 / 5 ) 
[5395] c:0 is:( move 4 + ul , 2 ; move 9 , 3 )  decode:( move 0 - ua , 5 ; move 9 , 3 ) 
[5396] c:3 is:( move 4 , 9 ; move ua , 2 - 3 )  decode:( move 4 , 9 ; move ua , 2 - 3 ) 
[5397] c:0 is:( move 9 , 2 ; move 2 , ua / 3 )  decode:( move 9 , 2 ; move 3 , 2 ) 
[5398] c:3 is:( move 3 , 6 ; move ua , 5 / 2 )  decode:( move 3 , 6 ; move ua , 5 / 2 ) 
[5399] c:0 is:( move ua , 0 - 7 ; move 7 , 4 )  decode:loop 0 , 3 , move 0 - 5 , 0 - v0 
[5400] c:0 is:( move 4 , 3 / 4 ; move 4 , ul )  decode:( move 4 , 7 ; move 4 , ul ) 
[5401] c:0 is:( move ua , 2 / 4 ; move 8 , 2 )  decode:( move ua , 3 / ua ; move 8 , 2 ) 
[5402] c:0 is:( move 2 , 9 ; move ua , 4 + 4 )  decode:( move 2 , 9 ; move ua , 9 + 4 ) 
[5403] c:0 is:( move 0 - 4 , 9 ; move 4 , ul )  decode:( move 4 , 4 / ua ; move 4 , 4 ) 
[5404] c:3 is:( move 4 , ua / 4 ; move 4 , 4 )  decode:( move 4 , ua / 4 ; move 4 , 4 ) 
[5405] c:0 is:( move 9 , 3 ; move 3 + ua , 4 )  decode:( move 9 , 3 ; move 9 , 4 ) 
[5406] c:3 is:( move 6 , 9 ; move ua + 2 , 2 )  decode:( move 6 , 9 ; move ua + 2 , 2 ) 
[5407] c:3 is:( move 4 , ua / 4 ; move 3 , 5 )  decode:( move 4 , ua / 4 ; move 3 , 5 ) 
[5408] c:0 is:( move ua , 6 ; move 3 , 4 / 3 )  decode:( move 3 , ul - move 7 , 5 ) 
[5409] c:0 is:( move 5 , 4 * 5 ; move ua , 3 )  decode:( move ua , 4 * 5 ; move ua , 3 ) 
[5410] c:0 is:( move 4 , 9 ; move 0 - ua , 5 )  decode:( move 4 , 9 ; move ua , 5 ) 
[5411] c:3 is:( move 3 , 5 ; move 4 , 4 / ua )  decode:( move 3 , 5 ; move 4 , 4 / ua ) 
[5412] c:3 is:( move 5 , 3 * 4 ; move 4 , ul )  decode:( move 5 , 3 * 4 ; move 4 , ul ) 
[5413] c:3 is:( move 4 , 4 * 4 ; move ua , 5 )  decode:( move 4 , 4 * 4 ; move ua , 5 ) 
[5414] c:0 is:( move 5 , 4 ; move 2 - ua , 7 )  decode:( move 5 , 4 ; move 4 , 7 ) 
[5415] c:0 is:( move 3 , 3 * 6 ; move ua , 5 )  decode:( move ua , ul ; move 3 , 5 / 2 ) 
[5416] c:3 is:( move 3 , 6 ; move ua , 4 / 3 )  decode:( move 3 , 6 ; move ua , 4 / 3 ) 
[5417] c:3 is:( move ua , 9 ; move 4 , 2 - 3 )  decode:( move ua , 9 ; move 4 , 2 - 3 ) 
[5418] c:3 is:( move 5 , 4 ; move ua , 5 / 2 )  decode:( move 5 , 4 ; move ua , 5 / 2 ) 
[5419] c:3 is:( move 4 , 9 ; move 3 - ua , 2 )  decode:( move 4 , 9 ; move 3 - ua , 2 ) 
[5420] c:3 is:( move 3 , 2 / 6 ; move 4 , ul )  decode:( move 3 , 2 / 6 ; move 4 , ul ) 
[5421] c:0 is:( move 2 - 3 , 9 ; move ua , 4 )  decode:( move ul , 9 ; move ua , 4 + 4 ) 
[5422] c:0 is:( move ua , 4 ; move 3 , 2 - 9 )  decode:( move ua , 4 ; move 3 , 2 / 3 ) 
[5423] c:3 is:( move 4 , 2 - 3 ; move ua , 9 )  decode:( move 4 , 2 - 3 ; move ua , 9 ) 
[5424] c:3 is:( move 5 , ul / 4 ; move 2 , 4 )  decode:( move 5 , ul / 4 ; move 2 , 4 ) 
[5425] c:0 is:loop 0 , 4 , move 9 - ua , 3 + 8  decode:loop 0 , 4 , move 3 , 0 - v0 + 2 
[5426] c:0 is:( move 4 , 4 + 9 ; move ua , 2 )  decode:( move 4 , 3 / 9 ; move ua , 2 ) 
[5427] c:0 is:( move 4 , 9 ; move ua + 2 , 4 )  decode:( move 4 , 9 ; move 8 , 4 ) 
[5428] c:0 is:( move ua - 9 , 3 ; move 4 , 2 )  decode:( move 3 , ul ; move 4 , 2 / 3 ) 
[5429] c:3 is:( move ua + 2 , 9 ; move 3 , 5 )  decode:( move ua + 2 , 9 ; move 3 , 5 ) 
[5430] c:3 is:( move 5 , 3 / 2 ; move 5 , ul )  decode:( move 5 , 3 / 2 ; move 5 , ul ) 
[5431] c:3 is:( move 5 , ua / 4 ; move 5 , 2 )  decode:( move 5 , ua / 4 ; move 5 , 2 ) 
[5432] c:3 is:( move 3 , ua / 4 ; move 4 , 5 )  decode:( move 3 , ua / 4 ; move 4 , 5 ) 
[5433] c:3 is:( move ua , 4 / 5 ; move 5 , 2 )  decode:( move ua , 4 / 5 ; move 5 , 2 ) 
[5434] c:3 is:( move 4 , 4 * 4 ; move 4 , ul )  decode:( move 4 , 4 * 4 ; move 4 , ul ) 
[5435] c:3 is:( move 5 , 4 / 3 ; move ua , 4 )  decode:( move 5 , 4 / 3 ; move ua , 4 ) 
[5436] c:0 is:( move 4 , 5 ; move ua , 4 * 4 )  decode:( move ua , 2 - 3 ; move 4 , 4 ) 
[5437] c:0 is:( move ua - 3 , 3 ; move 4 , 8 )  decode:( move 4 , 3 ; move 3 - ua , 8 ) 
[5438] c:3 is:( move 9 , 4 ; move ua + 2 , 4 )  decode:( move 9 , 4 ; move ua + 2 , 4 ) 
[5439] c:0 is:( move 0 - ua , 9 ; move 4 , 5 )  decode:( move ua , 4 * 3 ; move 4 , 2 ) 
[5440] c:3 is:( move 3 , 9 / 2 ; move ua , 2 )  decode:( move 3 , 9 / 2 ; move ua , 2 ) 
[5441] c:3 is:( move 2 - ua , 9 ; move 3 , 4 )  decode:( move 2 - ua , 9 ; move 3 , 4 ) 
[5442] c:0 is:( move 3 , 9 ; move 4 - ua , 2 )  decode:( move 3 , 9 ; move 3 , 5 ) 
[5443] c:0 is:( move 4 , 4 * 5 ; move 3 , ul )  decode:( move 3 , 2 ; move 4 , ul / 5 ) 
[5444] c:0 is:( move 5 , 2 - 9 ; move ua , 2 )  decode:loop 0 , 2 , move ua - v0 , 0 - 2 
[5445] c:3 is:( move 4 , 4 ; move 4 , 4 / ua )  decode:( move 4 , 4 ; move 4 , 4 / ua ) 
[5446] c:3 is:( move 3 , 2 / 6 ; move ua , 5 )  decode:( move 3 , 2 / 6 ; move ua , 5 ) 
[5447] c:2 is:( move 4 , 8 ; move ua + 3 , 4 )  decode:( move 4 , 8 ; move 9 , 4 ) 
[5448] c:3 is:( move 4 , 4 ; move ua , 7 + 4 )  decode:( move 4 , 4 ; move ua , 7 + 4 ) 
[5449] c:3 is:( move ua + 2 , 9 ; move 4 , 4 )  decode:( move ua + 2 , 9 ; move 4 , 4 ) 
[5450] c:3 is:( move 9 , 2 - 3 ; move ua , 4 )  decode:( move 9 , 2 - 3 ; move ua , 4 ) 
[5451] c:0 is:( move ua , 4 + 6 ; move 5 , 4 )  decode:( move ua , 4 + 5 ; move 5 , 4 ) 
[5452] c:0 is:( move 3 , 3 * 9 ; move ua , 2 )  decode:( move 3 , ua * ua ; move ua , 2 ) 
[5453] c:0 is:( move ua , 2 / 6 ; move 6 , 2 )  decode:( move ua , 9 / ua ; move ua , 2 ) 
[5454] c:0 is:( move ua , 9 / 2 ; move 3 , 2 )  decode:( move ua , 0 - 2 ; move 3 , 2 ) 
[5455] c:0 is:( move 9 , 0 ; move ua + 2 , 9 )  decode:( move 9 , 0 ; move ua + 3 , 9 ) 
[5456] c:0 is:( move 4 , 9 + 5 ; move ua , 2 )  decode:( move 4 , 2 / 6 ; move ua , 2 ) 
[5457] c:0 is:( move ua , 2 / 8 ; move 3 , 4 )  decode:( move ua , ul / 4 ; move 3 , 4 ) 
[5458] c:0 is:( move 4 , 6 ; move 0 - ua , 9 )  decode:( move 4 , 6 ; move ua , 4 / 3 ) 
[5459] c:0 is:( move 4 , 2 / 8 ; move ua , 3 )  decode:( move 3 , 4 / move ua , 3 ) 
[5460] c:3 is:( move 5 , ua / 4 ; move 3 , 5 )  decode:( move 5 , ua / 4 ; move 3 , 5 ) 
[5461] c:0 is:( move 4 , 2 - 9 ; move 3 , ul )  decode:( move 4 , 9 / 9 ; move 3 , ul ) 
[5462] c:0 is:( move ua , 3 / 4 ; move 6 , 4 )  decode:( move ua , 7 ; move ua , 4 ) 
[5463] c:0 is:( move 8 , 2 ; move 4 , ua / 3 )  decode:( move 4 - ua , 2 ; move 4 , ul ) 
[5464] c:0 is:( move ua , 7 ; move 3 , 4 / 3 )  decode:( move 3 , 5 ; move ua , 5 ) 
[5465] c:0 is:( move 4 , ua / 4 ; move 6 , 3 )  decode:( move ua , 3 / 4 ; move 4 , 3 ) 
[5466] c:0 is:( move ua , 9 / 4 ; move 2 , 2 )  decode:( move 2 , 4 ; move ua , 0 - 2 ) 
[5467] c:0 is:( move 5 , 3 * 5 ; move 4 , ul )  decode:( move 5 , 4 * 9 ; move 4 , ul ) 
[5468] c:0 is:( move ua , 3 / 2 ; move 8 , 4 )  decode:( move ua , 9 / 2 ; move 8 , 4 ) 
[5469] c:3 is:( move 5 , 4 / 5 ; move ua , 3 )  decode:( move 5 , 4 / 5 ; move ua , 3 ) 
[5470] c:3 is:( move 4 , 2 + 9 ; move 4 , ul )  decode:( move 4 , 2 + 9 ; move 4 , ul ) 
[5471] c:0 is:( move ua , 2 / 6 ; move 4 , 5 )  decode:( move ua , 2 - 6 ; move 4 , 5 ) 
[5472] c:3 is:( move 4 , ul ; move 5 , 4 / 3 )  decode:( move 4 , ul ; move 5 , 4 / 3 ) 
[5473] c:3 is:( move 5 , ua / 3 ; move 4 , 5 )  decode:( move 5 , ua / 3 ; move 4 , 5 ) 
[5474] c:0 is:( move ua , 3 / 4 ; move 8 , 2 )  decode:( move ua , 7 ; move 8 , 2 ) 
[5475] c:3 is:( move ua , 2 - 9 ; move 4 , 4 )  decode:( move ua , 2 - 9 ; move 4 , 4 ) 
[5476] c:3 is:( move 4 , 4 + 3 ; move ua , 9 )  decode:( move 4 , 4 + 3 ; move ua , 9 ) 
[5477] c:3 is:( move 5 , 9 + 2 ; move ua , 4 )  decode:( move 5 , 9 + 2 ; move ua , 4 ) 
[5478] c:0 is:( move 9 , 2 / 4 ; move ua , 2 )  decode:( move 9 , 9 + 4 ; move ua , 2 ) 
[5479] c:0 is:( move 9 , 3 + 4 ; move ua , 4 )  decode:( move 9 , 4 + 3 ; move ua , 4 ) 
[5480] c:3 is:( move ua , 9 / 2 ; move 2 , 4 )  decode:( move ua , 9 / 2 ; move 2 , 4 ) 
[5481] c:3 is:( move 9 , 3 / 2 ; move ua , 3 )  decode:( move 9 , 3 / 2 ; move ua , 3 ) 
[5482] c:3 is:( move 4 , 7 ; move ua , 2 / 4 )  decode:( move 4 , 7 ; move ua , 2 / 4 ) 
[5483] c:0 is:( move ua , 6 * 6 ; move 4 , 2 )  decode:( move ua , ul - 9 ; move 4 , 2 ) 
[5484] c:3 is:( move ua , 9 / 2 ; move 4 , 2 )  decode:( move ua , 9 / 2 ; move 4 , 2 ) 
[5485] c:0 is:( move 4 , 5 / 4 ; move ua , 4 )  decode:( move 4 , 4 / ua ; move ua , 4 ) 
[5486] c:0 is:( move 6 , 9 ; move ua , 0 - 4 )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[5487] c:0 is:( move ua , 6 ; move 4 , 4 / 3 )  decode:( move 0 - 4 , ul ; move ua , 5 ) 
[5488] c:0 is:( move 2 , 2 / 4 ; move ua , 9 )  decode:( move 2 , 3 / 4 ; move ua , 9 ) 
[5489] c:3 is:( move 2 - ua , 9 ; move 4 , 4 )  decode:( move 2 - ua , 9 ; move 4 , 4 ) 
[5490] c:3 is:( move ua + 2 , 9 ; move 5 , 4 )  decode:( move ua + 2 , 9 ; move 5 , 4 ) 
[5491] c:3 is:( move 4 , ua / 4 ; move 7 , 2 )  decode:( move 4 , ua / 4 ; move 7 , 2 ) 
[5492] c:0 is:( move 9 , 2 / 3 ; move ua , 3 )  decode:( move 9 , 3 / 2 ; move ua , 3 ) 
[5493] c:3 is:( move 8 , 4 * 4 ; move ua , 2 )  decode:( move 8 , 4 * 4 ; move ua , 2 ) 
[5494] c:0 is:( move 4 + 3 , 4 ; move ua , 9 )  decode:loop 0 , 2 , move ua , v0 + 9 
[5495] c:3 is:( move 9 , 0 ; move 4 , ua / 4 )  decode:( move 9 , 0 ; move 4 , ua / 4 ) 
[5496] c:0 is:( move 5 , 4 / 3 ; move 4 , ul )  decode:( move 4 , 4 / 3 ; move 4 , ul ) 
[5497] c:3 is:( move 4 , 2 / 6 ; move 4 , ul )  decode:( move 4 , 2 / 6 ; move 4 , ul ) 
[5498] c:0 is:( move ua , 3 / 4 ; move 5 , 5 )  decode:( move ua , 4 / 5 ; move 5 , 5 ) 
[5499] c:0 is:( move 5 , 2 / 4 ; move 5 , ul )  decode:( move 5 , 9 / 4 ; move 5 , ul ) 
[5500] c:0 is:( move 4 , 4 ; move 3 + ua , 9 )  decode:( move 4 , 4 ; move ua + 2 , 9 ) 
[5501] c:0 is:( move 4 , 2 / 4 ; move ua , 7 )  decode:( move 4 , 9 + 4 ; move ua , 7 ) 
[5502] c:3 is:( move 5 , ua / 4 ; move 4 , 4 )  decode:( move 5 , ua / 4 ; move 4 , 4 ) 
[5503] c:0 is:( move ua - 3 , 6 ; move 5 , 5 )  decode:( move 4 , 6 ; move ul - ua , 5 ) 
[5504] c:0 is:( move 5 , 5 ; move ua , 5 * 3 )  decode:( move ua , 0 - 2 ; move 5 , 4 ) 
[5505] c:0 is:( move 4 + 3 , 9 ; move 3 , ul )  decode:( move ua + ul , 9 ; move 3 , ul ) 
[5506] c:0 is:( move 4 , 4 ; move 5 , 4 / ua )  decode:( move 4 , 4 ; move 5 , 4 / 5 ) 
[5507] c:0 is:( move 5 , 4 ; move 3 + ua , 8 )  decode:( move 5 , 4 ; move 3 + 3 ua , 8 ) 
[5508] c:0 is:( move 5 , 4 + 9 ; move ua , 2 )  decode:( move 5 , 3 + 9 ; move ua , 2 ) 
[5509] c:0 is:( move 3 , 9 ; move ua - 2 , 5 )  decode:( move 3 , 9 ; move 4 , 5 ) 
[5510] c:3 is:( move ua , 4 * 3 ; move 9 , 2 )  decode:( move ua , 4 * 3 ; move 9 , 2 ) 
[5511] c:0 is:( move 3 , 2 ; move ua , 4 * 9 )  decode:( move 3 , 2 ; move ua , 3 / 2 ) 
[5512] c:0 is:( move 3 , 9 + 4 ; move ua , 4 )  decode:( move 3 , 2 / 4 ; move ua , 4 ) 
[5513] c:3 is:( move 4 , 2 - 9 ; move ua , 4 )  decode:( move 4 , 2 - 9 ; move ua , 4 ) 
[5514] c:0 is:( move 4 , ul / 4 ; move 3 , 5 )  decode:( move 3 , ul / 4 ; move 3 , 5 ) 
[5515] c:0 is:( move 4 , 6 ; move ua , 4 / 3 )  decode:( move 2 - ua , ul ; move 4 , 5 ) 
[5516] c:3 is:( move 4 , 9 ; move 2 - ua , 4 )  decode:( move 4 , 9 ; move 2 - ua , 4 ) 
[5517] c:3 is:( move 0 - ua , 9 ; move 5 , 5 )  decode:( move 0 - ua , 9 ; move 5 , 5 ) 
[5518] c:0 is:( move 5 , 4 ; move 4 , ua / 4 )  decode:( move 5 , 4 ; move 4 , 3 / 2 ) 
[5519] c:3 is:( move ua , 9 + 4 ; move 3 , 4 )  decode:( move ua , 9 + 4 ; move 3 , 4 ) 
[5520] c:0 is:( move 4 , 3 ; move 4 - ua , 8 )  decode:( move 4 , 3 ; move 3 , 8 ) 
[5521] c:3 is:( move ua , 3 ; move 7 , 4 / 3 )  decode:( move ua , 3 ; move 7 , 4 / 3 ) 
[5522] c:0 is:( move 9 , 3 ; move ua + 4 , 4 )  decode:( move ua + 3 ; move  + 4 , 4 ) 
[5523] c:0 is:( move ua , 4 * 4 ; move 6 , 4 )  decode:loop 0 , 2 , move ua , v0 - 5 
[5524] c:0 is:( move 2 , 9 ; move ua , 3 * 4 )  decode:( move 2 , 9 ; move ua , 4 * 3 ) 
[5525] c:0 is:( move 0 - 9 , 5 ; move ua , 5 )  decode:( move 9 , 5 ; move ua , 5 ) 
[5526] c:3 is:( move 4 , 5 ; move 4 , ua / 4 )  decode:( move 4 , 5 ; move 4 , ua / 4 ) 
[5527] c:3 is:( move 3 , 9 * 4 ; move ua , 2 )  decode:( move 3 , 9 * 4 ; move ua , 2 ) 
[5528] c:3 is:( move 9 , 4 ; move 4 - ua , 2 )  decode:( move 9 , 4 ; move 4 - ua , 2 ) 
[5529] c:3 is:( move 9 , 4 * 3 ; move ua , 2 )  decode:( move 9 , 4 * 3 ; move ua , 2 ) 
[5530] c:3 is:( move 5 , 9 ; move 3 - ua , 2 )  decode:( move 5 , 9 ; move 3 - ua , 2 ) 
[5531] c:0 is:( move 4 , 9 ; move 3 + ua , 4 )  decode:( move 4 , 9 ; move ua + 2 , 4 ) 
[5532] c:1 is:( move 5 , 2 / 6 ; move 3 , ul )  decode:( move 5 , 2 / 6 ; move 3 , ul ) 
[5533] c:0 is:( move 4 , 9 * 3 ; move ua , 2 )  decode:( move 4 , 9 * 4 ; move ua , 2 ) 
[5534] c:3 is:( move 3 , 4 / 3 ; move ua , 7 )  decode:( move 3 , 4 / 3 ; move ua , 7 ) 
[5535] c:0 is:( move 3 , 3 / 4 ; move ua , 7 )  decode:( move 3 , 7 ; move ua , 7 ) 
[5536] c:0 is:( move ua , 5 / 4 ; move 4 , 4 )  decode:( move 4 , 4 / 5 ; move 4 , 4 ) 
[5537] c:0 is:( move 9 , ul ; move 4 , 2 - 3 )  decode:( move 3 , 9 ; move ua , 2 - 3 ) 
[5538] c:0 is:( move 3 - ua , 3 ; move 4 , 9 )  decode:( move 3 , 0 ; move 4 , 4 * 3 ) 
[5539] c:0 is:( move 5 , 5 ; move 4 , 3 / ua )  decode:( move 4 , 5 ; move 4 , 2 / ua ) 
[5540] c:0 is:( move 5 , 6 ; move ua , 4 * 3 )  decode:( move 4 , 6 ; move ua , 4 * 3 ) 
[5541] c:3 is:( move 2 - ua , 9 ; move 3 , 5 )  decode:( move 2 - ua , 9 ; move 3 , 5 ) 
[5542] c:3 is:( move 4 , 9 ; move 4 - ua , 2 )  decode:( move 4 , 9 ; move 4 - ua , 2 ) 
[5543] c:0 is:( move ua , 2 / 6 ; move 5 , 4 )  decode:loop 0 , 3 , move ua - 2 , v0 - 5 
[5544] c:0 is:( move 3 , 6 ; move 4 , ua / 4 )  decode:( move 3 , 6 ; move 4 , 3 / 2 ) 
[5545] c:0 is:( move 9 , 2 / 3 ; move 2 , ul )  decode:( move 9 , 3 / 2 ; move 2 , ul ) 
[5546] c:3 is:( move ua , 4 / 5 ; move 4 , 4 )  decode:( move ua , 4 / 5 ; move 4 , 4 ) 
[5547] c:0 is:( move 3 + 5 , 9 ; move 2 , ul )  decode:( move 9 , 9 ; move 3 , ul ) 
[5548] c:3 is:( move ua , 6 ; move 4 , 5 / 2 )  decode:( move ua , 6 ; move 4 , 5 / 2 ) 
[5549] c:0 is:( move 3 , 8 ; move ua , 2 / 4 )  decode:( move 3 , 8 ; move ua , 4 / ua ) 
[5550] c:0 is:( move 4 , 6 ; move 4 , 3 / ua )  decode:( move 4 , 6 ; move 4 , 2 / 4 ) 
[5551] c:0 is:( move 5 , 9 ; move ua - 3 , 2 )  decode:( move 5 , 9 ; move 3 , 2 ) 
[5552] c:0 is:( move ua , 8 ; move 4 , 3 / 2 )  decode:( move 4 , 0 ; move ua , 3 / 2 ) 
[5553] c:0 is:( move 4 , ua ; move 2 - 8 , 5 )  decode:( move 4 , 0 ; move ua , ua * ua ) 
[5554] c:0 is:( move 9 , 6 ; move ua , 0 - 4 )  decode:( move ua , 6 ; move ua + 3 , 4 ) 
[5555] c:0 is:( move 6 , 9 + 2 ; move ua , 3 )  decode:( move ua , 3 + move 5 , 3 ) 
[5556] c:3 is:( move 4 , ua / 4 ; move 5 , 4 )  decode:( move 4 , ua / 4 ; move 5 , 4 ) 
[5557] c:3 is:( move ua , 4 / 3 ; move 8 , 2 )  decode:( move ua , 4 / 3 ; move 8 , 2 ) 
[5558] c:3 is:( move 4 , ul / 6 ; move 4 , 2 )  decode:( move 4 , ul / 6 ; move 4 , 2 ) 
[5559] c:0 is:( move 4 , 6 * 3 ; move 4 , ul )  decode:( move 4 , 3 * 3 ; move 4 , ul ) 
[5560] c:0 is:( move ua , 4 + 3 ; move 4 , 9 )  decode:loop 0 , 2 , move ul - ua , 4 * 4 
[5561] c:0 is:( move 3 , 5 / 4 ; move 4 , ul )  decode:loop 0 , 2 , move 3 - ua , 2 - 3 
[5562] c:0 is:( move 4 , 3 / 4 ; move ua , 6 )  decode:( move 4 , ua / 4 ; move ua , 6 ) 
[5563] c:0 is:( move 9 , 2 ; move 4 , ua / 3 )  decode:( move 9 , 2 ; move 4 , 0 - 2 ) 
[5564] c:0 is:loop 0 , 4 , move 3 - ua , 8 * 9  decode:loop 0 , 4 , move ua - 3 , 9 * 3 
[5565] c:0 is:( move ua , 9 ; move 3 , 2 / 4 )  decode:( move 3 , 9 ; move ua , 2 / 4 ) 
[5566] c:0 is:( move 3 , 4 * 4 ; move ua , 8 )  decode:( move 4 , 4 * 4 ; move ua , 8 ) 
[5567] c:0 is:( move 9 , 3 / 2 ; move ua , 4 )  decode:( 9 , 3 , 3 / , move ua , 4 
[5568] c:3 is:( move 4 , 9 ; move 3 - ua , 4 )  decode:( move 4 , 9 ; move 3 - ua , 4 ) 
[5569] c:0 is:( move 2 , 9 ; move 4 - ua , 5 )  decode:( move 2 , 9 ; move ua - 4 , 8 ) 
[5570] c:0 is:( move 8 , 3 / 4 ; move ua , 3 )  decode:( move 8 , 4 / ua ; move ua , 3 ) 
[5571] c:3 is:( move 9 , 4 / ua ; move 3 , 2 )  decode:( move 9 , 4 / ua ; move 3 , 2 ) 
[5572] c:0 is:( move 3 - ua , 9 ; move 4 , 4 )  decode:( move 3 , 6 ; move 4 , ul / 4 ) 
[5573] c:3 is:( move 9 , 2 / 4 ; move ua , 3 )  decode:( move 9 , 2 / 4 ; move ua , 3 ) 
[5574] c:0 is:( move 4 , 7 ; move ua , 4 / 3 )  decode:( move ua , 7 ; move 4 , 4 / 3 ) 
[5575] c:0 is:( move 5 , 5 / 3 ; move 4 , ul )  decode:( move 4 , 8 ; move ua - 2 , ul ) 
[5576] c:3 is:( move 3 , 4 / ua ; move 9 , 2 )  decode:( move 3 , 4 / ua ; move 9 , 2 ) 
[5577] c:0 is:( move ua , 8 ; move 3 , 3 / 4 )  decode:( move ua , 8 ; move 3 , 3 * 4 ) 
[5578] c:0 is:loop 0 , ua , move 0 - ua , 0 - 3  decode:loop 0 , 3 , move 0 - ua , 0 - 3 
[5579] c:0 is:( move 5 , 6 ; move ua , 6 + 4 )  decode:( move 5 , 6 ; move ua , 9 ) 
[5580] c:3 is:( move 3 , 9 ; move ua , 4 * 3 )  decode:( move 3 , 9 ; move ua , 4 * 3 ) 
[5581] c:0 is:( move 4 , 4 ; move ua - 3 , 9 )  decode:( move 4 , 4 ; move 4 , 9 ) 
[5582] c:0 is:( move ua , 4 ; move 5 , 7 * 3 )  decode:( move ul - ua , 3 ; move ua , ul ) 
[5583] c:0 is:( move 5 , ul / 6 ; move 4 , 2 )  decode:( move 5 , ul / ua ; move 4 , 2 ) 
[5584] c:0 is:( move 4 , 2 - 9 ; move 4 , ul )  decode:( move 4 , 9 / 2 ; move 4 , ul ) 
[5585] c:0 is:( move 3 , 9 ; move 0 - ua , 8 )  decode:( move 3 , 9 ; move ua , 3 + 8 ) 
[5586] c:0 is:( move ua , 2 ; move 4 , 3 / 9 )  decode:( move ua , 2 ; move 4 , 2 / 4 ) 
[5587] c:3 is:( move 5 , ua / 4 ; move 4 , 5 )  decode:( move 5 , ua / 4 ; move 4 , 5 ) 
[5588] c:0 is:( move 9 , 3 / 4 ; move ua , 2 )  decode:( move 9 , 4 + 3 ; move ua , 2 ) 
[5589] c:0 is:( move ua , 9 ; move 4 , 3 / 2 )  decode:( move 4 , 9 ; move ua , 9 / 2 ) 
[5590] c:3 is:( move 9 , 6 ; move ua + 2 , 4 )  decode:( move 9 , 6 ; move ua + 2 , 4 ) 
[5591] c:0 is:( move 3 , 4 ; move ua , 4 / 7 )  decode:( move 3 , 4 ; move 7 , 7 + 7 ) 
[5592] c:0 is:( move ua , 3 / 4 ; move 4 , 7 )  decode:( move ua , 7 ; move 4 , 7 ) 
[5593] c:0 is:( move 5 , 5 + 9 ; move ua , 2 )  decode:( move 5 , 9 + 4 ; move ua , 2 ) 
[5594] c:0 is:( move ua , 3 / 2 ; move 9 , 4 )  decode:( move ua , 9 / ua ; move 9 , 4 ) 
[5595] c:3 is:( move 3 , 9 ; move ua , 2 / 4 )  decode:( move 3 , 9 ; move ua , 2 / 4 ) 
[5596] c:3 is:( move 5 , ua / 4 ; move 7 , 2 )  decode:( move 5 , ua / 4 ; move 7 , 2 ) 
[5597] c:3 is:( move ua , 9 + 4 ; move 4 , 4 )  decode:( move ua , 9 + 4 ; move 4 , 4 ) 
[5598] c:3 is:( move ua , 2 / 4 ; move 4 , 8 )  decode:( move ua , 2 / 4 ; move 4 , 8 ) 
[5599] c:0 is:( move 7 , 4 ; move 4 , ua / 3 )  decode:( move 4 , 3 ; move ua , ua / 3 ) 
[5600] c:3 is:( move ua , 4 / 5 ; move 5 , 4 )  decode:( move ua , 4 / 5 ; move 5 , 4 ) 
[5601] c:3 is:( move 4 , 9 ; move 3 - ua , 4 )  decode:( move 4 , 9 ; move 3 - ua , 4 ) 
[5602] c:0 is:( move ua , 2 / 6 ; move 6 , 4 )  decode:loop 0 , 3 , move ua - 2 , v0 - 3 
[5603] c:3 is:( move 2 - ua , 9 ; move 4 , 5 )  decode:( move 2 - ua , 9 ; move 4 , 5 ) 
[5604] c:0 is:( move ua , 9 ; move 9 , 0 - 2 )  decode:( move ua + 3 , 9 ; move ua , 2 ) 
[5605] c:3 is:( move 4 , ua / 3 ; move 4 , 7 )  decode:( move 4 , ua / 3 ; move 4 , 7 ) 
[5606] c:3 is:( move 5 , ua / 4 ; move 5 , 4 )  decode:( move 5 , ua / 4 ; move 5 , 4 ) 
[5607] c:0 is:( move 4 * 2 , 9 ; move ua , 4 )  decode:( move ua + 2 , 9 ; move ua , 4 ) 
[5608] c:0 is:( move ua , 2 / 8 ; move 4 , 4 )  decode:( move ua , ul / 4 ; move 4 , 4 ) 
[5609] c:3 is:( move 5 , 4 / ua ; move 4 , 5 )  decode:( move 5 , 4 / ua ; move 4 , 5 ) 
[5610] c:0 is:( move 4 , 9 + 5 ; move 2 , ul )  decode:( move 4 , ua / 4 ; move 2 , ul ) 
[5611] c:3 is:( move 5 , ul / 4 ; move 4 , 4 )  decode:( move 5 , ul / 4 ; move 4 , 4 ) 
[5612] c:3 is:( move ua , 4 * 4 ; move 7 , 4 )  decode:( move ua , 4 * 4 ; move 7 , 4 ) 
[5613] c:3 is:( move ua , 4 / 3 ; move 9 , 2 )  decode:( move ua , 4 / 3 ; move 9 , 2 ) 
[5614] c:3 is:( move 4 , 6 ; move 4 , ua / 4 )  decode:( move 4 , 6 ; move 4 , ua / 4 ) 
[5615] c:3 is:( move ua , 9 / 2 ; move 3 , 4 )  decode:( move ua , 9 / 2 ; move 3 , 4 ) 
[5616] c:0 is:( move 0 - 9 , 3 ; move ua , 8 )  decode:( move 9 , 8 ; move ua , ua * ua ) 
[5617] c:0 is:( move 9 , 4 * 4 ; move ua , 2 )  decode:loop 0 , 3 , move v0 * 4 , 0 - 2 
[5618] c:0 is:( move 2 , 9 ; move ua , 4 / 3 )  decode:( move ua , 4 ; move 2 , 5 ) 
[5619] c:3 is:( move 3 , 9 / 2 ; move ua , 4 )  decode:( move 3 , 9 / 2 ; move ua , 4 ) 
[5620] c:3 is:( move 9 , 4 / 3 ; move ua , 2 )  decode:( move 9 , 4 / 3 ; move ua , 2 ) 
[5621] c:0 is:( move 3 + ua , 9 ; move 4 , 5 )  decode:( move 9 , 9 ; move 4 , 5 ) 
[5622] c:0 is:( move 5 , 9 / 2 ; move ua , 2 )  decode:( move ua , ul - 9 ; move ua , 2 ) 
[5623] c:0 is:( move ua , 9 ; move 3 , 4 * 3 )  decode:( move 3 , 9 ; move 4 , 4 * 3 ) 
[5624] c:3 is:( move 5 , 9 ; move 4 - ua , 2 )  decode:( move 5 , 9 ; move 4 - ua , 2 ) 
[5625] c:0 is:( move ua , 6 / 4 ; move 4 , 4 )  decode:( move ua , 3 / 2 ; move 4 , 4 ) 
[5626] c:3 is:( move 9 , 2 ; move ua , 6 + 4 )  decode:( move 9 , 2 ; move ua , 6 + 4 ) 
[5627] c:3 is:( move 4 , 4 * 9 ; move ua , 2 )  decode:( move 4 , 4 * 9 ; move ua , 2 ) 
[5628] c:0 is:( move 5 , 9 ; move 2 - ua , 4 )  decode:( move 5 , 9 ; move 4 , ul ) 
[5629] c:0 is:( move 5 , 8 ; move 2 - ua , 5 )  decode:( move 5 , 8 ; move 4 , ua * ua ) 
[5630] c:0 is:( move 9 , ua / 4 ; move 2 , 3 )  decode:( move ua , ua / 3 ; move 3 , 3 ) 
[5631] c:3 is:( move 4 , ul - 9 ; move 2 , 4 )  decode:( move 4 , ul - 9 ; move 2 , 4 ) 
[5632] c:0 is:( move 7 , 4 / 3 ; move ua , 4 )  decode:( move ua + ul , 3 / move ua , 4 ) 
[5633] c:0 is:loop 0 , 2 , move ul + ua , 0 - 2  decode:loop 0 , 2 , move ua + v0 , 0 - 2 
[5634] c:0 is:( move 5 , 9 + 3 + move ua , 4 )  decode:( move ua , 3 + move ua , 3 + 3 ) 
[5635] c:0 is:( move 4 , 9 / ua ; move 4 , 2 )  decode:( move 4 , 9 + 4 ; move 4 , 2 ) 
[5636] c:0 is:loop 0 , ua , move ua + 2 , 0 - 3  decode:loop 0 , 4 , move ua + 2 , 0 - 6 0 
[5637] c:3 is:( move 5 , ua / 4 ; move 5 , 5 )  decode:( move 5 , ua / 4 ; move 5 , 5 ) 
[5638] c:0 is:( move 9 , 3 ; move 4 , ua / 3 )  decode:( move 4 , 2 ; move ua + 3 , 2 ) 
[5639] c:3 is:loop 0 , 4 , move v0 + ul , v0  decode:loop 0 , 4 , move v0 + ul , v0 
[5640] c:0 is:( move 4 , 0 - 9 ; move ua , 8 )  decode:loop 0 , 3 , move 3 - ua , 9 * v0 
[5641] c:0 is:( move ua , 2 / 6 ; move 7 , 4 )  decode:loop 0 , 2 , move ua + v0 , 0 - 7 
[5642] c:0 is:( move 3 , 9 + 6 ; move ua , 4 )  decode:( move 3 , 0 - 4 ; move ua , 4 ) 
[5643] c:0 is:( move ua , 4 * 4 ; move 9 , 3 )  decode:( move 9 , 4 * 4 ; move 9 , 3 ) 
[5644] c:3 is:( move 9 , ul ; move 3 , 4 * 3 )  decode:( move 9 , ul ; move 3 , 4 * 3 ) 
[5645] c:0 is:( move 4 , ul / 3 ; move 7 , 4 )  decode:( move 4 , ul / 4 ; move 7 , 4 ) 
[5646] c:0 is:( move ua , 4 * 9 ; move 3 , 4 )  decode:( move ua , 9 / 2 ; move 3 , 4 ) 
[5647] c:3 is:( move 3 , ul - 9 ; move 4 , 4 )  decode:( move 3 , ul - 9 ; move 4 , 4 ) 
[5648] c:0 is:( move 5 , 5 / 4 ; move 4 , ul )  decode:( move 4 , 5 / 4 ; move 4 , ul ) 
[5649] c:0 is:( move 9 , 9 ; move ua + 2 , 2 )  decode:( move 9 , 9 ; move 9 , 2 ) 
[5650] c:0 is:( move ua , 3 * 6 ; move 3 , 8 )  decode:( move 3 , 4 ; move ua , 3 + 4 ) 
[5651] c:0 is:( move 4 , 4 ; move 8 , ul - 4 )  decode:( move 8 , 4 ; move 4 , 0 - 4 ) 
[5652] c:0 is:( move 4 , 9 ; move 4 , ua + 5 )  decode:( move 4 , 9 ; move 4 , 5 ) 
[5653] c:0 is:( move 4 , 9 ; move 0 - ua , 8 )  decode:( move 4 , 9 ; move 8 , 3 + 8 ) 
[5654] c:3 is:( move 4 , 6 ; move ua + 3 , 9 )  decode:( move 4 , 6 ; move ua + 3 , 9 ) 
[5655] c:3 is:( move 4 , ul - 9 ; move 3 , 4 )  decode:( move 4 , ul - 9 ; move 3 , 4 ) 
[5656] c:3 is:( move 3 , 9 ; move ua , 3 / 4 )  decode:( move 3 , 9 ; move ua , 3 / 4 ) 
[5657] c:0 is:( move ua , 9 + move 4 , 3 - 4 )  decode:( move ua , ua / move 4 , 7 - 4 ) 
[5658] c:0 is:( move ua , 4 * 8 ; move 4 , 4 )  decode:( move ua , 4 / ua ; move 4 , 4 ) 
[5659] c:0 is:( move 4 - 9 , 3 ; move ua , 5 )  decode:( move 5 , 0 ; move ua , 5 ) 
[5660] c:1 is:( move 9 , 6 ; move 4 - ua , 2 )  decode:( move 9 , 6 ; move 4 - ua , 2 ) 
[5661] c:2 is:( move ua , 9 ; move 4 , 4 * 3 )  decode:( move 4 , 9 ; move ua , 4 * 3 ) 
[5662] c:0 is:( move ua + 2 , 9 ; move 9 , 2 )  decode:( move 9 , 9 ; move 9 , 2 ) 
[5663] c:0 is:( move 4 , 4 / 5 ; move 5 , ul )  decode:( move 4 , 7 ; move 5 , ul ) 
[5664] c:0 is:( move ua , 3 * 4 ; move 4 , 9 )  decode:( move 3 , 7 ; move ua , 9 ) 
[5665] c:0 is:( move 5 , ul / 4 ; move 4 , 5 )  decode:( move 4 , ul / 4 ; move 4 , 5 ) 
[5666] c:3 is:( move 9 , ua / 4 ; move 4 , 2 )  decode:( move 9 , ua / 4 ; move 4 , 2 ) 
[5667] c:3 is:( move ua , 4 * 4 ; move 8 , 4 )  decode:( move ua , 4 * 4 ; move 8 , 4 ) 
[5668] c:2 is:( move 9 , 2 / ua ; move 4 , 4 )  decode:( move 9 , ul / ua ; move 4 , 4 ) 
[5669] c:0 is:( move 4 , 9 ; move ua - 4 , 4 )  decode:( move 4 , 9 ; move 4 - ua , 4 ) 
[5670] c:0 is:( move 4 , 3 ; move ua , 4 * 9 )  decode:( move 4 , 3 ; move ua , 3 * 5 ) 
[5671] c:0 is:( move 9 , 7 ; move ua + 2 , 4 )  decode:( move 9 , 7 ; move 9 , 4 ) 
[5672] c:0 is:( move 4 , 4 + 9 ; move ua , 5 )  decode:( move 4 , 3 / 4 ; move ua , 5 ) 
[5673] c:0 is:( move 9 , 3 ; move 4 - ua , 5 )  decode:( move 9 , 3 ; move 3 , 5 ) 
[5674] c:3 is:( move 9 , 4 * 3 ; move ua , 4 )  decode:( move 9 , 4 * 3 ; move ua , 4 ) 
[5675] c:0 is:( move 3 , 9 ; move ua , 4 / 3 )  decode:( move 0 - ua , 4 ; move 3 , 5 ) 
[5676] c:3 is:( move ua , 9 / 2 ; move 4 , 4 )  decode:( move ua , 9 / 2 ; move 4 , 4 ) 
[5677] c:0 is:( move 4 , 8 ; move 3 , ua / 4 )  decode:( move 3 , 8 ; move 4 , ua / 4 ) 
[5678] c:0 is:( move 3 , 9 ; move 0 - ua , 9 )  decode:( move 3 , 9 ; move ua , 4 * 3 ) 
[5679] c:3 is:( move 3 , 9 / 2 ; move 4 , ul )  decode:( move 3 , 9 / 2 ; move 4 , ul ) 
[5680] c:3 is:( move 2 , 9 / 4 ; move ua , 4 )  decode:( move 2 , 9 / 4 ; move ua , 4 ) 
[5681] c:0 is:( move 4 , 2 / 4 ; move ua , 9 )  decode:( move ua , 0 ; move 4 , 9 ) 
[5682] c:0 is:( move 4 , 9 ; move ua , 3 * 4 )  decode:( move 4 , 9 ; move ua , 4 * 3 ) 
[5683] c:0 is:( move 9 , 2 + 9 ; move ua , 2 )  decode:( move 9 , 9 + 2 ; move ua , 2 ) 
[5684] c:3 is:( move 4 , 4 * 3 ; move ua , 9 )  decode:( move 4 , 4 * 3 ; move ua , 9 ) 
[5685] c:3 is:( move 9 , 6 ; move ua + 3 , 4 )  decode:( move 9 , 6 ; move ua + 3 , 4 ) 
[5686] c:3 is:( move 9 , 3 / ua ; move 5 , 2 )  decode:( move 9 , 3 / ua ; move 5 , 2 ) 
[5687] c:0 is:( move ua + 3 , 9 ; move 8 , 2 )  decode:( move 9 , 9 ; move ua + ul , 2 ) 
[5688] c:0 is:( move ua , 9 / 2 ; move 7 , 2 )  decode:loop 0 , 2 , move ua , 0 - 3 
[5689] c:0 is:loop 0 , 3 , move ua + ul , 0 - 2  decode:loop 0 , 3 , move 4 + 3 , 0 - 2 
[5690] c:3 is:( move 8 , 9 ; move ua + 2 , 4 )  decode:( move 8 , 9 ; move ua + 2 , 4 ) 
[5691] c:0 is:( move 4 , 9 ; move ua , 4 * 4 )  decode:( move ua , 9 ; move 4 , 4 * 4 ) 
[5692] c:0 is:( move 4 , 4 * 9 ; move ua , 4 )  decode:( move 4 , 9 * 4 ; move ua , 4 ) 
[5693] c:3 is:( move 5 , 9 + 4 ; move 4 , ul )  decode:( move 5 , 9 + 4 ; move 4 , ul ) 
[5694] c:3 is:( move 6 , 9 ; move ua , 3 / 2 )  decode:( move 6 , 9 ; move ua , 3 / 2 ) 
[5695] c:0 is:loop 0 , 5 , move v0 , v0 + ul  decode:loop 0 , 3 , move 3 + v0 , 0 - 4 
[5696] c:3 is:( move 4 , 9 / 2 ; move 4 , ul )  decode:( move 4 , 9 / 2 ; move 4 , ul ) 
[5697] c:3 is:( move 5 , 9 ; move ua , 4 * 3 )  decode:( move 5 , 9 ; move ua , 4 * 3 ) 
[5698] c:3 is:( move ua , 2 / 6 ; move 8 , 4 )  decode:( move ua , 2 / 6 ; move 8 , 4 ) 
[5699] c:3 is:( move 9 , 4 * 4 ; move ua , 4 )  decode:( move 9 , 4 * 4 ; move ua , 4 ) 
[5700] c:0 is:( move ua , 9 ; move 4 , 0 - 9 )  decode:( move 4 , 9 ; move ua , 0 - 9 ) 
[5701] c:3 is:( move ua , 2 - 9 ; move 9 , 2 )  decode:( move ua , 2 - 9 ; move 9 , 2 ) 
[5702] c:0 is:( move 4 , 9 ; move 0 - ua , 9 )  decode:( move 4 , 9 ; move ua , 4 * 3 ) 
[5703] c:0 is:( move 2 - ua , 9 ; move 4 , 7 )  decode:( move 4 , 4 * 3 ; move 4 , 9 ) 
[5704] c:0 is:( move 9 , 9 ; move ua , 0 - 4 )  decode:( move ua , 9 ; move 9 , 0 - 4 ) 
[5705] c:0 is:loop 0 , 4 , move v0 , ul - v0  decode:loop 0 , 4 , move v0 , ul - 4 
[5706] c:0 is:loop 0 , ua , move 0 - 4 , 2 + ua  decode:loop 0 , 4 , move 5 , 0 - 4 
[5707] c:3 is:loop 0 , 2 , move ul - ua , 0 - 2  decode:loop 0 , 2 , move ul - ua , 0 - 2 
[5708] c:0 is:( move 4 , 4 / ua ; move 9 , 3 )  decode:( move 9 , 2 / 4 ; move 9 , 3 ) 
[5709] c:3 is:( move 9 , 4 / 3 ; move ua , 4 )  decode:( move 9 , 4 / 3 ; move ua , 4 ) 
[5710] c:0 is:( move 4 , 9 ; move ua , 4 / 3 )  decode:( move 0 - ua , 4 ; move 4 , 5 ) 
[5711] c:0 is:loop 0 , 5 , move v0 , ua - v0  decode:loop 0 , 4 , move ua - 4 , v0 + 4 
[5712] c:0 is:( move 6 , 6 ; move ua + 2 , 9 )  decode:( move ua , 6 ; move ua + 2 , 9 ) 
[5713] c:0 is:loop 0 , 5 , move v0 + ul , v0  decode:loop 0 , 4 , move 4 , 0 - 9 
[5714] c:0 is:loop 0 , ua , move 2 + ua , 0 - 4  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[5715] c:0 is:( move 3 , 4 / ua ; move 4 , 9 )  decode:loop 0 , 3 , move ua - 4 , 4 * 9 
[5716] c:0 is:( move ua , 9 * 4 ; move 3 , 5 )  decode:( move 3 , 2 * 9 ; move ua , 5 ) 
[5717] c:0 is:( move ua , 3 * 7 ; move 7 , 4 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 2 
[5718] c:3 is:( move 3 , 9 + 9 ; move ua , 2 )  decode:( move 3 , 9 + 9 ; move ua , 2 ) 
[5719] c:3 is:( move 9 , 4 / ua ; move 3 , 4 )  decode:( move 9 , 4 / ua ; move 3 , 4 ) 
[5720] c:0 is:( move 3 , 9 ; move ua , 3 / 5 )  decode:( move 3 , 9 ; move ua , 3 / 4 ) 
[5721] c:0 is:( move 4 , 4 ; move ua , 4 * 9 )  decode:( move 4 , 4 ; move ua , 3 + 4 ) 
[5722] c:0 is:( move ua , 9 / 4 ; move 2 , 5 )  decode:( move 2 , 0 - 2 ; move ua , 5 ) 
[5723] c:0 is:loop 0 , 4 , move v0 , v0 - ul  decode:loop 0 , 4 , move v0 , v0 - v0 
[5724] c:0 is:( move 0 - 9 , 9 ; move 3 , ul )  decode:( move 9 , 9 ; move 3 , 4 ) 
[5725] c:3 is:( move 5 , 9 / 2 ; move ua , 4 )  decode:( move 5 , 9 / 2 ; move ua , 4 ) 
[5726] c:0 is:( move 5 , ul - 9 ; move 3 , 4 )  decode:( move 5 , 9 / 2 ; move 3 , 4 ) 
[5727] c:0 is:( move ua , 8 + 3 ; move 4 , 8 )  decode:( move 5 , 9 + 3 ; move 4 , 8 ) 
[5728] c:3 is:( move ua , 9 / 2 ; move 5 , 4 )  decode:( move ua , 9 / 2 ; move 5 , 4 ) 
[5729] c:0 is:( move 4 , 6 ; move 4 + ua , 9 )  decode:( move 4 , 9 ; move ua + 3 , 9 ) 
[5730] c:3 is:( move ua , 9 * 4 ; move 4 , 4 )  decode:( move ua , 9 * 4 ; move 4 , 4 ) 
[5731] c:0 is:( move 3 , 2 / 6 ; move ua , 9 )  decode:( move ua , 6 / 4 ; move 9 , 9 ) 
[5732] c:0 is:( move 4 , 9 ; move ua , 5 / 2 )  decode:( move ua , 9 ; move 4 , 5 * 2 ) 
[5733] c:3 is:( move 4 , 9 ; move ua + 2 , 8 )  decode:( move 4 , 9 ; move ua + 2 , 8 ) 
[5734] c:3 is:( move 9 , 9 ; move ua + 2 , 3 )  decode:( move 9 , 9 ; move ua + 2 , 3 ) 
[5735] c:3 is:( move ua , 9 ; move 3 , 3 + 8 )  decode:( move ua , 9 ; move 3 , 3 + 8 ) 
[5736] c:0 is:( move ua , 8 ; move 4 , 3 + 8 )  decode:( move 4 , ua / 4 ; move ua , 8 ) 
[5737] c:0 is:( move 3 , 9 ; move 0 - 9 , ul )  decode:( move 3 , 9 ; move 9 , 2 ) 
[5738] c:3 is:( move 3 , 9 ; move 5 , ua / 3 )  decode:( move 3 , 9 ; move 5 , ua / 3 ) 
[5739] c:0 is:( move ua , 9 ; move 4 , 4 / 3 )  decode:( move 4 , ul ; move ua , 4 + 4 ) 
[5740] c:0 is:loop 0 , 2 , move ua - ul , 0 - 2  decode:loop 0 , 2 , move 5 , 0 - 2 
[5741] c:0 is:( move 9 , 6 ; move 4 + ua , 4 )  decode:( move 9 , 6 ; move ua + 4 , 4 ) 
[5742] c:0 is:( move ua , 2 / 8 ; move 5 , 5 )  decode:( move ua , ul / 4 ; move 5 , 5 ) 
[5743] c:0 is:( move ua , 9 / 4 ; move 4 , 4 )  decode:( move 4 , 0 - 4 ; move 4 , 4 ) 
[5744] c:3 is:( move 9 , ul / 6 ; move 3 , 2 )  decode:( move 9 , ul / 6 ; move 3 , 2 ) 
[5745] c:0 is:( move ua , 9 / 2 ; move 8 , 2 )  decode:loop 0 , 3 , move v0 + ua , 0 - 2 
[5746] c:0 is:loop 0 , 5 , move v0 , ul - v0  decode:loop 0 , 3 , move 3 , 0 - 2 / v0 
[5747] c:3 is:loop 0 , 3 , move ul - ua , 0 - 2  decode:loop 0 , 3 , move ul - ua , 0 - 2 
[5748] c:3 is:( move 4 , 9 ; move 4 , ua / 4 )  decode:( move 4 , 9 ; move 4 , ua / 4 ) 
[5749] c:0 is:loop 0 , 6 , move v0 , ua - v0  decode:loop 0 , 4 , move 3 + v0 , 9 - 3 
[5750] c:0 is:( move ua , 9 + 2 ; move 4 , 9 )  decode:( move ua , ul ; move 4 , 9 ) 
[5751] c:0 is:loop 0 , 2 , move ua + 2 , ua - 3  decode:loop 0 , 2 , move ua + 2 , 0 - 3 
[5752] c:0 is:loop 0 , 2 , move 3 , 0 - ua * ua  decode:loop 0 , 2 , move 3 , 4 + 8 
[5753] c:2 is:loop 0 , 4 , move ua + ul , 0 - 2  decode:loop 0 , 4 , move ua + ul , 0 - 2 
[5754] c:0 is:( move ua , 9 + 5 ; move 5 , 5 )  decode:( move ua , 9 / 5 ; move 5 , 5 ) 
[5755] c:3 is:( move 4 , ua / 4 ; move 8 , 5 )  decode:( move 4 , ua / 4 ; move 8 , 5 ) 
[5756] c:3 is:( move 4 , ua / 4 ; move 9 , 4 )  decode:( move 4 , ua / 4 ; move 9 , 4 ) 
[5757] c:0 is:( move ua , 9 ; move 5 , 4 / 3 )  decode:( move 5 , ul ; move ua , 4 / 3 ) 
[5758] c:0 is:( move 9 , 4 ; move 0 - 9 , ul )  decode:( move 9 , 4 ; move ua + 2 , ul ) 
[5759] c:3 is:( move 9 , ul / 4 ; move 3 , 4 )  decode:( move 9 , ul / 4 ; move 3 , 4 ) 
[5760] c:1 is:( move 9 , 9 ; move 3 + ua , 3 )  decode:( move 9 , 9 ; move ua + 3 , 3 ) 
[5761] c:0 is:( move ua , 3 / 7 ; move 7 , 4 )  decode:( move ua , 2 / 7 ; move 7 , 4 ) 
[5762] c:0 is:loop 0 , 6 , move v0 , v0 + ul  decode:( move ua , 9 + 4 ; move 9 , 8 ) 
[5763] c:0 is:( move 4 , 4 * 9 ; move 4 , ul )  decode:( move 4 , ul - 9 ; move 4 , ul ) 
[5764] c:3 is:( move 9 , 9 + 4 ; move ua , 2 )  decode:( move 9 , 9 + 4 ; move ua , 2 ) 
[5765] c:3 is:( move 3 , 9 / 4 ; move 4 , ul )  decode:( move 3 , 9 / 4 ; move 4 , ul ) 
[5766] c:0 is:( move 4 , ul ; move 4 , 4 * 9 )  decode:( move 4 , ul ; move 4 , 3 - 7 ) 
[5767] c:3 is:( move 9 , ul / 4 ; move 4 , 3 )  decode:( move 9 , ul / 4 ; move 4 , 3 ) 
[5768] c:0 is:( move ua , 9 ; move 4 , 9 + 2 )  decode:( move ua , 9 ; move 4 , 3 + 8 ) 
[5769] c:3 is:( move 4 , ul / 6 ; move 6 , 4 )  decode:( move 4 , ul / 6 ; move 6 , 4 ) 
[5770] c:3 is:loop 0 , 2 , move ua + ul , 0 - 4  decode:loop 0 , 2 , move ua + ul , 0 - 4 
[5771] c:0 is:( move 9 , 2 / 6 ; move ua , 4 )  decode:( move 9 , 2 / 4 ; move ua , 4 ) 
[5772] c:0 is:loop 0 , 5 , move v0 , v0 - ul  decode:loop 0 , 4 , move 3 , 2 * 5 
[5773] c:0 is:loop 0 , 4 , move v0 , ua / v0  decode:loop 0 , 4 , move v0 , 3 / v0 
[5774] c:0 is:( move 4 , 9 ; move ua , 7 + 4 )  decode:( move 4 , 9 ; move ua , 3 + 8 ) 
[5775] c:0 is:( move 2 , 9 + ul ; move 4 , 8 )  decode:( move 2 , 0 - 4 ; move 4 , 8 ) 
[5776] c:3 is:( move 9 , 9 ; move 3 - ua , 2 )  decode:( move 9 , 9 ; move 3 - ua , 2 ) 
[5777] c:0 is:( move 4 , 2 + 9 ; move ua , 9 )  decode:( move 3 , 0 - 2 ; move ua , 9 ) 
[5778] c:3 is:( move 9 , 3 ; move ua + 3 , 9 )  decode:( move 9 , 3 ; move ua + 3 , 9 ) 
[5779] c:3 is:loop 0 , 3 , move 0 - 2 , ua * ua  decode:loop 0 , 3 , move 0 - 2 , ua * ua 
[5780] c:3 is:( move 9 , ua / 4 ; move 4 , 4 )  decode:( move 9 , ua / 4 ; move 4 , 4 ) 
[5781] c:3 is:( move 9 , 9 ; move ua + 2 , 4 )  decode:( move 9 , 9 ; move ua + 2 , 4 ) 
[5782] c:0 is:loop 0 , 6 , move v0 + ul , v0  decode:loop 0 , 4 , move ua , 0 - v0 + 4 
[5783] c:3 is:( move 9 , 9 + 2 ; move ua , 4 )  decode:( move 9 , 9 + 2 ; move ua , 4 ) 
[5784] c:3 is:loop 0 , 4 , move v0 , v0 / ua  decode:loop 0 , 4 , move v0 , v0 / ua 
[5785] c:0 is:( move 9 , 3 - 9 ; move ua , 2 )  decode:( move 9 , 9 / ua ; move ua , 2 ) 
[5786] c:0 is:( move ua , 9 ; move 4 + 3 , 8 )  decode:( move ua , 9 ; move ua + ul , 8 ) 
[5787] c:0 is:( move 5 , 9 * 4 ; move 3 , ul )  decode:( move 5 , ul - 9 ; move 3 , ul ) 
[5788] c:0 is:( move 4 , 9 ; move 3 + ua , 8 )  decode:( move 4 , 9 ; move 9 , 9 + 4 ) 
[5789] c:0 is:( move 5 , 9 ; move ua , 4 / 3 )  decode:( move 0 - ua , 4 ; move 5 , 5 ) 
[5790] c:0 is:( move 4 , ul / 6 ; move 8 , 2 )  decode:( move 4 , ul / 4 ; move 8 , 2 ) 
[5791] c:0 is:( move 4 , 9 ; move 2 + ua , 9 )  decode:( move 4 , 9 ; move ua + 2 , 9 ) 
[5792] c:0 is:loop 0 , 3 , move ua - ul , 0 - 2  decode:loop 0 , 3 , move 5 , 0 - 2 
[5793] c:0 is:loop 0 , 5 , move v0 , ua / v0  decode:loop 0 , 3 , move 3 , 4 * 0 - v0 
[5794] c:0 is:( move 4 , 4 + 9 ; move 7 , ul )  decode:( move 4 , 9 + 4 ; move 7 , ul ) 
[5795] c:2 is:( move 0 - ua , 0 ; move ua , 2 )  decode:( move ul - ua , 0 ; move ua , 2 ) 
[5796] c:3 is:loop 0 , 3 , move ua + ul , 0 - 4  decode:loop 0 , 3 , move ua + ul , 0 - 4 
[5797] c:0 is:loop 0 , 5 , move v0 , v0 / ua  decode:loop 0 , 3 , move 3 , v0 - 9 
[5798] c:3 is:( move 9 , 9 ; move 4 - ua , 2 )  decode:( move 9 , 9 ; move 4 - ua , 2 ) 
[5799] c:0 is:loop 0 , 2 , move 0 - ua , ua / 3  decode:loop 0 , 2 , move 0 - ua , v0 - 3 
[5800] c:0 is:loop 0 , 2 , move ul - ua , 0 - 4  decode:loop 0 , 2 , move v0 - ua , 4 
[5801] c:0 is:loop 0 , 6 , move v0 , v0 - ul  decode:loop 0 , 4 , move 0 - 4 , 2 / v0 
[5802] c:0 is:loop 0 , 4 , move ul - ua , 0 - 2  decode:loop 0 , 4 , move 0 - 5 , 0 - 2 
[5803] c:3 is:( move ua , 9 * 9 ; move 3 , 2 )  decode:( move ua , 9 * 9 ; move 3 , 2 ) 
[5804] c:0 is:loop 0 , 6 , move v0 , ul - v0  decode:loop 0 , 4 , move v0 + 2 , 0 - 4 
[5805] c:0 is:( move 9 , 2 - 9 ; move ua , 4 )  decode:( move ua + 2 , 2 ; move ua , 4 ) 
[5806] c:3 is:loop 0 , 3 , move 0 - 3 , ua * ua  decode:loop 0 , 3 , move 0 - 3 , ua * ua 
[5807] c:0 is:loop 0 , 4 , move ua - ul , 0 - 2  decode:loop 0 , 4 , move 5 , 0 - 2 
[5808] c:0 is:( move 5 , 9 / ua ; move 4 , 4 )  decode:( move 5 , ua / 3 ; move 4 , 4 ) 
[5809] c:3 is:( move 9 , 6 ; move ua , 4 * 4 )  decode:( move 9 , 6 ; move ua , 4 * 4 ) 
[5810] c:0 is:( move 9 , 4 ; move ua - 9 , 2 )  decode:( move 9 , 4 ; move 3 , 5 ) 
[5811] c:0 is:loop 0 , 5 , move ul , v0 * v0  decode:loop 0 , 4 , move 2 - 4 , v0 + 9 
[5812] c:0 is:loop 0 , 6 , move ul - v0 , v0  decode:loop 0 , 3 , move 3 - ua , 0 - 4 
[5813] c:0 is:( move ua , 0 ; move 0 - ua , 2 )  decode:( move ua , 0 ; move ua , 2 - 3 ) 
[5814] c:0 is:( move 9 , 2 / 9 ; move ua , 2 )  decode:loop 0 , 2 , move ua + v0 , 0 - 2 
[5815] c:3 is:( move 9 , ul / 4 ; move 4 , 4 )  decode:( move 9 , ul / 4 ; move 4 , 4 ) 
[5816] c:0 is:loop 0 , 4 , move ua + ul , 0 - 3  decode:loop 0 , 4 , move ua + v0 , 0 - 3 
[5817] c:3 is:( move 4 , 4 + 9 ; move ua , 8 )  decode:( move 4 , 4 + 9 ; move ua , 8 ) 
[5818] c:0 is:loop 0 , 4 , move v0 , ul / v0  decode:( move 2 , 0 ; move 4 , 4 / 3 ) 
[5819] c:3 is:( move ua , 0 ; move ua , 0 - 2 )  decode:( move ua , 0 ; move ua , 0 - 2 ) 
[5820] c:0 is:( move 9 , ul / 6 ; move 4 , 2 )  decode:( move 9 , ul / 4 ; move 4 , 2 ) 
[5821] c:0 is:( move ua , 9 ; move 2 , 9 / 2 )  decode:( move 2 , 4 ; move ua , ua * ua ) 
[5822] c:0 is:( move 9 , ul / 6 ; move 2 , 4 )  decode:( move 2 , 4 ; move ua * 2 , 4 ) 
[5823] c:0 is:( move 9 , 9 ; move 3 + ua , 4 )  decode:( move 9 , 9 ; move ua + 3 , 4 ) 
[5824] c:3 is:loop 0 , 2 , move ua + 2 , ua / 3  decode:loop 0 , 2 , move ua + 2 , ua / 3 
[5825] c:3 is:( move 9 , ua / 2 ; move 4 , 8 )  decode:( move 9 , ua / 2 ; move 4 , 8 ) 
[5826] c:3 is:( move ua + 2 , 0 ; move ua , 2 )  decode:( move ua + 2 , 0 ; move ua , 2 ) 
[5827] c:0 is:loop 0 , 7 , move v0 , v0 - ul  decode:loop 0 , 4 , move 0 - ua , v0 + 4 
[5828] c:0 is:loop 0 , 6 , move ul , v0 * v0  decode:loop 0 , 2 , move 3 , v0 - 9 
[5829] c:0 is:loop 0 , 7 , move v0 , ul - v0  decode:loop 0 , 4 , move v0 - ua , ua * 4 
[5830] c:0 is:loop 0 , 2 , move 0 - ua , ua / 4  decode:( move ua , 0 ; move ua , ua / 4 ) 
[5831] c:0 is:loop 0 , 7 , move ul - v0 , v0  decode:( move ua , 9 / 4 ; move 9 , 8 ) 
[5832] c:0 is:( move 9 , 2 * 9 ; move ua , 4 )  decode:( move 9 , 0 * 9 ; move ua , 4 ) 
[5833] c:0 is:( move 3 , 9 ; move ua , 9 / 2 )  decode:( move ua , 4 ; move 3 , 9 * 9 ) 
[5834] c:0 is:loop 0 , 5 , move ul + ua , 0 - 3  decode:loop 0 , 4 , move ua , 0 - 3 
[5835] c:0 is:loop 0 , 5 , move v0 , ul / v0  decode:( move 4 , 0 ; move ul - ua , 4 ) 
[5836] c:0 is:loop 0 , 3 , move ul - ua , 0 - 4  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[5837] c:0 is:( move 9 , ul / 6 ; move 3 , 4 )  decode:( move 3 , ul ; move ua , 0 - 4 ) 
[5838] c:0 is:loop 0 , 2 , move ul - ua + 3 , 3  decode:loop 0 , 3 , move 3 + 3 , 3 
[5839] c:3 is:loop 0 , 3 , move 0 - ua , ua / 3  decode:loop 0 , 3 , move 0 - ua , ua / 3 
[5840] c:0 is:( move ua , 3 / 9 ; move 9 , 2 )  decode:loop 0 , 3 , move ua , 0 - 4 / 3 
[5841] c:3 is:( move 9 , ul / 4 ; move 5 , 4 )  decode:( move 9 , ul / 4 ; move 5 , 4 ) 
[5842] c:3 is:loop 0 , 3 , move ua - ul , 0 - 4  decode:loop 0 , 3 , move ua - ul , 0 - 4 
[5843] c:0 is:( move ua , 0 ; move ua + 2 , 2 )  decode:( move ua , 0 ; move 8 , 2 ) 
[5844] c:0 is:( move 3 - ua , 9 ; move 4 , 9 )  decode:( move 3 , 4 / 3 ; move 4 , 9 ) 
[5845] c:3 is:loop 0 , 3 , move 0 - 4 , ua * ua  decode:loop 0 , 3 , move 0 - 4 , ua * ua 
[5846] c:3 is:( move 0 - ua , 0 ; move 2 , ul )  decode:( move 0 - ua , 0 ; move 2 , ul ) 
[5847] c:3 is:loop 0 , 4 , move ua + ul , 0 - 4  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[5848] c:3 is:loop 0 , 4 , move 0 - 3 , ua * ua  decode:loop 0 , 4 , move 0 - 3 , ua * ua 
[5849] c:0 is:loop 0 , 6 , move v0 , ua / v0  decode:loop 0 , 4 , move 3 , 8 
[5850] c:3 is:( move ua , 0 ; move ua , 0 - 3 )  decode:( move ua , 0 ; move ua , 0 - 3 ) 
[5851] c:0 is:( move 4 , ul / 6 ; move 4 , 9 )  decode:( move 4 , ul / ua ; move 4 , 9 ) 
[5852] c:0 is:( move 4 , ul - 9 ; move 7 , 5 )  decode:( move ua , ul - 9 ; move 7 , 5 ) 
[5853] c:3 is:( move ua , 0 - 2 ; move ua , 2 )  decode:( move ua , 0 - 2 ; move ua , 2 ) 
[5854] c:0 is:( move 9 , 3 * 4 ; move ua , 9 )  decode:( move 9 , 4 * 3 ; move ua , 9 ) 
[5855] c:0 is:( move 9 , ua / 3 ; move 8 , 4 )  decode:( move 9 , 2 ; move ua + 2 , 4 ) 
[5856] c:3 is:loop 0 , 4 , move ul - ua , 0 - 4  decode:loop 0 , 4 , move ul - ua , 0 - 4 
[5857] c:3 is:loop 0 , 2 , move 4 + 3 , ua * ua  decode:loop 0 , 2 , move 4 + 3 , ua * ua 
[5858] c:0 is:( move ua - 2 , 0 ; move ua , 2 )  decode:( move 4 , 0 ; move ua , 2 ) 
[5859] c:0 is:loop 0 , 3 , move ul - ua , 0 - 5  decode:loop 0 , 4 , move 0 - 4 , 0 - 5 
[5860] c:0 is:( move 4 , 9 ; move ua , 7 + 7 )  decode:( move ua , ul ; move 4 , 7 + 4 ) 
[5861] c:0 is:loop 0 , 7 , move v0 , ua / v0  decode:loop 0 , 4 , move 3 + 2 , ua / v0 
[5862] c:0 is:( move ul , 0 ; move 0 - ua , 3 )  decode:( move 3 / 3 , 0 ; move 3 , 3 ) 
[5863] c:3 is:loop 0 , 3 , move ua + 2 , ua / 3  decode:loop 0 , 3 , move ua + 2 , ua / 3 
[5864] c:0 is:loop 0 , 2 , move 2 - ua , ua / 3  decode:( move 9 , 2 - 2 ; move 4 , 2 ) 
[5865] c:0 is:loop 0 , 2 , move ua + ul , 3 / 2  decode:( move ua , 6 ; move ua + 2 , 8 ) 
[5866] c:3 is:loop 0 , 2 , move ua + 2 , ua / 4  decode:loop 0 , 2 , move ua + 2 , ua / 4 
[5867] c:3 is:( move 0 - ua , 0 ; move 3 , ul )  decode:( move 0 - ua , 0 ; move 3 , ul ) 
[5868] c:3 is:( move ua , 2 ; move ua , 0 - 2 )  decode:( move ua , 2 ; move ua , 0 - 2 ) 
[5869] c:3 is:( move ua + 2 , 0 ; move ul , 2 )  decode:( move ua + 2 , 0 ; move ul , 2 ) 
[5870] c:0 is:( move 4 , ul ; move 7 , 4 * 9 )  decode:( move 4 , ul ; move ua , 3 / 4 ) 
[5871] c:0 is:( move 3 , 9 ; move ua , 9 * 4 )  decode:( move 9 , 9 ; move 3 , 9 + 9 ) 
[5872] c:3 is:( move 9 , ua / 5 ; move 5 , 5 )  decode:( move 9 , ua / 5 ; move 5 , 5 ) 
[5873] c:3 is:( move ua + ul , 0 ; move 2 , 2 )  decode:( move ua + ul , 0 ; move 2 , 2 ) 
[5874] c:0 is:( move ua , 9 / 5 ; move 5 , 5 )  decode:( move ua , 8 ; move 5 , 5 ) 
[5875] c:0 is:loop 0 , 4 , move 0 - 4 , ua * ua  decode:loop 0 , 4 , move 0 - 4 , 0 - ua 0 
[5876] c:3 is:( move ua , 0 ; move ua , 0 - 4 )  decode:( move ua , 0 ; move ua , 0 - 4 ) 
[5877] c:0 is:( move ua , 9 / 2 ; move 4 , 9 )  decode:( move 4 , 2 ; move ua , 0 - 9 ) 
[5878] c:3 is:( move 9 , ul / 6 ; move 4 , 4 )  decode:( move 9 , ul / 6 ; move 4 , 4 ) 
[5879] c:0 is:( move 4 , 9 ; move ua , 9 / 2 )  decode:( move ua , 4 ; move 4 , ua * ua ) 
[5880] c:3 is:loop 0 , 3 , move ua - ul , 0 - 5  decode:loop 0 , 3 , move ua - ul , 0 - 5 
[5881] c:0 is:( move 2 - ua , 0 ; move ua , 2 )  decode:( move 4 , 0 ; move ua , 2 ) 
[5882] c:3 is:( move ua , 0 ; move ua + 3 , 2 )  decode:( move ua , 0 ; move ua + 3 , 2 ) 
[5883] c:0 is:( move 9 , ua / 2 ; move 4 , 9 )  decode:( move 9 , 3 ; move 4 , 9 ) 
[5884] c:0 is:( move ua , 4 / 9 ; move 9 , 2 )  decode:( move ua , 9 + 4 ; move 9 , 2 ) 
[5885] c:0 is:( move ua , 0 ; move 0 - 3 , ul )  decode:( move ua , 0 ; move 3 , ua / 3 ) 
[5886] c:3 is:loop 0 , 3 , move ua - 2 , ua / 3  decode:loop 0 , 3 , move ua - 2 , ua / 3 
[5887] c:3 is:( move ua + 2 , 2 ; move ua , 2 )  decode:( move ua + 2 , 2 ; move ua , 2 ) 
[5888] c:0 is:loop 0 , 2 , move ua - 2 , ua / 4  decode:loop 0 , 2 , move ua - 2 , 3 / 2 
[5889] c:0 is:( move ua - 3 , 0 ; move ua , 2 )  decode:( move 3 , 0 ; move ua , 2 ) 
[5890] c:0 is:( move 0 - ua , 0 ; move ua , 5 )  decode:( move 6 , ua / 2 ; move ua , 5 ) 
[5891] c:3 is:( move ua , 0 - 2 ; move 2 , ul )  decode:( move ua , 0 - 2 ; move 2 , ul ) 
[5892] c:0 is:( move ua , 0 ; move 0 - ua , 5 )  decode:( move ua , 0 ; move ua , ua * ua ) 
[5893] c:3 is:( move ua , 0 - 3 ; move ua , 2 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[5894] c:0 is:( move 3 - ua , 0 ; move ua , 2 )  decode:( move 3 , 0 ; move ua ; ua , 2 ) 
[5895] c:3 is:( move 2 , 0 - 2 ; move ua , ul )  decode:( move 2 , 0 - 2 ; move ua , ul ) 
[5896] c:0 is:( move ul , 2 ; move ua , 0 - 2 )  decode:( move ul , 2 ; move ua , ul ) 
[5897] c:0 is:loop 0 , 2 , move ul - ua , 3 / 2  decode:( move 5 , 3 ; move ul - ua , 8 ) 
[5898] c:3 is:( move 0 - ua , 0 ; move 4 , ul )  decode:( move 0 - ua , 0 ; move 4 , ul ) 
[5899] c:0 is:( move ua , 3 ; move 0 - ua , 2 )  decode:( move ua , 3 ; move ua , 2 ) 
[5900] c:0 is:( move 0 - 4 , 0 ; move ua , ul )  decode:( move 4 , 0 - 2 ; move ua , ul ) 
[5901] c:3 is:loop 0 , 2 , move ua - ul , 3 / 2  decode:loop 0 , 2 , move ua - ul , 3 / 2 
[5902] c:0 is:loop 0 , 3 , move ua + ul , 3 / 2  decode:loop 0 , 4 , move 4 + v0 , 2 / 2 
[5903] c:0 is:loop 0 , 2 , move 2 - ua , ul / 3  decode:( move 4 , 7 ; move 4 , 4 + 3 ) 
[5904] c:0 is:loop 0 , 2 , move ua - ul , 2 / 3  decode:loop 0 , 3 , move ua - 2 , 2 / ua 
[5905] c:0 is:loop 0 , 5 , move 2 - ua , ul - 2  decode:loop 0 , 4 , move 5 , 2 * ua 
[5906] c:0 is:loop 0 , 2 , move ul - ua , 2 / 3  decode:loop 0 , 3 , move 0 - 4 , ua / ua 
[5907] c:0 is:( move ua - ul , 0 ; move 2 , 2 )  decode:( move 5 , 0 ; move 3 , 2 ) 
[5908] c:0 is:( move 2 , ul ; move ua , 0 - 2 )  decode:( move ua , 0 - 4 ; move 2 , 2 ) 
[5909] c:3 is:loop 0 , 4 , move ua - ul , 0 - 5  decode:loop 0 , 4 , move ua - ul , 0 - 5 
[5910] c:0 is:( move 0 - ua , 3 ; move ua , 2 )  decode:( move ul - ua , 3 ; move ua , 2 ) 
[5911] c:0 is:loop 0 , 5 , move ua - ul , 3 + 2  decode:loop 0 , 4 , move ul - ua , 0 - 5 
[5912] c:0 is:( move ua , 0 ; move ua + 2 , 4 )  decode:( move ua , 0 ; move 2 + ua , 4 ) 
[5913] c:3 is:( move 2 , 0 ; move ua + 3 , ul )  decode:( move 2 , 0 ; move ua + 3 , ul ) 
[5914] c:3 is:( move ul - ua , 0 ; move 2 , 2 )  decode:( move ul - ua , 0 ; move 2 , 2 ) 
[5915] c:3 is:( move 9 , 9 ; move ua , 4 * 4 )  decode:( move 9 , 9 ; move ua , 4 * 4 ) 
[5916] c:3 is:( move ua + ul , 0 ; move 3 , 2 )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[5917] c:3 is:loop 0 , 3 , move 4 + 3 , ua * ua  decode:loop 0 , 3 , move 4 + 3 , ua * ua 
[5918] c:0 is:( move ua , 3 ; move ua , 0 - 2 )  decode:( move ua , ul ; move ua , 2 ) 
[5919] c:3 is:( move 9 , 9 / ua ; move 3 , 4 )  decode:( move 9 , 9 / ua ; move 3 , 4 ) 
[5920] c:0 is:( move 2 , 0 ; move ul - ua , 2 )  decode:( move 2 , 0 ; move ua - ul , 2 ) 
[5921] c:0 is:( move ua , 0 ; move ua - 3 , 2 )  decode:( move ua , 0 ; move 3 - ua , 2 ) 
[5922] c:0 is:( move ua , 0 ; move 0 - 4 , ul )  decode:( move ua , 0 ; move ua - 2 , ul ) 
[5923] c:0 is:( move ua , 2 ; move ua , 0 - 3 )  decode:( move ua , 2 ; move ua , 3 ) 
[5924] c:0 is:( move 4 , 9 ; move ua , 4 * 9 )  decode:( move ua , 9 ; move 4 , 9 * 4 ) 
[5925] c:0 is:( move ua , 2 ; move 2 + ua , 2 )  decode:( move ua , 2 ; move  + ua , 2 ) 
[5926] c:3 is:( move ua + 2 , 0 ; move ua , 4 )  decode:( move ua + 2 , 0 ; move ua , 4 ) 
[5927] c:3 is:( move ua , 0 - 2 ; move ua , 3 )  decode:( move ua , 0 - 2 ; move ua , 3 ) 
[5928] c:3 is:loop 0 , 4 , move ul - ua , 0 - 5  decode:loop 0 , 4 , move ul - ua , 0 - 5 
[5929] c:0 is:loop 0 , 4 , move ul - ua + 2 , 4  decode:loop 0 , 4 , move 0 - ua , 4 
[5930] c:0 is:( move 2 - ua , 0 ; move 2 , ul )  decode:( move 4 , 0 ; move 2 , 4 ) 
[5931] c:3 is:( move 9 , 9 / ua ; move 5 , 2 )  decode:( move 9 , 9 / ua ; move 5 , 2 ) 
[5932] c:0 is:loop 0 , 7 , move ul - ua , 0 - 3  decode:loop 0 , 3 , move ul - 9 , 4 3 - 9 
[5933] c:3 is:( move ul , 0 ; move ua , 2 - 3 )  decode:( move ul , 0 ; move ua , 2 - 3 ) 
[5934] c:3 is:( move ua + ul , 2 ; move 2 , 2 )  decode:( move ua + ul , 2 ; move 2 , 2 ) 
[5935] c:0 is:loop 0 , 7 , move ua + ul , 0 - 4  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[5936] c:0 is:( move 4 - ua , 0 ; move ua , 2 )  decode:( move 2 , 0 - 3 ; move ua , 2 ) 
[5937] c:0 is:loop 0 , 3 , move ua - 3 , 3 / ua  decode:loop 0 , 3 , move ua - 3 , ua / ua 
[5938] c:0 is:( move 4 , 9 / 4 ; move ua , 9 )  decode:( move 4 , ua / 4 ; move ua , 9 ) 
[5939] c:3 is:( move ua + ul , 0 ; move 2 , 4 )  decode:( move ua + ul , 0 ; move 2 , 4 ) 
[5940] c:3 is:loop 0 , 2 , move 2 - ua , ul / 4  decode:loop 0 , 2 , move 2 - ua , ul / 4 
[5941] c:0 is:( move 3 , 0 ; move 3 + ua , ul )  decode:( move 3 , 0 ; move ua + 3 , ul ) 
[5942] c:0 is:( move ua , 0 ; move ua + 3 , 4 )  decode:( move ul - ua , 0 ; move 9 , 4 ) 
[5943] c:0 is:( move 2 , 0 - 3 ; move ua , ul )  decode:( move 2 , 0 - 4 ; move ua , ul ) 
[5944] c:3 is:( move 2 , 2 ; move ua + ul , 2 )  decode:( move 2 , 2 ; move ua + ul , 2 ) 
[5945] c:3 is:( move ua , 0 - 2 ; move ua , 4 )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[5946] c:0 is:( move ua , 4 / 9 ; move 4 , 9 )  decode:( move 4 , 2 / 4 ; move 9 , 9 ) 
[5947] c:0 is:loop 0 , 2 , move ul - ua , 4 * 3  decode:loop 0 , 3 , move 3 - ua , 4 * 3 
[5948] c:3 is:( move 3 , 0 ; move ul - ua , 2 )  decode:( move 3 , 0 ; move ul - ua , 2 ) 
[5949] c:3 is:( move 2 - ua , 2 ; move ua , 2 )  decode:( move 2 - ua , 2 ; move ua , 2 ) 
[5950] c:3 is:( move ua , 2 ; move ua , 0 - 4 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[5951] c:3 is:loop 0 , 3 , move ua + ul , 0 - 8  decode:loop 0 , 3 , move ua + ul , 0 - 8 
[5952] c:3 is:( move ua + 2 , 0 ; move ul , 4 )  decode:( move ua + 2 , 0 ; move ul , 4 ) 
[5953] c:3 is:( move ul - ua , 0 ; move 3 , 2 )  decode:( move ul - ua , 0 ; move 3 , 2 ) 
[5954] c:0 is:( move 0 - 3 , ul ; move ua , 2 )  decode:( move 3 , 4 ; move ua , 2 - 3 ) 
[5955] c:3 is:( move ua , 3 ; move ua , 0 - 3 )  decode:( move ua , 3 ; move ua , 0 - 3 ) 
[5956] c:0 is:( move 3 + ua , 2 ; move ua , 2 )  decode:( move ua + 3 , 2 ; move ua , 2 ) 
[5957] c:0 is:loop 0 , 6 , move 3 + 2 , ua * ua  decode:loop 0 , 4 , move ua , ua * ua 
[5958] c:0 is:( move 0 - 2 , ul ; move ua , 3 )  decode:( move 3 , 4 ; move ua , ul / 4 ) 
[5959] c:0 is:( move ua , 0 - 4 ; move ua , 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 2 
[5960] c:3 is:( move ua , 0 - 3 ; move 2 , ul )  decode:( move ua , 0 - 3 ; move 2 , ul ) 
[5961] c:3 is:( move ua - ul , 0 ; move 3 , 2 )  decode:( move ua - ul , 0 ; move 3 , 2 ) 
[5962] c:3 is:( move ua , 3 ; move 0 - 2 , ul )  decode:( move ua , 3 ; move 0 - 2 , ul ) 
[5963] c:0 is:loop 0 , 4 , move 4 + 3 , ua * ua  decode:0 loop 0 , 4 , move 4 + 3 , 4 * 3 
[5964] c:3 is:( move ua + ul , 0 ; move 4 , 2 )  decode:( move ua + ul , 0 ; move 4 , 2 ) 
[5965] c:3 is:( move 0 - ua , 2 ; move ua , 4 )  decode:( move 0 - ua , 2 ; move ua , 4 ) 
[5966] c:0 is:loop 0 , 2 , move ul - ua , 0 - 8  decode:( move 5 , 9 ; move 5 , 8 ) 
[5967] c:3 is:loop 0 , 2 , move ua - ul , 4 * 3  decode:loop 0 , 2 , move ua - ul , 4 * 3 
[5968] c:3 is:( move ua + 3 , 2 ; move ua , 2 )  decode:( move ua + 3 , 2 ; move ua , 2 ) 
[5969] c:0 is:loop 0 , 3 , move 2 - ua , ua / 4  decode:loop 0 , 3 , move 2 - ua , 3 / 2 
[5970] c:0 is:( move 2 , ul ; move 0 - ua , 3 )  decode:( move 3 , ul ; move ul - ua , 3 ) 
[5971] c:3 is:( move 3 , 0 - 2 ; move ua , ul )  decode:( move 3 , 0 - 2 ; move ua , ul ) 
[5972] c:0 is:( move 4 , ua / 9 ; move 9 , 4 )  decode:( move 4 , 7 ; move 9 , 4 ) 
[5973] c:0 is:loop 0 , 3 , move ul - ua , 3 / 2  decode:loop 0 , 4 , move 4 , 3 / 2 
[5974] c:0 is:( move 2 , 0 ; move ul - ua , 3 )  decode:( move 2 , 0 ; move ua , 3 + 4 ) 
[5975] c:0 is:( move 2 - ua , 0 ; move ua , 4 )  decode:( move 0 - 4 , 0 ; move ua , 4 ) 
[5976] c:0 is:loop 0 , 2 , move 3 - ua , ua / 4  decode:( move 3 , 0 ; move 3 - ua , 8 ) 
[5977] c:0 is:( move ua , 2 ; move 2 - ua , 2 )  decode:( move ua , 2 ; move 4 , ul ) 
[5978] c:3 is:loop 0 , 2 , move ua - 3 , ua / 4  decode:loop 0 , 2 , move ua - 3 , ua / 4 
[5979] c:1 is:loop 0 , 4 , move 3 - ua , 2 / ua  decode:loop 0 , 4 , move 3 - ua , 2 / ua 
[5980] c:0 is:( move 0 - ua , ul ; move 2 , 3 )  decode:( move 3 , ul ; move 2 , ul + 4 ) 
[5981] c:3 is:( move 0 - ua , 0 ; move 5 , ul )  decode:( move 0 - ua , 0 ; move 5 , ul ) 
[5982] c:0 is:( move 0 - 2 , 3 ; move ua , ul )  decode:( move 2 , 3 ; move ua , ua / 3 ) 
[5983] c:0 is:( move ua , 3 ; move 2 + ua , 2 )  decode:( move ua , 3 ; move ua + 2 , 2 ) 
[5984] c:2 is:( move ua , 0 ; move ua - 2 , 4 )  decode:( move ua , 0 ; move 2 - ua , 4 ) 
[5985] c:3 is:( move ua + 2 , 3 ; move ua , 2 )  decode:( move ua + 2 , 3 ; move ua , 2 ) 
[5986] c:0 is:( move 3 , ul ; move ua , 0 - 2 )  decode:( move 3 , 4 ; move ua , 0 - 2 ) 
[5987] c:0 is:loop 0 , 6 , move ua - 3 , ua - 2  decode:loop 0 , 4 , move ua - 3 , 0 - 4 
[5988] c:3 is:( move 9 , 9 ; move ua + 2 , 9 )  decode:( move 9 , 9 ; move ua + 2 , 9 ) 
[5989] c:0 is:( move ua , 0 - 3 ; move ul , 2 )  decode:( move ul , 3 ; move ua , 0 - 2 ) 
[5990] c:0 is:( move 4 , 0 ; move ua + ul , 2 )  decode:( move 4 , 0 ; move 8 , 2 ) 
[5991] c:3 is:( move 2 , 0 ; move ua + 4 , ul )  decode:( move 2 , 0 ; move ua + 4 , ul ) 
[5992] c:0 is:( move ua , 0 ; move ua - 4 , 2 )  decode:( move ua , 0 ; move 3 , 2 ) 
[5993] c:0 is:loop 0 , 7 , move 0 - 3 , ua - ul  decode:loop 0 , 4 , move 2 - ua , 4 * 5 
[5994] c:0 is:( move ua , 2 ; move 0 - ua , 4 )  decode:( move ua , 2 ; move ua , ul ) 
[5995] c:0 is:( move ua , 3 ; move ul , 0 - 2 )  decode:( move ua , 3 ; move ul , 2 ) 
[5996] c:0 is:( move ua , ul ; move 0 - 2 , 3 )  decode:( move ua , 4 ; move 2 , ul / 4 ) 
[5997] c:0 is:( move ua , 2 ; move ua + 3 , 2 )  decode:( move ua , 2 ; move 3 + ua , 2 ) 
[5998] c:0 is:loop 0 , 4 , move 2 + ua , ua / 4  decode:loop 0 , 4 , move 4 + 4 , ua / 4 
[5999] c:3 is:( move ua , 0 ; move ua + 2 , 5 )  decode:( move ua , 0 ; move ua + 2 , 5 ) 
[6000] c:3 is:( move ua , 0 - 2 ; move 3 , ul )  decode:( move ua , 0 - 2 ; move 3 , ul ) 
[6001] c:3 is:loop 0 , 3 , move ua - ul , 3 / 2  decode:loop 0 , 3 , move ua - ul , 3 / 2 
[6002] c:0 is:( move 3 , 2 ; move 0 - ua , ul )  decode:( move 3 , 2 ; move ua , ua / 3 ) 
[6003] c:0 is:loop 0 , 2 , move ua + ul , 4 * 4  decode:loop 0 , 2 , move ua + v0 , 4 * 4 
[6004] c:0 is:( move ua , ul ; move 2 , 0 - 3 )  decode:( move ua , ul ; move 2 , 2 ) 
[6005] c:0 is:( move 0 - 3 , 2 ; move ua , ul )  decode:( move 3 , 2 ; move ua , ul ) 
[6006] c:0 is:( move 2 , 0 ; move ua , 2 / ua )  decode:( move 3 , 0 ; move ua , 2 / ua ) 
[6007] c:3 is:( move ua , 3 ; move ua , 0 - 4 )  decode:( move ua , 3 ; move ua , 0 - 4 ) 
[6008] c:3 is:( move ua , 2 - 3 ; move ua , 2 )  decode:( move ua , 2 - 3 ; move ua , 2 ) 
[6009] c:0 is:( move ul , 4 ; move 0 - ua , 2 )  decode:( move ul , 4 ; move ua , 5 ) 
[6010] c:3 is:( move ua + ul , 3 ; move 2 , 2 )  decode:( move ua + ul , 3 ; move 2 , 2 ) 
[6011] c:0 is:( move ua - 2 , 3 ; move ua , 2 )  decode:( move 2 - ua , 3 ; move ua , 2 ) 
[6012] c:3 is:( move 4 , 0 - 2 ; move ua , ul )  decode:( move 4 , 0 - 2 ; move ua , ul ) 
[6013] c:3 is:( move ul - ua , 0 ; move 4 , 2 )  decode:( move ul - ua , 0 ; move 4 , 2 ) 
[6014] c:3 is:( move ua , 0 - 4 ; move ua , 3 )  decode:( move ua , 0 - 4 ; move ua , 3 ) 
[6015] c:0 is:( move 3 , 0 - 2 ; move ul , ul )  decode:( move ul , 0 - 4 ; move 3 , ul ) 
[6016] c:3 is:loop 0 , 4 , move 0 - 7 , ua * ua  decode:loop 0 , 4 , move 0 - 7 , ua * ua 
[6017] c:1 is:loop 0 , 2 , move ua + ul , 3 + 8  decode:loop 0 , 2 , move ua + ul , 3 + 8 
[6018] c:0 is:( move ua , 0 - 4 ; move 2 , ul )  decode:( move 2 , 0 ; move ua , ul ) 
[6019] c:3 is:( move ua , 3 ; move ua + 3 , 2 )  decode:( move ua , 3 ; move ua + 3 , 2 ) 
[6020] c:0 is:( move 2 - ua , 0 ; move ua , 5 )  decode:( move 4 , 0 ; move ua , ua * ua ) 
[6021] c:0 is:( move ua , 2 ; move ul , 0 - 4 )  decode:( move ul , ul ; move ua , 0 - 4 ) 
[6022] c:0 is:( move 0 - 4 , 2 ; move ua , ul )  decode:( move 4 , 6 ; move ua , 0 - 4 ) 
[6023] c:0 is:( move 5 - ua , 0 ; move ua , 2 )  decode:( move ua , 0 - 2 ; move ua , 2 ) 
[6024] c:3 is:( move ua + 2 , 2 ; move 3 , ul )  decode:( move ua + 2 , 2 ; move 3 , ul ) 
[6025] c:3 is:loop 0 , 3 , move ul - ua , 2 * 5  decode:loop 0 , 3 , move ul - ua , 2 * 5 
[6026] c:0 is:( move 0 - 3 , 3 ; move ua , ul )  decode:( move 3 , 0 ; move ua , ua / 3 ) 
[6027] c:3 is:( move 0 - ua , ul ; move 4 , 2 )  decode:( move 0 - ua , ul ; move 4 , 2 ) 
[6028] c:3 is:( move ua , 4 ; move ua + 2 , 2 )  decode:( move ua , 4 ; move ua + 2 , 2 ) 
[6029] c:0 is:( move ua , 0 - 2 ; move ua , 5 )  decode:( move ua , 2 / 2 ; move ua , 5 ) 
[6030] c:0 is:( move 2 - ua , 3 ; move ua , 2 )  decode:( move 4 , 0 ; move ua , 2 - 3 ) 
[6031] c:3 is:loop 0 , 3 , move ua - 3 , ua / 4  decode:loop 0 , 3 , move ua - 3 , ua / 4 
[6032] c:0 is:( move ua , 0 ; move 0 - ua , 7 )  decode:( move ua , 0 ; move ua , 7 4 / ) v0 
[6033] c:0 is:loop 0 , 2 , move ul - ua , 4 * 4  decode:loop 0 , 2 , move 0 - 4 , 4 * 4 
[6034] c:3 is:( move ua + 2 , 4 ; move ua , 2 )  decode:( move ua + 2 , 4 ; move ua , 2 ) 
[6035] c:3 is:( move ua , ul ; move 4 , 0 - 2 )  decode:( move ua , ul ; move 4 , 0 - 2 ) 
[6036] c:3 is:( move 0 - ua , 3 ; move 3 , ul )  decode:( move 0 - ua , 3 ; move 3 , ul ) 
[6037] c:3 is:( move ua + ul , 2 ; move 3 , 2 )  decode:( move ua + ul , 2 ; move 3 , 2 ) 
[6038] c:3 is:( move ua + 3 , 2 ; move 2 , ul )  decode:( move ua + 3 , 2 ; move 2 , ul ) 
[6039] c:0 is:( move 0 - ua , ul ; move 3 , 3 )  decode:( move 6 , ul ; move 3 , ul + 4 ) 
[6040] c:3 is:( move 2 , 0 ; move 4 , ua * ua )  decode:( move 2 , 0 ; move 4 , ua * ua ) 
[6041] c:0 is:( move 3 , 0 ; move ua + 4 , ul )  decode:( move 3 , 0 ; move 8 + 4 , ul ) 
[6042] c:3 is:( move ua , 0 - 2 ; move ul , 4 )  decode:( move ua , 0 - 2 ; move ul , 4 ) 
[6043] c:3 is:loop 0 , 2 , move 3 - ua , ul / 4  decode:loop 0 , 2 , move 3 - ua , ul / 4 
[6044] c:3 is:loop 0 , 2 , move ul - ua , 4 / 3  decode:loop 0 , 2 , move ul - ua , 4 / 3 
[6045] c:3 is:( move ua , 5 ; move ua , 0 - 2 )  decode:( move ua , 5 ; move ua , 0 - 2 ) 
[6046] c:0 is:( move 0 - ua , 0 ; move ua , 7 )  decode:( move ua , 0 ; move ua , 4 ) 
[6047] c:0 is:( move 9 , 9 ; move ua + 3 , 9 )  decode:loop 0 , 3 , move v0 * 3 , 9 
[6048] c:0 is:loop 0 , 3 , move ua - 2 , ua / 5  decode:loop 0 , 3 , move ua - 2 , 0 - 5 
[6049] c:3 is:( move 2 , 2 ; move ua - ul , 2 )  decode:( move 2 , 2 ; move ua - ul , 2 ) 
[6050] c:0 is:loop 0 , 2 , move ua - ul , 4 * 4  decode:loop 0 , 2 , move ua - 2 , 4 * 4 
[6051] c:3 is:( move 3 , 0 - 3 ; move ua , ul )  decode:( move 3 , 0 - 3 ; move ua , ul ) 
[6052] c:1 is:( move ua , 2 ; move ua + 2 , 4 )  decode:( move ua , 2 ; move ua + 2 , 4 ) 
[6053] c:3 is:( move ua + ul , 0 ; move 2 , 5 )  decode:( move ua + ul , 0 ; move 2 , 5 ) 
[6054] c:0 is:( move 2 , 0 ; move 4 - ua , ul )  decode:( move 2 , 0 ; move 3 , 4 ) 
[6055] c:0 is:( move ua - ul , 0 ; move 2 , 4 )  decode:( move 5 , 0 ; move 2 , 4 ) 
[6056] c:3 is:( move 0 - ua , 2 ; move 4 , ul )  decode:( move 0 - ua , 2 ; move 4 , ul ) 
[6057] c:0 is:( move ua , 2 ; move 0 - 4 , ul )  decode:( move ua , 2 ; move 4 , ua / 3 ) 
[6058] c:0 is:( move ua - 2 , 0 ; move ua , 5 )  decode:( move 4 , 0 ; move ua , 5 ) 
[6059] c:0 is:loop 0 , 4 , move ul - ua , 3 / 2  decode:loop 0 , 4 , move 4 + v0 , 2 / 2 
[6060] c:3 is:( move ul , 0 - 4 ; move ua , 2 )  decode:( move ul , 0 - 4 ; move ua , 2 ) 
[6061] c:3 is:( move ua - ul , 0 ; move 4 , 2 )  decode:( move ua - ul , 0 ; move 4 , 2 ) 
[6062] c:3 is:( move 2 - ua , 0 ; move 4 , ul )  decode:( move 2 - ua , 0 ; move 4 , ul ) 
[6063] c:0 is:( move 4 , 0 ; move ua - ul , 2 )  decode:( move 4 , 0 ; move ul - ua , 2 ) 
[6064] c:3 is:( move 3 , 2 ; move ua + ul , 2 )  decode:( move 3 , 2 ; move ua + ul , 2 ) 
[6065] c:0 is:( move 3 - ua , 0 ; move ua , 4 )  decode:( move 3 , ua / 3 ; move ua , ul ) 
[6066] c:3 is:( move 2 , 0 ; move ua + ul , 5 )  decode:( move 2 , 0 ; move ua + ul , 5 ) 
[6067] c:0 is:( move 0 - ua , 2 ; move ua , 5 )  decode:( move ua , 5 ; move ua , ua * ua ) 
[6068] c:0 is:( move 2 , 4 ; move 0 - ua , ul )  decode:( move 2 , 4 ; move ua , 4 ) 
[6069] c:0 is:( move ua + 2 , 2 ; move ua , 4 )  decode:( move 8 , 2 ; move ua , 4 ) 
[6070] c:3 is:( move ua + 2 , 3 ; move ua , 3 )  decode:( move ua + 2 , 3 ; move ua , 3 ) 
[6071] c:0 is:( move 4 , 0 ; move ul - ua , 2 )  decode:( move 4 , 0 ; move 5 , 2 - 3 ) 
[6072] c:3 is:( move ua + 2 , ul ; move 3 , 2 )  decode:( move ua + 2 , ul ; move 3 , 2 ) 
[6073] c:0 is:loop 0 , 2 , move ua - 3 , ua / 5  decode:loop 0 , 2 , move 3 - ua , 0 - 4 
[6074] c:3 is:( move 3 , 0 ; move 3 , ua * ua )  decode:( move 3 , 0 ; move 3 , ua * ua ) 
[6075] c:0 is:( move ua + 3 , 2 ; move ul , 2 )  decode:( move ul , ul ; move ua + 3 , 2 ) 
[6076] c:3 is:( move ua , 3 ; move ua - 2 , 2 )  decode:( move ua , 3 ; move ua - 2 , 2 ) 
[6077] c:0 is:loop 0 , 4 , move 3 , ua / ua - 3  decode:loop 0 , 4 , move 3 , ua / ua - v0 
[6078] c:3 is:( move 0 - 4 , ul ; move ua , 2 )  decode:( move 0 - 4 , ul ; move ua , 2 ) 
[6079] c:3 is:( move ua + ul , 0 ; move 5 , 2 )  decode:( move ua + ul , 0 ; move 5 , 2 ) 
[6080] c:3 is:( move ua , 0 - 3 ; move ua , 4 )  decode:( move ua , 0 - 3 ; move ua , 4 ) 
[6081] c:3 is:loop 0 , 2 , move ua - ul , 4 / 3  decode:loop 0 , 2 , move ua - ul , 4 / 3 
[6082] c:0 is:loop 0 , 4 , move ua - ul , 3 / 2  decode:loop 0 , 4 , move 4 + v0 , 3 / 2 
[6083] c:3 is:( move 0 - ua , 2 ; move 4 , ul )  decode:( move 0 - ua , 2 ; move 4 , ul ) 
[6084] c:0 is:( move ua , 0 ; move ua + 3 , 5 )  decode:( move ua , 0 ; move 3 + ua , 5 ) 
[6085] c:3 is:( move ua , 0 - 3 ; move 3 , ul )  decode:( move ua , 0 - 3 ; move 3 , ul ) 
[6086] c:0 is:( move 4 , 0 ; move 2 - ua , ul )  decode:( move 4 , 0 ; move 4 , ua / 3 ) 
[6087] c:3 is:( move ul - ua , 0 ; move 2 , 4 )  decode:( move ul - ua , 0 ; move 2 , 4 ) 
[6088] c:3 is:( move 2 , 0 ; move ul - ua , 4 )  decode:( move 2 , 0 ; move ul - ua , 4 ) 
[6089] c:0 is:loop 0 , 3 , move 3 - ua , ua / 4  decode:loop 0 , 3 , move ua - 3 , ua / 4 
[6090] c:0 is:( move ua , 4 ; move 0 - 2 , ul )  decode:( move ua , 4 ; move 2 , ul ) 
[6091] c:0 is:loop 0 , 4 , move ua / 2 , 2 / ua  decode:loop 0 , 4 , move ua - 4 , ua / ua 
[6092] c:3 is:( move 2 , 0 - 4 ; move ua , ul )  decode:( move 2 , 0 - 4 ; move ua , ul ) 
[6093] c:0 is:loop 0 , 3 , move ul + ua , 0 - 9  decode:loop 0 , 3 , move ua + ul , 0 - 9 
[6094] c:0 is:( move ul , 2 ; move 0 - ua , 4 )  decode:( move ul , 2 ; move ua , ul ) 
[6095] c:0 is:loop 0 , 2 , move ul - ua , 3 / 4  decode:( move 5 , 4 ; move 5 , 7 ) 
[6096] c:0 is:( move 0 - ua , ul ; move 2 , 4 )  decode:( move ua , 0 - 2 ; move 2 , 4 ) 
[6097] c:0 is:( move 2 , 2 ; move ul - ua , 2 )  decode:( move 2 , 2 ; move ua - ul , 2 ) 
[6098] c:0 is:loop 0 , 3 , move 3 - ua , 4 / ua  decode:loop 0 , 3 , move 3 - ua , 2 / 3 
[6099] c:0 is:( move ul , 2 ; move ua + 3 , 2 )  decode:( move ul , ul ; move ua + 3 , 2 ) 
[6100] c:3 is:( move ua , 4 ; move ua , 0 - 3 )  decode:( move ua , 4 ; move ua , 0 - 3 ) 
[6101] c:0 is:( move ua , 2 ; move 0 - ua , 5 )  decode:( move 7 , 2 ; move ua , 5 ) 
[6102] c:0 is:( move 0 - ua , 2 ; move ua , 6 )  decode:( move ua , 5 ; move ua , 4 * 4 ) 
[6103] c:0 is:loop 0 , 4 , move ua + ul , 4 * 4  decode:loop 0 , 4 , move ua + v0 , 4 * 4 
[6104] c:3 is:( move ua , 0 ; move ua + 5 , 4 )  decode:( move ua , 0 ; move ua + 5 , 4 ) 
[6105] c:3 is:( move 3 , 0 ; move 4 , ua * ua )  decode:( move 3 , 0 ; move 4 , ua * ua ) 
[6106] c:0 is:loop 0 , 4 , move ua + ul , 3 * 5  decode:loop 0 , 4 , move ua + ul , 0 - 5 2 2 / 
[6107] c:0 is:loop 0 , 5 , move 4 + ul , ua - 4  decode:loop 0 , 4 , move ua - ul , 0 - 4 
[6108] c:0 is:( move 0 - ua , 3 + move ua , 4 )  decode:( move 4 , 3 + move ua , 2 + 4 ) 
[6109] c:0 is:( move ul , 3 ; move 0 - ua , 4 )  decode:( move ul , 3 ; move ua , 4 / 4 ) 
[6110] c:0 is:loop 0 , 3 , move ua - ul , 5 / 2  decode:loop 0 , 3 , move ua - 2 , 0 - 9 
[6111] c:3 is:( move ua + 2 , 2 ; move 4 , ul )  decode:( move ua + 2 , 2 ; move 4 , ul ) 
[6112] c:0 is:( move 3 , 0 - 4 ; move ua , ul )  decode:( move 3 , 9 / 4 ; move ua , ul ) 
[6113] c:0 is:( move ua , 3 ; move 0 - ua , 5 )  decode:( move ua , 3 ; move ua , ua * ua ) 
[6114] c:0 is:( move 2 , ul ; move ua , 2 - 3 )  decode:( move 2 , ul ; move ua , ul ) 
[6115] c:3 is:( move ua + ul , 0 ; move 4 , 4 )  decode:( move ua + ul , 0 ; move 4 , 4 ) 
[6116] c:3 is:loop 0 , 3 , move ua - ul , 0 - 9  decode:loop 0 , 3 , move ua - ul , 0 - 9 
[6117] c:0 is:( move 3 , 4 ; move 0 - ua , ul )  decode:( move 3 , 4 ; move ua , 4 ) 
[6118] c:0 is:( move 0 - ua , 3 ; move ua , 5 )  decode:( move ua , 0 ; move ua , ua * ua ) 
[6119] c:3 is:( move 2 , 3 ; move ua - ul , 2 )  decode:( move 2 , 3 ; move ua - ul , 2 ) 
[6120] c:3 is:( move ua + 2 , 3 ; move ua , 4 )  decode:( move ua + 2 , 3 ; move ua , 4 ) 
[6121] c:0 is:( move 3 , 4 ; move 0 - ua , ul )  decode:( move 3 , 4 ; move ua , 4 ) 
[6122] c:0 is:( move ua + 4 , ul ; move 2 , 2 )  decode:( move ua + 3 , ul ; move 2 , 2 ) 
[6123] c:3 is:( move ua , 0 - 3 ; move ua , 5 )  decode:( move ua , 0 - 3 ; move ua , 5 ) 
[6124] c:0 is:( move 0 - ua , 6 ; move ua , 2 )  decode:( move ua , 9 ; move ua , 2 ) 
[6125] c:0 is:( move ua , 4 ; move 0 - 3 , ul )  decode:( move ua , 4 ; move 3 , 4 ) 
[6126] c:0 is:( move ua , 6 ; move 0 - ua , 2 )  decode:( move ua , 8 ; move ua , 2 - 3 ) 
[6127] c:3 is:( move ua + 2 , 5 ; move ua , 2 )  decode:( move ua + 2 , 5 ; move ua , 2 ) 
[6128] c:0 is:( move ua - 3 , 0 ; move ua , 5 )  decode:( move 3 - ua , 0 ; move ua , 5 ) 
[6129] c:0 is:( move 3 - ua , 0 ; move ua , 5 )  decode:( move 3 , 0 ; move ua , ua * ua ) 
[6130] c:0 is:( move 0 - 4 , 3 ; move ua , ul )  decode:( move 4 , 0 ; move ua , ua / 3 ) 
[6131] c:0 is:loop 0 , 4 , move ul - ua , 0 - 8  decode:loop 0 , 4 , move 2 - ua , 0 - 8 
[6132] c:3 is:( move 2 , 4 ; move ua + ul , 2 )  decode:( move 2 , 4 ; move ua + ul , 2 ) 
[6133] c:0 is:( move 5 , ul ; move ua , 0 - 2 )  decode:( move ua , ua / 3 ; move 5 , 2 ) 
[6134] c:0 is:( move 5 , ul ; move 0 - ua , 2 )  decode:( move 5 , ul ; move ua , 5 ) 
[6135] c:1 is:( move 4 , 0 ; move 3 - ua , ul )  decode:( move 4 , 0 ; move 3 - ua , ul ) 
[6136] c:3 is:( move ua , 0 - 4 ; move ua , 4 )  decode:( move ua , 0 - 4 ; move ua , 4 ) 
[6137] c:3 is:loop 0 , 3 , move ua - ul , 4 / 3  decode:loop 0 , 3 , move ua - ul , 4 / 3 
[6138] c:3 is:( move ul , ul ; move 4 , 0 - 2 )  decode:( move ul , ul ; move 4 , 0 - 2 ) 
[6139] c:0 is:( move ul - ua , 2 ; move 3 , 2 )  decode:( move 2 , ul ; move ua - ul , 2 ) 
[6140] c:3 is:( move 6 , 0 ; move ua + ul , 2 )  decode:( move 6 , 0 ; move ua + ul , 2 ) 
[6141] c:3 is:( move 0 - 4 , ul ; move ua , 3 )  decode:( move 0 - 4 , ul ; move ua , 3 ) 
[6142] c:3 is:( move ul - ua , 0 ; move 2 , 5 )  decode:( move ul - ua , 0 ; move 2 , 5 ) 
[6143] c:3 is:( move 2 , 2 ; move ua , 2 / ua )  decode:( move 2 , 2 ; move ua , 2 / ua ) 
[6144] c:0 is:loop 0 , 3 , move ul - ua , 0 - 9  decode:loop 0 , 3 , move v0 - ua , 0 - 9 
[6145] c:0 is:( move ua , ul ; move 5 , 0 - 2 )  decode:( move 6 , ul ; move ua , 0 - 2 ) 
[6146] c:3 is:( move 3 , 0 ; move ul - ua , 4 )  decode:( move 3 , 0 ; move ul - ua , 4 ) 
[6147] c:3 is:( move ua , 4 ; move ua + 3 , 2 )  decode:( move ua , 4 ; move ua + 3 , 2 ) 
[6148] c:0 is:( move ua - 2 , 2 ; move ua , 4 )  decode:( move 2 - ua , 2 ; move ua , 4 ) 
[6149] c:3 is:( move 4 , 0 - 3 ; move ua , ul )  decode:( move 4 , 0 - 3 ; move ua , ul ) 
[6150] c:3 is:( move ua , 4 ; move ua , 0 - 4 )  decode:( move ua , 4 ; move ua , 0 - 4 ) 
[6151] c:3 is:loop 0 , 3 , move ul - ua , 4 / 3  decode:loop 0 , 3 , move ul - ua , 4 / 3 
[6152] c:0 is:( move ua , 0 ; move ua , 5 * 2 )  decode:( move ua , 0 ; move ua , 2 * 5 ) 
[6153] c:0 is:( move 2 - ua , 0 ; move 5 , ul )  decode:( move 4 , 0 ; move 5 , 0 - 4 ) 
[6154] c:3 is:( move ua , 4 ; move 2 - ua , 2 )  decode:( move ua , 4 ; move 2 - ua , 2 ) 
[6155] c:3 is:( move ua + ul , 4 ; move 2 , 2 )  decode:( move ua + ul , 4 ; move 2 , 2 ) 
[6156] c:0 is:( move 4 + 3 , 0 ; move ul , ul )  decode:( move ua , 0 ; move ul , ul ) 
[6157] c:3 is:( move ua , 2 ; move 2 - ua , 4 )  decode:( move ua , 2 ; move 2 - ua , 4 ) 
[6158] c:0 is:( move 0 - ua , 0 ; move ua , 8 )  decode:( move ua , 0 ; move ua , 8 ) 
[6159] c:3 is:( move ua + 3 , 2 ; move ua , 4 )  decode:( move ua + 3 , 2 ; move ua , 4 ) 
[6160] c:0 is:( move 3 , 3 ; move ua + ul , 2 )  decode:( move 3 , 3 ; move 8 , 2 ) 
[6161] c:0 is:( move 4 , 0 - 2 ; move ul , ul )  decode:( move ul , 0 - 2 ; move 4 , ul ) 
[6162] c:0 is:( move 3 , 0 ; move 4 - ua , ul )  decode:( move 3 , 0 ; move 3 , 0 - 4 ) 
[6163] c:0 is:( move ua , 0 ; move 3 , ua / 3 )  decode:( move 3 , ul ; move ua , 0 - 2 ) 
[6164] c:0 is:( move ua + 2 , ul ; move 2 , 4 )  decode:( move 8 , ul ; move 2 , 4 ) 
[6165] c:0 is:( move ul , 0 ; move ua , 3 / 2 )  decode:( move ul , 0 ; move ua , ua / 4 ) 
[6166] c:0 is:( move ua , 2 ; move ua - 4 , 2 )  decode:( move ua , 2 ; move 4 - ua , 2 ) 
[6167] c:0 is:loop 0 , 4 , move ua - ul , 0 - 8  decode:loop 0 , 4 , move 5 , 0 - 4 / 4 
[6168] c:3 is:( move ua , 2 ; move ua + 3 , 4 )  decode:( move ua , 2 ; move ua + 3 , 4 ) 
[6169] c:3 is:( move ul - ua , 0 ; move 3 , 4 )  decode:( move ul - ua , 0 ; move 3 , 4 ) 
[6170] c:0 is:loop 0 , 4 , move ua - 2 , ua / 5  decode:loop 0 , 4 , move ua - 2 , 0 - 5 
[6171] c:0 is:loop 0 , 4 , move 2 - ua , ua / 5  decode:loop 0 , 4 , move 2 - ua , 0 - 5 
[6172] c:3 is:loop 0 , 3 , move ul - ua , 5 * 3  decode:loop 0 , 3 , move ul - ua , 5 * 3 
[6173] c:0 is:( move ua , 6 ; move ua , 0 - 2 )  decode:( move ua , 4 ; move ua , 2 ) 
[6174] c:3 is:( move ua , 4 ; move 2 - ua , 2 )  decode:( move ua , 4 ; move 2 - ua , 2 ) 
[6175] c:3 is:( move ua + 3 , 4 ; move ua , 2 )  decode:( move ua + 3 , 4 ; move ua , 2 ) 
[6176] c:0 is:( move 3 - ua , 0 ; move 4 , ul )  decode:( move 3 , 0 ; move 4 , ua / 3 ) 
[6177] c:0 is:( move ua , ul ; move 0 - 4 , 3 )  decode:( move ua , ul ; move 4 , ul / 4 ) 
[6178] c:3 is:( move ul - ua , 0 ; move 5 , 2 )  decode:( move ul - ua , 0 ; move 5 , 2 ) 
[6179] c:0 is:( move ua , ul ; move 2 , 2 - 3 )  decode:( move 2 , ul ; move ua , 2 - 3 ) 
[6180] c:3 is:( move 2 , 0 ; move ua , ua / 4 )  decode:( move 2 , 0 ; move ua , ua / 4 ) 
[6181] c:0 is:( move 2 - ua , 2 ; move ua , 4 )  decode:( move 4 , 2 ; move ua , ul ) 
[6182] c:0 is:( move 0 - 5 , ul ; move ua , 2 )  decode:( move 5 , 0 - 2 ; move ua , 2 ) 
[6183] c:0 is:loop 0 , 3 , move ul - ua , 4 * 4  decode:loop 0 , 3 , move v0 - ua , 4 * 4 
[6184] c:3 is:( move ua , 2 ; move ua + 3 , 4 )  decode:( move ua , 2 ; move ua + 3 , 4 ) 
[6185] c:3 is:( move ua , 0 - 3 ; move 4 , ul )  decode:( move ua , 0 - 3 ; move 4 , ul ) 
[6186] c:3 is:( move ua , 2 - 3 ; move 2 , ul )  decode:( move ua , 2 - 3 ; move 2 , ul ) 
[6187] c:3 is:( move ua , 3 ; move ua , 2 - 3 )  decode:( move ua , 3 ; move ua , 2 - 3 ) 
[6188] c:0 is:( move ua , 0 - 4 ; move 3 , ul )  decode:( move 3 , ul / 4 ; move 3 , ul ) 
[6189] c:0 is:( move ua + 2 , 4 ; move 2 , ul )  decode:( move ua + ul , 4 ; move 2 , ul ) 
[6190] c:0 is:( move 4 - ua , 2 ; move ua , 2 )  decode:( move 3 , 0 - 2 ; move ua , 2 ) 
[6191] c:3 is:loop 0 , 4 , move 4 - ua , 3 / ua  decode:loop 0 , 4 , move 4 - ua , 3 / ua 
[6192] c:3 is:( move 2 , ul ; move ua + 2 , 4 )  decode:( move 2 , ul ; move ua + 2 , 4 ) 
[6193] c:0 is:( move ua , 2 ; move 2 , 2 / ua )  decode:( move ua , 2 ; move 3 / 2 , ul ) 
[6194] c:0 is:( move ua , 5 ; move ua + 2 , 2 )  decode:( move ua , 5 ; move 2 + ua , 2 ) 
[6195] c:3 is:( move 3 , 0 ; move ua + ul , 5 )  decode:( move 3 , 0 ; move ua + ul , 5 ) 
[6196] c:3 is:( move 0 - ua , ul ; move 5 , 2 )  decode:( move 0 - ua , ul ; move 5 , 2 ) 
[6197] c:0 is:( move 4 - ua , 0 ; move ua , 4 )  decode:( move 2 , 0 ; move ua , ul ) 
[6198] c:3 is:( move ua + 3 , ul ; move 3 , 2 )  decode:( move ua + 3 , ul ; move 3 , 2 ) 
[6199] c:3 is:loop 0 , 2 , move ua - ul , 4 * 5  decode:loop 0 , 2 , move ua - ul , 4 * 5 
[6200] c:0 is:loop 0 , 3 , move ua , 3 * 4 / ua  decode:loop 0 , 3 , move ua - v0 , 9 * 3 
[6201] c:0 is:( move ul , 2 ; move ua , 2 - 3 )  decode:( move ua , 4 ; move ul , 2 / 4 ) 
[6202] c:0 is:( move 0 - ua , 3 ; move 4 , ul )  decode:( move ua , 6 ; move 4 , 0 - 4 ) 
[6203] c:3 is:( move ua , 2 - 3 ; move ua , 3 )  decode:( move ua , 2 - 3 ; move ua , 3 ) 
[6204] c:0 is:( move 3 / 2 , 0 ; move ua , ul )  decode:( move ul , 0 ; move ua , ul ) 
[6205] c:3 is:( move 2 , 2 - 3 ; move ua , ul )  decode:( move 2 , 2 - 3 ; move ua , ul ) 
[6206] c:0 is:( move ua - 2 , 2 ; move ua , 4 )  decode:( move 2 - ua , 2 ; move ua , 4 ) 
[6207] c:0 is:( move ua , 0 ; move 0 - 7 , ul )  decode:( move ua , 0 ; move 7 , ua / 3 ) 
[6208] c:0 is:( move ul , 4 ; move 0 - ua , 3 )  decode:move 4 * 2 , 2 / 3 
[6209] c:0 is:( move 2 , 3 + move ua + 2 , ul )  decode:( move 4 , 4 ; move 4 , 3 + 4 ) 
[6210] c:0 is:( move ul , 2 - 3 ; move ua , 2 )  decode:( move ua , ul ; move ul , 0 - 2 ) 
[6211] c:0 is:( move ua , 0 ; move 2 - ua , 6 )  decode:( move ua , 0 ; move 5 , 4 * 4 ) 
[6212] c:0 is:( move 5 , 2 ; move 0 - ua , ul )  decode:( move 5 , 2 ; move ua , ua / 3 ) 
[6213] c:0 is:( move ul , 0 ; move ua , 2 / 3 )  decode:( move ul , 0 ; move ua , 7 ) 
[6214] c:0 is:( move 5 , 0 ; move 2 - ua , ul )  decode:( move ua - 2 , 0 ; move 5 , ul ) 
[6215] c:3 is:( move ua - ul , 2 ; move 3 , 2 )  decode:( move ua - ul , 2 ; move 3 , 2 ) 
[6216] c:3 is:( move 2 , 3 ; move ua + 3 , ul )  decode:( move 2 , 3 ; move ua + 3 , ul ) 
[6217] c:0 is:( move ua , 0 ; move ua , 0 - 8 )  decode:( move ua , 0 ; move ua , 3 / 2 ) 
[6218] c:3 is:( move 3 , ul ; move ua , 0 - 4 )  decode:( move 3 , ul ; move ua , 0 - 4 ) 
[6219] c:0 is:( move 0 - 2 , ul ; move 4 , ul )  decode:( move 2 , 0 - 2 ; move 4 , 4 ) 
[6220] c:0 is:( move ua + 3 , 2 ; move 3 , ul )  decode:( move 3 - ua , 2 ; move 3 , ul ) 
[6221] c:0 is:( move 0 - 4 , ul ; move 2 , ul )  decode:( move 0 - 4 , ul ; move 3 , ul ) 
[6222] c:3 is:( move 4 , 2 ; move ua + ul , 2 )  decode:( move 4 , 2 ; move ua + ul , 2 ) 
[6223] c:3 is:( move ul , 0 - 2 ; move 4 , ul )  decode:( move ul , 0 - 2 ; move 4 , ul ) 
[6224] c:0 is:( move ua , 5 ; move 0 - 3 , ul )  decode:( move 3 , 6 ; move ua , 2 ) 
[6225] c:0 is:( move 7 , 0 ; move ua + ul , 2 )  decode:( move ua + ul , 0 ; move 8 , 2 ) 
[6226] c:1 is:( move 3 , 0 ; move ua , 4 / ua )  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[6227] c:0 is:( move ul , 6 ; move 0 - ua , 2 )  decode:( move ul , 0 ; move ua , ul ) 
[6228] c:3 is:( move 2 , 5 ; move ua + ul , 2 )  decode:( move 2 , 5 ; move ua + ul , 2 ) 
[6229] c:3 is:loop 0 , 4 , move ul - ua , 4 * 4  decode:loop 0 , 4 , move ul - ua , 4 * 4 
[6230] c:0 is:( move ua + 3 , ul ; move 2 , 4 )  decode:( move 9 , ul ; move 3 , 4 ) 
[6231] c:0 is:( move ua + 2 , 0 ; move ua , 8 )  decode:( move 8 , 0 ; move ua , 8 ) 
[6232] c:3 is:( move ua , 3 ; move 4 - ua , 2 )  decode:( move ua , 3 ; move 4 - ua , 2 ) 
[6233] c:3 is:( move 2 , 3 ; move ua , 2 / ua )  decode:( move 2 , 3 ; move ua , 2 / ua ) 
[6234] c:0 is:( move 3 , ua * ua ; move 3 , 2 )  decode:( move 3 , 4 / ua ; move 3 , 4 ) 
[6235] c:3 is:( move 2 , 4 ; move ua - ul , 2 )  decode:( move 2 , 4 ; move ua - ul , 2 ) 
[6236] c:0 is:( move 2 , ua / 3 ; move ua , 2 )  decode:( move 2 , 2 ; move ua , 2 ) 
[6237] c:0 is:loop 0 , 4 , move ul - ua , 0 - 9  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[6238] c:3 is:( move 3 , 2 - 3 ; move ua , ul )  decode:( move 3 , 2 - 3 ; move ua , ul ) 
[6239] c:0 is:( move ua - 4 , 0 ; move ua , 5 )  decode:0 ( move - 3 , move 3 - ua , v0 0 / 4 
[6240] c:3 is:loop 0 , 4 , move ua - ul , 0 - 9  decode:loop 0 , 4 , move ua - ul , 0 - 9 
[6241] c:0 is:( move ua , ul ; move 0 - 3 , 5 )  decode:( move ua , ul ; move 3 , 5 ) 
[6242] c:0 is:( move ua , 0 ; move ua , 5 / 2 )  decode:( move ua , 0 ; move ua , 5 * 2 ) 
[6243] c:3 is:( move ua + ul , 0 ; move 7 , 2 )  decode:( move ua + ul , 0 ; move 7 , 2 ) 
[6244] c:3 is:( move 2 , 2 ; move ul - ua , 4 )  decode:( move 2 , 2 ; move ul - ua , 4 ) 
[6245] c:0 is:( move 2 , ua * ua ; move 4 , 2 )  decode:( move 2 , ua / 4 ; move 4 , 2 ) 
[6246] c:3 is:( move 3 , 2 ; move ua , 2 / ua )  decode:( move 3 , 2 ; move ua , 2 / ua ) 
[6247] c:0 is:( move 4 , 0 - 3 ; move ul , ul )  decode:( move ul , 0 - 3 ; move 4 , ul ) 
[6248] c:3 is:( move 2 - ua , ul ; move 4 , 2 )  decode:( move 2 - ua , ul ; move 4 , 2 ) 
[6249] c:3 is:( move 3 , 3 ; move ul - ua , 2 )  decode:( move 3 , 3 ; move ul - ua , 2 ) 
[6250] c:0 is:( move ua , 5 ; move ua + 3 , 2 )  decode:( move ua , 5 ; move 3 + ua , 2 ) 
[6251] c:0 is:loop 0 , 6 , move ul - ua , 3 / 2  decode:loop 0 , 4 , move 0 - ua , 6 / 4 
[6252] c:3 is:( move 2 , 2 ; move ua - ul , 4 )  decode:( move 2 , 2 ; move ua - ul , 4 ) 
[6253] c:0 is:( move ua , 5 ; move 0 - ua , 4 )  decode:( move ua , 5 ; move ua , ul ) 
[6254] c:0 is:( move 3 , 2 ; move ul + ua , 4 )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[6255] c:0 is:( move ua , 6 ; move ua + 2 , 2 )  decode:( move ua , 6 ; move 8 , 2 ) 
[6256] c:3 is:( move 3 , 4 ; move ua + ul , 2 )  decode:( move 3 , 4 ; move ua + ul , 2 ) 
[6257] c:0 is:( move ul - ua , 3 ; move 3 , 2 )  decode:( move 5 , 6 ; move 3 , 0 - 2 ) 
[6258] c:0 is:( move 2 - ua , 0 ; move 6 , ul )  decode:( move 0 - 4 , 0 ; move 6 , ul ) 
[6259] c:0 is:( move ua , 4 ; move 3 - ua , 2 )  decode:( move ua , 4 ; move 3 , 5 ) 
[6260] c:0 is:( move 4 , 0 ; move ul - ua , 4 )  decode:( move 4 , 0 ; move ua - ul , 4 ) 
[6261] c:3 is:( move ul - ua , 0 ; move 3 , 5 )  decode:( move ul - ua , 0 ; move 3 , 5 ) 
[6262] c:3 is:( move ua , 4 + 3 ; move ul , 2 )  decode:( move ua , 4 + 3 ; move ul , 2 ) 
[6263] c:0 is:( move 2 , 2 ; move ua + ul , 5 )  decode:( move 2 , 2 ; move 8 , 5 ) 
[6264] c:0 is:( move ua , 0 - 4 ; move 4 , ul )  decode:( move 4 , 0 - 4 ; move 4 , ul ) 
[6265] c:0 is:( move 2 - ua , 3 ; move ua , 4 )  decode:( move 4 , 0 ; move ua , 4 / 3 ) 
[6266] c:0 is:( move ua - 3 , 0 ; move 5 , ul )  decode:( move 3 , 0 ; move 5 , ul ) 
[6267] c:3 is:( move ua , 0 ; move 3 - ua , 6 )  decode:( move ua , 0 ; move 3 - ua , 6 ) 
[6268] c:3 is:( move ua + 2 , ul ; move 3 , 4 )  decode:( move ua + 2 , ul ; move 3 , 4 ) 
[6269] c:3 is:( move 4 , 0 ; move 4 , ua * ua )  decode:( move 4 , 0 ; move 4 , ua * ua ) 
[6270] c:1 is:( move ua , 7 ; move ua , 0 - 2 )  decode:( move ua , ua * ua ; move ua , 2 ) 
[6271] c:0 is:( move ua , 6 ; move 0 - 2 , ul )  decode:( move ua , 6 ; move 2 , 2 ) 
[6272] c:3 is:( move ua , 3 ; move ua + 3 , 4 )  decode:( move ua , 3 ; move ua + 3 , 4 ) 
[6273] c:3 is:( move ua + 2 , 2 ; move 5 , ul )  decode:( move ua + 2 , 2 ; move 5 , ul ) 
[6274] c:3 is:( move 3 , 2 ; move 3 , ua * ua )  decode:( move 3 , 2 ; move 3 , ua * ua ) 
[6275] c:3 is:( move ua + ul , 3 ; move 4 , 2 )  decode:( move ua + ul , 3 ; move 4 , 2 ) 
[6276] c:3 is:( move 4 * 2 , 0 ; move ul , ul )  decode:( move 4 * 2 , 0 ; move ul , ul ) 
[6277] c:3 is:( move ua , 0 ; move ua , 4 / 3 )  decode:( move ua , 0 ; move ua , 4 / 3 ) 
[6278] c:2 is:( move ul - ua , 2 ; move 4 , 2 )  decode:( move 2 - ua , 2 ; move 4 , 2 ) 
[6279] c:0 is:( move 4 , 0 ; move ua - 4 , ul )  decode:( move 4 , 0 ; move 4 - ua , ul ) 
[6280] c:3 is:( move 0 - ua , 5 ; move ua , 4 )  decode:( move 0 - ua , 5 ; move ua , 4 ) 
[6281] c:0 is:( move ua , 2 ; move 0 - ua , 7 )  decode:( move ua , 2 ; move ua , 5 2 - v) 0 
[6282] c:0 is:loop 0 , 4 , move ua - 3 , ua / 5  decode:loop 0 , 4 , move ua - 3 , 5 
[6283] c:3 is:( move ua + ul , 0 ; move 4 , 5 )  decode:( move ua + ul , 0 ; move 4 , 5 ) 
[6284] c:3 is:( move 3 , 0 ; move ul - ua , 5 )  decode:( move 3 , 0 ; move ul - ua , 5 ) 
[6285] c:0 is:( move 2 , 3 ; move ua + ul , 4 )  decode:( move 2 , 9 ; move ua + ul , 4 ) 
[6286] c:3 is:( move ua , 0 ; move 4 , ua / 3 )  decode:( move ua , 0 ; move 4 , ua / 3 ) 
[6287] c:3 is:( move ua , 0 ; move ua , 4 * 4 )  decode:( move ua , 0 ; move ua , 4 * 4 ) 
[6288] c:3 is:( move 3 , 3 ; move ua - ul , 2 )  decode:( move 3 , 3 ; move ua - ul , 2 ) 
[6289] c:3 is:( move ua + ul , 2 ; move 5 , 2 )  decode:( move ua + ul , 2 ; move 5 , 2 ) 
[6290] c:0 is:loop 0 , 4 , move 4 - ua , 4 / ua  decode:loop 0 , 4 , move 4 - ua , 0 - 7 
[6291] c:3 is:( move ua , 0 - 5 ; move ua , 4 )  decode:( move ua , 0 - 5 ; move ua , 4 ) 
[6292] c:3 is:( move ua , 0 ; move ua , 4 / 3 )  decode:( move ua , 0 ; move ua , 4 / 3 ) 
[6293] c:0 is:( move 0 - ua , 4 ; move ua , 5 )  decode:( move ua , 4 ; move ua , ua * ua ) 
[6294] c:0 is:( move 4 , 2 ; move 2 - ua , ul )  decode:( move 4 , 2 ; move ua - 2 , ul ) 
[6295] c:0 is:loop 0 , 4 , move ul - ua , 4 / 3  decode:loop 0 , 4 , move v0 - ua , 4 / 3 
[6296] c:0 is:( move ua , 4 ; move 0 - ua , 5 )  decode:( move ua , 4 ; move ua , ua * ua ) 
[6297] c:0 is:( move 3 , ul ; move 0 - ua , 5 )  decode:( move 3 , ul ; move ua , 2 ) 
[6298] c:3 is:( move ua + 2 , 4 ; move ua , 4 )  decode:( move ua + 2 , 4 ; move ua , 4 ) 
[6299] c:0 is:loop 0 , 4 , move ua - ul , 4 / 3  decode:0 loop 0 , 4 , move ua - ul , 0 - 4 
[6300] c:0 is:( move 2 - ua , 2 ; move ua , 5 )  decode:( move 4 , 2 ; move ua , ua * ua ) 
[6301] c:0 is:( move 0 - ua , 4 ; move 4 , ul )  decode:( move ua , 4 ; move 4 , ul ) 
[6302] c:0 is:( move 4 , 2 ; move ul - ua , 2 )  decode:( move 4 , 2 ; move ua - ul , 2 ) 
[6303] c:0 is:( move 3 , 2 / ua ; move ua , 2 )  decode:( move 3 , 2 / 9 ; move ua , 2 ) 
[6304] c:0 is:( move 4 , 0 ; move 4 - ua , ul )  decode:( move 4 , 0 ; move 3 , 0 - 4 ) 
[6305] c:0 is:( move ua , 2 / 3 ; move ua , 2 )  decode:( move ua , 4 / ua ; move ua , 2 ) 
[6306] c:0 is:( move 2 , ul ; move 2 - ua , 4 )  decode:( move 2 , ul ; move 4 , ul / 4 ) 
[6307] c:3 is:( move ua , 2 - 3 ; move ua , 4 )  decode:( move ua , 2 - 3 ; move ua , 4 ) 
[6308] c:1 is:( move ul , 0 ; move ua , 2 / 4 )  decode:( move ul , 2 ; move ua , 2 / 4 ) 
[6309] c:0 is:( move ua , 3 / ua ; move 2 , 2 )  decode:( move ua , 9 + 4 ; move 2 , 2 ) 
[6310] c:0 is:loop 0 , 6 , move ua - 4 , 4 + ul  decode:loop 0 , 4 , move ua - 4 , 0 - 8 
[6311] c:0 is:( move ul , 0 ; move ua , 4 * 3 )  decode:( move ul , 0 ; move ua , 3 * 4 ) 
[6312] c:3 is:( move 3 , ul ; move ua , 2 - 3 )  decode:( move 3 , ul ; move ua , 2 - 3 ) 
[6313] c:0 is:( move ul , 0 - 3 ; move 4 , ul )  decode:( move ul , 0 - 4 ; move 4 , ul ) 
[6314] c:0 is:( move 4 , 4 ; move 0 - ua , ul )  decode:( move 4 , 4 ; move ua , 2 ) 
[6315] c:3 is:( move ua , 0 ; move 3 , 4 / ua )  decode:( move ua , 0 ; move 3 , 4 / ua ) 
[6316] c:0 is:( move ua , 0 ; move ua , 0 - 9 )  decode:( move ua , 0 ; move ua , 9 ) 
[6317] c:3 is:loop 0 , 4 , move 3 - ua , ua / 5  decode:loop 0 , 4 , move 3 - ua , ua / 5 
[6318] c:0 is:loop 0 , 3 , move ul - ua , 4 * 5  decode:loop 0 , 4 , move 4 , 4 * 4 * 4 
[6319] c:0 is:( move 4 , 0 - 4 ; move ua , ul )  decode:( move 4 , 9 / 4 ; move ua , ul ) 
[6320] c:0 is:( move 0 - 3 , ul ; move 4 , ul )  decode:( move 3 , ul ; move 4 , ul ) 
[6321] c:3 is:( move 4 , 0 ; move ua , ua / 3 )  decode:( move 4 , 0 ; move ua , ua / 3 ) 
[6322] c:3 is:( move ua + 2 , 6 ; move ua , 2 )  decode:( move ua + 2 , 6 ; move ua , 2 ) 
[6323] c:0 is:( move ua , 2 ; move 2 , ua / 3 )  decode:( move 2 , ul ; move ua , ua / 3 ) 
[6324] c:0 is:loop 0 , 4 , move ua - 4 , 4 / ua  decode:loop 0 , 4 , move ua - 4 , 2 / 3 
[6325] c:3 is:( move ua , 4 ; move ua + 2 , 4 )  decode:( move ua , 4 ; move ua + 2 , 4 ) 
[6326] c:3 is:( move ua + ul , 4 ; move 3 , 2 )  decode:( move ua + ul , 4 ; move 3 , 2 ) 
[6327] c:3 is:( move 0 - 4 , ul ; move 3 , ul )  decode:( move 0 - 4 , ul ; move 3 , ul ) 
[6328] c:3 is:( move ua , ul ; move 4 , 0 - 4 )  decode:( move ua , ul ; move 4 , 0 - 4 ) 
[6329] c:0 is:( move 2 - ua , 5 ; move ua , 2 )  decode:( move 4 , ua / 5 ; move ua , 2 ) 
[6330] c:3 is:( move ul - ua , 0 ; move 4 , 4 )  decode:( move ul - ua , 0 ; move 4 , 4 ) 
[6331] c:3 is:( move ua , 3 / 2 ; move ua , 2 )  decode:( move ua , 3 / 2 ; move ua , 2 ) 
[6332] c:3 is:( move ua + ul , 3 ; move 2 , 4 )  decode:( move ua + ul , 3 ; move 2 , 4 ) 
[6333] c:0 is:( move ua + 3 , 5 ; move ua , 2 )  decode:( move 9 , 5 ; move ua , 2 ) 
[6334] c:3 is:( move 2 , 3 ; move ua + 4 , ul )  decode:( move 2 , 3 ; move ua + 4 , ul ) 
[6335] c:3 is:( move ul , ul ; move 5 , 0 - 2 )  decode:( move ul , ul ; move 5 , 0 - 2 ) 
[6336] c:0 is:( move 4 , 0 ; move ua - ul , 4 )  decode:( move 4 , 0 ; move ul - ua , 4 ) 
[6337] c:0 is:( move 4 , 0 ; move ua + ul , 5 )  decode:( move 4 , 0 ; move 4 + 4 , 5 ) 
[6338] c:3 is:( move ua + 3 , 4 ; move 2 , ul )  decode:( move ua + 3 , 4 ; move 2 , ul ) 
[6339] c:0 is:loop 0 , 6 , move ul - ua , 2 - 5  decode:loop 0 , 4 , move 0 - 4 , 0 - 3 
[6340] c:0 is:( move ua , 0 ; move ua , 4 * 5 )  decode:( move ua , 0 ; move ua , 5 * 4 ) 
[6341] c:3 is:( move ul - ua , 0 ; move 2 , 7 )  decode:( move ul - ua , 0 ; move 2 , 7 ) 
[6342] c:3 is:( move 4 , 0 - 5 ; move ua , ul )  decode:( move 4 , 0 - 5 ; move ua , ul ) 
[6343] c:3 is:( move ua , 7 ; move ua + 2 , 2 )  decode:( move ua , 7 ; move ua + 2 , 2 ) 
[6344] c:0 is:( move ua - 4 , 2 ; move ua , 4 )  decode:( move 2 , 2 ; move ua , 4 ) 
[6345] c:3 is:( move 0 - ua , 5 ; move 4 , ul )  decode:( move 0 - ua , 5 ; move 4 , ul ) 
[6346] c:3 is:( move 4 , ul ; move 3 - ua , 2 )  decode:( move 4 , ul ; move 3 - ua , 2 ) 
[6347] c:3 is:( move 2 , 4 ; move ua + ul , 4 )  decode:( move 2 , 4 ; move ua + ul , 4 ) 
[6348] c:3 is:( move ua , 4 * 3 ; move ua , 2 )  decode:( move ua , 4 * 3 ; move ua , 2 ) 
[6349] c:3 is:( move ua + 2 , 5 ; move ua , 4 )  decode:( move ua + 2 , 5 ; move ua , 4 ) 
[6350] c:3 is:( move ua + 2 , 5 ; move 3 , ul )  decode:( move ua + 2 , 5 ; move 3 , ul ) 
[6351] c:0 is:( move 5 , 4 ; move 0 - ua , ul )  decode:( move 5 , 4 ; move ua , ua / 3 ) 
[6352] c:3 is:( move ul - ua , 0 ; move 5 , 4 )  decode:( move ul - ua , 0 ; move 5 , 4 ) 
[6353] c:3 is:( move ul - ua , 0 ; move 4 , 5 )  decode:( move ul - ua , 0 ; move 4 , 5 ) 
[6354] c:0 is:( move ua , 5 ; move 3 - ua , 2 )  decode:( move ua , 5 ; move 3 , 2 ) 
[6355] c:3 is:( move 2 - ua , ul ; move 5 , 2 )  decode:( move 2 - ua , ul ; move 5 , 2 ) 
[6356] c:0 is:( move 2 - ua , ul ; move 3 , 4 )  decode:( move 4 , 4 ; move 3 , 4 / ua ) 
[6357] c:0 is:loop 0 , 5 , move 4 - ua , ul / 3  decode:loop 0 , 4 , move ua - 4 , 0 - 8 
[6358] c:0 is:( move ua - 2 , 6 ; move ua , 2 )  decode:( move 4 , 6 ; move ua , 2 ) 
[6359] c:3 is:( move 0 - ua , ul ; move 4 , 5 )  decode:( move 0 - ua , ul ; move 4 , 5 ) 
[6360] c:0 is:( move ul - ua , 2 ; move 4 , 3 )  decode:( move 3 , 6 ; move ua , ul / ua ) 
[6361] c:0 is:( move ua , 2 ; move 0 - 7 , ul )  decode:( move ua , 2 ; move 7 , ua / 3 ) 
[6362] c:0 is:( move 3 - ua , 3 ; move ua , 4 )  decode:( move 3 , 0 ; move ua , 4 / 3 ) 
[6363] c:3 is:( move 3 , 3 ; move ua + ul , 4 )  decode:( move 3 , 3 ; move ua + ul , 4 ) 
[6364] c:0 is:( move 4 + 3 , ul ; move ul , 2 )  decode:( move ua , ul ; move ul , 2 ) 
[6365] c:0 is:( move ua - ul , 0 ; move 7 , 2 )  decode:( move 5 , 0 ; move 8 , 2 ) 
[6366] c:3 is:( move 3 , ua * ua ; move 4 , 2 )  decode:( move 3 , ua * ua ; move 4 , 2 ) 
[6367] c:0 is:( move ua , 2 / 4 ; move ua , 2 )  decode:( move ua , 3 / 4 ; move ua , 2 ) 
[6368] c:3 is:( move 0 - 4 , ul ; move 4 , ul )  decode:( move 0 - 4 , ul ; move 4 , ul ) 
[6369] c:3 is:( move 3 , 5 ; move ua + ul , 2 )  decode:( move 3 , 5 ; move ua + ul , 2 ) 
[6370] c:0 is:( move 3 + ua , 6 ; move ua , 2 )  decode:( move ua + 3 , 9 ; move ua , 2 ) 
[6371] c:3 is:( move 2 , 4 / ua ; move ua , 2 )  decode:( move 2 , 4 / ua ; move ua , 2 ) 
[6372] c:3 is:( move ua , 6 ; move ua , 0 - 4 )  decode:( move ua , 6 ; move ua , 0 - 4 ) 
[6373] c:0 is:( move ua , 0 ; move 5 , ua / 3 )  decode:( move ua , ul / 3 ; move 5 , 2 ) 
[6374] c:3 is:( move ua , 0 ; move 4 , ua / 4 )  decode:( move ua , 0 ; move 4 , ua / 4 ) 
[6375] c:0 is:( move 4 , ul ; move 0 - ua , 5 )  decode:( move 4 , ul ; move ua , ua * ua ) 
[6376] c:3 is:( move ua , 5 ; move ua + 2 , 4 )  decode:( move ua , 5 ; move ua + 2 , 4 ) 
[6377] c:3 is:( move ua + ul , 3 ; move 2 , 5 )  decode:( move ua + ul , 3 ; move 2 , 5 ) 
[6378] c:3 is:( move 3 , 3 / ua ; move ua , 2 )  decode:( move 3 , 3 / ua ; move ua , 2 ) 
[6379] c:3 is:( move ul - ua , 2 ; move 3 , 4 )  decode:( move ul - ua , 2 ; move 3 , 4 ) 
[6380] c:0 is:( move ua , 2 - 3 ; move 4 , ul )  decode:loop 0 , 3 , move ua - 2 , v0 - ul 
[6381] c:0 is:( move 9 , 0 ; move 0 - ua , ul )  decode:( move 9 , 0 ; move ua , ua / 3 ) 
[6382] c:0 is:( move ua + 3 , 4 ; move ua , 4 )  decode:( move 3 + ua , 4 ; move ua , 4 ) 
[6383] c:0 is:loop 0 , 6 , move ua + ul , 4 * 4  decode:loop 0 , 4 , move 4 + 3 , 4 * 4 
[6384] c:3 is:( move ul - ua , 3 ; move 4 , 2 )  decode:( move ul - ua , 3 ; move 4 , 2 ) 
[6385] c:0 is:( move 0 - ua , 0 ; move 9 , ul )  decode:( move ul - ua , 0 ; move 9 , ul ) 
[6386] c:3 is:( move ua , 2 * 5 ; move ua , 2 )  decode:( move ua , 2 * 5 ; move ua , 2 ) 
[6387] c:0 is:( move ua , 2 / 3 ; move 2 , ul )  decode:( move ua , 3 / 2 ; move 2 , ul ) 
[6388] c:0 is:( move ul , 0 ; move ua , 4 / 3 )  decode:( move ul , ul / 4 ; move ua , 5 ) 
[6389] c:3 is:( move 2 - ua , 3 ; move 4 , ul )  decode:( move 2 - ua , 3 ; move 4 , ul ) 
[6390] c:0 is:( move ua + ul , 0 ; move 6 , 4 )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[6391] c:0 is:( move 2 , 5 ; move ul - ua , 2 )  decode:( move 2 , 5 ; move ua - ul , 2 ) 
[6392] c:0 is:( move ua , ul ; move 4 , 2 - 3 )  decode:( move 3 - ua , 0 ; move ua , ul ) 
[6393] c:3 is:( move 5 , 0 ; move ua + ul , 5 )  decode:( move 5 , 0 ; move ua + ul , 5 ) 
[6394] c:0 is:( move ua + 2 , ul ; move 6 , 2 )  decode:( move ua + 2 , ul ; move 5 , 2 ) 
[6395] c:0 is:( move ua , 4 ; move 2 - ua , 4 )  decode:( move ua , 4 ; move 4 , 4 / ua ) 
[6396] c:0 is:loop 0 , 3 , move ul - ua , 5 / 4  decode:loop 0 , 4 , move ul - ua , 0 - 5 
[6397] c:3 is:( move ua + 3 , ul ; move 3 , 4 )  decode:( move ua + 3 , ul ; move 3 , 4 ) 
[6398] c:3 is:( move ua + ul , 3 ; move 3 , 4 )  decode:( move ua + ul , 3 ; move 3 , 4 ) 
[6399] c:0 is:( move ua , ul ; move 4 , 0 - 5 )  decode:( move ua , ul ; move 4 , 5 / 4 ) 
[6400] c:3 is:( move 4 , 0 ; move ul - ua , 5 )  decode:( move 4 , 0 ; move ul - ua , 5 ) 
[6401] c:3 is:( move 3 , 3 ; move ul - ua , 3 )  decode:( move 3 , 3 ; move ul - ua , 3 ) 
[6402] c:0 is:( move 0 - ua , 3 ; move 6 , ul )  decode:( move 0 - ua , 3 ; move ua , ul ) 
[6403] c:0 is:( move 0 - ua , 4 ; move ua , 6 )  decode:( move ua , 4 / 5 ; move ua , 9 ) 
[6404] c:0 is:( move ua , 3 ; move 2 - ua , 5 )  decode:( move ua , 3 ; move 4 , ua * ua ) 
[6405] c:3 is:( move 5 , 3 ; move ua + ul , 2 )  decode:( move 5 , 3 ; move ua + ul , 2 ) 
[6406] c:3 is:( move 2 , ua / 3 ; move ua , 3 )  decode:( move 2 , ua / 3 ; move ua , 3 ) 
[6407] c:0 is:( move ua + ul , 4 + move 3 , 2 )  decode:( move ua , 4 + move 4 , 2 ) 
[6408] c:0 is:( move ua , 3 ; move ua - 2 , 5 )  decode:( move ua , 3 ; move 4 , 5 ) 
[6409] c:3 is:( move ul , 0 - 4 ; move 4 , ul )  decode:( move ul , 0 - 4 ; move 4 , ul ) 
[6410] c:0 is:( move 3 , 3 ; move 3 , ua * ua )  decode:( move 3 , 3 ; move 3 , 8 ) 
[6411] c:0 is:( move 7 , 2 ; move 0 - ua , ul )  decode:( move 7 , 2 ; move ua , ua / 3 ) 
[6412] c:0 is:( move 0 - 4 , 5 ; move ua , ul )  decode:( move 4 , ua * 5 ; move ua , ul ) 
[6413] c:3 is:( move ua + ul , 0 ; move 5 , 5 )  decode:( move ua + ul , 0 ; move 5 , 5 ) 
[6414] c:3 is:( move 2 , 3 / 2 ; move ua , ul )  decode:( move 2 , 3 / 2 ; move ua , ul ) 
[6415] c:0 is:( move 0 - ua , 6 ; move 3 , ul )  decode:( move ua , 9 ; move 3 , 4 * 5 ) 
[6416] c:3 is:( move 2 , 2 ; move ua , 4 / ua )  decode:( move 2 , 2 ; move ua , 4 / ua ) 
[6417] c:3 is:( move ua + 2 , ul ; move 3 , 5 )  decode:( move ua + 2 , ul ; move 3 , 5 ) 
[6418] c:0 is:( move 4 - ua , 3 ; move 2 , ul )  decode:( move 2 , 0 ; move 4 - ua , ul ) 
[6419] c:0 is:( move ua , 2 ; move ua , 0 - 8 )  decode:( move ua , 2 ; move ua , 3 / 2 ) 
[6420] c:0 is:( move ua + 4 , 4 ; move ul , 2 )  decode:( move 4 , 4 ; move 4 + 3 , 2 ) 
[6421] c:0 is:( move 3 - ua , 5 ; move ua , 2 )  decode:( move 3 , 8 ; move ua , 2 ) 
[6422] c:3 is:( move ua + ul , 2 ; move 3 , 5 )  decode:( move ua + ul , 2 ; move 3 , 5 ) 
[6423] c:0 is:( move ua , 2 ; move ul / 3 , 2 )  decode:( move ul , ul ; move ua , 2 ) 
[6424] c:3 is:( move ul - ua , 2 ; move 3 , 4 )  decode:( move ul - ua , 2 ; move 3 , 4 ) 
[6425] c:3 is:( move 8 , 0 ; move ua + ul , 2 )  decode:( move 8 , 0 ; move ua + ul , 2 ) 
[6426] c:3 is:( move 2 , 3 ; move 4 , ua * ua )  decode:( move 2 , 3 ; move 4 , ua * ua ) 
[6427] c:0 is:( move 3 / 2 , 2 ; move ua , ul )  decode:( move 2 , 2 ; move ua , ul ) 
[6428] c:3 is:( move ul - ua , 0 ; move 3 , 6 )  decode:( move ul - ua , 0 ; move 3 , 6 ) 
[6429] c:0 is:( move 4 - ua , 2 ; move ua , 4 )  decode:( move 2 , 4 ; move ua , ul ) 
[6430] c:0 is:( move 2 , 3 ; move ul - ua , 4 )  decode:( move 2 , 3 ; move ua - ul , 4 ) 
[6431] c:0 is:( move ua - ul , 0 ; move 4 , 5 )  decode:( move ul - ua , 0 ; move 4 , 5 ) 
[6432] c:0 is:( move 0 - 4 , ul ; move ua , 5 )  decode:( move 2 - ua , ul ; move ua , 5 ) 
[6433] c:3 is:( move 0 - ua , 4 ; move 5 , ul )  decode:( move 0 - ua , 4 ; move 5 , ul ) 
[6434] c:0 is:( move 3 , ul ; move ua + 4 , 3 )  decode:( move 3 , ul ; move 4 + ua , 3 ) 
[6435] c:0 is:( move 2 - ua , 3 ; move ua , 5 )  decode:( move 4 , 6 ; move ua , 0 - 2 ) 
[6436] c:3 is:( move ua + ul , 4 ; move 2 , 4 )  decode:( move ua + ul , 4 ; move 2 , 4 ) 
[6437] c:0 is:( move ua - 2 , 3 ; move ua , 5 )  decode:( move 4 , 3 ; move ua , 5 ) 
[6438] c:0 is:( move 4 , 2 ; move ua + ul , 4 )  decode:( move 4 , 2 ; move 4 + 4 , 4 ) 
[6439] c:3 is:( move ua - ul , 2 ; move 3 , 4 )  decode:( move ua - ul , 2 ; move 3 , 4 ) 
[6440] c:3 is:( move 3 , ul ; move ua + 3 , 4 )  decode:( move 3 , ul ; move ua + 3 , 4 ) 
[6441] c:0 is:( move 4 , 0 - 4 ; move ul , ul )  decode:( move ul , 0 ; move 4 , ul ) 
[6442] c:0 is:( move ua + 2 , 0 ; move ua , 9 )  decode:( move ua + 3 , 0 ; move ua , 9 ) 
[6443] c:0 is:( move 3 - ua , 2 ; move 4 , ul )  decode:( move 3 , 0 ; move 4 , ua / 3 ) 
[6444] c:0 is:( move 3 , 2 ; move ua + ul , 5 )  decode:( move 3 , 2 ; move 8 , 5 ) 
[6445] c:0 is:( move 2 , 4 ; move ua , 2 / ua )  decode:( move 2 , 4 ; move ua , ul / ua ) 
[6446] c:0 is:( move ua + 4 , 4 ; move ua , 3 )  decode:( move 4 + 4 , 4 ; move ua , 3 ) 
[6447] c:3 is:( move 4 , 2 - 3 ; move ua , ul )  decode:( move 4 , 2 - 3 ; move ua , ul ) 
[6448] c:0 is:( move ua - ul , 3 ; move 4 , 2 )  decode:( move ul - ua , 3 ; move 4 , 2 ) 
[6449] c:0 is:( move ua , 8 ; move ua , 0 - 2 )  decode:( move ua , 9 ; move ua , 0 - 2 ) 
[6450] c:3 is:( move 2 , 3 ; move ua + ul , 5 )  decode:( move 2 , 3 ; move ua + ul , 5 ) 
[6451] c:0 is:( move 5 , 2 ; move ul - ua , 2 )  decode:( move 5 , 2 ; move 5 , 5 ) 
[6452] c:3 is:( move ua , 3 / 2 ; move 2 , ul )  decode:( move ua , 3 / 2 ; move 2 , ul ) 
[6453] c:0 is:( move ua , 5 ; move 0 - 4 , ul )  decode:( move 4 , 6 ; move ua , ua / 3 ) 
[6454] c:3 is:( move ua + ul , 4 ; move 4 , 2 )  decode:( move ua + ul , 4 ; move 4 , 2 ) 
[6455] c:3 is:( move ua + 4 , ul ; move 2 , 4 )  decode:( move ua + 4 , ul ; move 2 , 4 ) 
[6456] c:0 is:( move 4 , ul ; move ua , 2 - 3 )  decode:( move 0 - ua , 0 ; move 5 , ul ) 
[6457] c:0 is:( move ua , 2 ; move 3 / 2 , ul )  decode:( move ua , 2 ; move ul , ul ) 
[6458] c:3 is:( move 3 , ua / 3 ; move ua , 2 )  decode:( move 3 , ua / 3 ; move ua , 2 ) 
[6459] c:0 is:( move 2 , 3 ; move ua , ua / 3 )  decode:( move 2 , 3 ; move ua , 0 - 2 ) 
[6460] c:3 is:( move ua + ul , 5 ; move 3 , 2 )  decode:( move ua + ul , 5 ; move 3 , 2 ) 
[6461] c:3 is:( move 4 , 4 ; move ua + ul , 2 )  decode:( move 4 , 4 ; move ua + ul , 2 ) 
[6462] c:0 is:( move 2 , 6 ; move ua + ul , 2 )  decode:( move 2 , 4 / ua ; move ua , 2 ) 
[6463] c:0 is:loop 0 , 7 , move ua - ul , 3 / 2  decode:loop 0 , 4 , move ua + ul , 0 - 8 
[6464] c:0 is:( move 0 - ua , 3 ; move ua , 7 )  decode:( move ua , 3 ; move ua , v0 + 2 ) 
[6465] c:3 is:( move 3 , 5 ; move ua + 2 , ul )  decode:( move 3 , 5 ; move ua + 2 , ul ) 
[6466] c:3 is:( move ua + 2 , 6 ; move ua , 3 )  decode:( move ua + 2 , 6 ; move ua , 3 ) 
[6467] c:0 is:( move ua , 5 ; move 0 - ua , 5 )  decode:( move ua , 5 ; move 7 , ua * ua ) 
[6468] c:0 is:( move 3 , 2 ; move ua - ul , 4 )  decode:( move 3 , 2 ; move ul - ua , 4 ) 
[6469] c:0 is:( move ua - ul , 4 ; move 3 , 2 )  decode:( move ul - ua , 4 ; move 3 , 2 ) 
[6470] c:0 is:( move 2 - ua , 0 ; move ua , 8 )  decode:( move 4 , 0 ; move ua , 8 ) 
[6471] c:3 is:( move ua + ul , 3 ; move 5 , 2 )  decode:( move ua + ul , 3 ; move 5 , 2 ) 
[6472] c:3 is:( move 0 - 3 , ul ; move 5 , ul )  decode:( move 0 - 3 , ul ; move 5 , ul ) 
[6473] c:3 is:( move 2 , 2 ; move ua , ua / 4 )  decode:( move 2 , 2 ; move ua , ua / 4 ) 
[6474] c:3 is:( move 3 , 2 ; move ul - ua , 4 )  decode:( move 3 , 2 ; move ul - ua , 4 ) 
[6475] c:3 is:( move 4 , 0 ; move ua , ua / 4 )  decode:( move 4 , 0 ; move ua , ua / 4 ) 
[6476] c:0 is:( move 3 / 2 , ul ; move ua , 2 )  decode:( move 2 , ul ; move ua , 2 ) 
[6477] c:0 is:( move ul - ua , 0 ; move 7 , 2 )  decode:( move ul - ua , 0 ; move ua , 2 ) 
[6478] c:0 is:( move 2 - ua , 2 ; move ua , 6 )  decode:( move 4 , 2 ; move ua , 3 ) 
[6479] c:0 is:( move ua , 0 - 7 ; move ua , 3 )  decode:( move ua , 7 ; move 7 , 3 ) 
[6480] c:0 is:( move ua , 2 ; move ua , 6 + 4 )  decode:( move ua , 2 ; move ua , 5 * 2 ) 
[6481] c:0 is:( move ua , 5 * 2 ; move ua , 3 )  decode:( move ua , 2 * 5 ; move ua , 3 ) 
[6482] c:0 is:( move 0 - 7 , 3 ; move ua , ul )  decode:( move 6 , 0 ; move ua + ul , ul ) 
[6483] c:0 is:( move 0 - ua , 6 ; move 4 , ul )  decode:( move ua , 9 ; move 4 , 0 - 4 ) 
[6484] c:3 is:( move ua + 2 , 6 ; move ua , 4 )  decode:( move ua + 2 , 6 ; move ua , 4 ) 
[6485] c:0 is:loop 0 , 6 , move ua - 4 , 4 / ua  decode:loop 0 , 4 , move 3 , ua / 4 
[6486] c:0 is:( move ua - ul , 3 ; move 3 , 4 )  decode:( move ul - ua , 3 ; move 3 , 4 ) 
[6487] c:0 is:( move ul , 2 ; move 4 , 2 / ua )  decode:move 4 , 4 / 3 
[6488] c:3 is:( move ua + ul , 4 ; move 2 , 5 )  decode:( move ua + ul , 4 ; move 2 , 5 ) 
[6489] c:3 is:( move 3 , 6 ; move ua + ul , 2 )  decode:( move 3 , 6 ; move ua + ul , 2 ) 
[6490] c:0 is:( move ua , 5 * 3 ; move ua , 2 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[6491] c:3 is:( move ua + 2 , ul ; move 4 , 5 )  decode:( move ua + 2 , ul ; move 4 , 5 ) 
[6492] c:0 is:( move 2 , 4 ; move ua , 3 / ua )  decode:( move 2 , 4 ; move ua , 2 / 4 ) 
[6493] c:3 is:( move 3 , 3 ; move ua + ul , 5 )  decode:( move 3 , 3 ; move ua + ul , 5 ) 
[6494] c:0 is:( move 2 , 6 ; move 3 + ua , ul )  decode:( move 2 , 6 ; move  4 + v0 ) 
[6495] c:0 is:( move 3 , 4 / ua ; move ua , 2 )  decode:( move 3 , 4 / 3 ; move ua , 2 ) 
[6496] c:3 is:( move 3 - ua , 0 ; move ua , 8 )  decode:( move 3 - ua , 0 ; move ua , 8 ) 
[6497] c:3 is:( move ua , 0 - 9 ; move ua , 2 )  decode:( move ua , 0 - 9 ; move ua , 2 ) 
[6498] c:3 is:( move 3 , 4 ; move ua + ul , 4 )  decode:( move 3 , 4 ; move ua + ul , 4 ) 
[6499] c:3 is:( move 3 , 0 ; move ua + ul , 8 )  decode:( move 3 , 0 ; move ua + ul , 8 ) 
[6500] c:0 is:( move 4 , ul ; move 2 - ua , 4 )  decode:( move 4 , ul ; move 4 , ul / 4 ) 
[6501] c:0 is:( move 0 - ua , 4 ; move ua , 7 )  decode:loop 0 , 2 , move 0 - ua , 4 + v0 
[6502] c:0 is:( move 4 + ua , 4 ; move ua , 4 )  decode:( move ua + 4 , 4 ; move ua , 4 ) 
[6503] c:3 is:( move 3 - ua , 2 ; move 5 , ul )  decode:( move 3 - ua , 2 ; move 5 , ul ) 
[6504] c:0 is:( move 2 , 3 ; move ul - ua , 5 )  decode:( move 2 , ua * ua ; move ua , 5 ) 
[6505] c:0 is:( move ua , 2 / 4 ; move 2 , ul )  decode:( move ua , 3 / 4 ; move 2 , ul ) 
[6506] c:3 is:( move 3 , ua / 4 ; move ua , 2 )  decode:( move 3 , ua / 4 ; move ua , 2 ) 
[6507] c:3 is:( move ua , ua / 4 ; move 3 , 2 )  decode:( move ua , ua / 4 ; move 3 , 2 ) 
[6508] c:0 is:( move 4 , 2 ; move 4 - ua , ul )  decode:( move 4 , ua / 2 ; move 2 , 4 ) 
[6509] c:3 is:( move ua , 4 * 4 ; move ua , 2 )  decode:( move ua , 4 * 4 ; move ua , 2 ) 
[6510] c:3 is:( move 3 , ul ; move 3 , 2 / ua )  decode:( move 3 , ul ; move 3 , 2 / ua ) 
[6511] c:0 is:( move ua , 0 ; move 6 , ua / 3 )  decode:( move ua , ul ; move 6 , ua / 3 ) 
[6512] c:3 is:( move ua + ul , 3 ; move 3 , 5 )  decode:( move ua + ul , 3 ; move 3 , 5 ) 
[6513] c:3 is:( move 4 , 3 ; move 3 , ua * ua )  decode:( move 4 , 3 ; move 3 , ua * ua ) 
[6514] c:0 is:( move 5 , ul ; move 3 - ua , 2 )  decode:( move 5 , ul ; move 3 , 5 ) 
[6515] c:3 is:( move ua , 4 ; move 3 , 2 / ua )  decode:( move ua , 4 ; move 3 , 2 / ua ) 
[6516] c:3 is:( move ul - ua , 0 ; move 3 , 7 )  decode:( move ul - ua , 0 ; move 3 , 7 ) 
[6517] c:0 is:( move ul , 4 * 3 ; move ua , 2 )  decode:( move ul , 3 * 4 ; move ua , 2 ) 
[6518] c:3 is:( move 5 , 4 ; move ua + ul , 2 )  decode:( move 5 , 4 ; move ua + ul , 2 ) 
[6519] c:3 is:( move 3 - ua , 3 ; move ua , 5 )  decode:( move 3 - ua , 3 ; move ua , 5 ) 
[6520] c:0 is:( move 6 , ul ; move ua , 0 - 4 )  decode:( move ua , ul ; move ul - ua , 4 ) 
[6521] c:3 is:( move ua , 9 ; move ua , 0 - 2 )  decode:( move ua , 9 ; move ua , 0 - 2 ) 
[6522] c:3 is:( move ua , ua / 4 ; move 2 , 3 )  decode:( move ua , ua / 4 ; move 2 , 3 ) 
[6523] c:2 is:( move 2 , ua / 3 ; move ua , 4 )  decode:( move 2 , ua / 4 ; move ua , 4 ) 
[6524] c:3 is:( move 3 , 3 / 2 ; move ua , ul )  decode:( move 3 , 3 / 2 ; move ua , ul ) 
[6525] c:3 is:( move ua , 2 - 3 ; move ul , 5 )  decode:( move ua , 2 - 3 ; move ul , 5 ) 
[6526] c:3 is:( move ua + 3 , 5 ; move ua , 4 )  decode:( move ua + 3 , 5 ; move ua , 4 ) 
[6527] c:3 is:( move 4 , 2 ; move ua - ul , 4 )  decode:( move 4 , 2 ; move ua - ul , 4 ) 
[6528] c:0 is:( move ua + 2 , 2 ; move ua , 8 )  decode:( move 9 , 2 ; move ua , ua * ua ) 
[6529] c:3 is:( move ua + ul , 3 ; move 4 , 4 )  decode:( move ua + ul , 3 ; move 4 , 4 ) 
[6530] c:0 is:( move 6 , 3 ; move ua + ul , 2 )  decode:( move 5 , 3 ; move ua + ul , 2 ) 
[6531] c:3 is:( move ua , 2 / 4 ; move ua , 3 )  decode:( move ua , 2 / 4 ; move ua , 3 ) 
[6532] c:3 is:( move 4 , 5 ; move ua + ul , 2 )  decode:( move 4 , 5 ; move ua + ul , 2 ) 
[6533] c:0 is:( move ua , 9 ; move 0 - ua , 2 )  decode:( move ua , 9 ; move ua , 2 - 3 ) 
[6534] c:0 is:( move ua + 2 , 4 ; move ul , 5 )  decode:( move ua , 4 ; move 2 , 2 / 4 ) 
[6535] c:0 is:( move 3 / 2 , 3 ; move ua , ul )  decode:( move ul , 3 ; move ua , ul ) 
[6536] c:0 is:( move ua , 6 ; move 0 - ua , 5 )  decode:( move ua , 6 ; move ua , ua * ua ) 
[6537] c:0 is:( move 2 / 4 , ul ; move ua , 2 )  decode:( move ul , ul ; move ua , 2 ) 
[6538] c:3 is:( move 3 , 3 ; move 4 , ua * ua )  decode:( move 3 , 3 ; move 4 , ua * ua ) 
[6539] c:3 is:( move 6 , 0 ; move 4 , ua * ua )  decode:( move 6 , 0 ; move 4 , ua * ua ) 
[6540] c:3 is:( move 5 , 2 ; move ua + ul , 4 )  decode:( move 5 , 2 ; move ua + ul , 4 ) 
[6541] c:3 is:( move ua + ul , 4 ; move 5 , 2 )  decode:( move ua + ul , 4 ; move 5 , 2 ) 
[6542] c:0 is:( move 6 , 0 ; move ua + ul , 5 )  decode:( move 5 , 0 ; move ua + ul , 5 ) 
[6543] c:3 is:( move ua + ul , 6 ; move 3 , 2 )  decode:( move ua + ul , 6 ; move 3 , 2 ) 
[6544] c:3 is:( move 9 , 0 ; move ua + ul , 2 )  decode:( move 9 , 0 ; move ua + ul , 2 ) 
[6545] c:3 is:( move ua , 5 ; move ua + 3 , 4 )  decode:( move ua , 5 ; move ua + 3 , 4 ) 
[6546] c:3 is:( move 2 , 4 ; move 4 , ua * ua )  decode:( move 2 , 4 ; move 4 , ua * ua ) 
[6547] c:3 is:( move 4 , 4 ; move ua - ul , 2 )  decode:( move 4 , 4 ; move ua - ul , 2 ) 
[6548] c:0 is:( move 5 , 0 ; move ua - ul , 5 )  decode:( move 5 , 0 ; move ul - ua , 5 ) 
[6549] c:0 is:( move ua , 2 ; move 2 - ua , 7 )  decode:( move ua , 2 ; move 4 , 7 ) 
[6550] c:0 is:( move 2 , ul ; move 4 + 4 , ul )  decode:( move 4 - ua , ul ; move 4 , ul ) 
[6551] c:3 is:( move 5 , 3 ; move 2 - ua , ul )  decode:( move 5 , 3 ; move 2 - ua , ul ) 
[6552] c:3 is:( move 3 , 2 ; move ua , 4 / ua )  decode:( move 3 , 2 ; move ua , 4 / ua ) 
[6553] c:3 is:( move 4 , ua * ua ; move 4 , 2 )  decode:( move 4 , ua * ua ; move 4 , 2 ) 
[6554] c:0 is:( move ua , 4 * 3 ; move 2 , ul )  decode:( move ua , 3 * 4 ; move 2 , ul ) 
[6555] c:0 is:( move ua - ul , 2 ; move 4 , 4 )  decode:( move ul - ua , 2 ; move 4 , 4 ) 
[6556] c:1 is:( move 3 , 4 ; move ua , 2 / ua )  decode:( move 3 , 4 ; move ua , 2 / ua ) 
[6557] c:3 is:( move 2 , 7 ; move ua + ul , 2 )  decode:( move 2 , 7 ; move ua + ul , 2 ) 
[6558] c:3 is:( move 2 , 2 / 4 ; move ua , ul )  decode:( move 2 , 2 / 4 ; move ua , ul ) 
[6559] c:0 is:( move ua , ul ; move 5 , 2 - 3 )  decode:( move 2 - ua , 0 ; move ua , ul ) 
[6560] c:0 is:( move ua + 2 , ul ; move 3 , 6 )  decode:( move 9 , ul ; move 3 , 6 ) 
[6561] c:0 is:( move 3 , 2 ; move ua - ul , 5 )  decode:( move 3 , 2 ; move ul - ua , 5 ) 
[6562] c:3 is:( move ua , 0 ; move ua , 5 / 4 )  decode:( move ua , 0 ; move ua , 5 / 4 ) 
[6563] c:3 is:( move ul - ua , 0 ; move 5 , 5 )  decode:( move ul - ua , 0 ; move 5 , 5 ) 
[6564] c:3 is:( move 0 - ua , ul ; move 5 , 5 )  decode:( move 0 - ua , ul ; move 5 , 5 ) 
[6565] c:0 is:( move 4 - ua , 5 ; move ua , 2 )  decode:( move 2 , ua / 2 ; move ua , 2 ) 
[6566] c:0 is:( move ua + ul , 3 ; move 6 , 2 )  decode:( move ua + ul , 3 ; move ua , 2 ) 
[6567] c:3 is:( move 0 - ua , 2 ; move 8 , ul )  decode:( move 0 - ua , 2 ; move 8 , ul ) 
[6568] c:0 is:( move ua + 4 , ul ; move 4 , 3 )  decode:( move ua + 3 , ul ; move 4 , 3 ) 
[6569] c:3 is:( move 3 , 3 ; move ul - ua , 4 )  decode:( move 3 , 3 ; move ul - ua , 4 ) 
[6570] c:0 is:( move ua - 2 , 4 ; move ua , 5 )  decode:( move 4 , 4 ; move ua , 5 ) 
[6571] c:3 is:( move ua + 4 , ul ; move 3 , 4 )  decode:( move ua + 4 , ul ; move 3 , 4 ) 
[6572] c:0 is:( move ua , 6 ; move ua , 2 - 3 )  decode:( move 7 , 5 ; move ua , ul ) 
[6573] c:0 is:( move ua , 8 ; move ua , 0 - 3 )  decode:( move ua , ua * ua ; move ua , 3 ) 
[6574] c:0 is:( move ua , 3 ; move ua , 0 - 8 )  decode:( move ua , 3 ; move ua , 3 / 2 ) 
[6575] c:3 is:( move 5 , ul ; move ua , 2 - 3 )  decode:( move 5 , ul ; move ua , 2 - 3 ) 
[6576] c:0 is:( move ua , 2 ; move ua , 3 / 4 )  decode:( move ua , 2 ; move ua , 4 / 4 ) 
[6577] c:3 is:( move ua + ul , 5 ; move 4 , 2 )  decode:( move ua + ul , 5 ; move 4 , 2 ) 
[6578] c:3 is:( move 5 , 3 ; move ul - ua , 2 )  decode:( move 5 , 3 ; move ul - ua , 2 ) 
[6579] c:0 is:( move 2 , 4 ; move ul - ua , 4 )  decode:( move 2 , 4 ; move ua - ul , 4 ) 
[6580] c:3 is:( move ua - ul , 5 ; move 3 , 2 )  decode:( move ua - ul , 5 ; move 3 , 2 ) 
[6581] c:3 is:( move ua , 6 ; move ua + 2 , 4 )  decode:( move ua , 6 ; move ua + 2 , 4 ) 
[6582] c:0 is:( move ua , 2 ; move ua , 4 / 3 )  decode:( move ua , ul / 4 ; move ua , 5 ) 
[6583] c:0 is:( move ua , ul ; move 2 , 4 * 3 )  decode:( move ua , ul ; move 2 , 3 * 4 ) 
[6584] c:0 is:( move ua - ul , 0 ; move 5 , 5 )  decode:( move 5 , 0 ; move 5 , 5 ) 
[6585] c:3 is:( move ua - ul , 4 ; move 4 , 2 )  decode:( move ua - ul , 4 ; move 4 , 2 ) 
[6586] c:0 is:( move 3 - ua , 3 ; move 4 , ul )  decode:( move 3 , 0 ; move 4 , ua / 3 ) 
[6587] c:0 is:( move ua - ul , 4 ; move 2 , 4 )  decode:( move 5 , 4 ; move 2 , 4 ) 
[6588] c:0 is:( move 0 - ua , 6 ; move ua , 5 )  decode:( move ua , 9 ; move ua , ua * ua ) 
[6589] c:3 is:( move 3 , 2 ; move ul - ua , 5 )  decode:( move 3 , 2 ; move ul - ua , 5 ) 
[6590] c:3 is:( move ua , 2 ; move 3 , ua / 4 )  decode:( move ua , 2 ; move 3 , ua / 4 ) 
[6591] c:3 is:( move 2 , 0 ; move ul - ua , 8 )  decode:( move 2 , 0 ; move ul - ua , 8 ) 
[6592] c:3 is:( move ua + ul , 0 ; move 9 , 2 )  decode:( move ua + ul , 0 ; move 9 , 2 ) 
[6593] c:3 is:( move 2 , ul ; move ua , 2 / 4 )  decode:( move 2 , ul ; move ua , 2 / 4 ) 
[6594] c:0 is:( move ua , 4 ; move 3 - ua , 4 )  decode:( move ua , 4 ; move 3 , ul + 4 ) 
[6595] c:3 is:( move ua , ul / 4 ; move 2 , 2 )  decode:( move ua , ul / 4 ; move 2 , 2 ) 
[6596] c:3 is:( move ua + 3 , ul ; move 3 , 5 )  decode:( move ua + 3 , ul ; move 3 , 5 ) 
[6597] c:3 is:( move ua , 9 ; move ua , 0 - 2 )  decode:( move ua , 9 ; move ua , 0 - 2 ) 
[6598] c:3 is:( move 2 , 2 ; move ua + ul , 7 )  decode:( move 2 , 2 ; move ua + ul , 7 ) 
[6599] c:0 is:( move ua , 0 ; move ua , 7 * 3 )  decode:( move 7 , 2 ; move ua , 0 - 4 ) 
[6600] c:3 is:( move ua , ua / 3 ; move 4 , 2 )  decode:( move ua , ua / 3 ; move 4 , 2 ) 
[6601] c:0 is:( move 5 , 5 ; move 0 - ua , ul )  decode:( move 5 , 5 ; move ua , 2 ) 
[6602] c:3 is:( move 0 - ua , 3 ; move 7 , ul )  decode:( move 0 - ua , 3 ; move 7 , ul ) 
[6603] c:0 is:( move 4 , ul ; move 2 , 2 / ua )  decode:( move 4 , ul ; move ua - 4 , ul ) 
[6604] c:0 is:( move 0 - ua , 9 ; move ua , 2 )  decode:( move ua , 0 ; move ua , 2 - 3 ) 
[6605] c:3 is:( move ul - ua , 2 ; move 3 , 5 )  decode:( move ul - ua , 2 ; move 3 , 5 ) 
[6606] c:0 is:( move ua , 2 ; move ua , 3 / 4 )  decode:( move ua , 2 ; move ua , 4 / 4 ) 
[6607] c:0 is:( move 4 + 3 , 3 ; move ul , ul )  decode:( move : , 3 ; move : ; move move move ) 
[6608] c:3 is:( move 3 , 3 ; move ua - ul , 4 )  decode:( move 3 , 3 ; move ua - ul , 4 ) 
[6609] c:3 is:( move ua , 0 - 3 ; move ua , 8 )  decode:( move ua , 0 - 3 ; move ua , 8 ) 
[6610] c:3 is:loop 0 , 4 , move ua - ul , 7 * 3  decode:loop 0 , 4 , move ua - ul , 7 * 3 
[6611] c:0 is:loop 0 , 4 , move ul - ua , 7 / 2  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[6612] c:3 is:( move ua , 0 - 2 ; move ua , 9 )  decode:( move ua , 0 - 2 ; move ua , 9 ) 
[6613] c:3 is:( move 4 , 2 ; move ua + ul , 5 )  decode:( move 4 , 2 ; move ua + ul , 5 ) 
[6614] c:3 is:( move ua + 2 , ul ; move 7 , 2 )  decode:( move ua + 2 , ul ; move 7 , 2 ) 
[6615] c:0 is:( move 2 - ua , 5 ; move ua , 4 )  decode:( move 4 , ua * ua ; move ua , ul ) 
[6616] c:0 is:( move ua + 3 , ul ; move 4 , 4 )  decode:( move 9 , ul ; move 4 , 4 ) 
[6617] c:0 is:( move ua , 2 ; move ua , 0 - 9 )  decode:( move ua , 0 - 2 ; move ua , 9 ) 
[6618] c:3 is:( move ul - ua , 3 ; move 3 , 4 )  decode:( move ul - ua , 3 ; move 3 , 4 ) 
[6619] c:0 is:( move 5 , 2 - 3 ; move ua , ul )  decode:( move ul - ua , 2 ; move ua , ul ) 
[6620] c:3 is:( move 4 , 4 ; move 2 - ua , ul )  decode:( move 4 , 4 ; move 2 - ua , ul ) 
[6621] c:3 is:( move ul , 0 ; move 4 , ua / 4 )  decode:( move ul , 0 ; move 4 , ua / 4 ) 
[6622] c:0 is:( move ua , 3 ; move ua - 3 , 5 )  decode:( move ua , 3 ; move 3 - ua , 5 ) 
[6623] c:0 is:( move 8 , 2 ; move 0 - ua , ul )  decode:( move 8 , 2 ; move ua , 2 ) 
[6624] c:3 is:( move ul - ua , 2 ; move 4 , 4 )  decode:( move ul - ua , 2 ; move 4 , 4 ) 
[6625] c:0 is:( move 4 , 0 ; move ul - ua , 6 )  decode:( move ul - ua , 3 ; move 5 , 6 ) 
[6626] c:3 is:( move ua , 3 / 2 ; move ua , 4 )  decode:( move ua , 3 / 2 ; move ua , 4 ) 
[6627] c:3 is:( move ua , 4 / ua ; move 3 , 2 )  decode:( move ua , 4 / ua ; move 3 , 2 ) 
[6628] c:3 is:( move 5 , 0 ; move ul - ua , 5 )  decode:( move 5 , 0 ; move ul - ua , 5 ) 
[6629] c:3 is:( move ul - ua , 4 ; move 4 , 2 )  decode:( move ul - ua , 4 ; move 4 , 2 ) 
[6630] c:0 is:( move ua , 4 ; move 0 - ua , 7 )  decode:( move ua , 4 ; move ua , 5 * 2 ) 
[6631] c:3 is:( move 4 - ua , 3 ; move ua , 4 )  decode:( move 4 - ua , 3 ; move ua , 4 ) 
[6632] c:3 is:( move ua + ul , 0 ; move 7 , 4 )  decode:( move ua + ul , 0 ; move 7 , 4 ) 
[6633] c:3 is:( move 7 , 2 ; move ua + ul , 2 )  decode:( move 7 , 2 ; move ua + ul , 2 ) 
[6634] c:3 is:( move 4 , 2 - 3 ; move ul , ul )  decode:( move 4 , 2 - 3 ; move ul , ul ) 
[6635] c:0 is:( move 4 , 4 ; move ul - ua , 2 )  decode:( move 4 , 4 ; move 5 , 5 ) 
[6636] c:3 is:( move 2 - ua , 4 ; move ua , 5 )  decode:( move 2 - ua , 4 ; move ua , 5 ) 
[6637] c:0 is:( move 2 , 0 ; move ua , ul / 6 )  decode:move 3 * 3 , 0 / ; move 4 , 3 ) 
[6638] c:0 is:( move 4 , ul ; move ua + 3 , 4 )  decode:( move 4 , ul ; move 3 + 3 , 4 ) 
[6639] c:3 is:( move 3 , 3 / 2 ; move ua , ul )  decode:( move 3 , 3 / 2 ; move ua , ul ) 
[6640] c:0 is:( move ua , 7 ; move ua , 0 - 4 )  decode:( move ua , 0 ; move ua , 4 ) 
[6641] c:3 is:( move ua , ul ; move 2 , 2 / 4 )  decode:( move ua , ul ; move 2 , 2 / 4 ) 
[6642] c:0 is:loop 0 , 7 , move ul - 2 , ul / 3  decode:loop 0 , 4 , move 0 - 2 , 5 
[6643] c:3 is:( move ua + 2 , 8 ; move ua , 2 )  decode:( move ua + 2 , 8 ; move ua , 2 ) 
[6644] c:0 is:( move 3 - ua , 2 ; move ua , 6 )  decode:( move 3 - ua , 2 ; move ua , 3 ) 
[6645] c:3 is:( move ua , 3 ; move ua , 5 * 2 )  decode:( move ua , 3 ; move ua , 5 * 2 ) 
[6646] c:0 is:( move ua - ul , 3 ; move 5 , 2 )  decode:( move 5 , ua / 2 ; move 5 , 2 ) 
[6647] c:0 is:( move ua , 4 ; move 2 - ua , 5 )  decode:( move ua , 4 ; move 5 , ua * ua ) 
[6648] c:0 is:( move ua , 2 ; move ua , 3 * 5 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[6649] c:0 is:( move ua / 2 , ul ; move 4 , 2 )  decode:( move 3 , ul ; move 4 , 2 ) 
[6650] c:0 is:( move 4 , 6 ; move 0 - ua , ul )  decode:( move 4 , 6 ; move ua , ua / 3 ) 
[6651] c:3 is:( move 2 - ua , ul ; move 4 , 4 )  decode:( move 2 - ua , ul ; move 4 , 4 ) 
[6652] c:0 is:( move 0 - 4 , 6 ; move ua , ul )  decode:( move 4 , 9 ; move ua , 0 - 2 ) 
[6653] c:3 is:( move 2 - ua , 5 ; move 3 , ul )  decode:( move 2 - ua , 5 ; move 3 , ul ) 
[6654] c:0 is:( move ua , 8 ; move ua + 2 , 2 )  decode:( move ua , 8 ; move 9 , 2 ) 
[6655] c:0 is:( move ua , 2 ; move 4 , 3 / ua )  decode:( move ua , 2 ; move 4 , 3 / 2 ) 
[6656] c:3 is:( move ua , 2 ; move 4 , ua / 3 )  decode:( move ua , 2 ; move 4 , ua / 3 ) 
[6657] c:0 is:( move 4 , 2 ; move ua , ua / 3 )  decode:( move 3 , 2 ; move ua , ua / 3 ) 
[6658] c:3 is:( move ua - ul , 2 ; move 3 , 5 )  decode:( move ua - ul , 2 ; move 3 , 5 ) 
[6659] c:3 is:( move ua , 2 / ua ; move 5 , 2 )  decode:( move ua , 2 / ua ; move 5 , 2 ) 
[6660] c:0 is:loop 0 , 3 , move ua + ul , 3 * 9  decode:loop 0 , 3 , move 4 + 3 , ua * 9 
[6661] c:3 is:( move ua , 4 * 3 ; move ua , 3 )  decode:( move ua , 4 * 3 ; move ua , 3 ) 
[6662] c:0 is:( move ua , 6 ; move ua - 3 , 2 )  decode:( move ua , 6 ; move 3 - ua , 2 ) 
[6663] c:3 is:( move 4 , 2 ; move ul - ua , 4 )  decode:( move 4 , 2 ; move ul - ua , 4 ) 
[6664] c:3 is:( move ua , 3 / 2 ; move 3 , ul )  decode:( move ua , 3 / 2 ; move 3 , ul ) 
[6665] c:3 is:( move ul , 2 ; move ua , 2 / 4 )  decode:( move ul , 2 ; move ua , 2 / 4 ) 
[6666] c:0 is:( move ua , 2 / 3 ; move 3 , ul )  decode:( move 3 , ua / 4 ; move 3 , ul ) 
[6667] c:3 is:( move ul - ua , 0 ; move 4 , 6 )  decode:( move ul - ua , 0 ; move 4 , 6 ) 
[6668] c:3 is:( move 2 - ua , 4 ; move 4 , ul )  decode:( move 2 - ua , 4 ; move 4 , ul ) 
[6669] c:3 is:( move ua + 3 , ul ; move 6 , 2 )  decode:( move ua + 3 , ul ; move 6 , 2 ) 
[6670] c:0 is:( move 0 - 3 , ul ; move ua , 7 )  decode:( move 3 , 4 ; move ua , 4 ) 
[6671] c:3 is:( move ua , ua / 4 ; move 3 , 2 )  decode:( move ua , ua / 4 ; move 3 , 2 ) 
[6672] c:3 is:( move ua , 2 * 5 ; move 2 , ul )  decode:( move ua , 2 * 5 ; move 2 , ul ) 
[6673] c:3 is:( move 2 , ul ; move ua , 4 * 3 )  decode:( move 2 , ul ; move ua , 4 * 3 ) 
[6674] c:0 is:( move ul , 7 ; move ua + 2 , 2 )  decode:( move ul , 9 ; move 8 , 2 ) 
[6675] c:0 is:( move ua + ul , 5 ; move 3 , 4 )  decode:( move 8 , 5 ; move 3 , 4 ) 
[6676] c:3 is:( move 3 , 2 ; move ul - ua , 6 )  decode:( move 3 , 2 ; move ul - ua , 6 ) 
[6677] c:0 is:( move 8 , 3 ; move 0 - ua , ul )  decode:( move ua + 2 , 3 ; move 8 , ul ) 
[6678] c:0 is:( move ua , 4 ; move ua , 2 * 5 )  decode:( move ua , 4 ; move ua , 5 * 2 ) 
[6679] c:0 is:( move 8 , 2 ; move ua + ul , 2 )  decode:( move ua + 2 , 2 ; move 7 , 2 ) 
[6680] c:3 is:( move 4 , 5 ; move ua - ul , 2 )  decode:( move 4 , 5 ; move ua - ul , 2 ) 
[6681] c:0 is:( move ua , 4 ; move 4 , 2 / ua )  decode:( move ul - ua , 4 ; move ua , 6 ) 
[6682] c:3 is:( move 0 - ua , 3 ; move 8 , ul )  decode:( move 0 - ua , 3 ; move 8 , ul ) 
[6683] c:0 is:( move ua , 3 ; move 2 - ua , 7 )  decode:( move ua , 3 ; move 5 , 7 ) 
[6684] c:3 is:( move 6 , ul ; move ua + 2 , 4 )  decode:( move 6 , ul ; move ua + 2 , 4 ) 
[6685] c:3 is:( move 4 , 4 + 3 ; move ul , ul )  decode:( move 4 , 4 + 3 ; move ul , ul ) 
[6686] c:3 is:( move ua , 2 * 5 ; move 3 , ul )  decode:( move ua , 2 * 5 ; move 3 , ul ) 
[6687] c:3 is:( move ua + ul , 3 ; move 5 , 4 )  decode:( move ua + ul , 3 ; move 5 , 4 ) 
[6688] c:0 is:loop 0 , 3 , move ul - ua , 9 / 2  decode:loop 0 , 3 , move ul - ua , 0 - 0 4 3 / 
[6689] c:3 is:( move 2 , 4 / 3 ; move ua , ul )  decode:( move 2 , 4 / 3 ; move ua , ul ) 
[6690] c:3 is:( move 4 , 3 ; move ul - ua , 4 )  decode:( move 4 , 3 ; move ul - ua , 4 ) 
[6691] c:3 is:( move 3 , 5 ; move ua + ul , 4 )  decode:( move 3 , 5 ; move ua + ul , 4 ) 
[6692] c:3 is:( move 5 , 2 ; move 4 , ua * ua )  decode:( move 5 , 2 ; move 4 , ua * ua ) 
[6693] c:0 is:( move ul , 3 ; move ua , 4 * 3 )  decode:( move ul , 3 ; move ua , 3 / 2 ) 
[6694] c:0 is:( move ua , 2 / 3 ; move 4 , ul )  decode:( move ua , 3 / 2 ; move 4 , ul ) 
[6695] c:3 is:( move 4 , ua / 4 ; move ua , 2 )  decode:( move 4 , ua / 4 ; move ua , 2 ) 
[6696] c:0 is:( move ua , 2 ; move ua , 5 / 3 )  decode:( move ua , 2 ; move ua , ua * ua ) 
[6697] c:0 is:loop 0 , 4 , move ua - 3 , ua / 8  decode:loop 0 , 4 , move 3 , ua / =  / 4 
[6698] c:3 is:( move ua + 2 , 6 ; move ua , 5 )  decode:( move ua + 2 , 6 ; move ua , 5 ) 
[6699] c:3 is:( move 4 , 2 / ua ; move ua , 4 )  decode:( move 4 , 2 / ua ; move ua , 4 ) 
[6700] c:0 is:( move ua , 2 * 5 ; move ua , 4 )  decode:( move ua , 5 * 2 ; move ua , 4 ) 
[6701] c:0 is:( move ua , 9 ; move 0 - 2 , ul )  decode:( move ua , 9 ; move 2 , 3 - 4 ) 
[6702] c:0 is:( move 4 , ul ; move 3 , 2 / ua )  decode:( move 3 , ul ; move 4 , 2 / ua ) 
[6703] c:0 is:( move 4 , 5 ; move 2 - ua , ul )  decode:( move 4 , 6 ; move 4 , 0 - 4 ) 
[6704] c:0 is:( move 4 , 4 ; move ul - ua , 3 )  decode:( move 4 , 4 ; move 4 , 6 ) 
[6705] c:0 is:( move ua , 4 * 3 ; move ua , 4 )  decode:( move ua , 9 + 3 ; move ua , 4 ) 
[6706] c:0 is:( move ua , 9 ; move ua + 2 , 2 )  decode:( move ua , 9 ; move 9 , 2 ) 
[6707] c:3 is:( move 2 , 6 ; move ua + ul , 4 )  decode:( move 2 , 6 ; move ua + ul , 4 ) 
[6708] c:3 is:( move 4 , ua * ua ; move 3 , 4 )  decode:( move 4 , ua * ua ; move 3 , 4 ) 
[6709] c:3 is:( move ua , 4 * 3 ; move 3 , ul )  decode:( move ua , 4 * 3 ; move 3 , ul ) 
[6710] c:0 is:( move ua , 5 / 3 ; move ua , 2 )  decode:( move ua , 8 ; move ua , 2 ) 
[6711] c:3 is:( move 2 - ua , ul ; move 5 , 4 )  decode:( move 2 - ua , ul ; move 5 , 4 ) 
[6712] c:3 is:( move ul - ua , 2 ; move 4 , 5 )  decode:( move ul - ua , 2 ; move 4 , 5 ) 
[6713] c:0 is:( move 9 , 2 ; move 0 - ua , ul )  decode:( move 9 , 2 ; move ua , 2 ) 
[6714] c:3 is:( move 4 , 3 ; move ul - ua , 4 )  decode:( move 4 , 3 ; move ul - ua , 4 ) 
[6715] c:3 is:( move ua , 0 - 9 ; move 2 , ul )  decode:( move ua , 0 - 9 ; move 2 , ul ) 
[6716] c:2 is:( move 6 , 2 / ua ; move ua , 2 )  decode:( move ua , 2 / ua ; move ua , 2 ) 
[6717] c:0 is:( move 5 , 2 ; move ua , ua / 3 )  decode:( move ua , 2 ; move 6 , ua / 3 ) 
[6718] c:0 is:( move 4 , 2 ; move ua , ul / 3 )  decode:( move 3 , 2 ; move ua , ul / 3 ) 
[6719] c:3 is:( move 4 , 4 ; move ua + ul , 4 )  decode:( move 4 , 4 ; move ua + ul , 4 ) 
[6720] c:3 is:( move 5 , 3 ; move 3 , ua * ua )  decode:( move 5 , 3 ; move 3 , ua * ua ) 
[6721] c:0 is:( move ua , ul ; move 3 , 4 * 3 )  decode:( move ua , ul ; move 3 , 3 * 4 ) 
[6722] c:3 is:( move 6 , 4 ; move ua + ul , 2 )  decode:( move 6 , 4 ; move ua + ul , 2 ) 
[6723] c:0 is:( move ua , 2 ; move 3 , ua / 5 )  decode:( move ua , 2 ; move 3 , 5 / 4 ) 
[6724] c:3 is:( move 3 , 4 ; move ua , ua / 3 )  decode:( move 3 , 4 ; move ua , ua / 3 ) 
[6725] c:3 is:( move 4 , 4 / ua ; move ua , 2 )  decode:( move 4 , 4 / ua ; move ua , 2 ) 
[6726] c:3 is:( move 3 , 5 ; move 3 , ua * ua )  decode:( move 3 , 5 ; move 3 , ua * ua ) 
[6727] c:3 is:( move 3 , 7 ; move ua + ul , 2 )  decode:( move 3 , 7 ; move ua + ul , 2 ) 
[6728] c:0 is:( move 5 , ul ; move 4 - ua , 2 )  decode:( move 5 , ul ; move 3 , 5 ) 
[6729] c:0 is:( move ua / 2 , 0 ; move ua , 8 )  decode:( move 3 , 0 ; move ua , 8 ) 
[6730] c:2 is:( move 3 , 6 ; move ua - ul , 2 )  decode:( move 3 , 6 ; move ul - ua , 2 ) 
[6731] c:3 is:( move ua - ul , 0 ; move 7 , 4 )  decode:( move ua - ul , 0 ; move 7 , 4 ) 
[6732] c:3 is:( move ua , 0 - 3 ; move ua , 9 )  decode:( move ua , 0 - 3 ; move ua , 9 ) 
[6733] c:0 is:( move 3 , 2 ; move ua , ul / 4 )  decode:( move 3 , 2 ; move ua , ul / 5 ) 
[6734] c:0 is:( move 2 - ua , ul ; move 4 , 5 )  decode:( move 4 , 9 ; move 4 , 0 - 4 ) 
[6735] c:3 is:( move 4 , 3 ; move ua , ua / 3 )  decode:( move 4 , 3 ; move ua , ua / 3 ) 
[6736] c:0 is:( move ul - ua , 4 ; move 5 , 2 )  decode:( move 5 , ul ; move 5 , 5 ) 
[6737] c:3 is:( move 4 , 6 ; move ua + ul , 2 )  decode:( move 4 , 6 ; move ua + ul , 2 ) 
[6738] c:3 is:( move 5 , 2 ; move ul - ua , 4 )  decode:( move 5 , 2 ; move ul - ua , 4 ) 
[6739] c:3 is:( move 4 , 2 ; move ua , 4 / ua )  decode:( move 4 , 2 ; move ua , 4 / ua ) 
[6740] c:3 is:( move ua , 3 ; move 3 , ua / 4 )  decode:( move ua , 3 ; move 3 , ua / 4 ) 
[6741] c:3 is:( move 4 , 2 ; move ua , ua / 4 )  decode:( move 4 , 2 ; move ua , ua / 4 ) 
[6742] c:2 is:( move 7 , 3 ; move ua + ul , 2 )  decode:( move ua + ul , 3 ; move 7 , 2 ) 
[6743] c:3 is:( move ua , 3 ; move ua , 5 * 3 )  decode:( move ua , 3 ; move ua , 5 * 3 ) 
[6744] c:0 is:( move ua , 5 / 2 ; move ua , 3 )  decode:( move ua , 2 / 5 ; move ua , 3 ) 
[6745] c:3 is:( move ua + ul , 5 ; move 5 , 2 )  decode:( move ua + ul , 5 ; move 5 , 2 ) 
[6746] c:3 is:( move 2 , ul ; move ua , 2 / 5 )  decode:( move 2 , ul ; move ua , 2 / 5 ) 
[6747] c:0 is:( move 3 , ul ; move ua - 3 , 5 )  decode:( move 3 , ul ; move 3 - ua , 5 ) 
[6748] c:3 is:( move ua , 4 / 3 ; move ua , 3 )  decode:( move ua , 4 / 3 ; move ua , 3 ) 
[6749] c:0 is:( move ua , 4 / 3 ; move 2 , ul )  decode:( move 2 , 0 ; move ua , ul ) 
[6750] c:0 is:( move ua + 2 , 8 ; move ua , 3 )  decode:( move ua + 2 , ua + v0 , 3 ) 
[6751] c:3 is:( move 3 , ul ; move ua , 2 / 4 )  decode:( move 3 , ul ; move ua , 2 / 4 ) 
[6752] c:2 is:( move 4 , 3 ; move ua + ul , 5 )  decode:( move 4 , 3 ; move ua + ul , 5 ) 
[6753] c:0 is:( move 3 / 2 , ul ; move ua , 4 )  decode:( move 2 , ul ; move ua , 4 ) 
[6754] c:3 is:( move ul - ua , 3 ; move 3 , 5 )  decode:( move ul - ua , 3 ; move 3 , 5 ) 
[6755] c:0 is:( move 3 , 5 ; move ua , 2 / ua )  decode:( move 3 , 5 ; move ua , ul / ua ) 
[6756] c:3 is:( move ua , ua / 4 ; move 2 , 4 )  decode:( move ua , ua / 4 ; move 2 , 4 ) 
[6757] c:0 is:( move ua , 2 / 4 ; move ua , 4 )  decode:( move ua , 9 / 4 ; move ua , 4 ) 
[6758] c:0 is:( move ua + ul , 3 ; move 7 , 2 )  decode:( move 7 , 3 ; move ua + ul , 2 ) 
[6759] c:3 is:( move ua + 2 , 3 ; move ua , 8 )  decode:( move ua + 2 , 3 ; move ua , 8 ) 
[6760] c:3 is:( move ua , 3 / 2 ; move 4 , ul )  decode:( move ua , 3 / 2 ; move 4 , ul ) 
[6761] c:0 is:( move 3 , 4 ; move ul - ua , 4 )  decode:( move 3 , 4 ; move ua - ul , 4 ) 
[6762] c:0 is:( move 2 , 9 ; move 0 - ua , ul )  decode:( move 2 , 9 ; move ua , 4 ) 
[6763] c:3 is:( move 3 , ul ; move ua , 4 * 3 )  decode:( move 3 , ul ; move ua , 4 * 3 ) 
[6764] c:3 is:( move ul - ua , 3 ; move 4 , 4 )  decode:( move ul - ua , 3 ; move 4 , 4 ) 
[6765] c:3 is:( move 3 , 2 / 4 ; move ua , ul )  decode:( move 3 , 2 / 4 ; move ua , ul ) 
[6766] c:0 is:( move 4 , ul ; move 3 - ua , 4 )  decode:( move 4 , ul ; move 3 , ul ) 
[6767] c:0 is:( move ua , 3 / 2 ; move ua , 5 )  decode:( move ua , 5 / 2 ; move ua , 5 ) 
[6768] c:0 is:( move 5 , ul ; move 2 - ua , 4 )  decode:( move 5 , ul ; move 4 , ul / 4 ) 
[6769] c:0 is:( move 4 - ua , 3 ; move ua , 5 )  decode:( move 3 , 0 ; move ua , 5 ) 
[6770] c:3 is:( move 3 , 3 ; move ua , 4 / ua )  decode:( move 3 , 3 ; move ua , 4 / ua ) 
[6771] c:0 is:( move 4 , 7 ; move 0 - ua , ul )  decode:( move 4 , 7 ; move ua , 4 ) 
[6772] c:3 is:( move ua , ul / 4 ; move 3 , 2 )  decode:( move ua , ul / 4 ; move 3 , 2 ) 
[6773] c:3 is:( move ua , 4 ; move ua , 0 - 8 )  decode:( move ua , 4 ; move ua , 0 - 8 ) 
[6774] c:0 is:( move 2 , 4 / ua ; move ua , 4 )  decode:( move 2 , ua / 4 ; move ua , 4 ) 
[6775] c:3 is:( move ua , 2 / ua ; move 3 , 5 )  decode:( move ua , 2 / ua ; move 3 , 5 ) 
[6776] c:0 is:( move 2 , ul ; move 2 - ua , 7 )  decode:( move 3 , ul ; move 4 , 4 ) 
[6777] c:3 is:( move 3 , 3 ; move ua - ul , 5 )  decode:( move 3 , 3 ; move ua - ul , 5 ) 
[6778] c:0 is:( move ua , 3 ; move ua , 4 / 3 )  decode:( move ua , 3 ; move 5 , 4 / 3 ) 
[6779] c:0 is:( move ua , ua / 4 ; move 4 , 2 )  decode:( move ua , 3 / 2 ; move 4 , 2 ) 
[6780] c:0 is:( move ul , 3 ; move ua , 2 / 4 )  decode:( move ul , 0 ; move ua , 2 / 4 ) 
[6781] c:1 is:( move ua , 3 ; move ua + 2 , 8 )  decode:( move ua , 3 ; move ua + 2 , 8 ) 
[6782] c:0 is:loop 0 , 4 , move ul - ua , 7 / 3  decode:loop 0 , 4 , move ul - ua , 0 - 4 
[6783] c:3 is:( move 5 , 3 ; move 3 - ua , ul )  decode:( move 5 , 3 ; move 3 - ua , ul ) 
[6784] c:2 is:( move ua + ul , 0 ; move 8 , 4 )  decode:( move ua , 0 ; move 8 , 4 ) 
[6785] c:3 is:( move 4 , 5 ; move ul - ua , 2 )  decode:( move 4 , 5 ; move ul - ua , 2 ) 
[6786] c:3 is:( move 2 - ua , 4 ; move 5 , ul )  decode:( move 2 - ua , 4 ; move 5 , ul ) 
[6787] c:0 is:( move ua + ul , 2 / move 4 , 2 )  decode:( move ua , 2 - move 4 , 2 / 2 ) 
[6788] c:0 is:( move ua , 3 ; move 4 - ua , 5 )  decode:( move ua , 3 ; move ua - 4 , 5 ) 
[6789] c:3 is:( move 3 , ul / 4 ; move ua , 2 )  decode:( move 3 , ul / 4 ; move ua , 2 ) 
[6790] c:3 is:( move 4 , 0 ; move ua + ul , 8 )  decode:( move 4 , 0 ; move ua + ul , 8 ) 
[6791] c:3 is:( move 3 , ua / 2 ; move ua , 5 )  decode:( move 3 , ua / 2 ; move ua , 5 ) 
[6792] c:3 is:( move 6 , 2 ; move ua + ul , 4 )  decode:( move 6 , 2 ; move ua + ul , 4 ) 
[6793] c:0 is:loop 0 , 4 , move ua + ul , 9 * 3  decode:0 loop 0 , 4 , move ua , 3 * 3 
[6794] c:0 is:( move ua , 3 ; move ua , 5 / 2 )  decode:( move ua , 3 ; move ua , 5 * 2 ) 
[6795] c:0 is:( move ua + ul , 6 ; move 4 , 2 )  decode:( move 4 + 3 , 6 ; move 4 , 2 ) 
[6796] c:0 is:( move 9 , 0 ; move 2 - ua , ul )  decode:( move 9 , 0 ; move ua - 2 , ul ) 
[6797] c:3 is:( move ua + ul , 4 ; move 3 , 5 )  decode:( move ua + ul , 4 ; move 3 , 5 ) 
[6798] c:3 is:( move 2 , 3 ; move ua + ul , 7 )  decode:( move 2 , 3 ; move ua + ul , 7 ) 
[6799] c:0 is:( move ua , 3 / 4 ; move 2 , ul )  decode:( move ua , 4 / 3 ; move 2 , ul ) 
[6800] c:3 is:( move 3 , 4 ; move ua , ua / 3 )  decode:( move 3 , 4 ; move ua , ua / 3 ) 
[6801] c:0 is:( move ua - 2 , ul ; move 5 , 4 )  decode:( move 4 , ul ; move 5 , 4 ) 
[6802] c:0 is:( move ua , 0 - 9 ; move ua , 3 )  decode:loop 0 , 2 , move ua , 0 - 3 
[6803] c:3 is:( move 2 , 4 ; move ua , 4 / ua )  decode:( move 2 , 4 ; move ua , 4 / ua ) 
[6804] c:0 is:( move 4 , 3 ; move 4 - ua , ul )  decode:( move 4 , 3 ; move 3 , 0 - 4 ) 
[6805] c:3 is:( move 5 , 4 ; move 2 - ua , ul )  decode:( move 5 , 4 ; move 2 - ua , ul ) 
[6806] c:0 is:( move ua , 2 ; move 4 , 4 / ua )  decode:( move ua , 2 ; move 4 , ul / 4 ) 
[6807] c:3 is:( move ua + 3 , 6 ; move ua , 4 )  decode:( move ua + 3 , 6 ; move ua , 4 ) 
[6808] c:0 is:( move ua , 5 ; move 3 , 2 / ua )  decode:( move 3 , ua / 3 ; move ua , ul ) 
[6809] c:0 is:( move ua , ul ; move 3 , 2 / 4 )  decode:( move ua , ul ; move 3 , 2 / 7 ) 
[6810] c:0 is:( move 2 , 5 ; move ul - ua , 4 )  decode:( move 2 , 5 ; move ua - ul , 4 ) 
[6811] c:0 is:( move 3 - ua , 4 ; move 4 , ul )  decode:( move 3 , 2 ; move 4 , 0 - 4 ) 
[6812] c:0 is:( move 4 , 3 / 2 ; move ua , ul )  decode:( move 4 , 3 * 2 ; move ua , ul ) 
[6813] c:3 is:( move ul - ua , 0 ; move 3 , 8 )  decode:( move ul - ua , 0 ; move 3 , 8 ) 
[6814] c:3 is:( move 5 , 4 ; move ul - ua , 2 )  decode:( move 5 , 4 ; move ul - ua , 2 ) 
[6815] c:0 is:( move ua - 3 , 0 ; move 8 , ul )  decode:( move 3 , 0 ; move 8 , ul ) 
[6816] c:3 is:( move 4 , 2 ; move ul - ua , 5 )  decode:( move 4 , 2 ; move ul - ua , 5 ) 
[6817] c:0 is:( move ua , 8 ; move 3 + ua , 2 )  decode:( move ua , 8 ; move 9 , 2 ) 
[6818] c:3 is:( move ua , 4 * 4 ; move 2 , ul )  decode:( move ua , 4 * 4 ; move 2 , ul ) 
[6819] c:3 is:( move 2 , ua / 4 ; move 3 , ul )  decode:( move 2 , ua / 4 ; move 3 , ul ) 
[6820] c:0 is:( move 3 , ua / 4 ; move 2 , ul )  decode:( move 2 , ua / 4 ; move 3 , ul ) 
[6821] c:0 is:( move ul - ua , 5 ; move 4 , 2 )  decode:( move 5 , 5 ; move 4 , 2 ) 
[6822] c:3 is:( move ua + 4 , ul ; move 4 , 4 )  decode:( move ua + 4 , ul ; move 4 , 4 ) 
[6823] c:3 is:( move ua , 4 * 4 ; move 2 , ul )  decode:( move ua , 4 * 4 ; move 2 , ul ) 
[6824] c:0 is:( move ua - 2 , 2 ; move ua , 8 )  decode:( move 4 , 2 ; move ua , 8 ) 
[6825] c:2 is:( move 2 , ua / 3 ; move ua , 5 )  decode:( move 2 , 4 ; move ua , 5 ) 
[6826] c:3 is:( move 2 - ua , 2 ; move ua , 8 )  decode:( move 2 - ua , 2 ; move ua , 8 ) 
[6827] c:0 is:( move ua , 3 ; move ua , 0 - 9 )  decode:( move ua , 3 ; move ua , 9 ) 
[6828] c:0 is:( move ua , 2 ; move 3 , ul / 4 )  decode:( move 3 , 2 ; move ua , ul / 4 ) 
[6829] c:3 is:( move ul - ua , 6 ; move 3 , 2 )  decode:( move ul - ua , 6 ; move 3 , 2 ) 
[6830] c:0 is:( move 5 / 2 , 2 ; move ua , ul )  decode:( move 3 , 2 ; move ua , ul ) 
[6831] c:0 is:( move 4 , 4 ; move 3 - ua , ul )  decode:( move 4 , 4 ; move 3 , 4 ) 
[6832] c:3 is:( move 9 , 0 ; move ua - ul , 2 )  decode:( move 9 , 0 ; move ua - ul , 2 ) 
[6833] c:3 is:( move ua + 4 , ul ; move 3 , 5 )  decode:( move ua + 4 , ul ; move 3 , 5 ) 
[6834] c:3 is:( move 3 , 3 * 4 ; move ua , ul )  decode:( move 3 , 3 * 4 ; move ua , ul ) 
[6835] c:3 is:( move ul - ua , 0 ; move 4 , 7 )  decode:( move ul - ua , 0 ; move 4 , 7 ) 
[6836] c:3 is:( move ua , 9 + 2 ; move ua , 2 )  decode:( move ua , 9 + 2 ; move ua , 2 ) 
[6837] c:3 is:( move 4 , 2 / 3 ; move ua , ul )  decode:( move 4 , 2 / 3 ; move ua , ul ) 
[6838] c:3 is:( move 2 , 7 ; move ua - ul , 2 )  decode:( move 2 , 7 ; move ua - ul , 2 ) 
[6839] c:0 is:( move 0 - 8 , 3 ; move ua , ul )  decode:( move ua + 2 , 6 ; move ua , ul ) 
[6840] c:0 is:( move 8 , ul ; move ua + 2 , 2 )  decode:( move 8 , ul ; move 8 , 2 ) 
[6841] c:0 is:( move ua , 4 * 4 ; move ul , 2 )  decode:( move ul , 4 ; move ua , 0 - 5 ) 
[6842] c:0 is:( move 2 , 4 ; move ua + ul , 6 )  decode:( move 3 , 4 ; move ua , 6 ) 
[6843] c:0 is:( move ua , ul ; move 2 , 4 / 3 )  decode:( move ua , ul ; move 2 , 3 / 2 ) 
[6844] c:0 is:( move ua + 3 , ul ; move 7 , 2 )  decode:( move 7 , ul ; move 7 , 2 ) 
[6845] c:3 is:( move ua , 0 ; move 6 , ua / 4 )  decode:( move ua , 0 ; move 6 , ua / 4 ) 
[6846] c:0 is:( move ua , 2 * 7 ; move ua , 3 )  decode:( move ua , 2 / 3 ; move ua , 3 ) 
[6847] c:0 is:( move ua + ul , 7 ; move 4 , 2 )  decode:( move ua + ul , 4 + move 4 , 2 ) 
[6848] c:0 is:( move 8 , 2 ; move 2 , ua * ua )  decode:( move 8 , 2 ; move 4 - ua , 5 ) 
[6849] c:0 is:( move 6 , 2 ; move ua - ul , 4 )  decode:( move 6 , 2 ; move ul - ua , ul ) 
[6850] c:0 is:( move 5 , 0 ; move ua - ul , 7 )  decode:( move 5 , 0 ; move 5 , 7 ) 
[6851] c:3 is:( move 2 , 4 / ua ; move ua , 5 )  decode:( move 2 , 4 / ua ; move ua , 5 ) 
[6852] c:0 is:loop 0 , 4 , move ua - 9 , ua / 3  decode:loop 0 , 3 , move 0 - 3 , ua / 3 
[6853] c:3 is:( move ua , 2 - 3 ; move ua , 8 )  decode:( move ua , 2 - 3 ; move ua , 8 ) 
[6854] c:0 is:( move 6 , 4 ; move ul - ua , 2 )  decode:( move ul - ua , ul ; move 5 , 2 ) 
[6855] c:3 is:( move ua , 4 / 3 ; move 3 , ul )  decode:( move ua , 4 / 3 ; move 3 , ul ) 
[6856] c:3 is:( move 3 , ul ; move ua , 4 / 3 )  decode:( move 3 , ul ; move ua , 4 / 3 ) 
[6857] c:3 is:( move 3 , 2 ; move ua + ul , 8 )  decode:( move 3 , 2 ; move ua + ul , 8 ) 
[6858] c:3 is:( move 0 - ua , 3 ; move 9 , ul )  decode:( move 0 - ua , 3 ; move 9 , ul ) 
[6859] c:3 is:( move ul - ua , 4 ; move 4 , 4 )  decode:( move ul - ua , 4 ; move 4 , 4 ) 
[6860] c:3 is:( move ua , 3 ; move 4 , ua / 4 )  decode:( move ua , 3 ; move 4 , ua / 4 ) 
[6861] c:3 is:( move ua + ul , 4 ; move 4 , 5 )  decode:( move ua + ul , 4 ; move 4 , 5 ) 
[6862] c:0 is:( move ua , 4 ; move 3 , ua / 4 )  decode:( move ua , 4 ; move 3 , 3 / 2 ) 
[6863] c:2 is:( move ua , 2 / 6 ; move ua , 3 )  decode:( move ua , 2 / 3 ; move ua , 3 ) 
[6864] c:3 is:( move ua , 4 / ua ; move 3 , 4 )  decode:( move ua , 4 / ua ; move 3 , 4 ) 
[6865] c:3 is:( move 3 , 5 ; move ua - ul , 4 )  decode:( move 3 , 5 ; move ua - ul , 4 ) 
[6866] c:1 is:( move ul , 3 ; move ua , 4 / 3 )  decode:( move ul , 3 ; move ua , 4 / 3 ) 
[6867] c:3 is:( move 5 , ua / 3 ; move ua , 3 )  decode:( move 5 , ua / 3 ; move ua , 3 ) 
[6868] c:3 is:( move ul , 2 / 6 ; move ua , 2 )  decode:( move ul , 2 / 6 ; move ua , 2 ) 
[6869] c:3 is:( move 4 , 4 ; move ua , ua / 3 )  decode:( move 4 , 4 ; move ua , ua / 3 ) 
[6870] c:0 is:( move ua - 2 , 9 ; move ua , 2 )  decode:( move 4 , 9 ; move ul - ua , 2 ) 
[6871] c:0 is:( move ul , 3 / 2 ; move ua , 5 )  decode:( move ul , 0 - 4 ; move ua , 5 ) 
[6872] c:3 is:( move 2 , 9 ; move ua + ul , 2 )  decode:( move 2 , 9 ; move ua + ul , 2 ) 
[6873] c:0 is:( move 3 , ul / ua ; move 5 , 2 )  decode:( move 4 , ul / ua ; move 5 , 2 ) 
[6874] c:3 is:( move 4 , 2 ; move ul - ua , 6 )  decode:( move 4 , 2 ; move ul - ua , 6 ) 
[6875] c:3 is:( move ua , 0 - 9 ; move 3 , ul )  decode:( move ua , 0 - 9 ; move 3 , ul ) 
[6876] c:1 is:( move ua , 9 + 2 ; move 2 , ul )  decode:( move 2 , 9 + 2 ; move ua , ul ) 
[6877] c:1 is:( move ul - ua , 3 ; move 4 , 5 )  decode:( move ul - ua , 3 ; move 5 , 5 ) 
[6878] c:0 is:( move 3 , 9 ; move 0 - ua , ul )  decode:( move 3 , 9 ; move ua , ua / 3 ) 
[6879] c:3 is:( move ua , 5 / 4 ; move ua , 2 )  decode:( move ua , 5 / 4 ; move ua , 2 ) 
[6880] c:3 is:( move 5 , ua * ua ; move 5 , 2 )  decode:( move 5 , ua * ua ; move 5 , 2 ) 
[6881] c:0 is:( move ua , ua / 4 ; move 5 , 2 )  decode:( move ua , 3 / 2 ; move 5 , 2 ) 
[6882] c:3 is:( move 4 , 6 ; move 2 - ua , ul )  decode:( move 4 , 6 ; move 2 - ua , ul ) 
[6883] c:3 is:( move ua + ul , 6 ; move 5 , 2 )  decode:( move ua + ul , 6 ; move 5 , 2 ) 
[6884] c:3 is:( move 2 - ua , ul ; move 5 , 5 )  decode:( move 2 - ua , ul ; move 5 , 5 ) 
[6885] c:3 is:( move ua + ul , 3 ; move 5 , 5 )  decode:( move ua + ul , 3 ; move 5 , 5 ) 
[6886] c:3 is:( move ua , 4 ; move 4 , 3 / ua )  decode:( move ua , 4 ; move 4 , 3 / ua ) 
[6887] c:3 is:( move 2 , 3 ; move ua + ul , 8 )  decode:( move 2 , 3 ; move ua + ul , 8 ) 
[6888] c:0 is:( move 5 , 4 ; move ua - 3 , ul )  decode:( move 5 , 4 ; move 3 , ul ) 
[6889] c:3 is:( move 2 , ul ; move 4 , ua / 4 )  decode:( move 2 , ul ; move 4 , ua / 4 ) 
[6890] c:3 is:( move ul - ua , 6 ; move 4 , 2 )  decode:( move ul - ua , 6 ; move 4 , 2 ) 
[6891] c:3 is:( move ul - ua , 3 ; move 5 , 4 )  decode:( move ul - ua , 3 ; move 5 , 4 ) 
[6892] c:0 is:( move 4 , 3 ; move ul - ua , 5 )  decode:( move 4 , 3 ; move ua - ul , 2 ) 
[6893] c:3 is:( move 4 , ul ; move 4 , 2 / ua )  decode:( move 4 , ul ; move 4 , 2 / ua ) 
[6894] c:0 is:( move ua , 2 / 6 ; move 2 , ul )  decode:( move ua , 2 / 5 ; move 2 , ul ) 
[6895] c:3 is:( move 4 , 2 ; move ua , ul / 4 )  decode:( move 4 , 2 ; move ua , ul / 4 ) 
[6896] c:3 is:( move ua , 9 ; move ua , 0 - 4 )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[6897] c:3 is:( move 4 , ul ; move ua , 5 * 2 )  decode:( move 4 , ul ; move ua , 5 * 2 ) 
[6898] c:3 is:( move ua + ul , 2 ; move 9 , 2 )  decode:( move ua + ul , 2 ; move 9 , 2 ) 
[6899] c:0 is:( move ua , 9 ; move 2 - ua , 2 )  decode:( move ua , 9 ; move 4 , ul ) 
[6900] c:3 is:( move 5 , 0 ; move ua + ul , 8 )  decode:( move 5 , 0 ; move ua + ul , 8 ) 
[6901] c:3 is:( move ua , 0 ; move 7 , ua / 4 )  decode:( move ua , 0 ; move 7 , ua / 4 ) 
[6902] c:0 is:( move 0 - 6 , 6 ; move ua , ul )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[6903] c:0 is:( move 3 , 2 ; move ua - ul , 7 )  decode:( move 3 , 2 ; move ul - ua , 7 ) 
[6904] c:3 is:( move 8 , 3 ; move ua + ul , 2 )  decode:( move 8 , 3 ; move ua + ul , 2 ) 
[6905] c:3 is:( move 4 , 6 ; move ul - ua , 2 )  decode:( move 4 , 6 ; move ul - ua , 2 ) 
[6906] c:0 is:( move 5 , 2 ; move ua , 4 / ua )  decode:( move 5 , 2 ; move ua , 2 / 4 ) 
[6907] c:3 is:( move ul - ua , 2 ; move 5 , 5 )  decode:( move ul - ua , 2 ; move 5 , 5 ) 
[6908] c:0 is:( move 3 , ua / 3 ; move ua , 5 )  decode:( move 3 , 3 / 4 ; move ua , 5 ) 
[6909] c:3 is:( move 4 , ul ; move ul , 3 / 2 )  decode:( move 4 , ul ; move ul , 3 / 2 ) 
[6910] c:3 is:( move 4 , 3 ; move ua , ua / 4 )  decode:( move 4 , 3 ; move ua , ua / 4 ) 
[6911] c:0 is:( move ua - ul , 4 ; move 3 , 5 )  decode:( move ul - ua , 4 ; move 3 , 5 ) 
[6912] c:0 is:( move 4 , 2 ; move ul + ua , 7 )  decode:( move 4 , 2 ; move  7 + 4 , 4 ) 
[6913] c:3 is:( move ua , 4 * 4 ; move ua , 4 )  decode:( move ua , 4 * 4 ; move ua , 4 ) 
[6914] c:0 is:( move ua , 4 * 5 ; move ua , 3 )  decode:( move ua , 4 * 4 ; move ua , 3 ) 
[6915] c:0 is:( move ua , ul ; move 6 + 4 , 3 )  decode:( move ua , ul ; move 4 + 4 , 3 ) 
[6916] c:3 is:( move ua , 2 / 5 ; move ua , 4 )  decode:( move ua , 2 / 5 ; move ua , 4 ) 
[6917] c:3 is:loop 0 , 4 , move ul - ua , 9 * 3  decode:loop 0 , 4 , move ul - ua , 9 * 3 
[6918] c:3 is:( move ua , 6 ; move ua , 3 / 2 )  decode:( move ua , 6 ; move ua , 3 / 2 ) 
[6919] c:3 is:( move 4 , ua * ua ; move 4 , 4 )  decode:( move 4 , ua * ua ; move 4 , 4 ) 
[6920] c:3 is:( move 5 , 3 ; move ul - ua , 4 )  decode:( move 5 , 3 ; move ul - ua , 4 ) 
[6921] c:0 is:( move ua , 3 ; move 2 + ua , 9 )  decode:( move 6 , 3 ; move ua + 2 , 9 ) 
[6922] c:3 is:( move 4 , 5 ; move 3 , ua * ua )  decode:( move 4 , 5 ; move 3 , ua * ua ) 
[6923] c:0 is:( move ul , 3 / 2 ; move 4 , ul )  decode:( move ul , 8 ; move 4 , ul ) 
[6924] c:0 is:( move ua , 2 ; move ua , 5 / 4 )  decode:( move ua , ul / 6 ; move ua , 5 ) 
[6925] c:3 is:( move 3 , 4 / ua ; move ua , 4 )  decode:( move 3 , 4 / ua ; move ua , 4 ) 
[6926] c:3 is:( move ua , 2 / 3 ; move 5 , ul )  decode:( move ua , 2 / 3 ; move 5 , ul ) 
[6927] c:0 is:( move ua , 2 / 5 ; move 3 , ul )  decode:( move ua , 9 + 4 ; move 3 , ul ) 
[6928] c:0 is:( move 2 , 8 ; move ul - ua , 2 )  decode:( move 2 , 8 ; move ua - ul , ul ) 
[6929] c:3 is:( move ua , 0 - 4 ; move ua , 9 )  decode:( move ua , 0 - 4 ; move ua , 9 ) 
[6930] c:0 is:( move ua , 3 / 4 ; move 3 , ul )  decode:( move ua , 4 / 3 ; move 3 , ul ) 
[6931] c:0 is:( move ul , ul ; move 3 , 4 * 3 )  decode:( move ul , ul ; move 3 , 3 * 4 ) 
[6932] c:3 is:( move ua + ul , 6 ; move 3 , 4 )  decode:( move ua + ul , 6 ; move 3 , 4 ) 
[6933] c:0 is:( move 3 - ua , 5 ; move ua , 5 )  decode:( move 3 , ua * 2 ; move ua , 5 ) 
[6934] c:0 is:( move 3 , 4 ; move ua + ul , 6 )  decode:( move 3 , 4 ; move ua , 6 ) 
[6935] c:3 is:( move 3 , 2 ; move ul - ua , 7 )  decode:( move 3 , 2 ; move ul - ua , 7 ) 
[6936] c:0 is:( move ua , 8 ; move 0 - ua , 5 )  decode:loop 0 , 2 , move 4 + 2 , ua * ua 
[6937] c:3 is:( move 3 , 0 - 9 ; move ua , ul )  decode:( move 3 , 0 - 9 ; move ua , ul ) 
[6938] c:3 is:( move ua + 2 , 3 ; move ua , 9 )  decode:( move ua + 2 , 3 ; move ua , 9 ) 
[6939] c:3 is:( move 3 , 4 / 3 ; move ua , ul )  decode:( move 3 , 4 / 3 ; move ua , ul ) 
[6940] c:3 is:( move 2 , 6 ; move ul - ua , 4 )  decode:( move 2 , 6 ; move ul - ua , 4 ) 
[6941] c:0 is:( move ua , 3 / ua ; move 3 , 5 )  decode:( move ua , 5 / 4 ; move 3 , 5 ) 
[6942] c:3 is:( move ua + 2 , 8 ; move ua , 4 )  decode:( move ua + 2 , 8 ; move ua , 4 ) 
[6943] c:3 is:( move ua , 4 * 3 ; move 4 , ul )  decode:( move ua , 4 * 3 ; move 4 , ul ) 
[6944] c:0 is:( move ua , 2 ; move 5 , 4 / ua )  decode:( move ua , 2 ; move 5 , 2 / 5 ) 
[6945] c:3 is:( move 4 , 2 / 4 ; move ua , ul )  decode:( move 4 , 2 / 4 ; move ua , ul ) 
[6946] c:3 is:( move ua + 2 , 9 ; move ua , 3 )  decode:( move ua + 2 , 9 ; move ua , 3 ) 
[6947] c:0 is:( move 9 , ul ; move 2 + ua , 2 )  decode:( move 9 , ul ; move 9 , 2 ) 
[6948] c:0 is:( move 2 , 5 ; move ua , 4 / ua )  decode:( move 2 , 6 ; move ua , 4 / ua ) 
[6949] c:3 is:( move ua , 2 / 6 ; move ul , 2 )  decode:( move ua , 2 / 6 ; move ul , 2 ) 
[6950] c:0 is:( move ua , ul ; move 4 , 3 * 4 )  decode:( move ua , ul ; move 4 , 4 * 3 ) 
[6951] c:0 is:( move ua , ul ; move 2 , 4 + 7 )  decode:( move ua , ul ; move 2 , 3 + 8 ) 
[6952] c:3 is:( move ua , 4 ; move ua , 4 * 4 )  decode:( move ua , 4 ; move ua , 4 * 4 ) 
[6953] c:0 is:( move ul - ua , 5 ; move 5 , 2 )  decode:( move 5 , 5 ; move 5 , ul ) 
[6954] c:3 is:( move 3 , 3 * 5 ; move ua , ul )  decode:( move 3 , 3 * 5 ; move ua , ul ) 
[6955] c:0 is:( move 3 - ua , 5 ; move 4 , ul )  decode:( move 3 , 9 ; move 4 , 0 - 4 ) 
[6956] c:0 is:( move 4 , ua / 2 ; move ua , 5 )  decode:( move 4 , 9 / 2 ; move ua , 5 ) 
[6957] c:3 is:( move 0 - ua , ul ; move 7 , 5 )  decode:( move 0 - ua , ul ; move 7 , 5 ) 
[6958] c:0 is:( move 9 , 0 ; move ua + ul , 4 )  decode:( move 9 , 0 ; move 7 , 4 ) 
[6959] c:0 is:( move 0 - ua , 6 ; move ua , 7 )  decode:( move ua , 6 ; move ua , 7 + 4 ) 
[6960] c:0 is:( move ua - ul , 3 ; move 4 , 5 )  decode:( move ul - ua , 6 ; move 4 , 5 ) 
[6961] c:0 is:( move ua , 3 ; move ua , 4 + 7 )  decode:( move ua , 3 ; move ua , 7 + 4 ) 
[6962] c:0 is:( move 3 - ua , 6 ; move ua , 4 )  decode:( move 3 , 9 ; move ua , ul ) 
[6963] c:3 is:( move ul , 4 ; move ua , 2 / 4 )  decode:( move ul , 4 ; move ua , 2 / 4 ) 
[6964] c:3 is:( move 4 - ua , 4 ; move 4 , ul )  decode:( move 4 - ua , 4 ; move 4 , ul ) 
[6965] c:0 is:( move 3 , 5 ; move ua , 3 / ua )  decode:( move 3 , 5 ; move ua , 2 / ua ) 
[6966] c:0 is:( move 3 , 4 / ua ; move 3 , ul )  decode:( move 3 , 2 / 4 ; move 3 , ul ) 
[6967] c:0 is:( move ua - ul , 2 ; move 8 , 2 )  decode:( move 5 , 2 ; move ua + ul , 2 ) 
[6968] c:3 is:( move ul - ua , 2 ; move 3 , 7 )  decode:( move ul - ua , 2 ; move 3 , 7 ) 
[6969] c:3 is:( move ua + ul , 3 ; move 8 , 2 )  decode:( move ua + ul , 3 ; move 8 , 2 ) 
[6970] c:3 is:( move ua , 5 / 2 ; move ua , 4 )  decode:( move ua , 5 / 2 ; move ua , 4 ) 
[6971] c:3 is:( move ul , 9 ; move ua + 2 , 2 )  decode:( move ul , 9 ; move ua + 2 , 2 ) 
[6972] c:3 is:( move 9 , 2 ; move ua + ul , 2 )  decode:( move 9 , 2 ; move ua + ul , 2 ) 
[6973] c:0 is:( move ul - ua , 2 ; move 2 , 8 )  decode:( move ua - ul , 2 ; move 2 , 8 ) 
[6974] c:0 is:loop 0 , 2 , move ua - ul , 4 / 9  decode:loop 0 , 2 , move ua - 2 , 2 / 6 
[6975] c:0 is:( move ua + ul , 2 ; move 7 , 4 )  decode:( move 7 , 2 ; move ua + ul , 4 ) 
[6976] c:0 is:( move 4 + ua , ul ; move 5 , 4 )  decode:( move ua + 4 , ul ; move 5 , 4 ) 
[6977] c:3 is:( move 2 , 2 / 6 ; move ua , ul )  decode:( move 2 , 2 / 6 ; move ua , ul ) 
[6978] c:0 is:( move 3 , 4 * 3 ; move ul , ul )  decode:( move ul , 9 ; move 3 , 3 / 2 ) 
[6979] c:0 is:( move ua , 4 * 4 ; move 3 , ul )  decode:( move ua , 0 - 4 ; move 3 , ul ) 
[6980] c:3 is:( move 4 , ua * ua ; move 5 , 3 )  decode:( move 4 , ua * ua ; move 5 , 3 ) 
[6981] c:3 is:( move ua + ul , 4 ; move 7 , 2 )  decode:( move ua + ul , 4 ; move 7 , 2 ) 
[6982] c:3 is:( move ua , 0 - 9 ; move ua , 4 )  decode:( move ua , 0 - 9 ; move ua , 4 ) 
[6983] c:3 is:( move ua + ul , 4 ; move 5 , 4 )  decode:( move ua + ul , 4 ; move 5 , 4 ) 
[6984] c:3 is:( move 4 , ua / 4 ; move 2 , ul )  decode:( move 4 , ua / 4 ; move 2 , ul ) 
[6985] c:3 is:( move 5 , 2 ; move ua , ua / 4 )  decode:( move 5 , 2 ; move ua , ua / 4 ) 
[6986] c:3 is:( move ua , ua / 3 ; move 4 , 4 )  decode:( move ua , ua / 3 ; move 4 , 4 ) 
[6987] c:3 is:( move 5 , 6 ; move ua + ul , 2 )  decode:( move 5 , 6 ; move ua + ul , 2 ) 
[6988] c:0 is:( move ua , 3 * 5 ; move ua , 4 )  decode:( move ua , 5 * 3 ; move ua , 4 ) 
[6989] c:3 is:( move 5 , 4 / ua ; move ua , 2 )  decode:( move 5 , 4 / ua ; move ua , 2 ) 
[6990] c:0 is:( move 9 , 0 ; move 3 - ua , ul )  decode:( move 9 , 0 ; move 3 , 0 - 4 ) 
[6991] c:0 is:( move 0 - 3 , 9 ; move ua , ul )  decode:( move 3 , 9 ; move ua , 2 ) 
[6992] c:3 is:( move ua + 2 , ul ; move 9 , 2 )  decode:( move ua + 2 , ul ; move 9 , 2 ) 
[6993] c:0 is:( move ua , 3 ; move 0 - 9 , ul )  decode:( move ua , 3 ; move 9 , ua * ua ) 
[6994] c:0 is:( move 0 - 9 , 3 ; move ua , ul )  decode:( move 9 , 6 ; move ua , 0 - 2 ) 
[6995] c:0 is:( move ua , 3 ; move 3 - ua , 7 )  decode:( move ua , 3 ; move 4 , move 7 ) 
[6996] c:3 is:( move 5 , 3 / 2 ; move ua , ul )  decode:( move 5 , 3 / 2 ; move ua , ul ) 
[6997] c:0 is:( move ua , 6 ; move 4 + ua , 4 )  decode:( move ua , 6 ; move ua + 4 , 4 ) 
[6998] c:3 is:( move 4 , ul / 4 ; move ua , 2 )  decode:( move 4 , ul / 4 ; move ua , 2 ) 
[6999] c:0 is:( move ua , 4 / 3 ; move ua , 4 )  decode:( move ua , 4 / 5 ; move ua , 4 ) 
[7000] c:3 is:( move ul - ua , 2 ; move 4 , 6 )  decode:( move ul - ua , 2 ; move 4 , 6 ) 
[7001] c:3 is:( move 3 - ua , 2 ; move ua , 8 )  decode:( move 3 - ua , 2 ; move ua , 8 ) 
[7002] c:3 is:( move ua , 2 * 5 ; move 4 , ul )  decode:( move ua , 2 * 5 ; move 4 , ul ) 
[7003] c:3 is:( move ua , ul / 4 ; move 4 , 2 )  decode:( move ua , ul / 4 ; move 4 , 2 ) 
[7004] c:3 is:( move 2 , 6 ; move ua - ul , 4 )  decode:( move 2 , 6 ; move ua - ul , 4 ) 
[7005] c:0 is:( move ul - ua , 5 ; move 2 , 5 )  decode:( move ua - ul , 9 ; move 2 , 5 ) 
[7006] c:3 is:( move 3 , 4 ; move ua , ua / 4 )  decode:( move 3 , 4 ; move ua , ua / 4 ) 
[7007] c:3 is:( move ua , 4 / 5 ; move ua , 2 )  decode:( move ua , 4 / 5 ; move ua , 2 ) 
[7008] c:3 is:( move 3 , ua * ua ; move 4 , 5 )  decode:( move 3 , ua * ua ; move 4 , 5 ) 
[7009] c:3 is:( move 2 , 4 ; move ua + ul , 7 )  decode:( move 2 , 4 ; move ua + ul , 7 ) 
[7010] c:0 is:( move 4 , ul ; move 2 - ua , 6 )  decode:( move 4 , ul ; move 4 , 4 * 4 ) 
[7011] c:0 is:( move 7 , 0 ; move ua , ua / 4 )  decode:( move 8 , 0 ; move ua , ua / 4 ) 
[7012] c:3 is:( move 5 , ua * ua ; move 3 , 4 )  decode:( move 5 , ua * ua ; move 3 , 4 ) 
[7013] c:0 is:( move 0 - ua , 4 ; move 8 , ul )  decode:( move ul - ua , 4 ; move 8 , ul ) 
[7014] c:3 is:( move 3 , 5 ; move ul - ua , 4 )  decode:( move 3 , 5 ; move ul - ua , 4 ) 
[7015] c:3 is:( move ua , 0 ; move 8 , ua / 3 )  decode:( move ua , 0 ; move 8 , ua / 3 ) 
[7016] c:0 is:( move 4 , 2 ; move ua / 4 , ul )  decode:( move 4 , 2 ; move ul , ul ) 
[7017] c:3 is:( move ua , ua / 3 ; move 3 , 5 )  decode:( move ua , ua / 3 ; move 3 , 5 ) 
[7018] c:0 is:loop 0 , 4 , move ua - 4 , ua / 8  decode:/ / loop 0 , 4 , move 2 , 4 / 4 
[7019] c:0 is:( move 3 , 6 + 4 ; move ua , ul )  decode:( move 3 , 4 + 6 ; move ua , ul ) 
[7020] c:0 is:( move 5 , ul ; move 0 - ua , 7 )  decode:( move 5 , ul ; move ua , 5 / 2 ) 
[7021] c:0 is:( move ua , ul ; move 4 , 0 - 8 )  decode:( move ua , 0 - 4 ; move 5 , 8 ) 
[7022] c:3 is:( move ua , ua / 4 ; move 3 , 4 )  decode:( move ua , ua / 4 ; move 3 , 4 ) 
[7023] c:3 is:( move 6 , ua / 3 ; move ua , 2 )  decode:( move 6 , ua / 3 ; move ua , 2 ) 
[7024] c:3 is:( move ul - ua , 4 ; move 3 , 5 )  decode:( move ul - ua , 4 ; move 3 , 5 ) 
[7025] c:3 is:( move ua , 8 ; move ua + 2 , 4 )  decode:( move ua , 8 ; move ua + 2 , 4 ) 
[7026] c:0 is:( move ua + 3 , ul ; move 8 , 2 )  decode:( move 3 + 7 , ul ; move 7 , 2 ) 
[7027] c:0 is:( move ua , ua / 2 ; move 4 , 5 )  decode:( move 0 - ua , 0 ; move 4 , 5 ) 
[7028] c:0 is:( move 3 , 4 * 4 ; move ua , ul )  decode:( move 3 , 0 - 4 ; move ua , ul ) 
[7029] c:0 is:( move 2 , ul ; move ua , 5 * 4 )  decode:( move 2 , ul ; move ua , 5 / 4 ) 
[7030] c:3 is:( move ul - ua , 3 ; move 3 , 6 )  decode:( move ul - ua , 3 ; move 3 , 6 ) 
[7031] c:3 is:( move ua + 3 , 9 ; move ua , 2 )  decode:( move ua + 3 , 9 ; move ua , 2 ) 
[7032] c:3 is:( move 4 , 3 / ua ; move ua , 4 )  decode:( move 4 , 3 / ua ; move ua , 4 ) 
[7033] c:3 is:( move 5 , 2 ; move ul - ua , 5 )  decode:( move 5 , 2 ; move ul - ua , 5 ) 
[7034] c:3 is:( move 4 , ul ; move ua , 4 * 3 )  decode:( move 4 , ul ; move ua , 4 * 3 ) 
[7035] c:0 is:( move 4 , 4 ; move ul - ua , 4 )  decode:( move 4 , 4 ; move ua - ul , 4 ) 
[7036] c:0 is:( move 3 , 2 ; move ua , ul / 5 )  decode:( move 3 , 2 ; move ua , ul /  ) 
[7037] c:0 is:( move 7 , 2 ; move ua + ul , 4 )  decode:( move ua + ul , 2 ; move 7 , 4 ) 
[7038] c:3 is:( move ua , 4 * 5 ; move 2 , ul )  decode:( move ua , 4 * 5 ; move 2 , ul ) 
[7039] c:3 is:( move 5 , ua / 4 ; move ua , 2 )  decode:( move 5 , ua / 4 ; move ua , 2 ) 
[7040] c:0 is:( move ua - 4 , 0 ; move 8 , ul )  decode:( move 2 , 0 ; move 8 , ul ) 
[7041] c:3 is:( move 3 , 5 ; move ua + ul , 5 )  decode:( move 3 , 5 ; move ua + ul , 5 ) 
[7042] c:3 is:( move ua + 2 , ul ; move 3 , 8 )  decode:( move ua + 2 , ul ; move 3 , 8 ) 
[7043] c:0 is:( move ua , 2 ; move ua , 4 / 5 )  decode:( move ua , 2 ; move ua , 4 / 3 ) 
[7044] c:3 is:( move 2 , 9 + 2 ; move ua , ul )  decode:( move 2 , 9 + 2 ; move ua , ul ) 
[7045] c:0 is:( move 0 - ua , 8 ; move 4 , ul )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[7046] c:0 is:( move ua , 0 - 5 ; move ua , 8 )  decode:( move ua , 3 ; move 7 , 3 / 2 ) 
[7047] c:0 is:( move 7 , 4 ; move ua + ul , 2 )  decode:( move ua + ul , 4 ; move 9 , 2 ) 
[7048] c:3 is:( move ua + ul , 8 ; move 3 , 2 )  decode:( move ua + ul , 8 ; move 3 , 2 ) 
[7049] c:0 is:( move 3 - ua , 8 ; move ua , 2 )  decode:( move ua , 4 / ua ; move 4 , ul ) 
[7050] c:0 is:( move 8 , 0 - ul ; move ua , 4 )  decode:( move ua + 3 , 2 ; move ua , 4 ) 
[7051] c:3 is:( move 8 , 2 ; move ua + ul , 4 )  decode:( move 8 , 2 ; move ua + ul , 4 ) 
[7052] c:0 is:loop 0 , 4 , move ua + ul , 9 / 4  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[7053] c:0 is:( move 3 , 8 ; move ul - ua , 2 )  decode:( move 3 , 8 ; move ul - ua , ul ) 
[7054] c:3 is:( move 4 , 0 - 9 ; move ua , ul )  decode:( move 4 , 0 - 9 ; move ua , ul ) 
[7055] c:3 is:( move 8 , 0 ; move ua , ua / 4 )  decode:( move 8 , 0 ; move ua , ua / 4 ) 
[7056] c:0 is:( move 6 , 4 / ua ; move ua , 2 )  decode:( move ua , 4 / ua ; move ua , 2 ) 
[7057] c:3 is:( move ua + ul , 8 ; move 4 , 2 )  decode:( move ua + ul , 8 ; move 4 , 2 ) 
[7058] c:0 is:( move 2 , 6 ; move ul - ua , 5 )  decode:( move 2 , 6 ; move ua - ul , 2 ) 
[7059] c:3 is:( move 3 , ul ; move ua , 5 * 4 )  decode:( move 3 , ul ; move ua , 5 * 4 ) 
[7060] c:0 is:( move 9 , 2 ; move ua - 2 , ul )  decode:( move 9 , 2 ; move 2 - ua , ul ) 
[7061] c:0 is:( move ua , 4 / 3 ; move ua , 5 )  decode:( move ua , 0 - 5 ; move ua , 5 ) 
[7062] c:0 is:( move 0 - ua , 9 ; move ua , 5 )  decode:( move ua ,  / 3 ; move ua , 5 ) 
[7063] c:3 is:( move 2 - ua , 4 ; move ua , 8 )  decode:( move 2 - ua , 4 ; move ua , 8 ) 
[7064] c:0 is:( move 4 , ul ; move 0 - ua , 9 )  decode:( move 4 , ul ; move ua , 4 + 2 ) 
[7065] c:0 is:( move ua - 2 , 4 ; move ua , 8 )  decode:( move 4 , 4 ; move ua , ua / 4 ) 
[7066] c:0 is:( move ua , 5 ; move 3 , 4 / ua )  decode:( move ua , 5 ; move 3 , 4 / 3 ) 
[7067] c:3 is:( move 4 , 6 ; move ua + ul , 4 )  decode:( move 4 , 6 ; move ua + ul , 4 ) 
[7068] c:3 is:( move 9 , 0 ; move ua , ua / 3 )  decode:( move 9 , 0 ; move ua , ua / 3 ) 
[7069] c:3 is:( move 3 , 4 ; move ua , ul / 4 )  decode:( move 3 , 4 ; move ua , ul / 4 ) 
[7070] c:0 is:( move 2 - ua , 6 ; move 5 , ul )  decode:( move 4 , 4 ; move 5 , 2 ) 
[7071] c:0 is:( move ua , 5 / 4 ; move ua , 3 )  decode:( move ua , 0 - 4 ; move ua , 3 ) 
[7072] c:0 is:( move 3 , ul ; move ua , 3 / 5 )  decode:( move 3 , ul ; move ua , 7 ) 
[7073] c:3 is:( move ua , 4 ; move ua + 2 , 9 )  decode:( move ua , 4 ; move ua + 2 , 9 ) 
[7074] c:3 is:( move 3 , ua / 4 ; move ua , 5 )  decode:( move 3 , ua / 4 ; move ua , 5 ) 
[7075] c:0 is:( move 6 , ua / 4 ; move ua , 2 )  decode:( move ua , ua / 4 ; move ua , 2 ) 
[7076] c:2 is:( move ua , ua / 2 ; move 5 , 5 )  decode:( move ua , ua / 2 ; move 5 , 5 ) 
[7077] c:0 is:( move 4 , 4 / ua ; move ua , 4 )  decode:( move 4 , ua / 4 ; move ua , 4 ) 
[7078] c:0 is:( move 4 , ul ; move ua , 4 * 4 )  decode:( move 4 , 4 ; move ua , 4 * 4 ) 
[7079] c:0 is:( move ua , 7 / 3 ; move ua , 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 2 
[7080] c:0 is:( move ua , 4 ; move 2 - ua , 8 )  decode:( move ua , 4 ; move 4 , 8 ) 
[7081] c:0 is:( move ua , 2 ; move ua , 7 / 3 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[7082] c:3 is:( move ua , 4 / 3 ; move 4 , ul )  decode:( move ua , 4 / 3 ; move 4 , ul ) 
[7083] c:3 is:( move 4 , 3 / ua ; move ua , 5 )  decode:( move 4 , 3 / ua ; move ua , 5 ) 
[7084] c:3 is:( move ul - ua , 2 ; move 3 , 8 )  decode:( move ul - ua , 2 ; move 3 , 8 ) 
[7085] c:0 is:( move 9 , ul ; move 2 + ua , 3 )  decode:( move 9 , 4 ; move 8 , 3 ) 
[7086] c:3 is:( move 5 , 5 ; move ua + ul , 4 )  decode:( move 5 , 5 ; move ua + ul , 4 ) 
[7087] c:0 is:( move 4 , 2 / ua ; move 5 , ul )  decode:( move 4 , 2 / 6 ; move 5 , ul ) 
[7088] c:0 is:( move ul - ua , 8 ; move 3 , 2 )  decode:( move ua - ul , 8 ; move 3 , ul ) 
[7089] c:3 is:( move ua , 3 ; move 5 , ua / 4 )  decode:( move ua , 3 ; move 5 , ua / 4 ) 
[7090] c:0 is:( move ul - ua , 4 ; move 5 , 4 )  decode:( move 5 , 5 ; move 5 , 4 5 / 4 ) 
[7091] c:0 is:( move ul - ua , 6 ; move 4 , 3 )  decode:( move ua , 6 ; move 3 , 3 + 3 ) 
[7092] c:3 is:( move ua , ua / 3 ; move 3 , 6 )  decode:( move ua , ua / 3 ; move 3 , 6 ) 
[7093] c:3 is:( move 5 , ua / 3 ; move ua , 4 )  decode:( move 5 , ua / 3 ; move ua , 4 ) 
[7094] c:3 is:( move 3 , 3 ; move ua + ul , 8 )  decode:( move 3 , 3 ; move ua + ul , 8 ) 
[7095] c:0 is:( move ua - ul , 4 ; move 7 , 2 )  decode:( move ua , 4 ; move ua + ul , 2 ) 
[7096] c:0 is:( move ua , 9 ; move 0 - ua , 5 )  decode:( move ua , 9 ; move ua , ua * ua ) 
[7097] c:3 is:( move ua , 4 * 4 ; move 4 , ul )  decode:( move ua , 4 * 4 ; move 4 , ul ) 
[7098] c:0 is:( move ua , 3 ; move ua , 3 * 7 )  decode:( move ua , 3 ; move ua , ua / 3 ) 
[7099] c:3 is:( move ua , 4 * 5 ; move 3 , ul )  decode:( move ua , 4 * 5 ; move 3 , ul ) 
[7100] c:0 is:( move ua , 3 ; move 9 - ua , 2 )  decode:( move ua , 3 ; move 3 , 2 ) 
[7101] c:0 is:( move ua , 5 / 3 ; move ua , 4 )  decode:( move ua , 8 ; move ua , 4 ) 
[7102] c:3 is:( move ul - ua , 4 ; move 4 , 5 )  decode:( move ul - ua , 4 ; move 4 , 5 ) 
[7103] c:0 is:( move 4 , 6 ; move ul - ua , 3 )  decode:( move 3 , 9 ; move ua , ul / ua ) 
[7104] c:0 is:( move 3 , 3 ; move ua - ul , 7 )  decode:( move 3 , 3 ; move 5 , 7 ) 
[7105] c:0 is:( move ul - ua , 5 ; move 4 , 4 )  decode:( move 5 , ua * ua ; move 4 , ul ) 
[7106] c:0 is:( move 6 , 2 ; move ua - ul , 5 )  decode:( move ua , 2 ; move 5 , 5 ) 
[7107] c:3 is:( move ua + ul , 4 ; move 8 , 2 )  decode:( move ua + ul , 4 ; move 8 , 2 ) 
[7108] c:3 is:( move 4 , 2 / 4 ; move ul , ul )  decode:( move 4 , 2 / 4 ; move ul , ul ) 
[7109] c:3 is:( move ul - ua , 0 ; move 4 , 9 )  decode:( move ul - ua , 0 ; move 4 , 9 ) 
[7110] c:0 is:( move ul - ua , 7 ; move 4 , 2 )  decode:( move 5 , 4 / move 5 , 2 ) 
[7111] c:3 is:( move ua , 2 - 3 ; move ua , 9 )  decode:( move ua , 2 - 3 ; move ua , 9 ) 
[7112] c:3 is:( move 3 , 2 ; move ul - ua , 8 )  decode:( move 3 , 2 ; move ul - ua , 8 ) 
[7113] c:3 is:( move 5 , 2 / 4 ; move ua , ul )  decode:( move 5 , 2 / 4 ; move ua , ul ) 
[7114] c:3 is:( move ua , ua / 4 ; move 4 , 4 )  decode:( move ua , ua / 4 ; move 4 , 4 ) 
[7115] c:3 is:( move 4 , 7 ; move ul - ua , 2 )  decode:( move 4 , 7 ; move ul - ua , 2 ) 
[7116] c:0 is:( move 4 , 2 ; move ul - ua , 7 )  decode:( move 4 , 2 ; move ua - ul , 7 ) 
[7117] c:0 is:( move 4 , 9 ; move 0 - ua , ul )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[7118] c:0 is:( move 3 , 2 / 6 ; move ua , ul )  decode:( move 3 , 2 / 4 ; move ua , ul ) 
[7119] c:0 is:( move 4 , ua / 3 ; move ua , 5 )  decode:( move 4 , 4 ; move ua , 5 ) 
[7120] c:0 is:( move ua , 9 + 2 ; move 3 , ul )  decode:( move ua , 2 * 2 ; move 3 , ul ) 
[7121] c:3 is:( move 4 , 4 / ua ; move 3 , ul )  decode:( move 4 , 4 / ua ; move 3 , ul ) 
[7122] c:3 is:( move ua , 9 ; move ua , 2 - 3 )  decode:( move ua , 9 ; move ua , 2 - 3 ) 
[7123] c:0 is:( move 2 , 9 ; move 2 - ua , ul )  decode:( move 3 , 9 ; move 4 , 2 ) 
[7124] c:0 is:( move 4 , ul ; move 2 - ua , 7 )  decode:( move 4 , ul ; move ua - 2 , 7 ) 
[7125] c:3 is:( move 2 , 9 ; move ua - ul , 2 )  decode:( move 2 , 9 ; move ua - ul , 2 ) 
[7126] c:3 is:( move ua , 4 / 5 ; move ua , 3 )  decode:( move ua , 4 / 5 ; move ua , 3 ) 
[7127] c:0 is:( move 5 , ul ; move ua , 4 * 3 )  decode:loop 0 , 2 , move v0 - ua , ua / 4 
[7128] c:3 is:( move 4 , 4 * 4 ; move ua , ul )  decode:( move 4 , 4 * 4 ; move ua , ul ) 
[7129] c:3 is:( move 8 , 4 ; move ua + ul , 2 )  decode:( move 8 , 4 ; move ua + ul , 2 ) 
[7130] c:3 is:( move 3 , 9 + 2 ; move ua , ul )  decode:( move 3 , 9 + 2 ; move ua , ul ) 
[7131] c:0 is:( move ua - 3 , 9 ; move ua , 2 )  decode:( move 3 - ua , 6 ; move ua , ul ) 
[7132] c:3 is:( move ua , 5 ; move 3 , ua / 4 )  decode:( move ua , 5 ; move 3 , ua / 4 ) 
[7133] c:3 is:( move 5 , ua * ua ; move 4 , 4 )  decode:( move 5 , ua * ua ; move 4 , 4 ) 
[7134] c:0 is:( move ua , 2 / 5 ; move 4 , ul )  decode:( move ua , 9 + 4 ; move 5 , ul ) 
[7135] c:3 is:( move ua + 2 , 4 ; move ua , 9 )  decode:( move ua + 2 , 4 ; move ua , 9 ) 
[7136] c:3 is:( move ua , ua / 3 ; move 4 , 5 )  decode:( move ua , ua / 3 ; move 4 , 5 ) 
[7137] c:0 is:( move 9 , 2 ; move ua - ul , 2 )  decode:( move 9 , 2 ; move 5 , 2 ) 
[7138] c:0 is:( move ua , 2 / 6 ; move 3 , ul )  decode:( move ua , 2 / 5 ; move 3 , ul ) 
[7139] c:3 is:( move ua , 9 ; move 3 - ua , 2 )  decode:( move ua , 9 ; move 3 - ua , 2 ) 
[7140] c:0 is:( move ua - 3 , 7 ; move ua , 4 )  decode:( move 4 , 7 ; move ua , 4 ) 
[7141] c:3 is:( move ul - ua , 6 ; move 5 , 2 )  decode:( move ul - ua , 6 ; move 5 , 2 ) 
[7142] c:3 is:( move ua , 9 ; move ua + 2 , 4 )  decode:( move ua , 9 ; move ua + 2 , 4 ) 
[7143] c:3 is:( move 9 , 0 ; move ua - ul , 4 )  decode:( move 9 , 0 ; move ua - ul , 4 ) 
[7144] c:3 is:( move 5 , 2 / ua ; move ua , 5 )  decode:( move 5 , 2 / ua ; move ua , 5 ) 
[7145] c:3 is:( move 4 , 4 ; move ua , ua / 4 )  decode:( move 4 , 4 ; move ua , ua / 4 ) 
[7146] c:0 is:( move ua + ul , 3 ; move 9 , 2 )  decode:( move 7 , 3 ; move 9 , 2 ) 
[7147] c:3 is:( move ua , 9 + 2 ; move ua , 4 )  decode:( move ua , 9 + 2 ; move ua , 4 ) 
[7148] c:0 is:( move ua , 6 ; move 0 - ua , 8 )  decode:( move ua , 6 ; move ua , 8 ) 
[7149] c:3 is:( move 4 , 6 ; move 3 - ua , ul )  decode:( move 4 , 6 ; move 3 - ua , ul ) 
[7150] c:3 is:( move 5 , 4 / ua ; move ua , 3 )  decode:( move 5 , 4 / ua ; move ua , 3 ) 
[7151] c:3 is:( move ul - ua , 3 ; move 4 , 6 )  decode:( move ul - ua , 3 ; move 4 , 6 ) 
[7152] c:0 is:loop 0 , 4 , move 4 - ua , ul / 8  decode:loop 0 , 4 , move 2 , v0 / 4 
[7153] c:3 is:( move 6 , 2 ; move ua , ua / 4 )  decode:( move 6 , 2 ; move ua , ua / 4 ) 
[7154] c:3 is:( move ua + ul , 6 ; move 6 , 2 )  decode:( move ua + ul , 6 ; move 6 , 2 ) 
[7155] c:3 is:( move 3 , 2 ; move ua + ul , 9 )  decode:( move 3 , 2 ; move ua + ul , 9 ) 
[7156] c:3 is:( move ua , 4 / ua ; move 3 , 5 )  decode:( move ua , 4 / ua ; move 3 , 5 ) 
[7157] c:0 is:( move 2 , ul / 7 ; move ua , 2 )  decode:( move 2 , ul / 4 ; move ua , 2 ) 
[7158] c:3 is:( move 3 , ul / 4 ; move ua , 4 )  decode:( move 3 , ul / 4 ; move ua , 4 ) 
[7159] c:0 is:( move 3 - ua , 6 ; move ua , 5 )  decode:( move 4 , 9 ; move ua , 0 - 2 ) 
[7160] c:0 is:( move 4 , 4 ; move ua + ul , 6 )  decode:( move 2 - ua , ul ; move ua , 6 ) 
[7161] c:3 is:( move ul - ua , 3 ; move 5 , 5 )  decode:( move ul - ua , 3 ; move 5 , 5 ) 
[7162] c:3 is:( move 4 , 4 ; move ua , ul / 3 )  decode:( move 4 , 4 ; move ua , ul / 3 ) 
[7163] c:0 is:( move ua , 8 ; move 3 + ua , 4 )  decode:( move ua , 8 ; move 9 , 4 ) 
[7164] c:0 is:( move ua , 4 / ua ; move 6 , 2 )  decode:( move ua , 4 / ua ; move ua , 2 ) 
[7165] c:0 is:( move 4 , 7 ; move ua - ul , 2 )  decode:( move 4 , 4 / 5 ; move ua , 2 ) 
[7166] c:3 is:( move 3 , 9 ; move ua + ul , 2 )  decode:( move 3 , 9 ; move ua + ul , 2 ) 
[7167] c:0 is:( move ua , 2 / 8 ; move ua , 2 )  decode:( move ua , ul / 4 ; move ua , 2 ) 
[7168] c:3 is:( move 4 , 0 ; move 9 , ua * ua )  decode:( move 4 , 0 ; move 9 , ua * ua ) 
[7169] c:3 is:( move 5 , 4 ; move 4 , ua * ua )  decode:( move 5 , 4 ; move 4 , ua * ua ) 
[7170] c:0 is:( move ua , 4 ; move 4 , 4 / ua )  decode:( move ua , 4 ; move 4 , 7 ) 
[7171] c:3 is:( move ua , 9 ; move 3 - ua , 2 )  decode:( move ua , 9 ; move 3 - ua , 2 ) 
[7172] c:0 is:( move 4 , 8 ; move ua + ul , 2 )  decode:( move 4 , 8 ; move 8 , 2 ) 
[7173] c:3 is:( move 4 , 0 ; move ul - ua , 9 )  decode:( move 4 , 0 ; move ul - ua , 9 ) 
[7174] c:3 is:( move 5 , 3 ; move 5 , ua * ua )  decode:( move 5 , 3 ; move 5 , ua * ua ) 
[7175] c:0 is:( move 0 - ua , 6 ; move ua , 8 )  decode:( move ua , 9 ; move ua , 8 ) 
[7176] c:3 is:( move ua + ul , 6 ; move 4 , 4 )  decode:( move ua + ul , 6 ; move 4 , 4 ) 
[7177] c:3 is:( move 4 , ua * ua ; move 4 , 5 )  decode:( move 4 , ua * ua ; move 4 , 5 ) 
[7178] c:3 is:( move 6 , 6 ; move ua + ul , 2 )  decode:( move 6 , 6 ; move ua + ul , 2 ) 
[7179] c:0 is:( move 2 , 6 ; move ua , ua / 4 )  decode:( move 3 , 6 ; move ua , ua / 4 ) 
[7180] c:0 is:( move ua , ul ; move 4 , 5 * 3 )  decode:( move ua , ul ; move 4 , 9 ) 
[7181] c:0 is:( move 4 , 6 + 4 ; move ua , ul )  decode:( move 4 , 9 + 4 ; move ua , ul ) 
[7182] c:0 is:( move 2 , 7 ; move ul - ua , 4 )  decode:( move 2 , 7 ; move ua - ul , ul ) 
[7183] c:3 is:( move 2 , 4 ; move ua + ul , 8 )  decode:( move 2 , 4 ; move ua + ul , 8 ) 
[7184] c:3 is:( move 5 , ua / 4 ; move 2 , ul )  decode:( move 5 , ua / 4 ; move 2 , ul ) 
[7185] c:3 is:( move 5 , 4 ; move ua , ua / 3 )  decode:( move 5 , 4 ; move ua , ua / 3 ) 
[7186] c:3 is:( move 3 , ua * ua ; move 5 , 5 )  decode:( move 3 , ua * ua ; move 5 , 5 ) 
[7187] c:3 is:( move 4 , 4 ; move 5 , ua * ua )  decode:( move 4 , 4 ; move 5 , ua * ua ) 
[7188] c:3 is:( move 3 , ul ; move 4 , ua / 4 )  decode:( move 3 , ul ; move 4 , ua / 4 ) 
[7189] c:0 is:( move 4 - ua , 5 ; move 4 , ul )  decode:( move 2 , ul ; move 4 , 0 - 4 ) 
[7190] c:0 is:( move 7 , 4 ; move ua - ul , 2 )  decode:( move ua + ul , 4 ; move 5 , 2 ) 
[7191] c:3 is:( move 3 , 4 / ua ; move ua , 5 )  decode:( move 3 , 4 / ua ; move ua , 5 ) 
[7192] c:3 is:( move ua , 5 ; move ua , 4 * 4 )  decode:( move ua , 5 ; move ua , 4 * 4 ) 
[7193] c:0 is:( move 4 , 3 ; move ul - ua , 6 )  decode:( move 5 , 3 ; move 5 , 3 ) 
[7194] c:3 is:( move ua , 4 / ua ; move 5 , 3 )  decode:( move ua , 4 / ua ; move 5 , 3 ) 
[7195] c:3 is:( move 5 , 6 ; move ul - ua , 2 )  decode:( move 5 , 6 ; move ul - ua , 2 ) 
[7196] c:0 is:( move 4 , 5 ; move ua , ua / 3 )  decode:( move ua , 4 ; move 3 , ua / 3 ) 
[7197] c:0 is:( move ua , 4 ; move 3 , ul / 4 )  decode:( move 3 , 4 ; move ua , ul / 4 ) 
[7198] c:3 is:( move 4 , 2 ; move ua + ul , 8 )  decode:( move 4 , 2 ; move ua + ul , 8 ) 
[7199] c:0 is:( move ua , 9 + 4 ; move ua , 2 )  decode:( move ua , 3 + 9 ; move ua , 2 ) 
[7200] c:3 is:( move ua , 4 ; move ua , 3 + 8 )  decode:( move ua , 4 ; move ua , 3 + 8 ) 
[7201] c:0 is:( move 3 , 4 * 4 ; move ul , ul )  decode:( move 2 , 4 * 4 ; move 3 , ul ) 
[7202] c:0 is:( move ua , 5 * 5 ; move 2 , ul )  decode:( move ua , 6 ; move 0 - 2 , ul ) 
[7203] c:0 is:( move 9 , 3 ; move ua + ul , 2 )  decode:( move 9 , 3 ; move ul + ua , 2 ) 
[7204] c:0 is:( move 0 - ua , 9 ; move 4 , ul )  decode:( move ua , 4 / 3 ; move 4 , ul ) 
[7205] c:3 is:( move ua , 9 + 2 ; move ua , 4 )  decode:( move ua , 9 + 2 ; move ua , 4 ) 
[7206] c:3 is:( move 4 , ul ; move ua , 4 / 3 )  decode:( move 4 , ul ; move ua , 4 / 3 ) 
[7207] c:3 is:( move ua , ul / 6 ; move 3 , 2 )  decode:( move ua , ul / 6 ; move 3 , 2 ) 
[7208] c:3 is:( move 3 , ua / 4 ; move 4 , ul )  decode:( move 3 , ua / 4 ; move 4 , ul ) 
[7209] c:0 is:( move ua , 8 ; move 2 - ua , 4 )  decode:( move ua , 8 ; move 4 , 3 + 4 ) 
[7210] c:3 is:( move 3 , 6 ; move ul - ua , 4 )  decode:( move 3 , 6 ; move ul - ua , 4 ) 
[7211] c:0 is:( move 2 , 4 ; move ul - ua , 7 )  decode:( move 2 , 4 ; move ua - ul , 7 ) 
[7212] c:3 is:( move 4 , 5 ; move ul - ua , 4 )  decode:( move 4 , 5 ; move ul - ua , 4 ) 
[7213] c:3 is:( move ua , 5 ; move ua , 4 / 3 )  decode:( move ua , 5 ; move ua , 4 / 3 ) 
[7214] c:0 is:( move ua , 4 * 3 ; move ul , 5 )  decode:( move ul , 4 ; move ua , 4 / 2 ) 
[7215] c:3 is:( move 3 , 4 / ua ; move 4 , ul )  decode:( move 3 , 4 / ua ; move 4 , ul ) 
[7216] c:3 is:( move 4 , ul ; move ua , 3 * 5 )  decode:( move 4 , ul ; move ua , 3 * 5 ) 
[7217] c:0 is:( move ua + ul , 2 ; move 8 , 4 )  decode:( move 8 , 2 ; move ua + ul , 4 ) 
[7218] c:3 is:( move ua , ul / 4 ; move 5 , 2 )  decode:( move ua , ul / 4 ; move 5 , 2 ) 
[7219] c:3 is:( move ua + ul , 8 ; move 2 , 4 )  decode:( move ua + ul , 8 ; move 2 , 4 ) 
[7220] c:3 is:( move 5 , 4 / ua ; move 2 , ul )  decode:( move 5 , 4 / ua ; move 2 , ul ) 
[7221] c:0 is:( move 4 , 3 / 4 ; move ua , ul )  decode:( move 4 , / / 5 ; move ua , ul ) 
[7222] c:0 is:( move ua , 5 * 3 ; move 4 , ul )  decode:( move ua , 4 * 3 ; move 4 , ul ) 
[7223] c:0 is:( move 6 , 2 / ua ; move ua , 4 )  decode:loop 0 , 2 , move v0 - ua , v0 0 2 + 
[7224] c:3 is:( move 5 , 3 ; move ul - ua , 5 )  decode:( move 5 , 3 ; move ul - ua , 5 ) 
[7225] c:0 is:( move ua + ul , 3 ; move 6 , 5 )  decode:( move ua + ul , 3 ; move ua , 5 ) 
[7226] c:3 is:( move ua + 2 , ul ; move 8 , 4 )  decode:( move ua + 2 , ul ; move 8 , 4 ) 
[7227] c:0 is:( move 3 - ua , 4 ; move ua , 7 )  decode:( move 4 , 3 / 4 ; move ua , 7 ) 
[7228] c:3 is:( move 9 , 0 ; move 4 , ua * ua )  decode:( move 9 , 0 ; move 4 , ua * ua ) 
[7229] c:3 is:( move 3 , 8 ; move ua - ul , 2 )  decode:( move 3 , 8 ; move ua - ul , 2 ) 
[7230] c:0 is:( move 4 , 7 ; move ua , 2 / ua )  decode:( move 6 , 4 ; move 4 , ul / ua ) 
[7231] c:0 is:( move ua + 3 , 5 ; move ua , 8 )  decode:( move 9 , 5 ; move ua , 8 ) 
[7232] c:0 is:( move ua , 9 ; move ua + 3 , 4 )  decode:( move ua , 9 ; move  move 9 , 4 ) 
[7233] c:0 is:loop 0 , 6 , move ua + ul , 5 - 9  decode:loop 0 , 4 , move ua + 2 , 0 - 9 
[7234] c:3 is:( move 4 , 8 ; move ul - ua , 2 )  decode:( move 4 , 8 ; move ul - ua , 2 ) 
[7235] c:3 is:( move 5 , ul / 4 ; move 2 , ul )  decode:( move 5 , ul / 4 ; move 2 , ul ) 
[7236] c:3 is:( move ua , 6 ; move 4 , ua / 3 )  decode:( move ua , 6 ; move 4 , ua / 3 ) 
[7237] c:3 is:( move 4 , 6 ; move ul - ua , 4 )  decode:( move 4 , 6 ; move ul - ua , 4 ) 
[7238] c:3 is:( move 3 , 6 ; move 5 , ua * ua )  decode:( move 3 , 6 ; move 5 , ua * ua ) 
[7239] c:0 is:( move ua , 4 ; move ua , 7 * 3 )  decode:( move ua , 4 ; move ua , ua / 3 ) 
[7240] c:0 is:( move ua - 9 , 4 ; move ua , 2 )  decode:( move 3 , ul ; move ua , 5 ) 
[7241] c:3 is:( move 4 , 5 ; move ua , 4 / ua )  decode:( move 4 , 5 ; move ua , 4 / ua ) 
[7242] c:0 is:( move 3 , 3 ; move ul - ua , 8 )  decode:( move 3 , 3 ; move 5 , 8 ) 
[7243] c:3 is:( move 4 , 2 ; move ua + ul , 9 )  decode:( move 4 , 2 ; move ua + ul , 9 ) 
[7244] c:0 is:( move ua , 2 * 9 ; move ua , 3 )  decode:( move ua , 2 * 7 ; move ua , 3 ) 
[7245] c:0 is:( move ua , 9 ; move 4 - ua , 2 )  decode:( move ua , 9 ; move 3 , 2 ) 
[7246] c:0 is:( move 9 , 3 ; move 2 - ua , ul )  decode:( move 9 , 3 ; move 4 , ua / 4 ) 
[7247] c:0 is:( move 4 , 5 ; move ul - ua , 5 )  decode:( move 4 , 5 ; move ua - ul , 5 ) 
[7248] c:0 is:( move ua , 8 ; move 2 - ua , 5 )  decode:( move ua , 8 ; move 4 , ua * ua ) 
[7249] c:0 is:( move ua , ul / 4 ; move 6 , 2 )  decode:( move 6 , ul / 4 ; move ua , 2 ) 
[7250] c:3 is:( move 4 , ua / 4 ; move ua , 5 )  decode:( move 4 , ua / 4 ; move ua , 5 ) 
[7251] c:3 is:( move 4 , 6 ; move ua , ua / 3 )  decode:( move 4 , 6 ; move ua , ua / 3 ) 
[7252] c:0 is:( move 3 , ul ; move ua , 5 / 4 )  decode:( move 3 , 4 ; move ua , 5 * 4 ) 
[7253] c:0 is:( move 3 , 8 ; move ua , 2 / ua )  decode:( move ua , 5 ; move 3 , 7 ) 
[7254] c:3 is:( move 4 , 2 / 6 ; move ua , ul )  decode:( move 4 , 2 / 6 ; move ua , ul ) 
[7255] c:3 is:( move 3 , 6 ; move ua , ua / 4 )  decode:( move 3 , 6 ; move ua , ua / 4 ) 
[7256] c:0 is:( move ua , 6 ; move ua , 6 + 4 )  decode:( move ua , 6 ; move ua , 9 ) 
[7257] c:3 is:( move ul - ua , 2 ; move 3 , 9 )  decode:( move ul - ua , 2 ; move 3 , 9 ) 
[7258] c:2 is:( move ul - ua , 5 ; move 4 , 5 )  decode:( move 5 , ua * 5 ; move 4 , 5 ) 
[7259] c:0 is:( move 2 , 9 ; move ul - ua , 3 )  decode:( move 3 , 9 ; move 2 - ua , 3 ) 
[7260] c:3 is:( move 3 , ua / 2 ; move ua , 8 )  decode:( move 3 , ua / 2 ; move ua , 8 ) 
[7261] c:3 is:( move 2 , 9 ; move ua + ul , 4 )  decode:( move 2 , 9 ; move ua + ul , 4 ) 
[7262] c:3 is:( move 3 , 3 ; move ua - ul , 8 )  decode:( move 3 , 3 ; move ua - ul , 8 ) 
[7263] c:0 is:( move 8 , 4 ; move ua - ul , 2 )  decode:( move 8 , 4 ; move ua , 2 ) 
[7264] c:0 is:( move 4 , 9 ; move ua + ul , 2 )  decode:( move 4 , 9 ; move 8 , 2 ) 
[7265] c:0 is:( move ua , 5 / 4 ; move 3 , ul )  decode:( move ua , 4 / 5 ; move 3 , ul ) 
[7266] c:0 is:( move 2 - ua , 4 ; move ua , 9 )  decode:( move 4 , ul ; move ua , 4 + 3 ) 
[7267] c:2 is:( move 3 , 4 / ua ; move 5 , ul )  decode:( move 3 , 2 / 4 ; move 5 , ul ) 
[7268] c:3 is:( move 4 , ua * ua ; move 8 , 2 )  decode:( move 4 , ua * ua ; move 8 , 2 ) 
[7269] c:3 is:( move ua + ul , 4 ; move 9 , 2 )  decode:( move ua + ul , 4 ; move 9 , 2 ) 
[7270] c:3 is:( move 6 , 3 ; move ua , ua / 4 )  decode:( move 6 , 3 ; move ua , ua / 4 ) 
[7271] c:0 is:( move ua , ul ; move 4 + 3 , 8 )  decode:( move ua , ul ; move ua + ul , 8 ) 
[7272] c:3 is:( move 4 , 9 + 2 ; move ua , ul )  decode:( move 4 , 9 + 2 ; move ua , ul ) 
[7273] c:0 is:( move ua , ua / 2 ; move 7 , 4 )  decode:( move 7 , 4 ; move ua , 0 - 4 ) 
[7274] c:0 is:( move ua , 4 / 7 ; move ua , 2 )  decode:( move ua , 4 / ua ; move ua , 2 ) 
[7275] c:3 is:( move ua , 9 + 4 ; move ul , 2 )  decode:( move ua , 9 + 4 ; move ul , 2 ) 
[7276] c:0 is:( move 2 - ua , 9 ; move 3 , ul )  decode:( move 4 , 9 ; move 3 , ua / 3 ) 
[7277] c:0 is:( move ua , 6 ; move ua , 4 * 4 )  decode:( move ua , 0 ; move ua , 4 * 4 ) 
[7278] c:0 is:( move 4 , 4 * 5 ; move ua , ul )  decode:( move 3 , 4 * 5 ; move ua , ul ) 
[7279] c:3 is:( move 5 , ua * ua ; move 4 , 5 )  decode:( move 5 , ua * ua ; move 4 , 5 ) 
[7280] c:3 is:( move 6 , ul ; move ua , 4 * 3 )  decode:( move 6 , ul ; move ua , 4 * 3 ) 
[7281] c:0 is:( move ua , 3 + 4 ; move ua , 9 )  decode:loop 0 , 2 , move 0 - ua , 4 * 9 
[7282] c:0 is:( move 4 , 2 * 7 ; move ua , ul )  decode:( move 4 , 4 * 9 ; move ua , ul ) 
[7283] c:0 is:( move 4 , ul ; move ua , 4 + 7 )  decode:( move 4 , ul ; move ua , 7 + 4 ) 
[7284] c:0 is:( move 9 , 0 ; move ua , ua / 4 )  decode:( move 9 , 0 ; move 9 , ua / 4 ) 
[7285] c:0 is:( move 5 , ua / 4 ; move 3 , ul )  decode:( move 5 , 3 / 2 ; move 3 , ul ) 
[7286] c:0 is:( move ua , 9 ; move 3 + ua , 4 )  decode:( move ua , 9 ; move  move 9 , 4 ) 
[7287] c:0 is:( move ua , ul / 6 ; move 4 , 2 )  decode:( move ua , ul / 4 ; move 4 , 2 ) 
[7288] c:3 is:( move 5 , 8 ; move ua + ul , 2 )  decode:( move 5 , 8 ; move ua + ul , 2 ) 
[7289] c:0 is:( move ua , 4 + 9 ; move ua , 3 )  decode:( move ua , 2 - 9 ; move ua , 3 ) 
[7290] c:3 is:( move ul - ua , 4 ; move 3 , 7 )  decode:( move ul - ua , 4 ; move 3 , 7 ) 
[7291] c:0 is:( move 5 , 2 ; move ul - ua , 7 )  decode:( move 5 , 9 ; move 5 , 5 / 2 ) 
[7292] c:0 is:( move 8 , 2 ; move ua , ua / 3 )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[7293] c:3 is:( move ua , 2 + 9 ; move 4 , ul )  decode:( move ua , 2 + 9 ; move 4 , ul ) 
[7294] c:0 is:( move ul , 4 ; move 4 , ua / 4 )  decode:( move ul , 4 ; move 4 , ua * ua ) 
[7295] c:0 is:( move 0 - ua , 9 ; move 5 , ul )  decode:( move ua , 4 * 3 ; move 5 , ul ) 
[7296] c:3 is:( move 5 , 4 / ua ; move 3 , ul )  decode:( move 5 , 4 / ua ; move 3 , ul ) 
[7297] c:3 is:( move ua , 4 ; move ua + 3 , 9 )  decode:( move ua , 4 ; move ua + 3 , 9 ) 
[7298] c:3 is:( move 4 , 3 ; move ul - ua , 7 )  decode:( move 4 , 3 ; move ul - ua , 7 ) 
[7299] c:3 is:( move ua , ul ; move 5 , 4 / 3 )  decode:( move ua , ul ; move 5 , 4 / 3 ) 
[7300] c:1 is:( move 9 , 2 / ua ; move ua , 2 )  decode:( move 9 , 2 / ua ; move ua , 2 ) 
[7301] c:0 is:( move ua , 2 - 9 ; move 3 , ul )  decode:( move 3 , 9 ; move ua , 2 - 3 ) 
[7302] c:3 is:( move 9 , 4 ; move ua + ul , 2 )  decode:( move 9 , 4 ; move ua + ul , 2 ) 
[7303] c:0 is:( move ua , 9 / ua ; move 2 , 2 )  decode:( move ua , 3 / 2 ; move 2 , 2 ) 
[7304] c:3 is:( move 3 , 4 ; move ua + ul , 8 )  decode:( move 3 , 4 ; move ua + ul , 8 ) 
[7305] c:3 is:( move ul - ua , 6 ; move 4 , 4 )  decode:( move ul - ua , 6 ; move 4 , 4 ) 
[7306] c:3 is:( move 5 , 2 ; move ua + ul , 8 )  decode:( move 5 , 2 ; move ua + ul , 8 ) 
[7307] c:2 is:( move 4 , ul / 4 ; move ua , 4 )  decode:( move 4 , ul / 6 ; move ua , 4 ) 
[7308] c:3 is:( move ua , ua / 4 ; move 7 , 2 )  decode:( move ua , ua / 4 ; move 7 , 2 ) 
[7309] c:0 is:( move ua , 9 * 2 ; move 2 , ul )  decode:( move ua , 2 - 3 ; move 2 , ul ) 
[7310] c:3 is:( move 4 , ua / 3 ; move 5 , ul )  decode:( move 4 , ua / 3 ; move 5 , ul ) 
[7311] c:1 is:( move 5 , 6 ; move 3 - ua , ul )  decode:( move 5 , 6 ; move 3 - ua , ul ) 
[7312] c:3 is:( move 3 , ul / 6 ; move 2 , ul )  decode:( move 3 , ul / 6 ; move 2 , ul ) 
[7313] c:3 is:( move 3 , 9 ; move ua - ul , 2 )  decode:( move 3 , 9 ; move ua - ul , 2 ) 
[7314] c:0 is:( move ua , 2 ; move ua , 8 / 3 )  decode:( move ua , 2 ; move ua , 8 8 ) 
[7315] c:0 is:( move 3 , ua / 5 ; move ua , 5 )  decode:( move 3 , 0 ; move 5 , 5 ) 
[7316] c:0 is:( move ua , ul ; move 4 , 4 + 7 )  decode:( move ua , ul ; move 4 , 7 + 4 ) 
[7317] c:0 is:( move 4 , 6 ; move ua - ul , 4 )  decode:( move 4 , 6 ; move 5 , 4 ) 
[7318] c:3 is:( move ua , 8 ; move ua , 3 / 2 )  decode:( move ua , 8 ; move ua , 3 / 2 ) 
[7319] c:3 is:( move ua , 9 ; move ua + 4 , 3 )  decode:( move ua , 9 ; move ua + 4 , 3 ) 
[7320] c:3 is:( move 7 , 3 ; move ua - ul , 4 )  decode:( move 7 , 3 ; move ua - ul , 4 ) 
[7321] c:3 is:( move ua , 9 ; move ua + 4 , 3 )  decode:( move ua , 9 ; move ua + 4 , 3 ) 
[7322] c:3 is:( move 2 , 4 ; move ua - ul , 8 )  decode:( move 2 , 4 ; move ua - ul , 8 ) 
[7323] c:0 is:( move 5 , 9 ; move 0 - ua , ul )  decode:( move 5 , 9 ; move ua , ua / 3 ) 
[7324] c:0 is:( move ua , 2 / 6 ; move 4 , ul )  decode:( move ua , 2 / 5 ; move 4 , ul ) 
[7325] c:3 is:( move ua , ul / 4 ; move 3 , 5 )  decode:( move ua , ul / 4 ; move 3 , 5 ) 
[7326] c:3 is:( move ua + ul , 3 ; move 7 , 5 )  decode:( move ua + ul , 3 ; move 7 , 5 ) 
[7327] c:0 is:( move ua , ul / 6 ; move 2 , 4 )  decode:loop 0 , 4 , move 2 , v0 - 3 
[7328] c:3 is:( move ua + ul , 8 ; move 2 , 5 )  decode:( move ua + ul , 8 ; move 2 , 5 ) 
[7329] c:3 is:( move ua , 3 ; move 6 , ua / 4 )  decode:( move ua , 3 ; move 6 , ua / 4 ) 
[7330] c:0 is:( move ua - ul , 2 ; move 4 , 8 )  decode:( move ul - ua , 2 ; move 4 , 8 ) 
[7331] c:3 is:( move 5 , 5 ; move ul - ua , 4 )  decode:( move 5 , 5 ; move ul - ua , 4 ) 
[7332] c:3 is:( move ua , 5 ; move 4 , ua / 4 )  decode:( move ua , 5 ; move 4 , ua / 4 ) 
[7333] c:3 is:( move 4 , ul ; move 4 , ua / 4 )  decode:( move 4 , ul ; move 4 , ua / 4 ) 
[7334] c:0 is:( move 3 , 6 ; move ua - ul , 5 )  decode:( move 3 , 9 ; move ul - ua , 5 ) 
[7335] c:3 is:( move ul - ua , 4 ; move 4 , 6 )  decode:( move ul - ua , 4 ; move 4 , 6 ) 
[7336] c:3 is:( move 9 , 2 ; move ua + ul , 4 )  decode:( move 9 , 2 ; move ua + ul , 4 ) 
[7337] c:3 is:( move ua + ul , 7 ; move 4 , 4 )  decode:( move ua + ul , 7 ; move 4 , 4 ) 
[7338] c:3 is:( move 4 , 4 ; move ua , ul / 4 )  decode:( move 4 , 4 ; move ua , ul / 4 ) 
[7339] c:0 is:( move ua , 3 / 8 ; move ua , 2 )  decode:( move ua , 9 + 4 ; move ua , 2 ) 
[7340] c:3 is:( move 4 - ua , 3 ; move ua , 8 )  decode:( move 4 - ua , 3 ; move ua , 8 ) 
[7341] c:3 is:( move 8 , ua / 3 ; move ua , 2 )  decode:( move 8 , ua / 3 ; move ua , 2 ) 
[7342] c:0 is:( move ua , 3 / 2 ; move ua , 8 )  decode:loop 0 , 2 , move ua , 2 / ua 
[7343] c:0 is:( move 2 - ua , 8 ; move 4 , ul )  decode:( move 4 , 9 ; move 4 , 2 ) 
[7344] c:1 is:( move ua , 6 * 6 ; move ua , 2 )  decode:( move ua , 6 * 6 ; move ua , 2 ) 
[7345] c:0 is:( move 4 , 5 ; move ua , ua / 4 )  decode:( move 4 , 5 ; move ua , 3 / 4 ) 
[7346] c:3 is:( move ua , 5 ; move 4 , 4 / ua )  decode:( move ua , 5 ; move 4 , 4 / ua ) 
[7347] c:0 is:( move ua , 3 ; move 4 + ua , 9 )  decode:( move ua , 9 ; move ua + 4 , 9 ) 
[7348] c:3 is:( move 3 , 9 ; move ul - ua , 2 )  decode:( move 3 , 9 ; move ul - ua , 2 ) 
[7349] c:3 is:( move ua , ua / 4 ; move 4 , 5 )  decode:( move ua , ua / 4 ; move 4 , 5 ) 
[7350] c:3 is:( move ul - ua , 3 ; move 4 , 7 )  decode:( move ul - ua , 3 ; move 4 , 7 ) 
[7351] c:3 is:( move 4 , 2 ; move 8 , ua * ua )  decode:( move 4 , 2 ; move 8 , ua * ua ) 
[7352] c:3 is:( move ua , 9 + 5 ; move ua , 2 )  decode:( move ua , 9 + 5 ; move ua , 2 ) 
[7353] c:3 is:( move ua , 0 - 9 ; move 5 , ul )  decode:( move ua , 0 - 9 ; move 5 , ul ) 
[7354] c:3 is:( move 9 , 3 ; move ua - ul , 2 )  decode:( move 9 , 3 ; move ua - ul , 2 ) 
[7355] c:3 is:( move 9 , ua * ua ; move 3 , 2 )  decode:( move 9 , ua * ua ; move 3 , 2 ) 
[7356] c:0 is:( move 5 , 4 ; move ul - ua , 5 )  decode:( move 5 , 4 ; move 5 , ua * ua ) 
[7357] c:3 is:( move 4 , 6 ; move ua + ul , 5 )  decode:( move 4 , 6 ; move ua + ul , 5 ) 
[7358] c:3 is:( move 4 , 4 / ua ; move ua , 5 )  decode:( move 4 , 4 / ua ; move ua , 5 ) 
[7359] c:3 is:( move ua , ul - 9 ; move 3 , 2 )  decode:( move ua , ul - 9 ; move 3 , 2 ) 
[7360] c:3 is:( move 3 , 6 ; move ua , 4 / ua )  decode:( move 3 , 6 ; move ua , 4 / ua ) 
[7361] c:3 is:( move 4 , 6 ; move 4 , ua * ua )  decode:( move 4 , 6 ; move 4 , ua * ua ) 
[7362] c:3 is:( move 5 , ua / 3 ; move ua , 5 )  decode:( move 5 , ua / 3 ; move ua , 5 ) 
[7363] c:3 is:( move ua + ul , 8 ; move 5 , 2 )  decode:( move ua + ul , 8 ; move 5 , 2 ) 
[7364] c:3 is:( move ua + ul , 8 ; move 3 , 4 )  decode:( move ua + ul , 8 ; move 3 , 4 ) 
[7365] c:3 is:( move 9 , ul ; move ua + 2 , 4 )  decode:( move 9 , ul ; move ua + 2 , 4 ) 
[7366] c:3 is:( move 5 , 7 ; move 2 - ua , ul )  decode:( move 5 , 7 ; move 2 - ua , ul ) 
[7367] c:3 is:( move ua , 9 / 2 ; move ua , 2 )  decode:( move ua , 9 / 2 ; move ua , 2 ) 
[7368] c:3 is:( move ua + ul , 3 ; move 3 , 9 )  decode:( move ua + ul , 3 ; move 3 , 9 ) 
[7369] c:1 is:( move 3 , 4 ; move ul - ua , 7 )  decode:( move 3 , 4 ; move ua - ul , 7 ) 
[7370] c:0 is:( move 3 , ul ; move ua , 4 / 5 )  decode:( move 3 , ul ; move ua , 4 / ua ) 
[7371] c:0 is:( move 4 , 3 * 6 ; move ua , ul )  decode:( move 3 , 6 * 6 ; move ua , ul ) 
[7372] c:0 is:( move ul , 9 ; move 2 + ua , 4 )  decode:( move ul , 9 ; move ua + 3 , 4 ) 
[7373] c:3 is:( move ul - ua , 4 ; move 5 , 5 )  decode:( move ul - ua , 4 ; move 5 , 5 ) 
[7374] c:3 is:( move 5 , 2 / ua ; move 5 , ul )  decode:( move 5 , 2 / ua ; move 5 , ul ) 
[7375] c:3 is:( move 4 , 4 ; move ul - ua , 6 )  decode:( move 4 , 4 ; move ul - ua , 6 ) 
[7376] c:0 is:( move 4 , 2 ; move ua - ul , 8 )  decode:( move 4 , 2 ; move ul - ua , 8 ) 
[7377] c:3 is:( move 3 , 2 - 9 ; move ua , ul )  decode:( move 3 , 2 - 9 ; move ua , ul ) 
[7378] c:0 is:( move ua , 6 * 3 ; move 4 , ul )  decode:( move ua , ul * 3 ; move 4 , ul ) 
[7379] c:0 is:( move ua , 8 ; move 4 + ua , 4 )  decode:( move ua , 8 ; move 4 + 4 , 4 ) 
[7380] c:3 is:( move ul , 4 ; move ua + 3 , 8 )  decode:( move ul , 4 ; move ua + 3 , 8 ) 
[7381] c:3 is:( move 4 , 3 ; move ua + ul , 8 )  decode:( move 4 , 3 ; move ua + ul , 8 ) 
[7382] c:0 is:( move 3 - ua , 3 ; move ua , 9 )  decode:( move 3 , 0 ; move ua , 7 ) 
[7383] c:0 is:( move ua - ul , 5 ; move 7 , 2 )  decode:( move 5 , 5 ; move 7 , 2 ) 
[7384] c:0 is:( move 8 , 5 ; move ua + ul , 2 )  decode:( move 8 , 5 ; move ua , 2 ) 
[7385] c:3 is:( move ua , ul ; move 5 , 4 * 4 )  decode:( move ua , ul ; move 5 , 4 * 4 ) 
[7386] c:3 is:( move 4 , ua / 4 ; move 4 , ul )  decode:( move 4 , ua / 4 ; move 4 , ul ) 
[7387] c:0 is:( move 4 , 5 ; move ua , ul / 3 )  decode:( move 3 , 5 ; move ua , ul / ua ) 
[7388] c:0 is:( move 7 , 6 ; move ua + ul , 2 )  decode:( move ua + ul , 6 ; move 7 , 2 ) 
[7389] c:0 is:( move 8 , ua * ua ; move 2 , 4 )  decode:( move ua + 2 , 4 + move 2 , 4 ) 
[7390] c:3 is:( move ua + ul , 6 ; move 7 , 2 )  decode:( move ua + ul , 6 ; move 7 , 2 ) 
[7391] c:3 is:( move 3 , 7 ; move 4 , ua * ua )  decode:( move 3 , 7 ; move 4 , ua * ua ) 
[7392] c:2 is:( move 8 , ua * ua ; move 4 , 2 )  decode:( move 4 , 8 ; move 8 , 2 ) 
[7393] c:0 is:( move ua , 8 ; move ua , 0 - 8 )  decode:( move ul - ua , 0 ; move ua , 8 ) 
[7394] c:0 is:( move 9 , ul ; move 3 + ua , 4 )  decode:( move ua + 3 , ul ; move 9 , 4 ) 
[7395] c:0 is:( move ua , 2 / 8 ; move 3 , ul )  decode:( move 3 , 2 / 4 ; move ua , ul ) 
[7396] c:3 is:( move 4 , ul ; move ua , 5 / 4 )  decode:( move 4 , ul ; move ua , 5 / 4 ) 
[7397] c:0 is:( move ua , ua / 4 ; move 6 , 4 )  decode:( move ua , 3 / 2 ; move ua , 4 ) 
[7398] c:0 is:( move ua , 2 / 4 ; move ua , 8 )  decode:( move ua , 9 + 4 ; move ua , 8 ) 
[7399] c:3 is:( move 2 - ua , 9 ; move ua , 5 )  decode:( move 2 - ua , 9 ; move ua , 5 ) 
[7400] c:3 is:( move 4 , ul / 4 ; move 4 , ul )  decode:( move 4 , ul / 4 ; move 4 , ul ) 
[7401] c:0 is:( move ua , ua / 4 ; move 3 , 7 )  decode:( move ua , 3 / 2 ; move 3 , 7 ) 
[7402] c:3 is:( move ua + ul , 8 ; move 4 , 4 )  decode:( move ua + ul , 8 ; move 4 , 4 ) 
[7403] c:3 is:( move 5 , 7 ; move ua + ul , 4 )  decode:( move 5 , 7 ; move ua + ul , 4 ) 
[7404] c:0 is:( move 5 , ul ; move 4 , ul / 3 )  decode:( move 5 , ul ; move 4 , ul / ua ) 
[7405] c:1 is:( move 8 , 4 ; move ua + ul , 4 )  decode:( move 8 , 4 ; move ua + ul , 4 ) 
[7406] c:0 is:( move ua , 4 ; move ua , 4 * 7 )  decode:loop 0 , 2 , move ua , 4 - v0 * 4 
[7407] c:3 is:( move 4 , 6 ; move ua - ul , 5 )  decode:( move 4 , 6 ; move ua - ul , 5 ) 
[7408] c:0 is:( move ua - ul , 6 ; move 4 , 5 )  decode:( move ul - ua , 9 ; move 4 , 5 ) 
[7409] c:0 is:( move 0 - ua , 9 ; move ua , 7 )  decode:( move ua , 4 * 3 ; move ua , 9 ) 
[7410] c:3 is:( move 5 , ul / 6 ; move ua , 2 )  decode:( move 5 , ul / 6 ; move ua , 2 ) 
[7411] c:0 is:( move ua , 9 ; move 3 , 2 / ua )  decode:( move 3 , 9 ; move ua , 2 / ua ) 
[7412] c:0 is:( move ua , 9 ; move 3 - ua , 4 )  decode:( move ua , 9 ; move 3 , ul ) 
[7413] c:3 is:( move 8 , 6 ; move ua + ul , 2 )  decode:( move 8 , 6 ; move ua + ul , 2 ) 
[7414] c:0 is:( move ua - ul , 6 ; move 5 , 4 )  decode:( move ul - ua , 6 ; move 5 , 4 ) 
[7415] c:3 is:( move ua , 4 / ua ; move 8 , 2 )  decode:( move ua , 4 / ua ; move 8 , 2 ) 
[7416] c:3 is:( move 4 , 9 ; move ul - ua , 2 )  decode:( move 4 , 9 ; move ul - ua , 2 ) 
[7417] c:0 is:( move ua - 9 , 5 ; move ua , 2 )  decode:( move 3 , 2 ; move ua , 5 ) 
[7418] c:3 is:( move 4 , 4 ; move ua - ul , 7 )  decode:( move 4 , 4 ; move ua - ul , 7 ) 
[7419] c:0 is:( move ua , 9 ; move 0 - ua , 7 )  decode:0 0 loop 0 , 2 , move v0 - ua , 9 
[7420] c:3 is:( move ua , 9 + 2 ; move ul , 5 )  decode:( move ua , 9 + 2 ; move ul , 5 ) 
[7421] c:3 is:( move 4 , 8 ; move ua + ul , 4 )  decode:( move 4 , 8 ; move ua + ul , 4 ) 
[7422] c:3 is:( move 2 , 9 ; move ua - ul , 4 )  decode:( move 2 , 9 ; move ua - ul , 4 ) 
[7423] c:3 is:( move 5 , ua / 4 ; move ua , 5 )  decode:( move 5 , ua / 4 ; move ua , 5 ) 
[7424] c:3 is:( move ua , ul / 6 ; move 5 , 2 )  decode:( move ua , ul / 6 ; move 5 , 2 ) 
[7425] c:3 is:( move 5 , 4 / ua ; move 4 , ul )  decode:( move 5 , 4 / ua ; move 4 , ul ) 
[7426] c:3 is:( move ua , ua / 4 ; move 8 , 2 )  decode:( move ua , ua / 4 ; move 8 , 2 ) 
[7427] c:3 is:( move ua + ul , 6 ; move 8 , 2 )  decode:( move ua + ul , 6 ; move 8 , 2 ) 
[7428] c:0 is:( move ua - 2 , 9 ; move ua , 5 )  decode:( move 4 , 9 ; move ua , 5 ) 
[7429] c:0 is:( move 3 , 4 ; move ul - ua , 8 )  decode:( move 3 , 4 ; move 5 , 7 + 4 ) 
[7430] c:3 is:( move 9 , ua / 3 ; move ua , 2 )  decode:( move 9 , ua / 3 ; move ua , 2 ) 
[7431] c:0 is:( move 3 , 3 ; move ul - ua , 9 )  decode:( move 3 , 9 ; move ua , 4 / 3 ) 
[7432] c:3 is:( move ua , ua / 3 ; move 7 , 4 )  decode:( move ua , ua / 3 ; move 7 , 4 ) 
[7433] c:3 is:( move ul - ua , 6 ; move 4 , 5 )  decode:( move ul - ua , 6 ; move 4 , 5 ) 
[7434] c:0 is:( move 8 , 4 ; move 3 - ua , ul )  decode:( move ua + 3 , 4 ; move 3 , ul ) 
[7435] c:3 is:( move 9 , ua * ua ; move 2 , 4 )  decode:( move 9 , ua * ua ; move 2 , 4 ) 
[7436] c:0 is:( move ua , 2 / 8 ; move ua , 4 )  decode:loop 0 , 3 , move v0 - ua , v+ 0 0 
[7437] c:0 is:( move 9 , 6 ; move 0 - ua , ul )  decode:( move 9 , 6 ; move ua , ua / 3 ) 
[7438] c:0 is:( move 9 , 3 ; move ul + ua , 4 )  decode:( move 9 , 3 ; move ua + ul , 4 ) 
[7439] c:3 is:( move 4 , 2 ; move ul - ua , 9 )  decode:( move 4 , 2 ; move ul - ua , 9 ) 
[7440] c:3 is:( move 5 , 8 ; move ul - ua , 2 )  decode:( move 5 , 8 ; move ul - ua , 2 ) 
[7441] c:3 is:( move 5 , 9 ; move ua + ul , 2 )  decode:( move 5 , 9 ; move ua + ul , 2 ) 
[7442] c:3 is:( move ua , ul / 4 ; move 5 , 4 )  decode:( move ua , ul / 4 ; move 5 , 4 ) 
[7443] c:3 is:( move ua + ul , 9 ; move 3 , 4 )  decode:( move ua + ul , 9 ; move 3 , 4 ) 
[7444] c:0 is:( move ua - 2 , ul ; move 4 , 9 )  decode:( move 2 - ua , ul ; move 4 , 6 ) 
[7445] c:3 is:( move 9 , 2 ; move 4 , ua * ua )  decode:( move 9 , 2 ; move 4 , ua * ua ) 
[7446] c:0 is:( move ua , 9 / 2 ; move ua , 3 )  decode:( move ua , 0 - 2 ; move ua , 3 ) 
[7447] c:0 is:( move 4 , ul / 7 ; move ua , 2 )  decode:( move 4 , ul /  ; move ua , 2 ) 
[7448] c:3 is:( move ua , 2 - 9 ; move 4 , ul )  decode:( move ua , 2 - 9 ; move 4 , ul ) 
[7449] c:0 is:( move 9 , 2 ; move ua , ua / 3 )  decode:( move ua + 3 , 2 ; move 9 , 2 ) 
[7450] c:3 is:( move 5 , 5 ; move ua , ua / 4 )  decode:( move 5 , 5 ; move ua , ua / 4 ) 
[7451] c:3 is:( move ul - ua , 3 ; move 3 , 9 )  decode:( move ul - ua , 3 ; move 3 , 9 ) 
[7452] c:3 is:( move 5 , 6 ; move ua - ul , 4 )  decode:( move 5 , 6 ; move ua - ul , 4 ) 
[7453] c:0 is:( move 3 , 3 ; move 9 , ua * ua )  decode:( move 3 , 9 ; move 9 , ua * ua ) 
[7454] c:0 is:( move 3 , 9 ; move ua + ul , 4 )  decode:( move 3 , 9 ; move 8 , 4 ) 
[7455] c:3 is:( move 5 , 3 ; move ua + ul , 8 )  decode:( move 5 , 3 ; move ua + ul , 8 ) 
[7456] c:0 is:( move 3 - ua , 9 ; move ua , 4 )  decode:( move 3 , 4 * 4 ; move ua , 4 ) 
[7457] c:0 is:( move ua - 9 , 3 ; move ua , 4 )  decode:( move 3 , 0 ; move ua , ul ) 
[7458] c:3 is:( move 3 , 8 ; move ul - ua , 4 )  decode:( move 3 , 8 ; move ul - ua , 4 ) 
[7459] c:0 is:( move ua , 6 ; move ua , 9 + 2 )  decode:loop 0 , 2 , move ua , 3 + 6 
[7460] c:0 is:( move 2 , 8 ; move ua , ua / 4 )  decode:( move 2 , 9 ; move ua , ua / 4 ) 
[7461] c:3 is:( move 9 , ua / 2 ; move ua , 3 )  decode:( move 9 , ua / 2 ; move ua , 3 ) 
[7462] c:0 is:( move ua , 0 - 8 ; move ua , 8 )  decode:( move 5 , 0 ; move ua , 3 / 2 ) 
[7463] c:3 is:( move 9 , 2 ; move ua - ul , 4 )  decode:( move 9 , 2 ; move ua - ul , 4 ) 
[7464] c:0 is:( move ua + ul , 9 ; move 5 , 2 )  decode:( move 4 + 3 , 9 ; move 5 , 2 ) 
[7465] c:3 is:( move 4 , 6 ; move ul - ua , 5 )  decode:( move 4 , 6 ; move ul - ua , 5 ) 
[7466] c:0 is:( move 3 , 9 ; move ua , 2 / ua )  decode:( move ua , 9 ; move 3 , 2 / ua ) 
[7467] c:0 is:( move 2 , 9 ; move ul - ua , 4 )  decode:( move 2 , 9 ; move ua - ul , 4 ) 
[7468] c:0 is:( move ua , 9 / 2 ; move 2 , ul )  decode:( move ua , 0 - 2 ; move 2 , ul ) 
[7469] c:3 is:( move 4 , ul / 4 ; move ua , 5 )  decode:( move 4 , ul / 4 ; move ua , 5 ) 
[7470] c:3 is:( move 9 , ua * ua ; move 4 , 2 )  decode:( move 9 , ua * ua ; move 4 , 2 ) 
[7471] c:0 is:( move 8 , ua * ua ; move 5 , 2 )  decode:( move ua + 2 , ua ; move 5 , 2 ) 
[7472] c:0 is:( move 3 - ua , 4 ; move ua , 9 )  decode:( move 4 , ul ; move ua , 4 * 3 ) 
[7473] c:3 is:( move ul - ua , 2 ; move 4 , 9 )  decode:( move ul - ua , 2 ; move 4 , 9 ) 
[7474] c:3 is:( move 2 , 9 / 2 ; move ua , ul )  decode:( move 2 , 9 / 2 ; move ua , ul ) 
[7475] c:3 is:( move ua + ul , 9 ; move 2 , 5 )  decode:( move ua + ul , 9 ; move 2 , 5 ) 
[7476] c:3 is:( move ul - ua , 7 ; move 4 , 4 )  decode:( move ul - ua , 7 ; move 4 , 4 ) 
[7477] c:0 is:( move ua , 2 / 6 ; move 5 , ul )  decode:( move ua , 2 / 5 ; move 5 , ul ) 
[7478] c:3 is:( move 4 , 4 ; move ua + ul , 8 )  decode:( move 4 , 4 ; move ua + ul , 8 ) 
[7479] c:0 is:( move ul - ua , 9 ; move 4 , 2 )  decode:loop 0 , 2 , move ua - 2 , v0 + 4 
[7480] c:3 is:( move 9 , 0 ; move ul - ua , 6 )  decode:( move 9 , 0 ; move ul - ua , 6 ) 
[7481] c:0 is:( move 3 , ua / 4 ; move ua , 7 )  decode:( move 3 , 3 / 4 ; move ua , 7 ) 
[7482] c:3 is:( move ul - ua , 3 ; move 5 , 7 )  decode:( move ul - ua , 3 ; move 5 , 7 ) 
[7483] c:3 is:( move 2 , 6 ; move ua + ul , 8 )  decode:( move 2 , 6 ; move ua + ul , 8 ) 
[7484] c:3 is:( move ua , ua / 3 ; move 4 , 7 )  decode:( move ua , ua / 3 ; move 4 , 7 ) 
[7485] c:3 is:( move 3 , ul / 6 ; move 4 , ul )  decode:( move 3 , ul / 6 ; move 4 , ul ) 
[7486] c:3 is:( move 4 , 9 ; move ua + ul , 4 )  decode:( move 4 , 9 ; move ua + ul , 4 ) 
[7487] c:0 is:( move 4 , 4 ; move ul - ua , 8 )  decode:( move 4 , 4 ; move 5 , 8 ) 
[7488] c:3 is:( move 3 , 9 ; move ua + ul , 5 )  decode:( move 3 , 9 ; move ua + ul , 5 ) 
[7489] c:3 is:( move ua , 9 ; move 4 - ua , 4 )  decode:( move ua , 9 ; move 4 - ua , 4 ) 
[7490] c:0 is:( move 2 , 9 ; move ua - ul , 5 )  decode:( move 3 , 9 ; move ua - ul , 8 ) 
[7491] c:0 is:( move 3 - ua , 9 ; move ua , 5 )  decode:( move 4 , 9 ; move ua , ua * ua ) 
[7492] c:3 is:( move ua + ul , 9 ; move 4 , 4 )  decode:( move ua + ul , 9 ; move 4 , 4 ) 
[7493] c:3 is:( move 9 , 6 ; move ua + ul , 2 )  decode:( move 9 , 6 ; move ua + ul , 2 ) 
[7494] c:3 is:( move 9 , ua / 2 ; move ua , 4 )  decode:( move 9 , ua / 2 ; move ua , 4 ) 
[7495] c:0 is:( move 5 , 7 ; move ul - ua , 4 )  decode:( move 5 , 7 ; move 5 , ul ) 
[7496] c:3 is:( move ul - ua , 6 ; move 4 , 6 )  decode:( move ul - ua , 6 ; move 4 , 6 ) 
[7497] c:0 is:( move 3 , 9 ; move ua , ua / 3 )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[7498] c:0 is:( move ul - ua , 4 ; move 3 , 9 )  decode:( move 5 , 4 ; move 3 , 4 * 3 ) 
[7499] c:0 is:( move 9 , 4 / ua ; move ua , 2 )  decode:( move ua + 3 , 4 / move ua , 2 ) 
[7500] c:0 is:( move 4 , 9 ; move 3 - ua , ul )  decode:( move 4 , 9 ; move 4 , ua / 3 ) 
[7501] c:0 is:( move 3 , 4 ; move ul - ua , 9 )  decode:( move 3 , 4 ; move 5 , 4 * 3 ) 
[7502] c:0 is:( move 5 , ul - 9 ; move ua , 2 )  decode:( move 5 , 9 + 9 ; move ua , 2 ) 
[7503] c:0 is:( move 3 , ua / 4 ; move ua , 8 )  decode:( move 3 , 4 / move ua , 3 / 2 ) 
[7504] c:0 is:( move 9 , 3 ; move ua - ul , 4 )  decode:( move 9 , 3 ; move ul - ua , 4 ) 
[7505] c:0 is:( move 3 , 9 ; move ul - ua , 4 )  decode:( move 3 , 9 ; move 5 , ul ) 
[7506] c:3 is:( move ua , 4 / ua ; move 4 , 7 )  decode:( move ua , 4 / ua ; move 4 , 7 ) 
[7507] c:0 is:( move ua , 4 ; move ua , 8 / 3 )  decode:( move ua + ul , 4 ; move ua , 9 ) 
[7508] c:3 is:( move ua , 3 / ua ; move 8 , 4 )  decode:( move ua , 3 / ua ; move 8 , 4 ) 
[7509] c:3 is:( move ua , 0 - 9 ; move ua , 8 )  decode:( move ua , 0 - 9 ; move ua , 8 ) 
[7510] c:3 is:( move 3 , 8 ; move ua , 4 / ua )  decode:( move 3 , 8 ; move ua , 4 / ua ) 
[7511] c:3 is:( move 9 , 4 ; move ua + ul , 4 )  decode:( move 9 , 4 ; move ua + ul , 4 ) 
[7512] c:1 is:( move 4 , ua * ua ; move 3 , 9 )  decode:( move 4 , ua * ua ; move 4 , 9 ) 
[7513] c:0 is:( move 8 , 3 ; move ua , ua / 4 )  decode:( move 9 , 3 ; move ua , ua / 4 ) 
[7514] c:3 is:( move ua , ul / 4 ; move 8 , 2 )  decode:( move ua , ul / 4 ; move 8 , 2 ) 
[7515] c:0 is:( move 9 , ua / 3 ; move 2 , ul )  decode:( move 9 , 0 ; move 2 , ul ) 
[7516] c:3 is:( move ua , 9 / 2 ; move ua , 4 )  decode:( move ua , 9 / 2 ; move ua , 4 ) 
[7517] c:0 is:( move 9 , 5 ; move ua - ul , 2 )  decode:( move 9 , 5 ; move 5 , 2 ) 
[7518] c:0 is:( move ua , 9 + 5 ; move 3 , ul )  decode:( move ua , 9 + 4 ; move 3 , ul ) 
[7519] c:0 is:( move 5 , 9 ; move 2 - ua , ul )  decode:( move 5 , 9 ; move 5 , ua / 3 ) 
[7520] c:0 is:( move 5 , ul ; move 4 , ul / 4 )  decode:( move 4 , ul ; move 4 , ul / ua ) 
[7521] c:2 is:( move ua , 4 * 9 ; move ua , 3 )  decode:( move ua , 4 * 2 ; move ua , 3 ) 
[7522] c:3 is:( move 6 , 9 ; move ua + ul , 2 )  decode:( move 6 , 9 ; move ua + ul , 2 ) 
[7523] c:3 is:( move 5 , 4 ; move ua + ul , 8 )  decode:( move 5 , 4 ; move ua + ul , 8 ) 
[7524] c:3 is:( move ua + ul , 4 ; move 4 , 9 )  decode:( move ua + ul , 4 ; move 4 , 9 ) 
[7525] c:0 is:( move 4 , 9 ; move 3 - ua , ul )  decode:( move 4 , 9 ; move 4 , ua / 3 ) 
[7526] c:3 is:( move ua + ul , 9 ; move 3 , 5 )  decode:( move ua + ul , 9 ; move 3 , 5 ) 
[7527] c:3 is:( move ua , 4 * 3 ; move ua , 9 )  decode:( move ua , 4 * 3 ; move ua , 9 ) 
[7528] c:3 is:( move ua , ul / 6 ; move 4 , 4 )  decode:( move ua , ul / 6 ; move 4 , 4 ) 
[7529] c:3 is:( move ua , 4 / 7 ; move ua , 4 )  decode:( move ua , 4 / 7 ; move ua , 4 ) 
[7530] c:0 is:( move 3 , 3 / ua ; move ua , 9 )  decode:( move ua , ul / 4 ; move 9 , 9 ) 
[7531] c:0 is:( move ua - 3 , 6 ; move ua , 8 )  decode:( move 3 , 6 ; move ua , 8 ) 
[7532] c:0 is:( move ua , ul ; move 3 , 9 / 2 )  decode:( move ua , ul ; move 3 , 0 - 5 ) 
[7533] c:3 is:( move ua - ul , 6 ; move 8 , 2 )  decode:( move ua - ul , 6 ; move 8 , 2 ) 
[7534] c:3 is:( move ua + ul , 8 ; move 5 , 4 )  decode:( move ua + ul , 8 ; move 5 , 4 ) 
[7535] c:0 is:( move 4 , 4 ; move ua - ul , 8 )  decode:( move 4 , 4 ; move 5 , 8 ) 
[7536] c:0 is:( move 4 , ul / 3 ; move ua , 7 )  decode:( move 4 , ul / 4 ; move ua , 7 ) 
[7537] c:0 is:( move ua , ul / 6 ; move 6 , 2 )  decode:( move 6 , ul / 6 ; move 6 , 2 ) 
[7538] c:3 is:( move 9 , ua / 4 ; move ua , 2 )  decode:( move 9 , ua / 4 ; move ua , 2 ) 
[7539] c:3 is:( move ua , 9 / 2 ; move 3 , ul )  decode:( move ua , 9 / 2 ; move 3 , ul ) 
[7540] c:3 is:( move ua , ua / 4 ; move 7 , 4 )  decode:( move ua , ua / 4 ; move 7 , 4 ) 
[7541] c:0 is:( move ua , ua / 5 ; move 5 , 5 )  decode:( move 5 , 0 - 5 ; move 5 , 5 ) 
[7542] c:3 is:( move ua , 6 * 6 ; move ua , 4 )  decode:( move ua , 6 * 6 ; move ua , 4 ) 
[7543] c:0 is:( move ua , 9 ; move 0 - ua , 8 )  decode:( move ua , 9 ; move ua , 8 / 4 ) 
[7544] c:3 is:( move 5 , 9 ; move ul - ua , 2 )  decode:( move 5 , 9 ; move ul - ua , 2 ) 
[7545] c:3 is:( move 9 , ua * ua ; move 3 , 4 )  decode:( move 9 , ua * ua ; move 3 , 4 ) 
[7546] c:0 is:( move 4 , 8 ; move ul - ua , 4 )  decode:( move 4 , 8 ; move ua - ul , 4 ) 
[7547] c:0 is:( move ua - ul , 3 ; move 4 , 9 )  decode:( move ul - ua , 3 ; move 4 , 9 ) 
[7548] c:0 is:( move ua , 6 ; move 5 , ua / 4 )  decode:( move ua , 6 ; move 5 , 3 / 2 ) 
[7549] c:3 is:( move 4 , ul / 6 ; move 3 , ul )  decode:( move 4 , ul / 6 ; move 3 , ul ) 
[7550] c:3 is:( move 3 , ul / 4 ; move ua , 7 )  decode:( move 3 , ul / 4 ; move ua , 7 ) 
[7551] c:0 is:( move 2 - ua , ul ; move 9 , 5 )  decode:( move 4 , 9 ; move 9 , ua * ua ) 
[7552] c:3 is:( move 9 , 3 ; move ua , ua / 3 )  decode:( move 9 , 3 ; move ua , ua / 3 ) 
[7553] c:3 is:( move 9 , 3 ; move 4 , ua * ua )  decode:( move 9 , 3 ; move 4 , ua * ua ) 
[7554] c:3 is:( move ul - ua , 3 ; move 4 , 9 )  decode:( move ul - ua , 3 ; move 4 , 9 ) 
[7555] c:0 is:( move ua , 9 ; move ua , 0 - 8 )  decode:( move ua , 9 ; move ua , 9 * 4 ) 
[7556] c:3 is:( move 4 , 9 + 4 ; move ua , ul )  decode:( move 4 , 9 + 4 ; move ua , ul ) 
[7557] c:3 is:( move ua , ua / 3 ; move 4 , 8 )  decode:( move ua , ua / 3 ; move 4 , 8 ) 
[7558] c:0 is:( move 5 , 7 ; move ua - ul , 4 )  decode:( move 5 , 4 / 5 ; move 5 , 4 ) 
[7559] c:0 is:( move 4 , 8 ; move ua , ua / 3 )  decode:( move ua , 4 + 3 ; move 4 , ul ) 
[7560] c:0 is:( move ua , 8 ; move ua , 4 / 3 )  decode:( move ua , 8 ; move ua , 5 / 4 ) 
[7561] c:3 is:( move 5 , 4 ; move ul - ua , 7 )  decode:( move 5 , 4 ; move ul - ua , 7 ) 
[7562] c:3 is:( move 4 , 3 ; move ul - ua , 9 )  decode:( move 4 , 3 ; move ul - ua , 9 ) 
[7563] c:3 is:( move ua , ul / 4 ; move 6 , 4 )  decode:( move ua , ul / 4 ; move 6 , 4 ) 
[7564] c:3 is:( move 4 , 8 ; move ua , 4 / ua )  decode:( move 4 , 8 ; move ua , 4 / ua ) 
[7565] c:3 is:( move ua , 9 + 2 ; move ua , 8 )  decode:( move ua , 9 + 2 ; move ua , 8 ) 
[7566] c:3 is:( move 9 , 6 ; move ua - ul , 2 )  decode:( move 9 , 6 ; move ua - ul , 2 ) 
[7567] c:3 is:( move 9 , 4 ; move 4 , ua * ua )  decode:( move 9 , 4 ; move 4 , ua * ua ) 
[7568] c:1 is:( move ua , 9 / ua ; move 2 , 5 )  decode:( move 2 , 9 / ua ; move ua , 5 ) 
[7569] c:0 is:( move ua , 8 ; move 3 , ul / 4 )  decode:( move 2 , 0 ; move ua , ul / 4 ) 
[7570] c:0 is:( move 4 , 9 ; move ua - ul , 4 )  decode:( move 2 - ua , 9 ; move 5 , ul ) 
[7571] c:0 is:( move ua , 6 + 4 ; move ua , 9 )  decode:loop 0 , 2 , move ua , 0 - 9 
[7572] c:3 is:( move ua , 4 / 3 ; move ua , 9 )  decode:( move ua , 4 / 3 ; move ua , 9 ) 
[7573] c:0 is:( move ua , ul / 6 ; move 5 , 4 )  decode:( move 5 , ul ; move ua , 0 - 4 ) 
[7574] c:3 is:( move 9 , ua * ua ; move 4 , 4 )  decode:( move 9 , ua * ua ; move 4 , 4 ) 
[7575] c:3 is:( move ua , 9 ; move ua , 4 * 4 )  decode:( move ua , 9 ; move ua , 4 * 4 ) 
[7576] c:0 is:( move ua , ul - 9 ; move 5 , 3 )  decode:( move ua , 0 - 2 ; move 5 , 3 ) 
[7577] c:3 is:( move 9 , 3 ; move 5 , ua * ua )  decode:( move 9 , 3 ; move 5 , ua * ua ) 
[7578] c:3 is:( move 4 , 9 ; move ua + ul , 5 )  decode:( move 4 , 9 ; move ua + ul , 5 ) 
[7579] c:0 is:( move 5 , ul ; move ua , 7 / 3 )  decode:( move 5 , ul ; move ua , 0 - 4 ) 
[7580] c:3 is:( move ul - ua , 9 ; move 4 , 4 )  decode:( move ul - ua , 9 ; move 4 , 4 ) 
[7581] c:0 is:( move 4 , 4 ; move ul - ua , 9 )  decode:( move 4 , 4 ; move 5 , 9 ) 
[7582] c:3 is:( move 3 , 9 / ua ; move ua , 4 )  decode:( move 3 , 9 / ua ; move ua , 4 ) 
[7583] c:3 is:( move 9 , 0 ; move ua - ul , 8 )  decode:( move 9 , 0 ; move ua - ul , 8 ) 
[7584] c:0 is:( move 4 , 9 ; move ua - 4 , ul )  decode:( move 4 , 9 ; move 3 , ul ) 
[7585] c:3 is:( move 4 , ul - 9 ; move 3 , ul )  decode:( move 4 , ul - 9 ; move 3 , ul ) 
[7586] c:0 is:( move ua , ua / 3 ; move 9 , 4 )  decode:( move 9 , 9 ; move ua , 0 - 4 ) 
[7587] c:0 is:( move 9 , 6 ; move 2 - ua , ul )  decode:( move 9 , 6 ; move 3 - ua , ul ) 
[7588] c:0 is:( move 3 , 9 * 4 ; move ua , ul )  decode:( move 3 , ul - 9 ; move ua , ul ) 
[7589] c:0 is:( move ua , ua / 6 ; move 6 , 4 )  decode:( move ua , 2 ; move 6 , 0 - 4 ) 
[7590] c:3 is:( move 3 , 4 / ua ; move ua , 9 )  decode:( move 3 , 4 / ua ; move ua , 9 ) 
[7591] c:3 is:( move ul - ua , 9 ; move 3 , 5 )  decode:( move ul - ua , 9 ; move 3 , 5 ) 
[7592] c:3 is:( move ua , 9 / 2 ; move 4 , ul )  decode:( move ua , 9 / 2 ; move 4 , ul ) 
[7593] c:3 is:( move 4 , 9 / 2 ; move ua , ul )  decode:( move 4 , 9 / 2 ; move ua , ul ) 
[7594] c:3 is:( move ua , 2 / 6 ; move ua , 8 )  decode:( move ua , 2 / 6 ; move ua , 8 ) 
[7595] c:0 is:( move 9 , 3 / ua ; move ua , 4 )  decode:( move 9 , ua / 4 ; move ua , 4 ) 
[7596] c:3 is:( move ua , 9 ; move ua + 2 , 8 )  decode:( move ua , 9 ; move ua + 2 , 8 ) 
[7597] c:3 is:( move ua , ul / 4 ; move 7 , 4 )  decode:( move ua , ul / 4 ; move 7 , 4 ) 
[7598] c:3 is:( move 5 , 4 ; move ua + ul , 9 )  decode:( move 5 , 4 ; move ua + ul , 9 ) 
[7599] c:0 is:( move ua , 3 ; move ul - 7 , 7 )  decode:( move ua , 3 ; move ul - ua , 7 ) 
[7600] c:0 is:( move 4 , 4 / 7 ; move ua , ul )  decode:( move 4 , 2 / ua ; move ua , ul ) 
[7601] c:3 is:( move 5 , 9 ; move ua + ul , 4 )  decode:( move 5 , 9 ; move ua + ul , 4 ) 
[7602] c:3 is:( move 4 , 9 ; move ul - ua , 4 )  decode:( move 4 , 9 ; move ul - ua , 4 ) 
[7603] c:3 is:( move 4 , 9 ; move ua , ua / 3 )  decode:( move 4 , 9 ; move ua , ua / 3 ) 
[7604] c:3 is:( move ul - ua , 5 ; move 4 , 8 )  decode:( move ul - ua , 5 ; move 4 , 8 ) 
[7605] c:3 is:( move 4 , 9 ; move 4 , ua * ua )  decode:( move 4 , 9 ; move 4 , ua * ua ) 
[7606] c:0 is:( move 3 , 9 ; move ua , ua / 4 )  decode:( move 3 , 9 ; move ua , 3 / 2 ) 
[7607] c:0 is:( move 3 , 9 ; move ul - ua , 5 )  decode:( move 3 , 9 ; move 5 , ua * ua ) 
[7608] c:3 is:( move 6 , 3 ; move ua + ul , 9 )  decode:( move 6 , 3 ; move ua + ul , 9 ) 
[7609] c:2 is:( move 5 , 8 ; move ul - ua , 4 )  decode:( move 5 , 8 ; move ua - ul , 4 ) 
[7610] c:0 is:( move ua , 4 / 7 ; move 4 , ul )  decode:( move ua , 4 / ua ; move 4 , ul ) 
[7611] c:3 is:( move 4 , ua / 3 ; move ua , 9 )  decode:( move 4 , ua / 3 ; move ua , 9 ) 
[7612] c:3 is:( move 9 , ua / 3 ; move ua , 4 )  decode:( move 9 , ua / 3 ; move ua , 4 ) 
[7613] c:3 is:( move ua , ua / 4 ; move 8 , 4 )  decode:( move ua , ua / 4 ; move 8 , 4 ) 
[7614] c:3 is:( move 4 , ua / 4 ; move ua , 8 )  decode:( move 4 , ua / 4 ; move ua , 8 ) 
[7615] c:3 is:( move 5 , ul / 4 ; move 5 , ul )  decode:( move 5 , ul / 4 ; move 5 , ul ) 
[7616] c:3 is:( move 5 , 9 ; move 3 - ua , ul )  decode:( move 5 , 9 ; move 3 - ua , ul ) 
[7617] c:3 is:( move ul - ua , 6 ; move 3 , 8 )  decode:( move ul - ua , 6 ; move 3 , 8 ) 
[7618] c:0 is:( move ua , 9 / 2 ; move ua , 5 )  decode:( move ua , 2 / 9 ; move ua , 5 ) 
[7619] c:0 is:( move 3 , 8 ; move ua , ul / 4 )  decode:( move ua , 5 ; move 3 , ul / 3 ) 
[7620] c:0 is:( move 9 , 9 ; move 0 - ua , ul )  decode:( move 9 , 9 ; move ua , ua / 3 ) 
[7621] c:0 is:( move 9 , 4 / ua ; move ua , 4 )  decode:( move 9 , ua / 4 ; move ua , 4 ) 
[7622] c:0 is:( move ua , ul / 4 ; move 3 , 9 )  decode:( move 3 , ul / 4 ; move ua , 9 ) 
[7623] c:3 is:( move 9 , ua / 4 ; move ua , 4 )  decode:( move 9 , ua / 4 ; move ua , 4 ) 
[7624] c:3 is:( move 9 , 6 ; move ua + ul , 4 )  decode:( move 9 , 6 ; move ua + ul , 4 ) 
[7625] c:3 is:( move ua , ua / 4 ; move 4 , 9 )  decode:( move ua , ua / 4 ; move 4 , 9 ) 
[7626] c:0 is:( move 4 , 4 / ua ; move ua , 9 )  decode:loop 0 , 4 , move 3 , 0 - 9 
[7627] c:3 is:( move 9 , 0 ; move 9 , ua * ua )  decode:( move 9 , 0 ; move 9 , ua * ua ) 
[7628] c:0 is:( move 3 , 9 ; move ua , ul / 4 )  decode:( move ua , 6 ; move 3 , ul / 4 ) 
[7629] c:0 is:( move ua , 9 ; move 2 - ua , 8 )  decode:( move ua , 9 ; move 4 , 3 + 8 ) 
[7630] c:3 is:( move ua , ul / 4 ; move 8 , 4 )  decode:( move ua , ul / 4 ; move 8 , 4 ) 
[7631] c:0 is:( move ua , 9 ; move ua + 2 , 9 )  decode:loop 0 , 3 , move v0 + ua , 9 
[7632] c:3 is:( move 4 , 9 ; move ua , ua / 4 )  decode:( move 4 , 9 ; move ua , ua / 4 ) 
[7633] c:3 is:( move ua , 9 / ua ; move 4 , 4 )  decode:( move ua , 9 / ua ; move 4 , 4 ) 
[7634] c:0 is:( move 9 , 4 ; move ul - ua , 5 )  decode:( move 9 , 4 ; move 4 , ua * ua ) 
[7635] c:3 is:( move 4 , ua / 4 ; move ua , 9 )  decode:( move 4 , ua / 4 ; move ua , 9 ) 
[7636] c:0 is:( move 0 - 9 , 9 ; move ua , ul )  decode:( move 9 , 4 / 3 ; move ua , 2 ) 
[7637] c:3 is:( move 9 , 6 ; move 3 , ua * ua )  decode:( move 9 , 6 ; move 3 , ua * ua ) 
[7638] c:3 is:( move ua , 9 ; move ua , 3 + 8 )  decode:( move ua , 9 ; move ua , 3 + 8 ) 
[7639] c:0 is:( move 4 , 6 ; move ua , ua / 7 )  decode:( move 4 , 6 ; move ua , ul ) 
[7640] c:0 is:( move 9 , ua / 3 ; move 4 , ul )  decode:( move 9 , 2 ; move 4 , 2 - 3 ) 
[7641] c:0 is:( move ua , 9 ; move 3 + ua , 8 )  decode:( move ua , 9 ; move 9 , 8 ) 
[7642] c:0 is:( move 7 , ul / 7 ; move ua , 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[7643] c:0 is:( move ua , 2 ; move 8 , ul + 9 )  decode:( move ua , 2 ; move 8 , 9 ) 
[7644] c:0 is:( move ua , ul ; move 5 , 7 / 4 )  decode:( move ua , ul ; move 5 , ua * ua ) 
[7645] c:0 is:( move ua , 6 ; move ua , 9 / 2 )  decode:( move ua , ul / 3 ; move ua , 8 ) 
[7646] c:0 is:( move 5 , 9 ; move ua - ul , 4 )  decode:( move 5 , 9 ; move ul - ua , 4 ) 
[7647] c:3 is:( move ua , 8 ; move ua , 5 / 4 )  decode:( move ua , 8 ; move ua , 5 / 4 ) 
[7648] c:3 is:( move 8 , 9 ; move ua + ul , 2 )  decode:( move 8 , 9 ; move ua + ul , 2 ) 
[7649] c:0 is:( move 9 , ua / 6 ; move ua , 2 )  decode:( move 9 , ul ; move ua , 2 ) 
[7650] c:0 is:( move 4 , 9 ; move ul - ua , 5 )  decode:( move 4 , 9 ; move ua - ul , 5 ) 
[7651] c:3 is:( move 9 , 8 ; move ua + ul , 2 )  decode:( move 9 , 8 ; move ua + ul , 2 ) 
[7652] c:0 is:( move ua , 9 + 8 ; move ua , 3 )  decode:( move ua , 0 - 2 ; move ua , 3 ) 
[7653] c:1 is:( move ua + ul , 9 ; move 8 , 2 )  decode:( move ua + ul , 9 ; move 8 , 2 ) 
[7654] c:3 is:( move ul - ua , 9 ; move 4 , 5 )  decode:( move ul - ua , 9 ; move 4 , 5 ) 
[7655] c:2 is:( move 9 , 0 ; move ua - ul , 9 )  decode:( move 9 , 0 ; move ua , 9 ) 
[7656] c:0 is:( move 3 - ua , 9 ; move ua , 7 )  decode:( move 4 , 9 ; move ua , 3 * 4 ) 
[7657] c:3 is:( move ua + ul , 9 ; move 9 , 2 )  decode:( move ua + ul , 9 ; move 9 , 2 ) 
[7658] c:3 is:( move 9 , 5 ; move ua , ua / 4 )  decode:( move 9 , 5 ; move ua , ua / 4 ) 
[7659] c:0 is:( move 9 , ua / 5 ; move ua , 4 )  decode:( move ua + 3 , 2 ; move ua , 4 ) 
[7660] c:0 is:( move 4 , 9 / ua ; move 4 , ul )  decode:( move 4 , 3 / 2 ; move 4 , ul ) 
[7661] c:0 is:loop 0 , ua , move ua + ul , 0 - 3  decode:loop 0 , 4 , move 0 - ua , 0 - 0 6 
[7662] c:3 is:( move ua , 2 - 9 ; move ua , 9 )  decode:( move ua , 2 - 9 ; move ua , 9 ) 
[7663] c:0 is:( move ua , 4 + 9 ; move ua , 8 )  decode:( move ua , 9 + 4 ; move ua , 8 ) 
[7664] c:3 is:( move 5 , 9 ; move ul - ua , 5 )  decode:( move 5 , 9 ; move ul - ua , 5 ) 
[7665] c:0 is:( move ua , 9 ; move 2 - ua , 9 )  decode:( move ua , 9 ; move 4 , 4 + 4 ) 
[7666] c:3 is:( move 9 , 9 ; move ua + ul , 2 )  decode:( move 9 , 9 ; move ua + ul , 2 ) 
[7667] c:0 is:( move ua , ul / 9 ; move 4 , 4 )  decode:( move ua , ul ; move 4 , 0 - 4 ) 
[7668] c:3 is:( move 9 , 6 ; move ua - ul , 4 )  decode:( move 9 , 6 ; move ua - ul , 4 ) 
[7669] c:0 is:( move 5 , 9 ; move ua - ul , 5 )  decode:( move 5 , 9 ; move ul - ua , 5 ) 
[7670] c:3 is:( move ua , ul / 6 ; move 7 , 4 )  decode:( move ua , ul / 6 ; move 7 , 4 ) 
[7671] c:3 is:( move 3 , 9 ; move ua + ul , 8 )  decode:( move 3 , 9 ; move ua + ul , 8 ) 
[7672] c:0 is:( move 3 , 9 ; move ul - ua , 7 )  decode:( move 3 , 9 ; move ua - ul , 7 ) 
[7673] c:0 is:( move 8 , 9 ; move ua - ul , 2 )  decode:( move 4 + 3 , 9 ; move 5 , 2 ) 
[7674] c:0 is:( move 4 , 9 / 4 ; move ua , ul )  decode:( move 4 , ul / 4 ; move ua , ul ) 
[7675] c:0 is:( move 3 , 8 ; move ul - ua , 8 )  decode:( move 3 , ua / 4 ; move 5 , 8 ) 
[7676] c:3 is:( move 9 , ul / 6 ; move ua , 2 )  decode:( move 9 , ul / 6 ; move ua , 2 ) 
[7677] c:0 is:( move 5 , ul / 4 ; move ua , 8 )  decode:( move ua , ul / 4 ; move ua , 8 ) 
[7678] c:0 is:( move ua , 2 / 8 ; move ua , 8 )  decode:( move ua , ul / 4 ; move ua , 8 ) 
[7679] c:0 is:( move 4 , 8 ; move ua + ul , 8 )  decode:( move 4 , 8 ; move 8 , 8 ) 
[7680] c:3 is:( move ua , ul / 4 ; move 5 , 9 )  decode:( move ua , ul / 4 ; move 5 , 9 ) 
[7681] c:0 is:( move 9 , 8 ; move 3 - ua , ul )  decode:( move 3 , 9 ; move ua - 3 , ul ) 
[7682] c:0 is:( move 9 , 9 ; move ul - ua , 2 )  decode:( move 9 , 9 ; move ua - 2 , 2 ) 
[7683] c:0 is:( move 9 , 9 ; move ua - ul , 2 )  decode:( move 9 , 9 ; move 5 , 2 ) 
[7684] c:0 is:( move 9 , ul / 6 ; move ua , 3 )  decode:( move 9 , ul / 4 ; move ua , 3 ) 
[7685] c:3 is:( move 9 , 3 ; move ua + ul , 9 )  decode:( move 9 , 3 ; move ua + ul , 9 ) 
[7686] c:0 is:( move ua , 9 ; move 3 , ul - 8 )  decode:( move 3 , 5 ; move ua , ul ) 
[7687] c:3 is:( move 4 , 9 ; move ua + ul , 8 )  decode:( move 4 , 9 ; move ua + ul , 8 ) 
[7688] c:0 is:( move 9 , 2 / 6 ; move ul , ul )  decode:( move 9 , ul / 4 ; move ul , ul ) 
[7689] c:3 is:loop 0 , 3 , move 0 - ua , ua * ua  decode:loop 0 , 3 , move 0 - ua , ua * ua 
[7690] c:1 is:( move ua , 9 * 9 ; move ua , 2 )  decode:loop 0 , 2 , move ua , 0 - 2 
[7691] c:3 is:( move 9 , ul - 9 ; move ua , 2 )  decode:( move 9 , ul - 9 ; move ua , 2 ) 
[7692] c:0 is:( move 9 , 6 ; move ul - ua , 5 )  decode:( move 9 , 9 ; move 5 , 5 ) 
[7693] c:3 is:( move 4 , 9 ; move ul - ua , 7 )  decode:( move 4 , 9 ; move ul - ua , 7 ) 
[7694] c:0 is:( move 9 , ul / ua ; move 5 , 4 )  decode:( move 4 , ul ; move 9 , 0 - 4 ) 
[7695] c:3 is:( move 9 , 8 ; move ua + ul , 4 )  decode:( move 9 , 8 ; move ua + ul , 4 ) 
[7696] c:0 is:( move 3 , 9 ; move ua , ul - 8 )  decode:( move ua , 2 ; move 3 , 7 ) 
[7697] c:0 is:( move ua , 9 ; move ua , 7 * 4 )  decode:( move ua , 9 ; move ua , 3 ) 
[7698] c:3 is:( move 3 , 9 ; move ul - ua , 8 )  decode:( move 3 , 9 ; move ul - ua , 8 ) 
[7699] c:3 is:( move ul - ua , 9 ; move 3 , 8 )  decode:( move ul - ua , 9 ; move 3 , 8 ) 
[7700] c:0 is:( move 9 , 2 ; move 9 - ua , ul )  decode:( move 9 , 2 ; move 3 , ul ) 
[7701] c:0 is:( move ua , 9 ; move ua + 4 , 9 )  decode:( move ua , 9 ; move 4 + 4 , 9 ) 
[7702] c:3 is:( move 9 , 9 ; move 2 - ua , ul )  decode:( move 9 , 9 ; move 2 - ua , ul ) 
[7703] c:0 is:( move ua , 8 / 9 ; move ua , 3 )  decode:( move ua , 4 ; move ua , 3 ) 
[7704] c:0 is:( move 9 , 8 ; move ua - ul , 4 )  decode:( move 9 , ua * ua ; move 5 , 4 ) 
[7705] c:3 is:loop 0 , 2 , move 2 - ua , ua * ua  decode:loop 0 , 2 , move 2 - ua , ua * ua 
[7706] c:0 is:( move 9 , 9 ; move 3 - ua , ul )  decode:( move 9 , 9 ; move 4 , 4 ) 
[7707] c:3 is:( move 4 , 9 ; move ul - ua , 8 )  decode:( move 4 , 9 ; move ul - ua , 8 ) 
[7708] c:0 is:( move 4 , 9 ; move ua - ul , 8 )  decode:( move 4 , 9 ; move 5 , 8 ) 
[7709] c:0 is:( move 9 , 9 ; move 3 , ua * ua )  decode:( move 9 , 9 ; move 4 , ua * ua ) 
[7710] c:3 is:( move ua + ul , 9 ; move 9 , 4 )  decode:( move ua + ul , 9 ; move 9 , 4 ) 
[7711] c:3 is:( move 9 , 9 / ua ; move ua , 2 )  decode:( move 9 , 9 / ua ; move ua , 2 ) 
[7712] c:3 is:( move 3 , 9 ; move ul - ua , 9 )  decode:( move 3 , 9 ; move ul - ua , 9 ) 
[7713] c:3 is:( move 9 , 9 ; move ua + ul , 4 )  decode:( move 9 , 9 ; move ua + ul , 4 ) 
[7714] c:0 is:( move ua , 9 / 2 ; move ua , 9 )  decode:( move ua , ul - 9 ; move ua , 9 ) 
[7715] c:3 is:( move 4 , 9 ; move ua + ul , 9 )  decode:( move 4 , 9 ; move ua + ul , 9 ) 
[7716] c:3 is:loop 0 , 4 , move 0 - ua , ua * ua  decode:loop 0 , 4 , move 0 - ua , ua * ua 
[7717] c:3 is:( move 9 , ua / 3 ; move ua , 9 )  decode:( move 9 , ua / 3 ; move ua , 9 ) 
[7718] c:3 is:( move 0 - ua , 0 ; move ua , ul )  decode:( move 0 - ua , 0 ; move ua , ul ) 
[7719] c:3 is:( move 9 , ul / 9 ; move ua , 2 )  decode:( move 9 , ul / 9 ; move ua , 2 ) 
[7720] c:0 is:loop 0 , 2 , move ua - 3 , ua * ua  decode:loop 0 , 2 , move 3 - ua , ua * ua 
[7721] c:3 is:( move 4 , 9 ; move ul - ua , 9 )  decode:( move 4 , 9 ; move ul - ua , 9 ) 
[7722] c:3 is:loop 0 , 2 , move 3 - ua , ua * ua  decode:loop 0 , 2 , move 3 - ua , ua * ua 
[7723] c:3 is:loop 0 , 3 , move 2 - ua , ua * ua  decode:loop 0 , 3 , move 2 - ua , ua * ua 
[7724] c:0 is:( move ua , 0 ; move 0 - ua , ul )  decode:( move ua , 0 ; move 7 , ua / 3 ) 
[7725] c:0 is:( move ua , 9 ; move 9 , ua / 3 )  decode:( move ua + 3 , 8 ; move ua , ul ) 
[7726] c:3 is:( move ul - ua , 9 ; move 4 , 9 )  decode:( move ul - ua , 9 ; move 4 , 9 ) 
[7727] c:0 is:loop 0 , 3 , move ua - 2 , ua * ua  decode:loop 0 , 3 , move 4 , ua * ua 
[7728] c:0 is:( move 9 , 9 / ua ; move ua , 3 )  decode:( move ua , 9 / ua ; move 8 , 3 ) 
[7729] c:2 is:( move 4 , 9 ; move 9 , ua * ua )  decode:( move 4 , 9 ; move 9 , 9 + 4 ) 
[7730] c:3 is:( move ua , ul / 9 ; move 9 , 2 )  decode:( move ua , ul / 9 ; move 9 , 2 ) 
[7731] c:0 is:( move 9 , 9 + 4 ; move ul , ul )  decode:( move ua , 9 + 4 ; move 3 , ul ) 
[7732] c:0 is:( move ua , 9 / ua ; move 8 , 4 )  decode:loop 0 , 2 , move ua + v0 , 0 - 4 
[7733] c:3 is:loop 0 , 3 , move 3 - ua , ua * ua  decode:loop 0 , 3 , move 3 - ua , ua * ua 
[7734] c:0 is:loop 0 , 4 , move ua - 2 , ua * ua  decode:loop 0 , 4 , move 5 , ua * ua 
[7735] c:0 is:loop 0 , 4 , move 0 - v0 , 0 - 2  decode:loop 0 , 4 , move 2 - 2 , v0 - 2 
[7736] c:0 is:loop 0 , 4 , move 0 - 2 , 0 - v0  decode:loop 0 , 3 , move 0 - 3 , 0 - v0 
[7737] c:3 is:loop 0 , 3 , move 0 - 3 , 0 - v0  decode:loop 0 , 3 , move 0 - 3 , 0 - v0 
[7738] c:3 is:loop 0 , 2 , move ua + ul , ua / 3  decode:loop 0 , 2 , move ua + ul , ua / 3 
[7739] c:3 is:( move ua , ul / 5 ; move 7 , 9 )  decode:( move ua , ul / 5 ; move 7 , 9 ) 
[7740] c:3 is:( move ua + ul , 0 ; move ua , 2 )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[7741] c:3 is:loop 0 , 3 , move ua - 3 , ua * ua  decode:loop 0 , 3 , move ua - 3 , ua * ua 
[7742] c:3 is:( move ua , 0 ; move ua + ul , 2 )  decode:( move ua , 0 ; move ua + ul , 2 ) 
[7743] c:3 is:loop 0 , 4 , move 2 - ua , ua * ua  decode:loop 0 , 4 , move 2 - ua , ua * ua 
[7744] c:3 is:( move ua , 0 ; move 2 - ua , ul )  decode:( move ua , 0 ; move 2 - ua , ul ) 
[7745] c:0 is:loop 0 , 3 , move ul + ua , ua / 3  decode:loop 0 , 3 , move ua + v0 , ua / 3 
[7746] c:0 is:( move ua - 2 , 0 ; move ua , ul )  decode:( move 4 , 0 ; move ua , ul ) 
[7747] c:0 is:( move ua , 0 ; move ua - ul , 2 )  decode:( move ua , 0 ; move ul - ua , 2 ) 
[7748] c:3 is:loop 0 , 4 , move ua - 3 , ua * ua  decode:loop 0 , 4 , move ua - 3 , ua * ua 
[7749] c:0 is:( move 0 - ua , 2 ; move ua , ul )  decode:( move ua , 2 ; move ua , ua / 3 ) 
[7750] c:0 is:( move ua - ul , 0 ; move ua , 2 )  decode:( move 5 , 0 ; move ua , 2 ) 
[7751] c:3 is:( move ua + ul , 0 ; move 2 , ul )  decode:( move ua + ul , 0 ; move 2 , ul ) 
[7752] c:3 is:( move ua , ul ; move ua , 0 - 2 )  decode:( move ua , ul ; move ua , 0 - 2 ) 
[7753] c:0 is:( move ul - ua , 0 ; move ua , 2 )  decode:( move - ul , 0 ; ; move ua , 2 ) 
[7754] c:0 is:( move 9 , ul / 9 ; move ua , 4 )  decode:( move 9 , ul / ua ; move ua , 4 ) 
[7755] c:0 is:loop 0 , 4 , move 2 + v0 , 0 - 2  decode:loop 0 , 4 , move ua - 2 , v0 - 2 
[7756] c:0 is:( move ua , 0 ; move ua - 2 , ul )  decode:( move ua , 0 ; move 4 , ul ) 
[7757] c:3 is:loop 0 , 2 , move ul - ua , ua / 3  decode:loop 0 , 2 , move ul - ua , ua / 3 
[7758] c:0 is:loop 0 , 2 , move ul - ua , 3 / ua  decode:loop 0 , 2 , move ul - ua , ua / ua 
[7759] c:3 is:loop 0 , 2 , move ul - ua , ua / 3  decode:loop 0 , 2 , move ul - ua , ua / 3 
[7760] c:3 is:loop 0 , 3 , move 3 + v0 , 0 - 2  decode:loop 0 , 3 , move 3 + v0 , 0 - 2 
[7761] c:1 is:loop 0 , 2 , move ua - ul , ua / 3  decode:( move ua , ua / 6 ; move 4 , ua ) 
[7762] c:0 is:loop 0 , 2 , move 4 + v0 , 0 - 2  decode:( move 5 , 2 - 9 ; move 4 , 2 ) 
[7763] c:3 is:loop 0 , 2 , move ua + ul , ua / 4  decode:loop 0 , 2 , move ua + ul , ua / 4 
[7764] c:3 is:( move ua , 0 ; move ul - ua , 2 )  decode:( move ua , 0 ; move ul - ua , 2 ) 
[7765] c:3 is:( move 2 , 0 ; move ua , ua * ua )  decode:( move 2 , 0 ; move ua , ua * ua ) 
[7766] c:0 is:( move 2 , 0 ; move ua + ul , ul )  decode:( move 2 , 0 ; move 8 , ul ) 
[7767] c:3 is:( move ul - ua , 0 ; move ul , 2 )  decode:( move ul - ua , 0 ; move ul , 2 ) 
[7768] c:3 is:( move 3 , 0 ; move ua , ua * ua )  decode:( move 3 , 0 ; move ua , ua * ua ) 
[7769] c:0 is:( move ua , 0 - 2 ; move ul , ul )  decode:( move ul , 0 ; move ua , ul / 4 ) 
[7770] c:3 is:loop 0 , 2 , move ul - ua , ua / 4  decode:loop 0 , 2 , move ul - ua , ua / 4 
[7771] c:0 is:loop 0 , 5 , move ua - 3 , ua - ul  decode:loop 0 , 4 , move 4 , ua / 3 - v0 
[7772] c:0 is:loop 0 , 3 , move v0 - 3 , 0 - 2  decode:loop 0 , 2 , move 0 - 3 , 0 - 4 
[7773] c:3 is:loop 0 , 3 , move 0 - 2 , v0 * 2  decode:loop 0 , 3 , move 0 - 2 , v0 * 2 
[7774] c:3 is:loop 0 , 4 , move 0 - 3 , v0 + 2  decode:loop 0 , 4 , move 0 - 3 , v0 + 2 
[7775] c:0 is:loop 0 , 4 , move 3 + v0 , 0 - 2  decode:loop 0 , 3 , move v0 + 4 , 0 - 2 
[7776] c:3 is:loop 0 , 4 , move 0 - 2 , v0 + 3  decode:loop 0 , 4 , move 0 - 2 , v0 + 3 
[7777] c:0 is:( move 0 - 2 , ul ; move ua , ul )  decode:( move 2 , 0 - ul ; move ua , ul ) 
[7778] c:3 is:loop 0 , 4 , move 3 , 0 - 2 + v0  decode:loop 0 , 4 , move 3 , 0 - 2 + v0 
[7779] c:0 is:( move ua + ul , 0 ; move 3 , ul )  decode:( move 4 + 3 , 0 ; move 3 , ul ) 
[7780] c:3 is:( move ul , 0 ; move ul - ua , 2 )  decode:( move ul , 0 ; move ul - ua , 2 ) 
[7781] c:0 is:loop 0 , 3 , move 2 , 2 * 0 - v0  decode:loop 0 , 3 , move 2 , 0 - v0 / 2 
[7782] c:0 is:( move ua , 0 ; move ua + ul , 4 )  decode:( move ua , 0 ; move 7 , 4 ) 
[7783] c:0 is:( move 2 , 0 ; move ul - ua , ul )  decode:( move ua - ul , 0 ; move 5 , ul ) 
[7784] c:3 is:( move ul , 0 - 2 ; move ua , ul )  decode:( move ul , 0 - 2 ; move ua , ul ) 
[7785] c:3 is:loop 0 , 2 , move 0 - 4 , 3 + v0  decode:loop 0 , 2 , move 0 - 4 , 3 + v0 
[7786] c:3 is:( move ua + 2 , ul ; move ua , 2 )  decode:( move ua + 2 , ul ; move ua , 2 ) 
[7787] c:3 is:( move ul , ul ; move ua , 0 - 2 )  decode:( move ul , ul ; move ua , 0 - 2 ) 
[7788] c:0 is:loop 0 , 3 , move ua + ul , ua / 4  decode:loop 0 , 3 , move 4 + 3 , ua / 4 
[7789] c:0 is:loop 0 , 3 , move 3 - v0 , 0 - 2  decode:0 0 loop 0 , 2 , move 3 , 0 - 0 
[7790] c:3 is:( move 0 - ua , 3 ; move ua , ul )  decode:( move 0 - ua , 3 ; move ua , ul ) 
[7791] c:0 is:( move 9 , 9 / 4 ; move ul , ul )  decode:( move ul , 9 ; move 9 , 2 / 4 ) 
[7792] c:0 is:loop 0 , 4 , move 4 - ua , ua * ua  decode:loop 0 , 3 , move 0 - 3 , ua * ua 
[7793] c:0 is:loop 0 , 4 , move ua - 4 , ua * ua  decode:loop 0 , 3 , move 3 , ua * ua 
[7794] c:3 is:loop 0 , 4 , move 0 - 4 , 0 - v0  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[7795] c:0 is:loop 0 , 3 , move 4 + v0 , 0 - 2  decode:loop 0 , 3 , move v0 - ua , 0 - 2 
[7796] c:3 is:( move ua + ul , 0 ; move ua , 4 )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[7797] c:3 is:( move ul , 0 ; move ua + 3 , ul )  decode:( move ul , 0 ; move ua + 3 , ul ) 
[7798] c:0 is:loop 0 , 2 , move ua - ul , 4 / ua  decode:loop 0 , 2 , move ua - ul , ua / ua 
[7799] c:0 is:( move 0 - ua , ul ; move 2 , ul )  decode:( move ua , ul ; move 2 , 4 ) 
[7800] c:0 is:( move ua , ul ; move ua + 2 , 2 )  decode:( move ua , ul ; move 8 , 2 ) 
[7801] c:3 is:( move ua , 0 ; move 3 , ua * ua )  decode:( move ua , 0 ; move 3 , ua * ua ) 
[7802] c:0 is:( move ua , 0 - 3 ; move ua , ul )  decode:( move 0 - ua , 0 ; move ua , ul ) 
[7803] c:3 is:( move ua + ul , 2 ; move ua , 2 )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[7804] c:0 is:loop 0 , 3 , move 0 - 3 , 3 + v0  decode:loop 0 , 3 , move 3 - ua , 3 + v0 
[7805] c:0 is:( move ua , ul ; move 0 - 2 , ul )  decode:( move ua , ul ; move 2 , 4 ) 
[7806] c:3 is:( move ul - ua , 0 ; move 2 , ul )  decode:( move ul - ua , 0 ; move 2 , ul ) 
[7807] c:3 is:loop 0 , 3 , move ul - ua , ua / 3  decode:loop 0 , 3 , move ul - ua , ua / 3 
[7808] c:0 is:( move ua - 3 , 0 ; move ua , ul )  decode:( move 3 , 0 ; move ua , ul ) 
[7809] c:0 is:loop 0 , 5 , move 3 - ua , ua * ua  decode:loop 0 , 4 , move 0 - 4 , 9 * 3 
[7810] c:0 is:loop 0 , 2 , move ul - ua , 4 / ua  decode:loop 0 , 4 , move ul - ua , ua / ua 
[7811] c:3 is:( move 2 - ua , ul ; move ua , 2 )  decode:( move 2 - ua , ul ; move ua , 2 ) 
[7812] c:3 is:( move ua , ua * ua ; move 2 , 2 )  decode:( move ua , ua * ua ; move 2 , 2 ) 
[7813] c:0 is:( move ua , ul ; move ua - 2 , 2 )  decode:( move ua , ul ; move 4 , 2 ) 
[7814] c:0 is:loop 0 , 3 , move 0 - 3 , v0 + 4  decode:loop 0 , 3 , move 3 , v0 + 4 
[7815] c:0 is:loop 0 , 7 , move 2 - ua , ua * ua  decode:loop 0 , 4 , move ua - ul , 0 - 2 
[7816] c:3 is:loop 0 , 4 , move 0 - 2 , 4 + v0  decode:loop 0 , 4 , move 0 - 2 , 4 + v0 
[7817] c:3 is:( move ua - 4 , 0 ; move ua , ul )  decode:( move ua - 4 , 0 ; move ua , ul ) 
[7818] c:0 is:( move ua , ul ; move ua , 0 - 4 )  decode:( move ua , ul / 6 ; move ua , 4 ) 
[7819] c:0 is:loop 0 , 4 , move 2 , 0 - v0 + 4  decode:loop 0 , 4 , move 2 , 0 - v0 / 4 
[7820] c:3 is:( move ua , 0 ; move ua + ul , 5 )  decode:( move ua , 0 ; move ua + ul , 5 ) 
[7821] c:3 is:( move 0 - ua , 4 ; move ua , ul )  decode:( move 0 - ua , 4 ; move ua , ul ) 
[7822] c:3 is:( move ul , 0 ; move ua , 2 / ua )  decode:( move ul , 0 ; move ua , 2 / ua ) 
[7823] c:3 is:( move 0 - ua , ul ; move 3 , ul )  decode:( move 0 - ua , ul ; move 3 , ul ) 
[7824] c:3 is:( move ua + 3 , ul ; move ua , 2 )  decode:( move ua + 3 , ul ; move ua , 2 ) 
[7825] c:0 is:loop 0 , 4 , move 0 - 3 , 3 + v0  decode:loop 0 , 4 , move 3 - ua , v0 + 3 
[7826] c:0 is:( move ua - 2 , ul ; move ua , 2 )  decode:( move 4 , ul ; move ua , 2 ) 
[7827] c:3 is:loop 0 , 4 , move 2 , 2 * 0 - v0  decode:loop 0 , 4 , move 2 , 2 * 0 - v0 
[7828] c:0 is:loop 0 , 3 , move 3 + v0 , 0 - 4  decode:loop 0 , 3 , move 4 , 0 - 4 
[7829] c:0 is:( move 2 , ua * ua ; move ua , 2 )  decode:( move 2 , 8 ; move ua , 2 ) 
[7830] c:0 is:loop 0 , 3 , move 0 - 2 , 2 / v0  decode:loop 0 , 3 , move 2 - 4 , 2 / v0 
[7831] c:3 is:( move 2 , 2 ; move ua + ul , ul )  decode:( move 2 , 2 ; move ua + ul , ul ) 
[7832] c:0 is:loop 0 , 3 , move 4 , 0 - v0 + 3  decode:loop 0 , 3 , move 4 , 0 - v0 + 4 
[7833] c:0 is:loop 0 , 3 , move v0 + 2 , 0 - 5  decode:loop 0 , 3 , move v0 + ul , 4 / 3 
[7834] c:0 is:( move 2 / ua , 0 ; move ua , ul )  decode:( move ul , 0 ; move ua , ul ) 
[7835] c:0 is:loop 0 , 2 , move ua - ul , ua / 5  decode:loop 0 , 3 , move ua - 2 , ua / 5 
[7836] c:0 is:( move ua + 2 , ul ; move 2 , ul )  decode:( move 9 , ul ; move 2 , ul ) 
[7837] c:0 is:( move ua , ul ; move 2 - ua , 2 )  decode:( move ua , ul ; move 4 , 5 ) 
[7838] c:3 is:loop 0 , 4 , move 0 - 4 , v0 + 2  decode:loop 0 , 4 , move 0 - 4 , v0 + 2 
[7839] c:0 is:( move ua , 2 ; move ua + ul , 3 )  decode:( move ua , ua / 3 ; move 8 , 3 ) 
[7840] c:0 is:loop 0 , 4 , move 4 + v0 , 0 - 2  decode:loop 0 , 4 , move v0 + 4 , 0 - 2 
[7841] c:0 is:loop 0 , 4 , move 2 * v0 , 0 - 2  decode:loop 0 , 3 , move 4 , v0 - 2 
[7842] c:3 is:( move 2 , 2 ; move ua , ua * ua )  decode:( move 2 , 2 ; move ua , ua * ua ) 
[7843] c:0 is:loop 0 , 4 , move 4 , 0 - v0 + 2  decode:loop 0 , 4 , move 0 - 4 , v0 + 8 
[7844] c:3 is:loop 0 , 3 , move 0 - 4 , v0 + 3  decode:loop 0 , 3 , move 0 - 4 , v0 + 3 
[7845] c:0 is:( move ua , 4 ; move 0 - ua , ul )  decode:( move ua , 4 ; move ua , ua / 3 ) 
[7846] c:0 is:( move ua , 0 ; move ua - 4 , ul )  decode:( move ua , 0 ; move 3 , ul ) 
[7847] c:3 is:( move 4 , 0 ; move ua , ua * ua )  decode:( move 4 , 0 ; move ua , ua * ua ) 
[7848] c:0 is:loop 0 , 3 , move 0 - 3 , v0 * 2  decode:loop 0 , 4 , move ua - 4 , v0 * 2 
[7849] c:3 is:( move ua , 3 ; move ua + ul , 2 )  decode:( move ua , 3 ; move ua + ul , 2 ) 
[7850] c:0 is:( move ua , 0 ; move ua - ul , 4 )  decode:( move ua , 0 ; move 5 , 4 ) 
[7851] c:0 is:loop 0 , 4 , move 2 + v0 , 0 - 4  decode:loop 0 , 4 , move ua - 2 , 0 - 4 
[7852] c:0 is:loop 0 , 4 , move 0 - 5 , 0 - v0  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[7853] c:0 is:( move ua , 0 ; move 4 - ua , ul )  decode:( move ua , 0 ; move  4 , 4 ) 
[7854] c:0 is:loop 0 , 4 , move ua + ul , ua / 4  decode:loop 0 , 4 , move 4 + 3 , ua / 4 
[7855] c:0 is:loop 0 , 3 , move 0 - 2 , v0 / 2  decode:loop 0 , 4 , move 0 - v0 , 2 / 2 
[7856] c:0 is:( move ua , 0 ; move ua , ua / 3 )  decode:( move ua , 0 ; move 6 , ua / 3 ) 
[7857] c:0 is:loop 0 , 2 , move 4 + 2 , v0 - 2  decode:loop 0 , 2 , move ua , v0 - 2 
[7858] c:0 is:loop 0 , 3 , move 3 + 3 , 2 + v0  decode:loop 0 , 3 , move ua , 2 + 3 / v0 
[7859] c:0 is:loop 0 , 3 , move 0 - 3 , v0 - 3  decode:loop 0 , 3 , move 3 , v0 - 3 
[7860] c:0 is:loop 0 , 4 , move v0 + 3 , 0 - 3  decode:loop 0 , 4 , move 4 , 0 - 3 
[7861] c:0 is:( move ua , ul ; move 0 - 3 , ul )  decode:( move ua , ul ; move 3 , ua / 3 ) 
[7862] c:3 is:loop 0 , 4 , move 0 - 2 , v0 * 2  decode:loop 0 , 4 , move 0 - 2 , v0 * 2 
[7863] c:0 is:( move ua + ul , 2 ; move 2 , ul )  decode:( move 8 , 2 ; move 2 , ul ) 
[7864] c:3 is:loop 0 , 3 , move v0 + 2 , 2 - 3  decode:loop 0 , 3 , move v0 + 2 , 2 - 3 
[7865] c:0 is:loop 0 , 5 , move ua - 4 , ua - ul  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[7866] c:3 is:( move ua + ul , 3 ; move ua , 2 )  decode:( move ua + ul , 3 ; move ua , 2 ) 
[7867] c:0 is:loop 0 , 4 , move 0 - 2 , 3 - v0  decode:( move 3 , ua * ua ; move 5 , 4 ) 
[7868] c:3 is:( move 9 , 9 ; move ua + ul , 9 )  decode:( move 9 , 9 ; move ua + ul , 9 ) 
[7869] c:3 is:( move ul - ua , 0 ; move 3 , ul )  decode:( move ul - ua , 0 ; move 3 , ul ) 
[7870] c:3 is:loop 0 , 3 , move ul - ua , ua / 4  decode:loop 0 , 3 , move ul - ua , ua / 4 
[7871] c:3 is:( move 2 - ua , 2 ; move ua , ul )  decode:( move 2 - ua , 2 ; move ua , ul ) 
[7872] c:3 is:( move ua , 2 ; move ua - 2 , ul )  decode:( move ua , 2 ; move ua - 2 , ul ) 
[7873] c:0 is:( move 3 , ul ; move 0 - ua , ul )  decode:( move 3 , ul ; move ua , ua / 4 ) 
[7874] c:3 is:( move ul - ua , 3 ; move ua , 2 )  decode:( move ul - ua , 3 ; move ua , 2 ) 
[7875] c:0 is:( move 4 , 0 ; move ua - ul , ul )  decode:( move 4 , 0 ; move ul - ua , ul ) 
[7876] c:3 is:loop 0 , 4 , move 0 - 5 , v0 + 2  decode:loop 0 , 4 , move 0 - 5 , v0 + 2 
[7877] c:0 is:loop 0 , 3 , move 0 - 3 , v0 / 2  decode:loop 0 , 4 , move 0 - 2 , v0 / 2 
[7878] c:0 is:loop 0 , 3 , move 0 - 4 , v0 - 3  decode:loop 0 , 3 , move 4 , v0 - 3 
[7879] c:3 is:( move ua + 3 , 2 ; move ul , ul )  decode:( move ua + 3 , 2 ; move ul , ul ) 
[7880] c:0 is:( move ua , 2 ; move 3 - ua , ul )  decode:( move ua , 2 ; move 3 , ua / 3 ) 
[7881] c:0 is:loop 0 , 2 , move 4 + v0 , 2 - 3  decode:loop 0 , 2 , move 2 - ua , 2 - 3 
[7882] c:3 is:loop 0 , 3 , move 0 - 3 , 4 - v0  decode:loop 0 , 3 , move 0 - 3 , 4 - v0 
[7883] c:3 is:( move ua + ul , 3 ; move 2 , ul )  decode:( move ua + ul , 3 ; move 2 , ul ) 
[7884] c:0 is:loop 0 , 4 , move 0 - 3 , 3 - v0  decode:loop 0 , 3 , move 3 , 3 - v0 
[7885] c:0 is:( move ua , ul ; move 0 - ua , 5 )  decode:( move ua , ul ; move ua , 5 ) 
[7886] c:3 is:( move ua , 3 ; move ul - ua , 2 )  decode:( move ua , 3 ; move ul - ua , 2 ) 
[7887] c:0 is:( move ua - ul , 0 ; move ua , 5 )  decode:( move 5 , 0 ; move ua , 5 ) 
[7888] c:3 is:( move ua + 3 , ul ; move ul , 2 )  decode:( move ua + 3 , ul ; move ul , 2 ) 
[7889] c:3 is:loop 0 , 4 , move ua - 4 , ul / ua  decode:loop 0 , 4 , move ua - 4 , ul / ua 
[7890] c:3 is:( move ua + ul , 4 ; move ua , 2 )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[7891] c:0 is:( move ua + ul , 2 ; move ua , 4 )  decode:( move 7 , 2 ; move ua , 4 ) 
[7892] c:0 is:( move ua - ul , 3 ; move ua , 2 )  decode:( move 5 , 3 ; move ua , 2 ) 
[7893] c:0 is:loop 0 , 3 , move 3 + 4 , v0 + 2  decode:loop 0 , 3 , move ua + ul , 2 + v0 
[7894] c:0 is:loop 0 , 3 , move 3 + v0 , 0 - 5  decode:loop 0 , 3 , move 4 , 0 - 5 
[7895] c:0 is:( move 5 , 0 ; move ua + ul , ul )  decode:( move 2 - ua , 0 ; move 9 , ul ) 
[7896] c:3 is:( move ua + 2 , ul ; move ua , 4 )  decode:( move ua + 2 , ul ; move ua , 4 ) 
[7897] c:0 is:loop 0 , 5 , move 3 + v0 , 0 - 3  decode:loop 0 , 4 , move v0 - ua , 3 0 0 0 
[7898] c:0 is:loop 0 , 5 , move ul + ul , 3 / ua  decode:loop 0 , 4 , move ul + v0 , 4 / 3 
[7899] c:0 is:( move ua , 2 ; move ua - 3 , ul )  decode:( move ua , 2 ; move 3 , ul ) 
[7900] c:0 is:loop 0 , 3 , move 4 , 0 - 2 * v0  decode:loop 0 , 3 , move 2 - ua , 0 - 0 2 
[7901] c:0 is:loop 0 , 3 , move ua - ul , ua / 5  decode:loop 0 , 3 , move 4 , 0 - 5 
[7902] c:0 is:loop 0 , 3 , move v0 + 3 , 2 - 3  decode:loop 0 , 3 , move ua - 3 , v0 - 3 
[7903] c:0 is:loop 1 , 5 , move ua / 2 , ua - ul  decode:loop 0 , 4 , move 0 - 4 , 0 - 5 
[7904] c:0 is:( move ua , ul ; move 3 - ua , 2 )  decode:( move ua , ul ; move 3 , 5 ) 
[7905] c:3 is:( move ua , 0 ; move ua - ul , 5 )  decode:( move ua , 0 ; move ua - ul , 5 ) 
[7906] c:0 is:( move ua - 3 , 2 ; move ua , ul )  decode:( move 3 , 2 ; move ua , ul ) 
[7907] c:0 is:( move ua - ul , 2 ; move ua , 3 )  decode:( move ua , 2 ; move ua , 3 ) 
[7908] c:3 is:( move 0 - ua , ul ; move 4 , ul )  decode:( move 0 - ua , ul ; move 4 , ul ) 
[7909] c:3 is:( move 3 , 2 ; move ua , ua * ua )  decode:( move 3 , 2 ; move ua , ua * ua ) 
[7910] c:0 is:loop 0 , 3 , move v0 * 4 , 0 - 2  decode:loop 0 , 4 , move v0 * 2 , 0 - 2 
[7911] c:3 is:( move 0 - ua , 5 ; move ua , ul )  decode:( move 0 - ua , 5 ; move ua , ul ) 
[7912] c:3 is:( move ua + ul , ul ; move 3 , 2 )  decode:( move ua + ul , ul ; move 3 , 2 ) 
[7913] c:0 is:( move ua - 2 , 3 ; move ua , ul )  decode:( move 4 , 3 ; move ua , ul ) 
[7914] c:0 is:( move ua , 5 ; move 0 - ua , ul )  decode:( move ua , 6 ; move ua , ua / 3 ) 
[7915] c:3 is:( move ul , 3 ; move ua + 2 , ul )  decode:( move ul , 3 ; move ua + 2 , ul ) 
[7916] c:3 is:( move ul - ua , 0 ; move ua , 5 )  decode:( move ul - ua , 0 ; move ua , 5 ) 
[7917] c:3 is:loop 0 , 3 , move 0 - 4 , 3 - v0  decode:loop 0 , 3 , move 0 - 4 , 3 - v0 
[7918] c:3 is:( move 0 - 4 , ul ; move ua , ul )  decode:( move 0 - 4 , ul ; move ua , ul ) 
[7919] c:0 is:loop 0 , 4 , move 2 + v0 , 2 - 3  decode:loop 0 , 4 , move 3 , 3 - v0 
[7920] c:3 is:( move 2 , 3 ; move ua + ul , ul )  decode:( move 2 , 3 ; move ua + ul , ul ) 
[7921] c:0 is:( move ul , 4 ; move 0 - ua , ul )  decode:( move ul , 4 ; move ua , 4 ) 
[7922] c:0 is:( move ul , ul ; move 0 - ua , 4 )  decode:( move ul , ul ; move ua , ul ) 
[7923] c:0 is:( move ua , 3 ; move ua - ul , 2 )  decode:( move ua , 3 ; move ul - ua , 2 ) 
[7924] c:0 is:( move ua , 0 - 4 ; move ul , ul )  decode:( move ul , ul ; move ua , 2 - 3 ) 
[7925] c:0 is:loop 0 , 4 , move v0 - 4 , 0 - 2  decode:loop 0 , 3 , move v0 - 4 , 0 - 2 
[7926] c:3 is:( move 0 - ua , ul ; move ua , 5 )  decode:( move 0 - ua , ul ; move ua , 5 ) 
[7927] c:0 is:loop 0 , 4 , move 0 - 2 , 2 / v0  decode:loop 0 , 4 , move 2 , 2 / v0 
[7928] c:3 is:( move ua , 2 / ua ; move ua , 2 )  decode:( move ua , 2 / ua ; move ua , 2 ) 
[7929] c:3 is:( move ua , 0 ; move ul - ua , 5 )  decode:( move ua , 0 ; move ul - ua , 5 ) 
[7930] c:3 is:( move ua , 2 ; move 3 , ua * ua )  decode:( move ua , 2 ; move 3 , ua * ua ) 
[7931] c:3 is:( move ul , 0 ; move 4 , ua * ua )  decode:( move ul , 0 ; move 4 , ua * ua ) 
[7932] c:3 is:( move 5 , 0 ; move ua , ua * ua )  decode:( move 5 , 0 ; move ua , ua * ua ) 
[7933] c:3 is:loop 0 , 4 , move 0 - 3 , v0 * 2  decode:loop 0 , 4 , move 0 - 3 , v0 * 2 
[7934] c:0 is:loop 0 , 6 , move ua - ul , ul - 3  decode:loop 0 , 4 , move ua , 0 - 9 
[7935] c:3 is:loop 0 , 4 , move 0 - 2 , v0 / 2  decode:loop 0 , 4 , move 0 - 2 , v0 / 2 
[7936] c:0 is:loop 0 , 4 , move 0 - 2 , 4 - v0  decode:loop 0 , 3 , move 0 - 4 , 4 - v0 
[7937] c:3 is:( move 3 , 2 ; move ua + ul , ul )  decode:( move 3 , 2 ; move ua + ul , ul ) 
[7938] c:0 is:( move ua , 3 ; move 2 - ua , ul )  decode:( move ua , 3 ; move 5 , ua / 3 ) 
[7939] c:0 is:loop 0 , 4 , move v0 + 3 , 0 - 4  decode:loop 0 , 4 , move ua - 2 , 0 - 4 
[7940] c:0 is:loop 0 , 3 , move 4 + v0 , 0 - 4  decode:loop 0 , 3 , move v0 + 4 , 0 - 4 
[7941] c:0 is:loop 0 , 2 , move 0 - 4 , 4 - v0  decode:( move 3 , ul ; move 4 , 3 ) 
[7942] c:3 is:( move ua , 2 ; move ua + ul , 4 )  decode:( move ua , 2 ; move ua + ul , 4 ) 
[7943] c:0 is:( move 2 , 2 ; move ua - ul , ul )  decode:( move 2 , 2 ; move ul - ua , ul ) 
[7944] c:0 is:loop 0 , 4 , move v0 * 3 , 0 - 2  decode:loop 0 , 4 , move v0 * 3 , 0 - 9 
[7945] c:3 is:loop 0 , 3 , move 0 - 3 , 2 / v0  decode:loop 0 , 3 , move 0 - 3 , 2 / v0 
[7946] c:1 is:( move ul - ua , 0 ; move 4 , ul )  decode:( move ul - ua , 0 ; move 4 , ul ) 
[7947] c:0 is:loop 0 , 4 , move 0 - 3 , v0 - 3  decode:loop 0 , 4 , move v0 + ul , 2 / 3 
[7948] c:3 is:loop 0 , 4 , move ul - ua , ua / 4  decode:loop 0 , 4 , move ul - ua , ua / 4 
[7949] c:0 is:( move ua + ul , 3 ; move ua , 3 )  decode:loop 0 , 3 , move v0 + 4 , 3 
[7950] c:3 is:( move ua + ul , 2 ; move 3 , ul )  decode:( move ua + ul , 2 ; move 3 , ul ) 
[7951] c:3 is:( move ul - ua , 0 ; move ul , 4 )  decode:( move ul - ua , 0 ; move ul , 4 ) 
[7952] c:3 is:( move 4 , 0 ; move ul - ua , ul )  decode:( move 4 , 0 ; move ul - ua , ul ) 
[7953] c:0 is:( move 3 - ua , 2 ; move ua , ul )  decode:( move 3 , 2 ; move ua , ul ) 
[7954] c:3 is:loop 0 , 3 , move 0 - 4 , v0 * 2  decode:loop 0 , 3 , move 0 - 4 , v0 * 2 
[7955] c:3 is:loop 0 , 4 , move 3 , 2 * 0 - v0  decode:loop 0 , 4 , move 3 , 2 * 0 - v0 
[7956] c:3 is:( move ua , 4 ; move ua + ul , 2 )  decode:( move ua , 4 ; move ua + ul , 2 ) 
[7957] c:3 is:( move 2 , 3 ; move ua , ua * ua )  decode:( move 2 , 3 ; move ua , ua * ua ) 
[7958] c:0 is:loop 0 , 5 , move ua - ul , ul - 4  decode:loop 0 , 4 , move v0 - 4 , 4 0 3 0 0 0 0 - 
[7959] c:0 is:loop 0 , 4 , move 0 - 3 , 4 - v0  decode:loop 0 , 4 , move 3 - ua , 4 - v0 
[7960] c:0 is:( move ua - 4 , ul ; move ua , 2 )  decode:( move 3 , ul ; move ua , 2 ) 
[7961] c:3 is:( move ua , 3 ; move 3 - ua , ul )  decode:( move ua , 3 ; move 3 - ua , ul ) 
[7962] c:0 is:( move ua , 4 ; move 2 - ua , ul )  decode:( move ua , 4 ; move 4 , ua / 3 ) 
[7963] c:3 is:( move ua + ul , 3 ; move ua , 4 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[7964] c:0 is:loop 0 , 2 , move 4 - v0 , 2 - 3  decode:loop 0 , 2 , move 4 , 2 - v0 
[7965] c:3 is:( move ua + ul , 5 ; move ua , 2 )  decode:( move ua + ul , 5 ; move ua , 2 ) 
[7966] c:3 is:( move ua , ul ; move ua + 3 , 4 )  decode:( move ua , ul ; move ua + 3 , 4 ) 
[7967] c:0 is:loop 0 , 3 , move 4 , 0 - v0 * 3  decode:loop 0 , 4 , move 3 , 0 - 3 - v0 
[7968] c:0 is:loop 0 , 3 , move 3 + 3 , v0 - 3  decode:loop 0 , 3 , move 3 + 3 , 3 / v0 
[7969] c:3 is:( move ua , 0 ; move 6 , ua * ua )  decode:( move ua , 0 ; move 6 , ua * ua ) 
[7970] c:3 is:( move ul - ua , 2 ; move ua , 4 )  decode:( move ul - ua , 2 ; move ua , 4 ) 
[7971] c:0 is:loop 0 , 3 , move 0 - 4 , v0 / 2  decode:loop 0 , 4 , move v0 - 4 , 2 / 4 
[7972] c:0 is:loop 0 , 3 , move 3 , 4 * 0 - v0  decode:loop 0 , 4 , move ua - 4 , 4 * v0 
[7973] c:0 is:loop 0 , 3 , move 4 * v0 , 0 - 3  decode:loop 0 , 3 , move 2 - ua , 0 - 9 
[7974] c:0 is:( move 2 , 3 ; move ua - ul , ul )  decode:( move 5 , 4 ; move 2 , ul ) 
[7975] c:3 is:loop 0 , 4 , move 0 - 2 , v0 / 3  decode:loop 0 , 4 , move 0 - 2 , v0 / 3 
[7976] c:0 is:loop 0 , 4 , move 0 - v0 , 2 / 3  decode:loop 0 , 3 , move 2 , ua / 3 - v0 
[7977] c:3 is:( move 3 , ua * ua ; move 2 , ul )  decode:( move 3 , ua * ua ; move 2 , ul ) 
[7978] c:0 is:( move 0 - ua , ul ; move ua , 6 )  decode:( move 7 , 4 ; move ua , 0 - 9 ) 
[7979] c:0 is:loop 0 , 3 , move v0 + 2 , 2 / 3  decode:loop 0 , 4 , move 2 , 2 / 3 
[7980] c:0 is:( move ua , ul ; move 0 - ua , 6 )  decode:( move ua , ul ; move ua , 9 ) 
[7981] c:0 is:loop 0 , 2 , move v0 + 3 , 3 / 2  decode:loop 0 , 2 , move 3 , 3 / 2 
[7982] c:0 is:( move ul , 3 ; move ul - ua , 2 )  decode:( move ul , 3 ; move ua - ul , 2 ) 
[7983] c:3 is:( move 2 , 4 ; move ua + ul , ul )  decode:( move 2 , 4 ; move ua + ul , ul ) 
[7984] c:3 is:loop 0 , 4 , move v0 * 3 , 0 - 3  decode:loop 0 , 4 , move v0 * 3 , 0 - 3 
[7985] c:0 is:loop 0 , 4 , move 0 - 2 , 3 / v0  decode:loop 0 , 4 , move 0 - v0 , 3 / 3 
[7986] c:0 is:loop 0 , 4 , move 3 , v0 * 0 - 3  decode:loop 0 , 4 , move 3 , 0 - 9 0 
[7987] c:0 is:loop 0 , 4 , move 5 + v0 , 0 - 3  decode:loop 0 , 4 , move ua + v0 , 0 - 3 
[7988] c:0 is:loop 0 , 4 , move ua - ul , ua / 5  decode:loop 0 , 4 , move ul - ua , 0 - 5 
[7989] c:3 is:( move ul , 4 ; move ua + 2 , ul )  decode:( move ul , 4 ; move ua + 2 , ul ) 
[7990] c:3 is:( move ua + ul , 4 ; move 2 , ul )  decode:( move ua + ul , 4 ; move 2 , ul ) 
[7991] c:3 is:loop 0 , 3 , move 0 - 3 , v0 / 3  decode:loop 0 , 3 , move 0 - 3 , v0 / 3 
[7992] c:3 is:( move ua , 4 ; move ua + ul , 3 )  decode:( move ua , 4 ; move ua + ul , 3 ) 
[7993] c:0 is:loop 0 , 3 , move 4 , 2 / 0 - v0  decode:loop 0 , 3 , move 4 , 0 - v0 
[7994] c:0 is:( move ua - ul , 3 ; move 2 , ul )  decode:( move ul - ua , 3 ; move 2 , ul ) 
[7995] c:2 is:( move 2 , ul ; move ua , 2 / ua )  decode:( move 2 , ul ; move ua , 2 / 5 ) 
[7996] c:0 is:( move ua + 3 , ul ; move ua , 4 )  decode:( move 9 , ul ; move ua , 4 ) 
[7997] c:3 is:( move 4 , 2 ; move ua , ua * ua )  decode:( move 4 , 2 ; move ua , ua * ua ) 
[7998] c:3 is:( move 3 , 3 ; move ua , ua * ua )  decode:( move 3 , 3 ; move ua , ua * ua ) 
[7999] c:0 is:loop 0 , 3 , move 4 + 2 , 3 - v0  decode:( move 8 , ua * ua ; move ua , ua ) 
[8000] c:0 is:( move ua , 4 ; move ua - ul , 2 )  decode:( move ua , 4 ; move 5 , 2 ) 
[8001] c:3 is:loop 0 , 4 , move 0 - 3 , v0 / 2  decode:loop 0 , 4 , move 0 - 3 , v0 / 2 
[8002] c:0 is:loop 0 , 4 , move 0 - 4 , 3 - v0  decode:( move 9 , 0 ; move ua + 3 , ul ) 
[8003] c:0 is:( move 4 , 2 ; move ul + ua , ul )  decode:( move 4 , 2 ; move ua + ul , ul ) 
[8004] c:0 is:loop 0 , 4 , move 0 - 3 , 2 / v0  decode:loop 0 , 4 , move 3 , 2 / v0 
[8005] c:3 is:loop 0 , 3 , move 4 + v0 , 2 - 3  decode:loop 0 , 3 , move 4 + v0 , 2 - 3 
[8006] c:3 is:( move ul - ua , 3 ; move ul , 2 )  decode:( move ul - ua , 3 ; move ul , 2 ) 
[8007] c:0 is:( move ul - ua , 2 ; move 3 , ul )  decode:( move ul - ua , 2 ; move 3 , 4 ) 
[8008] c:3 is:( move ul , 4 ; move ua + ul , 2 )  decode:( move ul , 4 ; move ua + ul , 2 ) 
[8009] c:0 is:( move 0 - ua , 6 ; move ua , ul )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[8010] c:3 is:( move 3 , ua * ua ; move ua , 3 )  decode:( move 3 , ua * ua ; move ua , 3 ) 
[8011] c:3 is:( move 3 , 3 ; move ua + ul , ul )  decode:( move 3 , 3 ; move ua + ul , ul ) 
[8012] c:0 is:loop 0 , 4 , move 3 / 2 , 0 - v0  decode:loop 0 , 3 , move 2 , 0 - 3 
[8013] c:3 is:( move ua , ul ; move 4 - ua , 2 )  decode:( move ua , ul ; move 4 - ua , 2 ) 
[8014] c:0 is:( move 2 , 4 ; move ua , ua * ua )  decode:( move 2 , 4 ; move ua , 8 ) 
[8015] c:0 is:loop 0 , 4 , move v0 * 2 , 0 - 4  decode:loop 0 , 4 , move 3 - ua , 6 / v0 
[8016] c:0 is:( move ua , 2 - 3 ; move ul , ul )  decode:( move ul , 0 - 2 ; move ul , ul ) 
[8017] c:3 is:loop 0 , 4 , move 0 - 4 , v0 - 3  decode:loop 0 , 4 , move 0 - 4 , v0 - 3 
[8018] c:3 is:loop 0 , 4 , move 0 - 3 , v0 - 4  decode:loop 0 , 4 , move 0 - 3 , v0 - 4 
[8019] c:3 is:( move ua , ua * ua ; move 2 , 4 )  decode:( move ua , ua * ua ; move 2 , 4 ) 
[8020] c:0 is:loop 0 , 5 , move ul - 3 , ul / ua  decode:loop 0 , 3 , move 0 - 3 , 2 / 4 
[8021] c:0 is:loop 0 , 3 , move 0 - 4 , 2 / v0  decode:loop 0 , 3 , move 4 , 2 / v0 
[8022] c:0 is:( move 4 - ua , 2 ; move ua , ul )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[8023] c:3 is:( move 4 , ul ; move ua + ul , 2 )  decode:( move 4 , ul ; move ua + ul , 2 ) 
[8024] c:3 is:( move ua , 2 ; move 4 , ua * ua )  decode:( move ua , 2 ; move 4 , ua * ua ) 
[8025] c:3 is:( move ua , ul ; move 2 , 2 / ua )  decode:( move ua , ul ; move 2 , 2 / ua ) 
[8026] c:0 is:loop 0 , 4 , move ul - ua , ua / 5  decode:loop 0 , 4 , move ul - ua , 0 - 5 
[8027] c:0 is:loop 0 , 5 , move 0 - 2 , 4 - v0  decode:( move 4 , 4 ; move 5 , 0 - 2 ) 
[8028] c:0 is:loop 0 , 4 , move 0 - 3 , 5 + v0  decode:loop 0 , 4 , move ua - 3 , 5 + v0 
[8029] c:0 is:( move 0 - 4 , ul ; move ul , ul )  decode:( move ul , 4 ; move 3 , 0 - 4 ) 
[8030] c:3 is:( move ua + ul , ul ; move 2 , 4 )  decode:( move ua + ul , ul ; move 2 , 4 ) 
[8031] c:0 is:( move 2 - 3 , ul ; move ua , ul )  decode:( move ul , ul ; move ua , ul ) 
[8032] c:3 is:loop 0 , 3 , move 4 + v0 , 0 - 5  decode:loop 0 , 3 , move 4 + v0 , 0 - 5 
[8033] c:3 is:( move 2 , 2 ; move ua , ul / ua )  decode:( move 2 , 2 ; move ua , ul / ua ) 
[8034] c:0 is:( move ua - ul , 4 ; move ua , 2 )  decode:( move ul - ua , 4 ; move ua , 2 ) 
[8035] c:3 is:( move ul , 2 ; move ua , 2 / ua )  decode:( move ul , 2 ; move ua , 2 / ua ) 
[8036] c:0 is:loop 0 , 4 , move 2 , 4 * 0 - v0  decode:( move 2 , 0 ; move ul - ua , ul ) 
[8037] c:3 is:( move ua , 2 ; move ul - ua , 4 )  decode:( move ua , 2 ; move ul - ua , 4 ) 
[8038] c:0 is:loop 0 , 4 , move 4 + v0 , 0 - 4  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[8039] c:3 is:( move ua , ua * ua ; move 4 , 2 )  decode:( move ua , ua * ua ; move 4 , 2 ) 
[8040] c:0 is:( move 4 , ua * ua ; move ua , 2 )  decode:( move 4 , 8 ; move ua , 2 ) 
[8041] c:3 is:( move ua , ua / 3 ; move ua , 2 )  decode:( move ua , ua / 3 ; move ua , 2 ) 
[8042] c:3 is:( move ua - ul , ul ; move 3 , 2 )  decode:( move ua - ul , ul ; move 3 , 2 ) 
[8043] c:0 is:loop 0 , 4 , move 3 + v0 , 0 - 5  decode:loop 0 , 4 , move 0 - 4 , 0 - 8 
[8044] c:0 is:( move 4 - ua , ul ; move ua , 2 )  decode:( move 2 , 4 ; move ua , 0 - 2 ) 
[8045] c:3 is:( move ua , 2 ; move ua , ua / 3 )  decode:( move ua , 2 ; move ua , ua / 3 ) 
[8046] c:3 is:( move ua , 3 ; move ua + ul , 4 )  decode:( move ua , 3 ; move ua + ul , 4 ) 
[8047] c:0 is:loop 0 , 4 , move 0 - 2 , v0 * 4  decode:loop 0 , 4 , move 2 , 4 * 4 - v0 
[8048] c:0 is:loop 0 , 2 , move 0 - 4 , v0 / 3  decode:( move 3 , 3 / move 4 , 2 / 4 ) 
[8049] c:3 is:loop 0 , 3 , move 0 - 3 , 4 * v0  decode:loop 0 , 3 , move 0 - 3 , 4 * v0 
[8050] c:0 is:( move 5 , 0 ; move ul - ua , ul )  decode:( move 5 , ul ; move 5 , 0 - 4 ) 
[8051] c:3 is:( move ua + ul , 2 ; move 4 , ul )  decode:( move ua + ul , 2 ; move 4 , ul ) 
[8052] c:3 is:( move 2 , ul ; move ua + ul , 4 )  decode:( move 2 , ul ; move ua + ul , 4 ) 
[8053] c:3 is:( move ul - ua , 0 ; move ua , 6 )  decode:( move ul - ua , 0 ; move ua , 6 ) 
[8054] c:3 is:( move 2 - ua , 4 ; move ua , ul )  decode:( move 2 - ua , 4 ; move ua , ul ) 
[8055] c:0 is:( move ua , 6 ; move 0 - ua , ul )  decode:( move ua , 6 ; move ua , ua / 3 ) 
[8056] c:3 is:loop 0 , 4 , move 6 + v0 , 0 - 2  decode:loop 0 , 4 , move 6 + v0 , 0 - 2 
[8057] c:3 is:loop 0 , 4 , move 0 - 3 , 4 * v0  decode:loop 0 , 4 , move 0 - 3 , 4 * v0 
[8058] c:0 is:loop 0 , 3 , move 2 + v0 , 4 * 3  decode:loop 0 , 3 , move 3 , 3 * 3 
[8059] c:0 is:( move ua , ul ; move 3 - ua , 4 )  decode:( move ua , ul ; move 3 , ul / 5 ) 
[8060] c:3 is:( move ul - ua , 2 ; move 4 , ul )  decode:( move ul - ua , 2 ; move 4 , ul ) 
[8061] c:3 is:loop 0 , 4 , move 0 - 2 , v0 / 4  decode:loop 0 , 4 , move 0 - 2 , v0 / 4 
[8062] c:0 is:( move ua , 3 ; move ua - ul , 4 )  decode:( move ua , 3 ; move 5 , 4 ) 
[8063] c:0 is:( move 2 , ul ; move ul - ua , 4 )  decode:( move 2 , ul ; move ua - ul , 4 ) 
[8064] c:0 is:loop 0 , 4 , move 2 + v0 , 3 / 2  decode:loop 0 , 4 , move 0 - 3 , 3 / 2 
[8065] c:3 is:loop 0 , 4 , move 0 - 4 , v0 / 2  decode:loop 0 , 4 , move 0 - 4 , v0 / 2 
[8066] c:3 is:( move ua + ul , 0 ; move ua , 8 )  decode:( move ua + ul , 0 ; move ua , 8 ) 
[8067] c:3 is:( move ua , 2 ; move ul - ua , 5 )  decode:( move ua , 2 ; move ul - ua , 5 ) 
[8068] c:0 is:loop 0 , 4 , move 6 + v0 , 0 - 3  decode:loop 0 , 4 , move v0 + 3 , 0 - 3 
[8069] c:0 is:( move ul - ua , ul ; move 2 , 4 )  decode:( move ua - ul , 4 ; move 2 , 4 ) 
[8070] c:3 is:loop 0 , 4 , move 0 - 4 , v0 - 4  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[8071] c:0 is:loop 0 , 4 , move 2 , 0 - v0 / 4  decode:loop 0 , 3 , move 3 , 3 / 4 
[8072] c:0 is:( move 2 , ua * ua ; move ua , 5 )  decode:( move 2 , ua / 4 ; move ua , 5 ) 
[8073] c:0 is:loop 0 , 7 , move ul - 2 , ul / ua  decode:loop 0 , 4 , move 2 - 4 , 2 / 8 
[8074] c:3 is:( move ua , 6 ; move ua + ul , 2 )  decode:( move ua , 6 ; move ua + ul , 2 ) 
[8075] c:0 is:loop 0 , 3 , move v0 + 2 , 2 / 4  decode:loop 0 , 4 , move 2 , 2 / 4 
[8076] c:0 is:loop 0 , 6 , move ua / 4 , ua - ul  decode:loop 0 , 4 , move 4 - ua , 0 - 8 
[8077] c:3 is:loop 0 , 3 , move 4 , 0 - 3 / v0  decode:loop 0 , 3 , move 4 , 0 - 3 / v0 
[8078] c:0 is:( move ua , ul ; move 0 - ua , 7 )  decode:( move ua , ul ; move ua , 3 + 4 ) 
[8079] c:0 is:loop 0 , 3 , move 3 , 4 + 2 * v0  decode:loop 0 , 4 , move ul + v0 , ua / 2 
[8080] c:0 is:loop 0 , 4 , move v0 * 3 , 0 - 4  decode:loop 0 , 4 , move v0 * 3 , 0 - 8 
[8081] c:0 is:loop 0 , 2 , move 0 - 7 , 3 - v0  decode:( move ua + ul , 6 ; move 7 , 2 ) 
[8082] c:3 is:( move ua + ul , ul ; move 5 , 2 )  decode:( move ua + ul , ul ; move 5 , 2 ) 
[8083] c:3 is:loop 0 , 3 , move 4 , 0 - 4 * v0  decode:loop 0 , 3 , move 4 , 0 - 4 * v0 
[8084] c:3 is:( move ua + 4 , ul ; move ua , 4 )  decode:( move ua + 4 , ul ; move ua , 4 ) 
[8085] c:3 is:( move 5 , 2 ; move ua , ua * ua )  decode:( move 5 , 2 ; move ua , ua * ua ) 
[8086] c:0 is:loop 0 , 4 , move 4 - v0 , 0 - 4  decode:loop 0 , 4 , move v0 - 4 , 0 - 9 
[8087] c:3 is:( move ua + ul , 6 ; move ua , 2 )  decode:( move ua + ul , 6 ; move ua , 2 ) 
[8088] c:3 is:( move ua , 2 ; move ua , 4 / ua )  decode:( move ua , 2 ; move ua , 4 / ua ) 
[8089] c:3 is:( move ul - ua , 3 ; move 3 , ul )  decode:( move ul - ua , 3 ; move 3 , ul ) 
[8090] c:3 is:( move 2 , ua * ua ; move 4 , ul )  decode:( move 2 , ua * ua ; move 4 , ul ) 
[8091] c:0 is:loop 0 , 3 , move 3 , 2 - v0 / 2  decode:loop 0 , 3 , move 3 - ua , 0 - 8 
[8092] c:3 is:( move ua , 0 ; move ua + ul , 8 )  decode:( move ua , 0 ; move ua + ul , 8 ) 
[8093] c:3 is:( move 3 , ul ; move ua + ul , 4 )  decode:( move 3 , ul ; move ua + ul , 4 ) 
[8094] c:3 is:( move ua , ua * ua ; move 3 , 4 )  decode:( move ua , ua * ua ; move 3 , 4 ) 
[8095] c:0 is:( move 0 - ua , ul ; move ua , 7 )  decode:( move ua , ul ; move ua , 7 ) 
[8096] c:3 is:( move ua , 3 ; move 4 , ua * ua )  decode:( move ua , 3 ; move 4 , ua * ua ) 
[8097] c:3 is:( move 5 , ul ; move ua + ul , 2 )  decode:( move 5 , ul ; move ua + ul , 2 ) 
[8098] c:3 is:( move 2 - ua , 5 ; move ua , ul )  decode:( move 2 - ua , 5 ; move ua , ul ) 
[8099] c:3 is:loop 0 , 3 , move 4 - v0 , 2 - 3  decode:loop 0 , 3 , move 4 - v0 , 2 - 3 
[8100] c:0 is:loop 0 , 4 , move 5 + v0 , 0 - 4  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[8101] c:0 is:loop 0 , 2 , move 0 - 4 , v0 + 7  decode:( move 4 , 2 - 5 ; move 4 , 8 ) 
[8102] c:0 is:( move 4 , 2 ; move ua - ul , ul )  decode:( move 4 , 2 ; move 5 , ul ) 
[8103] c:0 is:( move 6 , 0 ; move ua - ul , ul )  decode:( move 5 , 0 ; move ua - ul , ul ) 
[8104] c:0 is:loop 0 , 4 , move 4 , 0 - v0 / 2  decode:loop 0 , 4 , move 4 , 0 - v0 / 3 
[8105] c:3 is:( move ua , ua / 4 ; move ua , 2 )  decode:( move ua , ua / 4 ; move ua , 2 ) 
[8106] c:0 is:loop 0 , 3 , move 3 + v0 , 3 / 2  decode:loop 0 , 3 , move 4 , 3 / 2 
[8107] c:0 is:( move 3 - ua , 4 ; move ua , ul )  decode:( move 3 , ul ; move ua , 4 ) 
[8108] c:3 is:( move 3 , ua * ua ; move 3 , ul )  decode:( move 3 , ua * ua ; move 3 , ul ) 
[8109] c:3 is:( move 4 , 3 ; move ua + ul , ul )  decode:( move 4 , 3 ; move ua + ul , ul ) 
[8110] c:3 is:( move 2 , ul ; move ua + ul , 5 )  decode:( move 2 , ul ; move ua + ul , 5 ) 
[8111] c:3 is:( move ua + ul , 4 ; move ua , 4 )  decode:( move ua + ul , 4 ; move ua , 4 ) 
[8112] c:0 is:loop 0 , 4 , move 0 - 3 , v0 / 3  decode:loop 0 , 4 , move 3 - v0 , 0 - 3 
[8113] c:3 is:loop 0 , 4 , move v0 * 2 , 2 - 3  decode:loop 0 , 4 , move v0 * 2 , 2 - 3 
[8114] c:0 is:loop 0 , 4 , move 0 - 3 , 3 / v0  decode:loop 0 , 4 , move 3 - ua , 3 / v0 
[8115] c:0 is:loop 0 , 4 , move 4 , 3 * 0 - v0  decode:loop 0 , 4 , move 0 - 4 , 0 - 9 
[8116] c:0 is:( move ua , 3 ; move ua , ua / 3 )  decode:( move ua , 3 ; move 7 , ua / 3 ) 
[8117] c:3 is:( move ua + ul , 5 ; move 2 , ul )  decode:( move ua + ul , 5 ; move 2 , ul ) 
[8118] c:0 is:loop 0 , 2 , move 3 + v0 , 2 / 4  decode:loop 0 , 2 , move 3 , : 4 / ua 
[8119] c:0 is:( move ua , 2 / ua ; move ua , 4 )  decode:loop 0 , 2 , move v0 - ua , v0 * 0 
[8120] c:0 is:loop 0 , 3 , move v0 - 4 , 2 - 3  decode:loop 0 , 3 , move 0 - 4 , 2 - 3 
[8121] c:3 is:loop 0 , 3 , move 0 - 4 , 3 / v0  decode:loop 0 , 3 , move 0 - 4 , 3 / v0 
[8122] c:3 is:( move ua - ul , 3 ; move ua , 4 )  decode:( move ua - ul , 3 ; move ua , 4 ) 
[8123] c:3 is:( move ua , 2 ; move ua , ua / 4 )  decode:( move ua , 2 ; move ua , ua / 4 ) 
[8124] c:3 is:loop 0 , 4 , move 0 - 4 , 4 - v0  decode:loop 0 , 4 , move 0 - 4 , 4 - v0 
[8125] c:0 is:loop 0 , 3 , move 0 - 4 , 4 * v0  decode:loop 0 , 3 , move 4 , 4 * v0 
[8126] c:3 is:( move ul - ua , 2 ; move ua , 5 )  decode:( move ul - ua , 2 ; move ua , 5 ) 
[8127] c:0 is:( move ua , 2 ; move 3 , ul / ua )  decode:( move 3 , ul ; move ua , ul / ua ) 
[8128] c:3 is:( move 4 , 3 ; move ua , ua * ua )  decode:( move 4 , 3 ; move ua , ua * ua ) 
[8129] c:3 is:( move 2 , ua / 3 ; move ua , ul )  decode:( move 2 , ua / 3 ; move ua , ul ) 
[8130] c:0 is:loop 0 , 4 , move 3 , 3 + v0 * 2  decode:loop 0 , 4 , move 3 , v0 * ul 
[8131] c:0 is:( move ua , 3 ; move ua + ul , 5 )  decode:( move ua , 3 ; move 8 , 5 ) 
[8132] c:0 is:( move ul , 3 ; move ua , 2 / ua )  decode:move 3 * 3 , 2 / 3 
[8133] c:0 is:( move 2 , 4 ; move ul - ua , ul )  decode:( move 2 , 4 ; move ua - ul , ul ) 
[8134] c:3 is:( move ua + ul , 4 ; move 3 , ul )  decode:( move ua + ul , 4 ; move 3 , ul ) 
[8135] c:0 is:loop 0 , 3 , move 4 * v0 , 0 - 4  decode:( move 9 , 0 - 3 ; move 4 , 4 ) 
[8136] c:0 is:( move ua - ul , 5 ; move ua , 2 )  decode:( move 5 , 5 ; move ua , 2 ) 
[8137] c:3 is:( move ua + ul , 3 ; move ua , 5 )  decode:( move ua + ul , 3 ; move ua , 5 ) 
[8138] c:3 is:( move ua + ul , 2 ; move 5 , ul )  decode:( move ua + ul , 2 ; move 5 , ul ) 
[8139] c:3 is:( move ua , 4 ; move ul - ua , 3 )  decode:( move ua , 4 ; move ul - ua , 3 ) 
[8140] c:0 is:loop 0 , 4 , move 3 , 0 - v0 * 4  decode:loop 0 , 4 , move 3 , 4 * v0 
[8141] c:3 is:loop 0 , 3 , move 0 - 3 , v0 / 4  decode:loop 0 , 3 , move 0 - 3 , v0 / 4 
[8142] c:3 is:( move ua , 4 ; move 3 , ua * ua )  decode:( move ua , 4 ; move 3 , ua * ua ) 
[8143] c:0 is:( move 3 - ua , ul ; move 3 , ul )  decode:( move 3 , ul ; move 3 , 0 - 4 ) 
[8144] c:0 is:( move 4 , 2 ; move ul - ua , ul )  decode:( move ua - 2 , 2 ; move 5 , ul ) 
[8145] c:0 is:loop 0 , 4 , move 0 - 2 , 4 / v0  decode:loop 0 , 4 , move 2 - 4 , 4 / v0 
[8146] c:0 is:loop 0 , 4 , move 2 , 3 + 4 - v0  decode:loop 0 , 4 , move 2 , 7 + v0 
[8147] c:0 is:( move ul - ua , 4 ; move ua , 3 )  decode:( move 4 , ul ; move ua , 2 + 4 ) 
[8148] c:3 is:( move 3 , 4 ; move ua , ua * ua )  decode:( move 3 , 4 ; move ua , ua * ua ) 
[8149] c:3 is:( move 4 , ua * ua ; move 2 , ul )  decode:( move 4 , ua * ua ; move 2 , ul ) 
[8150] c:0 is:loop 0 , 7 , move ua / 3 , ua - ul  decode:loop 0 , 4 , move 3 - ua , 4 * 5 
[8151] c:0 is:loop 0 , 2 , move 4 + v0 , 2 / 3  decode:loop 0 , 3 , move 3 - ua , 2 / ua 
[8152] c:3 is:( move ul , ul ; move ua + 3 , 4 )  decode:( move ul , ul ; move ua + 3 , 4 ) 
[8153] c:3 is:( move ua , ua * ua ; move 2 , 5 )  decode:( move ua , ua * ua ; move 2 , 5 ) 
[8154] c:0 is:loop 0 , 3 , move 3 + 4 , 3 - v0  decode:loop 0 , 3 , move 3 * 3 , 3 - v0 
[8155] c:3 is:( move 3 , ul ; move ua , 2 / ua )  decode:( move 3 , ul ; move ua , 2 / ua ) 
[8156] c:0 is:( move ua + ul , 2 ; move 6 , ul )  decode:( move ua + ul , 2 ; move ul , ul ) 
[8157] c:3 is:( move 3 , ul ; move ua , ua / 3 )  decode:( move 3 , ul ; move ua , ua / 3 ) 
[8158] c:0 is:( move 4 , ul ; move 3 - ua , ul )  decode:( move 4 , ul ; move 3 , ua / 3 ) 
[8159] c:0 is:( move 4 , 3 ; move ua - ul , ul )  decode:( move 4 , 3 ; move ul - ua , ul ) 
[8160] c:3 is:( move ua , 3 ; move ul - ua , 5 )  decode:( move ua , 3 ; move ul - ua , 5 ) 
[8161] c:3 is:( move 3 , ua * ua ; move ua , 5 )  decode:( move 3 , ua * ua ; move ua , 5 ) 
[8162] c:0 is:loop 0 , 3 , move 4 , 3 / 2 + v0  decode:loop 0 , 3 , move 4 , 4 * 3 / v0 
[8163] c:0 is:( move 2 , 4 / ua ; move ua , ul )  decode:( move 2 , ua / 4 ; move ua , ul ) 
[8164] c:3 is:( move 2 - ua , ul ; move ua , 6 )  decode:( move 2 - ua , ul ; move ua , 6 ) 
[8165] c:0 is:( move ua , 0 ; move ua - ul , 8 )  decode:( move ua , 0 ; move ul - ua , 8 ) 
[8166] c:3 is:( move ul - ua , 3 ; move ua , 5 )  decode:( move ul - ua , 3 ; move ua , 5 ) 
[8167] c:3 is:( move ua , 5 ; move 3 , ua * ua )  decode:( move ua , 5 ; move 3 , ua * ua ) 
[8168] c:3 is:( move 5 , ul ; move ul - ua , 2 )  decode:( move 5 , ul ; move ul - ua , 2 ) 
[8169] c:3 is:( move 4 , ul ; move ua + ul , 4 )  decode:( move 4 , ul ; move ua + ul , 4 ) 
[8170] c:0 is:loop 0 , 4 , move 0 - 4 , 5 - v0  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 
[8171] c:0 is:loop 0 , 4 , move 2 , 4 + v0 / 2  decode:loop 0 , 4 , move 0 - 2 , 4 / v0 
[8172] c:3 is:( move ua , 3 ; move ua , ua / 4 )  decode:( move ua , 3 ; move ua , ua / 4 ) 
[8173] c:3 is:( move ua , ul ; move ua , 5 * 2 )  decode:( move ua , ul ; move ua , 5 * 2 ) 
[8174] c:3 is:( move 2 , ul ; move ul - ua , 5 )  decode:( move 2 , ul ; move ul - ua , 5 ) 
[8175] c:3 is:( move ua , 3 / 2 ; move ul , ul )  decode:( move ua , 3 / 2 ; move ul , ul ) 
[8176] c:3 is:( move 2 , ul ; move ua , ua / 4 )  decode:( move 2 , ul ; move ua , ua / 4 ) 
[8177] c:3 is:loop 0 , 4 , move 0 - 4 , v0 - 5  decode:loop 0 , 4 , move 0 - 4 , v0 - 5 
[8178] c:3 is:( move ua - ul , 4 ; move 3 , ul )  decode:( move ua - ul , 4 ; move 3 , ul ) 
[8179] c:0 is:loop 0 , 3 , move v0 - 3 , 2 / 3  decode:loop 0 , 3 , move v0 - v0 , 0 0 0 2 2 / 
[8180] c:3 is:( move ua , 3 / ua ; move 3 , ul )  decode:( move ua , 3 / ua ; move 3 , ul ) 
[8181] c:3 is:( move ul , 2 ; move 5 , ua * ua )  decode:( move ul , 2 ; move 5 , ua * ua ) 
[8182] c:3 is:loop 0 , 4 , move 0 - 3 , 4 / v0  decode:loop 0 , 4 , move 0 - 3 , 4 / v0 
[8183] c:0 is:loop 0 , 4 , move 3 + v0 , 3 / 2  decode:loop 0 , 4 , move 4 + v0 , 3 / 2 
[8184] c:3 is:loop 0 , 3 , move 0 - 4 , 4 / v0  decode:loop 0 , 3 , move 0 - 4 , 4 / v0 
[8185] c:0 is:loop 0 , 6 , move 2 - v0 , 2 - 3  decode:( move 4 , 2 / 6 ; move 5 , 5 ) 
[8186] c:0 is:( move 4 , 3 ; move ul - ua , ul )  decode:( move 4 , 4 ; move ua - ul , ul ) 
[8187] c:3 is:( move 2 , 5 ; move ua - ul , ul )  decode:( move 2 , 5 ; move ua - ul , ul ) 
[8188] c:3 is:( move ua + ul , 5 ; move 3 , ul )  decode:( move ua + ul , 5 ; move 3 , ul ) 
[8189] c:3 is:( move 3 , ul ; move ua + ul , 5 )  decode:( move 3 , ul ; move ua + ul , 5 ) 
[8190] c:3 is:( move ua , 0 ; move 8 , ua * ua )  decode:( move ua , 0 ; move 8 , ua * ua ) 
[8191] c:3 is:( move ua , ua / 3 ; move ua , 4 )  decode:( move ua , ua / 3 ; move ua , 4 ) 
[8192] c:0 is:loop 0 , 3 , move 3 + 2 , 7 + v0  decode:loop 0 , 3 , move v0 + 4 , 7 + 3 
[8193] c:3 is:( move ul - ua , 3 ; move 4 , ul )  decode:( move ul - ua , 3 ; move 4 , ul ) 
[8194] c:0 is:( move 3 - ua , ul ; move ua , 5 )  decode:( move 3 , ul ; move ua , ua * ua ) 
[8195] c:3 is:( move 3 , 5 ; move ua + ul , ul )  decode:( move 3 , 5 ; move ua + ul , ul ) 
[8196] c:3 is:( move 6 , 2 ; move ua , ua * ua )  decode:( move 6 , 2 ; move ua , ua * ua ) 
[8197] c:3 is:loop 0 , 4 , move 0 - 3 , v0 * 5  decode:loop 0 , 4 , move 0 - 3 , v0 * 5 
[8198] c:0 is:loop 0 , 4 , move 3 , 3 * 3 + v0  decode:loop 0 , 3 , move 2 - ua , 3 * 9 
[8199] c:0 is:loop 0 , 3 , move 0 - 7 , v0 - 3  decode:loop 0 , 3 , move v0 + 4 , 2 - 3 
[8200] c:3 is:loop 0 , 3 , move 2 - 4 , 2 / v0  decode:loop 0 , 3 , move 2 - 4 , 2 / v0 
[8201] c:3 is:( move 3 , ul ; move ul - ua , 4 )  decode:( move 3 , ul ; move ul - ua , 4 ) 
[8202] c:3 is:( move 4 , 4 ; move ua , ua * ua )  decode:( move 4 , 4 ; move ua , ua * ua ) 
[8203] c:0 is:( move 3 - ua , 5 ; move ua , ul )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[8204] c:0 is:( move ua , 3 ; move ua - ul , 5 )  decode:( move ua , 3 ; move ul - ua , 5 ) 
[8205] c:0 is:loop 0 , 4 , move 4 - v0 , 2 - 3  decode:loop 0 , 3 , move 3 - ua , 2 - 3 
[8206] c:0 is:loop 0 , 3 , move 2 , v0 + 4 * 4  decode:loop 0 , 3 , move 2 , v0 - 3 
[8207] c:3 is:( move 8 , 0 ; move ua , ua * ua )  decode:( move 8 , 0 ; move ua , ua * ua ) 
[8208] c:0 is:( move ua , 4 / ua ; move ua , 3 )  decode:( move ua , 2 / 4 ; move ua , 3 ) 
[8209] c:3 is:loop 0 , 4 , move 0 - 3 , v0 / 4  decode:loop 0 , 4 , move 0 - 3 , v0 / 4 
[8210] c:0 is:loop 0 , 3 , move v0 + 4 , 3 / 2  decode:loop 0 , 3 , move ua - ul , 3 / 2 
[8211] c:0 is:( move ua - ul , 0 ; move ua , 8 )  decode:( move 5 , 0 ; move ua , ua * ua ) 
[8212] c:0 is:( move 3 , ul ; move ua - ul , 4 )  decode:( move 3 , ul ; move 5 , 4 ) 
[8213] c:3 is:( move 3 , 4 ; move ul - ua , ul )  decode:( move 3 , 4 ; move ul - ua , ul ) 
[8214] c:3 is:( move 4 , ua * ua ; move ua , 4 )  decode:( move 4 , ua * ua ; move ua , 4 ) 
[8215] c:0 is:loop 0 , 3 , move 3 / v0 , 2 - 3  decode:loop 0 , 3 , move 4 - ua , 2 - 3 
[8216] c:3 is:( move 4 , 2 ; move ua , ul / ua )  decode:( move 4 , 2 ; move ua , ul / ua ) 
[8217] c:3 is:( move ua , 3 ; move 5 , ua * ua )  decode:( move ua , 3 ; move 5 , ua * ua ) 
[8218] c:0 is:loop 0 , 3 , move v0 + 2 , 0 - 9  decode:loop 0 , 3 , move 3 - ua , 0 - 9 
[8219] c:0 is:( move ua , 6 ; move 2 - ua , ul )  decode:( move ua , 6 ; move 5 , ua / 3 ) 
[8220] c:0 is:( move ul - ua , ul ; move 3 , 4 )  decode:( move 5 , 4 ; move 3 , 4 / ua ) 
[8221] c:3 is:( move 6 , ul ; move ua + ul , 2 )  decode:( move 6 , ul ; move ua + ul , 2 ) 
[8222] c:3 is:( move 3 , ul ; move 4 , ua * ua )  decode:( move 3 , ul ; move 4 , ua * ua ) 
[8223] c:0 is:( move ua , 8 ; move 0 - ua , ul )  decode:( move ua , 8 ; move ua , ua / 3 ) 
[8224] c:0 is:( move 2 , ua / 4 ; move ua , ul )  decode:( move 2 , 3 / 2 ; move ua , ul ) 
[8225] c:3 is:loop 0 , 4 , move 0 - 2 , v0 / 5  decode:loop 0 , 4 , move 0 - 2 , v0 / 5 
[8226] c:3 is:( move 3 , 5 ; move ua , ua * ua )  decode:( move 3 , 5 ; move ua , ua * ua ) 
[8227] c:0 is:( move ua , ul ; move 3 / 2 , ul )  decode:( move ua , ul ; move ul , ul ) 
[8228] c:0 is:( move ua , 0 ; move ul - ua , 8 )  decode:( move ua , 0 ; move 5 , 3 / 4 ) 
[8229] c:3 is:( move ul - ua , 4 ; move 3 , ul )  decode:( move ul - ua , 4 ; move 3 , ul ) 
[8230] c:0 is:( move 3 , 4 ; move ua - ul , ul )  decode:( move 3 , 4 ; move 5 , ul ) 
[8231] c:0 is:( move ul - ua , 6 ; move ua , 2 )  decode:( move 5 , 9 ; move ua , 2 ) 
[8232] c:3 is:( move ua + ul , ul ; move 3 , 5 )  decode:( move ua + ul , ul ; move 3 , 5 ) 
[8233] c:3 is:( move ua + ul , ul ; move 4 , 4 )  decode:( move ua + ul , ul ; move 4 , 4 ) 
[8234] c:0 is:loop 0 , 3 , move 4 , 0 - 4 / v0  decode:loop 0 , 4 , move 3 , 0 - 4 / v0 
[8235] c:0 is:( move ua , ua / 4 ; move 2 , ul )  decode:( move ua , 3 / 4 ; move 2 , ul ) 
[8236] c:3 is:loop 0 , 4 , move 4 , 0 - 4 * v0  decode:loop 0 , 4 , move 4 , 0 - 4 * v0 
[8237] c:0 is:loop 0 , 3 , move 4 + 2 , v0 * 4  decode:loop 0 , 3 , move 4 + v0 , 4 * 4 
[8238] c:0 is:loop 0 , 7 , move 2 - v0 , 0 - 4  decode:loop 0 , 4 , move 3 - ua , 3 / 4 
[8239] c:0 is:( move ua - ul , 5 ; move 2 , ul )  decode:( move ul - ua , 2 ; move 2 , ul ) 
[8240] c:0 is:loop 0 , 4 , move v0 + 2 , 0 - 8  decode:0 loop 0 , 4 , move 4 , 0 - 8 
[8241] c:3 is:( move ua + ul , 0 ; move ua , 9 )  decode:( move ua + ul , 0 ; move ua , 9 ) 
[8242] c:0 is:loop 0 , 4 , move 0 - 5 , 4 - v0  decode:loop 0 , 4 , move 0 - 4 , 4 - v0 
[8243] c:3 is:( move ua , 5 ; move ua + ul , 4 )  decode:( move ua , 5 ; move ua + ul , 4 ) 
[8244] c:3 is:( move 4 , ul ; move ul - ua , 3 )  decode:( move 4 , ul ; move ul - ua , 3 ) 
[8245] c:0 is:loop 0 , 2 , move 4 * 2 , v0 - 4  decode:loop 0 , 2 , move ua + 2 , 0 - 0 4 0 
[8246] c:0 is:loop 0 , 4 , move 0 - 5 , v0 - 4  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[8247] c:0 is:( move ul , 3 ; move 4 , ua * ua )  decode:( move ul , 3 ; move 4 , 4 ) 
[8248] c:3 is:loop 0 , 4 , move 0 - 4 , 3 / v0  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[8249] c:3 is:( move ul - ua , ul ; move 5 , 2 )  decode:( move ul - ua , ul ; move 5 , 2 ) 
[8250] c:0 is:loop 0 , 2 , move 4 + v0 , 4 * 3  decode:loop 0 , 3 , move 3 , 4 * 3 
[8251] c:3 is:( move 3 , ua * ua ; move 4 , ul )  decode:( move 3 , ua * ua ; move 4 , ul ) 
[8252] c:3 is:( move 2 - ua , ul ; move ua , 6 )  decode:( move 2 - ua , ul ; move ua , 6 ) 
[8253] c:3 is:( move 2 , ul ; move ua , 4 / ua )  decode:( move 2 , ul ; move ua , 4 / ua ) 
[8254] c:0 is:( move ul , 2 ; move ua , 4 / ua )  decode:( move ul , 2 ; move ua , 2 / ua ) 
[8255] c:3 is:( move 5 , 3 ; move ua , ua * ua )  decode:( move 5 , 3 ; move ua , ua * ua ) 
[8256] c:0 is:loop 0 , 3 , move v0 + 2 , 4 * 4  decode:loop 0 , 3 , move 3 , 4 * 4 
[8257] c:3 is:( move ua , ua * ua ; move 4 , 4 )  decode:( move ua , ua * ua ; move 4 , 4 ) 
[8258] c:3 is:( move 2 , ua * ua ; move 5 , ul )  decode:( move 2 , ua * ua ; move 5 , ul ) 
[8259] c:0 is:loop 0 , 3 , move v0 + 2 , 3 / 4  decode:( move 4 , 4 / 3 ; move 4 , ul ) 
[8260] c:0 is:( move ua , 6 ; move ua - ul , 2 )  decode:( move ua , 6 ; move ul - ua , 2 ) 
[8261] c:0 is:loop 0 , 3 , move 4 , 2 * 3 - v0  decode:loop 0 , 3 , move 0 - 4 , 9 - v0 
[8262] c:3 is:( move ul - ua , 0 ; move 7 , ul )  decode:( move ul - ua , 0 ; move 7 , ul ) 
[8263] c:3 is:( move ul - ua , 2 ; move ua , 6 )  decode:( move ul - ua , 2 ; move ua , 6 ) 
[8264] c:0 is:( move ua , 2 ; move ul - ua , 6 )  decode:( move ua , ua * 2 ; move 5 , 3 ) 
[8265] c:0 is:( move 0 - ua , 8 ; move ua , ul )  decode:( move ua ,  9 move 6 , 2 ) 
[8266] c:0 is:( move ua + ul , ul ; move 6 , 2 )  decode:( move 7 , ul ; move 7 , 2 ) 
[8267] c:3 is:( move ua , 0 ; move ua + ul , 9 )  decode:( move ua , 0 ; move ua + ul , 9 ) 
[8268] c:0 is:( move ua , ua * ua ; move 6 , 3 )  decode:( move ua , ua * ua ; move ua , 3 ) 
[8269] c:0 is:( move 2 - ua , 7 ; move ua , ul )  decode:( move 4 , 5 ; move ua , 0 - 4 ) 
[8270] c:0 is:loop 0 , 6 , move 6 + v0 , 0 - 3  decode:loop 0 , 4 , move ua + ua , 0 - 3 
[8271] c:3 is:loop 0 , 4 , move 2 , 2 / 4 - v0  decode:loop 0 , 4 , move 2 , 2 / 4 - v0 
[8272] c:0 is:( move ua - ul , 5 ; move 3 , ul )  decode:( move 5 , 5 ; move 3 , ul ) 
[8273] c:3 is:( move ua , ua * ua ; move 5 , 4 )  decode:( move ua , ua * ua ; move 5 , 4 ) 
[8274] c:0 is:( move ua - ul , 5 ; move ua , 4 )  decode:( move ul - ua , 5 ; move ua , 4 ) 
[8275] c:3 is:( move 5 , ua * ua ; move 3 , ul )  decode:( move 5 , ua * ua ; move 3 , ul ) 
[8276] c:0 is:loop 0 , 3 , move 4 , 4 + 2 / v0  decode:loop 0 , 3 , move 4 , 4 + v0 / 2 
[8277] c:0 is:( move 4 , ul ; move ua - ul , 4 )  decode:( move 4 , ul ; move ul - ua , 4 ) 
[8278] c:0 is:( move ua , 4 ; move ua - ul , 5 )  decode:( move ua , 4 ; move 5 , 5 ) 
[8279] c:0 is:loop 0 , 4 , move 3 / 2 , 2 * v0  decode:loop 0 , 4 , move 2 - 2 , 2 * v0 
[8280] c:3 is:( move ua , 4 ; move 5 , ua * ua )  decode:( move ua , 4 ; move 5 , ua * ua ) 
[8281] c:0 is:( move ul , ul ; move ua , 4 * 3 )  decode:( move ul , ul ; move ua , ul / 4 ) 
[8282] c:3 is:loop 0 , 4 , move 3 , 3 + 3 / v0  decode:loop 0 , 4 , move 3 , 3 + 3 / v0 
[8283] c:0 is:loop 0 , 3 , move 3 , 3 * v0 - 4  decode:loop 0 , 3 , move 3 , 0 - v0 - 4 
[8284] c:0 is:loop 0 , 6 , move v0 - 4 , 0 - 4  decode:loop 0 , 4 , move 0 - 3 , 0 - 9 
[8285] c:0 is:loop 0 , 4 , move 2 , 2 - 4 / v0  decode:( move 2 , ul / 4 ; move ua , 2 ) 
[8286] c:3 is:( move 4 , 5 ; move ua + ul , ul )  decode:( move 4 , 5 ; move ua + ul , ul ) 
[8287] c:0 is:( move ua , ul ; move 4 , ua / 3 )  decode:( move ua , 0 ; move 4 , ua / 3 ) 
[8288] c:2 is:( move 6 , 2 ; move ul - ua , ul )  decode:( move 6 , ua / 3 ; move 5 , 4 ) 
[8289] c:1 is:loop 0 , 3 , move 4 / v0 , 2 - 3  decode:loop 0 , 3 , move 4 - v0 , 2 - 3 
[8290] c:3 is:( move 5 , ul ; move ua + ul , 4 )  decode:( move 5 , ul ; move ua + ul , 4 ) 
[8291] c:3 is:( move ua + ul , 8 ; move ua , 2 )  decode:( move ua + ul , 8 ; move ua , 2 ) 
[8292] c:3 is:( move ua , 4 / ua ; move ua , 4 )  decode:( move ua , 4 / ua ; move ua , 4 ) 
[8293] c:3 is:loop 0 , 4 , move 4 , 0 - 4 / v0  decode:loop 0 , 4 , move 4 , 0 - 4 / v0 
[8294] c:3 is:( move ua + ul , ul ; move 5 , 4 )  decode:( move ua + ul , ul ; move 5 , 4 ) 
[8295] c:3 is:( move 6 , 3 ; move ua , ua * ua )  decode:( move 6 , 3 ; move ua , ua * ua ) 
[8296] c:0 is:( move ua , 7 ; move ua + ul , 3 )  decode:( move ua , 4 / 5 ; move 7 , 3 ) 
[8297] c:3 is:( move ua , 5 ; move 4 , ua * ua )  decode:( move ua , 5 ; move 4 , ua * ua ) 
[8298] c:3 is:( move 3 , ul ; move ua , ua / 4 )  decode:( move 3 , ul ; move ua , ua / 4 ) 
[8299] c:3 is:( move ua + ul , ul ; move 4 , 5 )  decode:( move ua + ul , ul ; move 4 , 5 ) 
[8300] c:0 is:( move ua , 8 ; move ua + ul , 2 )  decode:( move ua , 8 ; move 8 , 2 ) 
[8301] c:0 is:( move 9 , 0 ; move ua , ua * ua )  decode:( move 9 , 0 ; move 9 , ua * ua ) 
[8302] c:0 is:( move ua , ua / 3 ; move 4 , ul )  decode:( move 3 , ua / 3 ; move 4 , ul ) 
[8303] c:0 is:loop 0 , 4 , move 2 , 4 + 4 * v0  decode:loop 0 , 4 , move 2 , 4 + 4 / v0 
[8304] c:3 is:( move ua , 4 * 4 ; move ua , ul )  decode:( move ua , 4 * 4 ; move ua , ul ) 
[8305] c:0 is:loop 0 , 4 , move 3 , 4 + v0 * 3  decode:( move ua , 5 ; move 5 , 9 ) 
[8306] c:0 is:( move ua + ul , ul ; move 7 , 2 )  decode:( move 7 , ul ; move 7 , 2 ) 
[8307] c:3 is:( move ua , 3 ; move ul - ua , 6 )  decode:( move ua , 3 ; move ul - ua , 6 ) 
[8308] c:3 is:( move 4 , ua * ua ; move 4 , ul )  decode:( move 4 , ua * ua ; move 4 , ul ) 
[8309] c:0 is:( move ua , 3 / ua ; move 4 , ul )  decode:( move ua , 9 / ua ; move 4 , ul ) 
[8310] c:0 is:( move ua , 9 ; move 0 - ua , ul )  decode:( move ua , 9 ; move ua , ua / 3 ) 
[8311] c:0 is:loop 0 , 4 , move 4 , 4 + v0 * 2  decode:loop 0 , 4 , move 4 , 2 + v0 
[8312] c:0 is:( move 2 , ul ; move ua , ul / 4 )  decode:( move 2 , ul ; move ua , ul / ul / ) 4 
[8313] c:0 is:loop 0 , 3 , move 4 - v0 , 3 / 2  decode:loop 0 , 3 , move 3 , 3 / 2 
[8314] c:0 is:( move 8 , 0 ; move ul - ua , ul )  decode:( move ua + 2 , 0 ; move 6 , 4 ) 
[8315] c:3 is:loop 0 , 3 , move 4 , 3 + 3 / v0  decode:loop 0 , 3 , move 4 , 3 + 3 / v0 
[8316] c:0 is:loop 0 , 2 , move 4 - v0 , 4 * 3  decode:loop 0 , 2 , move 4 , 4 * 3 
[8317] c:3 is:loop 0 , 4 , move 0 - 4 , 4 / v0  decode:loop 0 , 4 , move 0 - 4 , 4 / v0 
[8318] c:3 is:( move 4 , 5 ; move ua , ua * ua )  decode:( move 4 , 5 ; move ua , ua * ua ) 
[8319] c:0 is:loop 0 , 4 , move 0 - 5 , 3 / v0  decode:loop 0 , 4 , move 5 , 3 / v0 
[8320] c:3 is:( move ul - ua , 2 ; move ua , 7 )  decode:( move ul - ua , 2 ; move ua , 7 ) 
[8321] c:3 is:( move 4 , ua / 3 ; move ua , ul )  decode:( move 4 , ua / 3 ; move ua , ul ) 
[8322] c:0 is:( move ua , ul ; move ua , 0 - 9 )  decode:( move ua , 4 / 3 ; move ua , 9 ) 
[8323] c:3 is:( move ua , 6 ; move 3 - ua , ul )  decode:( move ua , 6 ; move 3 - ua , ul ) 
[8324] c:0 is:( move 3 , 5 ; move ul - ua , ul )  decode:( move 3 , 5 ; move ua - ul , ul ) 
[8325] c:0 is:( move ul - ua , 4 ; move ua , 5 )  decode:( move 5 , 4 ; move ua , ua * ua ) 
[8326] c:0 is:loop 0 , 3 , move 4 + 2 , v0 * 5  decode:loop 0 , 3 , move 4 + v0 , 0 - 5 
[8327] c:0 is:loop 0 , 3 , move 3 , 4 + 3 / v0  decode:loop 0 , 3 , move 3 , 4 + 3 / ua 
[8328] c:0 is:loop 0 , 4 , move v0 + 2 , 4 * 4  decode:loop 0 , 4 , move v0 + 2 , 0 - 4 
[8329] c:3 is:( move ua , 4 ; move ua , ua / 4 )  decode:( move ua , 4 ; move ua , ua / 4 ) 
[8330] c:0 is:( move ul , 3 ; move ua , ua / 4 )  decode:( move ul , 9 ; move ua , ua / 4 ) 
[8331] c:0 is:( move 3 , 4 / ua ; move ua , ul )  decode:( move 3 , 2 / ua ; move ua , ul ) 
[8332] c:0 is:( move ua , 5 ; move ua - ul , 4 )  decode:( move ua , 5 ; move 5 , 4 ) 
[8333] c:0 is:( move ua , ul / 4 ; move ul , 2 )  decode:( move ul , ul / 4 ; move ua , 2 ) 
[8334] c:3 is:loop 0 , 4 , move v0 + 2 , 3 / 4  decode:loop 0 , 4 , move v0 + 2 , 3 / 4 
[8335] c:3 is:( move ua , ul ; move ua , 4 * 4 )  decode:( move ua , ul ; move ua , 4 * 4 ) 
[8336] c:3 is:( move 4 , ua * ua ; move ua , 5 )  decode:( move 4 , ua * ua ; move ua , 5 ) 
[8337] c:3 is:( move ul , ul ; move ua , 2 / 4 )  decode:( move ul , ul ; move ua , 2 / 4 ) 
[8338] c:0 is:( move ua , ul ; move 2 , ul / 4 )  decode:( move ua , ul ; move ul , ul / 4 ) 
[8339] c:0 is:( move 0 - ua , ul ; move ua , 9 )  decode:( move ua , 9 + 4 ; move 9 , 9 ) 
[8340] c:0 is:loop 0 , 4 , move 3 + v0 , 0 - 8  decode:loop 0 , 4 , move 4 , 0 - 8 
[8341] c:0 is:( move 4 , ul ; move ul - ua , 4 )  decode:( move 4 , ul ; move 5 , ul ) 
[8342] c:0 is:loop 0 , 4 , move 0 - 3 , 8 + v0  decode:loop 0 , 4 , move 3 - ua , v0 + 8 
[8343] c:3 is:( move ua , ul / 4 ; move 2 , ul )  decode:( move ua , ul / 4 ; move 2 , ul ) 
[8344] c:3 is:loop 0 , 3 , move 4 , 3 - v0 / 2  decode:loop 0 , 3 , move 4 , 3 - v0 / 2 
[8345] c:3 is:( move ul - ua , ul ; move 3 , 5 )  decode:( move ul - ua , ul ; move 3 , 5 ) 
[8346] c:0 is:loop 0 , 4 , move v0 * 2 , 2 / 3  decode:( move 5 , 2 ; move ua , 3 / 2 ) 
[8347] c:3 is:( move ua , 5 ; move ua , ua / 3 )  decode:( move ua , 5 ; move ua , ua / 3 ) 
[8348] c:3 is:( move ua + ul , 6 ; move ua , 4 )  decode:( move ua + ul , 6 ; move ua , 4 ) 
[8349] c:0 is:( move ul , 3 ; move ua , 4 / ua )  decode:loop 0 , 4 , move v0 , v0 / 4 
[8350] c:0 is:loop 0 , 3 , move v0 + 3 , 4 / 3  decode:loop 0 , 3 , move 4 , 4 / v0 
[8351] c:0 is:loop 0 , 4 , move 2 + v0 , 4 / 3  decode:loop 0 , 4 , move 3 - ua , 4 / v0 
[8352] c:3 is:( move ua + ul , 5 ; move 4 , ul )  decode:( move ua + ul , 5 ; move 4 , ul ) 
[8353] c:0 is:loop 0 , 4 , move 3 / 2 , v0 - 3  decode:loop 0 , 4 , move v0 , v0 - 3 
[8354] c:3 is:( move ua , 5 ; move ul - ua , 4 )  decode:( move ua , 5 ; move ul - ua , 4 ) 
[8355] c:0 is:loop 0 , 4 , move 4 + v0 , 3 / 2  decode:loop 0 , 4 , move 4 + v0 , ua / 4 
[8356] c:3 is:( move 4 - ua , ul ; move ua , 5 )  decode:( move 4 - ua , ul ; move ua , 5 ) 
[8357] c:3 is:( move ua , 6 ; move ua + ul , 4 )  decode:( move ua , 6 ; move ua + ul , 4 ) 
[8358] c:0 is:loop 0 , 4 , move 3 , 3 * v0 - 3  decode:loop 0 , 2 , move ua , 4 * 3 - v0 
[8359] c:3 is:( move ua + ul , 2 ; move ua , 8 )  decode:( move ua + ul , 2 ; move ua , 8 ) 
[8360] c:3 is:loop 0 , 4 , move 0 - 4 , v0 * 5  decode:loop 0 , 4 , move 0 - 4 , v0 * 5 
[8361] c:0 is:( move 3 , ua / 4 ; move ua , ul )  decode:( move 3 , 3 / 2 ; move ua , ul ) 
[8362] c:3 is:( move ua , ul / 4 ; move ua , 3 )  decode:( move ua , ul / 4 ; move ua , 3 ) 
[8363] c:0 is:( move ua , 4 ; move ul - ua , 5 )  decode:( move ua , 4 ; move 5 , ua * ua ) 
[8364] c:0 is:( move 2 , ul / 4 ; move ua , ul )  decode:( move 2 , 2 / 7 ; move ua , ul ) 
[8365] c:0 is:( move 6 , 2 ; move ua - ul , ul )  decode:( move ua , 2 ; move 5 , ul ) 
[8366] c:0 is:loop 0 , 3 , move v0 + 3 , 7 + 3  decode:loop 0 , 3 , move ua - 2 , 7 * 3 
[8367] c:0 is:loop 0 , 4 , move 3 , 2 + 4 / v0  decode:loop 0 , 4 , move 3 , 3 + 4 / v0 
[8368] c:0 is:loop 0 , 3 , move 4 * 2 , 4 - v0  decode:loop 0 , 3 , move ua + 2 , 4 - v0 
[8369] c:3 is:( move ul - ua , 4 ; move 4 , ul )  decode:( move ul - ua , 4 ; move 4 , ul ) 
[8370] c:0 is:( move 0 - ua , 9 ; move ua , ul )  decode:( move ua , 4 / ua ; move ua , ul ) 
[8371] c:3 is:loop 0 , 4 , move 0 - 2 , 7 * v0  decode:loop 0 , 4 , move 0 - 2 , 7 * v0 
[8372] c:0 is:( move ua , 3 ; move ua , ua / 5 )  decode:( move ua , 3 ; move ua , 5 / 4 ) 
[8373] c:3 is:( move ul - ua , 0 ; move 8 , ul )  decode:( move ul - ua , 0 ; move 8 , ul ) 
[8374] c:0 is:loop 0 , 4 , move 2 + v0 , 0 - 9  decode:loop 0 , 4 , move 0 - 4 , 0 - 9 
[8375] c:0 is:( move 2 , 6 ; move ul - ua , ul )  decode:( move 2 , 6 ; move ua - ul , ul ) 
[8376] c:3 is:( move ua , 4 * 3 ; move ul , ul )  decode:( move ua , 4 * 3 ; move ul , ul ) 
[8377] c:3 is:( move ua , 2 ; move ua + ul , 8 )  decode:( move ua , 2 ; move ua + ul , 8 ) 
[8378] c:0 is:loop 0 , 3 , move 4 + 4 , v0 - 4  decode:loop 0 , 4 , move 4 + v0 , 4 - 4 
[8379] c:0 is:( move ua , ua * ua ; move 7 , 2 )  decode:( move ua , 8 ; move 7 , 2 ) 
[8380] c:3 is:loop 0 , 2 , move 4 + v0 , 4 * 4  decode:loop 0 , 2 , move 4 + v0 , 4 * 4 
[8381] c:3 is:loop 0 , 3 , move v0 - 4 , 2 / 3  decode:loop 0 , 3 , move v0 - 4 , 2 / 3 
[8382] c:3 is:( move ua , 3 ; move 6 , ua * ua )  decode:( move ua , 3 ; move 6 , ua * ua ) 
[8383] c:3 is:loop 0 , 4 , move 0 - 3 , 5 / v0  decode:loop 0 , 4 , move 0 - 3 , 5 / v0 
[8384] c:3 is:( move 4 , ul ; move 4 , ua * ua )  decode:( move 4 , ul ; move 4 , ua * ua ) 
[8385] c:0 is:( move ul - ua , 3 ; move ul , 5 )  decode:( move 5 , 0 ; move ul , 5 ) 
[8386] c:0 is:loop 0 , 4 , move 2 , 3 / 3 - v0  decode:0 loop 0 , 4 , move 2 , ua / v0 
[8387] c:3 is:( move ua , ua * ua ; move 4 , 5 )  decode:( move ua , ua * ua ; move 4 , 5 ) 
[8388] c:3 is:( move 5 , 2 / ua ; move ua , ul )  decode:( move 5 , 2 / ua ; move ua , ul ) 
[8389] c:1 is:( move ua , ul ; move 3 , ua / 4 )  decode:( move ua , ul ; move 3 , ua / 4 ) 
[8390] c:3 is:( move 4 , 4 ; move ul - ua , ul )  decode:( move 4 , 4 ; move ul - ua , ul ) 
[8391] c:0 is:( move ua - ul , ul ; move 4 , 4 )  decode:( move 6 , ul ; move 4 , 4 ) 
[8392] c:3 is:( move ua , ua / 4 ; move ua , 4 )  decode:( move ua , ua / 4 ; move ua , 4 ) 
[8393] c:0 is:( move ul , 6 ; move 3 + ua , ul )  decode:( move ul , 6 ; move d 4 + 3 ) 
[8394] c:0 is:( move ul - ua , ul ; move 4 , 4 )  decode:( move 5 , 2 ; move 4 , 2 / 5 ) 
[8395] c:0 is:( move 3 , ul ; move ua , 4 / ua )  decode:( move 3 , ul ; move ua , 2 / 4 ) 
[8396] c:1 is:loop 0 , 3 , move 3 , 3 + 4 / v0  decode:loop 0 , 3 , move 3 , 3 + 4 / v0 
[8397] c:3 is:( move 3 , 6 ; move ua , ua * ua )  decode:( move 3 , 6 ; move ua , ua * ua ) 
[8398] c:0 is:loop 0 , 3 , move 3 + v0 , 0 - 9  decode:loop 0 , 3 , move v0 - ua , 0 - 9 
[8399] c:3 is:( move ul - ua , 3 ; move ua , 6 )  decode:( move ul - ua , 3 ; move ua , 6 ) 
[8400] c:3 is:( move 3 , ul ; move ua - ul , 5 )  decode:( move 3 , ul ; move ua - ul , 5 ) 
[8401] c:0 is:( move ua , ua / 6 ; move ua , 2 )  decode:( move ua , ul ; move ua , 2 ) 
[8402] c:0 is:loop 0 , 4 , move v0 * 2 , 3 / 2  decode:( move ua , 3 ; move 5 , 9 + 4 ) 
[8403] c:3 is:( move ul , 4 ; move 4 , ua * ua )  decode:( move ul , 4 ; move 4 , ua * ua ) 
[8404] c:0 is:( move ul - ua , 5 ; move ua , 4 )  decode:( move 5 , ua * ua ; move ua , ul ) 
[8405] c:0 is:loop 0 , 4 , move 3 + v0 , 5 * 2  decode:loop 0 , 3 , move v0 - ua , 0 - 9 
[8406] c:0 is:loop 0 , 2 , move 4 + v0 , 4 / 3  decode:loop 0 , 2 , move ua - 2 , 4 / 3 
[8407] c:3 is:( move 3 , ul ; move 5 , ua * ua )  decode:( move 3 , ul ; move 5 , ua * ua ) 
[8408] c:1 is:( move 2 , ul ; move ua + ul , 8 )  decode:( move 2 , ul ; move ua + ul , 8 ) 
[8409] c:0 is:loop 0 , 3 , move v0 - 3 , 4 / 3  decode:loop 0 , 3 , move v0 - 3 , 3 / 4 
[8410] c:0 is:( move ua , ul ; move ua , 7 + 4 )  decode:( move 6 , 9 ; move ua , 3 / 2 ) 
[8411] c:3 is:( move ua , 9 ; move ua + ul , 2 )  decode:( move ua , 9 ; move ua + ul , 2 ) 
[8412] c:0 is:( move 2 - ua , ul ; move ua , 8 )  decode:( move 0 - 4 , ul ; move ua , 8 ) 
[8413] c:3 is:( move ul - ua , 6 ; move 3 , ul )  decode:( move ul - ua , 6 ; move 3 , ul ) 
[8414] c:3 is:( move ul - ua , 4 ; move 5 , ul )  decode:( move ul - ua , 4 ; move 5 , ul ) 
[8415] c:3 is:( move ua + ul , 7 ; move ua , 4 )  decode:( move ua + ul , 7 ; move ua , 4 ) 
[8416] c:0 is:( move 4 - ua , ul ; move 5 , ul )  decode:( move 0 - 2 , ul ; move 5 , ul ) 
[8417] c:0 is:( move ua - ul , 2 ; move ua , 8 )  decode:( move 5 , 2 ; move ua , ua * ua ) 
[8418] c:0 is:loop 0 , 4 , move 4 , 3 - v0 * 3  decode:loop 0 , 3 , move 4 + v0 , 3 - 3 
[8419] c:0 is:( move ul , 4 ; move ua , 4 / ua )  decode:( move ul , 4 ; move ua , 2 / 4 ) 
[8420] c:0 is:loop 0 , 4 , move 2 , 3 / 3 * v0  decode:( move 3 , 3 ; move 5 , 4 / 3 ) 
[8421] c:0 is:( move ua , 3 / ua ; move 5 , ul )  decode:( move ua , 9 / ua ; move 5 , ul ) 
[8422] c:0 is:loop 0 , 2 , move v0 - 4 , 4 / 3  decode:( move 3 , 9 ; move 4 , 5 ) 
[8423] c:3 is:( move ua , 2 ; move ua + ul , 9 )  decode:( move ua , 2 ; move ua + ul , 9 ) 
[8424] c:3 is:( move ua , ua / 4 ; move ua , 5 )  decode:( move ua , ua / 4 ; move ua , 5 ) 
[8425] c:1 is:( move ua + ul , ul ; move 8 , 2 )  decode:( move ua + ul , ul ; move 8 , 2 ) 
[8426] c:0 is:( move ua , 2 ; move ul - ua , 8 )  decode:( move ua , 2 ; move 5 , 8 ) 
[8427] c:0 is:( move ua - ul , ul ; move 5 , 4 )  decode:( move 5 , ul ; move ul - ua , 4 ) 
[8428] c:0 is:( move 2 , 8 ; move ua + ul , ul )  decode:( move 2 , ul ; move ua + ul , ul ) 
[8429] c:3 is:loop 0 , 3 , move 4 , 4 * 3 - v0  decode:loop 0 , 3 , move 4 , 4 * 3 - v0 
[8430] c:3 is:( move 5 , ul ; move ua , ua / 3 )  decode:( move 5 , ul ; move ua , ua / 3 ) 
[8431] c:0 is:( move 8 , ua * ua ; move ua , 2 )  decode:( move ua + 2 , 8 ; move ua , 2 ) 
[8432] c:0 is:loop 0 , 3 , move 4 + v0 , 0 - 9  decode:loop 0 , 3 , move v0 - ua , 0 - 9 
[8433] c:0 is:loop 0 , 3 , move v0 * 4 , 3 / 2  decode:loop 0 , 3 , move v0 * 2 , ua / 4 
[8434] c:0 is:loop 0 , 3 , move 3 , 3 * 4 * v0  decode:loop 0 , 4 , move 4 - ua , 4 / 4 
[8435] c:3 is:loop 0 , 3 , move 4 - v0 , 4 * 3  decode:loop 0 , 3 , move 4 - v0 , 4 * 3 
[8436] c:0 is:loop 0 , 3 , move 4 , 2 - 4 / v0  decode:( move 3 , 9 * 4 ; move 4 , 2 ) 
[8437] c:3 is:( move 4 , ul ; move 5 , ua * ua )  decode:( move 4 , ul ; move 5 , ua * ua ) 
[8438] c:3 is:( move ua - ul , 6 ; move 3 , ul )  decode:( move ua - ul , 6 ; move 3 , ul ) 
[8439] c:3 is:( move 6 , ul ; move ua + ul , 4 )  decode:( move 6 , ul ; move ua + ul , 4 ) 
[8440] c:0 is:loop 0 , 4 , move 0 - 3 , 9 + v0  decode:loop 0 , 4 , move 3 - ua , 9 + v0 
[8441] c:0 is:loop 0 , 4 , move 4 - v0 , 2 / 3  decode:0 - loop 0 , 4 , move 4 - ua , 5 
[8442] c:0 is:loop 0 , 4 , move 2 , 4 * 4 - v0  decode:loop 0 , 4 , move 2 , v0 - 4 
[8443] c:0 is:loop 0 , 4 , move 3 , 0 - 7 * v0  decode:loop 0 , 4 , move 3 , 0 - 9 * v0 
[8444] c:3 is:( move ua , 3 ; move ul - ua , 7 )  decode:( move ua , 3 ; move ul - ua , 7 ) 
[8445] c:0 is:( move ua + ul , ul ; move 4 , 6 )  decode:( move ua , ul ; move 4 , 6 ) 
[8446] c:3 is:( move ua , 6 ; move ua , ua / 3 )  decode:( move ua , 6 ; move ua , ua / 3 ) 
[8447] c:3 is:( move ua + ul , 2 ; move ua , 9 )  decode:( move ua + ul , 2 ; move ua , 9 ) 
[8448] c:0 is:loop 0 , 4 , move v0 + 4 , 2 * 5  decode:loop 0 , 4 , move v0 + 4 , 5 * 4 
[8449] c:0 is:( move 9 , 0 ; move ul - ua , ul )  decode:( move 9 , 0 ; move ua - ul , 4 ) 
[8450] c:3 is:( move ul - ua , 5 ; move 4 , ul )  decode:( move ul - ua , 5 ; move 4 , ul ) 
[8451] c:0 is:loop 0 , 4 , move v0 + 3 , 4 * 4  decode:loop 0 , 4 , move v0 - ua , 4 * 4 
[8452] c:0 is:loop 0 , 6 , move v0 - 3 , 4 + 3  decode:( move 4 , 4 ; move 4 , 4 / ua ) 
[8453] c:3 is:( move 4 , 5 ; move ul - ua , ul )  decode:( move 4 , 5 ; move ul - ua , ul ) 
[8454] c:3 is:( move ul - ua , 0 ; move 9 , ul )  decode:( move ul - ua , 0 ; move 9 , ul ) 
[8455] c:0 is:loop 0 , 2 , move 4 - v0 , 4 / 3  decode:loop 0 , 2 , move 3 - ua , 4 / 3 
[8456] c:0 is:loop 0 , 3 , move 3 - v0 , 4 / 3  decode:loop 0 , 4 , move 3 / v0 , 4 / 3 
[8457] c:0 is:loop 0 , 4 , move 3 , 4 * 4 + v0  decode:( move 4 , 0 - 3 ; move 4 , 9 ) 
[8458] c:3 is:( move ua , 5 ; move ul - ua , 5 )  decode:( move ua , 5 ; move ul - ua , 5 ) 
[8459] c:3 is:( move ua + 2 , ul ; move ua , 9 )  decode:( move ua + 2 , ul ; move ua , 9 ) 
[8460] c:0 is:loop 0 , 3 , move 4 + v0 , 4 * 4  decode:loop 0 , 3 , move v0 - ua , 4 * 4 
[8461] c:0 is:( move ua , ul ; move 0 - 9 , ul )  decode:( move ua , ul ; move 9 , ua / 3 ) 
[8462] c:3 is:loop 0 , 3 , move 0 - 4 , 9 + v0  decode:loop 0 , 3 , move 0 - 4 , 9 + v0 
[8463] c:0 is:loop 0 , 4 , move v0 - 4 , 3 / 2  decode:loop 0 , 3 , move 3 - ua , 3 / 2 
[8464] c:3 is:( move ul , 8 ; move ua + ul , 2 )  decode:( move ul , 8 ; move ua + ul , 2 ) 
[8465] c:3 is:( move ua + ul , 6 ; move ua , 5 )  decode:( move ua + ul , 6 ; move ua , 5 ) 
[8466] c:3 is:( move ua + ul , ul ; move 2 , 8 )  decode:( move ua + ul , ul ; move 2 , 8 ) 
[8467] c:3 is:( move ua , 5 ; move ua , ua / 4 )  decode:( move ua , 5 ; move ua , ua / 4 ) 
[8468] c:0 is:( move 3 , ul ; move ua , ul / 4 )  decode:( move 3 , ul ; move ua , ul / ul ) 
[8469] c:0 is:loop 0 , 4 , move v0 * 3 , 3 / 2  decode:( move 9 , 9 ; move ua + 2 , 8 ) 
[8470] c:0 is:loop 0 , 4 , move 3 , 3 - 3 / v0  decode:loop 0 , 4 , move ua - 3 , v0 / 4 
[8471] c:0 is:( move 4 , ua / 4 ; move ua , ul )  decode:( move 4 , 3 / 2 ; move ua , ul ) 
[8472] c:0 is:loop 0 , 4 , move v0 + 3 , 4 / 3  decode:loop 0 , 4 , move ua - 2 , 4 / 3 
[8473] c:3 is:( move ua + ul , 3 ; move ua , 8 )  decode:( move ua + ul , 3 ; move ua , 8 ) 
[8474] c:3 is:( move ua , ul ; move 4 , ua / 4 )  decode:( move ua , ul ; move 4 , ua / 4 ) 
[8475] c:0 is:( move ul - ua , 5 ; move ua , 5 )  decode:( move 5 , ua * ua ; move ua , 5 ) 
[8476] c:0 is:( move ua , 4 ; move ua / 4 , ul )  decode:( move ua , 4 ; move ul , ul ) 
[8477] c:0 is:( move 6 , 4 ; move ua , ua * ua )  decode:( move 6 , 4 ; move ua , 8 ) 
[8478] c:1 is:( move ua , ua / 4 ; move ul , 4 )  decode:( move ul , ua / 4 ; move ua , 4 ) 
[8479] c:0 is:loop 0 , 4 , move v0 - 7 , 0 - 4  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[8480] c:0 is:loop 0 , 3 , move 3 , 4 / v0 * 2  decode:loop 0 , 3 , move 3 , 4 - v0 
[8481] c:0 is:( move 2 , ul ; move ul - ua , 7 )  decode:( move 3 , 0 - 3 ; move 5 , 4 ) 
[8482] c:3 is:( move ua , ul / 6 ; move ua , 2 )  decode:( move ua , ul / 6 ; move ua , 2 ) 
[8483] c:0 is:( move ua - ul , 5 ; move 4 , ul )  decode:( move 5 , 5 ; move 4 , ul ) 
[8484] c:0 is:loop 0 , 4 , move v0 - 4 , 2 / 3  decode:loop 0 , 4 , move 4 - ua , 2 - 9 
[8485] c:0 is:loop 0 , 3 , move 3 , 4 / v0 - 3  decode:loop 0 , 3 , move 3 - ua , ua / v0 
[8486] c:0 is:( move 4 , 5 ; move ua - ul , ul )  decode:( move 4 , 5 ; move ul - ua , ul ) 
[8487] c:3 is:loop 0 , 4 , move 3 , 2 - 4 / v0  decode:loop 0 , 4 , move 3 , 2 - 4 / v0 
[8488] c:0 is:( move ua - ul , ul ; move 4 , 5 )  decode:( move 5 , ul ; move 4 , 5 ) 
[8489] c:0 is:( move 4 , 4 / ua ; move ua , ul )  decode:( move 4 , 2 / ua ; move ua , ul ) 
[8490] c:0 is:( move ua , 3 ; move ua + ul , 8 )  decode:( move ua , 3 ; move 8 , ua * ua ) 
[8491] c:0 is:loop 0 , 4 , move 4 , 2 + 4 / v0  decode:loop 0 , 4 , move 3 + v0 , 2 / 3 
[8492] c:3 is:loop 0 , 4 , move 0 - 4 , 5 / v0  decode:loop 0 , 4 , move 0 - 4 , 5 / v0 
[8493] c:0 is:loop 0 , 4 , move 2 , 4 * v0 - 4  decode:loop 0 , 4 , move 2 , v0 + 4 
[8494] c:3 is:( move ul - ua , 8 ; move ua , 2 )  decode:( move ul - ua , 8 ; move ua , 2 ) 
[8495] c:3 is:( move ua , ua / 3 ; move 5 , ul )  decode:( move ua , ua / 3 ; move 5 , ul ) 
[8496] c:0 is:( move ua , 2 ; move ua - ul , 8 )  decode:( move ua , 2 ; move 5 , ua * ua ) 
[8497] c:3 is:( move 4 , ul ; move ua , ua / 4 )  decode:( move 4 , ul ; move ua , ua / 4 ) 
[8498] c:0 is:( move 5 , 4 ; move ua - ul , ul )  decode:( move 4 , 4 ; move ua - ul , ul ) 
[8499] c:0 is:( move ul , 3 ; move ua , ul / 4 )  decode:( move ul , 3 ; move ua , 2 / ua ) 
[8500] c:0 is:( move ua - ul , 6 ; move ua , 4 )  decode:( move ul - ua , 6 ; move ua , 4 ) 
[8501] c:3 is:( move ua , ua * ua ; move 8 , 2 )  decode:( move ua , ua * ua ; move 8 , 2 ) 
[8502] c:0 is:loop 0 , 4 , move 2 , 4 + 4 / v0  decode:loop 0 , 4 , move 2 , 4 / 4 / v0 
[8503] c:0 is:loop 0 , 3 , move 4 + v0 , 4 / 3  decode:loop 0 , 3 , move 4 + v0 , 0 - 4 
[8504] c:3 is:loop 0 , 4 , move 4 + v0 , 0 - 8  decode:loop 0 , 4 , move 4 + v0 , 0 - 8 
[8505] c:0 is:loop 0 , 3 , move 4 , 4 * v0 - 3  decode:loop 0 , 3 , move 4 , 0 - 0 / v0 
[8506] c:3 is:( move 3 , ul / 4 ; move ua , ul )  decode:( move 3 , ul / 4 ; move ua , ul ) 
[8507] c:0 is:loop 0 , 3 , move 2 + v0 , 4 / 5  decode:loop 0 , 3 , move 3 , 4 / 3 
[8508] c:0 is:loop 0 , 4 , move 3 , 4 + 3 / v0  decode:loop 0 , 4 , move 3 , v0 + 3 
[8509] c:0 is:( move ua , ua * ua ; move 6 , 4 )  decode:( move ua , ua * ua ; move ua , 4 ) 
[8510] c:0 is:loop 0 , 4 , move 0 - 4 , v0 + 8  decode:loop 0 , 4 , move 0 - 4 , 8 + v0 
[8511] c:3 is:( move ua , 4 ; move ul - ua , 6 )  decode:( move ua , 4 ; move ul - ua , 6 ) 
[8512] c:3 is:( move 5 , 5 ; move ua , ua * ua )  decode:( move 5 , 5 ; move ua , ua * ua ) 
[8513] c:0 is:loop 0 , 3 , move v0 - 4 , 4 * 3  decode:loop 0 , 3 , move 0 - 3 , 4 * 3 
[8514] c:0 is:( move ul , 4 ; move ul - ua , 5 )  decode:( move ul , 4 ; move ua - ul , 5 ) 
[8515] c:0 is:loop 0 , 4 , move 3 + v0 , 0 - 9  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[8516] c:0 is:( move ua - ul , 4 ; move 5 , ul )  decode:( move 5 , 4 ; move 5 , ul ) 
[8517] c:3 is:( move ua , 6 ; move ua - ul , 4 )  decode:( move ua , 6 ; move ua - ul , 4 ) 
[8518] c:3 is:( move 8 , ul ; move ua + ul , 2 )  decode:( move 8 , ul ; move ua + ul , 2 ) 
[8519] c:3 is:( move 2 - ua , 8 ; move ua , ul )  decode:( move 2 - ua , 8 ; move ua , ul ) 
[8520] c:3 is:( move ul - ua , 4 ; move ua , 6 )  decode:( move ul - ua , 4 ; move ua , 6 ) 
[8521] c:0 is:loop 0 , 3 , move 3 + v0 , 2 / 6  decode:loop 0 , 3 , move 3 + v0 , 2 / 4 
[8522] c:0 is:loop 0 , 3 , move 4 , 2 / 2 / v0  decode:loop 0 , 3 , move ua - 2 , 2 / v0 
[8523] c:0 is:( move ua - 2 , 8 ; move ua , ul )  decode:( move 4 , 8 ; move ua , ul ) 
[8524] c:0 is:( move ua - ul , 7 ; move ua , 4 )  decode:( move 5 , 4 / 7 ; move ua , 4 ) 
[8525] c:0 is:loop 0 , 4 , move v0 * 2 , 0 - 9  decode:loop 0 , 3 , move v0 - ua , 9 
[8526] c:0 is:( move ua , ul / 6 ; move ul , 2 )  decode:( move ul , ul / 4 ; move ul , 2 ) 
[8527] c:3 is:loop 0 , 4 , move 0 - 3 , 8 * v0  decode:loop 0 , 4 , move 0 - 3 , 8 * v0 
[8528] c:0 is:loop 0 , 3 , move 4 - v0 , 4 / 3  decode:loop 0 , 4 , move 4 - ua , 4 / 3 
[8529] c:0 is:( move ua , ua * ua ; move 4 , 7 )  decode:( move ua , 8 ; move 4 , 3 / 4 ) 
[8530] c:0 is:( move 2 , ul / 6 ; move ua , ul )  decode:( move 2 , ul / 4 ; move ua , ul ) 
[8531] c:0 is:loop 0 , 4 , move 0 - 2 , 9 * v0  decode:loop 0 , 4 , move 4 - ua , 9 * v0 
[8532] c:3 is:( move 9 , 2 ; move ua , ua * ua )  decode:( move 9 , 2 ; move ua , ua * ua ) 
[8533] c:0 is:loop 0 , 4 , move 4 - v0 , 2 / 4  decode:loop 0 , 4 , move ul + v0 , 4 / ua 
[8534] c:3 is:( move ua + ul , ul ; move 9 , 2 )  decode:( move ua + ul , ul ; move 9 , 2 ) 
[8535] c:0 is:( move 2 - ua , ul ; move ua , 9 )  decode:loop 0 , 2 , move ul - ua , 2 / 4 
[8536] c:3 is:( move 8 , ul ; move ua - ul , 2 )  decode:( move 8 , ul ; move ua - ul , 2 ) 
[8537] c:0 is:loop 0 , 3 , move 3 , 4 / 4 - v0  decode:loop 0 , 3 , move 3 , 4 / 4 / v0 
[8538] c:0 is:loop 0 , 4 , move v0 - 4 , 2 / 4  decode:loop 0 , 4 , move ua - 4 , 2 / 4 
[8539] c:3 is:( move ua , ul / ua ; move 7 , 2 )  decode:( move ua , ul / ua ; move 7 , 2 ) 
[8540] c:3 is:( move 5 , ua * ua ; move 5 , ul )  decode:( move 5 , ua * ua ; move 5 , ul ) 
[8541] c:3 is:( move 5 , ul ; move ua , ua / 4 )  decode:( move 5 , ul ; move ua , ua / 4 ) 
[8542] c:0 is:loop 0 , 6 , move 4 - v0 , 3 * 2  decode:( move 3 , 6 ; move ua + ul , 7 ) 
[8543] c:0 is:loop 0 , 3 , move 0 - 4 , 9 - v0  decode:loop 0 , 3 , move ua - 2 , 9 / v0 
[8544] c:0 is:loop 0 , 3 , move 4 - v0 , 3 * 5  decode:loop 0 , 3 , move 3 , 0 - 4 
[8545] c:0 is:( move 3 , ul ; move ua + ul , 8 )  decode:( move 3 , ul ; move 7 , 7 + 4 ) 
[8546] c:0 is:loop 0 , 6 , move 2 + v0 , 4 * 4  decode:loop 0 , 4 , move ua , 0 - 3 
[8547] c:3 is:( move ul - ua , ul ; move 4 , 6 )  decode:( move ul - ua , ul ; move 4 , 6 ) 
[8548] c:0 is:( move ua , 7 ; move ua - ul , 4 )  decode:( move ua , 7 ; move ul - ua , 4 ) 
[8549] c:0 is:( move ua - ul , 6 ; move ua , 5 )  decode:( move 5 , 6 ; move ua , 5 ) 
[8550] c:3 is:( move ua , 9 ; move ul - ua , 2 )  decode:( move ua , 9 ; move ul - ua , 2 ) 
[8551] c:3 is:( move 8 , 2 ; move ul - ua , ul )  decode:( move 8 , 2 ; move ul - ua , ul ) 
[8552] c:0 is:( move ua - ul , 3 ; move ua , 8 )  decode:( move 5 , 3 ; move ua , ua * ua ) 
[8553] c:0 is:loop 0 , 3 , move 4 , 4 * 4 - v0  decode:( move ua + 2 , 3 ; move 4 , 8 ) 
[8554] c:3 is:loop 0 , 4 , move 0 - 3 , 9 - v0  decode:loop 0 , 4 , move 0 - 3 , 9 - v0 
[8555] c:3 is:( move ua + ul , 9 ; move 2 , ul )  decode:( move ua + ul , 9 ; move 2 , ul ) 
[8556] c:0 is:loop 0 , 4 , move 2 , 4 / 2 / v0  decode:loop 0 , 4 , move 2 , 2 / v0 
[8557] c:0 is:loop 0 , 3 , move 3 / v0 , 2 / 4  decode:loop 0 , 4 , move 2 , 2 / 8 
[8558] c:3 is:( move ua , 3 ; move ul - ua , 8 )  decode:( move ua , 3 ; move ul - ua , 8 ) 
[8559] c:0 is:( move ua , 2 / 6 ; move ul , ul )  decode:( move ul , 2 ; move ua , ul ) 
[8560] c:0 is:loop 0 , 4 , move 4 , 2 / 2 / v0  decode:loop 0 , 4 , move 4 , 2 / v0 
[8561] c:3 is:( move ua , 4 ; move ua + ul , 8 )  decode:( move ua , 4 ; move ua + ul , 8 ) 
[8562] c:3 is:( move ul , 9 + 2 ; move ua , ul )  decode:( move ul , 9 + 2 ; move ua , ul ) 
[8563] c:0 is:( move ul , 4 ; move ua , ul / 4 )  decode:( move ul , ul ; move ua , ul / 4 ) 
[8564] c:0 is:loop 0 , 4 , move 4 , 4 * 4 + v0  decode:loop 0 , 4 , move 4 , 4 + 4 + v0 
[8565] c:0 is:( move ua , ua * ua ; move 7 , 4 )  decode:( move ua , 8 ; move ua + ul , 4 ) 
[8566] c:0 is:( move ua , ul ; move ua - 9 , 2 )  decode:( move ua , ul ; move 3 , 5 ) 
[8567] c:0 is:( move ua , 9 ; move 2 - ua , ul )  decode:( move ua , 9 ; move 5 , ua / 3 ) 
[8568] c:3 is:( move ua + ul , 9 ; move ua , 3 )  decode:( move ua + ul , 9 ; move ua , 3 ) 
[8569] c:0 is:loop 0 , 3 , move 3 , 4 - v0 / 4  decode:loop 0 , 3 , move 3 , 4 * 4 
[8570] c:0 is:( move ul - ua , 4 ; move ua , 7 )  decode:( move ua - ul , 4 ; move ua , 7 ) 
[8571] c:0 is:loop 0 , 4 , move v0 + 4 , 4 * 4  decode:loop 0 , 4 , move v0 + 4 , 0 - 9 
[8572] c:0 is:( move ua , ua / 4 ; move 5 , ul )  decode:( move ua , 3 / 2 ; move 5 , ul ) 
[8573] c:3 is:( move ua + ul , 8 ; move ua , 4 )  decode:( move ua + ul , 8 ; move ua , 4 ) 
[8574] c:0 is:( move ua , ul ; move ua - 4 , 7 )  decode:( move ua , ul ; move 3 , 7 ) 
[8575] c:0 is:loop 0 , 4 , move 4 + v0 , 0 - 9  decode:loop 0 , 4 , move ua , 0 - 9 
[8576] c:0 is:( move 3 , ul ; move ul - ua , 7 )  decode:( move 3 , ul ; move ua - ul , 7 ) 
[8577] c:0 is:( move 8 , 3 ; move ua , ua * ua )  decode:( move ua + 2 , 3 ; move ua , 5 ) 
[8578] c:3 is:( move 4 , ul ; move ul - ua , 6 )  decode:( move 4 , ul ; move ul - ua , 6 ) 
[8579] c:0 is:loop 0 , 6 , move 2 - v0 , 2 / 4  decode:( move 3 , 4 ; move ua , 5 ) 
[8580] c:3 is:( move ua + 3 , ul ; move ua , 9 )  decode:( move ua + 3 , ul ; move ua , 9 ) 
[8581] c:0 is:loop 0 , 4 , move 3 , 4 * v0 - 4  decode:loop 0 , 4 , move 3 , 4 * 4 - v0 
[8582] c:0 is:( move ua - ul , 9 ; move ua , 2 )  decode:( move ul - ua , ul ; move ua , 2 ) 
[8583] c:0 is:loop 0 , 4 , move v0 * 2 , 3 / 4  decode:( move ua + ul , 6 ; move ua , 7 ) 
[8584] c:0 is:loop 0 , 6 , move 3 / 2 , 3 - v0  decode:( move 3 , 4 ; move ua - ul , 4 ) 
[8585] c:3 is:( move 6 , ul ; move ua , ua / 3 )  decode:( move 6 , ul ; move ua , ua / 3 ) 
[8586] c:3 is:( move 2 , ul ; move ua - ul , 8 )  decode:( move 2 , ul ; move ua - ul , 8 ) 
[8587] c:0 is:loop 0 , 5 , move 3 - v0 , 4 * 3  decode:loop 0 , 4 , move v0 , 2 / 2 
[8588] c:0 is:loop 0 , 4 , move 4 + v0 , 5 / 2  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[8589] c:0 is:( move 9 , ul ; move ua + ul , 2 )  decode:( move 9 , ul ; move 7 , 2 ) 
[8590] c:0 is:loop 0 , 4 , move 3 , 4 * 4 - v0  decode:loop 0 , 4 , move 3 , 0 - v0 / 4 
[8591] c:0 is:loop 0 , 4 , move 4 , 4 * v0 - 3  decode:0 loop 0 , 3 , move 4 , 4 * v0 0 
[8592] c:0 is:loop 0 , 3 , move 4 / v0 , 2 / 3  decode:loop 0 , 3 , move 4 / v0 , 5 / 3 
[8593] c:0 is:loop 0 , 3 , move 4 - v0 , 4 * 4  decode:loop 0 , 3 , move 3 , 4 * 4 
[8594] c:3 is:( move ul - ua , 5 ; move 5 , ul )  decode:( move ul - ua , 5 ; move 5 , ul ) 
[8595] c:3 is:( move ua , ul / 4 ; move 4 , ul )  decode:( move ua , ul / 4 ; move 4 , ul ) 
[8596] c:3 is:loop 0 , 4 , move 0 - 4 , 9 + v0  decode:loop 0 , 4 , move 0 - 4 , 9 + v0 
[8597] c:3 is:( move ua , 8 ; move ua + ul , 4 )  decode:( move ua , 8 ; move ua + ul , 4 ) 
[8598] c:3 is:( move ua , 3 ; move 8 , ua * ua )  decode:( move ua , 3 ; move 8 , ua * ua ) 
[8599] c:0 is:loop 0 , 3 , move 3 / v0 , 3 * 4  decode:loop 0 , 3 , move 3 / v0 , 4 * 3 
[8600] c:0 is:loop 0 , 4 , move 4 , 3 + 4 / v0  decode:loop 0 , 4 , move 4 , 4 + 3 + v0 
[8601] c:3 is:( move 5 , 6 ; move ua , ua * ua )  decode:( move 5 , 6 ; move ua , ua * ua ) 
[8602] c:0 is:( move 2 - ua , 9 ; move ua , ul )  decode:( move 4 , 9 ; move ua , ua / 3 ) 
[8603] c:0 is:loop 0 , 4 , move v0 * 2 , 4 * 4  decode:loop 0 , 4 , move v0 * 2 , 0 - 9 
[8604] c:3 is:( move ua + ul , 8 ; move 3 , ul )  decode:( move ua + ul , 8 ; move 3 , ul ) 
[8605] c:0 is:( move ua , ul ; move 2 - ua , 9 )  decode:( move ua , ul ; move 4 , 3 * 9 ) 
[8606] c:3 is:loop 0 , 4 , move 0 - 4 , 7 * v0  decode:loop 0 , 4 , move 0 - 4 , 7 * v0 
[8607] c:0 is:loop 0 , 3 , move 3 + 2 , 7 / v0  decode:loop 0 , 3 , move 4 + v0 , 7 / 3 
[8608] c:3 is:( move ul - ua , 3 ; move ua , 8 )  decode:( move ul - ua , 3 ; move ua , 8 ) 
[8609] c:1 is:( move ua , ul / 5 ; move ua , 4 )  decode:( move ua , ul / 4 ; move ua , 4 ) 
[8610] c:0 is:( move ua , 3 ; move ua - ul , 8 )  decode:( move ua , 3 ; move 5 , ua * ua ) 
[8611] c:0 is:loop 0 , 4 , move 4 , 4 + v0 * 4  decode:loop 0 , 4 , move 4 , 4 + 4 / v0 
[8612] c:0 is:( move ul - ua , 9 ; move ua , 2 )  decode:( move 5 , 3 / ua ; move ua , 2 ) 
[8613] c:3 is:loop 0 , 4 , move v0 * 2 , 4 / 3  decode:loop 0 , 4 , move v0 * 2 , 4 / 3 
[8614] c:0 is:loop 0 , 4 , move 0 - 3 , v0 - 9  decode:loop 0 , 4 , move 0 - 3 , 9 9 - 3 
[8615] c:3 is:( move ul - ua , ul ; move 5 , 5 )  decode:( move ul - ua , ul ; move 5 , 5 ) 
[8616] c:0 is:loop 0 , 4 , move v0 - 4 , 3 * 4  decode:loop 0 , 3 , move 3 - ua , 4 / 4 
[8617] c:3 is:( move 3 , 8 ; move ua + ul , ul )  decode:( move 3 , 8 ; move ua + ul , ul ) 
[8618] c:3 is:( move 4 , ul / 4 ; move ua , ul )  decode:( move 4 , ul / 4 ; move ua , ul ) 
[8619] c:0 is:loop 0 , 7 , move 4 - v0 , 2 - 3  decode:loop 0 , 3 , move 4 , v0 - 9 
[8620] c:0 is:loop 0 , 6 , move 2 - 3 , v0 * 4  decode:( move 3 , 0 - 4 ; move 3 , 9 ) 
[8621] c:0 is:( move ul - ua , 6 ; move 4 , ul )  decode:( move 5 , 9 ; move 2 - ua , ul ) 
[8622] c:0 is:( move 4 , 6 ; move ua - ul , ul )  decode:( move 4 , 6 ; move ul - ua , ul ) 
[8623] c:0 is:( move ua , ul / 6 ; move 2 , ul )  decode:( move ua , ul / 4 ; move 2 , ul ) 
[8624] c:3 is:( move 9 , ua * ua ; move ua , 2 )  decode:( move 9 , ua * ua ; move ua , 2 ) 
[8625] c:0 is:loop 0 , 4 , move 2 , 4 * 4 * v0  decode:loop 0 , 4 , move 2 , 4 * 4 / v0 
[8626] c:0 is:loop 0 , 4 , move 4 , 3 * 4 - v0  decode:loop 0 , 4 , move 4 , v0 + 4 
[8627] c:0 is:( move ua , 9 ; move ua - ul , 2 )  decode:( move ua , 9 ; move 5 , 2 ) 
[8628] c:0 is:( move 4 , 6 ; move ul - ua , ul )  decode:( move 4 , 6 ; move ua - ul , 4 ) 
[8629] c:3 is:( move ul - ua , 6 ; move ua , 5 )  decode:( move ul - ua , 6 ; move ua , 5 ) 
[8630] c:3 is:( move ua , 6 ; move 5 , ua * ua )  decode:( move ua , 6 ; move 5 , ua * ua ) 
[8631] c:0 is:( move ua + ul , 4 ; move ua , 8 )  decode:( move 8 , 4 ; move ua , 8 ) 
[8632] c:3 is:( move ua + ul , 7 ; move 4 , ul )  decode:( move ua + ul , 7 ; move 4 , ul ) 
[8633] c:0 is:( move 2 , ul ; move ul - ua , 8 )  decode:( move 2 , ul ; move ua - ul , 8 ) 
[8634] c:0 is:( move 8 , ua * ua ; move ua , 3 )  decode:( move ua + ul , ua + vmove move 0 ) 
[8635] c:3 is:( move 9 , 3 ; move ua , ua * ua )  decode:( move 9 , 3 ; move ua , ua * ua ) 
[8636] c:0 is:loop 0 , 3 , move 3 / v0 , 4 / 3  decode:loop 0 , 4 , move ua - 4 , 4 / 3 
[8637] c:0 is:loop 0 , 3 , move 4 , v0 * 4 / 3  decode:loop 0 , 3 , move 4 , v0 * 4 
[8638] c:0 is:( move ua + ul , 4 ; move ua , 9 )  decode:loop 0 , 2 , move ua , v0 + 9 
[8639] c:0 is:loop 0 , 3 , move v0 * 4 , 0 - 9  decode:( move 4 , 4 ; move 9 , 9 ) 
[8640] c:3 is:( move 3 , 8 ; move ul - ua , ul )  decode:( move 3 , 8 ; move ul - ua , ul ) 
[8641] c:3 is:( move 2 , ul - 9 ; move ua , ul )  decode:( move 2 , ul - 9 ; move ua , ul ) 
[8642] c:0 is:( move ua - ul , 8 ; move 3 , ul )  decode:( move 5 , 8 ; move 3 , ul ) 
[8643] c:3 is:( move ua + ul , 9 ; move ua , 4 )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[8644] c:3 is:( move 3 , ul ; move ul - ua , 8 )  decode:( move 3 , ul ; move ul - ua , 8 ) 
[8645] c:3 is:( move ua - ul , 4 ; move ua , 8 )  decode:( move ua - ul , 4 ; move ua , 8 ) 
[8646] c:3 is:loop 0 , 4 , move v0 * 3 , 0 - 9  decode:loop 0 , 4 , move v0 * 3 , 0 - 9 
[8647] c:3 is:( move ua + ul , ul ; move 8 , 4 )  decode:( move ua + ul , ul ; move 8 , 4 ) 
[8648] c:3 is:( move ul - ua , 3 ; move 8 , ul )  decode:( move ul - ua , 3 ; move 8 , ul ) 
[8649] c:0 is:( move ua , 7 ; move ua , ua / 4 )  decode:( move ua , 7 ; move ua , 7 + 4 ) 
[8650] c:0 is:loop 0 , 3 , move 4 / v0 , 2 / 4  decode:loop 0 , 3 , move 3 / v0 , 4 / ua 
[8651] c:0 is:( move ua , 6 / ua ; move 4 , ul )  decode:( move ua , ul ; move 4 , ul ) 
[8652] c:3 is:( move 3 , ul / 6 ; move ua , ul )  decode:( move 3 , ul / 6 ; move ua , ul ) 
[8653] c:3 is:( move ua , 9 ; move ua + ul , 4 )  decode:( move ua , 9 ; move ua + ul , 4 ) 
[8654] c:0 is:loop 0 , 3 , move v0 * 4 , 4 * 4  decode:( move ua + ul , ul ; move 4 , 9 ) 
[8655] c:0 is:loop 0 , 4 , move 4 , 4 - 3 / v0  decode:loop 0 , 4 , move 4 , 3 / 4 - v0 
[8656] c:3 is:( move 3 , 9 ; move ua + ul , ul )  decode:( move 3 , 9 ; move ua + ul , ul ) 
[8657] c:0 is:( move ua , ul ; move ua + 4 , 9 )  decode:( move ua , ul ; move 4 + 4 , 9 ) 
[8658] c:0 is:( move ua - ul , ul ; move 3 , 8 )  decode:( move 5 , ul ; move 3 , 8 ) 
[8659] c:0 is:( move ua , ul ; move 6 , ua / 4 )  decode:( move ua , ul ; move 5 , 7 / 4 ) 
[8660] c:3 is:( move 4 , 8 ; move ua + ul , ul )  decode:( move 4 , 8 ; move ua + ul , ul ) 
[8661] c:3 is:( move ul - ua , 8 ; move ua , 4 )  decode:( move ul - ua , 8 ; move ua , 4 ) 
[8662] c:3 is:( move 4 , ul ; move ul - ua , 7 )  decode:( move 4 , ul ; move ul - ua , 7 ) 
[8663] c:3 is:( move 5 , ul / 4 ; move ua , ul )  decode:( move 5 , ul / 4 ; move ua , ul ) 
[8664] c:0 is:( move ul , 9 ; move 3 + ua , ul )  decode:( move ul , 9 ; move ua + 3 , ul ) 
[8665] c:3 is:( move ua - ul , 9 ; move 2 , ul )  decode:( move ua - ul , 9 ; move 2 , ul ) 
[8666] c:3 is:( move ua , ul / ua ; move 8 , 2 )  decode:( move ua , ul / ua ; move 8 , 2 ) 
[8667] c:3 is:( move ua , ua / 3 ; move ua , 8 )  decode:( move ua , ua / 3 ; move ua , 8 ) 
[8668] c:3 is:( move ul - ua , 6 ; move ua , 6 )  decode:( move ul - ua , 6 ; move ua , 6 ) 
[8669] c:0 is:( move ua , 8 ; move ua , ua / 3 )  decode:( move ua , 7 ; move ua , ua / 3 ) 
[8670] c:0 is:( move 3 , ul ; move ua - ul , 8 )  decode:( move 3 , ul ; move ul - ua , 8 ) 
[8671] c:0 is:( move 8 , 3 ; move ul - ua , ul )  decode:( move ua + ul , 3 ; move ua , 2 ) 
[8672] c:3 is:loop 0 , 4 , move v0 - 4 , 3 / 4  decode:loop 0 , 4 , move v0 - 4 , 3 / 4 
[8673] c:0 is:( move ua , 9 ; move 3 - ua , ul )  decode:( move ua , 9 ; move 4 , ua / 3 ) 
[8674] c:0 is:( move ua , 4 ; move ul + ua , 9 )  decode:( move ua , 4 ; move ua + ul , 9 ) 
[8675] c:3 is:loop 0 , 4 , move 3 , 4 - 4 / v0  decode:loop 0 , 4 , move 3 , 4 - 4 / v0 
[8676] c:0 is:( move 9 , ul ; move ua - ul , 2 )  decode:( move 9 , ul ; move ua - 2 , 2 ) 
[8677] c:3 is:loop 0 , 4 , move v0 - 4 , 0 - 9  decode:loop 0 , 4 , move v0 - 4 , 0 - 9 
[8678] c:0 is:loop 0 , 4 , move 4 + v0 , 2 + 9  decode:loop 0 , 4 , move v0 + 4 , ua / 4 
[8679] c:0 is:( move 3 - ua , ul ; move ua , 9 )  decode:( move 3 , 4 ; move ua , 9 / 4 ) 
[8680] c:0 is:( move ua , 3 ; move 9 , ua * ua )  decode:( move ua , 9 ; move 9 , ua * ua ) 
[8681] c:0 is:( move ul - ua , 6 ; move 5 , ul )  decode:( move 5 , 9 ; move 5 , 0 - 4 ) 
[8682] c:0 is:( move ua , 4 ; move ua - ul , 8 )  decode:( move ua , 4 ; move 5 , 8 ) 
[8683] c:3 is:( move 5 , 6 ; move ul - ua , ul )  decode:( move 5 , 6 ; move ul - ua , ul ) 
[8684] c:0 is:( move ua , 4 ; move ul - ua , 8 )  decode:( move ua , 4 ; move 5 , 8 ) 
[8685] c:0 is:loop 0 , 3 , move 0 - 4 , 9 * v0  decode:loop 0 , 3 , move 3 - ua , 9 * v0 
[8686] c:0 is:loop 0 , 4 , move 3 / v0 , 4 * 3  decode:loop 0 , 4 , move 2 , 4 * 3 
[8687] c:0 is:( move ul - ua , 8 ; move 3 , ul )  decode:( move 3 , 9 ; move ua - ul , ul ) 
[8688] c:3 is:( move ua + ul , 9 ; move ua , 4 )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[8689] c:0 is:loop 0 , 5 , move v0 - 3 , 4 * 4  decode:loop 0 , 2 , move 3 - ua , 4 * 4 
[8690] c:0 is:loop 0 , 4 , move 4 , 4 * v0 * 3  decode:loop 0 , 4 , move 4 , 3 * 4 / v0 
[8691] c:3 is:( move ul , ul / 4 ; move 4 , ul )  decode:( move ul , ul / 4 ; move 4 , ul ) 
[8692] c:2 is:loop 0 , 4 , move 0 - 3 , 9 * v0  decode:loop 0 , 4 , move 0 - 3 , 9 * v0 
[8693] c:3 is:loop 0 , 3 , move 3 , 4 * 4 / v0  decode:loop 0 , 3 , move 3 , 4 * 4 / v0 
[8694] c:0 is:loop 0 , 7 , move 2 - 4 , 2 / v0  decode:loop 0 , 4 , move 3 , 0 - v0 / 4 
[8695] c:3 is:loop 0 , 4 , move v0 * 3 , 4 * 4  decode:loop 0 , 4 , move v0 * 3 , 4 * 4 
[8696] c:0 is:( move ul - ua , 4 ; move ua , 8 )  decode:( move 5 , 9 + 4 ; move ua , 8 ) 
[8697] c:3 is:( move 4 , ul ; move ua + ul , 8 )  decode:( move 4 , ul ; move ua + ul , 8 ) 
[8698] c:3 is:( move 2 , 9 ; move ul - ua , ul )  decode:( move 2 , 9 ; move ul - ua , ul ) 
[8699] c:0 is:( move ua + ul , 8 ; move 4 , ul )  decode:( move ua , 8 ; move 4 , ul ) 
[8700] c:0 is:( move 4 , 7 ; move ul - ua , ul )  decode:( move 4 , 7 ; move 5 , 4 ) 
[8701] c:3 is:( move 4 , ua * ua ; move ua , 8 )  decode:( move 4 , ua * ua ; move ua , 8 ) 
[8702] c:0 is:loop 0 , 4 , move v0 - 4 , 4 / 3  decode:loop 0 , 4 , move ua - 4 , 4 / 3 
[8703] c:3 is:( move ua , 4 ; move 8 , ua * ua )  decode:( move ua , 4 ; move 8 , ua * ua ) 
[8704] c:0 is:( move 5 , 6 ; move ua - ul , ul )  decode:( move 5 , 6 ; move ul - ua , ul ) 
[8705] c:0 is:( move ua , ul ; move 3 - ua , 9 )  decode:( move ua , ul ; move 3 , 9 - 9 ) 
[8706] c:0 is:loop 0 , 4 , move 4 + v0 , 5 / 3  decode:loop 0 , 4 , move 4 + v0 , ua / 4 
[8707] c:0 is:loop 0 , 4 , move 5 + v0 , 0 - 9  decode:loop 0 , 4 , move v0 - 8 , 0 - 9 
[8708] c:0 is:loop 0 , 4 , move 4 / 3 , 2 / v0  decode:loop 0 , 4 , move 2 - 2 , 2 / v0 
[8709] c:3 is:( move ua , 9 ; move ua + ul , 4 )  decode:( move ua , 9 ; move ua + ul , 4 ) 
[8710] c:0 is:loop 0 , 3 , move v0 - 4 , 9 + 2  decode:loop 0 , 3 , move v0 - 4 , ua / 4 
[8711] c:2 is:loop 0 , 4 , move 4 , 3 / 2 / v0  decode:loop 0 , 4 , move 4 , 3 / 2 / v0 
[8712] c:3 is:( move ua , 9 + 4 ; move ua , ul )  decode:( move ua , 9 + 4 ; move ua , ul ) 
[8713] c:0 is:( move ua - ul , 8 ; move ua , 4 )  decode:( move ul - ua , 8 ; move ua , 4 ) 
[8714] c:3 is:loop 0 , 4 , move 3 , 4 * 4 * v0  decode:loop 0 , 4 , move 3 , 4 * 4 * v0 
[8715] c:0 is:loop 0 , 3 , move 4 / v0 , 4 * 3  decode:loop 0 , 3 , move 3 , 4 / 3 
[8716] c:3 is:( move ul - ua , ul ; move 3 , 8 )  decode:( move ul - ua , ul ; move 3 , 8 ) 
[8717] c:3 is:( move ua , 8 ; move 4 , ua * ua )  decode:( move ua , 8 ; move 4 , ua * ua ) 
[8718] c:0 is:( move ua , ua * ua ; move 8 , 4 )  decode:( move ua , 8 ; move 8 , 4 ) 
[8719] c:0 is:( move ua - ul , 7 ; move 4 , ul )  decode:( move 5 , 7 ; move 4 , ul ) 
[8720] c:0 is:loop 0 , 4 , move 3 / v0 , 0 - 9  decode:loop 0 , 4 , move 2 , 0 - 9 
[8721] c:3 is:( move 9 , 3 ; move ul - ua , ul )  decode:( move 9 , 3 ; move ul - ua , ul ) 
[8722] c:0 is:( move 9 , ul ; move 3 - ua , ul )  decode:( move 9 , ul ; move 3 , ua / 3 ) 
[8723] c:0 is:loop 0 , 4 , move 4 , 4 * v0 * 4  decode:0 0 loop 0 , 4 , move 4 , 4 * v0 
[8724] c:3 is:loop 0 , 3 , move 3 + v0 , 9 * 3  decode:loop 0 , 3 , move 3 + v0 , 9 * 3 
[8725] c:0 is:( move ua , 3 / ua ; move ua , 9 )  decode:( move ua , 0 ; move ua , 9 ) 
[8726] c:0 is:loop 0 , 4 , move 3 + v0 , 7 / 3  decode:loop 0 , 4 , move v0 - ua , 7 / 3 
[8727] c:3 is:( move 3 , 9 ; move ul - ua , ul )  decode:( move 3 , 9 ; move ul - ua , ul ) 
[8728] c:3 is:( move ua , ul - 9 ; move 3 , ul )  decode:( move ua , ul - 9 ; move 3 , ul ) 
[8729] c:3 is:( move ua , ua / 3 ; move ua , 9 )  decode:( move ua , ua / 3 ; move ua , 9 ) 
[8730] c:0 is:loop 0 , 4 , move 4 , v0 * 4 / 3  decode:loop 0 , 4 , move 4 , v0 * 5 
[8731] c:3 is:( move ua , 4 / ua ; move ua , 8 )  decode:( move ua , 4 / ua ; move ua , 8 ) 
[8732] c:3 is:( move ua , 8 ; move ua , ua / 4 )  decode:( move ua , 8 ; move ua , ua / 4 ) 
[8733] c:0 is:loop 0 , 6 , move 3 / 2 , 4 * v0  decode:( move 4 , 0 - 3 ; move 4 , 9 ) 
[8734] c:0 is:loop 0 , 4 , move v0 - 4 , 4 * 5  decode:loop 0 , 4 , move v0 - 4 , 5 0 0 
[8735] c:3 is:( move ua , ul / 9 ; move ua , 2 )  decode:( move ua , ul / 9 ; move ua , 2 ) 
[8736] c:3 is:( move ul - ua , 9 ; move 3 , ul )  decode:( move ul - ua , 9 ; move 3 , ul ) 
[8737] c:3 is:loop 0 , 3 , move 4 / v0 , 4 / 3  decode:loop 0 , 3 , move 4 / v0 , 4 / 3 
[8738] c:0 is:loop 0 , 4 , move 4 / v0 , 2 / 4  decode:loop 0 , 4 , move ul + v0 , ul / 4 
[8739] c:3 is:( move ua , ul / 6 ; move 4 , ul )  decode:( move ua , ul / 6 ; move 4 , ul ) 
[8740] c:3 is:( move 4 , 8 ; move ua - ul , ul )  decode:( move 4 , 8 ; move ua - ul , ul ) 
[8741] c:0 is:( move ua , 4 ; move ul - ua , 9 )  decode:( move ua , 4 ; move 4 , 4 + 4 * ) 4 
[8742] c:3 is:( move ul - ua , ul ; move 3 , 9 )  decode:( move ul - ua , ul ; move 3 , 9 ) 
[8743] c:0 is:( move ua , 2 * 9 ; move ul , ul )  decode:( move ul , 4 ; move ua , ul ) 
[8744] c:3 is:( move ua , 6 ; move ua + ul , 8 )  decode:( move ua , 6 ; move ua + ul , 8 ) 
[8745] c:0 is:( move 4 - ua , ul ; move ua , 9 )  decode:( move 3 , 4 ; move ul - ua , 9 ) 
[8746] c:0 is:( move 4 , ul ; move ua - ul , 8 )  decode:( move 4 , ul ; move 5 , ua * ua ) 
[8747] c:3 is:( move 8 , 5 ; move ua , ua * ua )  decode:( move 8 , 5 ; move ua , ua * ua ) 
[8748] c:3 is:( move ua , 9 ; move 4 , ua * ua )  decode:( move ua , 9 ; move 4 , ua * ua ) 
[8749] c:0 is:( move ua , 9 ; move ua , ua / 3 )  decode:( move ua , 8 ; move ua , ua / 3 ) 
[8750] c:0 is:( move ul - ua , 8 ; move 4 , ul )  decode:( move 4 , 8 ; move ua - ul , ul ) 
[8751] c:0 is:loop 0 , 4 , move 4 / v0 , 4 * 3  decode:loop 0 , 4 , move v0 + ul , 4 * 3 
[8752] c:3 is:( move 4 , ul ; move ul - ua , 8 )  decode:( move 4 , ul ; move ul - ua , 8 ) 
[8753] c:0 is:loop 0 , 3 , move 4 , 9 + v0 + 4  decode:loop 0 , 3 , move 4 , ua / ua + v0 
[8754] c:0 is:( move ua , 4 ; move ua - ul , 9 )  decode:( move ua , 4 ; move 5 , 9 ) 
[8755] c:0 is:( move ua , 5 ; move ul - ua , 8 )  decode:( move ua , 5 ; move 5 , 7 ) 
[8756] c:0 is:( move 4 - ua , 9 ; move ua , ul )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[8757] c:0 is:loop 0 , 5 , move 4 / v0 , 2 / 3  decode:loop 0 , 4 , move 3 , 5 / 3 
[8758] c:3 is:( move 4 , ul ; move ua + ul , 9 )  decode:( move 4 , ul ; move ua + ul , 9 ) 
[8759] c:3 is:( move ua , ul / 6 ; move ua , 5 )  decode:( move ua , ul / 6 ; move ua , 5 ) 
[8760] c:0 is:loop 0 , 4 , move 2 + v0 , 9 * 3  decode:loop 0 , 4 , move ua - 3 , 9 * v0 
[8761] c:0 is:( move 5 , 8 ; move ua , ua * ua )  decode:( move 5 , ua / 4 ; move ua , 8 ) 
[8762] c:3 is:( move ua , ul ; move ua , 9 / 2 )  decode:( move ua , ul ; move ua , 9 / 2 ) 
[8763] c:3 is:( move 4 , ul / 6 ; move ua , ul )  decode:( move 4 , ul / 6 ; move ua , ul ) 
[8764] c:0 is:loop 0 , 4 , move 4 - v0 , 4 * 5  decode:loop 0 , 4 , move 2 , 4 * 5 
[8765] c:3 is:loop 0 , 4 , move 0 - 4 , 9 * v0  decode:loop 0 , 4 , move 0 - 4 , 9 * v0 
[8766] c:0 is:loop 0 , 3 , move 4 , 4 / 3 / v0  decode:loop 0 , 3 , move ua - 2 , 9 / v0 
[8767] c:3 is:( move ua , ua / 4 ; move ua , 8 )  decode:( move ua , ua / 4 ; move ua , 8 ) 
[8768] c:0 is:( move 4 , 8 ; move ul - ua , ul )  decode:( move 2 - ua , 8 ; move 5 , ul ) 
[8769] c:0 is:loop 0 , 4 , move 4 , 4 - 4 / v0  decode:loop 0 , 4 , move 4 , 4 * 4 / v0 
[8770] c:3 is:( move ua + ul , ul ; move 4 , 9 )  decode:( move ua + ul , ul ; move 4 , 9 ) 
[8771] c:0 is:loop 0 , 4 , move v0 + 2 , 8 / 3  decode:loop 0 , 3 , move v0 + 2 , 0 - 9 
[8772] c:3 is:( move 9 , ua * ua ; move ua , 4 )  decode:( move 9 , ua * ua ; move ua , 4 ) 
[8773] c:3 is:( move ua + ul , 6 ; move ua , 8 )  decode:( move ua + ul , 6 ; move ua , 8 ) 
[8774] c:3 is:( move ul - ua , 6 ; move ua , 7 )  decode:( move ul - ua , 6 ; move ua , 7 ) 
[8775] c:0 is:( move ua , ua / 8 ; move ua , 4 )  decode:( move ua , 7 ; move ua , 4 ) 
[8776] c:0 is:( move ua , ul ; move 9 , ua / 3 )  decode:( move ua , 0 ; move 9 , ua / 3 ) 
[8777] c:0 is:loop 0 , 4 , move v0 + 4 , 7 * 4  decode:loop 0 , 4 , move ua , 7 * 3 
[8778] c:3 is:( move 4 , ul - 9 ; move ua , ul )  decode:( move 4 , ul - 9 ; move ua , ul ) 
[8779] c:3 is:( move ul - ua , 9 ; move 4 , ul )  decode:( move ul - ua , 9 ; move 4 , ul ) 
[8780] c:0 is:loop 0 , 4 , move 3 + v0 , 9 * 3  decode:loop 0 , 4 , move ua - 2 , 9 * v0 
[8781] c:0 is:loop 0 , 4 , move 4 , 3 + 9 - v0  decode:loop 0 , 4 , move 4 , :  - 9 
[8782] c:0 is:( move ul - 9 , ul ; move 3 , ul )  decode:( move ua + ul , ul ; move 3 , ul ) 
[8783] c:0 is:( move ua , 9 ; move ua , ua / 4 )  decode:( move ua , 9 ; move ua , 3 / 4 ) 
[8784] c:0 is:( move ua , 9 ; move ul - ua , 5 )  decode:( move ua , 9 ; move 5 , 5 ) 
[8785] c:0 is:loop 0 , 4 , move 4 + v0 , 7 / 3  decode:loop 0 , 4 , move ua - v0 , 7 / 3 
[8786] c:3 is:( move ua , ul - 9 ; move 4 , ul )  decode:( move ua , ul - 9 ; move 4 , ul ) 
[8787] c:3 is:( move 4 , 9 ; move ul - ua , ul )  decode:( move 4 , 9 ; move ul - ua , ul ) 
[8788] c:3 is:( move ul - ua , ul ; move 4 , 9 )  decode:( move ul - ua , ul ; move 4 , 9 ) 
[8789] c:3 is:( move ua , 4 / ua ; move ua , 9 )  decode:( move ua , 4 / ua ; move ua , 9 ) 
[8790] c:3 is:( move ul - ua , 9 ; move ua , 5 )  decode:( move ul - ua , 9 ; move ua , 5 ) 
[8791] c:3 is:( move 4 , ul ; move ul - ua , 9 )  decode:( move 4 , ul ; move ul - ua , 9 ) 
[8792] c:3 is:( move ua , 6 ; move ua + ul , 9 )  decode:( move ua , 6 ; move ua + ul , 9 ) 
[8793] c:3 is:( move ua , 9 ; move 5 , ua * ua )  decode:( move ua , 9 ; move 5 , ua * ua ) 
[8794] c:3 is:( move ua , ul / 6 ; move 5 , ul )  decode:( move ua , ul / 6 ; move 5 , ul ) 
[8795] c:0 is:loop 0 , 4 , move 4 / 3 , 4 / v0  decode:loop 0 , 4 , move v0 , 4 
[8796] c:3 is:( move ua , ul ; move ua , 9 * 4 )  decode:( move ua , ul ; move ua , 9 * 4 ) 
[8797] c:0 is:loop 0 , 4 , move 0 - 4 , 9 / v0  decode:loop 0 , 4 , move 4 , 9 / v0 
[8798] c:0 is:( move 5 , ul / 6 ; move ua , ul )  decode:( move 5 , ul / ul ; move ua , ul ) 
[8799] c:3 is:( move ul - ua , 8 ; move 5 , ul )  decode:( move ul - ua , 8 ; move 5 , ul ) 
[8800] c:0 is:( move 5 , 8 ; move ul - ua , ul )  decode:( move 5 , 8 ; move 5 , ua / 3 ) 
[8801] c:3 is:( move 4 , ul ; move ua - ul , 9 )  decode:( move 4 , ul ; move ua - ul , 9 ) 
[8802] c:0 is:( move ul - ua , 6 ; move ua , 8 )  decode:( move 5 , 9 ; move ua , 8 ) 
[8803] c:0 is:( move 4 , ul / ua ; move ua , 8 )  decode:( move 4 , ul / 4 ; move ua , 8 ) 
[8804] c:3 is:( move ua , ua / 4 ; move ua , 9 )  decode:( move ua , ua / 4 ; move ua , 9 ) 
[8805] c:0 is:( move ul - ua , 9 ; move ua , 6 )  decode:loop 0 , 2 , move ul - ua + v0 , 9 
[8806] c:3 is:( move ul - ua , 9 ; move 5 , ul )  decode:( move ul - ua , 9 ; move 5 , ul ) 
[8807] c:3 is:( move 5 , 9 ; move ul - ua , ul )  decode:( move 5 , 9 ; move ul - ua , ul ) 
[8808] c:3 is:( move 5 , ul / ua ; move ua , 8 )  decode:( move 5 , ul / ua ; move ua , 8 ) 
[8809] c:3 is:loop 0 , 4 , move 3 + 3 , 9 / v0  decode:loop 0 , 4 , move 3 + 3 , 9 / v0 
[8810] c:0 is:loop 0 , 4 , move 3 + v0 , 9 * 4  decode:loop 0 , 4 , move 4 + v0 , 9 * 3 
[8811] c:3 is:loop 0 , 3 , move 4 + 3 , 9 / v0  decode:loop 0 , 3 , move 4 + 3 , 9 / v0 
[8812] c:0 is:( move 4 , ul / 8 ; move ua , ul )  decode:( move 4 , ul / 6 ; move ua , ul ) 
[8813] c:0 is:loop 0 , 4 , move v0 * 2 , 9 * 3  decode:loop 0 , 4 , move v0 * 2 , 0 - 9 
[8814] c:3 is:( move 9 , ua / 3 ; move ul , ul )  decode:( move 9 , ua / 3 ; move ul , ul ) 
[8815] c:0 is:( move ul , 9 ; move ua - ul , 5 )  decode:( move ul , 9 ; move 5 , ul ) 
[8816] c:3 is:( move ua , 9 / ua ; move 4 , ul )  decode:( move ua , 9 / ua ; move 4 , ul ) 
[8817] c:3 is:( move ua , ul / 4 ; move ua , 9 )  decode:( move ua , ul / 4 ; move ua , 9 ) 
[8818] c:3 is:loop 0 , 4 , move 4 + v0 , 9 / 2  decode:loop 0 , 4 , move 4 + v0 , 9 / 2 
[8819] c:0 is:loop 0 , 4 , move 4 , v0 + 4 * 8  decode:loop 0 , 4 , move v0 - ua , 9 9 
[8820] c:3 is:loop 0 , 4 , move 4 + v0 , 9 * 3  decode:loop 0 , 4 , move 4 + v0 , 9 * 3 
[8821] c:0 is:loop 0 , 4 , move v0 - 3 , 3 / 8  decode:loop 0 , 4 , move v0 , v0 / 3 
[8822] c:0 is:( move ul - ua , ul ; move 5 , 9 )  decode:loop 0 , 3 , move 3 + v0 , 2 / 4 
[8823] c:3 is:( move ua , ul / ua ; move 4 , 9 )  decode:( move ua , ul / ua ; move 4 , 9 ) 
[8824] c:0 is:( move ua , ul / 9 ; move 4 , ul )  decode:( move ua , ul / ua ; move 4 , ul ) 
[8825] c:3 is:( move ua , 9 ; move ul - ua , 7 )  decode:( move ua , 9 ; move ul - ua , 7 ) 
[8826] c:0 is:loop 0 , 3 , move 4 , 9 * v0 / 2  decode:loop 0 , 3 , move 4 , 0 - v0 / 2 
[8827] c:3 is:( move ua , 9 ; move ua + ul , 8 )  decode:( move ua , 9 ; move ua + ul , 8 ) 
[8828] c:0 is:loop 0 , 4 , move 3 + 4 , 9 / v0  decode:loop 0 , 4 , move 4 + 3 , 9 / v0 
[8829] c:0 is:loop 0 , 4 , move v0 * 3 , 9 * 3  decode:loop 0 , 4 , move 4 , 9 * v0 
[8830] c:0 is:( move ul - ua , 9 ; move ua , 7 )  decode:loop 0 , 3 , move ua - 2 , 4 - 9 
[8831] c:3 is:( move ua , ul / ua ; move 5 , 9 )  decode:( move ua , ul / ua ; move 5 , 9 ) 
[8832] c:1 is:( move ua , 9 ; move ul - ua , 8 )  decode:( move ua , 9 ; move 5 , 3 + 8 ) 
[8833] c:3 is:( move ua + ul , 9 ; move ua , 9 )  decode:( move ua + ul , 9 ; move ua , 9 ) 
[8834] c:0 is:loop 0 , 4 , move 9 - v0 , 4 * 4  decode:loop 0 , 4 , move v0 - 8 , 4 * 4 
[8835] c:0 is:( move ua , 9 ; move ua - ul , 8 )  decode:( move ua , 9 ; move 5 , 8 ) 
[8836] c:3 is:( move 9 , ua * ua ; move ua , 8 )  decode:( move 9 , ua * ua ; move ua , 8 ) 
[8837] c:0 is:( move ul - ua , 9 ; move ua , 8 )  decode:( move 5 , 4 * 3 ; move ua , 8 ) 
[8838] c:3 is:( move ua , ul - 9 ; move ua , 9 )  decode:( move ua , ul - 9 ; move ua , 9 ) 
[8839] c:0 is:( move ua , 9 ; move 9 , ua * ua )  decode:( move 7 , 9 ; move 9 , 4 + 4 ) 
[8840] c:3 is:( move ul - ua , 9 ; move ua , 9 )  decode:( move ul - ua , 9 ; move ua , 9 ) 
[8841] c:0 is:loop 0 , 4 , move 4 / v0 , 4 - 9  decode:loop 0 , 4 , move 4 / v0 , 4 / 3 
[8842] c:0 is:( move 9 , 8 ; move ul - ua , ul )  decode:( move 6 , 8 ; move 9 , ua / 3 ) 
[8843] c:0 is:( move ua , 9 ; move ul - 9 , ul )  decode:( move ua , 9 ; move 8 , ua * ua ) 
[8844] c:0 is:( move 9 , 9 ; move ul - ua , ul )  decode:( move 9 , 9 ; move ua - ul , 4 ) 
[8845] c:0 is:loop 0 , 2 , move ua + ul , ua * ua  decode:loop 0 , 2 , move 4 + 3 , ua * ua 
[8846] c:0 is:( move ua , ul / 9 ; move ua , 9 )  decode:( move ua , ul / ua ; move ua , 9 ) 
[8847] c:3 is:loop 0 , 2 , move ul - ua , ua * ua  decode:loop 0 , 2 , move ul - ua , ua * ua 
[8848] c:0 is:loop 0 , 3 , move ua + ul , ua * ua  decode:loop 0 , 3 , move 4 + 3 , ua * ua 
[8849] c:3 is:loop 0 , 2 , move ua - ul , ua * ua  decode:loop 0 , 2 , move ua - ul , ua * ua 
[8850] c:3 is:loop 0 , 2 , move ua + v0 , 0 - 2  decode:loop 0 , 2 , move ua + v0 , 0 - 2 
[8851] c:0 is:loop 0 , 2 , move ua + 2 , v0 + 2  decode:( move 8 , 2 ; move ua + 2 , 3 ) 
[8852] c:3 is:loop 0 , 2 , move v0 - ua , 0 - 2  decode:loop 0 , 2 , move v0 - ua , 0 - 2 
[8853] c:3 is:loop 0 , 3 , move ul - ua , ua * ua  decode:loop 0 , 3 , move ul - ua , ua * ua 
[8854] c:0 is:loop 0 , 3 , move v0 + ua , 0 - 2  decode:loop 0 , 3 , move 4 + 3 , 0 - 2 
[8855] c:0 is:loop 0 , 2 , move ua - v0 , 0 - 2  decode:loop 0 , 2 , move v0 - ua , 0 - 2 
[8856] c:3 is:loop 0 , 3 , move ua - ul , ua * ua  decode:loop 0 , 3 , move ua - ul , ua * ua 
[8857] c:0 is:loop 0 , 2 , move ua - 2 , 0 - v0  decode:( move 4 , ua / 3 ; move 4 , ul ) 
[8858] c:3 is:loop 0 , 4 , move ul - ua , ua * ua  decode:loop 0 , 4 , move ul - ua , ua * ua 
[8859] c:3 is:loop 0 , 3 , move ua + v0 , 0 - 3  decode:loop 0 , 3 , move ua + v0 , 0 - 3 
[8860] c:0 is:loop 0 , 3 , move 2 + ua , v0 + 2  decode:loop 0 , 3 , move ua + 2 , v0 + 2 
[8861] c:0 is:loop 0 , 3 , move ua - v0 , 0 - 2  decode:loop 0 , 3 , move v0 - ua , 0 - 2 
[8862] c:3 is:( move ua , 0 ; move ua , ua * ua )  decode:( move ua , 0 ; move ua , ua * ua ) 
[8863] c:0 is:loop 0 , 2 , move ua + 2 , 3 + v0  decode:( move ua + 2 , 3 ; move 8 , 4 ) 
[8864] c:0 is:loop 0 , ua , move 0 - 3 , v0 - 2  decode:loop 0 , 4 , move 3 , v0 - 3 
[8865] c:0 is:loop 0 , 2 , move v0 + ua , 0 - 4  decode:loop 0 , 2 , move ua , 0 - 4 
[8866] c:0 is:loop 0 , 3 , move ul + v0 , 0 - 2  decode:loop 0 , 3 , move 2 , 0 - 2 0 
[8867] c:3 is:loop 0 , 3 , move v0 - ua , 0 - 2  decode:loop 0 , 3 , move v0 - ua , 0 - 2 
[8868] c:0 is:loop 0 , 4 , move v0 * v0 , v0  decode:loop 0 , 4 , move v0 * 2 , 3 
[8869] c:0 is:loop 0 , 4 , move 0 - ua , 2 + v0  decode:loop 0 , 4 , move 0 - ua , 0 - 2 
[8870] c:0 is:loop 0 , 2 , move ua - v0 , 0 - 3  decode:( move ua , 0 - 3 ; move 5 , 3 ) 
[8871] c:0 is:loop 0 , 4 , move v0 , v0 * v0  decode:loop 0 , 3 , move v0 + ul , 0 - 9 
[8872] c:3 is:loop 0 , 4 , move ua - ul , ua * ua  decode:loop 0 , 4 , move ua - ul , ua * ua 
[8873] c:0 is:loop 0 , 2 , move v0 - ua , 0 - 3  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[8874] c:0 is:loop 0 , 3 , move 2 - ua , v0 + 2  decode:loop 0 , 3 , move 0 - 4 , 2 + v0 
[8875] c:0 is:loop 0 , 2 , move v0 - ua , 0 - 4  decode:loop 0 , 2 , move v0 - ua , 4 
[8876] c:0 is:loop 0 , 5 , move v0 , v0 * v0  decode:loop 0 , 3 , move ua - 3 , v0 + 5 
[8877] c:0 is:( move ua , 0 ; move ul - ua , ul )  decode:( move ua , ul ; move ul - ua , ul ) 
[8878] c:0 is:loop 0 , 3 , move 0 - ua , 3 - v0  decode:loop 0 , 3 , move ua , 3 - v0 
[8879] c:0 is:loop 0 , 2 , move ua + 2 , 3 - v0  decode:( move ua + 2 , 3 ; move 8 , 2 ) 
[8880] c:0 is:loop 0 , 2 , move 2 - ua , v0 - 2  decode:( move 4 , 0 - 3 ; move 4 , ul ) 
[8881] c:0 is:loop 0 , 2 , move ua - 2 , v0 - 2  decode:loop 0 , 2 , move v0 - 4 , 2 - 3 
[8882] c:3 is:loop 0 , 3 , move 0 - ua , v0 - 3  decode:loop 0 , 3 , move 0 - ua , v0 - 3 
[8883] c:3 is:( move ul , 0 ; move ua + ul , ul )  decode:( move ul , 0 ; move ua + ul , ul ) 
[8884] c:0 is:( move ua - ul , 0 ; move ua , ul )  decode:( move ua , 0 ; move ua , ul ) 
[8885] c:0 is:loop 0 , 2 , move ua - v0 , 0 - 4  decode:( move 5 , 9 / ua ; move ua , 4 ) 
[8886] c:0 is:loop 0 , 3 , move 3 - ua , 0 - v0  decode:loop 0 , 3 , move 0 - 3 , 0 - v0 
[8887] c:0 is:loop 0 , 4 , move ul + v0 , 0 - 2  decode:loop 0 , 3 , move 3 , 0 - 4 
[8888] c:3 is:loop 0 , 4 , move ua - 2 , 0 - v0  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[8889] c:3 is:( move 0 - ua , ul ; move ua , ul )  decode:( move 0 - ua , ul ; move ua , ul ) 
[8890] c:3 is:loop 0 , 3 , move ua + v0 , 0 - 4  decode:loop 0 , 3 , move ua + v0 , 0 - 4 
[8891] c:3 is:( move ul - ua , 0 ; move ua , ul )  decode:( move ul - ua , 0 ; move ua , ul ) 
[8892] c:0 is:( move ua , ul ; move 0 - ua , ul )  decode:( move ua , ul ; move ua , ua / 3 ) 
[8893] c:0 is:loop 0 , 3 , move ua - v0 , 0 - 3  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[8894] c:0 is:loop 0 , 2 , move ua + 2 , v0 - 3  decode:loop 0 , 2 , move 5 + v0 , 3 - 3 
[8895] c:0 is:loop 0 , 2 , move ua + 2 , v0 * 2  decode:( move ua + 2 , 0 ; move 8 , 2 ) 
[8896] c:0 is:loop 0 , 4 , move 2 - ua , 0 - v0  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[8897] c:0 is:loop 0 , 4 , move ua - 2 , v0 + 2  decode:loop 0 , 4 , move 4 , 2 + v0 
[8898] c:0 is:loop 0 , 4 , move 3 , 0 - v0 + ul  decode:loop 0 , 4 , move 3 , 0 - v0 * 5 
[8899] c:0 is:loop 0 , 4 , move ua + v0 , 0 - 4  decode:loop 0 , 4 , move 3 + 4 , 0 - 4 
[8900] c:3 is:loop 0 , 3 , move v0 - ua , 0 - 4  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[8901] c:3 is:loop 0 , 3 , move ua - 2 , v0 + 3  decode:loop 0 , 3 , move ua - 2 , v0 + 3 
[8902] c:0 is:loop 0 , 4 , move 0 - 2 , ul - v0  decode:( move 3 , 0 ; move 4 , ul ) 
[8903] c:3 is:loop 0 , 3 , move 0 - ua , 4 - v0  decode:loop 0 , 3 , move 0 - ua , 4 - v0 
[8904] c:0 is:loop 0 , ua , move 3 / v0 , 0 - 2  decode:loop 0 , 4 , move 3 , 0 - 4 
[8905] c:0 is:loop 0 , 3 , move ua - v0 , 0 - 4  decode:loop 0 , 3 , move v0 + 4 , 0 - 4 
[8906] c:0 is:loop 0 , 3 , move 0 - 4 , v0 + ul  decode:( move 2 - ua , ul ; move 5 , ul ) 
[8907] c:3 is:loop 0 , 2 , move ua + 2 , 4 - v0  decode:loop 0 , 2 , move ua + 2 , 4 - v0 
[8908] c:0 is:loop 0 , 6 , move v0 , v0 * v0  decode:( move ua , ua / 4 ; move ua , 4 ) 
[8909] c:0 is:loop 0 , 4 , move v0 - ua , 0 - 3  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[8910] c:0 is:loop 0 , 3 , move 4 - ua , 0 - v0  decode:loop 0 , 3 , move ua - 4 , 0 - v0 
[8911] c:0 is:( move ua , ua * ua ; move ua , 2 )  decode:( move ua , 8 ; move ua , 2 ) 
[8912] c:3 is:( move ua , 2 ; move ua , ua * ua )  decode:( move ua , 2 ; move ua , ua * ua ) 
[8913] c:0 is:loop 0 , 2 , move 2 - ua , v0 - 3  decode:( move 4 , 4 / 3 ; move 4 , 2 ) 
[8914] c:0 is:( move ua , ul ; move ua + ul , 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[8915] c:0 is:( move ua + ul , ul ; move ua , 2 )  decode:( move 7 , ul ; move ua , 2 ) 
[8916] c:3 is:loop 0 , 4 , move 2 - ua , v0 + 2  decode:loop 0 , 4 , move 2 - ua , v0 + 2 
[8917] c:0 is:loop 0 , 2 , move ua - v0 , 0 - 5  decode:loop 0 , 2 , move ua - ul , 0 - 5 
[8918] c:0 is:loop 0 , 6 , move ul - ua , ua * ua  decode:loop 0 , 4 , move ua - ul , ua * ua 
[8919] c:0 is:loop 0 , 3 , move 0 - ua , v0 - 4  decode:loop 0 , 3 , move ua , v0 - 4 
[8920] c:0 is:loop 0 , 2 , move 2 - ua , v0 * 2  decode:( move 0 - 4 , 0 ; move 4 , 2 ) 
[8921] c:0 is:loop 0 , 3 , move ua / 2 , 0 - v0  decode:loop 0 , 3 , move 3 , 0 - v0 
[8922] c:0 is:loop 0 , 3 , move 2 - ua , v0 + 3  decode:loop 0 , 3 , move 4 , 3 + 4 - v0 
[8923] c:0 is:loop 0 , 3 , move ua , 2 - 3 + v0  decode:loop 0 , 3 , move ua , 3 + 3 - v0 
[8924] c:3 is:loop 0 , 3 , move 2 - ua , 3 - v0  decode:loop 0 , 3 , move 2 - ua , 3 - v0 
[8925] c:2 is:loop 0 , 3 , move 3 - ua , v0 - 2  decode:loop 0 , 3 , move 3 - ua , v0 - 2 
[8926] c:3 is:( move ua , 2 ; move ul - ua , ul )  decode:( move ua , 2 ; move ul - ua , ul ) 
[8927] c:0 is:loop 0 , 3 , move ua - 3 , 3 + v0  decode:loop 0 , 3 , move 3 - ua , 3 + v0 
[8928] c:3 is:loop 0 , 3 , move ua , 3 + 3 - v0  decode:loop 0 , 3 , move ua , 3 + 3 - v0 
[8929] c:3 is:( move 2 , ul ; move ua , ua * ua )  decode:( move 2 , ul ; move ua , ua * ua ) 
[8930] c:0 is:loop 0 , 2 , move 3 - ua , v0 * 2  decode:( move 3 , 0 ; move 3 , 2 ) 
[8931] c:3 is:loop 0 , 3 , move 0 - ua , 3 / v0  decode:loop 0 , 3 , move 0 - ua , 3 / v0 
[8932] c:0 is:loop 0 , 2 , move 2 - ua , v0 / 2  decode:loop 0 , 2 , move 0 - 4 , v0 / 2 
[8933] c:0 is:loop 0 , 4 , move ua , 2 - v0 + 3  decode:loop 0 , 4 , move ua , 9 + v0 
[8934] c:0 is:( move ua , ul ; move ul - ua , 2 )  decode:( move ua , ua / 3 ; move 5 , 2 ) 
[8935] c:3 is:loop 0 , 3 , move 0 - ua , v0 * 4  decode:loop 0 , 3 , move 0 - ua , v0 * 4 
[8936] c:3 is:loop 0 , 3 , move 2 - ua , v0 - 3  decode:loop 0 , 3 , move 2 - ua , v0 - 3 
[8937] c:0 is:loop 0 , 4 , move 0 - 2 , v0 / ua  decode:loop 0 , 4 , move 0 - 2 , v0 / 4 
[8938] c:0 is:loop 0 , 3 , move ua , 4 * 0 - v0  decode:loop 0 , 3 , move ua , 0 - ua * ua 
[8939] c:0 is:loop 0 , 3 , move 2 - ua , 2 * v0  decode:loop 0 , 3 , move 2 - ua , v0 * 2 
[8940] c:0 is:loop 0 , 4 , move ul + v0 , 0 - 4  decode:loop 0 , 4 , move v0 + ul , 0 - 4 
[8941] c:3 is:( move 2 , ul ; move ua + ul , ul )  decode:( move 2 , ul ; move ua + ul , ul ) 
[8942] c:0 is:loop 0 , 3 , move ua - 2 , v0 - 3  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[8943] c:3 is:loop 0 , 3 , move ua + 2 , 4 - v0  decode:loop 0 , 3 , move ua + 2 , 4 - v0 
[8944] c:0 is:loop 0 , 4 , move 4 , 0 - v0 + ul  decode:loop 0 , 4 , move 4 , 0 - 9 / v0 
[8945] c:0 is:loop 0 , 3 , move 0 - ua , v0 - 5  decode:loop 0 , 3 , move 3 + 3 , v0 - 5 
[8946] c:3 is:( move ua , ua * ua ; move 2 , ul )  decode:( move ua , ua * ua ; move 2 , ul ) 
[8947] c:0 is:loop 0 , 7 , move ua - ul , ua * ua  decode:loop 0 , 4 , move ua , 0 - 4 0 
[8948] c:0 is:( move ua + ul , ul ; move 2 , ul )  decode:( move ua , ul ; move 2 , ul ) 
[8949] c:0 is:loop 0 , 5 , move 3 - ua , 0 - v0  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[8950] c:0 is:loop 0 , 3 , move 2 + ua , v0 - 4  decode:loop 0 , 4 , move 4 + v0 , 9 ) 
[8951] c:0 is:loop 0 , 3 , move 0 - 3 , v0 / ua  decode:loop 0 , 4 , move 0 - 2 , v0 / ua 
[8952] c:3 is:( move ul - ua , 2 ; move ua , ul )  decode:( move ul - ua , 2 ; move ua , ul ) 
[8953] c:0 is:( move ul , 0 ; move ua , ul / ua )  decode:move ua , 0 - 3 
[8954] c:0 is:loop 0 , ua , move 0 - 3 , v0 * 4  decode:loop 0 , 4 , move v0 + 4 , 4 * 4 
[8955] c:0 is:loop 0 , 4 , move 3 - ua , v0 + 2  decode:loop 0 , 4 , move 0 - 3 , v0 + 2 
[8956] c:3 is:loop 0 , 3 , move 0 - 4 , v0 - ul  decode:loop 0 , 3 , move 0 - 4 , v0 - ul 
[8957] c:0 is:( move ua + ul , 2 ; move ul , ul )  decode:( move ua , ua * 3 ; move ul , ul ) 
[8958] c:0 is:loop 0 , 7 , move v0 , v0 * v0  decode:loop 0 , 3 , move ua , v0 - 8 
[8959] c:0 is:loop 0 , 5 , move ua - 3 , 0 - v0  decode:loop 0 , 4 , move 4 , 0 - v0 
[8960] c:0 is:loop 0 , 3 , move ua - 2 , 3 - v0  decode:loop 0 , 3 , move 4 , 3 - v0 
[8961] c:3 is:( move ua + ul , ul ; move ua , 3 )  decode:( move ua + ul , ul ; move ua , 3 ) 
[8962] c:0 is:( move ua , ul ; move ua - ul , 2 )  decode:( move ua , ul ; move 5 , 2 ) 
[8963] c:3 is:( move ua , ua * ua ; move ul , 2 )  decode:( move ua , ua * ua ; move ul , 2 ) 
[8964] c:0 is:loop 0 , 4 , move ua - 3 , v0 + 2  decode:loop 0 , 4 , move 3 - ua , 2 + v0 
[8965] c:3 is:( move ua , 3 ; move ua , ua * ua )  decode:( move ua , 3 ; move ua , ua * ua ) 
[8966] c:3 is:loop 0 , 3 , move 3 - ua , 3 + v0  decode:loop 0 , 3 , move 3 - ua , 3 + v0 
[8967] c:0 is:loop 0 , 3 , move 3 - ua , 2 - v0  decode:( move 4 , 3 ; move ua , 2 - 3 ) 
[8968] c:0 is:loop 0 , 2 , move 3 - ua , 4 + v0  decode:( move 3 , 9 ; move 3 , 5 ) 
[8969] c:0 is:loop 0 , 3 , move 0 - 2 , ul / v0  decode:loop 0 , 4 , move 0 - v0 , 4 / 3 
[8970] c:3 is:( move 2 , ua * ua ; move ua , ul )  decode:( move 2 , ua * ua ; move ua , ul ) 
[8971] c:0 is:loop 0 , 3 , move 2 + v0 , 2 / ua  decode:loop 0 , 3 , move ua - 4 , 2 / ua 
[8972] c:2 is:loop 0 , 3 , move ua - 2 , 2 * v0  decode:loop 0 , 3 , move 2 - ua , 2 * v0 
[8973] c:0 is:loop 0 , 3 , move v0 + ul , 2 - 3  decode:loop 0 , 3 , move 2 , v0 - 3 
[8974] c:0 is:loop 0 , 6 , move 0 - 3 , ua - v0  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[8975] c:3 is:loop 0 , 3 , move 4 - ua , v0 + 3  decode:loop 0 , 3 , move 4 - ua , v0 + 3 
[8976] c:0 is:loop 0 , 3 , move 4 - ua , v0 - 2  decode:loop 0 , 4 , move 0 - v0 , v0 0 
[8977] c:3 is:( move ua , 3 ; move ul - ua , ul )  decode:( move ua , 3 ; move ul - ua , ul ) 
[8978] c:0 is:loop 0 , 3 , move 4 + 3 , ul + v0  decode:loop 0 , 3 , move 7 , 3 + v0 
[8979] c:0 is:loop 0 , 2 , move 4 + v0 , 2 / ua  decode:loop 0 , 2 , move 4 , 2 / ua 
[8980] c:0 is:( move ua + ul , ul ; move ua , 4 )  decode:( move ua + ul , ul ; move 5 , 4 ) 
[8981] c:0 is:( move ul , 3 ; move ua , ua * ua )  decode:( move ul , 0 - 4 ; move ua , 4 ) 
[8982] c:0 is:( move ua , 2 / ua ; move ua , ul )  decode:( move ua , 2 / 9 ; move ua , ul ) 
[8983] c:3 is:loop 0 , 2 , move 4 + ua , 4 - v0  decode:loop 0 , 2 , move 4 + ua , 4 - v0 
[8984] c:0 is:loop 0 , 4 , move 0 - 5 , v0 + ul  decode:loop 0 , 4 , move 5 , 0 - v0 * ul 
[8985] c:0 is:loop 0 , 4 , move v0 + ul , 2 - 3  decode:loop 0 , 4 , move ua - 4 , v0 - 3 
[8986] c:0 is:( move 3 - ua , ul ; move ua , ul )  decode:( move 3 , ul ; move ua , ul ) 
[8987] c:3 is:( move 3 , ua * ua ; move ua , ul )  decode:( move 3 , ua * ua ; move ua , ul ) 
[8988] c:0 is:loop 0 , 4 , move 0 - 4 , ul - v0  decode:loop 0 , 4 , move 3 - ua , v0 - 3 
[8989] c:3 is:loop 0 , 3 , move ua - 2 , 2 / v0  decode:loop 0 , 3 , move ua - 2 , 2 / v0 
[8990] c:0 is:( move ua + ul , ul ; move 3 , ul )  decode:( move ua , ul ; move 3 , ul ) 
[8991] c:3 is:loop 0 , 4 , move v0 - ua , 0 - 5  decode:loop 0 , 4 , move v0 - ua , 0 - 5 
[8992] c:0 is:loop 0 , 4 , move 3 , 0 - ua / v0  decode:( move 3 , 0 ; move ua , ul / 3 ) 
[8993] c:3 is:loop 0 , 4 , move 3 - ua , 3 + v0  decode:loop 0 , 4 , move 3 - ua , 3 + v0 
[8994] c:3 is:loop 0 , 4 , move 0 - ua , v0 - 5  decode:loop 0 , 4 , move 0 - ua , v0 - 5 
[8995] c:0 is:loop 0 , 2 , move ua - v0 , 3 / 2  decode:( move 5 , 3 ; move ua , 8 ) 
[8996] c:0 is:loop 0 , 4 , move 4 - ua , v0 + 2  decode:loop 0 , 4 , move ua - 4 , v0 + 9 
[8997] c:3 is:( move ua , ua * ua ; move 3 , ul )  decode:( move ua , ua * ua ; move 3 , ul ) 
[8998] c:0 is:loop 0 , 3 , move 4 - ua , 2 - v0  decode:( move 3 , 3 ; move 4 , 2 - 3 ) 
[8999] c:0 is:loop 0 , 2 , move 3 - ua , v0 + 5  decode:( move 3 , ua * ua ; move 4 , 3 ) 
[9000] c:0 is:loop 0 , 3 , move 2 - ua , v0 * 3  decode:loop 0 , 3 , move 3 - ua , 3 * v0 
[9001] c:3 is:loop 0 , 3 , move ua - 3 , 3 - v0  decode:loop 0 , 3 , move ua - 3 , 3 - v0 
[9002] c:3 is:( move ua , ua * ua ; move ua , 4 )  decode:( move ua , ua * ua ; move ua , 4 ) 
[9003] c:0 is:loop 0 , 3 , move 2 - ua , v0 / 2  decode:loop 0 , 4 , move v0 - 4 , 2 / 4 
[9004] c:3 is:loop 0 , 3 , move 2 - ua , 4 - v0  decode:loop 0 , 3 , move 2 - ua , 4 - v0 
[9005] c:0 is:loop 0 , 3 , move ua - 3 , v0 - 3  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[9006] c:0 is:loop 0 , 4 , move 2 , ul / 0 - v0  decode:loop 0 , 4 , move 2 , v0 - 3 
[9007] c:0 is:loop 0 , 4 , move ua - v0 , 0 - 5  decode:loop 0 , 4 , move ua - 2 , 0 - 5 
[9008] c:0 is:loop 0 , 4 , move ua - 3 , 3 + v0  decode:loop 0 , 4 , move 3 , 3 + 3 - v0 
[9009] c:3 is:loop 0 , 3 , move 2 - ua , 2 / v0  decode:loop 0 , 3 , move 2 - ua , 2 / v0 
[9010] c:3 is:loop 0 , 3 , move ua - 2 , v0 / 2  decode:loop 0 , 3 , move ua - 2 , v0 / 2 
[9011] c:0 is:loop 0 , 3 , move 2 - ua , v0 - 4  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[9012] c:0 is:( move 2 , ul ; move ul - ua , ul )  decode:( move 2 , ul ; move ua - ul , ul ) 
[9013] c:3 is:( move ul - ua , 3 ; move ua , ul )  decode:( move ul - ua , 3 ; move ua , ul ) 
[9014] c:3 is:loop 0 , 3 , move 3 - ua , v0 - 3  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[9015] c:0 is:loop 0 , 3 , move 0 - 3 , ul / v0  decode:loop 0 , 3 , move 0 - 3 , 0 - 5 
[9016] c:3 is:loop 0 , 3 , move 3 - ua , 3 - v0  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[9017] c:3 is:( move ua , ul ; move 3 , ua * ua )  decode:( move ua , ul ; move 3 , ua * ua ) 
[9018] c:0 is:loop 0 , 3 , move ua + v0 , 3 / 2  decode:loop 0 , 3 , move 4 + 3 , 3 / 2 
[9019] c:3 is:loop 0 , 3 , move 3 - ua , 3 - v0  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[9020] c:0 is:loop 0 , 5 , move 3 - ua , v0 + 2  decode:loop 0 , 4 , move 4 , 2 + 9 2 
[9021] c:0 is:( move ua , ul ; move ua - 3 , ul )  decode:( move ua , ul ; move 3 , ul ) 
[9022] c:0 is:loop 0 , 4 , move 0 - 4 , v0 - ul  decode:loop 0 , 4 , move 0 - 3 , v0 - ul 
[9023] c:3 is:loop 0 , 3 , move 3 + v0 , 2 / ua  decode:loop 0 , 3 , move 3 + v0 , 2 / ua 
[9024] c:0 is:loop 0 , 5 , move 0 - 3 , v0 - ul  decode:( move ua , 0 - 3 ; move 5 , 4 ) 
[9025] c:0 is:loop 0 , 3 , move 0 - ua , 7 + v0  decode:loop 0 , 3 , move 3 + 3 , ua - + v0 
[9026] c:0 is:loop 0 , 3 , move ua - 4 , 2 - v0  decode:( move 3 , 2 ; move 4 , ul ) 
[9027] c:3 is:loop 0 , 4 , move 0 - 3 , ua / v0  decode:loop 0 , 4 , move 0 - 3 , ua / v0 
[9028] c:3 is:loop 0 , 3 , move 3 - ua , 4 + v0  decode:loop 0 , 3 , move 3 - ua , 4 + v0 
[9029] c:0 is:loop 0 , 4 , move 4 + 2 , ul + v0  decode:loop 0 , 4 , move 4 + v0 , ul + 2 
[9030] c:0 is:loop 0 , 3 , move ua - 3 , v0 + 4  decode:loop 0 , 3 , move 3 - ua , v0 + 4 
[9031] c:3 is:loop 0 , 4 , move 0 - 2 , ul / v0  decode:loop 0 , 4 , move 0 - 2 , ul / v0 
[9032] c:0 is:loop 0 , 6 , move ua - 3 , 0 - v0  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[9033] c:0 is:loop 0 , 4 , move 3 - ua , v0 - 3  decode:loop 0 , 4 , move 3 , v0 - 3 
[9034] c:0 is:loop 0 , 4 , move 4 , ua / 0 - v0  decode:loop 0 , 4 , move 4 / v0 , ua / 4 
[9035] c:0 is:loop 0 , 4 , move 0 - ua , v0 * 5  decode:loop 0 , 4 , move v0 * v0 * v0 
[9036] c:0 is:loop 0 , 3 , move ua - 4 , v0 - 3  decode:loop 0 , 3 , move 4 - ua , v0 - 3 
[9037] c:0 is:loop 0 , 4 , move 2 - 3 , v0 - ul  decode:loop 0 , 4 , move ul ; - ua , ua / 4 
[9038] c:3 is:loop 0 , 3 , move 3 - ua , 2 / v0  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[9039] c:0 is:( move ua , 5 ; move ua , ua * ua )  decode:( move ua , 8 ; move ua , ua * ua ) 
[9040] c:0 is:loop 0 , 4 , move 4 - ua , 2 - v0  decode:loop 0 , 4 , move 2 , 2 - v0 
[9041] c:3 is:loop 0 , 3 , move ua - v0 , 3 / 2  decode:loop 0 , 3 , move ua - v0 , 3 / 2 
[9042] c:0 is:loop 0 , 4 , move ul - v0 , 2 - 3  decode:loop 0 , 4 , move ul ; - v0 
[9043] c:0 is:loop 0 , 6 , move v0 - ua , 0 - 4  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[9044] c:3 is:loop 0 , 3 , move v0 - ua , 3 / 2  decode:loop 0 , 3 , move v0 - ua , 3 / 2 
[9045] c:0 is:loop 0 , 3 , move v0 + ul , 3 / 2  decode:loop 0 , 2 , move 3 , 3 + 9 
[9046] c:3 is:loop 0 , 3 , move 2 - ua , v0 - 5  decode:loop 0 , 3 , move 2 - ua , v0 - 5 
[9047] c:0 is:loop 0 , 3 , move 2 + v0 , 4 / ua  decode:loop 0 , 4 , move 2 , 2 / ua 
[9048] c:0 is:loop 0 , 3 , move 4 - ua , 3 - v0  decode:loop 0 , 3 , move 3 , 3 - v0 
[9049] c:0 is:loop 0 , 3 , move 4 - ua , 4 + v0  decode:( move 3 , ul ; move 4 , 4 + 7 ) 
[9050] c:3 is:loop 0 , 4 , move 4 - ua , 3 + v0  decode:loop 0 , 4 , move 4 - ua , 3 + v0 
[9051] c:3 is:loop 0 , 4 , move ua - 2 , 4 - v0  decode:loop 0 , 4 , move ua - 2 , 4 - v0 
[9052] c:0 is:loop 0 , 6 , move v0 - 3 , 0 - ul  decode:( move 4 , 0 - 9 ; move 4 , 5 ) 
[9053] c:3 is:( move ul , 4 ; move ua , ua * ua )  decode:( move ul , 4 ; move ua , ua * ua ) 
[9054] c:1 is:loop 0 , 3 , move 2 - ua , 5 - v0  decode:loop 0 , 3 , move 2 - ua , 5 - v0 
[9055] c:0 is:loop 0 , 2 , move 3 + v0 , 4 / ua  decode:loop 0 , 3 , move 2 + v0 , ua / ua 
[9056] c:0 is:loop 0 , 4 , move 2 + v0 , ua / 3  decode:loop 0 , 3 , move ua - 2 , ua / 3 
[9057] c:0 is:loop 0 , 4 , move 2 - ua , v0 / 2  decode:loop 0 , 4 , move 0 - 4 , v0 / 2 
[9058] c:0 is:loop 0 , 3 , move 4 - ua , v0 - 3  decode:loop 0 , 3 , move 3 - v0 , 3 / 3 
[9059] c:3 is:( move ua + ul , 5 ; move ua , ul )  decode:( move ua + ul , 5 ; move ua , ul ) 
[9060] c:3 is:( move 4 , ua * ua ; move ua , ul )  decode:( move 4 , ua * ua ; move ua , ul ) 
[9061] c:3 is:( move ul - ua , 4 ; move ua , ul )  decode:( move ul - ua , 4 ; move ua , ul ) 
[9062] c:0 is:loop 0 , 3 , move 2 - ua , 4 * v0  decode:loop 0 , 3 , move 4 , 4 * 0 - v0 
[9063] c:3 is:loop 0 , 3 , move 3 - ua , v0 - 4  decode:loop 0 , 3 , move 3 - ua , v0 - 4 
[9064] c:0 is:loop 0 , 3 , move 2 - ua , 3 / v0  decode:loop 0 , 3 , move 0 - 4 , 3 / v0 
[9065] c:3 is:loop 0 , 4 , move ua - 2 , v0 / 2  decode:loop 0 , 4 , move ua - 2 , v0 / 2 
[9066] c:1 is:loop 0 , 3 , move 3 - ua , 5 + v0  decode:loop 0 , 3 , move 3 - ua , 5 + 4 
[9067] c:3 is:( move ua , ul ; move 4 , ua * ua )  decode:( move ua , ul ; move 4 , ua * ua ) 
[9068] c:0 is:loop 0 , 3 , move ua - 3 , 2 / v0  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[9069] c:3 is:loop 0 , 4 , move 2 - ua , 3 * v0  decode:loop 0 , 4 , move 2 - ua , 3 * v0 
[9070] c:0 is:loop 0 , 4 , move 2 - ua , v0 - 4  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[9071] c:3 is:( move ua , 4 ; move ul - ua , ul )  decode:( move ua , 4 ; move ul - ua , ul ) 
[9072] c:3 is:( move 3 , ul ; move ul - ua , ul )  decode:( move 3 , ul ; move ul - ua , ul ) 
[9073] c:0 is:loop 0 , 2 , move v0 - ua , 2 / 4  decode:loop 0 , 2 , move v0 - ua , ua / ua 
[9074] c:0 is:loop 0 , 4 , move ua - 3 , v0 - 3  decode:loop 0 , 4 , move 3 , v0 - 3 
[9075] c:3 is:loop 0 , 3 , move ua - 4 , v0 + 4  decode:loop 0 , 3 , move ua - 4 , v0 + 4 
[9076] c:3 is:loop 0 , 4 , move 0 - 3 , ul / v0  decode:loop 0 , 4 , move 0 - 3 , ul / v0 
[9077] c:3 is:loop 0 , 3 , move 3 - ua , v0 / 2  decode:loop 0 , 3 , move 3 - ua , v0 / 2 
[9078] c:3 is:loop 0 , 2 , move ua - v0 , 4 * 3  decode:loop 0 , 2 , move ua - v0 , 4 * 3 
[9079] c:0 is:loop 0 , 2 , move 4 + v0 , ua / 3  decode:loop 0 , 2 , move v0 - ua , ul / 3 
[9080] c:0 is:loop 0 , 4 , move ua - 2 , v0 - 4  decode:loop 0 , 4 , move 4 , v0 - 4 
[9081] c:0 is:loop 0 , 4 , move ua - 3 , 3 - v0  decode:loop 0 , 4 , move 3 , 3 - v0 
[9082] c:0 is:loop 0 , 4 , move 3 - ua , 3 - v0  decode:loop 0 , 4 , move 3 , 3 - v0 
[9083] c:3 is:loop 0 , 2 , move ua - v0 , 2 / 4  decode:loop 0 , 2 , move ua - v0 , 2 / 4 
[9084] c:0 is:loop 0 , 3 , move 3 - ua , 3 * v0  decode:loop 0 , 3 , move 3 - ua , 3 + v0 
[9085] c:0 is:loop 0 , 2 , move 4 + v0 , 3 / ua  decode:loop 0 , 2 , move 4 + v0 , : / ua 
[9086] c:0 is:loop 0 , 4 , move ua - 4 , v0 - 2  decode:loop 0 , 4 , move 2 , v0 - 2 
[9087] c:3 is:( move ua , ul ; move ua , ua / 3 )  decode:( move ua , ul ; move ua , ua / 3 ) 
[9088] c:3 is:( move ul - ua , ul ; move 3 , ul )  decode:( move ul - ua , ul ; move 3 , ul ) 
[9089] c:0 is:loop 0 , 3 , move ua - 2 , v0 * 4  decode:loop 0 , 3 , move 4 , 4 * v0 
[9090] c:3 is:loop 0 , 3 , move ua - 4 , 3 - v0  decode:loop 0 , 3 , move ua - 4 , 3 - v0 
[9091] c:0 is:loop 0 , 4 , move ua - 3 , v0 * 2  decode:loop 0 , 4 , move 3 - ua , v0 * 2 
[9092] c:0 is:loop 0 , 4 , move 0 - ua , 6 - v0  decode:loop 0 , 4 , move ua - - ua , 6 - 3 
[9093] c:3 is:loop 0 , 3 , move ua - 3 , v0 / 2  decode:loop 0 , 3 , move ua - 3 , v0 / 2 
[9094] c:3 is:( move 2 , ul ; move ua , ul / ua )  decode:( move 2 , ul ; move ua , ul / ua ) 
[9095] c:3 is:loop 0 , 4 , move 0 - ua , 7 + v0  decode:loop 0 , 4 , move 0 - ua , 7 + v0 
[9096] c:3 is:( move ua , ua * ua ; move 4 , ul )  decode:( move ua , ua * ua ; move 4 , ul ) 
[9097] c:3 is:loop 0 , 4 , move 0 - 4 , ua / v0  decode:loop 0 , 4 , move 0 - 4 , ua / v0 
[9098] c:0 is:( move ul , ul ; move ua , 2 / ua )  decode:( move 2 , ul ; move ua , 2 / ua ) 
[9099] c:0 is:loop 0 , 4 , move v0 - 4 - ua , 2  decode:loop 0 , 4 , move v0 + 2 , 2 
[9100] c:3 is:( move 4 , ul ; move ua , ua * ua )  decode:( move 4 , ul ; move ua , ua * ua ) 
[9101] c:0 is:loop 0 , 3 , move ua - 2 , 3 / v0  decode:loop 0 , 3 , move 4 , 3 / v0 
[9102] c:0 is:loop 0 , 2 , move v0 - ua , 3 * 4  decode:loop 0 , 2 , move v0 - ua , 4 * 3 
[9103] c:3 is:loop 0 , 4 , move 3 - ua , 2 * v0  decode:loop 0 , 4 , move 3 - ua , 2 * v0 
[9104] c:3 is:loop 0 , 2 , move ua + v0 , 4 * 4  decode:loop 0 , 2 , move ua + v0 , 4 * 4 
[9105] c:0 is:loop 0 , 4 , move ua + 2 , v0 - 5  decode:loop 0 , 4 , move 4 + 2 , v0 - 5 
[9106] c:3 is:loop 0 , 4 , move 2 - ua , 4 - v0  decode:loop 0 , 4 , move 2 - ua , 4 - v0 
[9107] c:0 is:loop 0 , 4 , move ua / v0 , 0 - 4  decode:loop 0 , 3 , move ua , 0 - 4 
[9108] c:3 is:loop 0 , 4 , move ua - 4 , 3 + v0  decode:loop 0 , 4 , move ua - 4 , 3 + v0 
[9109] c:0 is:loop 0 , 4 , move 2 - 3 , ul - v0  decode:loop 0 , 4 , move ul , ul - v0 
[9110] c:3 is:( move ua , 5 ; move ua + ul , ul )  decode:( move ua , 5 ; move ua + ul , ul ) 
[9111] c:0 is:loop 0 , 6 , move ua - v0 , 0 - 4  decode:loop 0 , 4 , move ua , 9 
[9112] c:0 is:loop 0 , 6 , move ul + v0 , 0 - 4  decode:loop 0 , 4 , move ul - ua , 0 - v0 
[9113] c:0 is:loop 0 , 5 , move ua + v0 , 2 - 5  decode:0 loop 0 , 4 , move 3 + ua , 3 - 3 
[9114] c:3 is:( move 5 , ul ; move ua , ua * ua )  decode:( move 5 , ul ; move ua , ua * ua ) 
[9115] c:0 is:loop 0 , 3 , move 4 , ul / 2 + v0  decode:loop 0 , 3 , move 4 , 2 / 4 
[9116] c:3 is:loop 0 , 2 , move v0 - ua , 4 * 4  decode:loop 0 , 2 , move v0 - ua , 4 * 4 
[9117] c:0 is:loop 0 , 4 , move 5 - ua , v0 + 3  decode:loop 0 , 4 , move v0 , 3 / 2 
[9118] c:0 is:loop 0 , 5 , move v0 - 2 , 4 + ul  decode:loop 0 , 3 , move 2 , 3 / v0 
[9119] c:0 is:loop 0 , 3 , move 3 - ua , v0 * 4  decode:loop 0 , 3 , move 3 - ua , 4 * v0 
[9120] c:0 is:loop 0 , 4 , move 4 - ua , 3 - v0  decode:loop 0 , 3 , move 3 , 3 - v0 
[9121] c:3 is:loop 0 , 4 , move 3 - ua , v0 - 4  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[9122] c:0 is:loop 0 , 5 , move 3 / v0 , 0 - ul  decode:loop 0 , 4 , move 0 - 2 , 0 - v0 
[9123] c:0 is:loop 0 , 4 , move 2 , ua / v0 * 2  decode:loop 0 , 4 , move v0 , 3 / 2 
[9124] c:0 is:loop 0 , 4 , move 4 - ua , v0 + 4  decode:loop 0 , 4 , move 0 - 2 , v0 + 4 
[9125] c:0 is:loop 0 , 3 , move ua - 3 , 4 * v0  decode:loop 0 , 3 , move 0 - 3 , 4 * v0 
[9126] c:3 is:loop 0 , 3 , move ua - 2 , 4 / v0  decode:loop 0 , 3 , move ua - 2 , 4 / v0 
[9127] c:0 is:( move 4 , ul ; move ul - ua , ul )  decode:( move 4 , ul ; move 5 , ua / 3 ) 
[9128] c:0 is:loop 0 , 4 , move ua - 4 , 3 - v0  decode:loop 0 , 3 , move 3 , 3 - v0 
[9129] c:3 is:( move ua , 5 ; move ul - ua , ul )  decode:( move ua , 5 ; move ul - ua , ul ) 
[9130] c:0 is:loop 0 , 3 , move 4 - ua , v0 / 2  decode:loop 0 , 4 , move 0 - v0 , 2 / 4 
[9131] c:0 is:( move ua - ul , ul ; move ua , 5 )  decode:( move 5 , ul ; move ua , 5 ) 
[9132] c:3 is:loop 0 , 3 , move ua - 3 , v0 / 3  decode:loop 0 , 3 , move ua - 3 , v0 / 3 
[9133] c:0 is:loop 0 , 3 , move 2 - ua , 4 / v0  decode:loop 0 , 3 , move 0 - 4 , 4 / v0 
[9134] c:3 is:loop 0 , 3 , move ua - 2 , 4 / v0  decode:loop 0 , 3 , move ua - 2 , 4 / v0 
[9135] c:0 is:loop 0 , 4 , move 3 , 2 * ul - v0  decode:( move ua - 3 , 0 ; move ua , 2 ) 
[9136] c:3 is:( move 5 , ua * ua ; move ua , ul )  decode:( move 5 , ua * ua ; move ua , ul ) 
[9137] c:0 is:loop 0 , 4 , move 3 - ua , v0 + 5  decode:loop 0 , 4 , move v0 + ul , 5 / 3 
[9138] c:0 is:loop 0 , 3 , move 3 , ua / v0 + 4  decode:loop 0 , 3 , move 3 , 4 + 4 / v0 
[9139] c:0 is:loop 0 , 4 , move 2 - ua , v0 - 5  decode:loop 0 , 4 , move 0 - 4 , v0 - 5 
[9140] c:3 is:loop 0 , 4 , move 3 - ua , v0 / 2  decode:loop 0 , 4 , move 3 - ua , v0 / 2 
[9141] c:0 is:loop 0 , 2 , move v0 - ua , 4 / 3  decode:( move 5 , 9 ; move ua , 5 ) 
[9142] c:0 is:loop 0 , 4 , move ua - 3 , v0 - 4  decode:loop 0 , 4 , move 3 , v0 - 4 
[9143] c:3 is:loop 0 , 4 , move 3 - ua , 2 / v0  decode:loop 0 , 4 , move 3 - ua , 2 / v0 
[9144] c:0 is:loop 0 , 6 , move v0 - 4 , 0 - ul  decode:loop 0 , 4 , move 4 - ua , 3 / 4 
[9145] c:0 is:loop 0 , 4 , move ua - 3 , v0 + 5  decode:loop 0 , 3 , move 4 , 5 + v0 
[9146] c:0 is:loop 0 , 2 , move 3 - v0 , ua / 4  decode:loop 0 , 2 , move 3 , ua / 4 
[9147] c:0 is:loop 0 , 4 , move 4 - ua , 2 * v0  decode:loop 0 , 4 , move 0 - 2 , v0 * 2 
[9148] c:0 is:loop 0 , 4 , move 0 - ua , v0 + 8  decode:loop 0 , 4 , move v0 + 4 , 8 / 2 
[9149] c:3 is:loop 0 , 3 , move 0 - ua , 9 + v0  decode:loop 0 , 3 , move 0 - ua , 9 + v0 
[9150] c:3 is:( move ua , 6 ; move ua , ua * ua )  decode:( move ua , 6 ; move ua , ua * ua ) 
[9151] c:3 is:loop 0 , 3 , move 4 - ua , v0 - 4  decode:loop 0 , 3 , move 4 - ua , v0 - 4 
[9152] c:0 is:loop 0 , 4 , move ua - 3 , 2 / v0  decode:loop 0 , 4 , move 3 - ua , 2 / v0 
[9153] c:0 is:loop 0 , 4 , move ua - 2 , v0 - 5  decode:loop 0 , 4 , move ua - 2 , v0 - 9 
[9154] c:0 is:loop 0 , 6 , move v0 - ul , 3 + 2  decode:loop 0 , 3 , move 4 , 3 / v0 
[9155] c:3 is:( move ul - ua , ul ; move ua , 5 )  decode:( move ul - ua , ul ; move ua , 5 ) 
[9156] c:0 is:( move ua , ul ; move ul - ua , 5 )  decode:( move ua , ul ; move 5 , 5 ) 
[9157] c:3 is:loop 0 , 4 , move 2 - ua , 3 / v0  decode:loop 0 , 4 , move 2 - ua , 3 / v0 
[9158] c:0 is:loop 0 , 3 , move 2 - ua , v0 - 6  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[9159] c:0 is:loop 0 , 5 , move ul - 3 , v0 - 2  decode:loop 0 , 4 , move ua - 4 , v0 + ul 
[9160] c:0 is:loop 0 , 4 , move ua - 3 , 4 - v0  decode:loop 0 , 3 , move ua - 2 , 4 - v0 
[9161] c:0 is:loop 0 , 3 , move ua - 4 , 2 / v0  decode:loop 0 , 3 , move 2 , 2 / v0 
[9162] c:1 is:loop 0 , 3 , move 3 - ua , v0 / 3  decode:loop 0 , 4 , move 0 - 2 , v0 / 3 
[9163] c:0 is:loop 0 , 3 , move 2 - ua , v0 * 5  decode:loop 0 , 3 , move 2 - ua , 0 - 5 0 0 0 v* 
[9164] c:0 is:loop 0 , 4 , move 3 - ua , 4 - v0  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[9165] c:0 is:loop 0 , 4 , move 2 , ul / 2 - v0  decode:loop 0 , 4 , move 2 , 0 - 9 / v0 
[9166] c:0 is:loop 0 , 4 , move 4 - ua , v0 - 3  decode:loop 0 , 4 , move v0 + ul , ul / 4 
[9167] c:0 is:loop 0 , 3 , move ua + v0 , 4 * 4  decode:loop 0 , 3 , move ua + v0 , 0 - 9 
[9168] c:0 is:loop 0 , 5 , move 2 - v0 , ua - 4  decode:loop 0 , 4 , move v0 - 2 , v0 0 
[9169] c:3 is:( move 3 , ul ; move ua , ul / ua )  decode:( move 3 , ul ; move ua , ul / ua ) 
[9170] c:0 is:loop 0 , 3 , move v0 + 4 , ua / 3  decode:loop 0 , 3 , move ua - ul , ua / 3 
[9171] c:3 is:loop 0 , 4 , move 4 + 4 , ul + v0  decode:loop 0 , 4 , move 4 + 4 , ul + v0 
[9172] c:0 is:loop 0 , 5 , move ua - v0 , 2 - 4  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[9173] c:2 is:loop 0 , 4 , move ua - 3 , v0 / 2  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[9174] c:0 is:loop 0 , 3 , move 3 , ua - 3 / v0  decode:loop 0 , 3 , move 3 , ua / 3 - v0 
[9175] c:0 is:loop 0 , 3 , move v0 + ul , 4 * 3  decode:loop 0 , 4 , move v0 , 3 * 4 
[9176] c:0 is:loop 0 , 4 , move ua - 4 , v0 - 3  decode:loop 0 , 4 , move 2 , v0 - 3 
[9177] c:0 is:loop 0 , 3 , move ua , v0 + 4 / 3  decode:loop 0 , 3 , move v0 - ua , 0 - 8 
[9178] c:0 is:loop 0 , 4 , move ua - 2 , v0 + 6  decode:loop 0 , 4 , move 4 , v0 + 6 
[9179] c:0 is:loop 0 , 4 , move v0 + ul , 3 / 2  decode:loop 0 , 4 , move ua - 4 , v0 + 2 
[9180] c:0 is:( move ua , 3 / ua ; move ul , ul )  decode:( move ul , 4 / ; ; move ua , ul ) 
[9181] c:0 is:loop 0 , 4 , move v0 + ua , 2 * 5  decode:loop 0 , 4 , move v0 + ua , : 0 0 ua ua , 
[9182] c:0 is:loop 0 , 3 , move 4 , ua / 3 + v0  decode:loop 0 , 3 , move 3 - ua , ua * ua 
[9183] c:0 is:loop 0 , 4 , move v0 + ul , 2 / 3  decode:loop 0 , 4 , move 2 , 3 + 3 ua / 4 
[9184] c:0 is:loop 0 , 5 , move 2 - v0 , 4 + ul  decode:( move 3 , 5 ; move 3 , 0 - ul ) 
[9185] c:0 is:( move ua , ua / 3 ; move ul , ul )  decode:( move ul , 2 ; move ua , ul ) 
[9186] c:0 is:loop 0 , 4 , move 2 + v0 , ua / 4  decode:loop 0 , 4 , move 3 - ua , ua / 4 
[9187] c:3 is:loop 0 , 3 , move ua + v0 , 0 - 9  decode:loop 0 , 3 , move ua + v0 , 0 - 9 
[9188] c:0 is:loop 0 , 2 , move ua - v0 , 4 * 4  decode:loop 0 , 2 , move ua + v0 , 4 * 4 
[9189] c:0 is:loop 0 , 4 , move 3 - ua , v0 * 3  decode:loop 0 , 4 , move 3 - ua , 3 * v0 
[9190] c:0 is:loop 0 , 4 , move 3 , 2 - ua / v0  decode:loop 0 , 4 , move 3 , 2 - v0 
[9191] c:3 is:( move ul - ua , ul ; move 4 , ul )  decode:( move ul - ua , ul ; move 4 , ul ) 
[9192] c:0 is:loop 0 , 4 , move ua - 4 , 4 + v0  decode:( move 4 - ua , ul ; move ua , 5 ) 
[9193] c:0 is:loop 0 , 3 , move v0 + 2 , ul / 4  decode:loop 0 , 3 , move 3 , 2 / 8 
[9194] c:0 is:loop 0 , 4 , move ua - 2 , 3 / v0  decode:loop 0 , 4 , move 4 , 3 / v0 
[9195] c:3 is:loop 0 , 4 , move ua - 4 , v0 * 2  decode:loop 0 , 4 , move ua - 4 , v0 * 2 
[9196] c:3 is:( move ua , ul ; move ua , ua / 4 )  decode:( move ua , ul ; move ua , ua / 4 ) 
[9197] c:3 is:loop 0 , 3 , move 3 - ua , 3 / v0  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[9198] c:0 is:loop 0 , 4 , move ua - 2 , 5 - v0  decode:loop 0 , 4 , move ua - 2 , 0 - 4 
[9199] c:3 is:( move ul , ul ; move 4 , ua * ua )  decode:( move ul , ul ; move 4 , ua * ua ) 
[9200] c:0 is:loop 0 , 3 , move v0 + 3 , ua / 4  decode:loop 0 , 3 , move 4 , ua / 4 
[9201] c:0 is:loop 0 , 3 , move ua - 4 , v0 / 2  decode:loop 0 , 3 , move 3 / v0 , 2 / 4 
[9202] c:3 is:( move ul - ua , 5 ; move ua , ul )  decode:( move ul - ua , 5 ; move ua , ul ) 
[9203] c:3 is:( move ua , ua * ua ; move 5 , ul )  decode:( move ua , ua * ua ; move 5 , ul ) 
[9204] c:0 is:loop 0 , 4 , move 0 - 7 , v0 + ul  decode:loop 0 , 4 , move 0 - ua , v0 + ul 
[9205] c:0 is:( move ua - ul , ul ; move ua , 6 )  decode:( move ul - ua , ul ; move ua , 6 ) 
[9206] c:0 is:loop 0 , 4 , move 3 - ua , 5 - v0  decode:loop 0 , 4 , move 3 - ua , 3 * v0 
[9207] c:3 is:loop 0 , 4 , move ua - 3 , 4 * v0  decode:loop 0 , 4 , move ua - 3 , 4 * v0 
[9208] c:0 is:loop 0 , 5 , move v0 + ul , 3 / 2  decode:loop 0 , 4 , move 4 , 0 - 4 / v0 
[9209] c:0 is:loop 0 , 6 , move 4 - v0 , ua - 2  decode:loop 0 , 3 , move 0 - 4 , 0 - 4 
[9210] c:3 is:loop 0 , 4 , move 0 - 8 , ul + v0  decode:loop 0 , 4 , move 0 - 8 , ul + v0 
[9211] c:0 is:loop 0 , 3 , move 0 - 9 , v0 + ul  decode:loop 0 , 3 , move 0 - 9 , v0 * 3 
[9212] c:0 is:loop 0 , 4 , move ua - 3 , v0 / 3  decode:loop 0 , 4 , move 3 , v0 / 3 
[9213] c:0 is:loop 0 , 4 , move 3 , 4 * v0 + ul  decode:loop 0 , 4 , move 0 - 3 , 4 / v0 
[9214] c:0 is:loop 0 , 5 , move ul + v0 , 3 - 4  decode:loop 0 , 4 , move 0 - 3 , 0 - 5 
[9215] c:0 is:loop 0 , 4 , move 4 - ua , v0 + 5  decode:loop 0 , 4 , move 2 , v0 + 5 
[9216] c:3 is:loop 0 , 4 , move ua - 4 , v0 - 4  decode:loop 0 , 4 , move ua - 4 , v0 - 4 
[9217] c:3 is:loop 0 , 2 , move v0 - 4 , 4 / ua  decode:loop 0 , 2 , move v0 - 4 , 4 / ua 
[9218] c:3 is:loop 0 , 3 , move v0 - ua , 4 / 3  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[9219] c:0 is:loop 0 , 4 , move 4 - ua , 2 / v0  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[9220] c:3 is:loop 0 , 4 , move ua - 4 , v0 / 2  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[9221] c:0 is:loop 0 , 3 , move 3 - ua , v0 + 7  decode:loop 0 , 3 , move 3 - ua , 0 - 9 
[9222] c:3 is:( move ul - ua , ul ; move ua , 6 )  decode:( move ul - ua , ul ; move ua , 6 ) 
[9223] c:0 is:loop 0 , 4 , move v0 + 4 , ua / 3  decode:loop 0 , 3 , move v0 + ua , ua / 3 
[9224] c:3 is:loop 0 , 4 , move 2 - ua , 7 + v0  decode:loop 0 , 4 , move 2 - ua , 7 + v0 
[9225] c:3 is:loop 0 , 4 , move 2 - ua , v0 * 5  decode:loop 0 , 4 , move 2 - ua , v0 * 5 
[9226] c:0 is:loop 0 , 3 , move 4 + v0 , ua / 4  decode:loop 0 , 3 , move v0 - ua , ua / 4 
[9227] c:0 is:loop 0 , 6 , move ua - 4 , 3 + v0  decode:loop 0 , 4 , move 3 , 0 - 4 / v0 
[9228] c:0 is:loop 0 , 3 , move ua - 3 , v0 / 4  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[9229] c:0 is:loop 0 , 7 , move v0 - ul , 3 + 2  decode:loop 0 , 4 , move 4 , ua / v0 * 2 
[9230] c:0 is:( move ua , ul ; move ua - ul , 6 )  decode:( move ua , ul ; move ul - ua , 6 ) 
[9231] c:3 is:( move ul - ua , ul ; move 5 , ul )  decode:( move ul - ua , ul ; move 5 , ul ) 
[9232] c:0 is:loop 0 , 4 , move 2 - ua , 6 - v0  decode:loop 0 , 4 , move 0 - 4 , 6 - v0 
[9233] c:0 is:loop 0 , 4 , move ul + v0 , 2 / 4  decode:loop 0 , 4 , move ul + v0 , 2 / 3 
[9234] c:0 is:loop 0 , 5 , move ua / 4 , 2 + v0  decode:loop 0 , 4 , move 0 - 2 , v0 - 2 
[9235] c:3 is:loop 0 , 4 , move 4 - ua , 4 - v0  decode:loop 0 , 4 , move 4 - ua , 4 - v0 
[9236] c:3 is:loop 0 , 4 , move v0 - ua , 0 - 8  decode:loop 0 , 4 , move v0 - ua , 0 - 8 
[9237] c:0 is:loop 0 , 6 , move 3 - v0 , ul - 2  decode:loop 0 , 3 , move 3 , v0 - 9 
[9238] c:3 is:loop 0 , 4 , move v0 * 2 , ua / 3  decode:loop 0 , 4 , move v0 * 2 , ua / 3 
[9239] c:0 is:loop 0 , 4 , move ua - 2 , 4 / v0  decode:loop 0 , 4 , move 4 , 4 / v0 
[9240] c:0 is:loop 0 , 4 , move 3 + v0 , ua / 4  decode:loop 0 , 4 , move 0 - 4 , 0 - 8 
[9241] c:0 is:loop 0 , 2 , move 2 - ua , v0 + 9  decode:( move 4 , ul / ua ; move 4 , 9 ) 
[9242] c:3 is:loop 0 , 3 , move 0 - ua , v0 * 8  decode:loop 0 , 3 , move 0 - ua , v0 * 8 
[9243] c:0 is:( move 6 , ul ; move ua , ua * ua )  decode:( move ua , ul ; move ua , ua * ua ) 
[9244] c:3 is:loop 0 , 3 , move 3 - ua , 4 / v0  decode:loop 0 , 3 , move 3 - ua , 4 / v0 
[9245] c:0 is:loop 0 , 7 , move 2 - v0 , ua - 3  decode:( move 4 , 4 * 4 ; move 4 , 3 ) 
[9246] c:0 is:loop 0 , 4 , move 4 - ua , v0 - 4  decode:loop 0 , 4 , move 0 - v0 , 4 - 3 
[9247] c:0 is:loop 0 , 4 , move ua - 3 , 3 / v0  decode:loop 0 , 3 , move ua - 3 , 3 / v0 
[9248] c:0 is:loop 0 , 2 , move 3 - ua , 8 + v0  decode:loop 0 , 2 , move 3 - ua , 9 
[9249] c:0 is:loop 0 , 4 , move 3 - ua , v0 * 4  decode:loop 0 , 4 , move 3 - ua , 4 * v0 
[9250] c:3 is:loop 0 , 4 , move ua - v0 , 0 - 8  decode:loop 0 , 4 , move ua - v0 , 0 - 8 
[9251] c:0 is:loop 0 , 4 , move 2 + v0 , ua / 5  decode:loop 0 , 4 , move 3 - ua , 5 
[9252] c:0 is:loop 0 , 3 , move 2 * v0 , ua / 4  decode:( move 2 , 3 ; move 4 , 7 + 4 ) 
[9253] c:3 is:loop 0 , 3 , move 4 - ua , v0 + 6  decode:loop 0 , 3 , move 4 - ua , v0 + 6 
[9254] c:3 is:loop 0 , 4 , move ua + v0 , 4 * 4  decode:loop 0 , 4 , move ua + v0 , 4 * 4 
[9255] c:0 is:loop 0 , 5 , move v0 - ul , 4 + 3  decode:( move 3 , 9 ; move 3 , 7 ) 
[9256] c:0 is:loop 0 , 3 , move 2 , 4 / ul - v0  decode:loop 0 , 3 , move 2 , 4 / v0 
[9257] c:0 is:loop 0 , 6 , move 3 - v0 , ua - 3  decode:loop 0 , 4 , move v0 , 0 - 9 
[9258] c:0 is:loop 0 , 4 , move v0 + ul , 2 * 5  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[9259] c:0 is:loop 0 , 5 , move 2 - 3 , v0 / ua  decode:loop 0 , 3 , move 0 - 2 , v0 / 4 
[9260] c:0 is:loop 0 , 5 , move 3 - ua , 4 - v0  decode:( move 5 , 9 ; move 9 , 0 - 4 ) 
[9261] c:0 is:loop 0 , 4 , move 4 - ua , v0 / 2  decode:loop 0 , 4 , move 0 - 2 , v0 / 2 
[9262] c:3 is:loop 0 , 4 , move ua - 4 , 2 / v0  decode:loop 0 , 4 , move ua - 4 , 2 / v0 
[9263] c:0 is:loop 0 , 3 , move 3 - ua , v0 / 4  decode:loop 0 , 3 , move 0 - 3 , v0 / 4 
[9264] c:0 is:loop 0 , 3 , move ul - 7 , v0 + 2  decode:loop 0 , 3 , move ul - ua , 2 * 3 
[9265] c:0 is:loop 0 , 4 , move ua - 4 , v0 + 5  decode:( move 3 , 5 ; move ua , 4 ) 
[9266] c:0 is:loop 0 , 4 , move ua - v0 , 2 * 5  decode:loop 0 , 4 , move ua - v0 , 0 - 5 
[9267] c:3 is:( move ua , 4 / ua ; move ul , ul )  decode:( move ua , 4 / ua ; move ul , ul ) 
[9268] c:3 is:loop 0 , 4 , move 3 - ua , v0 / 3  decode:loop 0 , 4 , move 3 - ua , v0 / 3 
[9269] c:0 is:loop 0 , 3 , move ua - v0 , 4 * 4  decode:loop 0 , 3 , move v0 - ua , 4 * 4 
[9270] c:0 is:loop 0 , 7 , move v0 - ul , 0 - 4  decode:loop 0 , 4 , move 4 , 0 - v0 / 4 
[9271] c:0 is:loop 0 , 6 , move v0 - ul , 2 - 3  decode:loop 0 , 3 , move 0 - 4 , 0 - 0 4 
[9272] c:0 is:loop 0 , 5 , move 4 - ua , v0 - 3  decode:loop 0 , 4 , move 3 , 3 * 7 
[9273] c:3 is:loop 0 , 3 , move 3 - ua , 5 * v0  decode:loop 0 , 3 , move 3 - ua , 5 * v0 
[9274] c:0 is:loop 0 , 4 , move 3 , 3 - ua / v0  decode:( move ua + 2 , 9 ; move 3 , 4 ) 
[9275] c:3 is:( move ul - ua , 6 ; move ua , ul )  decode:( move ul - ua , 6 ; move ua , ul ) 
[9276] c:0 is:( move ua , ul / 4 ; move ua , ul )  decode:( move ua , 2 / 4 ; move ua , ul ) 
[9277] c:0 is:( move ua , 3 / move ua , ua - ul )  decode:( move ua , ul / move ua , ul - 4 ) 
[9278] c:3 is:loop 0 , 4 , move 3 - ua , v0 - 5  decode:loop 0 , 4 , move 3 - ua , v0 - 5 
[9279] c:0 is:loop 0 , 3 , move 2 - ua , v0 + 8  decode:loop 0 , 3 , move v0 - ua , 0 - 8 
[9280] c:0 is:loop 0 , 3 , move v0 + 4 , ua / 4  decode:loop 0 , 3 , move v0 - ua , ua / 4 
[9281] c:3 is:loop 0 , 4 , move ua - 2 , v0 * 5  decode:loop 0 , 4 , move ua - 2 , v0 * 5 
[9282] c:0 is:loop 0 , 5 , move 2 - v0 , 3 / ua  decode:loop 0 , 2 , move 3 , ua / v0 
[9283] c:0 is:( move ul , 4 / ua ; move ua , ul )  decode:( move ul , ua / 2 ; move ua , ul ) 
[9284] c:0 is:loop 0 , 4 , move ul + v0 , 4 * 3  decode:loop 0 , 4 , move ua - 4 , 3 / 4 
[9285] c:3 is:loop 0 , 4 , move 3 - ua , 3 / v0  decode:loop 0 , 4 , move 3 - ua , 3 / v0 
[9286] c:3 is:( move 5 , ul ; move ul - ua , ul )  decode:( move 5 , ul ; move ul - ua , ul ) 
[9287] c:3 is:loop 0 , 4 , move 2 - ua , 4 / v0  decode:loop 0 , 4 , move 2 - ua , 4 / v0 
[9288] c:3 is:loop 0 , 4 , move 3 - ua , v0 + 6  decode:loop 0 , 4 , move 3 - ua , v0 + 6 
[9289] c:0 is:loop 0 , 4 , move ua - 4 , 4 - v0  decode:loop 0 , 4 , move 2 , 4 - v0 
[9290] c:0 is:( move ua , ul ; move ul - ua , 6 )  decode:( move ua , 4 ; move 5 , 4 * 4 ) 
[9291] c:0 is:loop 0 , 3 , move 4 , 4 + ua / v0  decode:loop 0 , 3 , move 4 , 4 - v0 
[9292] c:0 is:loop 0 , 4 , move 2 - ua , 5 / v0  decode:loop 0 , 4 , move 0 - 4 , 5 / v0 
[9293] c:0 is:loop 0 , 4 , move v0 + ul , 3 / 4  decode:loop 0 , 4 , move ua - 4 , 3 - v0 
[9294] c:0 is:loop 0 , 4 , move ua - 9 , 0 - v0  decode:loop 0 , 4 , move ua - 4 , 0 - v0 
[9295] c:0 is:loop 0 , 3 , move 4 , ul + 4 / v0  decode:loop 0 , 4 , move 3 , ua / v0 / 2 
[9296] c:0 is:( move ua , 7 ; move ul - ua , ul )  decode:( move ua , 7 ; move 5 , 0 - 4 ) 
[9297] c:0 is:loop 0 , 7 , move ul - 2 , v0 * 2  decode:loop 0 , 3 , move ua - 4 , 0 - 9 
[9298] c:0 is:loop 0 , 4 , move ua - 4 , 4 * v0  decode:loop 0 , 4 , move 4 - ua , 4 * v0 
[9299] c:0 is:loop 0 , 2 , move ua - 2 , v0 * 8  decode:( move 4 , 0 ; move 5 , ua * ua ) 
[9300] c:0 is:loop 0 , 4 , move ul + v0 , 4 / 3  decode:loop 0 , 4 , move 4 - ua , 4 / v0 
[9301] c:0 is:loop 0 , 6 , move 3 + v0 , ul - 4  decode:loop 0 , 4 , move ua , 4 * 4 
[9302] c:0 is:loop 0 , 5 , move v0 - ul , 3 - 4  decode:( move 3 , 0 - 2 ; move 4 , ul ) 
[9303] c:0 is:( move ua , ul ; move ul + ua , 8 )  decode:( move ua , ul ; move ua + ul , 8 ) 
[9304] c:0 is:loop 0 , 3 , move 4 / v0 , 2 / ua  decode:loop 0 , 3 , move 3 , 2 / ua 
[9305] c:0 is:loop 0 , 3 , move 4 , 4 - v0 / ua  decode:0 loop 0 , 3 , move 4 , 0 - 4 / 0 
[9306] c:0 is:loop 0 , 7 , move v0 - ul , 2 - 3  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 
[9307] c:3 is:( move ul , ul ; move ua , ul / 4 )  decode:( move ul , ul ; move ua , ul / 4 ) 
[9308] c:0 is:loop 0 , 4 , move ua - 4 , 3 / v0  decode:loop 0 , 3 , move 3 , 3 / v0 
[9309] c:0 is:loop 0 , 6 , move 3 - ua , v0 / 2  decode:loop 0 , 4 , move 0 - 4 , v0 * 4 
[9310] c:3 is:( move ul , ul / 4 ; move ua , ul )  decode:( move ul , ul / 4 ; move ua , ul ) 
[9311] c:0 is:loop 0 , 4 , move 3 / v0 , 2 / ua  decode:loop 0 , 4 , move 2 , 2 / 6 
[9312] c:0 is:( move ua , ul - move ua , ul / 3 )  decode:( move 4 , ul ; move 3 + ua , ul ul ) 
[9313] c:3 is:loop 0 , 4 , move ua - 3 , 4 / v0  decode:loop 0 , 4 , move ua - 3 , 4 / v0 
[9314] c:0 is:loop 0 , 6 , move ul + v0 , 4 + 4  decode:loop 0 , 4 , move ua - ul , 0 - 9 
[9315] c:3 is:loop 0 , 4 , move v0 + 4 , ua / 4  decode:loop 0 , 4 , move v0 + 4 , ua / 4 
[9316] c:0 is:loop 0 , 3 , move 2 - ua , v0 + 9  decode:loop 0 , 3 , move 0 - 4 , 9 + v0 
[9317] c:0 is:loop 0 , 4 , move ua - v0 , 4 / 3  decode:loop 0 , 4 , move ua - 2 , 0 - 3 
[9318] c:3 is:( move ua , ul ; move ul - ua , 7 )  decode:( move ua , ul ; move ul - ua , 7 ) 
[9319] c:0 is:loop 0 , 3 , move 3 - ua , 7 - v0  decode:loop 0 , 3 , move 3 - ua , 4 / 5 
[9320] c:0 is:loop 0 , 3 , move 4 - ua , 4 / v0  decode:loop 0 , 3 , move 2 - 4 , 4 / v0 
[9321] c:3 is:loop 0 , 4 , move v0 - ua , 0 - 9  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[9322] c:0 is:loop 0 , 4 , move ua - 3 , v0 * 5  decode:loop 0 , 4 , move 3 - ua , v0 * 5 
[9323] c:3 is:loop 0 , 4 , move ua - 4 , v0 / 3  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[9324] c:0 is:loop 0 , 5 , move 4 - ua , v0 - 4  decode:loop 0 , 4 , move ua - 4 , 9 + v0 
[9325] c:0 is:loop 0 , 4 , move ua - 2 , 5 / v0  decode:loop 0 , 4 , move ua - 2 , v0 * 8 
[9326] c:3 is:loop 0 , 4 , move v0 * 2 , ua / 4  decode:loop 0 , 4 , move v0 * 2 , ua / 4 
[9327] c:3 is:loop 0 , 4 , move v0 - ua , 4 * 4  decode:loop 0 , 4 , move v0 - ua , 4 * 4 
[9328] c:0 is:loop 0 , 4 , move 3 + v0 , ua / 5  decode:loop 0 , 4 , move 0 - 4 , v0 - 5 
[9329] c:0 is:loop 0 , 3 , move 4 - ua , v0 / 4  decode:( move 3 , 3 ; move 4 , 4 / ua ) 
[9330] c:0 is:loop 0 , 3 , move v0 * 4 , ua / 3  decode:loop 0 , 3 , move 3 - ua , v0 
[9331] c:0 is:loop 0 , 3 , move v0 * 3 , ul / 3  decode:( move ul - ua , ul ; move 3 , 9 ) 
[9332] c:0 is:loop 0 , 3 , move 4 - v0 , ul / 3  decode:loop 0 , 3 , move 3 , 2 / 9 
[9333] c:0 is:loop 0 , 4 , move 4 - ua , v0 / 3  decode:loop 0 , 4 , move 0 - 2 , v0 / 3 
[9334] c:0 is:loop 0 , 4 , move 3 , ua - v0 / 4  decode:loop 0 , 4 , move 3 , : 4 / 4 
[9335] c:3 is:loop 0 , 4 , move 3 - ua , 7 + v0  decode:loop 0 , 4 , move 3 - ua , 7 + v0 
[9336] c:0 is:loop 0 , 3 , move 3 , 4 * v0 / ua  decode:loop 0 , 3 , move 3 , v0 / ua 
[9337] c:3 is:( move ul - ua , ul ; move ua , 7 )  decode:( move ul - ua , ul ; move ua , 7 ) 
[9338] c:0 is:loop 0 , 3 , move 3 - ua , 5 / v0  decode:loop 0 , 3 , move 3 , 5 / v0 
[9339] c:3 is:loop 0 , 4 , move 2 - ua , 8 + v0  decode:loop 0 , 4 , move 2 - ua , 8 + v0 
[9340] c:0 is:loop 0 , 4 , move 4 , 2 / ul - v0  decode:loop 0 , 4 , move 4 , 2 / 3 - v0 
[9341] c:0 is:loop 0 , 3 , move 0 - ua , v0 * 9  decode:loop 0 , 3 , move 0 - ua , v0 * 4 
[9342] c:3 is:loop 0 , 4 , move 3 - ua , v0 * 5  decode:loop 0 , 4 , move 3 - ua , v0 * 5 
[9343] c:0 is:loop 0 , 3 , move ua , 4 / 2 / v0  decode:loop 0 , 3 , move ua , 4 / v0 
[9344] c:3 is:loop 0 , 4 , move 4 - ua , 3 / v0  decode:loop 0 , 4 , move 4 - ua , 3 / v0 
[9345] c:0 is:loop 0 , 3 , move 4 + v0 , ua / 5  decode:loop 0 , 4 , move 3 + v0 , 5 
[9346] c:0 is:loop 0 , 4 , move ul + v0 , 4 / 3  decode:loop 0 , 4 , move 4 - ua , 4 / v0 
[9347] c:3 is:loop 0 , 4 , move 4 - ua , 4 * v0  decode:loop 0 , 4 , move 4 - ua , 4 * v0 
[9348] c:0 is:( move ua + ul , ul ; move ua , 8 )  decode:( move 7 , ul ; move ua , 8 ) 
[9349] c:3 is:loop 0 , 4 , move ua - 2 , v0 + 8  decode:loop 0 , 4 , move ua - 2 , v0 + 8 
[9350] c:0 is:loop 0 , 3 , move 4 - ua , v0 - 6  decode:loop 0 , 3 , move 4 - ua , v0 - 4 
[9351] c:0 is:loop 0 , 3 , move 4 , 4 + ul / v0  decode:loop 0 , 3 , move 4 , 5 
[9352] c:0 is:loop 0 , 3 , move v0 - ua , 5 / 3  decode:loop 0 , 3 , move v0 - ua , ua / 4 
[9353] c:0 is:loop 0 , 4 , move ua - v0 , 5 * 3  decode:loop 0 , 4 , move ua - v0 , 0 - 3 
[9354] c:0 is:loop 0 , 6 , move ul - 4 , 2 - v0  decode:( move 4 , 0 ; move ua + 4 , 4 ) 
[9355] c:3 is:loop 0 , 4 , move ua - 3 , 4 / v0  decode:loop 0 , 4 , move ua - 3 , 4 / v0 
[9356] c:3 is:loop 0 , 3 , move v0 - 4 , ul / 3  decode:loop 0 , 3 , move v0 - 4 , ul / 3 
[9357] c:3 is:loop 0 , 4 , move ul + v0 , 0 - 9  decode:loop 0 , 4 , move ul + v0 , 0 - 9 
[9358] c:0 is:loop 0 , 6 , move 3 + v0 , ua / 3  decode:loop 0 , 4 , move v0 + ua , ua / 4 
[9359] c:0 is:loop 0 , 6 , move v0 - 2 , 3 / ua  decode:( move 3 , 2 / 3 ; move ua , ul ) 
[9360] c:0 is:( move ua , 8 ; move ua , ua * ua )  decode:loop 0 , 2 , move 4 + 2 , ua * ua 
[9361] c:0 is:loop 0 , 4 , move v0 - 4 , ua / 3  decode:loop 0 , 4 , move ua - 4 , ua / 3 
[9362] c:0 is:loop 0 , 4 , move 3 - ua , 4 / v0  decode:loop 0 , 4 , move 0 - 3 , 4 / v0 
[9363] c:0 is:loop 0 , 4 , move ua - v0 , 0 - 9  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[9364] c:0 is:loop 0 , 4 , move ua - 8 , v0 + 2  decode:loop 0 , 4 , move 2 , 2 + 4 - v0 
[9365] c:0 is:loop 0 , 3 , move 4 - v0 , 4 / ua  decode:loop 0 , 4 , move 2 , 4 / ua 
[9366] c:0 is:loop 0 , 4 , move 4 - ua , v0 - 5  decode:loop 0 , 4 , move ua - 4 , 4 
[9367] c:3 is:loop 0 , 3 , move ua - 2 , v0 * 8  decode:loop 0 , 3 , move ua - 2 , v0 * 8 
[9368] c:0 is:loop 0 , 4 , move 4 , 4 - ua / v0  decode:loop 0 , 4 , move 4 , 4 - v0 
[9369] c:0 is:loop 0 , 3 , move 3 / v0 , 4 / ua  decode:( move 3 , 2 ; move 4 , 4 / ua ) 
[9370] c:3 is:( move ua , ul ; move ua + ul , 9 )  decode:( move ua , ul ; move ua + ul , 9 ) 
[9371] c:0 is:loop 0 , 5 , move ul - 3 , 3 / v0  decode:loop 0 , 4 , move 4 - ua , 9 + v0 
[9372] c:0 is:loop 0 , 3 , move ua - 4 , 5 / v0  decode:loop 0 , 3 , move 4 - ua , 5 / v0 
[9373] c:0 is:loop 0 , 4 , move 2 / v0 , 4 / ua  decode:loop 0 , 4 , move v0 , 4 / ua 
[9374] c:0 is:loop 0 , 7 , move ua - v0 , 4 * 2  decode:loop 0 , 4 , move ua , 0 - 9 
[9375] c:0 is:loop 0 , 3 , move 4 - ua , 7 - v0  decode:loop 0 , 3 , move 2 , 4 * 4 - v0 
[9376] c:0 is:loop 0 , 4 , move 4 / v0 , 2 / ua  decode:loop 0 , 4 , move ua - 4 , 2 / ua 
[9377] c:0 is:loop 0 , 4 , move 4 - ua , 7 + v0  decode:loop 0 , 4 , move 4 - ua , 9 / v0 
[9378] c:3 is:( move ua , 9 ; move ua , ua * ua )  decode:( move ua , 9 ; move ua , ua * ua ) 
[9379] c:3 is:( move ua , ul ; move 8 , ua * ua )  decode:( move ua , ul ; move 8 , ua * ua ) 
[9380] c:3 is:( move ua + ul , ul ; move ua , 9 )  decode:( move ua + ul , ul ; move ua , 9 ) 
[9381] c:0 is:loop 0 , 7 , move v0 - ua , 4 * 2  decode:loop 0 , 4 , move v0 - ua , 0 - 8 
[9382] c:0 is:loop 0 , 3 , move v0 - 4 , ul / 4  decode:loop 0 , 3 , move 0 - 3 , ul / 4 
[9383] c:0 is:loop 0 , 6 , move 4 - ua , v0 * 3  decode:loop 0 , 3 , move 2 - ua , 2 * 5 
[9384] c:0 is:loop 0 , 4 , move v0 + 5 , ua / 4  decode:loop 0 , 4 , move 4 + v0 , ua / 4 
[9385] c:0 is:loop 0 , 3 , move ua - 4 , v0 + 8  decode:loop 0 , 3 , move 4 - ua , v0 + 8 
[9386] c:3 is:loop 0 , 4 , move ua - 4 , 4 / v0  decode:loop 0 , 4 , move ua - 4 , 4 / v0 
[9387] c:0 is:loop 0 , 3 , move 2 - ua , 8 * v0  decode:loop 0 , 3 , move 0 - 4 , v0 * 8 
[9388] c:3 is:loop 0 , 3 , move v0 * 4 , ua / 4  decode:loop 0 , 3 , move v0 * 4 , ua / 4 
[9389] c:0 is:loop 0 , 4 , move ua - 3 , 7 - v0  decode:loop 0 , 4 , move 3 , 7 - v0 
[9390] c:0 is:loop 0 , 3 , move 4 , ul - 4 / v0  decode:loop 0 , 3 , move 4 , 3 * 4 - v0 
[9391] c:1 is:loop 0 , 4 , move 3 - ua , 7 - v0  decode:loop 0 , 4 , move 3 , 0 - v0 / 2 
[9392] c:0 is:loop 0 , 7 , move v0 / 4 , 0 - ul  decode:loop 0 , 4 , move v0 , v0 / v0 
[9393] c:3 is:loop 0 , 4 , move 3 - ua , v0 * 6  decode:loop 0 , 4 , move 3 - ua , v0 * 6 
[9394] c:0 is:loop 0 , 4 , move ua , 4 - v0 / 4  decode:loop 0 , 4 , move ua , - ua v0 + 4 
[9395] c:3 is:( move 8 , ul ; move ua , ua * ua )  decode:( move 8 , ul ; move ua , ua * ua ) 
[9396] c:0 is:( move ul - ua , 8 ; move ua , ul )  decode:( move ua , 8 ; move ul - ua , ul ) 
[9397] c:0 is:( move ua , 8 ; move ul - ua , ul )  decode:( move ul - ua , 8 ; move ua , ul ) 
[9398] c:0 is:loop 0 , 4 , move 4 - ua , v0 / 4  decode:loop 0 , 4 , move 0 - v0 , 4 / 4 
[9399] c:3 is:loop 0 , 4 , move 4 - ua , 5 * v0  decode:loop 0 , 4 , move 4 - ua , 5 * v0 
[9400] c:3 is:( move ul - ua , ul ; move ua , 8 )  decode:( move ul - ua , ul ; move ua , 8 ) 
[9401] c:0 is:( move ua - ul , ul ; move ua , 8 )  decode:( move 5 , ul ; move ua , 8 ) 
[9402] c:0 is:( move ua , ul ; move ua - ul , 8 )  decode:( move ua , ul ; move 5 , 8 ) 
[9403] c:0 is:( move ua - ul , 8 ; move ua , ul )  decode:( move ul - ua , 8 ; move ua , ul ) 
[9404] c:3 is:loop 0 , 4 , move 3 - ua , v0 - 7  decode:loop 0 , 4 , move 3 - ua , v0 - 7 
[9405] c:0 is:loop 0 , 4 , move v0 * 2 , ul / 4  decode:loop 0 , 4 , move v0 + 2 , ul / 4 
[9406] c:0 is:loop 0 , 4 , move 2 - ua , v0 + 9  decode:loop 0 , 4 , move 0 - 4 , 9 / v0 
[9407] c:3 is:loop 0 , 4 , move ua - 4 , v0 / 4  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[9408] c:0 is:loop 0 , 6 , move ul - 3 , v0 * 3  decode:loop 0 , 3 , move 3 - ua , 2 * 5 
[9409] c:0 is:loop 0 , 4 , move ua / v0 , 0 - 8  decode:loop 0 , 3 , move ua , v0 - 8 
[9410] c:3 is:loop 0 , 3 , move ua / v0 , 4 / 3  decode:loop 0 , 3 , move ua / v0 , 4 / 3 
[9411] c:3 is:loop 0 , 4 , move ua - 3 , v0 - 7  decode:loop 0 , 4 , move ua - 3 , v0 - 7 
[9412] c:3 is:loop 0 , 3 , move 0 - ua , 9 / v0  decode:loop 0 , 3 , move 0 - ua , 9 / v0 
[9413] c:0 is:loop 1 , 7 , move 3 - v1 , ua - 2  decode:loop 0 , 4 , move 3 , 0 - 9 
[9414] c:0 is:loop 0 , 4 , move ua - v0 , 9 + 2  decode:loop 0 , 4 , move ua - v0 , ua / 4 
[9415] c:3 is:loop 0 , 4 , move 4 - ua , 4 / v0  decode:loop 0 , 4 , move 4 - ua , 4 / v0 
[9416] c:0 is:loop 0 , 3 , move 4 , ua / v0 * 4  decode:loop 0 , 3 , move 4 , 4 * 4 / v0 
[9417] c:0 is:loop 0 , 5 , move 3 / v0 , 4 + ul  decode:loop 0 , 4 , move ua - 4 , v0 / ua 
[9418] c:0 is:loop 0 , 6 , move ul - v0 , 4 + 4  decode:0 loop 0 , 4 , move 3 , 4 - v0 
[9419] c:0 is:loop 0 , 4 , move v0 - 4 , ul / 3  decode:loop 0 , 4 , move 4 - ua , 3 / ua 
[9420] c:0 is:loop 0 , 4 , move v0 * 3 , ua / 4  decode:( move 9 , 0 ; move 9 , ua / 4 ) 
[9421] c:0 is:( move ua , 8 ; move ua - ul , ul )  decode:( move ua , 8 ; move ul - ua , ul ) 
[9422] c:0 is:loop 0 , 4 , move 4 - v0 , ul / 3  decode:loop 0 , 4 , move v0 , v0 / 9 
[9423] c:0 is:loop 0 , 7 , move v0 - ua , 3 * 3  decode:loop 0 , 4 , move ul - ua , 9 
[9424] c:0 is:loop 0 , 5 , move v0 / 2 , 3 / ua  decode:loop 0 , 4 , move ul , ua / v0 
[9425] c:0 is:loop 0 , 4 , move ua / 2 , v0 / 4  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[9426] c:0 is:( move ua , ul ; move ul - ua , 8 )  decode:( move 5 , 9 ; move ua , 3 / 2 ) 
[9427] c:0 is:loop 0 , 4 , move ua - 2 , v0 + 9  decode:loop 0 , 4 , move 4 , v0 + 9 
[9428] c:3 is:loop 0 , 4 , move ua - 3 , 5 / v0  decode:loop 0 , 4 , move ua - 3 , 5 / v0 
[9429] c:0 is:loop 0 , 4 , move 4 , ua / v0 - 4  decode:loop 0 , 4 , move 4 / v0 , 9 
[9430] c:0 is:loop 0 , 3 , move 2 - ua , v0 - 9  decode:loop 0 , 3 , move 4 , 3 9 - 9 
[9431] c:3 is:loop 0 , 4 , move 2 - ua , 6 / v0  decode:loop 0 , 4 , move 2 - ua , 6 / v0 
[9432] c:0 is:loop 0 , 3 , move ua - 2 , 7 / v0  decode:loop 0 , 3 , move 2 - ua , 7 / v0 
[9433] c:0 is:loop 0 , 7 , move 3 - v0 , ua / 3  decode:loop 0 , 4 , move 3 , 2 * 3 - v0 
[9434] c:0 is:loop 0 , 4 , move ua - 9 , v0 - 2  decode:loop 0 , 4 , move 4 - ua , v0 - 2 
[9435] c:0 is:loop 0 , 4 , move ua - 2 , 8 * v0  decode:loop 0 , 4 , move 4 , 0 - 8 * v0 
[9436] c:3 is:loop 0 , 4 , move ua - v0 , 7 * 3  decode:loop 0 , 4 , move ua - v0 , 7 * 3 
[9437] c:0 is:loop 0 , 6 , move ua / 4 , v0 * 2  decode:loop 0 , 4 , move 2 , v0 + 4 
[9438] c:0 is:loop 0 , 5 , move ul - 3 , 4 / v0  decode:loop 0 , 4 , move 4 - ua , 3 / 4 
[9439] c:3 is:loop 0 , 4 , move 4 - ua , 5 / v0  decode:loop 0 , 4 , move 4 - ua , 5 / v0 
[9440] c:0 is:loop 0 , 4 , move 3 - ua , 6 / v0  decode:loop 0 , 4 , move 3 , 6 / v0 
[9441] c:0 is:loop 0 , 7 , move 4 - ua , 4 - v0  decode:loop 0 , 4 , move 3 - ua , 0 - 4 0 
[9442] c:0 is:loop 0 , 6 , move 2 - v0 , ul / 4  decode:( move ua , 4 / 3 ; move 3 , 4 ) 
[9443] c:0 is:loop 0 , 3 , move 2 - ua , v0 * 9  decode:loop 0 , 3 , move 4 , ua * 9 
[9444] c:0 is:loop 0 , 4 , move 2 - ua , v0 * 8  decode:loop 0 , 4 , move 0 - 4 , v0 * 8 
[9445] c:3 is:loop 0 , 4 , move 0 - ua , 9 / v0  decode:loop 0 , 4 , move 0 - ua , 9 / v0 
[9446] c:3 is:loop 0 , 4 , move ua - 2 , 7 / v0  decode:loop 0 , 4 , move ua - 2 , 7 / v0 
[9447] c:0 is:loop 0 , 7 , move ua - 4 , v0 / 2  decode:loop 0 , 4 , move 4 , v0 * 7 
[9448] c:0 is:loop 0 , 4 , move 3 / v0 , 4 / ua  decode:loop 0 , 4 , move 2 , 7 
[9449] c:0 is:loop 0 , 3 , move 4 - ua , v0 + 9  decode:loop 0 , 3 , move 2 , v0 + 2 
[9450] c:0 is:loop 0 , 4 , move ua - 9 , 2 - v0  decode:loop 0 , 4 , move 4 - ua , 2 - v0 
[9451] c:3 is:loop 0 , 3 , move 3 - ua , v0 - 9  decode:loop 0 , 3 , move 3 - ua , v0 - 9 
[9452] c:0 is:loop 0 , 7 , move ua - 3 , v0 / 3  decode:loop 0 , 4 , move v0 + 4 , 0 - 8 
[9453] c:0 is:loop 0 , 4 , move 4 - ua , v0 / 5  decode:loop 0 , 4 , move 0 - 4 , v0 / 5 
[9454] c:3 is:loop 0 , 4 , move 4 - ua , v0 + 8  decode:loop 0 , 4 , move 4 - ua , v0 + 8 
[9455] c:0 is:loop 0 , 6 , move v0 - ul , 4 * 3  decode:( move 5 , 6 ; move ua , 4 / ua ) 
[9456] c:0 is:loop 0 , 4 , move ua - 9 , v0 + 3  decode:loop 0 , 4 , move ua - 4 , v0 + 9 
[9457] c:0 is:loop 0 , 4 , move ua - 3 , v0 + 9  decode:loop 0 , 4 , move 3 , 2 / v0 
[9458] c:3 is:( move ul - ua , 9 ; move ua , ul )  decode:( move ul - ua , 9 ; move ua , ul ) 
[9459] c:0 is:loop 0 , 4 , move ua , 5 + 7 - v0  decode:loop 0 , 4 , move 0 - ua , v0 - 4 
[9460] c:0 is:loop 0 , 4 , move 2 + v0 , ua / 8  decode:loop 0 , 4 , move 3 , d2 / 4 
[9461] c:0 is:( move ul - ua , ul ; move ua , 9 )  decode:loop 0 , 2 , move ua + v0 , 4 / 8 
[9462] c:0 is:loop 0 , 4 , move 3 - ua , 9 + v0  decode:loop 0 , 4 , move 3 - ua , v0 + 9 
[9463] c:0 is:( move ua , 9 ; move ul - ua , ul )  decode:( move ua , 9 ; move 5 , ua / 3 ) 
[9464] c:3 is:loop 0 , 3 , move 3 - ua , 8 * v0  decode:loop 0 , 3 , move 3 - ua , 8 * v0 
[9465] c:0 is:loop 0 , 6 , move 4 - ua , 3 / v0  decode:loop 0 , 4 , move 3 - ua , 3 * v0 
[9466] c:0 is:loop 0 , 4 , move 2 - ua , 7 / v0  decode:loop 0 , 4 , move 2 - ua , 2 + v0 
[9467] c:0 is:loop 0 , 4 , move ua / v0 , 4 * 4  decode:loop 0 , 4 , move v0 + 4 , 0 - 4 
[9468] c:0 is:loop 0 , 6 , move ul + v0 , 4 / 3  decode:loop 0 , 4 , move ua - ul , v0 + 9 
[9469] c:0 is:( move ua - 9 , ul ; move ua , ul )  decode:( move 3 , ul - move ua , ul ) 
[9470] c:0 is:loop 0 , 4 , move ua / v0 , 0 - 9  decode:loop 0 , 3 , move ua , 0 - 9 
[9471] c:3 is:( move ua , ul ; move ul - ua , 9 )  decode:( move ua , ul ; move ul - ua , 9 ) 
[9472] c:0 is:loop 0 , 3 , move 4 / v0 , 4 / ua  decode:loop 0 , 4 , move ul + v0 , ua / ua 
[9473] c:3 is:loop 0 , 3 , move 3 - ua , 7 / v0  decode:loop 0 , 3 , move 3 - ua , 7 / v0 
[9474] c:0 is:loop 0 , 5 , move 4 + ul , 4 / v0  decode:loop 0 , 4 , move 4 + v0 , 4 / 3 
[9475] c:0 is:loop 0 , 3 , move ua - 2 , v0 * 9  decode:loop 0 , 3 , move 4 , v0 * 9 
[9476] c:3 is:loop 0 , 3 , move 3 - ua , 9 - v0  decode:loop 0 , 3 , move 3 - ua , 9 - v0 
[9477] c:0 is:loop 0 , 3 , move 3 , 4 / ul / v0  decode:loop 0 , 3 , move 3 , 4 / 0 / 0 
[9478] c:0 is:loop 0 , 4 , move 4 , 4 * v0 / ua  decode:loop 0 , 4 , move 4 , ua / ua ua / ua 
[9479] c:3 is:( move ua , ul / ua ; move ua , 8 )  decode:( move ua , ul / ua ; move ua , 8 ) 
[9480] c:0 is:loop 0 , 4 , move ua - 3 , 7 * v0  decode:loop 0 , 4 , move 3 , 7 * 7 
[9481] c:3 is:( move ul - ua , ul ; move 8 , ul )  decode:( move ul - ua , ul ; move 8 , ul ) 
[9482] c:0 is:loop 0 , 4 , move ua - 4 , 6 / v0  decode:loop 0 , 4 , move ua - 4 , 6 - v0 
[9483] c:0 is:loop 0 , 4 , move 2 - ua , 8 / v0  decode:loop 0 , 4 , move v0 - ua , 8 / 4 
[9484] c:0 is:loop 0 , 4 , move 4 - ua , v0 - 8  decode:( move ua , ul ; move 9 - ua , 8 ) 
[9485] c:0 is:loop 0 , 3 , move ua - 2 , 9 / v0  decode:loop 0 , 3 , move 4 , 9 / v0 
[9486] c:0 is:loop 0 , 3 , move 4 / v0 , ul / 4  decode:loop 0 , 4 , move ua - 4 , ul / 8 
[9487] c:0 is:loop 0 , 3 , move 4 - ua , v0 - 9  decode:loop 0 , 3 , move ua - 4 , 3 / v0 
[9488] c:0 is:loop 0 , 5 , move ua / v0 , 4 / 3  decode:loop 0 , 4 , move ua / v0 , 4 / 3 
[9489] c:0 is:loop 0 , 7 , move v0 - 3 , ul / 3  decode:loop 0 , 2 , move ua , v0 - 4 
[9490] c:3 is:( move ua , ul / ua ; move ua , 9 )  decode:( move ua , ul / ua ; move ua , 9 ) 
[9491] c:0 is:loop 0 , 7 , move 4 - v0 , ua / 3  decode:loop 0 , 3 , move 4 , 0 - 3 / v0 
[9492] c:0 is:loop 0 , 7 , move v0 / 3 , 4 + ul  decode:loop 0 , 3 , move 4 - ua , v0 + 4 
[9493] c:0 is:loop 0 , 4 , move 3 - ua , 7 / v0  decode:loop 0 , 3 , move ua - 2 , 7 / v0 
[9494] c:0 is:loop 0 , 4 , move ua - 2 , v0 * 9  decode:loop 0 , 4 , move 4 , v0 * 9 
[9495] c:3 is:loop 0 , 4 , move ua - 3 , 7 / v0  decode:loop 0 , 4 , move ua - 3 , 7 / v0 
[9496] c:0 is:loop 0 , 4 , move ua - 4 , v0 + 9  decode:loop 0 , 3 , move 3 , ua / v0 + 2 
[9497] c:0 is:loop 0 , 4 , move 2 - ua , 9 * v0  decode:loop 0 , 4 , move 0 - 4 , 9 * v0 
[9498] c:0 is:loop 0 , 3 , move ua - 3 , v0 * 9  decode:loop 0 , 3 , move 3 - ua , v0 * 9 
[9499] c:0 is:loop 0 , 4 , move 4 - ua , 9 + v0  decode:loop 0 , 4 , move ua - 4 , v0 - 9 
[9500] c:0 is:loop 0 , 4 , move 4 - ua , v0 * 7  decode:loop 0 , 4 , move 4 - ua , v0 * 4 
[9501] c:0 is:loop 0 , 4 , move v0 + ul , 4 + 9  decode:loop 0 , 4 , move v0 + ul , ul / 3 
[9502] c:0 is:loop 0 , 4 , move ua - 9 , v0 * 2  decode:loop 0 , 4 , move 0 - 3 , v0 * 2 
[9503] c:0 is:loop 0 , 4 , move ua - 9 , v0 - 3  decode:loop 0 , 4 , move 4 - ua , v0 - 3 
[9504] c:0 is:loop 0 , 3 , move ua - v0 , 9 * 3  decode:loop 0 , 3 , move ua - v0 , ua * ua 
[9505] c:0 is:loop 0 , 4 , move ua - v0 , 7 / 3  decode:loop 0 , 3 , move ua , 0 - 4 
[9506] c:3 is:loop 0 , 4 , move 3 - ua , v0 * 8  decode:loop 0 , 4 , move 3 - ua , v0 * 8 
[9507] c:0 is:loop 0 , 4 , move 4 / v0 , 4 / ua  decode:loop 0 , 4 , move 3 , ua / ua - 3 
[9508] c:0 is:loop 0 , 4 , move 4 - ua , 7 / v0  decode:loop 0 , 4 , move 2 , 4 / v0 
[9509] c:3 is:loop 0 , 4 , move v0 - ua , 9 * 3  decode:loop 0 , 4 , move v0 - ua , 9 * 3 
[9510] c:0 is:loop 0 , 4 , move 2 - ua , 9 / v0  decode:loop 0 , 4 , move 0 - 4 , 9 / v0 
[9511] c:0 is:loop 0 , 4 , move ua - 3 , 8 / v0  decode:loop 0 , 4 , move 3 - ua , 8 / v0 
[9512] c:0 is:loop 0 , 4 , move ua - 9 , 4 - v0  decode:loop 0 , 4 , move 4 - ua , 4 - v0 
[9513] c:0 is:loop 0 , 4 , move ua - 3 , v0 * 9  decode:loop 0 , 4 , move 3 , v0 * 9 
[9514] c:0 is:loop 0 , 4 , move ua - 8 , 3 / v0  decode:loop 0 , 3 , move 2 , 3 / v0 
[9515] c:0 is:loop 0 , 4 , move ua - 8 , v0 * 4  decode:( move 2 , 0 ; move 4 , ul ) 
[9516] c:0 is:loop 0 , 4 , move ua - 4 , v0 - 9  decode:loop 0 , 4 , move 2 , v0 - 9 
[9517] c:0 is:loop 0 , 4 , move 4 - ua , v0 - 9  decode:loop 0 , 4 , move 2 , v0 - 9 
[9518] c:3 is:loop 0 , 4 , move 3 - ua , 9 * v0  decode:loop 0 , 4 , move 3 - ua , 9 * v0 
[9519] c:0 is:loop 0 , 7 , move ua / 4 , v0 - 4  decode:( move ua , 3 * 4 ; move 3 , 2 ) 
[9520] c:0 is:loop 0 , 4 , move ua - 8 , v0 / 3  decode:loop 0 , 4 , move 0 - v0 , 2 / 3 
[9521] c:0 is:loop 0 , 3 , move ua - v0 , 4 * 9  decode:loop 0 , 3 , move ua - v0 , 4 * 4 
[9522] c:0 is:loop 0 , 7 , move ua / 4 , 4 - v0  decode:( move 3 , 4 + 3 ; move ua , 2 ) 
[9523] c:0 is:loop 0 , 7 , move 4 / v0 , 2 / ua  decode:loop 0 , 4 , move 3 , 2 / v0 
[9524] c:0 is:loop 0 , 4 , move v0 - ua , 7 / 4  decode:loop 0 , 4 , move v0 - ua , 8 
[9525] c:0 is:loop 0 , 3 , move ua - 4 , v0 * 9  decode:loop 0 , 3 , move 4 - ua , v0 * 9 
[9526] c:0 is:loop 0 , 3 , move ua / 3 , 7 / v0  decode:loop 0 , 3 , move ua - 4 , 7 / v0 
[9527] c:0 is:loop 0 , 4 , move ua - v0 , 9 / 2  decode:loop 0 , 4 , move ua - v0 , 9 / 4 
[9528] c:0 is:loop 0 , 7 , move v0 - 4 , ua / 4  decode:loop 0 , 4 , move 3 , v0 + 4 
[9529] c:3 is:loop 0 , 3 , move 4 - ua , 9 * v0  decode:loop 0 , 3 , move 4 - ua , 9 * v0 
[9530] c:0 is:loop 0 , 7 , move 3 / v0 , 3 / ua  decode:loop 0 , 4 , move ua - 4 , ul / v0 
[9531] c:0 is:loop 0 , 4 , move ua - 9 , v0 * 3  decode:loop 0 , 4 , move 3 , v0 + 3 
[9532] c:0 is:loop 0 , 4 , move 4 - ua , 9 - v0  decode:loop 0 , 4 , move ua - 4 , 9 - v0 
[9533] c:0 is:loop 0 , 4 , move ua - 3 , 9 / v0  decode:loop 0 , 4 , move 3 , 9 / v0 
[9534] c:0 is:loop 0 , 7 , move 4 / v0 , ua / 3  decode:loop 0 , 3 , move 0 - 4 , 6 * 3 
[9535] c:0 is:loop 0 , 7 , move ul - 4 , v0 / 4  decode:loop 0 , 4 , move 0 - ua , 0 - 8 
[9536] c:0 is:loop 0 , 4 , move 3 , ul - 9 * v0  decode:loop 0 , 3 , move 4 , 0 - v0 * 9 
[9537] c:3 is:loop 0 , 4 , move ua - 4 , 9 * v0  decode:loop 0 , 4 , move ua - 4 , 9 * v0 
[9538] c:0 is:loop 0 , 4 , move 9 - ua , 4 * v0  decode:loop 0 , 4 , move ua - 4 , 4 * v0 
[9539] c:3 is:loop 0 , 4 , move 3 - ua , 9 / v0  decode:loop 0 , 4 , move 3 - ua , 9 / v0 
[9540] c:0 is:loop 0 , 4 , move 5 - ua , v0 - 9  decode:( move 2 , 4 / ua ; move 4 , 4 ) 
[9541] c:0 is:loop 2 , 7 , move 4 - ua , v2 - 3  decode:loop 0 , 4 , move 3 - ua , v0 + 4 
[9542] c:0 is:loop 0 , 4 , move 4 - ua , 8 / v0  decode:loop 0 , 3 , move 3 , ua / ua - v0 
[9543] c:0 is:loop 0 , 4 , move 4 - ua , v0 * 9  decode:loop 0 , 4 , move 4 - ua , 9 * v0 
[9544] c:0 is:loop 0 , 4 , move ua - 9 , 4 * v0  decode:loop 0 , 4 , move 0 - 3 , 4 * v0 
[9545] c:0 is:loop 0 , 4 , move ua - 9 , 4 / v0  decode:loop 0 , 4 , move 0 - 3 , 4 / v0 
[9546] c:0 is:loop 0 , 4 , move 4 - ua , 9 / v0  decode:loop 0 , 3 , move 3 - ua , 9 / v0 
[9547] c:0 is:loop 0 , 7 , move 3 / v0 , ul / 4  decode:loop 0 , 4 , move 4 - ua , v0 / ua 
[9548] c:0 is:loop 0 , 4 , move ua - 4 , 9 / v0  decode:loop 0 , 4 , move 2 , 9 / v0 
[9549] c:0 is:loop 0 , 4 , move ua - 9 , 9 * v0  decode:loop 0 , 4 , move 3 , 9 * v0 
[9550] c:0 is:loop 0 , ua , move ua - ul , ua * ua  decode:loop 0 , 4 , move 4 + 2 , ua / 5 
[9551] c:0 is:loop 0 , 4 , move ua - 9 , 9 / v0  decode:loop 0 , 4 , move 4 - ua , 9 / v0 
[9552] c:0 is:loop 0 , 2 , move ua - ul , 0 - v0  decode:loop 0 , 2 , move v0 - ua , 0 - 3 
[9553] c:3 is:loop 0 , 2 , move ua + 2 , v0 + ul  decode:loop 0 , 2 , move ua + 2 , v0 + ul 
[9554] c:0 is:loop 0 , 2 , move ul - ua , 0 - v0  decode:( move 5 , 0 - 3 ; move 5 , ul ) 
[9555] c:3 is:loop 0 , 3 , move 0 - ua , v0 + ul  decode:loop 0 , 3 , move 0 - ua , v0 + ul 
[9556] c:0 is:loop 0 , 3 , move ua - ul , 0 - v0  decode:loop 0 , 3 , move v0 + 4 , 2 - 3 
[9557] c:0 is:loop 0 , 2 , move ua + ul , v0 + 3  decode:( move ua + ul , 3 ; move 7 , 4 ) 
[9558] c:0 is:loop 0 , 4 , move 0 - ua , v0 + ul  decode:loop 0 , 4 , move ua , v0 + ul 
[9559] c:0 is:loop 0 , 3 , move ua + 2 , v0 + ul  decode:loop 0 , 3 , move v0 + ua , ul + 2 
[9560] c:0 is:loop 0 , 2 , move ul - ua , 2 + v0  decode:( move ul - ua , 2 ; move 5 , 3 ) 
[9561] c:0 is:loop 0 , 2 , move ul - ua + v0 , 2  decode:( move ul - ua , 2 ; move ua , 2 ) 
[9562] c:3 is:loop 0 , 3 , move ul - ua , 0 - v0  decode:loop 0 , 3 , move ul - ua , 0 - v0 
[9563] c:3 is:loop 0 , 3 , move ua + ul , 2 + v0  decode:loop 0 , 3 , move ua + ul , 2 + v0 
[9564] c:0 is:loop 0 , 4 , move ul - ua , 0 - v0  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[9565] c:0 is:loop 0 , 3 , move ul - ua + v0 , 2  decode:loop 0 , 3 , move ul - ua , 2 
[9566] c:0 is:loop 0 , 2 , move ua - ul , v0 - 2  decode:loop 0 , 2 , move 5 , v0 - 2 
[9567] c:0 is:loop 0 , 2 , move ua + ul , v0 * 2  decode:( move ua + ul , 0 ; move 8 , 2 ) 
[9568] c:3 is:loop 0 , 4 , move ua - ul , 0 - v0  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[9569] c:0 is:loop 0 , 2 , move 3 - ua , ul + v0  decode:( move 3 , ul ; move 3 , 2 ) 
[9570] c:0 is:loop 0 , 2 , move 3 + v0 , ua * ua  decode:loop 0 , 2 , move 4 , ua + v0 + ua 
[9571] c:0 is:loop 0 , 2 , move ua - ul , 2 - v0  decode:( move 5 , 2 ; move ul - ua , ul ) 
[9572] c:3 is:loop 0 , 3 , move ua - 2 , v0 + ul  decode:loop 0 , 3 , move ua - 2 , v0 + ul 
[9573] c:0 is:loop 0 , 2 , move ua + ul , 3 - v0  decode:( move 7 , 3 ; move ua + ul , 2 ) 
[9574] c:0 is:loop 0 , 3 , move v0 + 2 , ua * ua  decode:loop 0 , 3 , move 3 , ua / ua - v0 
[9575] c:0 is:loop 0 , 2 , move ul - ua , 2 - v0  decode:( move ul - ua , 2 ; move 5 , ul ) 
[9576] c:0 is:loop 0 , 3 , move ul - ua , v0 + 2  decode:loop 0 , 3 , move ul - ua , 2 - 0 3 
[9577] c:0 is:loop 0 , 2 , move ul - ua , 3 + v0  decode:( move 5 , 3 ; move ul - ua , 4 ) 
[9578] c:0 is:loop 0 , 2 , move ua + ul , v0 - 3  decode:loop 0 , 2 , move ua + v0 - 3 
[9579] c:3 is:loop 0 , 4 , move ua + 2 , v0 + ul  decode:loop 0 , 4 , move ua + 2 , v0 + ul 
[9580] c:0 is:loop 0 , 3 , move ua - ul , 2 + v0  decode:loop 0 , 3 , move ua - 2 , 2 + v0 
[9581] c:0 is:loop 0 , 2 , move ul - ua , v0 + 4  decode:( move 5 , 4 ; move ul - ua , 5 ) 
[9582] c:0 is:loop 0 , 2 , move ua - ul , v0 - 3  decode:loop 0 , 2 , move ua - 2 , v0 - 3 
[9583] c:0 is:loop 0 , 4 , move ua - ul , v0 + 2  decode:loop 0 , 4 , move ua - v0 , 2 / 3 
[9584] c:0 is:loop 0 , 3 , move ua - ul , 3 + v0  decode:loop 0 , 3 , move v0 - ua , 3 / 3 
[9585] c:0 is:loop 0 , 4 , move 2 - ua , v0 + ul  decode:loop 0 , 4 , move 0 - 4 , v0 + ul 
[9586] c:3 is:loop 0 , 2 , move 2 - ua , v0 / ua  decode:loop 0 , 2 , move 2 - ua , v0 / ua 
[9587] c:0 is:loop 0 , 2 , move 4 + v0 , ua * ua  decode:( move 4 , ua * ua ; move 5 , 8 ) 
[9588] c:0 is:loop 0 , 4 , move ul - ua , v0 + 2  decode:loop 0 , 4 , move 0 - 5 , v0 + 2 
[9589] c:0 is:loop 0 , 4 , move 2 + v0 - ua , ul  decode:loop 0 , 4 , move 4 - ua , ul 
[9590] c:3 is:loop 0 , 3 , move ua - 2 , v0 - ul  decode:loop 0 , 3 , move ua - 2 , v0 - ul 
[9591] c:3 is:loop 0 , 3 , move ul - ua , 3 + v0  decode:loop 0 , 3 , move ul - ua , 3 + v0 
[9592] c:0 is:loop 0 , 2 , move ua - ul , 2 * v0  decode:( move ul - ua , ul ; move 5 , 2 ) 
[9593] c:0 is:loop 0 , 4 , move ul - ua + v0 , 2  decode:loop 0 , 4 , move 2 - ua + v0 , 2 
[9594] c:3 is:loop 0 , 2 , move ua + v0 , ua / 3  decode:loop 0 , 2 , move ua + v0 , ua / 3 
[9595] c:0 is:loop 0 , 2 , move ul - ua , v0 - 3  decode:( move 5 , 4 / 3 ; move 5 , 2 ) 
[9596] c:0 is:loop 0 , 2 , move ua - ul , 3 - v0  decode:( move 5 , 3 ; move 5 , 2 ) 
[9597] c:0 is:loop 0 , 2 , move ul - ua , 3 - v0  decode:( move ul - ua , 3 ; move 5 , 2 ) 
[9598] c:0 is:loop 0 , 3 , move ua - 2 , ul - v0  decode:( move 4 , ul ; move ua + 2 , ul ) 
[9599] c:0 is:loop 0 , 4 , move 2 + v0 , ua * ua  decode:loop 0 , 4 , move 3 - ua , 4 * ua 
[9600] c:0 is:loop 0 , 3 , move 3 + v0 , ua * ua  decode:loop 0 , 3 , move 4 , ua * ua 
[9601] c:0 is:loop 0 , 2 , move ul - ua , 2 * v0  decode:( move ul - ua , 0 ; move 5 , 2 ) 
[9602] c:3 is:loop 0 , 3 , move 2 - ua , v0 - ul  decode:loop 0 , 3 , move 2 - ua , v0 - ul 
[9603] c:0 is:loop 0 , ua , move 2 - ua , 3 * v0  decode:loop 0 , 4 , move ua + v0 , ua * ua 
[9604] c:0 is:( move ua , ua * ua ; move ua , ul )  decode:( move ua , 8 ; move ua , ul ) 
[9605] c:0 is:loop 0 , 6 , move ul - ua , 0 - v0  decode:0 loop 0 , 4 , move 0 - ua , 0 - 4 
[9606] c:3 is:loop 0 , 3 , move ua + v0 , ua / 3  decode:loop 0 , 3 , move ua + v0 , ua / 3 
[9607] c:1 is:loop 0 , 3 , move ul - ua , v0 * 2  decode:loop 0 , 3 , move ul - ua , v0 * 2 
[9608] c:0 is:loop 0 , 4 , move 3 + v0 , ua * ua  decode:loop 0 , 4 , move 4 , 4 * ua * 0 0 0 
[9609] c:3 is:loop 0 , 4 , move 2 - ua , v0 - ul  decode:loop 0 , 4 , move 2 - ua , v0 - ul 
[9610] c:0 is:( move ua + ul , ul ; move ul , ul )  decode:( move 8 , ul ; move ul , ul ) 
[9611] c:2 is:( move ul , ul ; move ua , ua * ua )  decode:( move ul , ul ; move ua , ua * ua ) 
[9612] c:0 is:loop 0 , 3 , move ua - ul , 3 - v0  decode:loop 0 , 3 , move ua - v0 , 3 - 3 
[9613] c:0 is:loop 0 , 2 , move ua + ul , v0 * 4  decode:loop 0 , 3 , move 4 + v0 , 4 * 3 
[9614] c:0 is:loop 0 , 5 , move v0 + 2 , ua * ua  decode:loop 0 , 4 , move 5 , 4 * 4 - v0 
[9615] c:0 is:loop 0 , 5 , move v0 - ua , ua - 2  decode:loop 0 , 4 , move v0 - ua , 0 - 2 
[9616] c:0 is:loop 0 , 4 , move 2 - ua , ul - v0  decode:( move 0 - 9 , ul ; move ua , ul ) 
[9617] c:3 is:loop 0 , 4 , move 2 - ua , v0 - ul  decode:loop 0 , 4 , move 2 - ua , v0 - ul 
[9618] c:3 is:loop 0 , 3 , move ua + ul , 4 - v0  decode:loop 0 , 3 , move ua + ul , 4 - v0 
[9619] c:0 is:loop 0 , 4 , move ul - ua - v0 , 2  decode:loop 0 , 4 , move v0 + 2 , 2 
[9620] c:0 is:loop 0 , 3 , move 4 - ua , ua - v0  decode:loop 0 , 3 , move ua - 4 , 0 - v0 
[9621] c:3 is:( move ul - ua , ul ; move ua , ul )  decode:( move ul - ua , ul ; move ua , ul ) 
[9622] c:0 is:loop 0 , 4 , move ua - 2 , v0 - ul  decode:loop 0 , 3 , move ua - 2 , v0 - ul 
[9623] c:0 is:loop 0 , 3 , move ul - ua , v0 - 3  decode:loop 0 , 3 , move 3 + v0 , 2 - 3 
[9624] c:3 is:loop 0 , 3 , move ua - ul , v0 * 2  decode:loop 0 , 3 , move ua - ul , v0 * 2 
[9625] c:0 is:loop 0 , 2 , move 4 - v0 , ua * ua  decode:loop 0 , 2 , move 4 , ua / ua / v0 
[9626] c:0 is:loop 0 , 2 , move ua + v0 , ua / 4  decode:loop 0 , 4 , move ua - 3 , v0 / 2 
[9627] c:0 is:loop 0 , 4 , move ua - 2 , ul - v0  decode:loop 0 , 4 , move ua - 3 , ul - v0 
[9628] c:0 is:loop 0 , 3 , move ua - ul , v0 - 3  decode:loop 0 , 3 , move 3 + v0 , 0 - 3 
[9629] c:3 is:( move ua , ul ; move ul - ua , ul )  decode:( move ua , ul ; move ul - ua , ul ) 
[9630] c:0 is:loop 0 , 5 , move ul - v0 , 0 - ul  decode:( move 3 , 4 / 5 ; move 4 , ul ) 
[9631] c:3 is:loop 0 , 3 , move ua + ul , v0 - 4  decode:loop 0 , 3 , move ua + ul , v0 - 4 
[9632] c:0 is:loop 0 , 5 , move v0 + ul , ua - 2  decode:loop 0 , 3 , move ul - ua , 0 - 4 
[9633] c:0 is:loop 0 , 2 , move v0 - ua , 3 / ua  decode:loop 0 , 2 , move v0 - ua , 4 / ua 
[9634] c:3 is:loop 0 , 3 , move v0 + 4 , ua * ua  decode:loop 0 , 3 , move v0 + 4 , ua * ua 
[9635] c:3 is:loop 0 , 4 , move 3 - ua , v0 + ul  decode:loop 0 , 4 , move 3 - ua , v0 + ul 
[9636] c:0 is:loop 0 , 3 , move ul - ua + v0 , 4  decode:loop 0 , 3 , move v0 - ua , 4 
[9637] c:0 is:loop 0 , 2 , move ua - v0 , 3 / ua  decode:loop 0 , 2 , move ua - ul , 2 / 4 
[9638] c:0 is:loop 0 , 3 , move ul - ua , 3 - v0  decode:loop 0 , 3 , move ua - v0 , 3 - 3 
[9639] c:0 is:loop 0 , 3 , move 4 , v0 + ua * ua  decode:loop 0 , 3 , move 4 , v0 + ua / ua 
[9640] c:0 is:loop 0 , 3 , move 4 - ua , v0 + ul  decode:loop 0 , 3 , move 4 - ua , 2 + v0 
[9641] c:0 is:loop 0 , 4 , move v0 + 4 , ua * ua  decode:loop 0 , 4 , move 4 + v0 , ua * ua 
[9642] c:0 is:loop 0 , 2 , move 6 + v0 , ua * ua  decode:loop 0 , 2 , move 4 + v0 , ua * ua 
[9643] c:0 is:loop 0 , 2 , move v0 - ua , 4 / ua  decode:loop 0 , 3 , move v0 + 2 , ua / ua 
[9644] c:3 is:loop 0 , 4 , move v0 * 2 , ua * ua  decode:loop 0 , 4 , move v0 * 2 , ua * ua 
[9645] c:0 is:loop 0 , 6 , move ua - 2 , ua - v0  decode:loop 0 , 4 , move ua , 7 / v0 
[9646] c:3 is:loop 0 , 4 , move ul + v0 , 2 / ua  decode:loop 0 , 4 , move ul + v0 , 2 / ua 
[9647] c:3 is:loop 0 , 2 , move ua - v0 , ua / 4  decode:loop 0 , 2 , move ua - v0 , ua / 4 
[9648] c:0 is:loop 0 , 2 , move ua - v0 , 4 / ua  decode:loop 0 , 3 , move v0 + 2 , 4 / ua 
[9649] c:0 is:loop 0 , 3 , move ua - 4 , v0 - ul  decode:( move 4 , 2 - 3 ; move 2 , ul ) 
[9650] c:0 is:loop 0 , 3 , move v0 - ua , ua / 3  decode:0 0 loop 0 , 3 , move ua , ua / 3 
[9651] c:0 is:loop 0 , 3 , move ua / 2 , v0 - ul  decode:loop 0 , 3 , move 3 , v0 - ul 
[9652] c:0 is:loop 0 , 5 , move 2 - ua , ul - v0  decode:( move 9 , ul ; move ua + 3 , 4 ) 
[9653] c:3 is:loop 0 , 3 , move ua - v0 , ua / 3  decode:loop 0 , 3 , move ua - v0 , ua / 3 
[9654] c:3 is:loop 0 , 4 , move 2 - ua , ua / v0  decode:loop 0 , 4 , move 2 - ua , ua / v0 
[9655] c:3 is:loop 0 , 4 , move ua + v0 , ua / 3  decode:loop 0 , 4 , move ua + v0 , ua / 3 
[9656] c:0 is:loop 0 , 4 , move 3 - ua , v0 - ul  decode:( move ua , 0 - 3 ; move 4 , 2 ) 
[9657] c:0 is:loop 0 , 4 , move ua - 3 , ul - v0  decode:loop 0 , 3 , move 4 , ul - v0 
[9658] c:3 is:loop 0 , 4 , move 3 - ua , ul - v0  decode:loop 0 , 4 , move 3 - ua , ul - v0 
[9659] c:0 is:loop 0 , 3 , move v0 - 4 - ua , ul  decode:loop 0 , 3 , move 3 , ul 
[9660] c:0 is:loop 0 , 5 , move 2 - ua , v0 - ul  decode:loop 0 , 4 , move 4 , ua / v0 
[9661] c:0 is:loop 0 , 4 , move ul - ua + v0 , 4  decode:loop 0 , 4 , move ua , v0 + 4 
[9662] c:0 is:loop 0 , 3 , move ua , v0 + ua / 4  decode:loop 0 , 3 , move ua , v0 + 4 + 4 
[9663] c:0 is:loop 0 , 4 , move ua - 2 , ua / v0  decode:loop 0 , 4 , move 4 , 2 / v0 
[9664] c:3 is:loop 0 , 3 , move ul - ua , v0 - 4  decode:loop 0 , 3 , move ul - ua , v0 - 4 
[9665] c:0 is:loop 0 , 6 , move v0 + ul , ua - 2  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[9666] c:0 is:loop 0 , 5 , move ua - 3 , v0 + ul  decode:loop 0 , 3 , move v0 + 3 , 3 / 3 
[9667] c:0 is:loop 0 , 3 , move v0 + ua , ua / 4  decode:loop 0 , 3 , move 4 + 3 , ua / 4 
[9668] c:3 is:loop 0 , 3 , move ul - ua , 4 - v0  decode:loop 0 , 3 , move ul - ua , 4 - v0 
[9669] c:0 is:loop 0 , 4 , move ua - 3 , v0 - ul  decode:loop 0 , 3 , move ua - 3 , v0 - ul 
[9670] c:0 is:loop 0 , 3 , move 4 - ua , ul - v0  decode:( move 2 , 0 ; move 5 , ul ) 
[9671] c:0 is:loop 0 , 4 , move 2 , ua / ua - v0  decode:loop 0 , 3 , move 0 - 3 , ua / 4 
[9672] c:0 is:loop 0 , 2 , move ul - ua , 4 * v0  decode:( move ul - ua , 0 ; move 5 , 4 ) 
[9673] c:3 is:loop 0 , 3 , move v0 * 3 , ua * ua  decode:loop 0 , 3 , move v0 * 3 , ua * ua 
[9674] c:0 is:loop 0 , 3 , move 3 , ua * ua / v0  decode:loop 0 , 2 , move 2 - ua , 0 - 8 
[9675] c:0 is:loop 0 , 3 , move ul - ua , v0 - 5  decode:loop 0 , 3 , move 5 , 0 - 5 / v0 
[9676] c:0 is:loop 0 , 4 , move ul + v0 , ua / 3  decode:loop 0 , 4 , move ua - 4 , ua / v0 
[9677] c:0 is:loop 0 , 3 , move ua - ul , 4 * v0  decode:loop 0 , 3 , move 4 , 4 * v0 
[9678] c:0 is:loop 0 , 5 , move 4 + ul , v0 + ul  decode:loop 0 , 4 , move 4 + v0 , 0 - 4 
[9679] c:0 is:loop 0 , 2 , move v0 - 4 , ul / ua  decode:( move 2 , 0 - 3 ; move ua , ul ) 
[9680] c:0 is:loop 0 , 5 , move ul + v0 , ua - 4  decode:0 0 loop 0 , 4 , move 0 - 4 , 0 - 4 
[9681] c:0 is:loop 0 , 6 , move v0 - 2 , ua * ua  decode:0 0 loop 0 , 4 , move 2 , 4 
[9682] c:0 is:loop 0 , 5 , move ua - 3 , ul - v0  decode:ul loop 0 , 4 , move 4 , ul - v0 
[9683] c:3 is:loop 0 , 4 , move 3 , ua / ua - v0  decode:loop 0 , 4 , move 3 , ua / ua - v0 
[9684] c:0 is:loop 0 , 3 , move 3 - ua , ul / v0  decode:loop 0 , 3 , move 0 - 3 , 4 / 5 
[9685] c:0 is:loop 0 , 5 , move ua - 3 , v0 - ul  decode:loop 0 , 4 , move 4 , v0 - v0 
[9686] c:0 is:loop 0 , 4 , move ua + ul , v0 - 5  decode:loop 0 , 4 , move ua + v0 , 0 - 5 
[9687] c:0 is:loop 0 , 3 , move ul + v0 , ua / 4  decode:loop 0 , 2 , move 3 , 3 / 2 
[9688] c:0 is:loop 0 , 7 , move v0 + 2 , ua * ua  decode:loop 0 , 4 , move 4 + 3 , 0 - 8 
[9689] c:0 is:loop 0 , 3 , move ul - ua , 5 - v0  decode:loop 0 , 3 , move ua - ul , 5 - v0 
[9690] c:0 is:loop 0 , 3 , move ua - 3 , ul / v0  decode:loop 0 , 3 , move ua - 3 , ul / 4 
[9691] c:0 is:loop 0 , 6 , move ua - 2 , v0 - ul  decode:loop 0 , 3 , move ua + v0 - ul - 0 4 
[9692] c:0 is:loop 0 , 5 , move ul + v0 , 4 + ul  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[9693] c:0 is:loop 0 , 6 , move v0 - 2 , ua - ul  decode:( move 4 , 4 * 4 ; move 5 , 5 ) 
[9694] c:3 is:loop 0 , 3 , move ul - ua , 3 / v0  decode:loop 0 , 3 , move ul - ua , 3 / v0 
[9695] c:0 is:loop 0 , 2 , move ul - ua , v0 * 5  decode:( move ul - ua , 0 ; move 5 , 5 ) 
[9696] c:0 is:loop 0 , 3 , move 4 * v0 , ua * ua  decode:loop 0 , 4 , move v0 * 2 , ua * ua 
[9697] c:0 is:loop 0 , 4 , move v0 + ul , 3 / ua  decode:loop 0 , 4 , move v0 + ul , 2 / 3 
[9698] c:0 is:loop 0 , 6 , move v0 + 3 , ua * ua  decode:loop 0 , 4 , move 4 + 3 , 0 - 4 
[9699] c:0 is:loop 0 , 3 , move ua - ul , 5 - v0  decode:loop 0 , 3 , move ul - ua , 5 - v0 
[9700] c:0 is:loop 0 , 7 , move ul + v0 , ua - 2  decode:loop 0 , 4 , move v0 + 4 , 0 - 9 
[9701] c:3 is:loop 0 , 3 , move v0 - ua , ua / 4  decode:loop 0 , 3 , move v0 - ua , ua / 4 
[9702] c:0 is:loop 0 , 5 , move v0 - 3 , ua - ul  decode:( move 3 , 0 - 2 ; move 4 , 2 ) 
[9703] c:0 is:loop 0 , 6 , move 0 - ul , v0 / ua  decode:loop 0 , 4 , move 0 - v0 , 2 / 4 
[9704] c:1 is:loop 0 , 3 , move ul - ua , 4 * v0  decode:loop 0 , 3 , move ul - ua , 4 * v0 
[9705] c:0 is:loop 0 , 3 , move ua - ul , 3 / v0  decode:loop 0 , 3 , move 2 - ua , 3 / v0 
[9706] c:0 is:loop 0 , 3 , move 3 , ul - ua / v0  decode:( move ua , ua / ua ; move 3 , 2 ) 
[9707] c:0 is:loop 0 , 3 , move v0 + ul , 4 / ua  decode:loop 0 , 4 , move v0 , 4 / ua 
[9708] c:0 is:loop 0 , 5 , move ul - v0 , ua - 4  decode:( move 4 , 2 ; move 3 , 4 ) 
[9709] c:0 is:loop 0 , 4 , move 4 - ua , ua / v0  decode:loop 0 , 4 , move ul - 4 , ua / v0 
[9710] c:0 is:loop 0 , 6 , move v0 - 3 , ua * ua  decode:loop 0 , 3 , move 0 - 3 , v0 + 2 
[9711] c:0 is:loop 0 , 5 , move v0 - 2 , ul / ua  decode:loop 0 , 4 , move v0 , 0 - 4 0 
[9712] c:0 is:loop 0 , 6 , move ua / 2 , v0 + ul  decode:loop 0 , 4 , move 4 , 3 + 4 - v0 
[9713] c:3 is:loop 0 , 3 , move ua + ul , v0 + 8  decode:loop 0 , 3 , move ua + ul , v0 + 8 
[9714] c:0 is:loop 0 , 4 , move 4 - ua , v0 / ua  decode:loop 0 , 4 , move ua - 4 , v0 / ua 
[9715] c:3 is:loop 0 , 4 , move ua - 4 , v0 / ua  decode:loop 0 , 4 , move ua - 4 , v0 / ua 
[9716] c:3 is:loop 0 , 4 , move 3 - ua , ul / v0  decode:loop 0 , 4 , move 3 - ua , ul / v0 
[9717] c:3 is:loop 0 , 4 , move ua - 4 , ua / v0  decode:loop 0 , 4 , move ua - 4 , ua / v0 
[9718] c:0 is:loop 0 , 5 , move v0 - ul , ul - 3  decode:loop 0 , 3 , move 2 , v0 + 9 
[9719] c:0 is:loop 0 , 7 , move 2 - ua , v0 - ul  decode:loop 0 , 4 , move 4 + 4 , 0 - 4 0 0 
[9720] c:0 is:loop 0 , 3 , move ua - ul , 4 / v0  decode:loop 0 , 3 , move 5 , 4 / v0 
[9721] c:0 is:loop 0 , 5 , move v0 + ul , ua / 3  decode:loop 0 , 3 , move ul - ua , 0 - 3 
[9722] c:0 is:loop 0 , 4 , move ua - ul , v0 - 5  decode:loop 0 , 4 , move 5 , v0 - 5 
[9723] c:0 is:loop 0 , 7 , move ul - v0 , ua - 2  decode:loop 0 , 4 , move 2 - ua , 4 
[9724] c:0 is:loop 0 , 4 , move ul - ua , 5 - v0  decode:loop 0 , 4 , move ul - ua , 0 - 4 
[9725] c:0 is:loop 0 , 5 , move v0 - ua , ua / 3  decode:0 0 loop 0 , 4 , move ua , ua / 3 
[9726] c:0 is:loop 0 , 4 , move v0 + ul , 4 / ua  decode:loop 0 , 4 , move ua - 4 , 3 / ua 
[9727] c:0 is:loop 0 , 4 , move ua - ul , 5 - v0  decode:loop 0 , 4 , move ul - ua , 0 - 5 
[9728] c:0 is:loop 0 , 3 , move 4 - ua , ul / v0  decode:loop 0 , 3 , move ua - 4 , ul / 4 
[9729] c:0 is:loop 0 , 3 , move ua - ul , 4 / v0  decode:loop 0 , 3 , move 5 , 4 / v0 
[9730] c:0 is:loop 0 , 4 , move v0 + ul , ua / 4  decode:loop 0 , 4 , move 4 - ua , ua / 4 
[9731] c:0 is:loop 0 , 7 , move ua - 3 , ua - v0  decode:loop 0 , 4 , move ua - v0 , 0 - 0 7 
[9732] c:0 is:loop 0 , 4 , move ua - 3 , ul / v0  decode:loop 0 , 4 , move 3 , ul / 3 
[9733] c:0 is:loop 0 , 5 , move ul - 3 , v0 - ul  decode:( move 4 , 0 ; move 4 , 0 - 4 ) 
[9734] c:0 is:loop 0 , 5 , move v0 / 2 , ua - ul  decode:( move 2 , 0 - 4 ; move 3 , 5 ) 
[9735] c:0 is:loop 0 , 7 , move 2 - v0 , ua - ul  decode:loop 0 , 3 , move 4 , v0 - 5 
[9736] c:0 is:loop 0 , 3 , move ua - ul , 5 * v0  decode:loop 0 , 3 , move 3 + v0 , 3 * 5 
[9737] c:0 is:loop 0 , 3 , move ul - ua , 4 / v0  decode:loop 0 , 4 , move 4 , 4 / v0 
[9738] c:0 is:loop 0 , 4 , move ul + v0 , ul / 3  decode:loop 0 , 4 , move ul + v0 , ul / ua 
[9739] c:0 is:loop 0 , 3 , move ua - 4 , ul / v0  decode:loop 0 , 3 , move 2 , 4 / 0 / 4 
[9740] c:3 is:loop 0 , 3 , move ul - ua , v0 * 5  decode:loop 0 , 3 , move ul - ua , v0 * 5 
[9741] c:0 is:loop 0 , 5 , move 4 - ua , ul - v0  decode:loop 0 , 4 , move ul - ua , v0 * 2 
[9742] c:3 is:loop 0 , 4 , move ul - ua , v0 - 5  decode:loop 0 , 4 , move ul - ua , v0 - 5 
[9743] c:0 is:loop 0 , 5 , move ua - 4 , v0 - ul  decode:loop 0 , 4 , move ua - 4 , 3 / v0 
[9744] c:0 is:loop 0 , 7 , move v0 - ul , ua - 2  decode:loop 0 , 4 , move ua - 2 , 0 - 4 
[9745] c:0 is:loop 0 , 7 , move ua - 2 , v0 - ul  decode:loop 0 , 4 , move 4 + 3 , v0 * 4 
[9746] c:0 is:loop 0 , 5 , move ul - 4 , ul - v0  decode:( move ua , 0 - 3 ; move ua , 4 ) 
[9747] c:0 is:loop 0 , 5 , move v0 - ua , ua / 4  decode:loop 0 , 4 , move v0 - ua , ua / 4 
[9748] c:0 is:loop 0 , 3 , move ul - ua , 5 / v0  decode:loop 0 , 3 , move ua - ul , 5 / v0 
[9749] c:0 is:loop 0 , 3 , move ua - ul , 5 / v0  decode:loop 0 , 4 , move ua - 2 , 5 / v0 
[9750] c:0 is:loop 0 , 4 , move 4 , ul - ua / v0  decode:loop 0 , 4 , move 4 , 2 / v0 
[9751] c:3 is:loop 0 , 4 , move ul - ua , 4 / v0  decode:loop 0 , 4 , move ul - ua , 4 / v0 
[9752] c:0 is:loop 0 , 4 , move ua - 4 , ul / v0  decode:loop 0 , 4 , move 2 , ul / v0 
[9753] c:0 is:loop 0 , 4 , move ul - ua , v0 * 5  decode:loop 0 , 4 , move ul - ua , v0 * 9 
[9754] c:0 is:loop 0 , 7 , move v0 - 3 , ua - ul  decode:loop 0 , 4 , move 3 - v0 , 2 - 3 
[9755] c:0 is:loop 0 , 4 , move 4 - ua , ul / v0  decode:loop 0 , 4 , move ua - 4 , ul / v0 
[9756] c:0 is:loop 0 , 7 , move 3 - ua , v0 - ul  decode:loop 0 , 4 , move v0 * 3 , 0 - 9 
[9757] c:0 is:loop 0 , 5 , move ua / v0 , ul - 3  decode:loop 0 , 3 , move ua , 0 - 2 
[9758] c:0 is:loop 0 , 4 , move ua - ul , 5 * v0  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[9759] c:0 is:loop 0 , 7 , move ul - 3 , ua - v0  decode:loop 0 , 4 , move 0 - 3 , v0 + 4 
[9760] c:0 is:loop 0 , 5 , move 4 - ua , ua / v0  decode:loop 0 , 4 , move ua - 4 , 3 * v0 
[9761] c:3 is:loop 0 , 4 , move v0 + ul , ul / 4  decode:loop 0 , 4 , move v0 + ul , ul / 4 
[9762] c:0 is:loop 0 , 4 , move ua / 2 , ul / v0  decode:loop 0 , 3 , move ua - 2 , v0 - 5 
[9763] c:0 is:loop 0 , 5 , move ua - 4 , v0 / ua  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[9764] c:0 is:loop 0 , 6 , move ul - v0 , ul - 3  decode:loop 0 , 4 , move 3 , 0 - 9 
[9765] c:0 is:loop 0 , 4 , move ul - ua , v0 + 7  decode:loop 0 , 4 , move v0 - ua , 7 + 7 
[9766] c:0 is:loop 0 , 6 , move 3 - ua , ua / v0  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[9767] c:0 is:loop 0 , 6 , move ua - 3 , ua / v0  decode:loop 0 , 4 , move 3 , 0 - ua / 3 
[9768] c:0 is:loop 0 , 6 , move v0 - 4 , ua * ua  decode:loop 0 , 4 , move 3 , ua / ua ua 
[9769] c:0 is:loop 0 , 7 , move ul + ul , v0 + 4  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[9770] c:0 is:loop 0 , 6 , move 4 - ua , v0 - ul  decode:loop 0 , 4 , move 0 - 3 , ua * 3 
[9771] c:0 is:loop 0 , 6 , move ua - v0 , ua / 3  decode:loop 0 , 4 , move ua , ua / 3 
[9772] c:0 is:loop 0 , 7 , move 3 - v0 , ua - ul  decode:loop 0 , 4 , move 3 , 3 - v0 
[9773] c:0 is:loop 0 , 6 , move v0 + ul , ua / 3  decode:loop 0 , 4 , move ua - ul , ua * ua 
[9774] c:0 is:loop 0 , 5 , move ua - v0 , ua / 4  decode:loop 0 , 4 , move ua - v0 , 0 - 8 
[9775] c:0 is:loop 0 , 6 , move ua / 2 , v0 - ul  decode:loop 0 , 4 , move v0 - ua , 2 * 3 
[9776] c:0 is:loop 0 , 7 , move ua - 4 , ua - v0  decode:0 loop 0 , 4 , move ua - 3 , 4 
[9777] c:0 is:loop 0 , 2 , move ua - ul , v0 + 9  decode:( move 5 , 9 ; move 5 , 9 ) 
[9778] c:0 is:loop 0 , 6 , move ul - v0 , 4 + ul  decode:loop 0 , 4 , move ua - 4 , 3 / v0 
[9779] c:0 is:loop 0 , 5 , move ul - v0 , 3 / ua  decode:( move ul , 0 ; move 7 , 4 - 4 ) 
[9780] c:3 is:loop 0 , 3 , move ua + ul , 9 + v0  decode:loop 0 , 3 , move ua + ul , 9 + v0 
[9781] c:3 is:loop 0 , 4 , move ua - ul , 4 / v0  decode:loop 0 , 4 , move ua - ul , 4 / v0 
[9782] c:0 is:loop 0 , 7 , move 4 - ua , ua - v0  decode:loop 0 , 4 , move 0 - 4 , v0 + 4 
[9783] c:0 is:loop 0 , 6 , move ul - v0 , ua - 4  decode:loop 0 , 3 , move 4 , 0 - v0 * 4 
[9784] c:3 is:loop 0 , 3 , move ua / v0 , ua / 4  decode:loop 0 , 3 , move ua / v0 , ua / 4 
[9785] c:0 is:loop 0 , 7 , move ul - 3 , ul + v0  decode:( move 3 , 4 ; move ua , 0 - 7 ) 
[9786] c:3 is:loop 0 , 3 , move ua - ul , 9 + v0  decode:loop 0 , 3 , move ua - ul , 9 + v0 
[9787] c:0 is:loop 0 , 3 , move ul - ua , v0 + 9  decode:loop 0 , 3 , move ul - ua , ua / + v0 
[9788] c:0 is:loop 0 , 7 , move ul - v0 , 4 + ul  decode:loop 0 , 4 , move 0 - 4 , 8 * v0 
[9789] c:0 is:loop 0 , 5 , move ul - v0 , 4 / ua  decode:( move 2 , 2 - 3 ; move 3 , 9 ) 
[9790] c:0 is:loop 0 , 4 , move ua - ul , v0 + 8  decode:loop 0 , 4 , move ua - v0 , 0 - 8 
[9791] c:3 is:loop 0 , 4 , move ul - ua , 5 / v0  decode:loop 0 , 4 , move ul - ua , 5 / v0 
[9792] c:3 is:loop 0 , 4 , move ua - ul , 5 / v0  decode:loop 0 , 4 , move ua - ul , 5 / v0 
[9793] c:0 is:loop 0 , 7 , move 4 - ua , ul - v0  decode:loop 0 , 4 , move 0 - 4 , v0 * 4 
[9794] c:0 is:loop 0 , 5 , move ul - 3 , ul / v0  decode:loop 0 , 4 , move 4 - ua , ul - v0 
[9795] c:0 is:loop 0 , 6 , move ul + ul , 3 / v0  decode:loop 0 , 4 , move 3 , 3 + 4 - v0 
[9796] c:0 is:loop 0 , 6 , move ua - 4 , ua / v0  decode:loop 0 , 4 , move 3 , v0 * 9 
[9797] c:0 is:loop 0 , 5 , move ua / v0 , ua / 3  decode:loop 0 , 3 , move ua + v0 , ua / 3 
[9798] c:0 is:loop 0 , 6 , move v0 - ul , ua / 3  decode:loop 0 , 4 , move 3 , 4 * 0 - v0 
[9799] c:0 is:loop 0 , 7 , move 3 - ua , ua / v0  decode:loop 0 , 4 , move 4 , 0 - 4 * 4 
[9800] c:0 is:loop 0 , 7 , move ul - v0 , ua - 4  decode:loop 0 , 4 , move 4 , 0 - v0 * 4 
[9801] c:0 is:loop 0 , 4 , move ul - 7 , v0 + ul  decode:loop 0 , 4 , move ul - ua , v0 + ul 
[9802] c:0 is:loop 0 , 5 , move ua / 3 , v0 / ua  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[9803] c:0 is:loop 0 , 7 , move 2 / v0 , ua - ul  decode:loop 0 , 4 , move 2 , v0 - 6 
[9804] c:0 is:loop 0 , 6 , move v0 - 3 , ul / ua  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[9805] c:0 is:loop 0 , 2 , move ua - ul , 8 * v0  decode:( move 5 , 0 ; move ul - ua , 8 ) 
[9806] c:0 is:loop 0 , 6 , move ul - 3 , v0 / ua  decode:loop 0 , 4 , move 0 - 3 , v0 / 0 
[9807] c:0 is:loop 0 , 6 , move 3 - v0 , ul / ua  decode:( move 3 , ul / 4 ; move ua , 4 ) 
[9808] c:0 is:loop 0 , 4 , move ul - ua , 8 + v0  decode:loop 0 , 4 , move ul - ua , v0 + 8 
[9809] c:3 is:loop 0 , 3 , move ul - ua , 8 * v0  decode:loop 0 , 3 , move ul - ua , 8 * v0 
[9810] c:0 is:loop 0 , 7 , move v0 / 3 , ua - ul  decode:loop 0 , 4 , move 0 - v0 , 4 / 8 
[9811] c:0 is:loop 0 , 3 , move ua - ul , 8 * v0  decode:loop 0 , 3 , move ua - ul , v0 * 8 
[9812] c:0 is:loop 0 , 7 , move ul - v0 , ua / 3  decode:loop 0 , 4 , move ua - 2 , ua / 3 
[9813] c:0 is:loop 0 , 4 , move v0 + ul , ua / 7  decode:( move 4 , ua * ua ; move ua , ua / ) 4 
[9814] c:0 is:loop 0 , 6 , move ul - 4 , ua / v0  decode:loop 0 , 4 , move 4 , 0 - 4 / v0 
[9815] c:0 is:loop 0 , 6 , move v0 - ul , ua / 4  decode:loop 0 , 4 , move 3 , 3 + 4 / v0 
[9816] c:0 is:loop 0 , 6 , move ua / 4 , ul - v0  decode:( move 3 , ul ; move 3 , 9 ) 
[9817] c:0 is:loop 0 , 7 , move 4 - ua , v0 / ua  decode:loop 0 , 4 , move 0 - 4 , v0 - 9 
[9818] c:0 is:loop 0 , 5 , move ua / 3 , ul / v0  decode:loop 0 , 4 , move ua - 4 , 3 - v0 
[9819] c:0 is:loop 0 , 6 , move ua / 3 , v0 / ua  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[9820] c:0 is:loop 0 , 7 , move 3 / v0 , ua * ua  decode:loop 0 , 3 , move 0 - 4 , 4 - v0 
[9821] c:0 is:loop 0 , 7 , move ul - 4 , ul - v0  decode:loop 0 , 4 , move ua - v0 , 0 - 8 
[9822] c:0 is:loop 0 , 7 , move ua - 4 , ua / v0  decode:loop 0 , 4 , move 3 - ua , 4 / v0 
[9823] c:0 is:loop 0 , 4 , move ua - 9 , v0 + ul  decode:loop 0 , 4 , move 3 - ua , v0 + ul 
[9824] c:0 is:loop 0 , 6 , move ua / 4 , v0 - ul  decode:loop 0 , 4 , move v0 + ul , ua * ua 
[9825] c:0 is:loop 0 , 7 , move 3 - v0 , ul / ua  decode:( move ua , ul / 9 ; move ua , 9 ) 
[9826] c:0 is:loop 0 , 6 , move 4 / v0 , ua - ul  decode:loop 0 , 4 , move v0 + ul , 2 - 3 
[9827] c:0 is:loop 0 , 4 , move ua / 4 , ul / v0  decode:loop 0 , 4 , move 2 , ul / v0 
[9828] c:0 is:loop 0 , 7 , move ua / 4 , ul + v0  decode:( move 3 , 4 ; move ua , 5 * 2 ) 
[9829] c:0 is:( move ua , move 3 , 3 ; move 3 , ul )  decode:( move 3 , 4 / ua ; move 3 , ul ) 
[9830] c:3 is:loop 0 , 4 , move ua - ul , 7 / v0  decode:loop 0 , 4 , move ua - ul , 7 / v0 
[9831] c:0 is:loop 0 , 7 , move v0 - ul , ua / 4  decode:loop 0 , 4 , move ua - 2 , v0 + 5 
[9832] c:3 is:loop 0 , 4 , move ua - ul , v0 * 8  decode:loop 0 , 4 , move ua - ul , v0 * 8 
[9833] c:0 is:loop 0 , 4 , move ul - ua , 8 * v0  decode:loop 0 , 4 , move ul - ua , v0 + ul 
[9834] c:0 is:loop 0 , 3 , move ul - ua , v0 * 9  decode:loop 0 , 3 , move ua - v0 , ua * ua 
[9835] c:3 is:loop 0 , 3 , move ua - ul , v0 * 9  decode:loop 0 , 3 , move ua - ul , v0 * 9 
[9836] c:0 is:loop 0 , 7 , move v0 / 2 , ul / ua  decode:loop 0 , 4 , move 2 , 2 / ua 
[9837] c:0 is:loop 0 , 6 , move ua / 4 , ua / v0  decode:loop 0 , 4 , move ua - 4 , 0 - v0 
[9838] c:0 is:loop 0 , 7 , move ua / v0 , ua / 4  decode:loop 0 , 4 , move ua , ua / 4 
[9839] c:0 is:loop 0 , 7 , move ua / 4 , ua / v0  decode:loop 0 , 3 , move 3 - ua , 2 
[9840] c:0 is:loop 0 , 7 , move ua / 4 , ul / v0  decode:loop 0 , 4 , move 3 , v0 - 7 
[9841] c:0 is:loop 0 , 4 , move ua - ul , 9 / v0  decode:loop 0 , 4 , move ua - v0 , 9 / 2 
[9842] c:0 is:loop 0 , 4 , move ul - ua , 9 / v0  decode:loop 0 , 4 , move ua , 9 / v0 
[9843] c:0 is:( move 4 , 0 - 3 ; move 3 , 0 - 2 )  decode:loop 0 , 4 , move 0 - v0 , 0 - 3 
[9844] c:0 is:( move 0 - 2 + 4 , 2 ; move 3 , 2 )  decode:( move ua , 2 ; move 3 , 2 ) 
[9845] c:0 is:( move 4 , 2 ; move 0 - 4 , 0 - 4 )  decode:( move 4 , 0 - 2 ; move 4 , 7 ) 
[9846] c:0 is:( move 4 + 2 , 0 ; move 3 , 2 * 3 )  decode:( move 3 , 9 ; move ua , 2 / 3 ) 
[9847] c:0 is:( move 0 - 4 , 2 ; move 4 + 2 , 4 )  decode:( move 0 - 4 , 2 ; move ua , 4 ) 
[9848] c:0 is:( move 3 , 0 - 4 ; move 4 , 4 + 2 )  decode:( move 3 , 2 ; move 4 , 2 / 4 ) 
[9849] c:0 is:( move 4 , 0 ; move 0 - 4 , 4 / 3 )  decode:( move 4 , 4 / 3 ; move 4 , 5 ) 
[9850] c:0 is:( move 4 , 0 - 2 ; move 4 , 3 / 2 )  decode:( move 4 , 9 ; move 4 , 3 / 2 ) 
[9851] c:0 is:( move 4 , 0 - 4 ; move 4 + 4 , 2 )  decode:( move 4 , 0 - 4 ; move 8 , 2 ) 
[9852] c:0 is:loop 0 , ua , move ua - ul , 0 - v0  decode:loop 0 , 4 , move ua + ul , v0 + 4 
[9853] c:0 is:( move 0 - 3 , 6 ; move 3 + 4 , 2 )  decode:( move 3 , 9 ; move ua + ul , ul ) 
[9854] c:0 is:( move 4 , 2 - 3 ; move 4 , 0 - 4 )  decode:( move 4 , 0 - 2 ; move 4 , 4 ) 
[9855] c:0 is:( move 2 , 4 ; move 4 , 4 + 2 + 4 )  decode:( move 2 , 4 ; move 4 , 7 ) 
[9856] c:0 is:loop 0 , 2 , move ua + v0 , ua * ua  decode:loop 0 , 2 , move 4 + 3 , ua * ua 
[9857] c:0 is:loop 0 , 2 , move ua + ul , v0 + ul  decode:( move 7 , ul ; move 7 , 2 ) 
[9858] c:0 is:( move 4 , 2 - 3 ; move 3 , 2 * 3 )  decode:( move 3 , 2 - 3 ; move 4 , 7 ) 
[9859] c:0 is:( move 3 , 0 - 3 ; move 4 , 4 * 3 )  decode:( move 4 , 9 ; move 3 , 4 / 3 ) 
[9860] c:0 is:( move 5 , 2 - 3 ; move 4 , 0 - 4 )  decode:( move 3 , 0 - 2 ; move 5 , 4 ) 
[9861] c:0 is:( move 4 , 4 + 3 ; move 4 + 4 , 2 )  decode:( move 4 , 7 ; move 7 + 2 , 2 ) 
[9862] c:0 is:( move 4 , 0 - 4 ; move 3 , 4 * 3 )  decode:( move 3 , 5 ; move 4 , 3 / 4 ) 
[9863] c:0 is:loop 0 , 2 , move ua - v0 , ua * ua  decode:( move ua , 8 ; move ua - ul , 8 ) 
[9864] c:0 is:( move 4 , 0 - 3 ; move 4 , 3 * 4 )  decode:( move 4 , 0 - 4 ; move 4 , 7 ) 
[9865] c:0 is:( move 0 - 5 , 4 * 3 ; move 4 , 2 )  decode:( move 5 , 9 + 2 ; move 4 , ul ) 
[9866] c:0 is:loop 0 , 2 , move ul - ua , ul + v0  decode:( move ul - ua , ul ; move 5 , 2 ) 
[9867] c:3 is:loop 0 , 3 , move ua + ul , v0 + ul  decode:loop 0 , 3 , move ua + ul , v0 + ul 
[9868] c:0 is:loop 0 , 2 , move v0 - ua , ua * ua  decode:( move ua , ua / ua ; move 5 , 8 ) 
[9869] c:0 is:loop 0 , 2 , move ua - ul , v0 + ul  decode:( move 5 , ul ; move ul - ua , 2 ) 
[9870] c:0 is:( move 3 + 3 , 3 ; move 2 - 7 , 2 )  decode:( move ua , 3 ; move 5 , 2 ) 
[9871] c:3 is:loop 0 , 3 , move ua - ul , ul + v0  decode:loop 0 , 3 , move ua - ul , ul + v0 
[9872] c:0 is:( move 4 , 0 - 4 ; move 4 , 4 * 3 )  decode:( move 3 , 5 ; move 4 , 4 / ua ) 
[9873] c:0 is:loop 0 , 3 , move ul + v0 , ua * ua  decode:loop 0 , 3 , move 2 , 4 * v0 
[9874] c:0 is:( move 4 , 0 - 3 ; move 4 , 4 * 4 )  decode:0 0 move ua ul , 0 ; move 4 , 0 - 9 0 0 
[9875] c:3 is:loop 0 , 3 , move v0 - ua , ua * ua  decode:loop 0 , 3 , move v0 - ua , ua * ua 
[9876] c:0 is:( move 4 + 4 , 0 ; move 4 , 4 * 4 )  decode:( move ua , ul / 4 ; move 8 , 4 ) 
[9877] c:0 is:( move 4 * 2 , 3 / 2 ; move 4 , 2 )  decode:( move ua + 2 , 3 / move 2 , 2 ) 
[9878] c:0 is:( move 0 - 4 , 4 * 3 ; move 4 , 4 )  decode:( move 4 , 9 ; move 4 , 3 + 4 ) 
[9879] c:0 is:( move 0 - 7 , 4 ; move 3 + 2 , 5 )  decode:( move 0 - 9 , 4 ; move 5 , 5 ) 
[9880] c:3 is:loop 0 , 3 , move ul - ua , ul + v0  decode:loop 0 , 3 , move ul - ua , ul + v0 
[9881] c:0 is:loop 0 , 4 , move ua + ul , ul + v0  decode:loop 0 , 4 , move ua + ul , v0 + ul 
[9882] c:0 is:( move 3 , 2 - 3 ; move 4 , 4 * 3 )  decode:( move 3 , 5 ; move 4 , 4 / ua ) 
[9883] c:0 is:( move 4 , 2 / 3 ; move 3 + 4 , 4 )  decode:( move 4 , ua / 4 ; move ua , 4 ) 
[9884] c:3 is:loop 0 , 4 , move v0 - ua , ua * ua  decode:loop 0 , 4 , move v0 - ua , ua * ua 
[9885] c:0 is:loop 0 , 4 , move ul - ua , ul + v0  decode:loop 0 , 4 , move ul - ua , v0 + ul 
[9886] c:0 is:( move 4 + 4 , 4 ; move 2 , 2 / 4 )  decode:( move 3 , 4 ; move ua + ul , ul ) 
[9887] c:0 is:loop 0 , 3 , move 2 + v0 , 0 - v0  decode:loop 0 , 3 , move 3 , 0 - v0 
[9888] c:0 is:loop 0 , 4 , move ua - ul , v0 + ul  decode:loop 0 , 4 , move 5 , ul + v0 
[9889] c:3 is:loop 0 , 4 , move ua - v0 , ua * ua  decode:loop 0 , 4 , move ua - v0 , ua * ua 
[9890] c:0 is:( move 0 - 7 , 6 ; move 3 + 4 , 2 )  decode:( move ua , 3 ; move ua , 2 - 3 ) 
[9891] c:0 is:( move 4 , 2 - 3 ; move 4 , 4 * 3 )  decode:( move 4 , ua / 3 ; move 4 , 9 ) 
[9892] c:0 is:( move 4 , 2 - 3 ; move 3 , 4 / 3 )  decode:( move 3 , 0 - 9 ; move 4 , 5 ) 
[9893] c:0 is:( move 3 , 2 - 3 ; move 4 , 4 / 3 )  decode:( move 4 , 4 * 4 ; move 3 , 5 ) 
[9894] c:0 is:( move 4 , 2 + 4 / 3 ; move 4 , 4 )  decode:( move 4 , 0 - 4 ; move 4 , 4 ) 
[9895] c:0 is:( move 0 - 4 , 6 ; move 4 , 4 * 3 )  decode:loop 0 , 2 , move 4 , 9 * v0 
[9896] c:0 is:( move 5 , 2 / 4 ; move 3 , 4 + 3 )  decode:( move 5 , 2 / 4 ; move 3 , 7 ) 
[9897] c:0 is:loop 0 , 3 , move v0 + 3 , 0 - v0  decode:loop 0 , 3 , move ua - 2 , 0 - v0 
[9898] c:0 is:loop 0 , 5 , move ul - ua , ua - v0  decode:loop 0 , 4 , move 0 - ua , 0 - v0 
[9899] c:0 is:loop 0 , 5 , move ul - ua , v0 + ul  decode:loop 0 , 4 , move 4 + v0 , 3 * 3 
[9900] c:0 is:loop 0 , 4 , move 2 + v0 , 0 - v0  decode:loop 0 , 4 , move 4 , 0 - 3 0 
[9901] c:0 is:loop 0 , 5 , move ul + v0 , ua * ua  decode:0 0 loop 0 , 4 , move 4 , 4 * v0 
[9902] c:0 is:loop 0 , 5 , move ua - ul , v0 + ul  decode:loop 0 , 4 , move 4 + v0 , 0 - 3 
[9903] c:0 is:loop 0 , 3 , move ua / v0 , ua * ua  decode:loop 0 , 3 , move ua - v0 , ua * ua 
[9904] c:1 is:loop 0 , 4 , move ul + v0 , ul / ua  decode:loop 0 , 4 , move ul + v0 , ul / ua 
[9905] c:0 is:loop 0 , 5 , move ul - v0 , ua * ua  decode:( move 3 , 4 ; move 3 , ua * ua ) 
[9906] c:0 is:loop 0 , 2 , move 2 + v0 , v0 - 3  decode:loop 0 , 2 , move 2 - 3 , v0 - 2 
[9907] c:0 is:( move 5 , 2 - 4 ; move 4 , 2 / 4 )  decode:( move 4 , 0 - 2 ; move 4 , 7 ) 
[9908] c:0 is:loop 0 , 3 , move 2 + v0 , v0 + 3  decode:( move 4 , 7 ; move 5 , ua * ua ) 
[9909] c:0 is:loop 0 , 4 , move 3 + v0 , 0 - v0  decode:loop 0 , 3 , move ua - ul , 0 - v0 
[9910] c:0 is:( move 4 , 2 ; move 0 - 9 , 4 * 3 )  decode:( move 3 , 9 ; move 9 , 9 ) 
[9911] c:0 is:loop 0 , 3 , move 4 + v0 , 0 - v0  decode:loop 0 , 3 , move ua - ul , 0 - 2 
[9912] c:0 is:loop 0 , 6 , move ul + v0 , ua * ua  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[9913] c:0 is:loop 0 , 5 , move v0 - ul , ua * ua  decode:( move 3 , 2 ; move 4 , ua * ua ) 
[9914] c:0 is:loop 0 , 2 , loop 1 , 2 , move 2 , v0  decode:( move 4 , 0 ; move 3 , ua / 3 ) 
[9915] c:0 is:loop 0 , 5 , move v0 + v0 , 0 - 2  decode:loop 0 , 4 , move 4 + v0 , 0 - 2 
[9916] c:0 is:loop 0 , 3 , move 2 , v0 + v0 + 3  decode:( move 2 , 3 ; move 4 , ul ) 
[9917] c:0 is:( move 4 , 3 / 2 ; move 5 + 4 , 4 )  decode:( move 4 , 4 / move 9 , 4 ) 
[9918] c:0 is:loop 0 , 3 , move v0 + 2 , v0 - 2  decode:( move ua , ul / 6 ; move 2 , ul ) 
[9919] c:0 is:loop 0 , 5 , move 2 - v0 , 0 - v0  decode:loop 0 , 2 , move 3 , ua / 0 - 4 
[9920] c:0 is:loop 0 , 3 , move v0 - 4 , 0 - v0  decode:( move ul - ua , 0 ; move 5 , ul ) 
[9921] c:0 is:loop 0 , 5 , move v0 + v0 , 0 - 3  decode:0 0 loop 0 , 4 , move v0 - 8 , 3 
[9922] c:0 is:loop 0 , 3 , loop 1 , 2 , move 2 , v0  decode:loop 0 , 4 , move 3 , v0 * 5 
[9923] c:0 is:loop 0 , 2 , move v0 + 3 , v0 - 3  decode:( move 3 , 0 - 2 ; move 3 , 4 ) 
[9924] c:0 is:loop 0 , 3 , move v0 + 2 , v0 - 3  decode:( move 4 , 4 * 4 ; move 4 , 4 ) 
[9925] c:0 is:loop 0 , 4 , move 4 + v0 , 0 - v0  decode:loop 0 , 4 , move ua , 0 - v0 
[9926] c:0 is:loop 0 , 4 , move v0 * v0 , 0 - 2  decode:( move 9 , 9 / ua ; move 5 , 2 ) 
[9927] c:0 is:loop 0 , 3 , move 4 - v0 , 0 - v0  decode:( move 5 , 0 ; move 3 , ua / 3 ) 
[9928] c:0 is:loop 0 , 3 , move 2 + v0 , v0 * 2  decode:loop 0 , 3 , move 3 - ua , v0 + 2 
[9929] c:0 is:loop 0 , 2 , move 4 + v0 , v0 - 2  decode:( move 5 , ul / ua ; move 4 , ul ) 
[9930] c:0 is:loop 0 , 6 , move ul - v0 , ua - ul  decode:loop 0 , 3 , move 4 , v0 - 3 
[9931] c:0 is:loop 0 , 3 , move 2 + v0 , 4 + v0  decode:( move 2 , 4 ; move ua , 7 + 4 ) 
[9932] c:0 is:loop 0 , 4 , move 2 * v0 , 0 - v0  decode:loop 0 , 2 , move ua - ul , 0 - 9 
[9933] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 , 2  decode:loop 0 , 4 , move 2 , 0 - 9 
[9934] c:0 is:loop 0 , 2 , loop 1 , 2 , move 2 , v1  decode:loop 0 , 3 , move 4 - ua , v0 * 6 
[9935] c:0 is:loop 0 , 7 , move v0 + ul , ua * ua  decode:loop 0 , 4 , move ua - v0 , 0 - 6 
[9936] c:0 is:( move 4 , 4 / 3 ; move 2 , 3 / 4 )  decode:( move 3 , 4 / move 3 , 2 / 4 ) 
[9937] c:0 is:loop 0 , 2 , loop 1 , 2 , move 3 , v0  decode:loop 0 , 3 , move ua - 3 , v0 / 4 
[9938] c:0 is:loop 0 , 4 , move v0 + 2 , v0 + 3  decode:( move 4 , 4 / ua ; move 9 , 8 ) 
[9939] c:0 is:loop 0 , 6 , move v0 - ul , ua * ua  decode:loop 0 , 4 , move ul + v0 , 9 / 3 
[9940] c:0 is:loop 0 , 3 , move 0 - 3 , v0 * v0  decode:( move ul - ua , 0 ; move 4 , 4 ) 
[9941] c:0 is:loop 0 , 3 , move 3 , 0 - v0 * v0  decode:( move 5 , 0 ; move 4 , 0 - 2 ) 
[9942] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 , v0  decode:( move ua , 0 ; move 4 , 2 ) 
[9943] c:0 is:loop 0 , 3 , move v0 + 4 , 2 + v0  decode:loop 0 , 4 , move ua - 3 , v0 + 2 
[9944] c:0 is:loop 0 , 6 , move ul - v0 , ua * ua  decode:loop 0 , 4 , move ua - 4 , 9 / v0 
[9945] c:0 is:loop 0 , 3 , move 3 + v0 , 3 + v0  decode:( move 5 , 4 ; move ua , ua * ua ) 
[9946] c:0 is:loop 0 , 4 , move 3 , v0 + v0 + 2  decode:loop 0 , 4 , move 3 - ua , v0 + 4 
[9947] c:0 is:( move 4 , 9 / 2 ; move 4 + 2 , 2 )  decode:( move 4 , ul - 9 ; move ua , 2 ) 
[9948] c:0 is:loop 0 , 3 , move v0 + 2 , v0 * 3  decode:( move 2 , 4 ; move ua - ul , 3 ) 
[9949] c:0 is:loop 0 , 4 , move 2 + v0 , 2 * v0  decode:( move 4 , 2 ; move 4 + 4 , 7 ) 
[9950] c:0 is:loop 0 , 5 , move v0 + v0 , 0 - 4  decode:loop 0 , 3 , move ua + ul , v0 * 2 
[9951] c:0 is:loop 0 , 2 , move v0 + 4 , v0 - 3  decode:loop 0 , 3 , move 0 - 3 , v0 - 3 
[9952] c:0 is:loop 0 , 3 , move 2 + v0 , v0 / 2  decode:loop 0 , 3 , move 3 , v0 - 2 
[9953] c:0 is:loop 0 , 4 , move 0 - 3 , v0 * v0  decode:loop 0 , 4 , move 0 - 3 , v0 * 0 
[9954] c:0 is:loop 0 , 7 , move ul - v0 , ua - ul  decode:loop 0 , 4 , move 4 , v0 - 5 
[9955] c:0 is:loop 0 , 4 , move v0 * 3 , 0 - v0  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[9956] c:0 is:( move ua , move ul , 2 ; move ua , 2 )  decode:( move ua , 8 ; move ua , 0 - 2 ) 
[9957] c:0 is:loop 0 , 3 , move 3 + v0 , v0 - 3  decode:( move ua , 0 - 4 ; move 5 , 4 ) 
[9958] c:0 is:loop 0 , 6 , move v0 + v0 , 0 - 3  decode:loop 0 , 4 , move 3 + 3 , 4 * 4 
[9959] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , 2  decode:loop 0 , 3 , move 2 , 4 + v0 
[9960] c:0 is:loop 0 , 3 , move v0 + 3 , 3 - v0  decode:( move 6 , 9 ; move ua , 0 - 4 ) 
[9961] c:0 is:loop 0 , 5 , move v0 - ul , ul / ua  decode:( move ul , 4 ; move ua - ul , 4 ) 
[9962] c:0 is:loop 0 , 3 , move 3 - v0 , 3 + v0  decode:loop 0 , 3 , move 3 / v0 , 4 
[9963] c:0 is:loop 0 , 3 , move 4 , v0 + v0 - 2  decode:( move 4 , 0 - 2 ; move 4 , 2 ) 
[9964] c:0 is:loop 0 , 3 , move 3 + v0 , 2 * v0  decode:loop 0 , 3 , move 4 , 3 * 3 - v0 
[9965] c:0 is:loop 0 , 3 , move v0 + 4 , 3 + v0  decode:( move ua , 3 ; move ua + ul , 2 ) 
[9966] c:0 is:loop 0 , 3 , move 4 - v0 , 2 + v0  decode:( move 4 , 6 ; move 4 , 0 - 4 ) 
[9967] c:0 is:loop 0 , 2 , move v0 - 3 , 3 - v0  decode:( move 3 , 6 ; move 2 , 0 - 4 ) 
[9968] c:0 is:( move 9 , 2 * 3 ; move 4 + 4 , 3 )  decode:( move 9 , 6 ; move ua + 3 , 3 ) 
[9969] c:0 is:( move 4 , 4 / 3 ; move 3 , 3 / 4 )  decode:( move 3 , 4 ; move 4 , 2 / 3 ) 
[9970] c:0 is:loop 0 , 7 , move v0 - ul , ua * ua  decode:loop 0 , 4 , move 4 , 4 * v0 0 
[9971] c:0 is:( move 4 , 9 + 2 ; move 4 , 2 / 3 )  decode:( move 4 , 9 + 3 ; move 4 , 7 ) 
[9972] c:0 is:( move 4 , 4 / 3 ; move 4 , 4 * 3 )  decode:( move 4 , 4 ; move 3 , 2 / 3 ) 
[9973] c:0 is:loop 0 , 4 , move 0 - 2 , v0 / v0  decode:loop 0 , 3 , move 4 - ua , v0 * 2 
[9974] c:0 is:loop 0 , 6 , move ua / v0 , ua * ua  decode:loop 0 , 4 , move v0 + 4 , ua * 4 
[9975] c:0 is:loop 0 , 4 , move 2 * v0 , v0 + 2  decode:( move 4 , 9 ; move ua , 5 ) 
[9976] c:0 is:loop 0 , 3 , move 4 + 2 - v0 , v0  decode:( move ua , 0 ; move 8 , 2 ) 
[9977] c:0 is:loop 0 , 3 , move 4 * v0 , 0 - v0  decode:( move ua + 2 , ul ; move 5 , 2 ) 
[9978] c:0 is:loop 0 , 3 , move 2 + v0 , v0 + 5  decode:( move 5 , 5 ; move 4 , 4 / ua ) 
[9979] c:0 is:loop 0 , 3 , move v0 + 2 , v0 - 4  decode:loop 0 , 3 , move 3 , v0 - 6 
[9980] c:0 is:loop 0 , 3 , move 0 - 4 , v0 * v0  decode:loop 0 , 4 , move 0 - 3 , v0 * 4 
[9981] c:0 is:loop 0 , 3 , move v0 - 5 , 0 - v0  decode:( move ua , 0 - 3 ; move ua , 4 ) 
[9982] c:0 is:loop 0 , 3 , move v0 + 2 , 2 / v0  decode:( move 3 , 9 / 2 ; move ua , 4 ) 
[9983] c:0 is:loop 0 , 5 , move ul - v0 , ul / ua  decode:( move ul , 9 ; move ua , 0 - 4 ) 
[9984] c:0 is:loop 0 , 2 , loop 1 , 2 , move 3 , v1  decode:( move 4 , 0 ; move ua + 2 , ul ) 
[9985] c:0 is:loop 0 , 3 , move v0 + 2 , 2 / v0  decode:( move 3 , 9 / 2 ; move ua , 4 ) 
[9986] c:0 is:loop 0 , 7 , move ul - v0 , ua * ua  decode:loop 0 , 4 , move v0 - ua , 3 / 4 
[9987] c:0 is:loop 0 , 3 , loop 1 , 2 , move 2 , v1  decode:loop 0 , 4 , move 4 - ua , v0 - 9 
[9988] c:0 is:loop 0 , 3 , loop 1 , 2 , move 3 , v0  decode:loop 0 , 4 , move 4 , v0 * 7 
[9989] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 , v1  decode:loop 0 , 4 , move 0 - 3 , 0 - v0 
[9990] c:0 is:loop 0 , 4 , move 2 + v0 , v0 / 2  decode:loop 0 , 4 , move 3 , 3 / 2 
[9991] c:0 is:loop 0 , 4 , move 0 - 4 , v0 * v0  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[9992] c:0 is:loop 0 , 3 , move 3 + v0 , v0 - 4  decode:loop 0 , 3 , move 4 , v0 - 4 
[9993] c:0 is:loop 0 , 6 , move v0 - ul , ul / ua  decode:( move 3 , 4 ; move ua , 2 / ua ) 
[9994] c:0 is:loop 0 , 4 , move v0 - 4 , 2 + v0  decode:loop 0 , 4 , move ul + v0 , 9 
[9995] c:0 is:loop 0 , 4 , move 2 + v0 , 2 / v0  decode:( move ua , 4 ; move ua + ul , 8 ) 
[9996] c:0 is:loop 0 , 3 , move v0 + 3 , 4 - v0  decode:( move 5 , 4 * 3 ; move 5 , 2 ) 
[9997] c:0 is:loop 0 , 3 , move 3 - v0 , v0 - 3  decode:loop 0 , 3 , move 2 , v0 - 3 
[9998] c:0 is:loop 0 , 3 , move 4 + v0 , v0 * 2  decode:loop 0 , 3 , move ua - v0 , 2 * 3 
[9999] c:0 is:loop 0 , 3 , move 4 + v0 , v0 - 3  decode:loop 0 , 3 , move v0 + 4 , 3 / 3 
[10000] c:0 is:loop 0 , 3 , move 3 + v0 , v0 / 2  decode:loop 0 , 3 , move 4 , v0 / 2 
[10001] c:0 is:loop 0 , 6 , move ul - v0 , ul / ua  decode:( move ua + 3 , 4 ; move 3 , 6 ) 
[10002] c:0 is:loop 0 , 3 , move 3 + v0 , 2 / v0  decode:loop 0 , 3 , move ua - 3 , 2 / v0 
[10003] c:0 is:loop 0 , 4 , move v0 * 2 , 2 - v0  decode:( move ua , 3 ; move ua , 2 - 3 ) 
[10004] c:0 is:loop 0 , 3 , move v0 - 3 , 4 + v0  decode:( move 3 , 9 ; move 3 , 5 ) 
[10005] c:0 is:( move 4 , 3 / 4 ; move 4 , 4 / 3 )  decode:( move 4 , 2 - 3 ; move 4 , 5 ) 
[10006] c:0 is:loop 0 , 3 , move 3 * v0 , v0 + 3  decode:( move 3 , 4 / ua ; move ua , 5 ) 
[10007] c:0 is:loop 0 , 3 , move 3 + v0 , 3 * v0  decode:( move 3 , 9 ; move 3 + 3 , 3 ) 
[10008] c:0 is:loop 0 , 4 , move v0 * v0 , 0 - 4  decode:( move 9 , 6 ; move 4 , 4 ) 
[10009] c:0 is:loop 0 , 4 , move 2 + v0 , v0 - 4  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[10010] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 , v1  decode:loop 0 , 4 , move 2 - ua , 0 - v0 
[10011] c:0 is:loop 0 , 3 , move v0 - 4 , 3 + v0  decode:loop 0 , 3 , move 3 , 3 + v0 
[10012] c:0 is:loop 0 , 4 , move v0 + 2 , 3 * v0  decode:loop 0 , 4 , move 3 , 3 + 3 + v0 
[10013] c:0 is:loop 0 , 3 , move v0 - 3 , v0 - 3  decode:( move 3 , 0 / 4 ; move 3 , 4 ) 
[10014] c:0 is:loop 0 , 3 , move 4 / v0 , 0 - v0  decode:( move ua , 0 ; move 4 , ua / 3 ) 
[10015] c:0 is:loop 0 , 4 , move 4 , v0 * 0 - v0  decode:loop 0 , 4 , move 4 , 0 - ua / v0 
[10016] c:0 is:loop 0 , 3 , move v0 + 4 , 3 - v0  decode:( move 7 , 9 ; move ua + ul , 4 ) 
[10017] c:0 is:loop 0 , 4 , move 2 + v0 , 4 - v0  decode:( move ua , 3 * 2 ; move ua , 4 ) 
[10018] c:0 is:loop 0 , 3 , move 2 + v0 , 4 * v0  decode:( move 4 , 4 ; move 5 , 9 / 2 ) 
[10019] c:0 is:( move 2 - 9 , 2 ; move 4 , 4 / 3 )  decode:( move 3 , ul / 4 ; move 8 , 8 ) 
[10020] c:0 is:loop 0 , 5 , move 2 - v0 , 2 - v0  decode:( move 3 , 0 ; move 3 , 0 - 4 ) 
[10021] c:0 is:loop 0 , 4 , move v0 * 2 , 3 + v0  decode:( move 3 , 8 ; move ua + 2 , 9 ) 
[10022] c:0 is:loop 0 , 3 , move v0 + 2 , v0 / 3  decode:loop 0 , 3 , move 3 , v0 / 2 
[10023] c:0 is:loop 0 , 3 , move 0 - 4 , v0 / v0  decode:loop 0 , 3 , move 0 - 4 , v0 - 9 
[10024] c:0 is:loop 0 , 4 , move 3 / v0 , v0 + 2  decode:loop 0 , 4 , move ua - 4 , 9 
[10025] c:0 is:loop 0 , 4 , move v0 + 2 , v0 / 3  decode:loop 0 , 3 , move 4 , 2 - 3 
[10026] c:0 is:loop 0 , 3 , move 4 + v0 , v0 / 2  decode:loop 0 , 4 , move ua - 3 , v0 / 2 
[10027] c:0 is:loop 0 , 3 , move 2 - 4 , v0 * v0  decode:( move 3 , 0 ; move 3 , 4 ) 
[10028] c:0 is:loop 0 , 3 , move 2 , v0 / 3 - v0  decode:loop 0 , 3 , move 2 , v0 - 4 
[10029] c:0 is:loop 0 , 3 , move v0 - 4 , v0 - 3  decode:loop 0 , 3 , move 3 , v0 - 3 
[10030] c:0 is:loop 0 , 3 , move 4 - v0 , v0 * 2  decode:loop 0 , 3 , move 3 , v0 * 2 
[10031] c:0 is:loop 0 , 3 , move v0 - 4 , 4 + v0  decode:( move 4 , 4 ; move 5 , 5 ) 
[10032] c:0 is:loop 0 , 4 , move 0 - 4 , v0 / v0  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[10033] c:0 is:loop 0 , 6 , move 2 - v0 , v0 - 2  decode:loop 0 , 3 , move 3 - ua , v0 - 4 
[10034] c:0 is:loop 0 , 3 , move 2 + v0 , v0 / 4  decode:loop 0 , 3 , move 3 , v0 / ua 
[10035] c:0 is:loop 0 , 4 , move v0 + 3 , v0 / 2  decode:loop 0 , 4 , move 4 , 3 / 2 
[10036] c:0 is:loop 0 , 4 , move 2 + v0 , 3 / v0  decode:0 loop 0 , 4 , move 3 , 3 * 3 0 
[10037] c:0 is:loop 0 , 4 , move 3 + v0 , v0 * 3  decode:( move 9 , 3 ; move ua , 0 - 9 ) 
[10038] c:0 is:loop 0 , 4 , move 0 - v0 , 4 / v0  decode:loop 0 , 4 , move v0 , 4 / v0 
[10039] c:0 is:( move ua , move 2 , ul ; move ua , 4 )  decode:( move ua , 9 ; move ua , 0 - 2 ) 
[10040] c:0 is:loop 0 , 3 , move 4 - v0 , 3 - v0  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[10041] c:0 is:loop 0 , 4 , move v0 + 2 , v0 * 4  decode:( move 3 , 2 ; move ua + 3 , 4 ) 
[10042] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , 4  decode:loop 0 , 3 , move 3 - v0 , 9 
[10043] c:0 is:loop 0 , 6 , move 3 - v0 , v0 + 2  decode:loop 0 , 3 , move 3 , 5 * v0 
[10044] c:0 is:loop 0 , 3 , move 4 + v0 , v0 - 4  decode:loop 0 , 3 , move ua - v0 , 0 - 4 
[10045] c:0 is:loop 0 , 3 , move v0 - 4 , v0 * 2  decode:loop 0 , 3 , move 0 - 3 , v0 * 2 
[10046] c:0 is:( move 0 - 2 , 0 ; move ua + 2 , 2 )  decode:( move ua + 2 , 0 ; move 8 , 2 ) 
[10047] c:0 is:( move ua + 2 , 0 ; move 2 , 0 - 2 )  decode:( move ua + 2 , 0 ; move 2 , 2 ) 
[10048] c:0 is:loop 0 , 3 , move v0 + 2 , 4 / v0  decode:( move 3 , 8 ; move ua - 2 , 4 ) 
[10049] c:0 is:loop 0 , 3 , move 3 / v0 , v0 - 2  decode:( move 4 , ul / 6 ; move 3 , ul ) 
[10050] c:0 is:loop 0 , 3 , move 3 / v0 , 3 + v0  decode:loop 0 , 3 , move 0 - 3 , 3 / v0 
[10051] c:0 is:loop 0 , 3 , move 4 + v0 , 4 - v0  decode:loop 0 , 3 , move ua - v0 , 4 / 3 
[10052] c:0 is:loop 0 , 4 , move 3 , v0 + v0 - 4  decode:loop 0 , 4 , move 3 , v0 - 3 
[10053] c:0 is:loop 0 , 4 , move v0 - 4 , 2 - v0  decode:( move 4 , 3 ; move ua , 2 - 3 ) 
[10054] c:0 is:loop 0 , 3 , move 4 - v0 , 4 + v0  decode:( move 4 , 4 ; move 5 , 5 ) 
[10055] c:0 is:loop 0 , 3 , move v0 - 4 , 3 - v0  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[10056] c:0 is:loop 0 , 3 , move 4 - v0 , v0 - 3  decode:loop 0 , 3 , move 0 - 3 , v0 - 3 
[10057] c:0 is:loop 0 , 4 , move v0 * 2 , 2 * v0  decode:( move 3 , 2 ; move ua + 3 , 4 ) 
[10058] c:0 is:loop 0 , 4 , move 4 - v0 , v0 - 2  decode:( move 5 , ul / ul ; move 4 , ul ) 
[10059] c:0 is:( move ua , move 2 , ul ; move 3 , ul )  decode:( move 3 , ul ; move ua , 5 ) 
[10060] c:0 is:loop 0 , 5 , move v0 * 2 , v0 - 2  decode:loop 0 , 3 , move v0 + ua , 3 / 3 
[10061] c:0 is:loop 0 , 5 , move 2 * v0 , 2 - v0  decode:loop 0 , 3 , move 2 - ua + v0 
[10062] c:0 is:loop 0 , 3 , move 4 + v0 , v0 - 4  decode:loop 0 , 3 , move ua - v0 , 0 - 4 
[10063] c:0 is:loop 0 , 3 , move v0 + 3 , 3 / v0  decode:( move 2 - ua , ul ; move 5 , 7 ) 
[10064] c:0 is:loop 0 , 4 , move v0 - 4 , v0 - 2  decode:( move 4 , 0 - 4 ; move 5 , ul ) 
[10065] c:0 is:loop 0 , 3 , move 3 + v0 , 4 * v0  decode:( move 5 , 4 ; move ua , ua * ua ) 
[10066] c:0 is:loop 0 , 3 , move 4 - v0 , v0 - 4  decode:( move 4 , 2 - 9 ; move 4 , 9 ) 
[10067] c:0 is:loop 0 , 3 , move v0 - 4 , 4 - v0  decode:loop 0 , 2 , move 4 , 4 - v0 
[10068] c:0 is:loop 0 , 3 , move 4 , v0 * 4 + v0  decode:loop 0 , 3 , move 4 , 2 * 4 / v0 
[10069] c:0 is:loop 0 , 4 , move v0 - 4 , v0 * 2  decode:loop 0 , 4 , move ua - 4 , v0 * 2 
[10070] c:0 is:loop 0 , 4 , move v0 * 2 , 2 / v0  decode:( move ua , 5 ; move ua , 3 / 4 ) 
[10071] c:0 is:( move 0 - 2 , 0 ; move ua + 3 , 2 )  decode:( move 2 , 3 ; move 7 + 3 , 2 ) 
[10072] c:0 is:( move 3 , 0 ; move ua + 2 , 0 - 2 )  decode:( move 9 , 4 / ua ; move 2 , 2 ) 
[10073] c:0 is:loop 0 , 6 , move v0 - 2 , v0 * 2  decode:( move 3 , 0 ; move 4 , ua * ua ) 
[10074] c:0 is:loop 0 , 3 , move 4 / v0 , v0 + 3  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[10075] c:0 is:loop 0 , 3 , move v0 + 4 , 3 / v0  decode:loop 0 , 3 , move 2 - ua , v0 - 6 
[10076] c:0 is:loop 0 , 7 , move 2 - v0 , 3 + v0  decode:loop 0 , 4 , move 3 , 0 - 4 
[10077] c:0 is:loop 0 , 4 , move v0 - 4 , 3 - v0  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[10078] c:0 is:loop 0 , 3 , move 4 - v0 , 2 / v0  decode:/ loop 0 , 3 , move 3 , 2 
[10079] c:0 is:loop 0 , 4 , move 4 - v0 , 4 + v0  decode:move 0 , , 4 ; move ul - ua , 4 ) 
[10080] c:0 is:loop 0 , 5 , move v0 - 2 , 2 / v0  decode:( move 3 , 4 ; move 3 , 2 ) 
[10081] c:0 is:loop 0 , 7 , move 3 - v0 , 2 + v0  decode:loop 0 , 4 , move 3 - ua , 9 * v0 
[10082] c:0 is:loop 0 , 4 , move 2 * v0 , 4 - v0  decode:( move 2 - ua , 9 ; move ua , ul ) 
[10083] c:0 is:loop 0 , 4 , move 3 / v0 , 3 + v0  decode:loop 0 , 3 , move 3 , 3 + v0 
[10084] c:0 is:loop 0 , 3 , move v0 + 4 , v0 * 4  decode:loop 0 , 3 , move 4 , ua / v0 * 4 
[10085] c:0 is:loop 0 , 6 , move v0 - 3 , 2 - v0  decode:( move 3 , 2 ; move 4 , 2 - 3 ) 
[10086] c:0 is:loop 0 , 6 , move 2 - v0 , 4 + v0  decode:loop 0 , 3 , move 3 - ua , 4 - v0 
[10087] c:0 is:loop 0 , 3 , move v0 - 4 , v0 / 2  decode:loop 0 , 4 , move 0 - 2 , v0 / 2 
[10088] c:0 is:loop 0 , 7 , move 2 - v0 , 2 - v0  decode:loop 0 , 4 , move 3 , 0 - 9 
[10089] c:0 is:loop 0 , 4 , move v0 * 2 , v0 / 2  decode:loop 0 , 4 , move 3 , 3 / 2 
[10090] c:0 is:loop 0 , 3 , move 3 / v0 , v0 - 3  decode:( move 3 , 0 - 3 ; move 4 , 4 ) 
[10091] c:0 is:loop 0 , 5 , move v0 + v0 , 3 * 3  decode:loop 0 , 3 , move v0 - 8 , 0 - 0 4 
[10092] c:0 is:loop 0 , 3 , move v0 - 4 , 2 / v0  decode:loop 0 , 3 , move 3 - ua , 2 
[10093] c:0 is:( move 0 - 3 , 0 ; move ua + 2 , 2 )  decode:( move 3 , 2 ; move 8 , 2 - 3 ) 
[10094] c:0 is:loop 0 , 2 , move v0 - 6 , v0 + 4  decode:( move 0 - ua , 4 ; move 5 , 5 ) 
[10095] c:0 is:( move ua , move 3 , ul ; move ua , 4 )  decode:( move 3 - ua , ul ; move ua , 4 ) 
[10096] c:0 is:loop 0 , 6 , move v0 - 2 , 4 + v0  decode:loop 0 , 3 , move 3 - ua , 0 - 9 
[10097] c:0 is:loop 0 , 4 , move 2 , v0 * v0 / 2  decode:loop 0 , 2 , move ua - 2 , v0 + 0 
[10098] c:0 is:loop 0 , 4 , move v0 , 4 + 2 / v0  decode:( move 3 , 6 ; move 3 , 2 ) 
[10099] c:0 is:loop 0 , 4 , move 2 + v0 , v0 / 4  decode:loop 0 , 4 , move ua - 3 , v0 + 9 
[10100] c:0 is:loop 0 , 3 , move v0 + 3 , 4 / v0  decode:loop 0 , 4 , move 3 , 4 - v0 
[10101] c:0 is:loop 0 , 3 , move 4 - v0 , v0 / 2  decode:( move ua , 0 ; move 3 , 4 / 3 ) 
[10102] c:0 is:loop 0 , 4 , move 4 - v0 , v0 * 2  decode:loop 0 , 4 , move ua - 4 , v0 * 2 
[10103] c:0 is:loop 0 , 4 , move v0 + 2 , 4 / v0  decode:0 loop 0 , 3 , move 4 , 4 / 3 0 
[10104] c:0 is:loop 0 , 4 , move v0 + 2 , v0 * 5  decode:loop 0 , 4 , move 3 - ua , 5 / v0 
[10105] c:0 is:loop 0 , 4 , move v0 - 4 , 4 + v0  decode:( move 4 , ul ; move ua , 4 + 4 ) 
[10106] c:0 is:loop 0 , 5 , move v0 - 3 , 3 - v0  decode:loop 0 , 3 , move ua - 4 , 3 / v0 
[10107] c:0 is:loop 0 , 3 , move 4 / v0 , v0 + 4  decode:( move 4 , 4 ; move ua - ul , 5 ) 
[10108] c:0 is:loop 0 , 3 , move v0 + 4 , 4 / v0  decode:loop 0 , 4 , move 4 , 4 / v0 
[10109] c:0 is:loop 0 , 6 , move 2 + v0 , v0 / 3  decode:loop 0 , 4 , move v0 - 7 , 8 
[10110] c:0 is:loop 0 , 4 , move v0 - 4 , v0 + 5  decode:( move ua + 2 , 8 ; move 5 , 4 ) 
[10111] c:0 is:loop 0 , 6 , move 2 - v0 , 2 / v0  decode:( move 2 , ua / 4 ; move ua , 5 ) 
[10112] c:0 is:loop 0 , 3 , move 3 / v0 , v0 / 2  decode:loop 0 , 3 , move 3 / v0 , 2 / 4 
[10113] c:0 is:loop 0 , 4 , move 4 / v0 , v0 - 2  decode:( move ua , ul / 4 ; move 4 , ul ) 
[10114] c:0 is:loop 0 , 4 , move v0 * 3 , v0 / 2  decode:( move 9 , 3 ; move 9 , ua * ua ) 
[10115] c:0 is:loop 0 , 7 , move v0 / 2 , v0 + 2  decode:loop 0 , 3 , move 3 - ua , v0 - 9 
[10116] c:0 is:loop 0 , 4 , move 4 / v0 , 3 + v0  decode:loop 0 , 3 , move 4 , 3 + v0 
[10117] c:0 is:( move 0 - 4 , 0 ; move ua + 2 , 2 )  decode:( move 4 , 2 ; move ua + 2 , 2 ) 
[10118] c:0 is:loop 0 , 3 , move v0 - 5 , 2 / v0  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[10119] c:0 is:loop 0 , 6 , move 4 - v0 , v0 + 3  decode:loop 0 , 3 , move 3 - ua , 3 + v0 
[10120] c:0 is:loop 0 , 4 , move 4 - v0 , 2 / v0  decode:loop 0 , 4 , move ua - 4 , 2 / v0 
[10121] c:0 is:loop 0 , 4 , move v0 * 2 , 3 / v0  decode:0 0 loop 0 , 4 , move 3 , 2 * 3 
[10122] c:0 is:( move 4 , 4 + 9 ; move 4 , 3 / 4 )  decode:( move 4 , 2 / 4 ; move 4 , ul ) 
[10123] c:0 is:( move 4 , 0 ; move ua + 2 , 0 - 2 )  decode:( move 4 , ua / 4 ; move 4 , 2 ) 
[10124] c:0 is:loop 0 , 4 , move 4 - v0 , v0 * 3  decode:( move 5 , 0 ; move 4 , 3 ) 
[10125] c:0 is:( move 0 - 2 , 0 ; move ua + 2 , 4 )  decode:( move 2 , 3 ; move ua + 2 , ul ) 
[10126] c:0 is:loop 0 , 4 , move v0 - 4 , 2 / v0  decode:loop 0 , 4 , move ua - 4 , 2 / v0 
[10127] c:0 is:loop 0 , 3 , move v0 + 4 , v0 * 5  decode:loop 0 , 3 , move ul - ua , 0 - 9 
[10128] c:0 is:loop 0 , 3 , move 4 , v0 + 4 / v0  decode:loop 0 , 3 , move 4 , 4 / v0 
[10129] c:0 is:( move 0 - 3 , 0 ; move ua , 0 - 4 )  decode:loop 0 , 3 , move v0 - 4 , 4 - 3 
[10130] c:0 is:loop 0 , 4 , move 5 / v0 , 2 + v0  decode:loop 0 , 4 , move ua - 3 , 2 + v0 
[10131] c:0 is:loop 0 , 4 , move v0 - 4 , v0 - 4  decode:loop 0 , 4 , move v0 - 4 , 4 * 3 
[10132] c:0 is:loop 0 , 4 , move v0 + 2 , 5 / v0  decode:loop 0 , 4 , move ua - 3 , 4 * v0 
[10133] c:0 is:loop 0 , 6 , move 4 - v0 , 2 - v0  decode:( move 4 , 2 ; move ua + ul , ul ) 
[10134] c:0 is:loop 0 , 3 , move 4 - v0 , 3 / v0  decode:loop 0 , 4 , move 2 , 0 - v0 
[10135] c:0 is:loop 0 , 3 , move 3 / v0 , 2 / v0  decode:loop 0 , 3 , move 3 , 2 
[10136] c:0 is:loop 0 , 3 , move 4 - v0 , 4 * v0  decode:( move 4 , 0 ; move 5 , 2 - 3 ) 
[10137] c:0 is:loop 0 , 4 , move 4 - v0 , 4 - v0  decode:loop 0 , 4 , move 3 , 4 * 4 - v0 
[10138] c:0 is:loop 0 , 4 , move 3 , v0 * v0 - 4  decode:loop 0 , 4 , move 0 - 3 , v0 * 9 
[10139] c:0 is:loop 0 , 4 , move 3 , v0 - v0 / 3  decode:loop 0 , 4 , move 3 , 4 * v0 
[10140] c:0 is:loop 0 , 4 , move 4 - v0 , v0 - 4  decode:loop 0 , 4 , move 4 - ua , 0 - 4 
[10141] c:0 is:( move 0 - 3 , 0 ; move ua + 3 , 2 )  decode:( move 3 , 0 ; move 3 + ua , 2 ) 
[10142] c:0 is:loop 0 , 3 , move 4 / v0 , 3 - v0  decode:loop 0 , 3 , move ua - 3 , 3 - v0 
[10143] c:0 is:loop 0 , 4 , move 3 * v0 , 3 * v0  decode:( move 9 , 9 ; move ua + 3 , 9 ) 
[10144] c:0 is:loop 0 , 7 , move 3 - v0 , v0 + 3  decode:loop 0 , 4 , move 3 , 5 / 2 
[10145] c:0 is:loop 0 , 6 , move 3 - v0 , v0 - 3  decode:loop 0 , 3 , move 3 , 0 - 9 - v0 
[10146] c:0 is:loop 0 , 5 , move 4 / v0 , v0 + 2  decode:loop 0 , 4 , move ua - 3 , 2 + v0 
[10147] c:0 is:loop 0 , 3 , move 4 / v0 , v0 - 3  decode:loop 0 , 3 , move 3 , v0 - 3 
[10148] c:0 is:loop 0 , 4 , move v0 - 4 , 4 - v0  decode:loop 0 , 3 , move 3 - ua , 4 - v0 
[10149] c:0 is:loop 0 , 3 , move 4 , 2 / v0 * v0  decode:loop 0 , 3 , move 4 , ua / 8 
[10150] c:0 is:loop 0 , 3 , move v0 - 4 , v0 / 3  decode:( move 4 , 0 ; move 4 , 2 - 3 ) 
[10151] c:0 is:( move 9 , 4 * 4 ; move 4 , 4 + 4 )  decode:( move 4 , 4 * 4 ; move 9 , 8 ) 
[10152] c:0 is:loop 0 , 3 , move v0 - 4 , 4 * v0  decode:( move 4 , 0 ; move ul - ua , 7 ) 
[10153] c:0 is:loop 0 , 5 , move v0 / 2 , 2 * v0  decode:( move 2 , ul ; move 3 , 2 ) 
[10154] c:0 is:loop 0 , 5 , move v0 * 2 , v0 / 2  decode:loop 0 , 4 , move 5 , 2 * 0 - v0 
[10155] c:0 is:loop 0 , 7 , move 2 - v0 , 2 * v0  decode:loop 0 , 4 , move 3 , 3 * ua 0 - 9 
[10156] c:0 is:loop 0 , 4 , move 3 + v0 , 4 / v0  decode:loop 0 , 4 , move 0 - 4 , 4 + v0 
[10157] c:0 is:loop 0 , 3 , move v0 - 4 , 3 / v0  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[10158] c:0 is:( move 2 , 2 ; move ua + 2 , 0 - 2 )  decode:( move 4 + 2 , 2 ; move 8 , 2 ) 
[10159] c:0 is:loop 0 , 3 , move 4 * v0 , 3 / v0  decode:( move 4 , 6 ; move 2 + 4 , 8 ) 
[10160] c:0 is:loop 0 , 4 , move 5 - v0 , v0 - 4  decode:loop 0 , 4 , move 3 , 7 - v0 
[10161] c:0 is:loop 0 , 7 , move 4 - v0 , 2 - v0  decode:( move 4 , 2 ; move  4 , 4 / 3 ) 
[10162] c:0 is:( move ua , move ul , 4 ; move 4 , ul )  decode:( move 4 , 9 ; move ua + ul , ul ) 
[10163] c:0 is:loop 0 , 4 , move 4 - v0 , v0 / 3  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[10164] c:0 is:loop 0 , 3 , move v0 - 4 , v0 / 4  decode:loop 0 , 4 , move 0 - 2 , v0 / 4 
[10165] c:0 is:loop 0 , 4 , move v0 - 4 , v0 / 3  decode:loop 0 , 4 , move 0 - 2 , v0 / 2 
[10166] c:0 is:loop 0 , 4 , move 4 / v0 , 2 * v0  decode:loop 0 , 4 , move 3 , 2 * v0 
[10167] c:0 is:( move 4 , move ul , ul ; move 3 , ul )  decode:( move 3 , 6 ; move 4 , ul ) 
[10168] c:0 is:loop 0 , 3 , move 5 / v0 , v0 - 3  decode:loop 0 , 3 , move 4 , v0 - 3 
[10169] c:0 is:loop 0 , 4 , move 4 , v0 - 3 / v0  decode:( move ua , 8 ; move ua , ua * ua ) 
[10170] c:0 is:loop 0 , 3 , move 3 , v0 * 4 / v0  decode:loop 0 , 3 , move 3 , v0 / 2 
[10171] c:0 is:loop 0 , 7 , move 3 + v0 , v0 / 2  decode:loop 0 , 4 , move ua + ua , 0 - 1 0 0 2 / 
[10172] c:0 is:loop 0 , 4 , move 2 + v0 , 6 / v0  decode:loop 0 , 3 , move ua - 2 , 0 - v0 
[10173] c:0 is:( move ua , 0 - 3 ; move 3 , 0 - 2 )  decode:( move 3 , 9 / 2 ; move ua , 2 ) 
[10174] c:0 is:loop 0 , 4 , move v0 * 2 , 4 / v0  decode:( move ua + ul , ua ; move 5 , 5 ) 
[10175] c:0 is:( move 3 , 2 ; move ua + 2 , 0 - 2 )  decode:( move 2 + ua , 2 ; move 3 , 2 ) 
[10176] c:0 is:loop 0 , 7 , move v0 - 2 , v0 * 3  decode:loop 0 , 4 , move 3 , 4 * v0 
[10177] c:0 is:loop 0 , 5 , move 3 / 2 , v0 * v0  decode:( move 3 , 0 ; move 4 , 9 ) 
[10178] c:0 is:loop 0 , 4 , move v0 - 4 , 3 / v0  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[10179] c:0 is:loop 0 , 4 , move v0 - 4 , 4 * v0  decode:( move 4 , 0 ; move ul - ua , 9 ) 
[10180] c:0 is:( move ua + 2 , 0 ; move 3 , 0 - 4 )  decode:( move 3 , 0 ; move 4 + 3 , 4 ) 
[10181] c:0 is:loop 0 , 4 , move 4 / v0 , 3 - v0  decode:( move 5 , 5 ; move 5 , 0 - 4 ) 
[10182] c:0 is:( move 0 - 4 , 0 ; move ua , 0 - 4 )  decode:( move 4 , : : ua ; move 4 , ul ) 
[10183] c:0 is:( move 3 , 0 - 3 ; move ua , 0 - 2 )  decode:( move ua , 0 - 2 ; move 3 , 2 ) 
[10184] c:0 is:( move ua + 2 , 3 ; move 2 , 0 - 2 )  decode:( move 2 , 2 ; move ua + ul , 2 ) 
[10185] c:0 is:loop 0 , 6 , move 2 - v0 , 3 / v0  decode:( move 5 , 6 ; move 4 , 5 / 2 ) 
[10186] c:0 is:loop 0 , 6 , move v0 / 2 , 2 * v0  decode:loop 0 , 4 , move 2 , 4 + v0 
[10187] c:0 is:loop 0 , 4 , move 3 , v0 / 4 - v0  decode:loop 0 , 4 , move 3 , v0 / 2 
[10188] c:0 is:loop 0 , 3 , move 3 / v0 , v0 / 3  decode:loop 0 , 4 , move 2 , v0 / 3 
[10189] c:0 is:( move 3 , 0 - 2 ; move ua + 2 , 2 )  decode:( move ua + 2 , 0 ; move 3 , 2 ) 
[10190] c:0 is:loop 0 , 5 , move 3 / v0 , v0 + 4  decode:( move 3 , 4 ; move ua , 5 + 4 ) 
[10191] c:0 is:loop 0 , 3 , move 4 / v0 , 2 / v0  decode:loop 0 , 3 , move 3 - ua , 2 
[10192] c:0 is:loop 0 , 5 , move v0 + v0 , 4 * 4  decode:loop 0 , 3 , move ua + v0 , 0 - 0 4 
[10193] c:0 is:( move 4 , move ul , 4 ; move ua , ul )  decode:( move ua , 9 ; move 4 , 5 ) 
[10194] c:0 is:loop 0 , 3 , move 4 - v0 , 4 / v0  decode:loop 0 , 4 , move 4 - ua , 4 / v0 
[10195] c:0 is:loop 0 , 4 , move v0 - 4 , 5 - v0  decode:loop 0 , 3 , move 3 - ua , v0 + 2 
[10196] c:0 is:( move 4 - 9 , 4 ; move 4 , 4 * 4 )  decode:( move 4 , ul ; move 4 , 2 / ua ) 
[10197] c:0 is:( move 0 - 4 , 0 ; move ua + 3 , 2 )  decode:( move 4 , 0 ; move 3 + ua , 2 ) 
[10198] c:0 is:loop 0 , 6 , move 3 - v0 , v0 * 3  decode:loop 0 , 3 , move 0 - 3 , v0 * 2 
[10199] c:0 is:( move ua + 2 , 0 - 2 ; move 3 , 2 )  decode:( move 3 , 0 ; move 9 , 2 ) 
[10200] c:0 is:loop 0 , 4 , move 3 , v0 - 4 / v0  decode:loop 0 , 3 , move 4 , 4 / v0 
[10201] c:0 is:loop 0 , 7 , move v0 - 3 , 4 + v0  decode:loop 0 , 3 , move ua - 3 , v0 + 4 
[10202] c:0 is:loop 0 , 4 , move 4 - v0 , 4 * v0  decode:loop 0 , 3 , move 3 , 4 * 4 / v0 
[10203] c:0 is:loop 0 , 7 , move v0 - 2 , 4 - v0  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[10204] c:0 is:( move 0 - ua , 0 ; move 4 , 0 - 4 )  decode:( move 4 , 0 ; move 5 , 2 - 3 ) 
[10205] c:0 is:loop 0 , 7 , move v0 / 2 , 3 + v0  decode:loop 0 , 3 , move 4 , 0 - 4 
[10206] c:0 is:loop 0 , 4 , move 4 / v0 , v0 - 3  decode:loop 0 , 3 , move 4 , v0 - 3 
[10207] c:0 is:loop 0 , 5 , move 2 - v0 , 4 / v0  decode:( move 3 , 2 ; move 3 , 4 ) 
[10208] c:0 is:loop 0 , 7 , move 3 - v0 , 3 - v0  decode:0 loop 0 , 4 , move 3 , 3 
[10209] c:0 is:loop 0 , 3 , move v0 + 3 , 9 + v0  decode:loop 0 , 3 , move ua - 2 , 3 / v0 
[10210] c:0 is:( move 3 , 0 ; move ua + 2 , 0 - 4 )  decode:( move 3 , 0 ; move ua , 4 / 3 ) 
[10211] c:0 is:( move 9 , 2 / 4 ; move 4 , 4 / 3 )  decode:( move 4 , 4 / ua ; move 9 , 5 ) 
[10212] c:0 is:( move 4 , 2 ; move ua + 2 , 0 - 2 )  decode:( move 2 - ua , 2 ; move 5 , 2 ) 
[10213] c:0 is:( move ua + 2 , 3 ; move 3 , 0 - 2 )  decode:( move 3 , 4 ; move ua + 2 , 2 ) 
[10214] c:0 is:loop 0 , 7 , move 4 / v0 , v0 + 2  decode:loop 0 , 4 , move ua - 3 , 2 * 2 
[10215] c:0 is:loop 0 , 7 , move v0 / 3 , 3 + v0  decode:( move 3 , 2 / 3 ; move 4 , 9 ) 
[10216] c:0 is:loop 0 , 3 , move 4 , v0 * 4 / v0  decode:loop 0 , 4 , move 3 - ua , v0 / 2 
[10217] c:0 is:loop 0 , 7 , move 3 - v0 , 2 / v0  decode:( move 4 , 2 ; move ua , ua / 4 ) 
[10218] c:0 is:loop 0 , 4 , move v0 - 4 , v0 * 5  decode:loop 0 , 3 , move 3 - ua , v0 * 5 
[10219] c:0 is:loop 0 , 4 , move v0 - 4 , v0 / 4  decode:loop 0 , 4 , move 0 - 2 , v0 / 4 
[10220] c:0 is:loop 0 , 6 , move 3 - v0 , v0 / 3  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[10221] c:0 is:( move ua - 3 , 0 ; move 2 , 0 - 4 )  decode:( move 3 , 2 - 3 ; move 2 , 4 ) 
[10222] c:0 is:loop 0 , 4 , move 4 / v0 , 2 / v0  decode:loop 0 , 4 , move 3 , 2 / v0 
[10223] c:0 is:loop 0 , 5 , move 4 / v0 , 3 - v0  decode:loop 0 , 3 , move 2 - ua , 3 - v0 
[10224] c:0 is:loop 0 , 4 , move 3 / v0 , v0 / 3  decode:( move 3 , 0 ; move 5 , 4 / ua ) 
[10225] c:0 is:loop 0 , 4 , move 4 / v0 , v0 - 4  decode:loop 0 , 4 , move 3 , 4 * v0 
[10226] c:0 is:( move 2 - ua , 0 ; move 3 , 0 - 4 )  decode:( move 3 , 2 - 3 ; move 4 , ul ) 
[10227] c:0 is:( move ua , 0 - 3 ; move 4 , 0 - 2 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[10228] c:0 is:loop 0 , 7 , move v0 - 4 , v0 + 4  decode:( move 2 - ua , 4 ; move 9 , 5 ) 
[10229] c:0 is:loop 0 , 6 , move 3 / v0 , v0 - 3  decode:0 loop 0 , 3 , move 0 - 3 , 4 * 3 
[10230] c:0 is:loop 0 , 6 , move 4 - v0 , v0 * 3  decode:loop 0 , 3 , move 3 - ua , 3 
[10231] c:0 is:loop 0 , 6 , move v0 - 3 , v0 * 4  decode:loop 0 , 4 , move 4 - ua , 4 / v0 
[10232] c:0 is:loop 0 , 4 , move 3 / v0 , 4 * v0  decode:loop 0 , 3 , move 3 , 4 * v0 
[10233] c:0 is:loop 0 , 4 , move v0 - 4 , 4 / v0  decode:loop 0 , 3 , move 3 , 4 - v0 
[10234] c:0 is:( move 4 , 0 - 2 ; move ua + 2 , 2 )  decode:( move 4 , 0 - 2 ; move 4 , 2 ) 
[10235] c:0 is:loop 0 , 6 , move v0 - 2 , v0 / 4  decode:loop 0 , 4 , move 2 , v0 + 4 
[10236] c:0 is:( move ua + 2 , 0 ; move 4 , 0 - 4 )  decode:( move 9 , 0 ; move 4 , 0 - 4 ) 
[10237] c:0 is:loop 0 , 7 , move v0 - 3 , v0 - 4  decode:loop 0 , 3 , move 4 , 0 - 4 
[10238] c:0 is:( move ua + 2 , 0 - 3 ; move 3 , 2 )  decode:( move 2 , 2 ; move ua , 0 - 2 ) 
[10239] c:0 is:loop 0 , 4 , move 4 / v0 , v0 / 2  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[10240] c:0 is:( move 4 , 0 - 3 ; move ua , 0 - 2 )  decode:( move 4 , 0 - 2 ; move 4 , 2 ) 
[10241] c:0 is:loop 0 , 6 , move v0 / 2 , v0 - 4  decode:( move ul - ua , 9 ; move 3 , 4 ) 
[10242] c:0 is:( move 4 + 3 , 0 ; move ua + 2 , 2 )  decode:( move ua + ul , 0 ; move 8 , 2 ) 
[10243] c:0 is:loop 0 , 4 , move 4 / v0 , 4 - v0  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[10244] c:0 is:loop 0 , 7 , move v0 / 2 , 2 * v0  decode:loop 0 , 3 , move ua - 3 , v0 - 9 
[10245] c:0 is:( move 3 - ua , 0 ; move 4 , 0 - 2 )  decode:loop 0 , 2 , move 3 - ua , v0 - 2 
[10246] c:0 is:loop 0 , 4 , move 4 / v0 , 3 * v0  decode:( move ul - ua , 0 ; move 4 , 6 ) 
[10247] c:0 is:loop 0 , 4 , move 4 , v0 * 4 * v0  decode:loop 0 , 4 , move 4 , 0 - v0 * 4 
[10248] c:0 is:loop 0 , 3 , move 4 / v0 , 3 / v0  decode:loop 0 , 4 , move 3 , 3 - v0 
[10249] c:0 is:( move 2 , 0 - 2 ; move ua + 2 , 4 )  decode:( move 2 , 0 - 2 ; move 9 , 4 ) 
[10250] c:0 is:( move ua + 2 , 4 ; move 3 , 0 - 2 )  decode:( move ua + 3 , 4 ; move 2 , 2 ) 
[10251] c:0 is:( move 3 , 4 ; move ua + 2 , 0 - 2 )  decode:( move ua + 2 , 3 ; move 3 , 2 ) 
[10252] c:0 is:( move 0 - 4 , 3 ; move ua + 2 , 2 )  decode:( move 4 , 0 ; move 9 , ul ) 
[10253] c:0 is:loop 0 , 4 , move 4 / v0 , 3 / v0  decode:loop 0 , 4 , move 3 , 3 / v0 
[10254] c:0 is:( move 0 - 2 , 4 ; move 2 - ua , 2 )  decode:( move 2 , 4 ; move 4 , 2 ) 
[10255] c:0 is:loop 0 , 4 , move 3 / v0 , v0 / 4  decode:( move 2 , 0 ; move ua , 2 / 4 ) 
[10256] c:0 is:loop 0 , 7 , move v0 - 3 , 3 / v0  decode:( move 4 , 0 ; move ua , 7 * 4 ) 
[10257] c:0 is:loop 0 , 6 , move 4 - v0 , 4 * v0  decode:loop 0 , 3 , move ua - 2 , v0 * 4 
[10258] c:0 is:loop 0 , 6 , move 3 / v0 , 2 / v0  decode:loop 0 , 4 , move 4 - ua , v0 + 2 
[10259] c:0 is:loop 0 , 6 , move 3 / v0 , v0 - 4  decode:loop 0 , 4 , move ua - 4 , 9 / v0 
[10260] c:0 is:( move 3 - ua , 0 ; move 3 , 0 - 4 )  decode:loop 0 , 3 , move ua - 4 , 3 - v0 
[10261] c:0 is:loop 0 , 6 , move v0 - 4 , v0 / 3  decode:loop 0 , 4 , move 0 - 3 , v0 / 3 
[10262] c:0 is:( move ua , 0 - 3 ; move 2 , 2 - 3 )  decode:( move 2 , 2 - 3 ; move ua , ul ) 
[10263] c:0 is:loop 0 , 6 , move 3 / v0 , 4 - v0  decode:loop 0 , 4 , move 4 - ua , 4 - v0 
[10264] c:0 is:loop 0 , 7 , move 4 / v0 , 2 - v0  decode:( move 4 , 2 ; move dmove 3 , 4 ) 
[10265] c:0 is:loop 0 , 7 , move v0 - 2 , v0 / 4  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[10266] c:0 is:loop 0 , 3 , move v0 + 3 , 8 / v0  decode:loop 0 , 3 , move ua - 2 , 0 - 9 
[10267] c:0 is:loop 0 , 7 , move 4 - v0 , 2 / v0  decode:loop 0 , 3 , move v0 - ua , ua * ua 
[10268] c:0 is:( move ua , 3 ; move 3 + 3 , 0 - 2 )  decode:( move 0 - ua , ul ; move ua , 2 ) 
[10269] c:0 is:loop 0 , 7 , move v0 / 3 , v0 * 2  decode:( move 3 , ul / 3 ; move 4 , 4 ) 
[10270] c:0 is:( move 0 - 3 , 3 ; move ua , 0 - 4 )  decode:( move ua , ua / 3 ; move 3 , ul ) 
[10271] c:0 is:loop 0 , 4 , move 4 / v0 , 4 * v0  decode:loop 0 , 4 , move 3 , 4 * v0 
[10272] c:0 is:loop 0 , 7 , move v0 - 4 , 2 / v0  decode:loop 0 , 3 , move v0 + 4 , 0 - 8 
[10273] c:0 is:loop 0 , 7 , move v0 - 3 , v0 / 3  decode:loop 0 , 4 , move 0 - 3 , v0 * 4 
[10274] c:0 is:loop 0 , 7 , move 4 / v0 , v0 + 3  decode:loop 0 , 4 , move 3 - ua , v0 + 3 
[10275] c:0 is:loop 0 , 6 , move 4 / v0 , 2 * v0  decode:loop 0 , 3 , move ua - 2 , v0 * 2 
[10276] c:0 is:( move 3 , 2 ; move ua + 2 , 0 - 4 )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[10277] c:0 is:( move ua + 2 , 0 - 4 ; move 3 , 2 )  decode:( move 9 , 0 - 4 ; move 3 , 2 ) 
[10278] c:0 is:( move 4 , 0 - 2 ; move 0 - 3 , ul )  decode:loop 0 , 2 , move 3 - ua , 0 - 2 
[10279] c:0 is:loop 0 , 6 , move 4 - v0 , v0 / 3  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[10280] c:0 is:loop 0 , 4 , move 3 + v0 , 7 / v0  decode:loop 0 , 3 , move ua + ul , 7 / v0 
[10281] c:0 is:( move 9 , 4 - 9 ; move 3 + 4 , 4 )  decode:( move 9 , 4 / 5 ; move ua , 4 ) 
[10282] c:0 is:loop 0 , 6 , move v0 / 3 , v0 - 4  decode:( move 2 , 9 ; move 3 , 3 / 2 ) 
[10283] c:0 is:( move ua + 2 , 0 - 3 ; move 2 , 4 )  decode:( move 2 , 1 ; move 8 , 4 / 3 ) 
[10284] c:0 is:loop 0 , 5 , move 4 / v0 , v0 - 4  decode:0 loop 0 , 4 , move 3 , 0 - 4 0 
[10285] c:0 is:( move 2 , 4 + 3 ; move 0 - ua , 2 )  decode:( move 2 , ul ; move ua , ua * ua ) 
[10286] c:0 is:( move ua + 3 , 2 ; move 4 , 0 - 2 )  decode:( move 9 , 2 ; move 4 , 0 - 2 ) 
[10287] c:0 is:( move ua + 2 , 0 - 3 ; move 4 , 2 )  decode:( move ua + 2 , 0 ; move 4 , 2 ) 
[10288] c:0 is:( move 2 - ua , 0 ; move 4 , 0 - 4 )  decode:( move 4 , : -  - move 4 , 4 ) 
[10289] c:0 is:( move 4 + 3 , 0 - 2 ; move ua , 2 )  decode:( move 5 , 0 ; move ua , 0 - 2 ) 
[10290] c:0 is:loop 0 , 4 , move v0 - 4 , 5 / v0  decode:loop 0 , 3 , move 3 - ua , v0 - 9 
[10291] c:0 is:( move 0 - 3 , 3 ; move 2 - ua , 2 )  decode:( move 3 , 0 ; move 4 , 2 ) 
[10292] c:0 is:( move 4 , 0 - 3 ; move ua + 2 , 2 )  decode:( move 4 , 0 - 4 ; move 8 , 2 ) 
[10293] c:0 is:loop 0 , 4 , move 4 / v0 , v0 / 3  decode:( move 4 + 4 , 0 ; move 4 , ul ) 
[10294] c:0 is:loop 0 , 7 , move 4 - v0 , 3 * v0  decode:0 loop 0 , 4 , move 3 , 3 
[10295] c:0 is:( move 0 - ua , 0 - 3 ; move 3 , 4 )  decode:( move 3 , ul ; move ua , 2 / 3 ) 
[10296] c:0 is:( move ua + 2 , 2 - 3 ; move 3 , 2 )  decode:( move 3 , ul ; move 8 , 2 ) 
[10297] c:0 is:loop 0 , 6 , move v0 / 3 , 3 / v0  decode:loop 0 , 4 , move v0 , 3 / 2 
[10298] c:0 is:loop 0 , 7 , move v0 / 3 , 3 * v0  decode:loop 0 , 4 , move 2 , v0 - 4 
[10299] c:0 is:loop 0 , 7 , move 3 - v0 , 4 / v0  decode:loop 0 , 4 , move ua - 4 , 0 - v0 
[10300] c:0 is:loop 0 , 7 , move v0 / 2 , 3 / v0  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[10301] c:0 is:loop 0 , 4 , move 3 / v0 , v0 + 8  decode:loop 0 , 3 , move 3 , v0 + 8 
[10302] c:0 is:loop 0 , 6 , move 4 / v0 , v0 * 3  decode:loop 0 , 4 , move 3 - ua , 3 
[10303] c:0 is:loop 0 , 7 , move v0 / 3 , 4 - v0  decode:loop 0 , 4 , move 2 , 4 v0 * v0 
[10304] c:0 is:loop 0 , 7 , move v0 / 2 , v0 * 4  decode:( move 4 , 2 - 3 ; move ua , 2 ) 
[10305] c:0 is:loop 0 , 5 , move 3 / v0 , v0 / 4  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[10306] c:0 is:loop 0 , 4 , move 4 / v0 , 4 / v0  decode:loop 0 , 4 , move 3 - ua , 4 / v0 
[10307] c:0 is:( move 3 + 2 , 0 ; move 3 + 4 , ul )  decode:( move 5 , 0 ; move ua + ul , ul ) 
[10308] c:0 is:( move 3 , 0 ; move ua + 4 , 2 - 3 )  decode:( move 3 , 0 ; move 4 + 4 , ul ) 
[10309] c:0 is:( move 5 , 0 - 3 ; move ua + 2 , 2 )  decode:( move 5 , 0 - 4 ; move 8 , 2 ) 
[10310] c:0 is:( move ua + 2 , 0 - 3 ; move 3 , 4 )  decode:( move 3 , 5 ; move ua , 0 - 4 ) 
[10311] c:0 is:( move 4 , 0 - 3 ; move ua + 3 , 2 )  decode:( move 4 , 0 - 3 ; move 3 , 2 ) 
[10312] c:0 is:( move 3 , 0 - 2 ; move 2 - ua , 4 )  decode:( move 3 , 0 - 2 ; move 5 , ul ) 
[10313] c:0 is:( move 3 , 0 - 2 ; move ua + 3 , 4 )  decode:( move 3 , 0 - 2 ; move 9 , 4 ) 
[10314] c:0 is:loop 0 , 7 , move 4 / v0 , v0 - 3  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[10315] c:0 is:( move 3 + 3 , 2 ; move ua + 2 , 3 )  decode:( move 8 , 2 ; move ua + 2 , 3 ) 
[10316] c:0 is:( move 0 - 2 + ua , 2 ; move 4 , 4 )  decode:( move ua + ul , 2 ; move 4 , ul ) 
[10317] c:0 is:( move 2 - ua , 3 ; move 4 , 0 - 2 )  decode:( move 0 - 4 , ul ; move 5 , 2 ) 
[10318] c:0 is:( move 3 , 2 - 3 ; move ua + 2 , 2 )  decode:( move ua , ul ; move 3 , 0 - 2 ) 
[10319] c:0 is:( move 0 - ua , 0 ; move 3 , 3 * 4 )  decode:( move ua , 0 - 3 ; move 9 , 9 ) 
[10320] c:0 is:( move 3 - ua , 0 ; move 4 , 0 - 4 )  decode:( move 3 , 0 - 3 ; move 4 , ul ) 
[10321] c:0 is:( move 0 - ua , 2 - 3 ; move 4 , 2 )  decode:( move 4 , ua / 3 ; move 4 , 2 ) 
[10322] c:0 is:( move 0 - ua , 0 - 3 ; move 4 , 4 )  decode:( move 5 , ul ; move ua , 2 / 3 ) 
[10323] c:0 is:( move 4 , 0 - 3 ; move 2 - ua , 2 )  decode:( move 4 , 0 - 3 ; move 4 , 2 ) 
[10324] c:0 is:( move 0 - 4 , 0 - 2 ; move 4 , ul )  decode:( move 4 , 2 / 4 ; move 4 , 2 ) 
[10325] c:0 is:( move 0 - 4 , 3 ; move 0 - ua , 4 )  decode:( move 4 , 6 ; move ua , 0 - 4 ) 
[10326] c:0 is:( move ua , 2 - 3 ; move 3 , 0 - 4 )  decode:( move 3 , 0 - 2 ; move ua , 4 ) 
[10327] c:0 is:( move 0 - 4 , 0 - 3 ; move 4 , ul )  decode:( move 4 , ul / 4 ; move 4 , 4 ) 
[10328] c:0 is:( move 0 - ua , 2 / 4 ; move 2 , 2 )  decode:( move ua , 9 + 4 ; move 2 , ul ) 
[10329] c:0 is:( move 3 + 3 , 0 - 2 ; move 4 , ul )  decode:( move ua , 0 - 2 ; move 4 , ul ) 
[10330] c:0 is:( move 3 , 3 ; move ua + 2 , 2 - 3 )  decode:( move ua + ul , 3 ; move 3 , ul ) 
[10331] c:0 is:loop 0 , 4 , move 4 / v0 , 7 - v0  decode:( move 3 , 8 ; move 8 , 4 + 4 ) 
[10332] c:0 is:loop 0 , 7 , move v0 / 3 , 4 * v0  decode:( move 4 , 6 ; move 3 , 4 ) 
[10333] c:0 is:( move 0 - 3 , 4 ; move ua + 3 , 3 )  decode:( move 4 , 3 * move ua , 3 + 2 ) 
[10334] c:0 is:( move 2 , 4 + 3 ; move ua + 3 , 2 )  decode:( move 3 , ul - move 3 + ua , 2 ) 
[10335] c:0 is:( move ua , 0 ; move 0 - 3 , 4 / 3 )  decode:( move ua , 4 / 5 ; move ua , 5 ) 
[10336] c:0 is:( move 0 - 3 , 0 ; move ua , 4 / 3 )  decode:( move 3 , 0 ; move ua , 4 / 3 ) 
[10337] c:0 is:( move 4 , 2 ; move ua + 3 , 0 - 4 )  decode:( move 4 , 2 ; move 9 , 0 - 4 ) 
[10338] c:0 is:( move 0 - 4 , 4 ; move 2 - ua , 2 )  decode:( move 4 , 4 ; move 4 , 2 ) 
[10339] c:0 is:( move 0 - ua , 0 ; move 4 , 4 * 3 )  decode:( move ua , 0 ; move 4 , 9 ) 
[10340] c:0 is:( move ua + 2 , 0 - 3 ; move 4 , 4 )  decode:( move 9 , 0 - 3 ; move 4 , 4 ) 
[10341] c:0 is:( move 4 , 2 - 3 ; move ua + 2 , 2 )  decode:( move 4 , 2 - 3 ; move 2 , 2 ) 
[10342] c:0 is:( move 3 - ua , 0 - 3 ; move 4 , 2 )  decode:loop 0 , 3 , move 3 , v0 - 3 
[10343] c:0 is:( move 3 , 4 ; move ua + 2 , 0 - 4 )  decode:( move ua + 2 , 3 ; move 3 , 4 ) 
[10344] c:0 is:loop 0 , 7 , move 4 - v0 , 4 / v0  decode:loop 0 , 4 , move 3 , 4 + v0 / 2 
[10345] c:0 is:loop 0 , 7 , move v0 / 3 , 3 / v0  decode:loop 0 , 4 , move v0 , v0 / v0 
[10346] c:0 is:( move ua + 2 , 0 ; move 5 / 2 , 2 )  decode:( move ua + 2 , 0 ; move 3 , 2 ) 
[10347] c:0 is:loop 0 , 6 , move 3 / v0 , 4 / v0  decode:loop 0 , 3 , move 3 - ua , 4 / v0 
[10348] c:0 is:( move 4 + 3 , 2 ; move ua + 3 , 2 )  decode:( move ua , 2 ; move ua + 3 , 2 ) 
[10349] c:0 is:( move 3 , 3 / 2 ; move ua , 0 - 2 )  decode:( move ua , 9 ; move 3 , 2 ) 
[10350] c:0 is:( move ua + 2 , 4 ; move 3 + 3 , 2 )  decode:( move ua + 2 , 4 ; move ua , 2 ) 
[10351] c:0 is:( move 3 , 0 - 4 ; move ua + 2 , 4 )  decode:( move 3 , 0 ; move ua + 2 , 4 ) 
[10352] c:0 is:( move 4 , 0 - 4 ; move ua + 3 , 2 )  decode:( move 4 , 0 - 4 ; move 9 , 2 ) 
[10353] c:0 is:loop 0 , 7 , move v0 - 4 , 4 / v0  decode:loop 0 , 3 , move 2 - ua , 4 + v0 
[10354] c:0 is:loop 0 , 4 , move v0 - 4 , 7 / v0  decode:( move 4 , 4 ; move ua , 0 - 8 ) 
[10355] c:0 is:( move 2 - ua , 4 ; move 4 , 0 - 2 )  decode:( move 4 , 2 ; move 4 , 2 ) 
[10356] c:0 is:loop 0 , 4 , move v0 * 3 , 7 / v0  decode:loop 0 , 3 , move ua + 2 , 4 
[10357] c:0 is:( move 4 , 0 - 4 ; move 0 - 3 , ul )  decode:( move 3 , 0 - 4 ; move 3 , 4 ) 
[10358] c:0 is:( move 3 , 0 - 4 ; move ua , 2 - 3 )  decode:( move ua , 0 - 2 ; move 3 , ul ) 
[10359] c:0 is:( move 5 , 0 ; move 2 - ua , 2 - 3 )  decode:( move 4 , 0 ; move 5 , 0 - 2 ) 
[10360] c:0 is:( move 3 , 2 ; move 0 - ua , 4 * 3 )  decode:( move 3 , 2 ; move ua , 9 ) 
[10361] c:0 is:( move ua + 3 , 2 / 3 ; move 2 , 2 )  decode:( move 2 , 6 ; move ua + 2 , 2 ) 
[10362] c:0 is:( move 0 - ua , 3 ; move 4 + 2 , 5 )  decode:( move ul - ua , 3 ; move ua , 5 ) 
[10363] c:0 is:( move 4 , 0 - 2 ; move ua , 3 / 2 )  decode:( move ua , 9 ; move 2 - ua , 8 ) 
[10364] c:0 is:( move ua , 0 - 3 ; move 2 , 4 * 3 )  decode:( move 3 , 0 ; move ua , ul / 4 ) 
[10365] c:0 is:( move 4 , 2 - 3 ; move ua , 0 - 4 )  decode:( move ua , 0 - 2 ; move 4 , 4 ) 
[10366] c:0 is:( move ua , 0 - 2 ; move 3 , 4 * 3 )  decode:loop 0 , 3 , move 3 , 4 / ua 
[10367] c:0 is:( move ua , 3 / 2 ; move 0 - 4 , 2 )  decode:( move ua , 0 - 2 ; move 4 , ul ) 
[10368] c:0 is:( move 3 - ua , 2 ; move 4 , 0 - 4 )  decode:( move 3 , 4 * 4 ; move 4 , 7 ) 
[10369] c:0 is:( move 0 - 4 , 4 ; move ua , 4 + 2 )  decode:( move 4 , 4 ; move ua , 4 * 4 ) 
[10370] c:0 is:( move ua , 0 - 3 ; move 3 , 2 / 3 )  decode:loop 0 , 3 , move 0 - 3 , v0 / 4 
[10371] c:0 is:( move 0 - 4 , 2 ; move ua , 3 / 2 )  decode:( move 4 , 2 ; move ua , 3 / 2 ) 
[10372] c:0 is:( move 2 - ua , 2 ; move 4 , 4 + 2 )  decode:( move 4 , 0 - 3 ; move 4 , 9 ) 
[10373] c:0 is:( move ua , 0 - 4 ; move 4 + 4 , 2 )  decode:loop 0 , 3 , move v0 - ua , 0 - 2 
[10374] c:0 is:( move 0 - 3 , 4 ; move ua + 2 , 5 )  decode:( move 3 , 7 ; move ua + 2 , 2 ) 
[10375] c:0 is:( move ua , 0 - 2 / 4 ; move 3 , 2 )  decode:( move 3 , 4 * 3 ; move ua , 2 ) 
[10376] c:0 is:( move 4 * 2 , 0 ; move 2 , ua - 4 )  decode:( move ua + 2 , 0 ; move 2 , 4 ) 
[10377] c:0 is:( move 2 , 2 / ua ; move 4 + 2 , 2 )  decode:( move 2 , 2 / ua ; move ua , 2 ) 
[10378] c:0 is:( move 4 , 0 - 3 ; move ua - 2 , 4 )  decode:( move 4 , 0 - 3 ; move 4 , 4 ) 
[10379] c:0 is:( move 0 - ua , 0 ; move 4 , 4 / 3 )  decode:( move ua , 0 - 3 ; move 5 , 5 ) 
[10380] c:0 is:( move 0 - 4 , 0 - 4 ; move 4 , ul )  decode:( move 4 , 2 - 4 ; move 4 , 4 ) 
[10381] c:0 is:( move 4 , 0 ; move 2 - ua , 3 - 4 )  decode:( move 4 , 0 ; move 4 , ua / 3 ) 
[10382] c:0 is:( move 2 - ua , 0 ; move 3 , 4 * 3 )  decode:( move 2 - ua , 0 ; move 3 , 7 ) 
[10383] c:0 is:( move 4 + 3 , 0 ; move ua + 4 , 4 )  decode:( move 0 - ua , 0 ; move ua , 4 ) 
[10384] c:0 is:( move ua , 2 - 3 ; move 4 , 0 - 4 )  decode:( move 4 , 0 - 2 ; move ua , 4 ) 
[10385] c:0 is:( move ua , 0 - 4 ; move 4 , 2 - 3 )  decode:( move 4 , 9 / 2 ; move ua , ul ) 
[10386] c:0 is:( move 3 , 2 - 3 ; move ua + 4 , 2 )  decode:( move ua + 4 , ul ; move 2 , 2 ) 
[10387] c:0 is:( move 0 - 3 , 2 ; move ua , 2 / 4 )  decode:( move 3 , 6 ; move ua , 9 ) 
[10388] c:0 is:( move 0 - 3 , 2 ; move ua , 4 * 3 )  decode:( move 3 , 2 ; move ua , 5 * 2 ) 
[10389] c:0 is:loop 0 , 7 , move v0 / 3 , 4 / v0  decode:loop 0 , 3 , move 4 - ua , v0 - 4 
[10390] c:0 is:( move 4 + 3 , 2 ; move ua + 2 , 4 )  decode:( move ua + ul , 2 ; move 8 , 4 ) 
[10391] c:0 is:( move 3 + 3 , 2 ; move ua , 3 + 4 )  decode:( move ua , 2 ; move ua , 4 / 4 ) 
[10392] c:0 is:( move 2 , 4 * 3 ; move ua + 2 , 2 )  decode:( move 2 , 3 * 2 ; move 8 , 2 ) 
[10393] c:0 is:( move 3 , 2 ; move 0 - ua , 2 / 4 )  decode:( move 3 , 2 ; move ua , 5 * 2 ) 
[10394] c:0 is:( move 4 , 2 - 3 ; move 2 - ua , 2 )  decode:( move 4 , 2 - 3 ; move 4 , 5 ) 
[10395] c:0 is:( move 0 - 7 , 2 ; move 2 - ua , 2 )  decode:( move ua + ul , 0 ; move 4 , 2 ) 
[10396] c:0 is:( move 2 , 2 / 4 ; move ua + 2 , 2 )  decode:( move 2 , 4 / 3 ; move 9 , 2 ) 
[10397] c:0 is:( move 4 , 3 / 2 ; move ua , 0 - 2 )  decode:( move ua , 9 ; move 4 , 2 ) 
[10398] c:0 is:( move 3 , 0 - 3 ; move ua + 4 , 4 )  decode:( move 3 , 0 ; move ua + 4 , 4 ) 
[10399] c:0 is:( move 2 - ua , 0 - 3 ; move 4 , 4 )  decode:( move 4 , 0 ; move 4 , ul ) 
[10400] c:0 is:( move 2 , 0 ; move 4 + 2 , 4 / ua )  decode:( move 2 , 0 ; move ua , 4 / ua ) 
[10401] c:0 is:( move 0 - ua , 2 ; move 4 , 2 / 3 )  decode:( move ua , 2 ; move 4 , 8 ) 
[10402] c:0 is:( move 3 , 2 - 3 ; move ua + 2 , 4 )  decode:( move 3 , 0 ; move ua + 2 , 4 ) 
[10403] c:0 is:( move 0 - 3 , 2 ; move 4 + 4 , ul )  decode:( move 3 , 5 ; move ua + 2 , 2 ) 
[10404] c:0 is:( move 0 - ua , 2 - 3 ; move 4 , 4 )  decode:( move ua , ua / 3 ; move 4 , ul ) 
[10405] c:0 is:( move 4 , 2 - 3 ; move ua + 3 , 2 )  decode:( move 3 , ul ; move ua + 3 , 2 ) 
[10406] c:0 is:( move 3 , 0 - 2 ; move ua , 2 / 4 )  decode:( move 3 , 0 - 2 ; move ua , 7 ) 
[10407] c:0 is:( move 5 , 2 - 3 ; move ua , 0 - 4 )  decode:( move ua , 2 - 2 ; move 5 , 4 ) 
[10408] c:0 is:( move 4 , 3 / 2 ; move ua + 2 , 2 )  decode:( move 4 , ua / 4 ; move 8 , 2 ) 
[10409] c:0 is:( move 5 + 2 , ua - 3 ; move 3 , 2 )  decode:( move ua , 0 - 3 ; move 3 , 2 ) 
[10410] c:0 is:( move ua , 3 / 0 - 2 ; move 5 , 2 )  decode:( move ua , 9 + 2 ; move 5 , 2 ) 
[10411] c:0 is:( move 4 , 2 ; move 0 - ua , 4 * 3 )  decode:( move 4 , 2 ; move ua , 9 ) 
[10412] c:0 is:( move 2 , 2 / 4 ; move 2 - ua , 2 )  decode:( move 2 , 4 / ua ; move 4 , 5 ) 
[10413] c:0 is:( move 3 , 2 / 3 ; move ua , 0 - 4 )  decode:( move ua , 6 ; move 3 , 0 - 4 ) 
[10414] c:0 is:( move 0 - ua , 2 ; move 4 , 2 / 4 )  decode:( move ua , 5 ; move 4 ,  / 4 ) 
[10415] c:0 is:( move 4 + 3 , 4 ; move ua + 3 , 2 )  decode:( move ua + ul , 4 ; move 9 , 2 ) 
[10416] c:0 is:( move 4 , 0 - 2 ; move ua , 4 * 3 )  decode:loop 0 , 3 , move 3 , ua / ua + 4 
[10417] c:0 is:( move 0 - ua , 3 ; move 3 , 4 * 3 )  decode:( move ua , 0 ; move 3 , 5 * 3 ) 
[10418] c:0 is:( move ua + 2 , 2 / 3 ; move 4 , 2 )  decode:( move 9 , 4 / 3 ; move 4 , 2 ) 
[10419] c:0 is:( move 4 , 4 + 3 ; move ua , 0 - 4 )  decode:( move ua , 6 ; move 4 , 0 - 4 ) 
[10420] c:0 is:( move ua + 2 , 2 / 4 ; move 3 , 2 )  decode:( move ua + 2 , 3 ; move 3 , 2 ) 
[10421] c:0 is:( move 4 , 2 - 3 ; move ua + 2 , 4 )  decode:( move 4 , 2 - 3 ; move 9 , 4 ) 
[10422] c:0 is:( move 4 , 0 ; move ua + 2 , 4 / 3 )  decode:( move 4 , 0 ; move 9 , 3 / 2 ) 
[10423] c:0 is:( move 6 , 0 ; move ua + 2 , 4 + 4 )  decode:( move ua , 0 ; move 9 , ua * ua ) 
[10424] c:0 is:( move ua , 0 - 3 ; move 2 , 4 / 3 )  decode:( move 2 , 3 / 2 ; move ua , 8 ) 
[10425] c:0 is:( move 2 , 4 ; move ua + 2 , 3 / 2 )  decode:( move 2 , 4 ; move 8 , 3 / 2 ) 
[10426] c:0 is:( move 4 , 0 - 3 ; move 3 - ua , 4 )  decode:loop 0 , 4 , move 0 - v0 , v0 
[10427] c:0 is:( move 2 - ua , 0 ; move 3 , 4 * 4 )  decode:( move 2 , ul ; move ua - ul , 7 ) 
[10428] c:0 is:( move 4 , 2 / 4 ; move ua , 0 - 2 )  decode:( move ua , 8 ; move 4 , 2 ) 
[10429] c:0 is:( move 5 , 0 - 3 ; move 4 - ua , 2 )  decode:( move 5 , ul - 4 ; move 3 , 2 ) 
[10430] c:0 is:( move ua , 0 - 2 ; move 4 , 3 * 4 )  decode:loop 0 , 4 , move ul + v0 , ua / ua 
[10431] c:0 is:( move 3 , 0 - 3 ; move ua , 3 * 4 )  decode:( move 2 - ua , 9 ; move 4 , 9 ) 
[10432] c:0 is:( move 3 , 0 - 2 ; move ua , 4 / 3 )  decode:( move 3 , 0 - 2 ; move ua , 8 ) 
[10433] c:0 is:( move 0 - ua , 4 / 3 ; move 3 , 2 )  decode:( move 3 , ul / 4 ; move ua , ul ) 
[10434] c:0 is:( move 0 - ua , 4 + 4 ; move 3 , 4 )  decode:( move ua , 9 + 2 ; move 3 , ul ) 
[10435] c:0 is:( move ua , 0 - 3 ; move 4 , 3 / 2 )  decode:loop 0 , 3 , move 0 - 4 , ua / 4 
[10436] c:0 is:( move ua , 0 - 3 ; move 3 , 3 * 4 )  decode:( move 3 , 9 ; move ua , 4 * 4 ) 
[10437] c:0 is:( move 4 , 3 ; move 2 - ua , 2 - 3 )  decode:( move 4 , 2 ; move 4 , ua / 3 ) 
[10438] c:0 is:( move 2 - ua , 0 ; move 4 , 4 * 3 )  decode:loop 0 , 3 , move 3 , v0 * 9 
[10439] c:0 is:( move ua , 0 - 3 ; move 4 , 2 / 3 )  decode:loop 0 , 3 , move 0 - 3 , v0 / 4 
[10440] c:0 is:( move 0 - ua , 3 ; move 4 , 2 / 3 )  decode:( move ua , 0 ; move 4 , 3 / 4 ) 
[10441] c:0 is:( move 2 - ua , 2 - 3 ; move 3 , 4 )  decode:( move 4 , ua / 3 ; move 3 , ul ) 
[10442] c:0 is:( move ua , 2 / 4 ; move 4 , 0 - 2 )  decode:( move 4 , 8 ; move ua , 2 ) 
[10443] c:0 is:( move 3 , 0 - 4 ; move 3 - ua , 4 )  decode:loop 0 , 3 , move 2 , 0 - v0 
[10444] c:0 is:( move 3 , 0 - 2 ; move ua , 3 / 4 )  decode:( move 3 , 0 - 2 ; move ua , 7 ) 
[10445] c:0 is:( move 0 - 3 , 2 ; move 4 , ul - 4 )  decode:( move ul , 9 / 2 ; move 5 , ul ) 
[10446] c:0 is:( move 0 - 5 , ua ; move 3 + 3 , 4 )  decode:( move 5 , ul / 2 ; move ua , ul ) 
[10447] c:0 is:( move ua , 0 - 4 ; move 4 + 4 , 3 )  decode:( move ua , 0 - 4 ; move 9 , 3 ) 
[10448] c:0 is:( move ua + 2 , 4 * 3 ; move 3 , 2 )  decode:( move 3 , 4 * 3 ; move 8 , 2 ) 
[10449] c:0 is:( move 4 , ua - 2 ; move 3 , 3 + 3 )  decode:( move 3 , ul ; move 4 , 2 / ua ) 
[10450] c:0 is:( move 3 , 4 + 3 ; move ua + 2 , 4 )  decode:( move 3 , 4 / ua ; move 8 , 4 ) 
[10451] c:0 is:( move ua , 0 - 3 ; move 3 , 2 / 4 )  decode:loop 0 , 4 , move 0 - 2 , v0 / 4 
[10452] c:0 is:( move 4 , 4 * 3 ; move 0 - ua , 2 )  decode:( move 4 , 3 * ua ; move ua , ul ) 
[10453] c:0 is:( move 0 - 3 + 4 , 3 ; move 4 , ul )  decode:( move ua + ul , 6 ; move 4 , ul ) 
[10454] c:0 is:( move 9 , 0 ; move ua + 2 , 0 - 4 )  decode:( move 9 , 9 ; move 9 , 0 - 4 ) 
[10455] c:0 is:( move 4 , 0 - 4 ; move 2 - ua , 4 )  decode:( move 4 , 0 ; move 4 , 7 * 4 ) 
[10456] c:0 is:( move 0 - 2 , 3 / ua ; move 4 , 4 )  decode:( move 2 , 0 - 9 ; move 4 , ul ) 
[10457] c:0 is:( move ua , 0 - 3 ; move 3 , 4 * 4 )  decode:( move 3 , 4 * 4 ; move ua , 9 ) 
[10458] c:0 is:( move 4 - ua , 0 ; move 3 , 2 / 4 )  decode:loop 0 , 4 , move 2 / v0 , 4 
[10459] c:0 is:( move 0 - 3 , 4 ; move ua , 2 / 4 )  decode:( move 3 , 4 / 3 ; move ua , 9 ) 
[10460] c:0 is:( move 3 , 4 * 4 ; move ua + 2 , 2 )  decode:( move 3 , 4 * 4 ; move 8 , 2 ) 
[10461] c:0 is:( move 3 , 2 - 3 ; move 3 , 2 / ua )  decode:( move 2 , 0 - 2 ; move 4 , ul ) 
[10462] c:0 is:( move ua , 0 - 3 ; move 3 , 4 / 3 )  decode:( move ua , 0 - 4 ; move 4 , 3 / ) 4 
[10463] c:0 is:( move 3 , 2 / 4 ; move ua , 0 - 4 )  decode:( move ua , 6 ; move 3 , 4 ) 
[10464] c:0 is:( move 4 , 0 - 2 ; move ua , 4 * 4 )  decode:( move ua , ul / 2 ; move 4 , 9 ) 
[10465] c:0 is:( move 3 , 3 / 4 ; move ua + 2 , 2 )  decode:( move 3 , 7 ; move ua + 2 , 2 ) 
[10466] c:0 is:( move 9 , 0 - 3 ; move ua + 2 , 2 )  decode:( move 9 , 0 - 3 ; move 8 , 2 ) 
[10467] c:0 is:( move 4 , 3 * 4 ; move ua + 2 , 2 )  decode:( move 4 , 4 * 3 ; move 8 , 2 ) 
[10468] c:0 is:( move ua + 2 , 3 / 4 ; move 3 , 2 )  decode:( move ua + 2 , 4 ; move 3 , 2 ) 
[10469] c:0 is:( move 0 - 7 , 2 ; move 2 + ul , 4 )  decode:( move 0 - ua , 2 ; move 3 , 4 ) 
[10470] c:0 is:( move 3 , 4 * 3 ; move ua , 0 - 4 )  decode:( move ua , 5 ; move 3 , 4 ) 
[10471] c:0 is:( move ua + 2 , 2 - 3 ; move 5 , 4 )  decode:( move 5 , 0 - 3 ; move 5 , 4 ) 
[10472] c:0 is:( move 3 , 0 - 3 ; move ua , 4 / 3 )  decode:( move ua , 0 - 2 ; move 3 , 5 ) 
[10473] c:0 is:( move 0 - 3 , ul ; move 3 , 4 * 3 )  decode:( move 3 , ul ; move 3 , 9 ) 
[10474] c:0 is:( move ua + 2 , 3 / 2 ; move 3 , 4 )  decode:( move ua + 2 , 3 / move 3 , 4 ) 
[10475] c:0 is:( move ua - 2 , 3 ; move 4 , 2 - 4 )  decode:( move 4 , ul ; move 4 , 2 ) 
[10476] c:0 is:( move ua , 0 - 4 ; move 3 , 4 * 3 )  decode:( move 3 , 5 ; move ua , 2 / 5 ) 
[10477] c:0 is:( move 3 , 4 * 3 ; move 2 - ua , 2 )  decode:( move 3 , 3 * 4 ; move 4 , 2 ) 
[10478] c:0 is:( move 0 - 4 , 4 ; move ua , 3 / 2 )  decode:loop 0 , 3 , move 0 - 3 , 4 / 3 
[10479] c:0 is:( move 3 , 2 / 5 ; move 2 + ua , 2 )  decode:( move 3 , 4 / 9 ; move 9 , 2 ) 
[10480] c:0 is:( move 0 - ua , 3 ; move 3 , 3 / 4 )  decode:( move ua , 6 ; move 3 , 0 - 4 ) 
[10481] c:0 is:( move ua , 2 / 0 - 3 ; move 4 , 4 )  decode:( move ua , 2 - 9 ; move 4 , 4 ) 
[10482] c:0 is:( move 4 , 0 - 2 ; move ua , 4 / 3 )  decode:( move ua , ua / 2 ; move 4 , 5 ) 
[10483] c:0 is:( move 4 + 3 , 4 ; move ua + 2 , 4 )  decode:( move ua + ul , 4 ; move 9 , 4 ) 
[10484] c:0 is:( move 0 - 9 , 4 ; move 0 - ua , 2 )  decode:( move 9 , 4 ; move ua , 2 ) 
[10485] c:0 is:( move 4 , 0 ; move 3 - ua , 2 / 4 )  decode:( move 4 , 0 ; move 3 , 4 * 4 ) 
[10486] c:0 is:( move 0 - 4 , 3 ; move ua , 2 / 4 )  decode:( move 4 , 5 / 3 ; move ua , 9 ) 
[10487] c:0 is:( move 3 - ua , 4 ; move 3 + 4 , 2 )  decode:( move 3 , ul ; move ua + ul , 2 ) 
[10488] c:0 is:( move 0 - 3 , 4 ; move ua , 3 * 4 )  decode:( move 3 , 4 ; move ua , 9 ) 
[10489] c:0 is:( move ua , 2 * 4 ; move 4 , 0 - 4 )  decode:( move 4 , 0 - 4 ; move ua , 4 ) 
[10490] c:0 is:( move 3 , 0 - 4 ; move ua , 4 * 3 )  decode:( move ua , 0 - 4 ; move 3 , 9 ) 
[10491] c:0 is:( move 4 , 4 + 3 ; move 2 - ua , 3 )  decode:( move 4 , 2 / 3 ; move 4 , 6 ) 
[10492] c:0 is:( move 4 , 0 ; move 2 - ua , 3 / 4 )  decode:( move 4 , 0 ; move 5 , 4 ) 
[10493] c:0 is:( move ua + 2 , 2 / 4 ; move 4 , 2 )  decode:( move ua + 2 , 3 + move 4 , 2 ) 
[10494] c:0 is:( move 4 + 3 , 0 ; move ua , 4 / 3 )  decode:( move ua , 0 ; move ua , 4 / 3 ) 
[10495] c:0 is:( move 0 - 4 , 3 ; move ua , 4 * 3 )  decode:( move 4 , 3 ; move ua , 5 * 2 ) 
[10496] c:0 is:( move 0 - 4 , 2 / ua ; move 3 , 4 )  decode:loop 0 , 4 , move v0 - 4 , 2 / 5 
[10497] c:0 is:( move 0 - ua , 4 / 3 ; move 4 , 2 )  decode:( move 4 , ul / 4 ; move ua , ul ) 
[10498] c:0 is:( move 3 , 2 / 4 ; move 3 + ua , 2 )  decode:( move 3 , 4 / ua ; move 9 , 2 ) 
[10499] c:0 is:( move 0 - ua , 4 ; move 4 , 3 / 2 )  decode:( move ua , 4 ; move 4 , 3 + 4 ) 
[10500] c:0 is:( move 3 , 3 / 2 ; move ua , 4 + 2 )  decode:( move 2 , 0 - 2 ; move ua , 7 ) 
[10501] c:0 is:( move ua + 2 , 4 / 3 ; move 3 , 2 )  decode:( move 9 , 4 / 3 ; move 3 , 2 ) 
[10502] c:0 is:( move 5 , 2 - 3 ; move ua + 2 , 4 )  decode:loop 0 , 3 , move 4 , 2 - v0 
[10503] c:0 is:( move 0 - 3 , 2 / 4 ; move ua , 4 )  decode:loop 0 , 3 , move 0 - 3 , 7 - v0 
[10504] c:0 is:( move 3 , 2 - 4 ; move ua , 2 / 3 )  decode:( move 3 , 4 + 3 ; move ua , 9 ) 
[10505] c:0 is:( move 0 - ua , 4 ; move 4 , 2 / 4 )  decode:( move ua , 4 ; move 4 , / 9 ) 
[10506] c:0 is:( move 0 - ua , 4 ; move 4 , 4 * 3 )  decode:( move ua , ul ; move 4 , 9 ) 
[10507] c:0 is:( move 2 - ua , 2 ; move 4 , 2 / 4 )  decode:( move 4 , 2 ; move 4 , 9 ) 
[10508] c:0 is:( move ua , 2 / 4 ; move 0 - 4 , 4 )  decode:( move ua , 9 / ua ; move 4 , ul ) 
[10509] c:0 is:( move 4 , 2 - 3 ; move ua , 2 / 3 )  decode:( move 4 , 9 ; move ua , 4 + 3 ) 
[10510] c:0 is:( move 4 - ua , 4 + 3 ; move 4 , 2 )  decode:( move 3 , 4 ; move 4 , ul ) 
[10511] c:0 is:( move 0 - 7 , 3 ; move 3 + 3 , ul )  decode:( move 7 , 0 ; move ua , ua / 3 ) 
[10512] c:0 is:( move 5 , 0 - 3 ; move 4 , ul - 3 )  decode:( move 5 , 0 - 2 ; move 5 , 4 ) 
[10513] c:0 is:( move ua , 0 - 3 ; move 4 + 6 , 4 )  decode:( move ua , 0 - 3 ; move + 4 / ) v0 
[10514] c:0 is:( move 5 , 0 - 2 ; move ua , 4 / 3 )  decode:( move ua , 0 - 3 ; move 5 , 5 ) 
[10515] c:0 is:( move ua , 0 - 3 ; move 4 , 4 / 3 )  decode:( move 4 , ua / 4 ; move ua , 5 ) 
[10516] c:0 is:( move 4 , 0 - 3 ; move 4 , 3 / ua )  decode:loop 0 , 3 , move 0 - 3 , v0 / 4 
[10517] c:0 is:( move 4 , 0 - 4 ; move ua , 2 / 4 )  decode:( move ul - ua , 9 ; move ua , 7 ) 
[10518] c:0 is:( move 0 - 3 , 4 ; move 3 , ua / 4 )  decode:( move 3 , 7 ; move 3 , 3 + 8 ) 
[10519] c:0 is:( move 0 - ua , 3 / 4 ; move 3 , 4 )  decode:( move ua , 4 + 3 ; move 3 , ul ) 
[10520] c:0 is:( move 5 , 4 / 3 ; move 0 - ua , 2 )  decode:( move 5 , 4 - 3 ; move ua , ul ) 
[10521] c:0 is:( move 3 , 2 - 3 ; move ua , 2 / 4 )  decode:( move ua , 9 ; move 3 , 4 * 3 ) 
[10522] c:0 is:( move 0 - 4 , 2 / ua ; move 4 , 4 )  decode:( move 4 , 0 - 4 ; move 4 , 4 ) 
[10523] c:0 is:( move 4 , 0 - 2 ; move 4 , ul / 3 )  decode:( move 4 , 4 / 5 ; move 4 , 7 ) 
[10524] c:0 is:( move 4 , 4 / 3 ; move ua , 0 - 3 )  decode:( move ua , 3 / 2 ; move 5 , 3 ) 
[10525] c:0 is:( move 4 , 4 / 3 ; move ua + 2 , 2 )  decode:( move 4 , 4 / 3 ; move 8 , 2 ) 
[10526] c:0 is:( move ua , 0 - 3 ; move 4 , 4 * 4 )  decode:loop 0 , 2 , move ua - 2 , 4 * 4 
[10527] c:0 is:( move 0 - ua , 4 ; move 3 , 4 * 4 )  decode:( move 0 - 4 , ul ; move ua , 3 ) 
[10528] c:0 is:( move 4 , ua / 2 ; move 4 + 3 , 2 )  decode:( move 4 , 2 ; move 7 , 0 - 2 ) 
[10529] c:0 is:( move 4 , 3 + 4 ; move ua , 4 + 3 )  decode:( move 4 , 7 ; move ua , 7 ) 
[10530] c:0 is:( move 2 , 4 / 3 ; move ua + 2 , 4 )  decode:( move 2 , ul / 4 ; move 9 , 4 ) 
[10531] c:0 is:( move 2 , ua / 3 ; move 4 + 4 , 2 )  decode:( move ua + ul , 9 ; move 9 , 2 ) 
[10532] c:0 is:( move 0 - ua , 2 / 6 ; move 4 , 2 )  decode:( move ua , 4 * 4 ; move 4 , 2 ) 
[10533] c:0 is:( move 3 , 2 * 5 ; move ua , 2 - 3 )  decode:( move ua , ua / 3 ; move 3 , ul ) 
[10534] c:0 is:( move 2 - ua , 3 ; move 3 , 2 / 4 )  decode:( move 4 , 3 ; move 3 , 9 ) 
[10535] c:0 is:( move 3 , 2 / 3 ; move ua , 3 * 2 )  decode:( move 3 , 2 ; move ua , 2 / ua ) 
[10536] c:0 is:( move 0 - ua , 2 / 4 ; move 4 , 4 )  decode:loop 0 , 2 , move 2 - ua , 2 / ua 
[10537] c:0 is:( move 4 , 2 / 3 ; move ua , 4 + 2 )  decode:( move 4 , 5 / 3 ; move ua , 3 ) 
[10538] c:0 is:( move 4 , 0 - 3 ; move ua , 4 / 3 )  decode:( move ua , 9 / ua ; move 4 , 5 ) 
[10539] c:0 is:( move 4 + 3 , 4 ; move ua + 4 , 3 )  decode:( move 4 + 4 , 4 ; move 4 , 3 ) 
[10540] c:0 is:( move 3 , 2 / 4 ; move ua , 4 + 2 )  decode:loop 0 , 4 , move 2 , 4 / ul / 4 
[10541] c:0 is:( move 2 , 2 - 9 ; move 2 + ua , 2 )  decode:( move 2 , 2 * 9 ; move 9 , 2 ) 
[10542] c:0 is:( move 3 , 4 * 4 ; move 2 - ua , 2 )  decode:( move 3 , 4 * 4 ; move 4 , 2 ) 
[10543] c:0 is:( move ua , 4 + 3 / 2 ; move 4 , 2 )  decode:( move ua , 2 - 9 ; move 4 , 2 ) 
[10544] c:0 is:( move 4 , 0 - 9 ; move ua + 2 , 2 )  decode:( move 4 , 0 - 9 ; move 8 , 2 ) 
[10545] c:0 is:( move 4 , 3 / 0 - 4 ; move 2 , ul )  decode:( move 2 , 9 ; move 4 , ul ) 
[10546] c:0 is:( move 3 , 2 / 4 ; move ua + 4 , 2 )  decode:( move 3 , 4 / ua ; move 4 , 2 ) 
[10547] c:0 is:( move 0 - 3 , 3 / 4 ; move ua , 4 )  decode:( move 3 , 4 ; move ua , 2 / 5 ) 
[10548] c:0 is:( move 4 , 3 / 4 ; move 2 + ua , 2 )  decode:( move 4 , 7 ; move ua + 2 , 2 ) 
[10549] c:0 is:( move ua , 2 - 3 ; move 3 , 2 / 4 )  decode:( move 3 , 9 ; move ua , 2 / 4 ) 
[10550] c:0 is:( move ua , 4 * 3 ; move 4 , 0 - 4 )  decode:( move 4 , 5 ; move ua , 4 ) 
[10551] c:0 is:( move 2 + 3 , 6 ; move ua + 3 , 4 )  decode:( move 5 , 6 ; move 9 , 4 ) 
[10552] c:0 is:( move 3 , 4 * 4 ; move ua + 3 , 2 )  decode:( move 3 , 4 * 4 ; move 9 , 2 ) 
[10553] c:0 is:( move 3 , 2 / 4 ; move ua + 2 , 4 )  decode:( move 3 , 2 / 4 ; move 8 , 4 ) 
[10554] c:0 is:( move ua + 2 , 4 / 3 ; move 4 , 2 )  decode:( move 8 , 4 / 3 ; move 4 , 2 ) 
[10555] c:0 is:( move ua , 2 - 3 ; move 4 , 2 / 4 )  decode:( move 4 , 9 ; move ua , 4 * 3 ) 
[10556] c:0 is:( move 3 - ua , 0 ; move 5 , 3 / 4 )  decode:( move 3 , 0 ; move 5 , 4 ) 
[10557] c:0 is:( move 4 , 2 / 6 ; move ua + 2 , 2 )  decode:( move 4 , 2 / 6 ; move 9 , 2 ) 
[10558] c:0 is:( move 0 - ua , 4 ; move 4 , 4 / 3 )  decode:( move 4 , 4 ; move ua , 4 / 3 ) 
[10559] c:0 is:( move 3 , 4 * 3 ; move 3 + ua , 4 )  decode:( move 3 , 4 * 3 ; move ua , 4 ) 
[10560] c:0 is:( move 2 , 2 / 3 ; move ua , 4 * 3 )  decode:loop 0 , 4 , move 2 , v0 / 7 
[10561] c:0 is:( move 3 , 0 - 4 ; move 4 , ua / 4 )  decode:( move 3 , 4 / 3 ; move 4 , 8 ) 
[10562] c:0 is:( move 4 + 2 , 4 / ua ; move 4 , 2 )  decode:( move ua , 4 / ua ; move 4 , 2 ) 
[10563] c:0 is:( move 8 , 0 ; move ul + 3 , 2 - 4 )  decode:( move ua , 0 ; move ua , 0 - 2 ) 
[10564] c:0 is:( move 3 , 4 ; move 2 - ua , 2 / 4 )  decode:loop 0 , 4 , move 2 , 0 - v0 / 2 
[10565] c:0 is:( move 4 , 2 ; move ua - 2 , 4 / 3 )  decode:( move 4 , 2 ; move 4 , 4 / 3 ) 
[10566] c:0 is:( move 4 , 4 * 4 ; move ua , 0 - 4 )  decode:( move ua , ua / 4 ; move 4 , 4 ) 
[10567] c:0 is:( move 3 , 2 ; move 3 - ua , 4 / 3 )  decode:loop 0 , 3 , move 0 - 2 , 4 * 3 
[10568] c:0 is:( move 5 , 3 ; move ua , 4 + 3 + 4 )  decode:( move 5 , 3 ; move ua , ua / 4 ) 
[10569] c:0 is:( move 4 , 4 * 3 ; move 3 - ua , 2 )  decode:loop 0 , 2 , move 4 , ua / 4 
[10570] c:0 is:( move 6 , 4 * 3 ; move ua + 2 , 2 )  decode:( move ua , 4 * 3 ; move 8 , 2 ) 
[10571] c:0 is:( move 9 , 0 - 3 ; move ua + 2 , 4 )  decode:loop 0 , 3 , move ua - ua , v0 - 3 
[10572] c:0 is:( move 3 - ua , 2 ; move 4 , 4 * 3 )  decode:( move 3 , 0 - 2 ; move 4 , 9 ) 
[10573] c:0 is:( move 3 + ua , 3 / 4 ; move 4 , 2 )  decode:( move 9 , 4 + 3 ; move 4 , 2 ) 
[10574] c:0 is:( move ua , 2 / 4 ; move 3 , 3 + 4 )  decode:( move ua , 2 / 4 ; move 3 , 4 ) 
[10575] c:0 is:( move 4 , 2 / 4 ; move ua + 4 , 2 )  decode:( move 4 , 4 / ua ; move 4 , 2 ) 
[10576] c:0 is:( move 4 , 2 / 4 ; move ua + 2 , 4 )  decode:( move 4 , 2 / 4 ; move ua , 4 ) 
[10577] c:0 is:( move 3 , 4 * 4 ; move 4 + ua , 2 )  decode:loop 0 , 4 , move 3 , 4 * 4 - v0 
[10578] c:0 is:( move 0 - 7 , ua - 3 ; move 2 , 5 )  decode:( move ua + ul , 4 ; move 2 , 5 ) 
[10579] c:0 is:( move ua + 2 , 2 - 9 ; move 3 , 2 )  decode:( move 9 , 4 * 3 ; move 3 , 2 ) 
[10580] c:0 is:( move 4 , 4 ; move 0 - ua , 4 / 3 )  decode:( move 4 , 4 ; move ua , 0 - 7 ) 
[10581] c:0 is:( move 4 , 3 * 4 ; move ua + 2 , 4 )  decode:( move 4 , 4 * 3 ; move 8 , 4 ) 
[10582] c:0 is:( move 2 - ua , 3 ; move 4 , 4 * 3 )  decode:( move 4 , 6 ; move 4 , 9 ) 
[10583] c:0 is:( move 0 - 4 , 4 ; move 3 , ua / 4 )  decode:( move 4 , 4 ; move 3 , ua / 4 ) 
[10584] c:0 is:( move 4 - ua , 0 ; move 4 , 4 / 3 )  decode:( move 4 - ua , 0 ; move 3 , 4 ) 
[10585] c:0 is:( move 4 , 4 * 4 ; move ua + 3 , 2 )  decode:( move 4 , 4 * 4 ; move 9 , 2 ) 
[10586] c:0 is:( move ua , 0 - 4 * 4 ; move 4 , 4 )  decode:( move ua , 9 ; move 4 , 4 ) 
[10587] c:0 is:( move ua , 5 / 0 - 3 ; move 5 , 2 )  decode:( move ua , 6 / 2 ; move 5 , 2 ) 
[10588] c:0 is:( move 2 - ua , 2 ; move 4 , 4 / 3 )  decode:( move 4 , ul / 4 ; move 4 , 8 ) 
[10589] c:0 is:( move 0 - ua , 4 * 4 ; move 4 , 4 )  decode:( move ua , 2 / 4 ; move 4 , ul ) 
[10590] c:0 is:( move 3 , 6 + 4 ; move ua + 2 , 4 )  decode:( move 3 , 4 + 9 ; move 9 , 4 ) 
[10591] c:0 is:( move 2 - ua , 4 / 3 ; move 4 , 2 )  decode:( move 4 , ul / 2 ; move 4 , ul ) 
[10592] c:0 is:( move 4 , 0 - 4 ; move ua , 4 / 3 )  decode:( move ua , 5 + 9 ; move 4 , 5 ) 
[10593] c:0 is:( move 3 , 2 / 6 ; move ua + 3 , 2 )  decode:( move 3 , 2 / 6 ; move 9 , 2 ) 
[10594] c:0 is:( move ua + 2 , 2 / 6 ; move 4 , 2 )  decode:( move ua + 2 , 2 ; move 4 , 2 ) 
[10595] c:0 is:( move 3 , ua - 4 / 3 ; move 3 , 2 )  decode:( move 3 , 5 ; move 3 , 2 ) 
[10596] c:0 is:( move 4 , 2 * 4 ; move ua - 3 , 4 )  decode:( move 4 , ua * ua ; move 4 , 4 ) 
[10597] c:0 is:( move 0 - 4 , ul ; move 4 , 3 / 4 )  decode:( move 4 , 4 ; move 4 , 4 / ua ) 
[10598] c:0 is:( move ua + 2 , 4 / 3 ; move 4 , 4 )  decode:( move 8 , 4 / 3 ; move 4 , 4 ) 
[10599] c:0 is:( move 3 , 2 / 6 ; move ua + 4 , 2 )  decode:( move 3 , 0 ; move 4 + ua , 2 ) 
[10600] c:0 is:( move ua - 4 , 2 ; move 4 , 2 / 4 )  decode:( move 2 , 2 ; move 4 , 2 / 4 ) 
[10601] c:0 is:( move 4 , 2 ; move ua + 4 , 4 * 4 )  decode:( move 4 , 4 / move 4 + 4 , 4 ) 
[10602] c:0 is:( move 5 , 2 / 4 ; move 3 - ua , 2 )  decode:( move 5 , 2 / 4 ; move 3 , 5 ) 
[10603] c:0 is:( move ua + 2 , 2 / 6 ; move 3 , 4 )  decode:loop 0 , 4 , move 3 , 0 - v0 / 4 
[10604] c:0 is:( move 4 , 0 - 9 ; move ua + 4 , 2 )  decode:( move 4 , 0 - 9 ; move 4 , 2 ) 
[10605] c:0 is:( move 9 , 0 - 3 ; move ua + 3 , 4 )  decode:loop 0 , 3 , move 4 , ua / v0 - 3 
[10606] c:0 is:( move ua , 3 * 4 ; move 2 , 4 * 3 )  decode:( move 2 , 2 ; move ua , 4 / ua ) 
[10607] c:0 is:( move 4 , 3 / 4 ; move ua + 2 , 4 )  decode:( move 4 , 4 / ua ; move 8 , 4 ) 
[10608] c:0 is:( move 4 , 4 / 3 ; move ua + 2 , 4 )  decode:( move 4 , 4 / 3 ; move 9 , 4 ) 
[10609] c:0 is:( move 3 , 3 ; move ua - 3 , 3 / 4 )  decode:( move 3 , 3 ; move 3 , 7 ) 
[10610] c:0 is:( move 9 , 0 - 4 ; move ua + 2 , 4 )  decode:( move 9 , 0 - 4 ; move ua , 4 ) 
[10611] c:0 is:( move 3 , 2 ; move 4 , 4 + ua / 4 )  decode:( move 3 , 0 - 2 ; move 4 , 7 ) 
[10612] c:0 is:( move 4 - ua , 4 * 3 ; move 4 , 2 )  decode:( move 2 , 9 ; move 4 , ul ) 
[10613] c:0 is:( move 2 , ul / 4 ; move 4 , 2 - 3 )  decode:( move 2 , 4 / ua ; move 4 , ul ) 
[10614] c:0 is:( move ua + 2 , 4 / 3 ; move 3 , 5 )  decode:( move 3 , 9 ; move 9 , 5 ) 
[10615] c:0 is:( move 4 - ua , 3 ; move 4 , 3 / 2 )  decode:( move 4 - ua , 3 ; move 4 , 8 ) 
[10616] c:0 is:( move 4 , 0 - 4 ; move 4 , ua / 4 )  decode:( move 4 , 4 / 5 ; move 4 , 8 ) 
[10617] c:0 is:( move 3 , 3 / 2 ; move ua , 4 * 3 )  decode:( move ua , 4 ; move 3 , 4 * 3 ) 
[10618] c:0 is:( move ua + 4 , 4 ; move 4 + 4 , 4 )  decode:( move 4 + ua , 4 ; move ua , 4 ) 
[10619] c:0 is:( move 4 , 4 * 4 ; move 3 - ua , 2 )  decode:( move 4 , 4 * 4 ; move 4 , 2 ) 
[10620] c:0 is:( move 5 , 4 * 3 ; move ua + 2 , 4 )  decode:( move 5 , 4 * 3 ; move 8 , 4 ) 
[10621] c:0 is:( move 4 , 2 - 3 ; move ua , 4 / 3 )  decode:( move ua , 0 - 9 ; move 4 , 5 ) 
[10622] c:0 is:( move ua + 2 , 4 * 4 ; move 4 , 4 )  decode:loop 0 , 4 , move v0 * 2 , 4 / 4 
[10623] c:0 is:( move 4 , 4 * 3 ; move ua - 4 , 2 )  decode:( move 2 , 4 + 9 ; move 4 , 2 ) 
[10624] c:0 is:( move 3 , 4 + 4 ; move 4 * 2 , ul )  decode:( move 3 , ua * ua ; move 2 , ul ) 
[10625] c:0 is:( move ua , 4 + 3 ; move 4 , 4 * 3 )  decode:loop 0 , 3 , move 3 - ua , 2 / 4 
[10626] c:0 is:( move 4 , 4 * 4 ; move ua + 4 , 2 )  decode:loop 0 , 4 , move 3 , 4 + 4 / v0 
[10627] c:0 is:( move 3 , 2 ; move 4 + 4 , 4 / ua )  decode:( move 3 , 2 ; move  4 + 4 4 ) 
[10628] c:0 is:( move 3 - ua , 3 ; move 4 , 4 * 3 )  decode:( move 3 , 2 / 3 ; move 4 , 9 ) 
[10629] c:0 is:( move 2 - ua , 3 ; move 4 , 4 * 4 )  decode:( move 4 , 6 ; move 4 , 4 / ua ) 
[10630] c:0 is:( move 5 , ua - 3 ; move 4 + 3 , 4 )  decode:( move 5 , 0 - 3 ; move ua , 4 ) 
[10631] c:0 is:( move 4 , 4 * 3 ; move 2 - ua , 4 )  decode:( move 4 , 4 * 3 ; move 4 , 4 ) 
[10632] c:0 is:( move 4 , 3 ; move 3 - ua , 3 * 4 )  decode:( move 4 , 3 ; move 4 , 9 ) 
[10633] c:0 is:( move ua - 3 , 4 ; move 4 , 4 + 4 )  decode:( move 4 , 4 ; move 4 , 8 ) 
[10634] c:0 is:( move 4 + 3 , ul ; move 3 , 4 * 3 )  decode:( move ua , ul ; move 3 , 3 * 4 ) 
[10635] c:0 is:( move ua , 3 / 2 ; move 3 , 2 / 4 )  decode:( move 3 ,  / 3 ; move ua , 7 ) 
[10636] c:0 is:( move 0 - 4 , 4 / ua ; move 4 , 4 )  decode:( move 4 , 5 + 4 ; move 4 , ul ) 
[10637] c:0 is:( move 4 , 4 * 3 ; move ua , 2 - 4 )  decode:( move ua , 2 / 4 ; move 5 , 2 ) 
[10638] c:0 is:( move 2 - ua , 4 ; move 4 , 4 * 3 )  decode:( move 4 , 2 / 4 ; move 4 , 9 ) 
[10639] c:0 is:( move 4 , 4 * 4 ; move ua + 2 , 4 )  decode:( move 4 , 4 * 4 ; move 8 , 4 ) 
[10640] c:0 is:( move 4 , ul - 4 ; move 3 + 4 , 3 )  decode:( move ua , 0 ; move ua - ul , 3 ) 
[10641] c:0 is:( move 5 , 4 * 3 ; move 3 + 2 , ul )  decode:( move ul - ua , 3 ; move 5 , ul ) 
[10642] c:0 is:( move ua , 4 * 4 ; move 3 , 3 + 4 )  decode:( move 3 , 4 * 4 ; move 3 , 7 ) 
[10643] c:0 is:( move 4 , 2 - 3 ; move ua , 3 / 4 )  decode:( move 4 , 9 + 3 ; move ua , 7 ) 
[10644] c:0 is:( move 2 , ua / 7 ; move 2 + 4 , 2 )  decode:( move 2 , 4 ; move ua , 2 ) 
[10645] c:0 is:( move 3 - ua , 2 ; move 4 , 4 * 4 )  decode:( move 3 , 0 - 4 ; move 4 , 7 ) 
[10646] c:0 is:( move ua + 3 , 6 ; move 3 + 6 , 2 )  decode:( move 9 , 6 ; move ua + 3 , 2 ) 
[10647] c:0 is:( move 4 , 4 ; move 2 - ua , 2 / 4 )  decode:0 0 loop 0 , 2 , move 4 , 4 * 4 
[10648] c:0 is:( move ua + 3 , 4 ; move 6 + 3 , 4 )  decode:( move 9 , 4 ; move ua + 2 , 4 ) 
[10649] c:0 is:( move 9 , 0 - 5 ; move ua + 2 , 4 )  decode:loop 0 , 3 , move 0 - 9 , 0 - 3 
[10650] c:0 is:( move 5 , 0 - 9 ; move ua + 2 , 4 )  decode:( move 5 , 0 - 9 ; move 8 , 4 ) 
[10651] c:0 is:( move 6 + 4 , 4 ; move ua + 4 , 3 )  decode:loop 0 , 2 , move 4 + ua , 4 - v0 
[10652] c:0 is:( move 4 , ul / 4 ; move 2 - 4 , 2 )  decode:( move 4 , ul / 4 ; move 2 , 5 ) 
[10653] c:0 is:( move 4 , 0 - 9 ; move ua + 3 , 4 )  decode:loop 0 , 4 , move 3 , 0 - 9 * v0 
[10654] c:0 is:( move ua , 9 / 2 ; move 4 , 0 - 2 )  decode:( move 4 , 2 - 9 ; move ua , 2 ) 
[10655] c:0 is:( move ua + 4 , 4 * 3 ; move 4 , 4 )  decode:( move ua + 4 , 3 ; move 4 , 4 ) 
[10656] c:0 is:( move 4 , 2 - 3 ; move 4 , ua / 4 )  decode:( move 4 , 2 - 3 ; move 4 , 8 ) 
[10657] c:0 is:( move 4 , 4 / 3 ; move ua - 4 , 2 )  decode:( move 4 , 4 / 3 ; move 3 , 2 ) 
[10658] c:0 is:( move 5 , 2 / ua ; move 4 , 4 + 3 )  decode:( move 4 , 4 / ua ; move 4 , 4 ) 
[10659] c:0 is:( move 0 - 7 , ul ; move 4 , 3 / 2 )  decode:( move 3 , 3 * 2 ; move 5 , 8 ) 
[10660] c:0 is:( move 4 , 2 / ua ; move 3 , 4 * 3 )  decode:( move 3 , 9 ; move 4 , 2 / 4 ) 
[10661] c:0 is:( move 5 , 3 / 2 ; move ua + 4 , 4 )  decode:( move 5 , ua / 4 ; move 9 , 4 ) 
[10662] c:0 is:( move 5 , 2 / 4 ; move ua - 4 , 2 )  decode:( move 5 , 2 / 4 ; move 3 , 2 ) 
[10663] c:0 is:( move ua , 2 / 3 ; move 4 , 4 * 3 )  decode:loop 0 , 4 , move 3 - v0 , 7 / 3 
[10664] c:0 is:( move ua + 3 , 9 ; move 4 + 3 , 2 )  decode:( move ua + 3 , 9 ; move 7 , 2 ) 
[10665] c:0 is:( move 4 - ua , 2 / 3 ; move 4 , 4 )  decode:( move 2 , 5 + 2 ; move 4 , 4 ) 
[10666] c:0 is:( move 4 , 4 / ua ; move 4 + 4 , 2 )  decode:( move 4 , 4 / ua ; move 7 , 2 ) 
[10667] c:0 is:( move 4 , 2 / ua ; move 3 , 4 * 3 )  decode:( move 3 , 9 ; move 4 , 2 / 4 ) 
[10668] c:0 is:( move 3 , 4 * 4 ; move ua , 2 / 3 )  decode:( move ua , 0 - 4 ; move 4 , 9 ) 
[10669] c:0 is:( move 5 , 2 - 9 ; move ua + 2 , 2 )  decode:( move 5 , 2 - 9 ; move 8 , 2 ) 
[10670] c:0 is:( move 2 - ua , 4 ; move 4 , 3 / 4 )  decode:( move 2 - ua , 4 ; move 4 , 7 ) 
[10671] c:0 is:( move 4 , 4 ; move ua - 3 , 4 * 3 )  decode:( move 4 , 4 ; move 3 , 4 / ua ) 
[10672] c:0 is:( move 2 - ua , 4 / 3 ; move 4 , 4 )  decode:( move 4 , 0 - 2 ; move 4 , 7 ) 
[10673] c:0 is:( move 9 , ua - 3 ; move 4 + 2 , 2 )  decode:( move 9 , 0 - 3 ; move ua , 2 ) 
[10674] c:0 is:( move 2 - 9 , 4 ; move 0 - ua , 4 )  decode:loop 0 , 2 , move 0 - ua , 4 
[10675] c:0 is:( move 3 - ua , 4 ; move 4 , 4 * 3 )  decode:loop 0 , 3 , move 3 , v0 + 9 
[10676] c:0 is:( move 4 , 4 / 3 ; move ua + 3 , 4 )  decode:( move 4 , 4 / 3 ; move 9 , 4 ) 
[10677] c:0 is:( move ua , 3 / 2 ; move 3 , 4 / 3 )  decode:( move 3 , 6 ; move ua , 4 / 3 ) 
[10678] c:0 is:( move 3 - ua , 4 ; move 4 , 2 / 4 )  decode:( move 4 , 4 ; move 4 , 5 * 2 ) 
[10679] c:0 is:( move 3 , 4 / ua ; move 3 , 4 + 4 )  decode:loop 0 , 3 , move 2 , 3 + 9 
[10680] c:0 is:( move 4 + 3 , 3 / ua ; move 4 , 4 )  decode:( move ua + ul , 9 ; move 4 , 4 ) 
[10681] c:0 is:( move ua , 4 / 3 ; move 3 , 4 + 4 )  decode:( move 3 , 0 ; move ua , 3 / 2 ) 
[10682] c:0 is:( move 4 + 3 , 4 / 3 ; move 3 , ul )  decode:( move ua , 4 / 3 ; move 3 , ul ) 
[10683] c:0 is:( move 3 , 2 / 4 ; move ua , 2 / 4 )  decode:( move ul - ua , ul ; move 3 , 9 ) 
[10684] c:0 is:( move ua , 2 / 4 ; move 4 , 2 / 4 )  decode:loop 0 , 2 , move ua - ul , 2 / 4 
[10685] c:0 is:( move 4 , 4 * 3 ; move ua , 5 * 2 )  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[10686] c:0 is:( move 5 , 0 - 9 ; move ua + 3 , 4 )  decode:loop 0 , 4 , move 3 , 0 - 4 + v0 
[10687] c:0 is:( move 3 , 4 / 3 ; move ua , 2 / 4 )  decode:( move ua , 5 ; move 3 , 4 / 4 ) 
[10688] c:0 is:( move 4 , 2 / 6 ; move ua + 2 , 5 )  decode:( move 4 , 2 / ua ; move 9 , 5 ) 
[10689] c:0 is:( move 4 , ua / 3 ; move 3 , 4 * 3 )  decode:( move 4 , 2 ; move 3 , 3 * 4 ) 
[10690] c:0 is:( move ua , 3 / 2 ; move 4 , 4 * 4 )  decode:( move 4 , 8 ; move ua , 3 ) 
[10691] c:0 is:( move 5 , ua - 3 ; move 4 , 4 * 3 )  decode:( move 4 , 5 * 3 ; move 4 , 7 ) 
[10692] c:0 is:( move 3 , 5 * 4 + 3 ; move 4 , ul )  decode:( move 3 , 3 / 2 ; move 4 , ul ) 
[10693] c:0 is:( move 4 , 4 + 9 ; move ua + 3 , 2 )  decode:( move 4 , 4 + 9 ; move 9 , 2 ) 
[10694] c:0 is:( move 5 , ua / 4 ; move 4 , 4 + 2 )  decode:( move 5 , 4 / 5 ; move 4 , ul ) 
[10695] c:0 is:( move 4 , ua / 4 ; move 4 + 4 , 3 )  decode:( move ua + ul , 3 ; move ua , 3 ) 
[10696] c:0 is:loop 0 , 3 , move v0 + ua , 2 + v0  decode:( move ua + 2 , 3 ; move 7 , 4 ) 
[10697] c:0 is:( move ul , 4 ; move 4 + 3 , 4 / 3 )  decode:( move ul , 0 - 2 ; move ua , 2 ) 
[10698] c:0 is:( move 4 , ul / 4 ; move 4 , 2 - 3 )  decode:( move 4 , 4 * 3 ; move 4 , ul ) 
[10699] c:0 is:( move 4 , 4 * 3 ; move ul - 3 , 4 )  decode:( move 2 , 4 * 3 ; move 2 , ul ) 
[10700] c:0 is:( move 3 , 2 / 4 ; move ua , 3 / 4 )  decode:loop 0 , 4 , move 2 , 2 / 2 2 0 
[10701] c:0 is:( move 4 , 2 / ua ; move 3 , 3 / 4 )  decode:loop 0 , 4 , move v0 , v0 / ul 
[10702] c:0 is:( move 3 , ul - 4 ; move 3 , 3 / 4 )  decode:loop 0 , 4 , move v0 , v0 / v0 
[10703] c:0 is:( move 4 , 4 / ua ; move 3 , 3 / 2 )  decode:( move 4 , 2 - 3 ; move 4 , 8 ) 
[10704] c:0 is:( move 9 , 4 + 3 ; move 0 - 4 , ul )  decode:( move ua + 3 , 2 ; move 4 , 4 ) 
[10705] c:0 is:( move ua , 4 * 3 ; move 3 , 3 / 4 )  decode:( move ua , 4 * 3 ; move 3 , 7 ) 
[10706] c:0 is:( move 4 , 2 / 4 ; move ua , 2 / 4 )  decode:loop 0 , 3 , move 3 , 4 /  / 4 
[10707] c:0 is:( move 4 , 4 / 3 ; move ua + 4 , 4 )  decode:( move 4 , 4 / 3 ; move 4 , 4 ) 
[10708] c:0 is:( move 4 , 3 / 2 ; move ua , 4 * 4 )  decode:( move ua , ua * ua ; move ua , 9 ) 
[10709] c:0 is:( move ua , 4 * 3 ; move 3 , 4 / 3 )  decode:( move 3 , 4 ; move ua , 5 ) 
[10710] c:0 is:( move 3 - ua , 9 ; move 3 , 4 + 2 )  decode:( move 3 , 4 * 3 ; move 4 , 3 ) 
[10711] c:0 is:( move 4 , 0 ; move 4 , 4 / ua / 4 )  decode:( move 4 , 0 ; move 5 , 5 * 2 ) 
[10712] c:0 is:loop 0 , 3 , move ua - v0 , v0 + 2  decode:loop 0 , 3 , move ua - v0 , 2 / 2 2 
[10713] c:0 is:loop 0 , 4 , move v0 + ul , 0 - v0  decode:loop 0 , 3 , move 3 - ua , 0 - 4 
[10714] c:0 is:loop 0 , 2 , move v0 - ua , 3 + v0  decode:( move ua , 6 ; move 5 , 0 - 4 ) 
[10715] c:0 is:( move 4 , 4 / 3 ; move ua , 4 * 3 )  decode:( move ua , 4 ; move 4 , 3 / ua ) 
[10716] c:0 is:( move 5 , ua / 4 ; move 4 + 2 , 5 )  decode:( move 5 , ua / 4 ; move ua , 5 ) 
[10717] c:0 is:( move 4 , 0 - 9 ; move ua , 2 / 4 )  decode:( move ul - ua , ul ; move 4 , 9 ) 
[10718] c:0 is:loop 0 , 3 , move v0 - ua , v0 + 2  decode:loop 0 , 3 , move ul - ua , v0 + 2 
[10719] c:0 is:( move ua + 3 , 9 ; move 4 + 3 , 4 )  decode:( move 9 , 9 ; move ua , 4 ) 
[10720] c:0 is:( move 3 , 4 / 7 ; move ua , 3 + 3 )  decode:loop 0 , 2 , move 2 - ua , ul / 4 
[10721] c:0 is:( move 4 , 2 / ua ; move 4 , 4 / 3 )  decode:loop 0 , 2 , move ua - 2 , ua / ua 
[10722] c:0 is:( move 5 , 4 / 3 ; move 4 + ua , 4 )  decode:( move 4 , 4 / 3 ; move 4 , 4 ) 
[10723] c:0 is:( move 3 , 4 / ua ; move 3 , 4 / 3 )  decode:( move 3 , 5 ; move 3 , 5 ) 
[10724] c:0 is:( move 4 + 3 , 2 / 6 ; move 4 , ul )  decode:( move ua , 9 + 4 ; move 4 , ul ) 
[10725] c:0 is:( move 4 , ua / 4 ; move 4 , 2 / 3 )  decode:( move 4 , ua / 4 ; move 4 , 9 ) 
[10726] c:0 is:( move 3 , ua / 4 ; move 4 , 4 * 3 )  decode:( move 4 , 4 ; move 3 , 2 / 4 ) 
[10727] c:0 is:loop 0 , 2 , move ua + v0 , v0 - 3  decode:loop 0 , 3 , move ua - v0 , 0 - 3 
[10728] c:0 is:loop 0 , 2 , move v0 - ua , v0 - 2  decode:( move 5 , 0 - 3 ; move ua , ul ) 
[10729] c:0 is:( move ua , 4 / 3 ; move 3 , 4 * 4 )  decode:( move 3 , 4 / move ua , 4 * 4 ) 
[10730] c:0 is:( move 3 , 4 * 4 ; move ua , 4 / 3 )  decode:( move ua , 3 / 4 ; move 3 , 5 ) 
[10731] c:0 is:( move 4 , 4 + 9 ; move ua + 4 , 2 )  decode:( move 4 , 4 / ua ; move 4 , 2 ) 
[10732] c:0 is:loop 0 , 2 , move ua - v0 , v0 - 2  decode:loop 0 , 2 , move v0 - ua , 2 - 3 
[10733] c:0 is:( move 5 , 4 / ua ; move 3 , 4 * 2 )  decode:( move 5 , 2 / 4 ; move 3 , 8 ) 
[10734] c:0 is:loop 0 , 2 , move v0 - ua , 2 - v0  decode:( move 0 - ua , 2 ; move 5 , ul ) 
[10735] c:0 is:( move 4 + 4 , 4 ; move 4 , ua / 4 )  decode:( move ua + 2 , 4 ; move 4 , 8 ) 
[10736] c:0 is:( move ua , 4 / 3 ; move 3 , 4 / 3 )  decode:( move 3 , 3 * 4 ; move ua , 5 ) 
[10737] c:0 is:( move 4 , 2 / 4 ; move 3 , ua / 4 )  decode:( move 3 , 4 / ua ; move 4 , 8 ) 
[10738] c:0 is:( move 4 , 2 / 4 ; move ua , 4 / 3 )  decode:( move ua , 5 ; move 4 , 5 ) 
[10739] c:0 is:( move 3 , ul / 3 ; move 4 , 4 * 3 )  decode:( move 4 , 9 ; move 3 , 7 ) 
[10740] c:0 is:( move 4 , 2 / 3 ; move 4 , ua / 4 )  decode:( move 4 , 2 - 3 ; move 4 , 8 ) 
[10741] c:0 is:( move ua , 9 + 4 ; move 4 + 2 , 4 )  decode:( move ua , 9 + 4 ; move ua , 4 ) 
[10742] c:0 is:( move 5 , 3 ; move 4 - ua , 4 / 3 )  decode:( move 2 , 2 - 2 ; move 5 , 8 ) 
[10743] c:0 is:( move 3 , 4 - 9 ; move ua + 2 , 4 )  decode:( move 3 , 4 / 3 ; move 9 , 4 ) 
[10744] c:0 is:( move ua , 2 / 5 ; move 3 , 4 * 4 )  decode:( move 3 , 2 / 4 ; move ua , 3 ) 
[10745] c:0 is:( move 3 , 4 * 9 ; move ua + 3 , 2 )  decode:( move 3 , 9 * 9 ; move 9 , 2 ) 
[10746] c:0 is:( move 3 , 6 + 4 ; move 3 , 4 / ua )  decode:loop 0 , 4 , move v0 , 2 / 4 
[10747] c:0 is:( move 4 , 2 / ua ; move 4 , 4 * 4 )  decode:loop 0 , 2 , move 0 - 4 , 4 * 4 
[10748] c:0 is:( move 4 , 3 / 2 ; move ua , 4 * 5 )  decode:( move ua , 3 * 2 ; move 4 , ul ) 
[10749] c:0 is:( move ua , 2 + 9 ; move 4 + 4 , 4 )  decode:( move ua , 9 + 2 ; move 9 , 4 ) 
[10750] c:0 is:loop 0 , 5 , move ul + v0 , 0 - v0  decode:loop 0 , 4 , move 4 , 0 - v0 * 4 
[10751] c:0 is:( move 4 , 2 / 4 ; move 4 , ua / 4 )  decode:loop 0 , 3 , move 3 , ua / ua / 4 
[10752] c:0 is:( move ua , 3 / 4 ; move 4 , 4 / 3 )  decode:( move 4 , 2 - 3 ; move ua , 5 ) 
[10753] c:0 is:( move 4 , 4 / 3 ; move ua , 4 / 3 )  decode:loop 0 , 2 , move ua - v0 , 4 / 3 
[10754] c:0 is:( move 3 , 4 - 9 ; move ua + 3 , 4 )  decode:( move 3 , 4 / 3 ; move 3 , 4 ) 
[10755] c:0 is:( move 4 , 4 / 3 ; move ua , 4 * 4 )  decode:( move ua , ua / 4 ; move 4 , 3 ) 
[10756] c:0 is:( move 4 , 4 * 4 ; move ua , 4 / 3 )  decode:( move ua , 8 ; move 4 , 4 + 4 ) 
[10757] c:0 is:loop 0 , 2 , move v0 - ua , 3 - v0  decode:( move ua , 5 ; move ua , 0 - 2 ) 
[10758] c:0 is:( move 4 , 3 / 4 ; move ua , 4 * 4 )  decode:( move ua , ul ; move 4 , 9 ) 
[10759] c:0 is:loop 0 , 4 , move ul + v0 , v0 + 2  decode:( move 4 , 9 ; move ua - ul , 4 ) 
[10760] c:0 is:( move ua , 9 + 4 ; move 4 , 4 + 3 )  decode:loop 0 , 4 , move 4 - ua , 2 / 4 
[10761] c:0 is:( move ua , 4 / 3 ; move 4 , 4 / 3 )  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[10762] c:0 is:loop 0 , 4 , move 2 , v0 + ul + v0  decode:( move 2 , ul ; move 5 , 4 ) 
[10763] c:0 is:( move 4 , 4 * 4 ; move 3 , 4 / ua )  decode:( move 3 , ul ; move 4 , 4 * 3 ) 
[10764] c:0 is:loop 0 , 2 , move ua - v0 , v0 - 3  decode:loop 0 , 2 , move ua - v0 , 0 - 3 
[10765] c:0 is:loop 0 , 3 , move ua - v0 , 3 + v0  decode:loop 0 , 4 , move v0 - ua , 0 - 3 
[10766] c:0 is:( move 5 , ua - 4 ; move 4 , 4 * 4 )  decode:( move 4 , 0 - 4 ; move 5 , 9 ) 
[10767] c:0 is:loop 0 , 2 , move v0 + ua , v0 - 4  decode:loop 0 , 2 , move ua , 0 - v0 - 2 
[10768] c:0 is:loop 0 , 2 , move v0 - ua , v0 * 2  decode:( move ua , 2 ; move ua , 0 - 2 ) 
[10769] c:0 is:( move 0 - ua , 9 ; move 4 , 3 / 4 )  decode:( move ua , 4 * 3 ; move 4 , 4 ) 
[10770] c:0 is:loop 0 , 2 , move v0 - ua , v0 + 4  decode:( move 0 - ua , 4 ; move 5 , 5 ) 
[10771] c:0 is:loop 0 , 2 , move v0 - ua , v0 - 3  decode:loop 0 , 2 , move ua - ul , v0 - 3 
[10772] c:0 is:( move 4 , 3 / 2 ; move 7 + ul , 4 )  decode:( move 4 , ua / 2 ; move 9 , 4 ) 
[10773] c:0 is:loop 0 , 3 , move v0 - ua , 3 + v0  decode:loop 0 , 3 , move 4 + v0 , 3 / 3 
[10774] c:0 is:loop 0 , 3 , move v0 + ul , v0 + 3  decode:( move 3 , 7 ; move 3 , ua * ua ) 
[10775] c:0 is:( move 4 , 0 - 9 ; move ua , 3 / 4 )  decode:loop 0 , 3 , move 3 - ua , 2 / 9 
[10776] c:0 is:( move 4 , 2 / 6 ; move ua , 4 / 3 )  decode:loop 0 , 4 , move v0 + ul , 2 / 3 
[10777] c:0 is:loop 0 , 3 , move ul + v0 , v0 + 4  decode:( move 2 , 4 ; move 5 , 5 ) 
[10778] c:0 is:( move ua , 8 / 3 ; move 4 + 4 , 3 )  decode:( move ua , 9 ; move ua + ul , 3 ) 
[10779] c:0 is:loop 0 , 3 , move ua / v0 , 2 + v0  decode:( move ua , 2 ; move ua , 3 ) 
[10780] c:0 is:loop 0 , 3 , move ua - v0 , 3 - v0  decode:loop 0 , 3 , move ua - v0 , 3 - 3 
[10781] c:0 is:loop 0 , 3 , move v0 - ua , 2 * v0  decode:loop 0 , 3 , move ua - ul , 0 - v0 
[10782] c:0 is:loop 0 , 3 , move v0 + 3 , v0 - ul  decode:( move ua , ul - 3 ; move 5 , ul ) 
[10783] c:0 is:loop 0 , 3 , move ua - v0 , 2 * v0  decode:loop 0 , 3 , move ua - v0 , 2 * 3 
[10784] c:0 is:( move 4 , 9 + 5 ; move 4 + ul , 2 )  decode:( move 4 , 3 / 2 ; move 5 , 2 ) 
[10785] c:0 is:loop 0 , 4 , move v0 + 2 , v0 - ul  decode:loop 0 , 3 , move ul - ua , 2 - v0 
[10786] c:0 is:loop 0 , 3 , move v0 - ua , 3 - v0  decode:loop 0 , 3 , move ua - v0 , 3 - 3 
[10787] c:0 is:loop 0 , 4 , move v0 - 2 - ua , v0  decode:loop 0 , 4 , move ua , v0 
[10788] c:0 is:loop 0 , 3 , move 4 + v0 , ul + v0  decode:loop 0 , 4 , move ua - 2 , v0 + 2 
[10789] c:0 is:loop 0 , 3 , move ua + v0 , v0 - 4  decode:loop 0 , 3 , move v0 + 4 , 9 / 4 
[10790] c:0 is:loop 0 , 3 , move ua + v0 , 4 - v0  decode:loop 0 , 3 , move ua + 2 , 4 - v0 
[10791] c:0 is:loop 0 , 3 , move 2 - ua , v0 * v0  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[10792] c:0 is:loop 0 , 2 , move ua - v0 , v0 - 4  decode:( move ua , 5 / 4 ; move 5 , 3 ) 
[10793] c:0 is:loop 0 , 6 , move 0 - ul , v0 + v0  decode:loop 0 , 3 , move 3 - ua , 3 
[10794] c:0 is:loop 0 , 4 , move ul - v0 , 2 + v0  decode:( move 2 , 0 ; move 4 - ua , 4 ) 
[10795] c:0 is:loop 0 , 2 , move v0 - ua , 4 - v0  decode:( move ua , ul ; move 5 , 3 ) 
[10796] c:0 is:loop 0 , 3 , move ua - v0 , v0 - 3  decode:loop 0 , 3 , move 5 , v0 - 3 
[10797] c:0 is:loop 0 , 3 , move ua - 2 , v0 * v0  decode:loop 0 , 4 , move 3 , v0 * v0 
[10798] c:0 is:loop 0 , 4 , move 2 + v0 , ul - v0  decode:loop 0 , 3 , move ua - ul , v0 - 3 
[10799] c:0 is:loop 0 , 3 , move v0 + ul , v0 - 3  decode:loop 0 , 4 , move 0 - v0 , 2 / 3 
[10800] c:0 is:loop 0 , 2 , move v0 - ua , v0 - 4  decode:( move ua , 4 * 3 ; move ua , 3 ) 
[10801] c:0 is:loop 0 , 3 , move v0 - ua , v0 - 3  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[10802] c:0 is:loop 0 , 5 , move v0 - ua , 2 + v0  decode:loop 0 , 4 , move 0 - 5 , v0 + 2 
[10803] c:0 is:loop 0 , 5 , move ua - v0 , 2 + v0  decode:loop 0 , 4 , move ua - v0 , 9 * 3 
[10804] c:0 is:( move 9 , ua / 4 ; move 3 + 4 , 2 )  decode:( move 9 , 3 / move ua , 2 ) 
[10805] c:0 is:loop 0 , 3 , move 3 + v0 , ul - v0  decode:( move 5 , ul ; move ua + 2 , ul ) 
[10806] c:0 is:loop 0 , 4 , move 2 - v0 , ul + v0  decode:0 0 loop 0 , 2 , move 2 , ul + ua 
[10807] c:0 is:loop 0 , 4 , move v0 - 2 , ul + v0  decode:( move 2 , 4 ; move ua - 4 , 4 ) 
[10808] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , v0  decode:( move 3 , 0 ; move 3 , 2 ) 
[10809] c:0 is:( move 4 + 4 , ua / 8 ; move 4 , 2 )  decode:( move 8 , 4 ; move 4 , 2 ) 
[10810] c:0 is:loop 0 , 2 , loop 1 , 2 , move ul , v1  decode:loop 0 , 2 , move 2 , ul 
[10811] c:0 is:loop 0 , 4 , move v0 + ul , v0 + 3  decode:( move 3 , 4 / ua ; move ua , 8 ) 
[10812] c:0 is:loop 0 , 4 , move 2 , v0 + v0 - ul  decode:loop 0 , 3 , move 0 - 3 , 3 - v0 
[10813] c:0 is:loop 0 , 3 , move ua - v0 , v0 - 4  decode:loop 0 , 3 , move ua - v0 , 0 - 4 
[10814] c:0 is:loop 0 , 4 , move 2 , v0 * ua - v0  decode:loop 0 , 4 , move ua - 4 , 0 - v0 
[10815] c:0 is:loop 0 , 4 , move 2 - ua , v0 * v0  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[10816] c:0 is:( move 4 , ul - 9 ; move 3 , 4 * 2 )  decode:( move 3 , 0 ; move 4 , 3 / 4 ) 
[10817] c:0 is:loop 0 , 4 , move ua - v0 , v0 - 3  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[10818] c:0 is:loop 0 , 3 , move 3 - ua , v0 * v0  decode:loop 0 , 4 , move 0 - 2 , v0 * 4 
[10819] c:0 is:( move 4 , 4 + 9 ; move 2 , ua / 4 )  decode:( move 2 , 4 ; move 4 , ua / 4 ) 
[10820] c:0 is:( move 4 , 4 + 9 ; move ua , 2 / 4 )  decode:loop 0 , 3 , move 3 + v0 , 2 / 4 
[10821] c:0 is:loop 0 , 4 , move 2 * v0 , v0 + ul  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[10822] c:0 is:loop 0 , 4 , move v0 - ua , 3 - v0  decode:( move 9 , 6 ; move ua + 2 , 4 ) 
[10823] c:0 is:( move 5 , 4 / ua ; move 4 , 4 / 3 )  decode:( move 4 , 5 ; move 5 , 5 ) 
[10824] c:0 is:loop 0 , 4 , move 3 + v0 , v0 - ul  decode:( move 9 , ul - 3 ; move ua , 2 ) 
[10825] c:0 is:loop 0 , 4 , move v0 - ua , v0 - 3  decode:loop 0 , 3 , move v0 + 4 , 0 - 3 
[10826] c:0 is:loop 0 , 3 , move ua - 2 , v0 / v0  decode:loop 0 , 3 , move 4 , v0 - 7 
[10827] c:0 is:( move 0 - ua , 0 ; move ua , 0 - 2 )  decode:( move ua , 0 ; move 5 , 5 / 4 ) 
[10828] c:0 is:loop 0 , 2 , move v0 - ua , 4 * v0  decode:( move 0 - ua , 0 ; move 5 , 4 ) 
[10829] c:0 is:loop 0 , 4 , move ul + v0 , 4 + v0  decode:( move 3 , 9 ; move ua , 4 / ua ) 
[10830] c:0 is:( move 9 , 6 * 3 ; move ua + 2 , 4 )  decode:( move 9 , 0 ; move ua + 2 , 4 ) 
[10831] c:0 is:loop 0 , 3 , move v0 - ua , v0 - 4  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[10832] c:0 is:( move 9 , ua - 4 ; move 4 , 3 * 3 )  decode:loop 0 , 4 , move 3 , 4 - 4 / 4 
[10833] c:0 is:loop 0 , 3 , move ua / v0 , 3 + v0  decode:loop 0 , 3 , move v0 + 4 , 4 
[10834] c:0 is:loop 0 , 6 , move v0 - ua , 2 + v0  decode:loop 0 , 4 , move v0 + 4 , v0 0 5 2 - 
[10835] c:0 is:loop 0 , 6 , move ua - v0 , v0 + 2  decode:loop 0 , 4 , move ua , 2 + v0 
[10836] c:0 is:loop 0 , 4 , move ua / v0 , 2 + v0  decode:loop 0 , 4 , move 4 , 2 + v0 
[10837] c:0 is:loop 0 , ua , move v0 - 4 , v0 - 3  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[10838] c:0 is:loop 0 , 4 , move 0 - v0 , ul / v0  decode:loop 0 , 3 , move 2 , v0 + 3 
[10839] c:0 is:loop 0 , 3 , move 2 - ua , v0 / v0  decode:loop 0 , 3 , move 0 - 4 , 2 - v0 
[10840] c:0 is:loop 0 , 3 , move ua - v0 , 2 / v0  decode:loop 0 , 3 , move ua - ul , 2 / v0 
[10841] c:0 is:loop 0 , 4 , move ul - 3 + v0 , v0  decode:loop 0 , 4 , move 3 - ua , v0 
[10842] c:0 is:loop 0 , 4 , move v0 + ul , 2 * v0  decode:( move ua , 9 ; move 3 , 0 - 4 ) 
[10843] c:0 is:loop 0 , 3 , move v0 - ua , 4 - v0  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[10844] c:0 is:loop 0 , 3 , move v0 - ua , 2 / v0  decode:loop 0 , 3 , move v0 - ua , 2 / 3 
[10845] c:0 is:loop 0 , 4 , move ua - 2 , v0 * v0  decode:( move ua + 2 , 0 ; move ua , 9 ) 
[10846] c:0 is:loop 0 , 3 , move ua - v0 , 4 - v0  decode:loop 0 , 3 , move ua - v0 , 4 / 3 
[10847] c:0 is:loop 0 , 3 , move ua - 3 , v0 * v0  decode:loop 0 , 3 , move 3 , v0 * v0 
[10848] c:0 is:loop 0 , 3 , move ul + v0 , v0 / 2  decode:loop 0 , 3 , move 2 , v0 / 7 
[10849] c:0 is:( move 4 , 9 * 4 ; move ua + 3 , 4 )  decode:( move 4 , 4 * 9 ; move 9 , 4 ) 
[10850] c:0 is:loop 0 , 4 , move v0 + 3 , ul - v0  decode:loop 0 , 2 , move ua + 2 , v0 - 2 
[10851] c:0 is:loop 0 , 5 , move v0 - 2 , v0 + ul  decode:( move 3 , 4 * 3 ; move 3 , 9 ) 
[10852] c:0 is:loop 0 , 5 , move v0 - ul , 2 + v0  decode:( move 2 , 0 - 2 ; move ua , 4 ) 
[10853] c:0 is:loop 0 , 5 , move v0 + ul , v0 - 2  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[10854] c:0 is:loop 0 , 4 , move ua - v0 , 3 - v0  decode:( move 9 , 3 ; move ua + 3 , ul ) 
[10855] c:0 is:loop 0 , 5 , move 2 - v0 , ul + v0  decode:( move 3 , 0 - 4 ; move 3 , 9 ) 
[10856] c:0 is:loop 0 , 4 , move ul + v0 , v0 - 3  decode:( move ua + ul , 4 ; move 3 , ul ) 
[10857] c:0 is:loop 0 , 4 , move v0 + ul , 3 - v0  decode:( move 3 , 4 ; move ua + ul , ul ) 
[10858] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , v1  decode:loop 0 , 3 , move 2 , 4 + v0 
[10859] c:0 is:loop 0 , 4 , move v0 + 2 , ua / v0  decode:( move 5 , 0 - 3 ; move 5 , 2 ) 
[10860] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , ul  decode:loop 0 , 4 , move v0 , 9 / v0 
[10861] c:0 is:loop 0 , 5 , move v0 + ul , 2 - v0  decode:loop 0 , 3 , move ul - ua , 3 - v0 
[10862] c:0 is:loop 0 , 3 , move 2 + v0 , ul / v0  decode:loop 0 , 3 , move 0 - 3 , 0 - 4 
[10863] c:0 is:loop 0 , 5 , move 3 + v0 , ua - v0  decode:loop 0 , 4 , move ua , 3 * 3 0 
[10864] c:0 is:loop 0 , 5 , move 2 + v0 , v0 - ul  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[10865] c:0 is:loop 0 , 3 , move v0 + ul , v0 - 4  decode:loop 0 , 3 , move 2 , 4 / v0 
[10866] c:0 is:loop 0 , 4 , move ul + v0 , 4 - v0  decode:( move 4 , 9 ; move 3 + 2 , ul ) 
[10867] c:0 is:loop 0 , 3 , move v0 - ua , 3 / v0  decode:loop 0 , 4 , move ua - 3 , 0 - v0 
[10868] c:0 is:loop 0 , 4 , move 2 * v0 , ul - v0  decode:( move 5 , 0 ; move ua , 0 - 2 ) 
[10869] c:0 is:( move 9 , 4 * 4 / ua ; move 3 , 2 )  decode:( move 9 , 4 / ua ; move 3 , 2 ) 
[10870] c:0 is:loop 0 , 4 , move 3 + v0 , ua / v0  decode:( move ua , ua / 3 ; move 7 , ul ) 
[10871] c:0 is:loop 0 , 5 , move ul - 3 , v0 + v0  decode:loop 0 , 4 , move ua - 4 , v0 * 2 
[10872] c:0 is:loop 0 , 5 , move ua - 4 , v0 + v0  decode:loop 0 , 4 , move 3 , v0 * 9 
[10873] c:0 is:loop 0 , 3 , move ua - v0 , 3 / v0  decode:loop 0 , 3 , move ul - ua , v0 - 3 
[10874] c:0 is:loop 0 , 4 , move 2 - ua , v0 / v0  decode:loop 0 , 4 , move 0 - 3 , v0 * 2 
[10875] c:0 is:loop 0 , 5 , move v0 - ul , 3 + v0  decode:( move 3 , 3 ; move 4 , 4 * 3 ) 
[10876] c:0 is:loop 0 , 3 , move 3 - ua , v0 / v0  decode:loop 0 , 3 , move 3 - ua , v0 * 2 
[10877] c:0 is:loop 0 , 4 , move ua / v0 , v0 + 3  decode:( move ua + 2 , 3 ; move 7 , 9 ) 
[10878] c:0 is:loop 0 , 4 , move ul + v0 , 2 / v0  decode:loop 0 , 3 , move 0 - 3 , 0 - 4 
[10879] c:0 is:( move 9 , 4 / 3 ; move ua + 4 , 4 )  decode:loop 0 , 3 , move 4 + 3 , 0 - 4 
[10880] c:0 is:loop 0 , 4 , move v0 - ua , 4 - v0  decode:loop 0 , 4 , move v0 - ua , 4 / 3 
[10881] c:0 is:loop 0 , 3 , move v0 - ua , 5 - v0  decode:loop 0 , 3 , move ua - ul , 5 - v0 
[10882] c:0 is:loop 0 , 3 , move v0 - 4 , v0 - ul  decode:( move ua , 0 - 3 ; move 2 , ul ) 
[10883] c:0 is:loop 0 , 5 , move ul + v0 , 3 - v0  decode:( move 9 , 6 ; move 4 + 3 , 4 ) 
[10884] c:0 is:loop 0 , 3 , move ua - v0 , 4 * v0  decode:loop 0 , 3 , move 4 , 4 * v0 
[10885] c:0 is:loop 0 , 3 , move ua / v0 , v0 - 3  decode:loop 0 , 3 , move v0 + 4 , ua / 4 
[10886] c:0 is:loop 0 , 5 , move ul - v0 , v0 + 3  decode:( move 2 , 0 ; move 4 , 4 * 3 ) 
[10887] c:0 is:loop 0 , 4 , move v0 + ul , v0 * 3  decode:loop 0 , 3 , move 3 - ua , 9 
[10888] c:0 is:loop 0 , 6 , move 2 - v0 , ua - v0  decode:loop 0 , 3 , move 3 , v0 + 9 
[10889] c:0 is:loop 0 , 5 , move ul + v0 , v0 - 3  decode:( move 9 , 2 / 4 ; move 4 , 4 ) 
[10890] c:0 is:loop 0 , 5 , move v0 + ul , v0 * 2  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[10891] c:0 is:loop 0 , 5 , move 3 + v0 , ul - v0  decode:loop 0 , 4 , move ua , 2 - 3 / v0 
[10892] c:0 is:loop 0 , 5 , move ul + v0 , v0 + 4  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[10893] c:0 is:loop 0 , 5 , move 4 - ua , v0 + v0  decode:loop 0 , 4 , move 3 , 3 + v0 
[10894] c:0 is:loop 0 , 5 , move ua / 2 , v0 + v0  decode:loop 0 , 4 , move 4 , 4 * v0 
[10895] c:0 is:( move 9 , 4 / 5 ; move ua + 2 , 4 )  decode:( move 9 , 4 ; move 9 , 4 ) 
[10896] c:0 is:loop 0 , 6 , move 2 + v0 , v0 - ul  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[10897] c:0 is:loop 0 , 3 , move ua - v0 , 3 / v0  decode:loop 0 , 3 , move ul - ua , v0 - 3 
[10898] c:0 is:loop 0 , 4 , move v0 - ua , v0 - 4  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[10899] c:0 is:( move 9 , 4 / 3 ; move ua - 3 , 4 )  decode:( move 9 , 4 / 3 ; move 3 , 4 ) 
[10900] c:0 is:loop 0 , 6 , move 0 - ul , v0 * v0  decode:loop 0 , 3 , move 2 - 4 , 0 - 9 
[10901] c:0 is:loop 0 , 6 , move v0 - 2 , ua - v0  decode:loop 0 , 3 , move 3 , 3 + v0 
[10902] c:0 is:loop 0 , 5 , move v0 + 2 , ua / v0  decode:loop 0 , 3 , move 4 + v0 , 9 * 3 
[10903] c:0 is:loop 0 , 4 , move v0 + ul , v0 - 4  decode:( move ul - ua , 9 ; move 4 , ul ) 
[10904] c:0 is:loop 0 , 5 , move v0 + 4 , ua - v0  decode:loop 0 , 4 , move ua + ul , 0 - 2 
[10905] c:0 is:( move ua , 0 ; move ua + 2 , 0 - 2 )  decode:( move ua , 0 - 4 ; move ua , 2 ) 
[10906] c:0 is:loop 0 , 6 , move ul - v0 , v0 + 2  decode:( move 3 , 9 / 2 ; move ua , 9 ) 
[10907] c:0 is:loop 0 , 4 , move v0 + ul , v0 / 2  decode:loop 0 , 4 , move ua - 4 , 3 / 2 
[10908] c:0 is:loop 0 , 3 , move ua / v0 , 2 * v0  decode:( move ua , 0 ; move 7 , 4 ) 
[10909] c:0 is:loop 0 , 4 , move v0 * v0 , ua - 3  decode:( move 4 , 5 * 3 ; move 9 , 3 ) 
[10910] c:0 is:loop 0 , 3 , move ua / v0 , 3 - v0  decode:( move ua + ul , 3 ; move 8 , 2 ) 
[10911] c:0 is:loop 0 , 6 , move 2 + v0 , ul - v0  decode:0 0 loop 0 , 4 , move ua , ua / 5 
[10912] c:0 is:loop 0 , 4 , move ua - 3 , v0 * v0  decode:loop 0 , 4 , move ua - 3 , v0 / 2 
[10913] c:0 is:loop 0 , 3 , move ua , v0 * 4 - v0  decode:( move 7 , 4 ; move ua + ul , 7 ) 
[10914] c:0 is:loop 0 , 4 , move 3 , v0 - ul - v0  decode:loop 0 , 4 , move 0 - 3 , v0 - 5 
[10915] c:0 is:loop 0 , 4 , move ua - 2 , v0 / v0  decode:loop 0 , 4 , move 4 , v0 / v4 
[10916] c:0 is:( move ua + 2 , 0 ; move ua , 0 - 2 )  decode:( move ua + ul , 0 ; move 7 , 2 ) 
[10917] c:0 is:loop 0 , 6 , move 2 - v0 , v0 + ul  decode:( move 5 , 0 - 4 ; move 4 , 9 ) 
[10918] c:0 is:loop 0 , 5 , move v0 + 3 , v0 - ul  decode:loop 0 , 4 , move ua , 3 + v0 
[10919] c:0 is:loop 0 , 6 , move v0 - 2 , v0 + ul  decode:( move 4 , 2 - 3 ; move 5 , 4 ) 
[10920] c:0 is:loop 0 , 4 , move 3 - ua , v0 * v0  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[10921] c:0 is:loop 0 , 4 , move ua - v0 , 4 - v0  decode:loop 0 , 4 , move ua - ul , 4 - v0 
[10922] c:0 is:loop 0 , 5 , move v0 * 2 , ua - v0  decode:loop 0 , 4 , move 3 + 3 , 2 / v0 
[10923] c:0 is:( move ua , 4 - 9 ; move 4 , 3 * 4 )  decode:loop 0 , 3 , move v0 - 4 , 7 
[10924] c:0 is:loop 0 , 6 , move v0 - ul , v0 + 2  decode:( move 3 , 9 / 2 ; move ua , 9 ) 
[10925] c:0 is:loop 0 , 4 , move 2 * v0 , v0 - ul  decode:( move 5 , 0 ; move ua , 2 ) 
[10926] c:0 is:loop 0 , 5 , move v0 - ul , v0 - 2  decode:loop 0 , 3 , move ua - 4 , ua / v0 
[10927] c:0 is:loop 0 , 6 , move v0 + ul , 2 - v0  decode:loop 0 , 3 , move ua + ul , 2 - v0 
[10928] c:0 is:loop 0 , 3 , move v0 - ua , v0 * 4  decode:loop 0 , 3 , move 4 , 4 * v0 
[10929] c:0 is:loop 0 , 3 , move ua - 3 , v0 / v0  decode:loop 0 , 3 , move 3 - ua , v0 * 3 
[10930] c:0 is:loop 0 , 4 , move ua - v0 , v0 - 4  decode:loop 0 , 4 , move 4 + v0 , 9 / 2 
[10931] c:0 is:loop 0 , 4 , move v0 * 3 , v0 + ul  decode:( move ua , 6 ; move ua + 3 , 4 ) 
[10932] c:0 is:loop 0 , 5 , move ua - 3 , v0 * v0  decode:loop 0 , 4 , move 4 , v0 * ua 
[10933] c:0 is:loop 0 , 6 , move ul - v0 , v0 - 2  decode:loop 0 , 4 , move 3 / v0 , 0 - 9 
[10934] c:0 is:loop 0 , 4 , move ul + v0 , v0 / 3  decode:loop 0 , 4 , move 4 - ua , 2 / 3 
[10935] c:0 is:loop 0 , 4 , move ua - v0 , 3 / v0  decode:loop 0 , 3 , move ua - ul , 3 * v0 
[10936] c:0 is:loop 0 , 3 , move 3 / v0 , v0 - ul  decode:( move ua , 2 - 3 ; move ul , ul ) 
[10937] c:0 is:loop 0 , 3 , move ua / v0 , v0 - 4  decode:loop 0 , 4 , move 4 , 0 - 4 - v0 
[10938] c:0 is:loop 0 , 7 , move v0 - 2 , ul + v0  decode:( move 3 , 0 ; move ua + 2 , 4 ; ) 4 
[10939] c:0 is:loop 0 , 5 , move ul - v0 , 2 * v0  decode:loop 0 , 2 , move 3 - ua , 0 - 8 
[10940] c:0 is:loop 0 , 4 , move 4 - v0 , ul - v0  decode:( move ua + ul , ul ; move 2 , ul ) 
[10941] c:0 is:loop 0 , 6 , move v0 + ul , 3 - v0  decode:( move 9 , 6 ; move ua + 4 , 4 ) 
[10942] c:0 is:loop 0 , 3 , move ua - v0 , 4 / v0  decode:loop 0 , 4 , move 4 , 4 / v0 
[10943] c:0 is:loop 0 , 6 , move v0 - ul , v0 - 2  decode:loop 0 , 4 , move 3 , ua / 2 - v0 
[10944] c:0 is:loop 0 , 4 , move ul + v0 , 3 / v0  decode:loop 0 , 3 , move 3 , 3 * 4 / v0 
[10945] c:0 is:loop 0 , 5 , move v0 - ua , 4 - v0  decode:loop 0 , 4 , move 0 - 5 , v0 - 9 
[10946] c:0 is:loop 0 , 5 , move 2 * v0 , v0 - ul  decode:loop 0 , 4 , move 2 - ua , v0 * 8 
[10947] c:0 is:loop 0 , 4 , move 3 * v0 , v0 - ul  decode:( move ua + ul , 0 ; move 9 , 2 ) 
[10948] c:0 is:( move 4 , 3 - 9 ; move 4 , ua / 4 )  decode:( move 4 , 5 ; move 4 , 3 / 2 ) 
[10949] c:0 is:loop 0 , 7 , move ul + v0 , 2 - v0  decode:loop 0 , 4 , move ua , 0 - 4 - v0 
[10950] c:0 is:( move 0 - ua , 9 ; move 9 , 4 * 3 )  decode:( move ua , 9 ; move 9 , 9 ) 
[10951] c:0 is:loop 0 , 6 , move v0 - 3 , ul + v0  decode:( move 4 , 3 * 3 ; move 4 , 3 ) 
[10952] c:0 is:loop 0 , 3 , move v0 - ua , 6 - v0  decode:( move ua + ul , 6 ; move 8 , 4 ) 
[10953] c:0 is:loop 0 , 6 , move ul - v0 , 3 + v0  decode:loop 0 , 4 , move 0 - 3 , 4 / 4 
[10954] c:0 is:loop 0 , 6 , move ua - 4 , v0 + v0  decode:loop 0 , 4 , move 3 , v0 * ua 
[10955] c:0 is:loop 0 , 6 , move v0 - ul , 2 - v0  decode:loop 0 , 4 , move 0 - 3 , v0 * 2 
[10956] c:0 is:loop 0 , 4 , move ua / v0 , 3 - v0  decode:( move ua + ul , 9 ; move 8 , ul ) 
[10957] c:0 is:loop 0 , 6 , move 3 + v0 , v0 - ul  decode:loop 0 , 4 , move 3 + 4 , 3 + v0 
[10958] c:0 is:loop 0 , 4 , move ua / v0 , v0 * 2  decode:0 loop 0 , 4 , move v0 + 4 , v0 0 
[10959] c:0 is:loop 0 , 7 , move 2 - v0 , v0 + ul  decode:( move 3 , 2 ; move 4 , 0 - 4 ) 
[10960] c:0 is:loop 0 , 3 , move ua / v0 , 2 / v0  decode:loop 0 , 3 , move ua - v0 , 2 / 0 
[10961] c:0 is:loop 0 , 3 , move ua - 4 , v0 / v0  decode:loop 0 , 4 , move v0 , v0 / v0 
[10962] c:0 is:loop 0 , 5 , move ua - v0 , 4 - v0  decode:loop 0 , 4 , move 4 + v0 , 4 / 3 
[10963] c:0 is:loop 0 , 4 , move ul + v0 , v0 + 6  decode:loop 0 , 4 , move ua - 4 , 9 
[10964] c:0 is:loop 0 , 6 , move ul - 3 , v0 + v0  decode:loop 0 , 3 , move 3 - ua , 3 + v0 
[10965] c:0 is:loop 0 , 7 , move v0 - ul , 2 + v0  decode:loop 0 , 3 , move ua - 2 , v0 - 9 
[10966] c:0 is:loop 0 , 5 , move v0 * 2 , ul - v0  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[10967] c:0 is:loop 0 , 4 , move ul + v0 , v0 * 4  decode:( move 3 , 2 ; move ua + ul , 8 ) 
[10968] c:0 is:loop 0 , 6 , move v0 - 2 , ul - v0  decode:loop 0 , 2 , move 4 , 0 - 9 
[10969] c:0 is:loop 0 , 6 , move 3 - v0 , ua - v0  decode:loop 0 , 4 , move ua - 4 , ua / v0 
[10970] c:0 is:loop 0 , 4 , move v0 - ua , 3 / v0  decode:loop 0 , 4 , move 0 - 4 , 3 / 4 
[10971] c:0 is:loop 0 , 4 , move v0 * 2 , ua / v0  decode:( move 3 - ua , 0 ; move ua , 2 ) 
[10972] c:0 is:( move ua , 0 ; move ua + 3 , 0 - 2 )  decode:( move 9 , 0 - 4 ; move ua , 2 ) 
[10973] c:0 is:loop 0 , 6 , move ul + v0 , v0 - 3  decode:( move ua + 4 , 2 ; move ua , 4 ) 
[10974] c:0 is:( move 2 - ua , 0 ; move ua , 0 - 2 )  decode:( move 4 , 0 - 5 ; move 4 , 2 ) 
[10975] c:0 is:loop 0 , 5 , move ua - v0 , v0 - 4  decode:loop 0 , 4 , move 5 , 3 * 3 - v0 
[10976] c:0 is:loop 0 , 6 , move 3 + v0 , ul - v0  decode:loop 0 , 4 , move 4 + 3 , 4 * 3 
[10977] c:0 is:loop 0 , 5 , move v0 + ul , v0 * 3  decode:( move 5 , 2 * 3 ; move 5 , 4 ) 
[10978] c:0 is:loop 0 , 3 , move ul + v0 , 4 / v0  decode:loop 0 , 4 , move v0 , v0 / 2 
[10979] c:0 is:( move 9 , ua / 3 ; move 4 + 5 , 4 )  decode:( move 9 , 2 ; move 4 + 4 , 4 ) 
[10980] c:0 is:loop 0 , 4 , move ua - v0 , 5 - v0  decode:loop 0 , 4 , move ua - ul , 5 - v0 
[10981] c:0 is:loop 0 , 3 , move v0 - 4 , v0 / ua  decode:( move 3 , 3 ; move ua , 2 / 4 ) 
[10982] c:0 is:loop 0 , 6 , move ul + v0 , v0 + 4  decode:loop 0 , 4 , move v0 - ua , 0 - 8 
[10983] c:0 is:loop 0 , 4 , move ua / v0 , v0 - 3  decode:loop 0 , 3 , move ua , v0 - 3 
[10984] c:0 is:loop 0 , 4 , move v0 + 4 , ua / v0  decode:( move ua , 2 ; move 8 , ua / 3 ) 
[10985] c:0 is:loop 0 , 6 , move 3 - v0 , v0 + ul  decode:( move 4 , ul ; move 4 , 3 ) 
[10986] c:0 is:loop 0 , 4 , move 3 * v0 , ul - v0  decode:( move 0 - ua , 0 ; move ua , 2 ) 
[10987] c:0 is:( move 3 , 4 - 9 ; move ua , 4 * 5 )  decode:( move ua , 3 * 5 ; move 3 , ul ) 
[10988] c:0 is:loop 0 , 5 , move v0 - ul , 2 * v0  decode:( move 3 , 9 - 2 ; move 3 , 8 ) 
[10989] c:0 is:loop 0 , 6 , move v0 - 3 , ua - v0  decode:loop 0 , 4 , move 0 - 2 , v0 * 4 
[10990] c:0 is:loop 0 , 5 , move 3 - ua , v0 * v0  decode:loop 0 , 4 , move 0 - 4 , 0 - 0 8 
[10991] c:0 is:loop 0 , 4 , move 2 * v0 , v0 / ua  decode:0 loop 0 , 4 , move 3 , ua / ua 
[10992] c:0 is:loop 0 , 3 , move v0 - ua , 4 / v0  decode:loop 0 , 4 , move ua - 3 , ua / v0 
[10993] c:0 is:loop 0 , 5 , move v0 + v0 , ua / 3  decode:loop 0 , 4 , move 4 + v0 , ua / 3 
[10994] c:0 is:loop 0 , 7 , move v0 - 2 , ua - v0  decode:( move ua , ua / 4 ; move 5 , 5 ) 
[10995] c:0 is:loop 0 , 4 , move ua - 3 , v0 / v0  decode:loop 0 , 3 , move 4 , v0 / v0 
[10996] c:0 is:( move 0 - 2 , 0 ; move ua + 2 , ul )  decode:( move 2 , 0 ; move 8 , ul ) 
[10997] c:0 is:loop 0 , 4 , move ua - v0 , v0 - 5  decode:loop 0 , 4 , move 4 , v0 - 5 
[10998] c:0 is:loop 0 , 7 , move v0 + ul , v0 - 2  decode:loop 0 , 4 , move ua + ul , 0 - v0 0 
[10999] c:0 is:loop 0 , 3 , move 3 / v0 , ul - v0  decode:( move ua , ul ; move ul , ul ) 
[11000] c:0 is:loop 0 , 7 , move ul - v0 , 2 + v0  decode:loop 0 , 3 , move v0 - ua , 4 ) 
[11001] c:0 is:loop 0 , 5 , move ul + v0 , v0 / 2  decode:loop 0 , 4 , move 4 , 3 / v0 
[11002] c:0 is:loop 0 , 5 , move v0 - ul , 4 + v0  decode:loop 0 , 3 , move 4 - ua , v0 / 4 
[11003] c:0 is:loop 0 , 6 , move 4 - ua , v0 + v0  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[11004] c:0 is:( move ua , 0 ; move 2 - ua , 0 - 2 )  decode:( move ua , 0 ; move 4 , 4 * 5 ) 
[11005] c:0 is:loop 0 , 7 , move 2 - v0 , ua - v0  decode:( move ul - ua , 2 ; move ua , 5 ) 
[11006] c:0 is:loop 0 , 6 , move 2 - v0 , ul - v0  decode:loop 0 , 2 , move 0 - 4 , 0 - 9 
[11007] c:0 is:loop 0 , 4 , move 3 - ua , v0 / v0  decode:loop 0 , 3 , move 0 - 4 , 2 / v0 
[11008] c:0 is:( move ua + 2 , 0 ; move ua , 0 - 3 )  decode:( move ua + 2 , / ul move ua , 3 ) 
[11009] c:0 is:( move ua + 2 , 2 ; move ua , 0 - 2 )  decode:( move ua , 2 ; move 8 , 0 - 2 ) 
[11010] c:0 is:( move 3 - ua , 0 ; move ua , 0 - 2 )  decode:( move 3 , 0 - 4 ; move 7 , 2 ) 
[11011] c:0 is:loop 0 , 7 , move v0 + ul , v0 + 4  decode:loop 0 , 4 , move 0 - 5 , 9 * 3 
[11012] c:0 is:loop 0 , 5 , move ul - 3 , v0 * v0  decode:loop 0 , 4 , move ul - v0 , 0 - 9 
[11013] c:0 is:loop 0 , 7 , move 2 - v0 , v0 - ul  decode:( move 5 , 9 ; move ua , 4 - 3 ) 
[11014] c:0 is:( move ua + 2 , 0 ; move ua + 3 , 2 )  decode:( move ua + 2 , 0 ; move ua , 2 ) 
[11015] c:0 is:loop 0 , 7 , move v0 - 3 , ul + v0  decode:( move ul - ua , ul ; move ua , 7 ) 
[11016] c:0 is:loop 0 , 4 , move ua / v0 , 4 - v0  decode:loop 0 , 4 , move v0 - 4 , 4 - 3 
[11017] c:0 is:loop 0 , 7 , move 3 - v0 , v0 + ul  decode:( move ua , 0 - 2 ; move ua , 7 ) 
[11018] c:0 is:loop 0 , 5 , move v0 - ua , 3 / v0  decode:loop 0 , 4 , move 0 - 4 , 3 / 4 
[11019] c:0 is:loop 0 , 6 , move v0 - 3 , v0 - ul  decode:loop 0 , 3 , move 3 , 4 * v0 
[11020] c:0 is:loop 0 , 5 , move ul - v0 , v0 / 2  decode:( move 3 , 0 - 3 ; move 3 , 2 ) 
[11021] c:0 is:loop 0 , 4 , move ua - v0 , 4 / v0  decode:loop 0 , 4 , move ua - ul , 4 / v0 
[11022] c:0 is:( move ua , 0 ; move ua + 2 , 0 - 4 )  decode:( move ua , 0 ; move 9 , 0 - 4 ) 
[11023] c:0 is:( move ul - ua , 0 ; move 2 , 0 - 2 )  decode:( move 5 , 0 ; move 4 - ua , 2 ) 
[11024] c:0 is:loop 0 , 5 , move ua - v0 , 3 / v0  decode:loop 0 , 4 , move 2 - ua , 3 * v0 
[11025] c:0 is:loop 0 , 7 , move ul - v0 , v0 - 2  decode:loop 0 , 4 , move 2 - ua , 4 * 4 
[11026] c:0 is:loop 0 , 6 , move 2 - v0 , ua / v0  decode:( move 3 , 0 ; move 5 , 0 - 4 ) 
[11027] c:0 is:loop 0 , 3 , move ua / v0 , 3 / v0  decode:loop 0 , 3 , move ul - ua , v0 - 4 
[11028] c:0 is:loop 0 , 6 , move v0 - 3 , ul - v0  decode:( move ul - ua , ul ; move 3 , 7 ) 
[11029] c:0 is:loop 0 , 7 , move ul - v0 , 3 + v0  decode:loop 0 , 4 , move 0 - 4 , 0 - 8 
[11030] c:0 is:loop 0 , 5 , move v0 + ul , v0 / 3  decode:loop 0 , 3 , move 4 , 2 - v0 / 2 
[11031] c:0 is:loop 0 , 4 , move ua - 4 , v0 / v0  decode:loop 0 , 3 , move 3 , v0 / v0 
[11032] c:0 is:loop 0 , 6 , move ul - v0 , v0 * 2  decode:loop 0 , 3 , move 3 - ua , v0 - 4 
[11033] c:0 is:loop 0 , 7 , move 4 - ua , v0 + v0  decode:loop 0 , 4 , move 0 - 4 , v0 * 4 
[11034] c:0 is:loop 0 , 5 , move ua / v0 , 3 - v0  decode:( move 7 , 9 ; move 0 - 7 , ul ) 
[11035] c:0 is:loop 0 , 5 , move v0 - ul , 4 - v0  decode:( move 2 , ua / 4 ; move ua , 2 ) 
[11036] c:0 is:loop 0 , 6 , move v0 / 2 , ua - v0  decode:loop 0 , 3 , move ua - 4 , v0 + 4 
[11037] c:0 is:loop 0 , 6 , move v0 - ul , 3 - v0  decode:loop 0 , 3 , move 0 - 4 , 3 - v0 
[11038] c:0 is:loop 0 , 4 , move ua / v0 , 2 / v0  decode:loop 0 , 4 , move ua - 2 , 2 / v0 
[11039] c:0 is:loop 0 , 5 , move ul + v0 , 4 * v0  decode:loop 0 , 3 , move 0 - ua , 0 - 9 
[11040] c:0 is:loop 0 , 6 , move 3 - ua , v0 * v0  decode:loop 0 , 4 , move ua - v0 , 4 / 8 
[11041] c:0 is:( move 4 , 0 ; move 0 - ua , 0 - ul )  decode:( move 3 , 0 ; move ua , ua / 3 ) 
[11042] c:0 is:loop 0 , 7 , move ua - 4 , v0 + v0  decode:loop 0 , 4 , move 4 , 0 - 3 / v0 
[11043] c:0 is:( move 0 - 3 , 0 ; move ua + ul , 2 )  decode:0 move move , 0 move 3 + move ua , 2 ) 
[11044] c:0 is:loop 0 , 4 , move 3 * v0 , ua / v0  decode:( move ua , 0 ; move 9 , 2 ) 
[11045] c:0 is:loop 0 , 7 , move 3 - v0 , ua - v0  decode:0 0 loop 0 , 3 , move 4 , 0 - v0 
[11046] c:0 is:loop 0 , 7 , move ua / v0 , v0 + 2  decode:loop 0 , 4 , move 4 * v0 , 9 * 2 
[11047] c:0 is:loop 0 , 4 , move 4 , v0 * ul - v0  decode:loop 0 , 2 , move ua + 2 , ua / ua 
[11048] c:0 is:loop 0 , 4 , move v0 - ua , 4 / v0  decode:loop 0 , 4 , move ua - ul , 4 / v0 
[11049] c:0 is:loop 0 , 6 , move v0 - ul , v0 * 2  decode:loop 0 , 3 , move 3 + v0 , 9 / 3 
[11050] c:0 is:loop 0 , 5 , move ua / v0 , v0 - 3  decode:loop 0 , 3 , move v0 + ua , 0 - 3 
[11051] c:0 is:loop 0 , 6 , move ul - 4 , v0 + v0  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[11052] c:0 is:loop 0 , 4 , move v0 + ul , v0 / 4  decode:loop 0 , 3 , move 3 , ua / 7 
[11053] c:0 is:loop 0 , 4 , move v0 + ul , 4 / v0  decode:loop 0 , 3 , move 3 - ua , v0 + 9 
[11054] c:0 is:loop 0 , 3 , move 4 / v0 , v0 - ul  decode:( move 2 , 3 ; move ua , 2 - 3 ) 
[11055] c:0 is:loop 0 , 5 , move v0 - ul , 2 / v0  decode:( move 3 , 3 ; move 4 , 4 / 3 ) 
[11056] c:0 is:loop 0 , 6 , move ul + v0 , v0 / 2  decode:0 0 loop 0 , 4 , move ua - ul , 0 - 2 
[11057] c:0 is:loop 0 , 5 , move v0 - ul , v0 - 4  decode:( move 2 , 4 * 3 ; move ua , 8 ) 
[11058] c:0 is:loop 0 , 7 , move 2 - v0 , ul - v0  decode:loop 0 , 3 , move v0 + 4 , 4 / 3 
[11059] c:0 is:loop 0 , 6 , move 2 - v0 , v0 / ua  decode:( move 3 , 0 ; move ua , 0 - 8 ) 
[11060] c:0 is:loop 0 , 7 , move v0 - ul , 3 + v0  decode:loop 0 , 4 , move ua - ul , 0 - 8 
[11061] c:0 is:( move 2 - ua , 0 ; move ua + 2 , 2 )  decode:( move 4 , 2 ; move ua + 2 , 2 ) 
[11062] c:0 is:loop 0 , 4 , move 4 - ua , v0 / v0  decode:loop 0 , 3 , move 3 , 4 * 0 - v0 
[11063] c:0 is:( move 0 - ua , 0 ; move ua , 2 - 3 )  decode:( move ua , 3 ; move ua , 0 - 2 ) 
[11064] c:0 is:loop 0 , 6 , move 3 - v0 , v0 - ul  decode:loop 0 , 3 , move v0 + 2 , 2 - 3 
[11065] c:0 is:loop 0 , 3 , move 4 / v0 , ul - v0  decode:( move 9 , 0 ; move 2 , 2 - 3 ) 
[11066] c:0 is:loop 0 , 7 , move v0 - 2 , v0 - ul  decode:( move ul - ua , 9 ; move ua , 5 ) 
[11067] c:0 is:loop 0 , 6 , move v0 - ul , 4 + v0  decode:loop 0 , 4 , move 3 - ua , 0 - 3 
[11068] c:0 is:loop 0 , 3 , move v0 - ua , 8 + v0  decode:loop 0 , 3 , move v0 - ua , 0 - 8 
[11069] c:0 is:loop 0 , 3 , move 4 - v0 , ul / v0  decode:loop 0 , 3 , move 3 , 2 / v0 
[11070] c:0 is:loop 0 , 7 , move ul - 3 , v0 + v0  decode:loop 0 , 4 , move 3 - ua , ua / v0 
[11071] c:0 is:loop 0 , 3 , move ua / v0 , v0 * 4  decode:loop 0 , 3 , move 4 + v0 , 4 * 4 
[11072] c:0 is:loop 0 , 6 , move 3 - v0 , ul - v0  decode:( move 5 , ul ; move 4 , 7 + 4 ) 
[11073] c:0 is:( move ua + ul , 0 ; move 3 , 0 - 2 )  decode:( move ua , 0 ; move 3 , 0 - 2 ) 
[11074] c:0 is:loop 0 , 6 , move v0 / 2 , ul + v0  decode:( move 3 , 9 + 2 ; move 4 , 8 ) 
[11075] c:0 is:loop 0 , 6 , move ul - v0 , 4 + v0  decode:loop 0 , 4 , move 3 , 4 / 3 / v0 
[11076] c:0 is:loop 0 , 7 , move v0 - ul , 2 - v0  decode:0 0 loop 0 , 4 , move 4 , 9 - 5 
[11077] c:0 is:( move 9 , 2 / 6 ; move 4 , ua - 4 )  decode:( move 4 , 4 * 3 ; move ua , 4 ) 
[11078] c:0 is:loop 0 , 5 , move ul + v0 , 3 / v0  decode:loop 0 , 3 , move 4 + v0 , 3 - 3 
[11079] c:0 is:( move ua , 0 - 2 ; move ua + 2 , 2 )  decode:( move ua + 2 , 0 ; move 8 , 2 ) 
[11080] c:0 is:( move 0 - ua , 0 ; move ua - 3 , 2 )  decode:( move 0 - ua , 0 ; move 4 , 2 ) 
[11081] c:0 is:( move 0 - ua , 0 - 2 ; move 2 , ul )  decode:( move 2 , 0 - 4 ; move ua , 2 ) 
[11082] c:0 is:( move ua + 2 , 0 - 2 ; move ua , 2 )  decode:( move ua , 0 - 9 ; move 9 , 2 ) 
[11083] c:0 is:( move 2 , 0 ; move ul - ua , 0 - 2 )  decode:( move 2 , 0 ; move 5 , ul ) 
[11084] c:0 is:loop 0 , 3 , move v0 - 4 , ul / v0  decode:loop 0 , 3 , move 3 - ua , 2 / 4 
[11085] c:0 is:loop 0 , 5 , move v0 + v0 , ua / 4  decode:loop 0 , 3 , move ua , 0 - 8 0 * 4 
[11086] c:0 is:loop 0 , 7 , move v0 - 2 , ul - v0  decode:( move ua , ua / 4 ; move ua , 4 ) 
[11087] c:0 is:loop 0 , 5 , move ua - 4 , v0 * v0  decode:( move 5 , 0 ; move 4 , 4 * 4 ) 
[11088] c:0 is:loop 0 , 6 , move ul + v0 , 3 * v0  decode:loop 0 , 3 , move ul - ua , v0 * ul 
[11089] c:0 is:loop 0 , 3 , move 4 , v0 - ul / v0  decode:( move ua , 0 - 9 ; move 8 , 8 ) 
[11090] c:0 is:( move ua , 0 ; move 3 - ua , 0 - 2 )  decode:( move ua , 0 ; move 3 , 4 / 3 ) 
[11091] c:0 is:loop 0 , 7 , move v0 - ul , v0 - 2  decode:loop 0 , 4 , move 4 , 4 * 4 
[11092] c:0 is:( move ua + 3 , 2 ; move ua , 0 - 2 )  decode:( move 9 , 2 ; move ua , 0 - 2 ) 
[11093] c:0 is:loop 0 , 7 , move ul - v0 , 3 - v0  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[11094] c:0 is:loop 0 , 6 , move v0 - ul , v0 / 2  decode:loop 0 , 3 , move 4 , 0 - 3 
[11095] c:0 is:loop 0 , 5 , move ua - v0 , 4 / v0  decode:loop 0 , 4 , move ua - ul , 4 * v0 
[11096] c:0 is:( move 4 , ul / 9 ; move 4 , 2 / 4 )  decode:loop 0 , 4 , move 2 , 2 / 4 
[11097] c:0 is:loop 0 , 6 , move ul - v0 , v0 / 2  decode:loop 0 , 4 , move 3 , 3 0 + ua - 3 
[11098] c:0 is:loop 0 , 6 , move 3 - v0 , v0 / ua  decode:( move 3 , 0 - 4 ; move ua , ul ) 
[11099] c:0 is:loop 0 , 4 , move v0 * v0 , ua / 4  decode:( move 9 , 0 ; move 4 , ua / 4 ) 
[11100] c:0 is:loop 0 , 6 , move v0 - 3 , ua / v0  decode:( move 0 - 4 , 0 ; move 4 , ul ) 
[11101] c:0 is:loop 0 , 7 , move ua - 3 , v0 * v0  decode:loop 0 , 4 , move v0 + v0 , 0 0 ua ua ua / 
[11102] c:0 is:loop 0 , 4 , move v0 - 4 , ul / v0  decode:loop 0 , 3 , move 3 - ua , ul / v0 
[11103] c:0 is:loop 0 , 4 , move v0 - ul , 4 / v0  decode:0 loop 0 , 4 , move ul , 4 0 / / 0 0 0 0 0 0 0 0 / 
[11104] c:0 is:loop 0 , 5 , move v0 - ul , v0 / 3  decode:loop 0 , 4 , move 2 , ua / ua 
[11105] c:0 is:( move 0 - ua , 0 ; move 2 - ua , 4 )  decode:( move 0 - ua , 0 ; move 4 , 4 ) 
[11106] c:0 is:( move 4 , 0 ; move ua + ul , 0 - 2 )  decode:( move 4 , 0 ; move 5 , 0 - 2 ) 
[11107] c:0 is:loop 0 , 7 , move 4 - v0 , v0 + ul  decode:loop 0 , 3 , move ua - 2 , ua / v0 
[11108] c:0 is:loop 0 , 6 , move 3 - v0 , ua / v0  decode:( move 3 , 0 ; move 4 , 5 + 3 ) 
[11109] c:0 is:loop 0 , 3 , move 4 * v0 , ul / v0  decode:loop 0 , 3 , move 4 , v0 / 4 
[11110] c:0 is:loop 0 , 4 , move ua / v0 , 3 / v0  decode:loop 0 , 4 , move 2 - ua , 3 - v0 
[11111] c:0 is:( move 2 , 0 - 2 ; move ua + ul , 2 )  decode:( move ua + ul , 0 ; move 2 , 2 ) 
[11112] c:0 is:loop 0 , 4 , move ua / v0 , 4 * v0  decode:loop 0 , 3 , move 4 + v0 , 0 - 4 
[11113] c:0 is:loop 0 , 7 , move v0 - ul , 2 * v0  decode:( move ua + 2 , 3 + move ua , 4 ) 
[11114] c:0 is:loop 0 , 6 , move 3 / v0 , ul + v0  decode:loop 0 , 3 , move 3 , v0 + 9 
[11115] c:0 is:loop 0 , 7 , move v0 - 2 , ua / v0  decode:loop 0 , 3 , move 4 , 3 - v0 
[11116] c:0 is:( move 0 - 2 , 2 ; move ua + 2 , ul )  decode:( move ua + 2 , 3 ; move 2 , 2 ) 
[11117] c:0 is:( move ua , 0 ; move ua - 2 , 0 - 4 )  decode:( move 4 , 0 ; move 5 , 0 - 4 ) 
[11118] c:0 is:loop 0 , 6 , move ua - 4 , v0 * v0  decode:loop 0 , 4 , move 3 - ua , 4 * v0 
[11119] c:0 is:loop 0 , 7 , move 4 - v0 , ua - v0  decode:loop 0 , 4 , move 3 , 0 - v0 
[11120] c:0 is:loop 0 , 3 , move 3 / v0 , ul / v0  decode:loop 0 , 3 , move 3 / v0 , ul / 4 
[11121] c:0 is:loop 0 , 6 , move v0 - ul , v0 - 4  decode:( move 4 , 2 / 4 ; move ua , ul ) 
[11122] c:0 is:loop 0 , 7 , move 2 - v0 , v0 / ua  decode:( move ua + ul , 9 ; move 5 , 4 ) 
[11123] c:0 is:loop 0 , 7 , move v0 / 2 , v0 + ul  decode:loop 0 , 4 , move 2 , 0 - 6 - v0 
[11124] c:0 is:( move 2 - ua , 0 ; move ua + 3 , 2 )  decode:( move 0 - ua , 0 ; move 3 , 2 ) 
[11125] c:0 is:loop 0 , 7 , move v0 - 4 , v0 + ul  decode:( move 5 , 0 - 2 ; move ua , 5 ) 
[11126] c:0 is:loop 0 , 3 , move ua / v0 , 4 / v0  decode:loop 0 , 4 , move 4 , 4 / v0 
[11127] c:0 is:( move 0 - 4 , 0 ; move ua + ul , 2 )  decode:loop 0 , 3 , move 3 + v0 , 2 * 3 
[11128] c:0 is:loop 0 , 7 , move v0 - 3 , ul - v0  decode:( move ua + ul , 4 ; move 4 , 4 ) 
[11129] c:0 is:loop 0 , 7 , move ul - 4 , v0 + v0  decode:loop 0 , 4 , move ul - ua , v0 - 4 
[11130] c:0 is:loop 0 , 7 , move 3 - v0 , v0 - ul  decode:( move ua , ul - move ua , 4 - 4 ) 
[11131] c:0 is:loop 0 , 6 , move ul - 3 , v0 * v0  decode:loop 0 , 4 , move 3 - ua , 7 * v0 
[11132] c:0 is:loop 0 , 5 , move ul - v0 , v0 / 3  decode:loop 0 , 3 , move 0 - 2 , v0 * 4 
[11133] c:0 is:loop 0 , 7 , move ul - v0 , 2 * v0  decode:loop 0 , 3 , move v0 - ua , 4 + 0 + 4 
[11134] c:0 is:loop 0 , 5 , move v0 - ua , 4 / v0  decode:loop 0 , 4 , move ua - ul , 7 / v0 
[11135] c:0 is:loop 0 , 6 , move v0 - 4 , ul - v0  decode:( move ua , ul ; move 3 , 0 - 7 ) 
[11136] c:0 is:loop 0 , 5 , move v0 - 3 , ul / v0  decode:( move 5 , 2 ; move 3 , 0 - 2 ) 
[11137] c:0 is:loop 0 , 6 , move 4 - v0 , ul - v0  decode:( move ua + ul , ul ; move 2 , 8 ) 
[11138] c:0 is:loop 0 , 6 , move ul + v0 , v0 / 3  decode:loop 0 , 4 , move 4 , 8 
[11139] c:0 is:loop 0 , 6 , move 2 - v0 , ul / v0  decode:( move 0 - 3 , 0 ; move 3 , ul ) 
[11140] c:0 is:( move 0 - ua , 3 ; move ua + 2 , 2 )  decode:( move ul - ua , 3 ; move 8 , 2 ) 
[11141] c:0 is:loop 0 , 6 , move ul - v0 , v0 - 4  decode:( move 9 , 4 * 3 ; move 3 , ul ) 
[11142] c:0 is:( move 2 - ua , 0 - 2 ; move ua , 2 )  decode:( move ua , 5 / 4 ; move ua , 2 ) 
[11143] c:0 is:( move ua + 2 , 3 ; move ua , 0 - 2 )  decode:( move ua , 2 ; move 8 , 0 - 2 ) 
[11144] c:0 is:loop 0 , 7 , move ul - v0 , v0 - 3  decode:loop 0 , 4 , move v0 - 4 , 0 - 3 
[11145] c:0 is:( move 3 - ua , 0 ; move ua + 2 , 2 )  decode:( move 3 , 0 - 2 ; move 8 , 2 ) 
[11146] c:0 is:( move ul - ua , 0 ; move 3 , 0 - 2 )  decode:( move 0 - 4 , 0 ; move 5 , 2 ) 
[11147] c:0 is:( move 2 , 2 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 0 ; move 2 , 2 ) 
[11148] c:0 is:loop 0 , 4 , move ul + v0 , v0 + 8  decode:loop 0 , 3 , move 3 - ua , 4 / 4 
[11149] c:0 is:( move ua + 3 , 0 - 2 ; move ua , 2 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[11150] c:0 is:loop 0 , 4 , move 4 / v0 , ul - v0  decode:( move 9 , ul ; move 2 , ul ) 
[11151] c:0 is:( move 0 - 3 , 0 ; move ul - ua , 2 )  decode:( move 3 , ua - 0 ; move 5 , 2 ) 
[11152] c:0 is:( move ua , 0 - 2 ; move 2 - ua , 2 )  decode:( move 4 , 0 ; move ua , 5 * 4 ) 
[11153] c:0 is:( move 0 - 3 , 0 - 2 ; move ua , ul )  decode:( move 3 , 4 / 4 ; move ua , ul ) 
[11154] c:0 is:loop 0 , 5 , move v0 + ul , 4 / v0  decode:( move ua + ul , 9 ; move ua , 2 ) 
[11155] c:0 is:( move ua + 2 , 0 - 3 ; move ua , 2 )  decode:( move ua + 2 , 0 ; move ua , 2 ) 
[11156] c:0 is:loop 0 , 4 , move ul - v0 , 4 / v0  decode:( move 2 , ul ; move 3 , 4 ) 
[11157] c:0 is:( move 4 , 4 / 9 ; move ua , 4 / 3 )  decode:( move ua , 8 ; move 4 , 5 ) 
[11158] c:0 is:loop 0 , 4 , move 4 - v0 , ul / v0  decode:loop 0 , 3 , move ua - 3 , ul / v0 
[11159] c:0 is:( move ua , 0 - 3 ; move 0 - 2 , ul )  decode:( move 2 , 2 / 4 ; move ua , 4 ) 
[11160] c:0 is:loop 0 , 6 , move v0 - ul , 4 - v0  decode:( move 4 , ua / 4 ; move ua , ul ) 
[11161] c:0 is:( move 4 - ua , 0 ; move ua , 0 - 2 )  decode:( move ua , 0 - 4 ; move 2 , ul ) 
[11162] c:0 is:loop 0 , 6 , move ua / 2 , v0 * v0  decode:loop 0 , 4 , move ua - v0 , ua / 4 
[11163] c:0 is:loop 0 , 6 , move v0 - 3 , v0 / ua  decode:( move 3 , 3 * 2 ; move ua , ul ) 
[11164] c:0 is:loop 0 , 4 , move 3 / v0 , v0 / ua  decode:( move 3 , 4 ; move ua , 4 / ua ) 
[11165] c:0 is:( move ua - 2 , 0 ; move ua + 3 , 2 )  decode:( move 4 , 0 ; move 9 , 2 ) 
[11166] c:0 is:loop 0 , 7 , move v0 - 4 , ua - v0  decode:loop 0 , 4 , move 3 - ua , v0 * 3 
[11167] c:0 is:( move ua - 2 , 0 ; move ua , 0 - 4 )  decode:( move 4 , 0 ; move ua , 0 - 4 ) 
[11168] c:0 is:( move ua + ul , 0 ; move 4 , 0 - 2 )  decode:( move ua , 0 ; move ua + ul , 2 ) 
[11169] c:0 is:loop 0 , 6 , move ul - v0 , v0 * 3  decode:( move 4 , 2 ; move ua , 4 * 4 ) 
[11170] c:0 is:( move ua , 0 - 3 ; move ua + 2 , 2 )  decode:( move ua , 0 - 3 ; move 8 , 2 ) 
[11171] c:0 is:loop 0 , 7 , move 3 - v0 , ul - v0  decode:( move ua + ul , ul ; move 4 , 4 ) 
[11172] c:0 is:loop 0 , 7 , move ul - v0 , 4 + v0  decode:loop 0 , 4 , move 4 , 0 + 8 
[11173] c:0 is:( move 3 , 0 ; move ul - ua , 0 - 2 )  decode:( move 3 , 0 ; move 5 , ul ) 
[11174] c:0 is:loop 0 , 2 , move v0 - ua , v0 - 9  decode:( move 5 , ua / 4 ; move ua , 8 ) 
[11175] c:0 is:loop 0 , 7 , move v0 - ul , v0 + 4  decode:loop 0 , 3 , move v0 - ua , 0 - 8 
[11176] c:0 is:loop 0 , 7 , move v0 + ul , v0 / 2  decode:loop 0 , 4 , move ua , 0 - 9 
[11177] c:0 is:loop 0 , 5 , move ul - v0 , 3 / v0  decode:loop 0 , 4 , move v0 - 4 , ua / 4 
[11178] c:0 is:( move 0 - ua , 0 ; move ua , 3 / 2 )  decode:( move ua , 0 ; move ua , ua / 4 ) 
[11179] c:0 is:( move 0 - ua , ul ; move 4 , 0 - 2 )  decode:( move 3 , 0 - 0 ; move ua , 2 ) 
[11180] c:0 is:loop 0 , 7 , move v0 - ul , 3 * v0  decode:( move 9 , 0 - 4 ; move ua , 4 ) 
[11181] c:0 is:loop 0 , 7 , move v0 / 2 , v0 - ul  decode:loop 0 , 3 , move 3 - ua , 9 / v0 
[11182] c:0 is:( move 3 , 2 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[11183] c:0 is:( move ua + 2 , 0 ; move ua + 3 , 4 )  decode:( move ua + ul , 0 ; move 9 , 4 ) 
[11184] c:0 is:loop 0 , 6 , move ua / v0 , 4 - v0  decode:loop 0 , 4 , move ua - ul , 0 - 4 
[11185] c:0 is:loop 0 , 5 , move v0 - ul , 4 / v0  decode:( move 3 , 3 ; move 4 , ua / 3 ) 
[11186] c:0 is:loop 0 , 7 , move ul + v0 , v0 / 3  decode:loop 0 , 4 , move 4 + v0 , 2 8 
[11187] c:0 is:( move ua , 0 - 3 ; move 0 - 3 , ul )  decode:( move ua , 0 - 2 ; move 2 , 2 ) 
[11188] c:0 is:loop 0 , 7 , move v0 - ul , v0 - 4  decode:loop 0 , 4 , move 0 - 4 , 0 - 0 4 
[11189] c:0 is:( move 3 - ua , 0 ; move ua + 3 , 2 )  decode:( move 3 , v; move ua + 3 , 2 ) 
[11190] c:0 is:( move 0 - 3 , 0 ; move ua + ul , 4 )  decode:( move 3 , 3 ; move ua + ul , ul ) 
[11191] c:0 is:( move ua , 0 - 3 ; move ua + 3 , 2 )  decode:( move ua , 0 - 3 ; move 9 , 2 ) 
[11192] c:0 is:( move 0 - 4 , 0 ; move ua - 2 , ul )  decode:( move 4 , 0 ; move 4 , 0 - 4 ) 
[11193] c:0 is:loop 0 , 6 , move 4 / v0 , v0 + ul  decode:loop 0 , 4 , move 4 , 4 / v0 
[11194] c:0 is:( move ul - ua , 0 ; move 0 - 4 , 2 )  decode:( move ul - ua , 0 ; move 5 , 2 ) 
[11195] c:0 is:loop 0 , 6 , move 3 - v0 , ul / v0  decode:( move 3 , ul / 4 ; move ua , 5 ) 
[11196] c:0 is:loop 0 , 7 , move v0 - 4 , v0 - ul  decode:( move 9 , 9 / 4 ; move 4 , 4 ) 
[11197] c:0 is:loop 0 , 5 , move ul - v0 , v0 / 4  decode:( move 2 , 9 + 2 ; move 3 , 4 ) 
[11198] c:0 is:( move ul - ua , 0 ; move 4 , 0 - 2 )  decode:( move 0 - 5 , 0 ; move 5 , ul ) 
[11199] c:0 is:( move 3 - ua , 0 - 2 ; move ua , 2 )  decode:( move ua , 0 ; move 3 , 0 - 2 ) 
[11200] c:0 is:( move ua + 2 , 0 - 4 ; move ua , 2 )  decode:( move ua - - ul 3 ; move ua , 2 ) 
[11201] c:0 is:loop 0 , 6 , move ul - v0 , 4 * v0  decode:loop 0 , 4 , move 3 , v0 - 3 
[11202] c:0 is:( move ua + 2 , 4 ; move ua , 0 - 2 )  decode:( move ua , 4 ; move ua , 0 - 2 ) 
[11203] c:0 is:loop 0 , 6 , move v0 - 3 , ul / v0  decode:( move 3 , 0 - 3 ; move ua , 4 ) 
[11204] c:0 is:( move 2 - ua , 0 ; move ua - 3 , 2 )  decode:( move 4 , 0 ; move 3 - ua , 2 ) 
[11205] c:0 is:loop 0 , 7 , move v0 / 2 , ul - v0  decode:loop 0 , 3 , move 3 - ua , v0 - 8 
[11206] c:0 is:loop 0 , 7 , move ul - v0 , 4 - v0  decode:0 loop 0 , 4 , move 4 , 0 - v0 0 
[11207] c:0 is:( move 0 - 3 , 0 - 3 ; move ua , ul )  decode:( move 3 , 0 ; move ua , ua / 3 ) 
[11208] c:0 is:loop 0 , 4 , move 0 - 2 , ua * ua / 3  decode:loop 0 , 4 , move 0 - 2 , 4 / 3 
[11209] c:0 is:( move 0 - ua , 0 - 2 ; move 4 , ul )  decode:( move ua , 4 * 5 ; move 4 , 4 ) 
[11210] c:0 is:loop 0 , 4 , move ua / v0 , 5 * v0  decode:( move ua + 2 , 0 ; move 8 , 2 ) 
[11211] c:0 is:loop 0 , 3 , move 4 / v0 , ul / v0  decode:loop 0 , 3 , move ua - 3 , ul / 3 
[11212] c:0 is:loop 0 , 7 , move v0 - 4 , ul - v0  decode:( move 8 , 4 ; move 4 , 4 ) 
[11213] c:0 is:( move ul - ua , 0 ; move 2 , 0 - 4 )  decode:( move 2 , 0 ; move 2 - ua , 4 ) 
[11214] c:0 is:( move ua - ul , 0 ; move 4 , 0 - 2 )  decode:( move 5 , 0 ; move 4 , 0 - 2 ) 
[11215] c:0 is:( move 0 - 4 , 0 ; move ua - ul , 2 )  decode:( move 4 , 0 ; move ul - ua , 2 ) 
[11216] c:0 is:( move ua , 3 ; move ua + 3 , 0 - 2 )  decode:( move 3 , 3 ; move 9 , 0 - 2 ) 
[11217] c:0 is:( move 0 - ua , 3 ; move 2 - ua , 2 )  decode:( move 0 - ua , 3 ; move 5 , 2 ) 
[11218] c:0 is:loop 0 , 5 , move 2 / v0 , ul / v0  decode:loop 0 , 4 , move 0 - v0 , ul / 3 
[11219] c:0 is:( move ua - 3 , 0 - 2 ; move ua , 2 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[11220] c:0 is:loop 0 , 6 , move v0 - ul , 3 / v0  decode:( move 4 , ua / 6 ; move ua , 7 ) 
[11221] c:0 is:loop 0 , 7 , move ua / 4 , v0 + v0  decode:loop 0 , 4 , move 3 , 4 / 3 / v0 
[11222] c:0 is:( move ua , 2 ; move ua + 2 , 0 - 4 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[11223] c:0 is:( move 2 , 0 - 3 ; move ua + 2 , ul )  decode:( move 2 , 0 - 3 ; move 8 , ul ) 
[11224] c:0 is:( move 4 - ua , 0 ; move ua + 2 , 2 )  decode:( move 2 , 3 ; move ua + 2 , 5 ) 
[11225] c:0 is:loop 0 , 7 , move 4 - v0 , ul - v0  decode:( move 9 , ul ; move 4 , 9 ) 
[11226] c:0 is:loop 0 , 3 , move ua - v0 , 9 - v0  decode:loop 0 , 3 , move 4 + v0 , 4 / 0 
[11227] c:0 is:( move 4 , 0 ; move ul - ua , 0 - 2 )  decode:( move 4 , 0 ; move 5 , 2 - 3 ) 
[11228] c:0 is:loop 0 , 7 , move 4 - ua , v0 * v0  decode:loop 0 , 4 , move 0 - 4 , ua * 4 
[11229] c:0 is:loop 0 , 7 , move v0 / 3 , ul + v0  decode:( move ul , 4 / ua ; move 5 , 2 ) 
[11230] c:0 is:loop 0 , 4 , move 3 / v0 , ul / v0  decode:loop 0 , 4 , move 2 , ul / 3 
[11231] c:0 is:loop 0 , 5 , move v0 - ul , v0 / 4  decode:( move 2 , ua / 4 ; move 4 , 4 ) 
[11232] c:0 is:( move ua + ul , 0 ; move 2 , 2 - 3 )  decode:( move ua + ul , 0 ; move 2 , ul ) 
[11233] c:0 is:( move 2 - ua , 0 - 3 ; move ua , 2 )  decode:( move 4 , 0 - 3 ; move ua , 2 ) 
[11234] c:0 is:loop 0 , 3 , move ua - v0 , v0 * 8  decode:loop 0 , 3 , move ua - 2 , v0 * 4 
[11235] c:0 is:loop 0 , 7 , move v0 / 3 , ua - v0  decode:( move 3 , ul ; move 3 , 2 ) 
[11236] c:0 is:( move 5 , 0 ; move ua + ul , 0 - 2 )  decode:( move 5 , ua / 4 ; move 5 , 2 ) 
[11237] c:0 is:( move 3 , 0 - 2 ; move ua + ul , 2 )  decode:( move ua , 2 - 9 ; move 5 , 2 ) 
[11238] c:0 is:( move ua + 2 , 2 ; move ua , 0 - 4 )  decode:( move ua , 2 ; move ua + 2 , 4 / ) 4 
[11239] c:0 is:( move ua , 0 - 3 ; move ua + 2 , 3 )  decode:( move 8 , 0 - 3 ; move 4 , 3 ) 
[11240] c:0 is:loop 0 , 7 , move 4 - v0 , v0 - ul  decode:loop 0 , 4 , move 3 , 4 * 4 / v0 
[11241] c:0 is:( move ua , 0 - 4 ; move ua + 2 , 2 )  decode:loop 0 , 3 , move v0 - ua , 0 - 2 
[11242] c:0 is:( move 0 - ua , ul ; move 3 , 0 - 3 )  decode:( move 3 , 4 ; move ua , ul / 4 ) 
[11243] c:0 is:loop 0 , 4 , move 5 / v0 , v0 - ul  decode:loop 0 , 3 , move 0 - 4 , v0 - ul 
[11244] c:0 is:loop 0 , 7 , move v0 - ul , 4 - v0  decode:loop 0 , 4 , move 4 - v0 , 4 / 3 
[11245] c:0 is:loop 0 , 7 , move v0 - ul , v0 / 2  decode:loop 0 , 4 , move 4 , 0 - 9 
[11246] c:0 is:( move ua , 0 - 2 ; move ua + 3 , 3 )  decode:( move 9 , 0 - 4 ; move 9 , 3 ) 
[11247] c:0 is:loop 0 , 7 , move ul - v0 , 3 * v0  decode:( move 9 , ul / 4 ; move ua , 4 ) 
[11248] c:0 is:( move ua + 2 , 0 - 2 ; move ua , 4 )  decode:( move ua , 2 - 9 ; move ua , 4 ) 
[11249] c:0 is:loop 0 , 5 , move ua / v0 , 3 / v0  decode:loop 0 , 4 , move 4 , 3 * 3 - v0 
[11250] c:0 is:( move 2 - ua , 3 ; move 0 - ua , 2 )  decode:( move 4 , 0 ; move ua , 2 ) 
[11251] c:0 is:( move ua + 2 , ul ; move 3 , 0 - 2 )  decode:( move 3 , ua / 3 ; move 9 , 2 ) 
[11252] c:0 is:( move ua + 3 , 0 - 2 ; move ua , 4 )  decode:( move ua , 0 - 9 ; move ua , 4 ) 
[11253] c:0 is:( move 3 - ua , 0 ; move ua + 2 , 4 )  decode:( move 3 , ua / 2 ; move 9 , ul ) 
[11254] c:0 is:( move ua + 2 , 3 ; move ua + 3 , 2 )  decode:( move ua + ul , 3 ; move 9 , 2 ) 
[11255] c:0 is:( move 0 - 4 , 0 ; move ua , 2 / ua )  decode:loop 0 , 2 , move ua - v0 , 0 - 9 
[11256] c:0 is:( move ul - ua , 2 ; move 3 , 0 - 2 )  decode:( move 3 , 0 - 2 ; move ua , 2 ) 
[11257] c:0 is:( move 3 , 3 ; move ua + ul , 0 - 2 )  decode:( move 3 , 0 - move ua + ul , 2 ) 
[11258] c:0 is:( move ua + 2 , 3 ; move ua , 0 - 4 )  decode:( move ua , 3 ; move ua , 0 - 4 ) 
[11259] c:0 is:( move ua + ul , 0 ; move 4 , 0 - 4 )  decode:( move ua , ul ; move 4 , 0 - 4 ) 
[11260] c:0 is:loop 0 , 7 , move ua / v0 , v0 - 4  decode:loop 0 , 4 , move ua - v0 , 4 / 3 
[11261] c:0 is:( move ua + 2 , 0 ; move ua + 4 , 4 )  decode:( move 0 - 4 , 0 ; move 4 , 4 ) 
[11262] c:0 is:( move 0 - 3 + 3 , 2 ; move ua , ul )  decode:( move 0 - ua , 2 ; move ua , ul ) 
[11263] c:0 is:( move ua , 0 - 3 ; move ua + 2 , 4 )  decode:( move ua , 0 - 3 ; move 9 , 4 ) 
[11264] c:0 is:( move 5 , 0 ; move ul - ua , 0 - 2 )  decode:( move 5 , ul ; move 5 , 2 - 3 ) 
[11265] c:0 is:( move ua , 0 - 2 ; move ua + 3 , 4 )  decode:( move ua , 0 - 2 ; move 9 , 4 ) 
[11266] c:0 is:loop 0 , 7 , move 4 / v0 , ua - v0  decode:loop 0 , 3 , move 4 , 0 - 3 / v0 
[11267] c:0 is:( move 0 - 2 , 0 ; move ua , ua / 4 )  decode:( move 2 , 0 ; move ua , ua / 4 ) 
[11268] c:0 is:loop 0 , 6 , move ul - v0 , v0 / 4  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[11269] c:0 is:loop 0 , 6 , move v0 - ul , 4 / v0  decode:( move 5 , 5 ; move 5 , 4 ) 
[11270] c:0 is:( move 4 , 0 - 2 ; move ua + ul , 2 )  decode:( move ua - ul , 0 ; move 9 , 2 ) 
[11271] c:0 is:( move 4 - ua , 0 ; move ua + 3 , 2 )  decode:( move 2 , 0 ; move 7 + 3 , 2 ) 
[11272] c:0 is:( move ul - ua , 0 ; move 2 , 2 - 3 )  decode:( move 5 , 0 - 4 ; move 3 , 4 ) 
[11273] c:0 is:loop 0 , 6 , move v0 / 2 , ul / v0  decode:( move 2 , ul ; move ua - ul , 4 ) 
[11274] c:0 is:( move ua , 0 - 4 ; move ua + 3 , 2 )  decode:loop 0 , 3 , move v0 - ua , 0 - 2 
[11275] c:0 is:( move ua + 2 , 2 - 3 ; move ua , 2 )  decode:( move ua + 2 , 2 ; move ua , 2 ) 
[11276] c:0 is:loop 0 , 6 , move v0 - ul , v0 / 4  decode:loop 0 , 4 , move 3 , 4 - v0 - 4 
[11277] c:0 is:( move ul - ua , 0 ; move 3 , 0 - 4 )  decode:( move 3 , 0 - 2 ; move 5 , ul ) 
[11278] c:0 is:( move ua + 2 , 0 - 3 ; move ua , 4 )  decode:( move ua + 2 , 0 ; move ua , 4 ) 
[11279] c:0 is:loop 0 , 7 , move 3 - v0 , ul / v0  decode:( move ua , 0 - 3 ; move ua , 5 ) 
[11280] c:0 is:( move ua + 2 , 4 ; move ua , 0 - 3 )  decode:( move ua + ul , 4 ; move 8 , 3 ) 
[11281] c:0 is:( move ua + ul , 0 - 2 ; move 4 , 2 )  decode:( move 4 , 0 - 2 ; move 4 , 2 ) 
[11282] c:0 is:( move ua - ul , 0 ; move 2 , 2 - 3 )  decode:( move 2 , 2 / 4 ; move ua , ul ) 
[11283] c:0 is:loop 0 , 7 , move v0 / 2 , ua / v0  decode:loop 0 , 4 , move ua - 4 , 5 3 / 3 
[11284] c:0 is:( move 0 - 2 , 3 ; move ua - ul , 2 )  decode:( move - 2 , 3 / ; move ua , 2 ) 
[11285] c:0 is:( move 2 , 0 ; move ua - ul , 2 - 3 )  decode:( move ua - ul , 0 ; move 2 , ul ) 
[11286] c:0 is:( move 3 , 0 - 3 ; move ua + 2 , ul )  decode:( move 3 , 0 - 4 ; move 8 , ul ) 
[11287] c:0 is:( move 0 - ua , 0 ; move ua , 4 * 3 )  decode:( move ua , 0 - 3 ; move ua , 9 ) 
[11288] c:0 is:( move ua - ul , 0 ; move 3 , 0 - 4 )  decode:( move 3 , 0 ; move 5 , 0 - 4 ) 
[11289] c:0 is:( move 0 - 3 , 2 ; move ua - ul , 2 )  decode:( move 3 , 0 - 2 ; move 5 , 2 ) 
[11290] c:0 is:( move 3 , 0 - 4 ; move 0 - ua , ul )  decode:( move 3 , 0 - 4 ; move ua , 4 ) 
[11291] c:0 is:( move 3 - ua , 0 - 3 ; move ua , 2 )  decode:( move 3 , 0 ; move ua , 2 - 3 ) 
[11292] c:0 is:loop 0 , 4 , move 4 / v0 , ul / v0  decode:loop 0 , 3 , move 4 , ul / v0 
[11293] c:0 is:( move 3 , 0 ; move ua + ul , 2 - 3 )  decode:( move 3 , 0 ; move 7 , 2 - 3 ) 
[11294] c:0 is:( move ua + 2 , 4 ; move ua + 2 , 2 )  decode:( move ua + 3 , 4 ; move 8 , 2 ) 
[11295] c:0 is:( move 4 , 2 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 0 ; move 5 , 2 ) 
[11296] c:0 is:( move ua - 2 , 0 ; move ua + 2 , 5 )  decode:( move 4 , 0 ; move ua + 2 , 5 ) 
[11297] c:0 is:( move ua + 2 , 3 ; move ua - 2 , 2 )  decode:( move ua + 2 , 3 ; move 4 , 2 ) 
[11298] c:0 is:( move 3 , 0 ; move ul - ua , 0 - 4 )  decode:( move 3 , 0 ; move 5 , 2 / 3 ) 
[11299] c:0 is:( move ua + 3 , ul ; move 3 , 0 - 2 )  decode:( move 3 , ua / 4 ; move 9 , 2 ) 
[11300] c:0 is:loop 0 , 7 , move v0 - 3 , ul / v0  decode:( move ua , ul / 3 ; move ua , 8 ) 
[11301] c:0 is:( move 2 - ua , 0 - 2 ; move 3 , ul )  decode:( move 3 , 4 / 4 ; move 4 , 2 ) 
[11302] c:0 is:loop 0 , 4 , move v0 + ul , v0 - 9  decode:( move 2 , 9 ; move ua + 2 , 4 ) 
[11303] c:0 is:( move 0 - 2 , 3 ; move ua + 3 , ul )  decode:( move 9 , 4 ; move 3 , 2 ) 
[11304] c:0 is:loop 0 , 7 , move v0 - 4 , ua / v0  decode:loop 0 , 3 , move 3 - ua , v0 * 3 
[11305] c:0 is:( move 0 - 4 , 0 ; move ua + ul , 4 )  decode:( move 0 - 4 , 0 ; move 7 , 4 ) 
[11306] c:0 is:loop 0 , 5 , move 3 / v0 , ul / v0  decode:loop 0 , 3 , move 3 , ul / v0 
[11307] c:0 is:loop 0 , 4 , move ul + v0 , 7 / v0  decode:loop 0 , 3 , move 0 - 4 , 0 - v0 
[11308] c:0 is:( move 2 , 2 ; move ua + ul , 0 - 4 )  decode:( move 2 , 2 ; move ua , 0 - 4 ) 
[11309] c:0 is:( move 5 , 0 ; move ua - ul , 0 - 2 )  decode:( move 5 , 0 ; move 5 , 0 - 2 ) 
[11310] c:0 is:( move 4 - ua , 0 - 2 ; move ua , 2 )  decode:( move 3 , 0 ; move ua , 0 - 2 ) 
[11311] c:0 is:( move ua + 2 , 2 ; move ua + 2 , 4 )  decode:( move 2 - 8 , 2 ; move 8 , 4 ) 
[11312] c:0 is:( move ul - ua , 2 ; move 0 - 3 , 2 )  decode:( move ul - ua , 2 ; move 3 , 2 ) 
[11313] c:0 is:loop 0 , 6 , move ul - v0 , 4 / v0  decode:( move 5 , 8 ; move ua , 0 - 4 ) 
[11314] c:0 is:( move ua , 0 - 2 ; move 4 - ua , 2 )  decode:( move 3 , ul ; move ua , ul ) 
[11315] c:0 is:loop 0 , 7 , move 4 - v0 , ua / v0  decode:( move 4 , 0 ; move ua , 3 * 5 ) 
[11316] c:0 is:( move ua , 0 ; move 0 - ua , 2 / 4 )  decode:( move ua , 0 ; move ua , 2 * 4 ) 
[11317] c:0 is:( move ua + 2 , ul ; move 4 , 0 - 2 )  decode:( move 4 , ul ; move 2 + ua , 2 ) 
[11318] c:0 is:loop 0 , 6 , move 3 / v0 , v0 / ua  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[11319] c:0 is:loop 0 , 6 , move ua / 4 , v0 * v0  decode:loop 0 , 3 , move 3 , 4 9 - 9 
[11320] c:0 is:( move ua - 2 , 3 ; move ua + 2 , 2 )  decode:( move 4 , 3 ; move ua + 2 , 2 ) 
[11321] c:0 is:loop 0 , 6 , move 3 / v0 , ua / v0  decode:( move ua , 0 ; move 2 , 4 ) 
[11322] c:0 is:( move ua , 2 - 3 ; move ua + 2 , 2 )  decode:loop 0 , 2 , move 2 - ua + 4 , 2 
[11323] c:0 is:( move ua , 3 ; move ua + 2 , 0 - 4 )  decode:( move ua + 2 , 3 ; move ua , 4 ) 
[11324] c:0 is:( move ua , 4 + ul ; move 0 - 2 , 2 )  decode:( move 2 , 7 ; move ua , ul ) 
[11325] c:0 is:( move 0 - ua , 0 ; move ua , 2 / 4 )  decode:( move ua , 0 ; move ua , ua * ua ) 
[11326] c:0 is:loop 0 , 7 , move 4 / v0 , v0 + ul  decode:loop 0 , 3 , move ua - 2 , v0 * 3 
[11327] c:0 is:( move 3 , 4 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[11328] c:0 is:( move 2 , 0 ; move ua + ul , 3 / 2 )  decode:( move 2 , 0 ; move ua + ul , 8 ) 
[11329] c:0 is:loop 0 , 7 , move v0 - 4 , ul / v0  decode:loop 0 , 4 , move 3 - ua , 9 / v0 
[11330] c:0 is:( move 4 , 0 ; move ul - ua , 0 - 4 )  decode:( move 4 , 0 ; move 5 , 2 - 3 ) 
[11331] c:0 is:( move ua + 2 , 4 ; move ua , 0 - 4 )  decode:( move 5 , 0 ; move 9 , 4 ) 
[11332] c:0 is:( move ua , 0 ; move 2 - ua , 3 / 2 )  decode:( move ua , ua / 2 ; move 5 , 8 ) 
[11333] c:0 is:( move ua + ul , 0 ; move 2 , 2 / 3 )  decode:( move ua + ul , 0 ; move 2 , 7 ) 
[11334] c:0 is:loop 0 , 6 , move ua / v0 , 4 / v0  decode:loop 0 , 4 , move ul - ua , 4 * v0 
[11335] c:0 is:( move ul - ua , 0 ; move 4 , 0 - 4 )  decode:( move 5 , 0 - 3 ; move 5 , ul ) 
[11336] c:0 is:loop 0 , 7 , move v0 - ul , 4 / v0  decode:loop 0 , 3 , move 4 , 2 - v0 - 2 
[11337] c:0 is:( move 3 - ua , 0 - 2 ; move ua , 4 )  decode:( move 3 , 2 / 4 ; move ua , 7 ) 
[11338] c:0 is:( move ua + ul , 0 - 3 ; move 4 , 2 )  decode:( move ua + ul , 0 ; move 4 , 2 ) 
[11339] c:0 is:( move ua + 2 , ul ; move 4 , 0 - 3 )  decode:( move ua + ul , ul ; move 8 , 3 ) 
[11340] c:0 is:( move ua , ul ; move 3 + 4 , 0 - 2 )  decode:( move ua , ua / 3 ; move ua , 2 ) 
[11341] c:0 is:( move 4 , 0 - 3 ; move ua + ul , 2 )  decode:( move 4 , 0 - 4 ; move 8 , 2 ) 
[11342] c:0 is:( move ua + ul , 4 ; move 3 , 0 - 2 )  decode:( move 3 , 2 ; move ua + ul , 2 ) 
[11343] c:0 is:( move 0 - ua , 0 - 4 ; move 4 , ul )  decode:( move 4 , 0 - 7 ; move 4 , ul ) 
[11344] c:0 is:( move 3 , 0 - 4 ; move ua + ul , 2 )  decode:( move 3 , 0 - 4 ; move 7 , 2 ) 
[11345] c:0 is:( move ua , 2 ; move 3 - ua , 0 - 4 )  decode:( move 3 , 0 - 2 ; move ua , ul ) 
[11346] c:0 is:( move 0 - ua , 2 ; move ua , 3 / 2 )  decode:( move ua , 2 / 6 ; move ua , 8 ) 
[11347] c:0 is:( move 3 , 3 ; move ul - ua , 0 - 2 )  decode:( move 5 , ul ; move 3 , 2 ) 
[11348] c:0 is:( move ua , 0 - 3 ; move 2 - ua , 4 )  decode:( move 2 - ua , 0 ; move 5 , 4 ) 
[11349] c:0 is:( move ul , 0 - 4 ; move ua + 3 , 2 )  decode:( move ul , 9 ; move ua + 3 , 2 ) 
[11350] c:0 is:( move ua , 4 + 3 ; move 0 - 2 , ul )  decode:( move ua , 8 ; move 3 , ua / 3 ) 
[11351] c:0 is:( move 3 + ua , ul ; move 4 , 0 - 2 )  decode:( move 3 , 0 ; move ua + 3 , 2 ) 
[11352] c:0 is:( move ua + 2 , 3 ; move ua - 3 , 2 )  decode:( move ua + 2 , 3 ; move 4 , 2 ) 
[11353] c:0 is:loop 0 , 7 , move ul - v0 , v0 / 4  decode:0 loop 0 , 4 , move 4 - v0 , ua / 3 
[11354] c:0 is:( move 0 - 4 , 2 ; move ul - ua , 2 )  decode:( move 4 , 2 ; move ul - ua , 2 ) 
[11355] c:0 is:( move ua + 2 , 2 ; move ua + 3 , 4 )  decode:( move 9 , 2 ; move ua + 3 , 4 ) 
[11356] c:0 is:( move 3 , 2 ; move ua + ul , 0 - 4 )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[11357] c:0 is:( move 4 - ua , 2 ; move ua + 2 , 2 )  decode:( move 2 , 6 ; move ua + 2 , 5 ) 
[11358] c:0 is:loop 0 , 4 , move ul + v0 , v0 / 8  decode:loop 0 , 4 , move ua - 4 , v0 / ua 
[11359] c:0 is:( move 0 - 3 , ua ; move 4 + 2 , ul )  decode:( move 3 , 0 ; move 6 , ua / 3 ) 
[11360] c:0 is:( move ua + ul , 0 ; move 2 - 5 , 2 )  decode:( move ua + ul , 0 ; move 3 , 5 ) 
[11361] c:0 is:( move 2 , 2 ; move ua + ul , 2 - 3 )  decode:( move ua , ul ; move 2 , ul ) 
[11362] c:0 is:( move 4 , 0 - 3 ; move ua + 2 , ul )  decode:( move 4 , 4 * 4 ; move 8 , ul ) 
[11363] c:0 is:( move 3 - 4 , 0 ; move ua + ul , 2 )  decode:( move ua , 2 ; move ul , 2 ) 
[11364] c:0 is:( move ua , 2 - 3 ; move ua + 2 , 3 )  decode:( move ua , 0 - 3 ; move 9 , 3 ) 
[11365] c:0 is:( move 5 , 0 - 2 ; move ua + ul , 2 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[11366] c:0 is:( move ua , 0 - 3 ; move 4 - ua , 2 )  decode:( move 2 , 2 - 9 ; move ua , 2 ) 
[11367] c:0 is:( move 3 - ua , 0 ; move 2 - ua , 4 )  decode:( move 3 , 0 ; move 4 , 4 ) 
[11368] c:0 is:( move ua , 2 - 3 ; move ua , 0 - 4 )  decode:( move ua , 9 / 2 ; move ua , 4 ) 
[11369] c:0 is:loop 0 , 7 , move v0 / 3 , ua / v0  decode:loop 0 , 4 , move 2 , ua / v0 
[11370] c:0 is:( move 3 - ua , 2 ; move 2 - ua , 2 )  decode:( move 3 , 2 ; move 4 , 2 ) 
[11371] c:0 is:( move 0 - 3 , 2 ; move ua , 2 / ua )  decode:( move 3 , 4 * 3 ; move ua , 4 ) 
[11372] c:0 is:( move 3 , 0 - 2 ; move ua , 2 / ua )  decode:( move ua , 9 / 2 ; move 3 , 7 ) 
[11373] c:0 is:loop 0 , 7 , move ul - v0 , 4 / v0  decode:loop 0 , 4 , move 3 - ua , v0 - 8 
[11374] c:0 is:( move ua + 4 , ul ; move 3 , 0 - 2 )  decode:( move ua + 3 , ul ; move 2 , 2 ) 
[11375] c:0 is:( move ua - 2 , 3 ; move ua + 3 , 2 )  decode:( move 4 , 3 ; move  3 , ul - 4 ) 
[11376] c:0 is:( move 3 , 0 - 2 ; move ua + ul , 4 )  decode:( move ua + ul , 0 ; move 3 , 4 ) 
[11377] c:0 is:( move ua + ul , 0 - 2 ; move 3 , 4 )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[11378] c:0 is:loop 0 , 5 , move 4 / v0 , ul / v0  decode:loop 0 , 3 , move 4 , ul / v0 
[11379] c:0 is:( move ua , 3 ; move ua + 3 , 0 - 4 )  decode:( move 9 , ua / 4 ; move ua , 4 ) 
[11380] c:0 is:( move ua , 3 / 2 ; move 0 - ua , 2 )  decode:( move ua , 3 / 2 ; move ua , 2 ) 
[11381] c:0 is:( move ua , 2 - 3 ; move ua + 3 , 2 )  decode:( move 3 + 3 , 2 ; move 9 , 2 ) 
[11382] c:0 is:( move ua + 3 , 2 ; move ua + 2 , 4 )  decode:( move 9 , 2 ; move 4 + 4 , 4 ) 
[11383] c:0 is:( move 0 - ua , 0 ; move 3 , ua / 4 )  decode:( move ua , 0 ; move 3 , ua / 4 ) 
[11384] c:0 is:( move 0 - 4 , 2 ; move ua - ul , 2 )  decode:( move 4 , 2 ; move 5 , ul ) 
[11385] c:0 is:( move 3 - ua , 2 ; move ua , 0 - 4 )  decode:( move 3 , 6 / move ua , 2 - 3 ) 
[11386] c:0 is:( move ua + 2 , 5 ; move ua , 0 - 3 )  decode:( move ua , 5 ; move 9 , 3 ) 
[11387] c:0 is:( move 0 - 3 , 2 ; move ua + ul , 4 )  decode:( move 3 , 2 ; move ua + ul , ul ) 
[11388] c:0 is:( move 0 - ua , 3 / 2 ; move ua , 2 )  decode:( move ua , 9 + 2 ; move ua , 2 ) 
[11389] c:0 is:( move 2 - ua , 2 ; move ua - 3 , 2 )  decode:( move 3 , ul ; move 4 , 2 - 3 ) 
[11390] c:0 is:( move ul - ua , 0 ; move 0 - 4 , 4 )  decode:( move ul - ua , 0 ; move 4 , 4 ) 
[11391] c:0 is:( move 0 - 3 , 0 ; move ua , ua / 4 )  decode:( move 3 , 0 - 3 ; move ua , 8 ) 
[11392] c:0 is:( move ua - 3 , 3 ; move ua + 2 , 2 )  decode:( move 3 , 3 ; move 2 + ua , 2 ) 
[11393] c:0 is:loop 0 , 6 , move 4 / v0 , ua / v0  decode:( move ua + ul , 0 ; move 2 , 7 ) 
[11394] c:0 is:( move ua + ul , 0 - 2 ; move 5 , 2 )  decode:( move 2 - ua , 0 ; move 5 , ul ) 
[11395] c:0 is:( move ua + ul , 2 ; move 0 - 3 , 4 )  decode:( move ua + ul , 2 ; move 3 , ul ) 
[11396] c:0 is:( move ua + 2 , 4 + 3 ; move ua , 2 )  decode:( move 9 , 4 + 3 ; move ua , 2 ) 
[11397] c:0 is:( move ua - ul , 0 ; move 3 , 2 - 3 )  decode:( move 3 , ul / 4 ; move 5 , ul ) 
[11398] c:0 is:( move 3 , ul ; move ua + 4 , 0 - 2 )  decode:( move 3 , ul ; move 4 + 4 , 2 ) 
[11399] c:0 is:( move 4 , 0 ; move ua - ul , 0 - 4 )  decode:( move 4 , 0 ; move 5 , 0 - 4 ) 
[11400] c:0 is:( move ul - ua , 0 - 2 ; move 4 , 2 )  decode:loop 0 , 2 , move 0 - 4 , v0 / 3 
[11401] c:0 is:( move ua + 3 , 4 ; move 0 - 2 , ul )  decode:( move 9 , 4 ; move 3 , 4 ) 
[11402] c:0 is:( move 4 , ul ; move 2 - ua , 0 - 2 )  decode:( move 4 , 2 - 7 ; move 4 , 2 ) 
[11403] c:0 is:( move ua + ul , 3 ; move 4 , 0 - 2 )  decode:( move 4 , ul ; move ua + ul , 2 ) 
[11404] c:0 is:( move ua , 0 - 3 / 2 ; move ua , 2 )  decode:( move ua , 2 * 5 ; move ua , 2 ) 
[11405] c:0 is:( move 2 , 2 / ua ; move 2 , 0 - ul )  decode:( move 3 , 4 / 2 ; move 2 , ul ) 
[11406] c:0 is:( move 0 - 3 , 3 ; move ua - ul , 2 )  decode:( move 3 , 0 ; move ul - ua , 2 ) 
[11407] c:0 is:( move 3 , 0 - 3 ; move ua + 3 , ul )  decode:( move 3 , 0 - 3 ; move 9 , ul ) 
[11408] c:0 is:( move ua + ul , 0 - 4 ; move 3 , 2 )  decode:( move ua , 0 - 4 ; move 3 , 2 ) 
[11409] c:0 is:( move 2 , 2 / ua ; move ua + 2 , 2 )  decode:( move 2 , 9 / ua ; move ua , 2 ) 
[11410] c:0 is:( move 4 , 0 ; move ua + ul , 2 - 3 )  decode:( move 4 , 0 ; move ua , 2 - 3 ) 
[11411] c:0 is:( move ua + 2 , 4 ; move ua + 3 , 2 )  decode:( move ua + 3 , 4 ; move 3 , 2 ) 
[11412] c:0 is:( move 2 , 2 ; move ua + 2 , 2 / ua )  decode:( move 3 , 2 / move ua , ul / 2 ) 
[11413] c:0 is:( move ua , 0 - 3 ; move ua + 3 , 4 )  decode:( move ua , 0 - 3 ; move 9 , 4 ) 
[11414] c:0 is:( move 0 - ua , ul ; move 4 , 0 - 4 )  decode:( move 3 , ul ; move ua , ul / 4 ) 
[11415] c:0 is:( move 2 - ua , ul ; move 4 , 0 - 2 )  decode:loop 0 , 2 , move 0 - 4 , 2 - 3 
[11416] c:0 is:( move 3 , 0 - 3 ; move ua - ul , 2 )  decode:( move 3 , 0 - 3 ; move ua , 2 ) 
[11417] c:0 is:loop 0 , 4 , move v0 - ua , v0 * 9  decode:loop 0 , 4 , move 0 - 4 , v0 * 2 
[11418] c:0 is:( move 2 , 0 - 2 ; move ua , ua / 3 )  decode:( move 2 , 2 ; move ua , 0 - 2 ) 
[11419] c:0 is:( move ua + 2 , 0 - 4 ; move ua , 4 )  decode:( move ua , 0 - 4 ; move ua , 4 ) 
[11420] c:0 is:( move ua , 4 ; move 3 - ua , 0 - 2 )  decode:( move 3 , 2 ; move ua , ul ) 
[11421] c:0 is:( move 5 , 2 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 0 ; move 5 , 2 ) 
[11422] c:0 is:( move 0 - 3 , 4 ; move ua + 2 , ul )  decode:( move 3 , ul ; move 8 , 4 ) 
[11423] c:0 is:loop 0 , 7 , move v0 - ul , v0 / 4  decode:loop 0 , 4 , move 4 , ua / 7 
[11424] c:0 is:( move 0 - 4 , 3 ; move ua + ul , 2 )  decode:( move 4 , 0 ; move ua + ul , 2 ) 
[11425] c:0 is:( move 0 - 3 , 3 ; move ul - ua , 2 )  decode:( move 3 , 0 ; move ua - ul , 2 ) 
[11426] c:0 is:( move 4 - ua , 0 ; move ua , 0 - 5 )  decode:( move 4 - ua , 0 ; move ua , 5 ) 
[11427] c:0 is:( move ua + ul , 3 ; move 2 , 0 - 4 )  decode:( move 2 , ua / 3 ; move ua , 4 ) 
[11428] c:0 is:( move ua , 0 - 2 ; move 3 - ua , 4 )  decode:( move 3 , 2 ; move ua , 2 / 5 ) 
[11429] c:0 is:( move 0 - ua , 3 ; move ua + 2 , 5 )  decode:( move ua , 6 ; move 8 , 2 ) 
[11430] c:0 is:( move 0 - 3 , ul / 2 ; move ua , 2 )  decode:( move 3 , 0 - 4 ; move ua , 2 ) 
[11431] c:0 is:( move 3 + ua , 4 ; move ua , 0 - 4 )  decode:( move ua , 0 ; move 8 + 2 , 4 ) 
[11432] c:0 is:( move 0 - 3 , 5 ; move ua + 2 , ul )  decode:( move 3 , 9 ; move ua + 2 , 4 ) 
[11433] c:0 is:( move ua + ul , 3 ; move 3 , 0 - 4 )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[11434] c:0 is:( move ua , 3 / 2 ; move ua , 0 - 3 )  decode:( move ua , ua / 3 ; move ua , 3 ) 
[11435] c:0 is:( move 3 , 0 - 2 ; move 4 , ua * ua )  decode:( move 3 , 2 - 2 ; move 4 , 5 ) 
[11436] c:0 is:( move ua + 2 , 0 ; move 3 , ua / 4 )  decode:( move ua + 2 , 0 ; move 4 , 8 ) 
[11437] c:0 is:( move ua - ul , 0 ; move 2 , 2 * 4 )  decode:( move 5 , 0 ; move 3 , 8 ) 
[11438] c:0 is:( move 3 , 0 ; move ua + 2 , ua / 4 )  decode:( move 4 , 0 ; move 9 , ua / 4 ) 
[11439] c:0 is:( move ua + 2 , 2 / 3 ; move ua , 2 )  decode:( move 8 , 4 / ua ; move ua , 2 ) 
[11440] c:0 is:( move 0 - ua , ul / 3 ; move 2 , 2 )  decode:( move 2 , 0 ; move ua , ul ) 
[11441] c:0 is:( move 3 , ul ; move ua + 2 , 4 + 2 )  decode:( move 4 , ul ; move ua , 6 ) 
[11442] c:0 is:( move 3 , 2 / ua ; move ua + 2 , 2 )  decode:( move 3 , 2 / 4 ; move 8 , 2 ) 
[11443] c:0 is:( move 5 , 0 - 2 ; move 2 - ua , ul )  decode:loop 0 , 2 , move 2 - ua , v0 - 3 
[11444] c:0 is:( move ua , 0 - 4 ; move 2 - ua , 4 )  decode:( move 4 , 0 ; move ua , 2 - 3 ) 
[11445] c:0 is:( move 4 , ua * ua ; move 3 , 0 - 2 )  decode:( move 3 , 3 ; move 4 , 2 ) 
[11446] c:0 is:( move 2 - ua , 3 ; move 3 - ua , 2 )  decode:( move 2 - ua , 3 ; move 3 , 2 ) 
[11447] c:0 is:( move 4 , 3 ; move ua + ul , 0 - 3 )  decode:( move    , 3 ; move 7 , 3 ) 
[11448] c:0 is:( move 2 , 0 - 3 ; move ua , ua / 3 )  decode:( move ua , 0 - 4 ; move 2 , 2 ) 
[11449] c:0 is:( move ua + 2 , 6 ; move ua + 2 , 2 )  decode:( move ua + 2 , 6 ; move 8 , 2 ) 
[11450] c:0 is:( move ul , 2 - 3 ; move ua , 0 - 4 )  decode:( move ul , 0 ; move ua , 5 / 2 ) 
[11451] c:0 is:( move ua + 2 , ul ; move 3 , 2 - 3 )  decode:( move 3 , ul ; move 9 , ul ) 
[11452] c:0 is:( move 5 , 0 - 3 ; move ua + ul , 2 )  decode:( move 5 , 0 - 4 ; move 8 , 2 ) 
[11453] c:0 is:( move ua - ul , 2 ; move 2 , 2 - 3 )  decode:( move 2 , 0 - 2 ; move ua , ul ) 
[11454] c:0 is:( move ua + ul , 3 ; move 2 , 2 - 3 )  decode:( move 2 , 2 ; move ua + ul , ul ) 
[11455] c:0 is:( move ua , 0 - 3 ; move 3 , 2 / ua )  decode:( move 3 , 3 / ua ; move ua , 7 ) 
[11456] c:0 is:( move 4 , 0 - 4 ; move ua + ul , 2 )  decode:( move 4 , 0 - 4 ; move ua , 2 ) 
[11457] c:0 is:( move 3 , ua / 2 ; move ua + 2 , 2 )  decode:( move 3 , 3 ; move 2 + ua , 2 ) 
[11458] c:0 is:( move 2 , 3 ; move ua + ul , 2 - 3 )  decode:( move ua + ul , 2 ; move 2 , ul ) 
[11459] c:0 is:( move ul - ua , 0 - 2 ; move 3 , 4 )  decode:( move 3 , 0 - 4 ; move 3 , ul ) 
[11460] c:0 is:( move ua + ul , 2 - 3 ; move 3 , 2 )  decode:( move 3 , ul ; move ua , 0 - 2 ) 
[11461] c:0 is:( move ua - 3 , 2 ; move ua + 2 , 4 )  decode:( move 3 , 2 ; move 2 + ua , 4 ) 
[11462] c:0 is:( move ua + 3 , 2 ; move ua - 2 , 4 )  decode:( move 3 + ua , ul ; move 4 , 4 ) 
[11463] c:0 is:( move 0 - ua , 0 ; move 4 , 4 / ua )  decode:( move ua , 3 ; move 4 , 7 v0 ) 
[11464] c:0 is:( move 2 - ua , 2 ; move ua + 2 , 5 )  decode:( move 4 , 5 ; move 8 , ua * ua ) 
[11465] c:0 is:( move 2 - ua , 3 ; move ua - 3 , 2 )  decode:( move 4 , 3 ; move 3 - ua , 2 ) 
[11466] c:0 is:( move ua , 0 - 3 ; move ua + 4 , 4 )  decode:( move ua , 0 - 4 ; move + 4 4 ) 
[11467] c:0 is:( move 0 - ua , 3 ; move ua , 3 / 2 )  decode:loop 0 , 3 , move ua - v0 , 3 / 2 
[11468] c:0 is:( move ua + 2 , 2 - 3 ; move ua , 4 )  decode:( move 8 , 0 - 2 ; move ua , 4 ) 
[11469] c:0 is:( move 0 - 3 , 4 ; move ul - ua , 2 )  decode:( move 3 , 4 ; move ua - ul , 2 ) 
[11470] c:0 is:( move ul - ua , 2 ; move 4 , 0 - 3 )  decode:( move 3 , 0 - 4 ; move ua , ul ) 
[11471] c:0 is:( move 0 - 3 , ul ; move 2 - ua , 4 )  decode:( move 3 , 4 ; move 4 , 0 - 4 ) 
[11472] c:0 is:( move ua + 4 , 2 - 3 ; move ua , 2 )  decode:( move ua , 2 - 3 ; move ua , 2 ) 
[11473] c:0 is:( move 4 , 0 - 3 ; move ua - ul , 2 )  decode:( move 4 , 0 - 3 ; move ua , 2 ) 
[11474] c:0 is:( move ua , 0 - 4 ; move ua + 4 , 3 )  decode:( move ua , 0 - 4 ; move 3 , 3 ) 
[11475] c:0 is:( move ua , 2 ; move 0 - ua , 4 * 3 )  decode:( move ua , 2 ; move ua , 9 ) 
[11476] c:0 is:( move 3 - ua , 0 - 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 - ua , 2 / 3 
[11477] c:0 is:( move ua , 0 - 3 ; move ua , 3 / 2 )  decode:loop 0 , 3 , move 0 - 4 , ua / 4 
[11478] c:0 is:( move 4 - ua , 3 ; move ua + 2 , 2 )  decode:( move 2 , 0 ; move ua + 2 , 5 ) 
[11479] c:0 is:( move 2 , 0 ; move 2 - ua , ua / 4 )  decode:( move 2 , ul / 3 ; move 4 , 8 ) 
[11480] c:0 is:( move ua - ul , 0 ; move 4 , 2 - 3 )  decode:( move 4 , ua / 3 ; move 5 , ul ) 
[11481] c:0 is:( move ul - ua , 0 - 2 ; move 3 , 4 )  decode:( move 3 , 0 - 4 ; move 3 , ul ) 
[11482] c:0 is:( move 4 + 3 , ul ; move ua + 2 , 2 )  decode:( move 8 , ul ; move ua + 2 , 2 ) 
[11483] c:0 is:( move ul - ua , 0 - 3 ; move 4 , 2 )  decode:( move 4 , ua / 4 ; move 4 , 2 ) 
[11484] c:0 is:( move 0 - 2 , ua / 4 ; move ua , 2 )  decode:( move 2 , 5 ; move ua , 5 ) 
[11485] c:0 is:( move ua , 2 - 3 ; move ua + 2 , 4 )  decode:( move ua , 6 ; move ua + 2 , 4 ) 
[11486] c:0 is:loop 0 , 7 , move 3 / v0 , ul / v0  decode:loop 0 , 3 , move 3 , ul / v0 
[11487] c:0 is:( move ua , 0 ; move ua + 2 , 4 / 3 )  decode:( move ua , 0 ; move 9 , 4 / 3 ) 
[11488] c:0 is:( move 2 , 0 - 3 ; move ua , 3 / ua )  decode:loop 0 , 3 , move 4 - ua , 2 / 4 
[11489] c:0 is:( move ua + 2 , 3 ; move 4 - ua , 2 )  decode:( move ua + 3 , 3 ; move 3 , ul ) 
[11490] c:0 is:( move 2 - ua , 2 ; move 2 - ua , 4 )  decode:( move 4 , 6 ; move 5 , 0 - 4 ) 
[11491] c:0 is:( move ua + ul , 0 - 3 ; move 3 , 4 )  decode:( move 3 - ua , v; move 3 , 4 ) 
[11492] c:0 is:( move ul - ua , 0 ; move 4 , 2 - 3 )  decode:loop 0 , 3 , move 0 - 3 , v0 - 3 
[11493] c:0 is:( move 0 - ua , 2 ; move ua , 2 / 4 )  decode:( move ua , 2 - 3 ; move ua , 9 ) 
[11494] c:0 is:( move 0 - 3 , 3 ; move ua + 4 , ul )  decode:( move 3 , 0 ; move ua + 4 , ul ) 
[11495] c:0 is:( move ua - ul , 2 ; move 3 , 0 - 4 )  decode:( move 3 , 2 ; move ua - ul , 4 ) 
[11496] c:0 is:( move 4 , 2 ; move ua + ul , 0 - 4 )  decode:( move 4 , 2 ; move ua , 0 - 4 ) 
[11497] c:0 is:( move ul - ua , 0 ; move 3 , 3 * 2 )  decode:( move ul - ua , 0 ; move 3 , 6 ) 
[11498] c:0 is:( move ua + ul , 0 - 2 ; move 4 , 4 )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[11499] c:0 is:( move 0 - 2 , 3 ; move ua - ul , 4 )  decode:( move 2 , 6 ; move ua - ul , 4 ) 
[11500] c:0 is:( move ua + ul , 0 - 4 ; move 4 , 2 )  decode:( move ua , 0 - 4 ; move 4 , 2 ) 
[11501] c:0 is:loop 0 , 6 , move 4 / v0 , ul / v0  decode:loop 0 , 3 , move 4 , 3 + 7 
[11502] c:0 is:loop 0 , 7 , move v0 / 3 , ul / v0  decode:( move 2 , 9 ; move ua , 4 / ua ) 
[11503] c:0 is:( move 3 , 0 - 2 ; move ua , ua / 3 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[11504] c:0 is:( move ua + ul , 3 ; move 4 , 0 - 3 )  decode:( move ua , 3 ; move ua , 0 - 3 ) 
[11505] c:0 is:( move ua + ul , 4 ; move 4 , 0 - 2 )  decode:( move 4 , 2 ; move ua + ul , 2 ) 
[11506] c:0 is:( move 4 , 0 - 3 ; move 2 - ua , ul )  decode:loop 0 , 3 , move 0 - 3 , v0 - 3 
[11507] c:0 is:( move ua - ul , 2 ; move 4 , 0 - 3 )  decode:( move 5 , 2 ; move 5 , 3 ) 
[11508] c:0 is:( move 4 , 0 ; move ul - ua , 2 - 3 )  decode:( move 4 , 0 ; move 5 , ua / 3 ) 
[11509] c:0 is:( move ua , 3 / 2 ; move ua + 2 , 2 )  decode:( move ua , ua / 2 ; move 8 , 2 ) 
[11510] c:0 is:( move ua + ul , 2 ; move 4 , 0 - 4 )  decode:( move ua , 2 ; move 4 , 0 - 4 ) 
[11511] c:0 is:( move 0 - ua , 2 ; move ua , 4 * 3 )  decode:( move ua , 0 - 2 ; move ua , 9 ) 
[11512] c:0 is:( move 0 - 2 , ul ; move ua , 3 / 2 )  decode:( move 2 , 4 ; move ua , 3 / 2 ) 
[11513] c:0 is:( move ua + 2 , 2 - 3 ; move 3 , ul )  decode:( move 3 , 3 ; move 2 + 4 , ul ) 
[11514] c:0 is:( move 3 , 2 ; move ua + ul , 2 - 3 )  decode:( move ua + ul , 2 ; move 3 , ul ) 
[11515] c:0 is:( move ua - 3 , 3 ; move ua + 3 , 2 )  decode:( move 3 , 3 ; move 3 + 3 , 2 ) 
[11516] c:0 is:( move ua + 2 , 3 ; move ua + 3 , 4 )  decode:( move ua + 3 , 3 ; move 9 , 4 ) 
[11517] c:0 is:( move ua - ul , 4 ; move 3 , 0 - 2 )  decode:( move 3 , 2 ; move ul - ua , 2 ) 
[11518] c:0 is:( move 3 , 0 - 4 ; move ua - ul , 2 )  decode:( move 3 , 0 - 4 ; move 5 , 2 ) 
[11519] c:0 is:( move ua + 2 , 0 ; move ua , 4 * 4 )  decode:( move ua + ul , 4 ; move 8 , 9 ) 
[11520] c:0 is:( move 2 - ua , ul ; move 3 , 0 - 4 )  decode:( move 3 , ul ; move 4 , ul / 4 ) 
[11521] c:0 is:( move 4 , ul ; move ua + 4 , 0 - 2 )  decode:( move 3 , ul ; move 4 , 0 - 2 ) 
[11522] c:0 is:( move 3 , 0 - 3 ; move ua , 2 / ua )  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[11523] c:0 is:( move ul - ua , 2 ; move 3 , 0 - 4 )  decode:( move 3 , 2 / 4 ; move ua , 7 ) 
[11524] c:0 is:( move 0 - 4 , 3 ; move ua + 3 , ul )  decode:( move 4 , ul / 3 ; move 9 , ul ) 
[11525] c:0 is:( move 0 - ua , 0 ; move 4 , ua / 4 )  decode:( move ua , 0 ; move 4 , ua / 4 ) 
[11526] c:0 is:( move ul - ua , 0 ; move 2 , 3 / 2 )  decode:( move ul - ua , 0 ; move 2 , 8 ) 
[11527] c:0 is:( move 3 , 2 - 3 ; move ua + ul , 2 )  decode:( move 3 , 2 - 3 ; move ua , 2 ) 
[11528] c:0 is:( move ua , 2 / 3 ; move ua + 2 , 2 )  decode:( move ua , 4 / ua ; move 8 , 2 ) 
[11529] c:0 is:( move 4 + ua , ul ; move 4 , 0 - 2 )  decode:( move 3 , 4 ; move ua + 4 , 2 ) 
[11530] c:0 is:( move 0 - ua , 3 ; move ua - 2 , 5 )  decode:( move 0 - ua , 3 ; move 4 , 5 ) 
[11531] c:0 is:( move 0 - 4 , 2 ; move ua + ul , 4 )  decode:( move 0 - 4 , 2 ; move ua , 4 ) 
[11532] c:0 is:( move 0 - 4 , 3 ; move ua - ul , 2 )  decode:( move 4 , 6 ; move ua - ul , 2 ) 
[11533] c:0 is:( move ua + 3 , 2 - 3 ; move 2 , ul )  decode:loop 0 , 3 , move 3 - ua , 2 - 3 
[11534] c:0 is:( move 2 , 4 ; move ua + ul , 0 - 4 )  decode:( move ua + ul , 0 ; move 2 , 4 ) 
[11535] c:0 is:( move 0 - 3 , ul ; move ua + 2 , 5 )  decode:( move 3 , 9 ; move 2 + ua , 5 ) 
[11536] c:0 is:( move 0 - ua , 0 ; move ua , 4 + 7 )  decode:loop 0 , 3 , move v0 - ua , ua / 4 
[11537] c:0 is:( move 4 , 0 ; move 4 + 2 , ua * ua )  decode:( move 4 , ul ; move ua , ua * ua ) 
[11538] c:0 is:( move 2 , 0 ; move ua + ul , 4 * 3 )  decode:( move 3 , 0 ; move ua + ul , 7 ) 
[11539] c:0 is:( move 5 , 2 ; move ua - ul , 0 - 2 )  decode:( move ul - ua , 0 ; move 5 , 2 ) 
[11540] c:0 is:( move 0 - ua , 3 ; move ua , 2 / 3 )  decode:( move ua , 3 ; move ua , 5 + 2 ) 
[11541] c:0 is:( move ua , 2 - 3 ; move ua + 4 , 2 )  decode:( move 9 , 2 - 3 ; move 4 , 2 ) 
[11542] c:0 is:( move 0 - 4 , 0 ; move ua , ua / 4 )  decode:( move 4 , 0 - 2 ; move ua , 8 ) 
[11543] c:0 is:loop 0 , 3 , move ua / v0 , 8 / v0  decode:loop 0 , 4 , move 4 , ua / v0 / 2 
[11544] c:0 is:( move 3 + ua , 2 ; move ua + 3 , 4 )  decode:( move 9 , 2 ; move 4 + 3 , 4 ) 
[11545] c:0 is:( move 0 - ua , 0 ; move 3 , ul / 4 )  decode:( move ua , 0 ; move 3 , 4 * 4 ) 
[11546] c:0 is:( move ua , 3 + 4 ; move 3 + ua , 2 )  decode:( move ua , 7 ; move 3 + ua , 2 ) 
[11547] c:0 is:( move ua + 2 , 3 / 2 ; move ua , 2 )  decode:( move ua + 2 , 3 / move ua , 2 ) 
[11548] c:0 is:( move 4 , 4 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 0 ; move 4 , 2 ) 
[11549] c:0 is:( move 3 + ua , 2 - 3 ; move ua , 3 )  decode:( move 9 , 2 - 3 ; move ua , 3 ) 
[11550] c:0 is:( move 4 , ul ; move ua - 2 , 0 - 3 )  decode:( move 4 , ul ; move 4 , 3 ) 
[11551] c:0 is:( move ua + 4 , 0 - 4 ; move 2 , ul )  decode:( move 9 , 4 / 3 ; move 4 , ul ) 
[11552] c:0 is:( move 6 , 2 ; move ua + ul , 0 - 3 )  decode:( move ua , 2 ; move ua , 3 ) 
[11553] c:0 is:( move ua , 0 - 2 ; move 3 , 4 / ua )  decode:( move 3 , 0 - 2 ; move 3 , 7 ) 
[11554] c:0 is:( move 3 - ua , 2 ; move 2 + ua , 5 )  decode:( move 3 , 5 ; move ua + 2 , 5 ) 
[11555] c:0 is:( move 2 , 0 ; move ua - ul , 4 * 3 )  decode:( move 2 , 0 ; move ua - ul , 7 ) 
[11556] c:0 is:( move ua , 4 + 3 ; move 2 - ua , 3 )  decode:( move ua , 3 + move 4 , 3 + 3 ) 
[11557] c:0 is:( move 3 , 2 / ua ; move 0 - ua , 4 )  decode:( move 3 , 2 / ua ; move ua , ul ) 
[11558] c:0 is:( move ua , 2 * 5 ; move ua + 2 , 2 )  decode:( move ua , 9 + 5 ; move 8 , 2 ) 
[11559] c:0 is:( move ua , 2 / 3 ; move ua + 2 , 3 )  decode:( move ua , 2 / 3 ; move 9 , 3 ) 
[11560] c:0 is:( move ul - ua , 0 - 2 ; move 4 , 4 )  decode:( move 4 , 5 / 4 ; move 4 , ul ) 
[11561] c:0 is:( move 5 , 2 ; move ua + ul , 0 - 4 )  decode:( move ua , 4 ; move ua , 0 - 4 ) 
[11562] c:0 is:( move 3 , ul ; move 0 - ua , 2 / 3 )  decode:( move 3 , ul ; move ua , 7 ) 
[11563] c:0 is:( move 3 , 2 ; move ul - ua , 2 - 3 )  decode:( move ua - ul , ul ; move 3 , ul ) 
[11564] c:0 is:( move 3 , ua / 4 ; move 0 - ua , 2 )  decode:( move 3 , ua / 4 ; move ua , ul ) 
[11565] c:0 is:( move ua - 2 , 2 / 3 ; move ua , 2 )  decode:( move 4 , 4 / ua ; move ua , 2 ) 
[11566] c:0 is:( move 0 - 3 , 3 / 2 ; move ua , ul )  decode:( move 3 , 9 + 4 ; move ua , ul ) 
[11567] c:0 is:( move 0 - 4 , ul ; move ua + 2 , 5 )  decode:( move 2 - ua , ul ; move 8 , 5 ) 
[11568] c:0 is:( move ua + 3 , 2 - 3 ; move ua , 4 )  decode:( move 9 , 2 - 3 ; move ua , 4 ) 
[11569] c:0 is:( move 2 , 0 ; move ua + ul , 4 / 3 )  decode:( move 2 , 0 ; move ua + 2 , 5 ) 
[11570] c:0 is:( move ua , 3 / 2 ; move ua + 2 , 3 )  decode:( move ua , 3 / 2 ; move ua , 3 ) 
[11571] c:0 is:( move ua - ul , 3 + 2 ; move 2 , 4 )  decode:( move ul - ua , 9 ; move 2 , 7 ) 
[11572] c:0 is:( move 5 , 0 - 2 ; move ua + ul , 4 )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[11573] c:0 is:( move 0 - ua , 3 / ua ; move 4 , 2 )  decode:( move ua , 9 + 4 ; move 4 , 5 ) 
[11574] c:0 is:( move ua + ul , 0 - 2 ; move 4 , 5 )  decode:( move 4 , 0 ; move 2 + 4 , 5 ) 
[11575] c:0 is:( move ua , 6 ; move ua + 2 , 0 - 4 )  decode:( move 9 , 2 ; move ua , 4 ) 
[11576] c:0 is:( move ua + 4 , ul ; move 2 , 2 - 3 )  decode:( move 2 , 0 ; move ua + 3 , ul ) 
[11577] c:0 is:( move ua , 3 / 2 ; move ua + 3 , 2 )  decode:( move ua , 3 / 2 ; move 9 , 2 ) 
[11578] c:0 is:( move ua + ul , 0 ; move 2 , 4 / 3 )  decode:( move ua + ul , 0 ; move 2 , 5 ) 
[11579] c:0 is:( move 0 - 4 , 2 ; move ua , ul - 4 )  decode:( move 4 , ul - move ua , ul / 4 ) 
[11580] c:0 is:( move 3 , 3 ; move ul - ua , 0 - 4 )  decode:( move 3 , 3 ; move ua , 2 / 5 ) 
[11581] c:0 is:( move ua + 4 , 4 ; move ua , 0 - 4 )  decode:( move ua , 0 ; move ua + 4 , 4 ) 
[11582] c:0 is:( move 4 , 0 - 2 ; move 4 , ua * ua )  decode:( move 4 , 3 ; move 4 , 4 / 3 ) 
[11583] c:0 is:( move ua + ul , 4 ; move 4 + 2 , 2 )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[11584] c:0 is:( move 3 , 0 - 4 ; move ua + ul , 4 )  decode:( move 3 , 0 ; move ua + ul , 4 ) 
[11585] c:0 is:( move ua + ul , 3 / 2 ; move 2 , 2 )  decode:( move 2 , 2 / 4 ; move 8 , 2 ) 
[11586] c:0 is:( move ua + 2 , 4 + 3 ; move ua , 4 )  decode:( move 2 + ua , 3 + move ua , 4 ) 
[11587] c:0 is:( move 2 - ua , 3 ; move 4 - ua , 2 )  decode:( move 4 , 6 ; move 3 , 0 - 2 ) 
[11588] c:0 is:( move 3 , 0 - 3 ; move 4 , ua * ua )  decode:( move 3 , 0 - 4 ; move 4 , 5 ) 
[11589] c:0 is:( move ua - ul , 0 - 2 ; move 4 , 4 )  decode:( move 2 - ua , ul ; move 5 , ul ) 
[11590] c:0 is:( move 2 , ua / 3 ; move ua , 0 - 4 )  decode:( move ua , 4 * 4 ; move 2 , 4 ) 
[11591] c:0 is:( move 4 - ua , 0 ; move ua , 3 / 2 )  decode:( move 2 , 0 - 3 ; move ua , 8 ) 
[11592] c:0 is:( move ua + ul , 0 ; move 4 , 3 / 2 )  decode:( move ua + ul , 0 ; move 4 , 8 ) 
[11593] c:0 is:( move 3 , 0 ; move ua - 2 , ua / 4 )  decode:loop 0 , 2 , move ua - 3 , 5 / 4 
[11594] c:0 is:( move 3 , 3 ; move ua + ul , 2 - 3 )  decode:( move 3 , 3 ; move ua + ul , ul ) 
[11595] c:0 is:( move 2 , 4 ; move ua + ul , 2 - 3 )  decode:( move ua + ul , 6 ; move 2 , ul ) 
[11596] c:0 is:( move 4 + 4 , 0 ; move ua , ul - 3 )  decode:( move ua + ul , 0 ; move 7 , 2 ) 
[11597] c:0 is:( move 5 , 0 - 3 ; move ua - ul , 2 )  decode:( move 5 , 0 - 3 ; move ua , 2 ) 
[11598] c:0 is:( move ua + 2 , ua / 3 ; move 3 , 2 )  decode:( move 9 , 2 ; move 3 , 0 - 2 ) 
[11599] c:0 is:( move ua + 2 , 4 ; move 4 - ua , 2 )  decode:( move ua + 2 , 4 ; move 3 , 5 ) 
[11600] c:0 is:( move ua + 3 , 4 ; move ua + 2 , 4 )  decode:( move 9 , 4 ; move ua + 2 , 4 ) 
[11601] c:0 is:( move ua , 2 / 3 ; move ua + 3 , 2 )  decode:( move ua , 3 / 4 ; move 3 , 2 ) 
[11602] c:0 is:( move ua , 0 - 2 ; move ua , 4 * 4 )  decode:( move ua , ul - 9 ; move ua , 9 ) 
[11603] c:0 is:( move 4 , 0 ; move ua + 3 , ua / 3 )  decode:( move 4 , 0 ; move 9 , ua / 3 ) 
[11604] c:0 is:( move 0 - 5 , 0 ; move ua , ua / 4 )  decode:( move 5 , 0 - 2 ; move ua , 8 ) 
[11605] c:0 is:( move 4 , 0 - 3 ; move ua - 3 , ul )  decode:( move 4 , ul - 3 ; move 4 , ul ) 
[11606] c:0 is:( move 2 , 0 - 3 ; move ua , ua / 4 )  decode:( move 2 , ua / 3 ; move ua , 2 ) 
[11607] c:0 is:( move 2 - ua , 2 / ua ; move 3 , 2 )  decode:( move 4 , 4 * 4 ; move 3 , 5 ) 
[11608] c:0 is:( move 6 , 0 - 3 ; move ua + ul , 2 )  decode:( move 6 , 0 - 3 ; move 8 , 2 ) 
[11609] c:0 is:( move 3 , 0 - 3 ; move ul - ua , 4 )  decode:( move 3 , 0 - 3 ; move ua , 4 ) 
[11610] c:0 is:( move 3 , ua / 3 ; move ua + 2 , 2 )  decode:( move 3 , ul ; move 8 , 0 - 2 ) 
[11611] c:0 is:( move 4 , 0 ; move ua + 2 , ua / 4 )  decode:( move 4 , 0 ; move ua + 2 , 8 ) 
[11612] c:0 is:( move 4 , 0 - 2 ; move ul - ua , 4 )  decode:( move 4 , 0 - 2 ; move 5 , 4 ) 
[11613] c:0 is:( move ua - ul , 2 - 3 ; move 3 , 2 )  decode:( move 3 , ul ; move ua - ul , 2 ) 
[11614] c:0 is:( move 2 - ua , 0 ; move ua , 4 / 3 )  decode:( move 4 , 0 - 3 ; move 5 , 5 ) 
[11615] c:0 is:( move ua + 2 , 2 / 3 ; move 2 , ul )  decode:( move ua + 2 , 3 / ; move v0 , ) / 2 
[11616] c:0 is:( move 2 , 2 - 3 ; move ua + ul , 4 )  decode:( move 2 , 5 ; move ua + ul , 4 ) 
[11617] c:0 is:( move ua + 3 , 2 / 3 ; move ua , 2 )  decode:( move ua + 3 , 4 ; move ua , 2 ) 
[11618] c:0 is:( move 0 - ua , 4 ; move ua , 3 / 2 )  decode:( move ua , 4 ; move ua , 9 + 4 ) 
[11619] c:0 is:( move ua , 4 * 3 ; move ua , 0 - 3 )  decode:( move ua , 4 * 3 ; move ua , 3 ) 
[11620] c:0 is:( move 4 , 0 - 3 ; move 3 - ua , ul )  decode:( move 4 , 0 - 3 ; move 4 , 4 ) 
[11621] c:0 is:( move ua + ul , 0 ; move 7 , 0 - 4 )  decode:( move ua + ul , 0 ; move 7 , 4 ) 
[11622] c:0 is:( move 4 , 3 ; move ua + ul , 0 - 4 )  decode:( move 3 , 9 / 4 ; move 4 , 4 ) 
[11623] c:0 is:( move ul - ua , 0 - 4 ; move 4 , 2 )  decode:loop 0 , 2 , move ua - 2 , 2 / 5 
[11624] c:0 is:( move ua + 2 , 2 / 4 ; move ua , 2 )  decode:( move 9 , 9 + 4 ; move ua , 2 ) 
[11625] c:0 is:( move 4 , 0 - 4 ; move 2 - ua , ul )  decode:( move 4 , 0 - 4 ; move 4 , 4 ) 
[11626] c:0 is:( move 5 , 0 - 3 ; move 2 - ua , ul )  decode:( move 5 , 0 - 3 ; move 4 , 4 ) 
[11627] c:0 is:( move 4 , 2 ; move ua - ul , 0 - 4 )  decode:( move 4 , 2 ; move 5 , 0 - 4 ) 
[11628] c:0 is:( move ua + ul , 4 + 3 ; move 3 , 2 )  decode:( move ua + ul , 4 ; move 3 , 2 ) 
[11629] c:0 is:( move 5 , 0 - 3 ; move ul - ua , 2 )  decode:( move 4 , 3 - move ul - ua , 2 ) 
[11630] c:0 is:( move 4 , 0 - 4 ; move 2 , ua - ul )  decode:( move 2 , 0 - 2 ; move 4 , ul ) 
[11631] c:0 is:( move ua + 2 , 0 ; move 4 , ua / 4 )  decode:( move ua + 2 , 0 ; move 4 , 8 ) 
[11632] c:0 is:( move ua , 4 / 3 ; move ua , 0 - 2 )  decode:( move ua , 0 - 2 ; move ua , 2 ) 
[11633] c:0 is:( move ua + 3 , ul ; move 3 , 2 - 3 )  decode:( move 3 , ul ; move ua + 3 , ul ) 
[11634] c:0 is:( move ua + 2 , 2 ; move 3 , ua / 3 )  decode:( move 3 , ul ; move 8 , 2 ) 
[11635] c:0 is:( move ua + ul , 2 - 3 ; move 4 , 2 )  decode:( move 3 , ul ; move ua , 0 - 2 ) 
[11636] c:0 is:( move 2 , 0 ; move ua + ul , 3 / 4 )  decode:( move 2 , 0 ; move ua + ul , 7 ) 
[11637] c:0 is:( move ua + ul , 0 - 3 ; move 4 , 4 )  decode:( move 4 + 3 , 4 ; move 4 , 4 ) 
[11638] c:0 is:( move 0 - ua , ua / 3 ; move 4 , 2 )  decode:( move 4 , 7 ; move ua , 0 - 2 ) 
[11639] c:0 is:( move ua , 0 ; move 3 - ua , 2 / 4 )  decode:( move ua , 0 ; move 3 - ua , 9 ) 
[11640] c:0 is:( move 4 , 0 - 3 ; move ua + ul , 4 )  decode:( move 4 , 0 - 3 ; move ua , 4 ) 
[11641] c:0 is:( move 0 - 3 , 3 ; move ua - ul , 4 )  decode:( move 3 , 6 ; move 5 , 4 / 3 ) 
[11642] c:0 is:( move ul - ua , 3 ; move 3 , 0 - 4 )  decode:( move 3 , ua / 4 ; move 5 , ul ) 
[11643] c:0 is:( move ua + 3 , 6 ; move ua + 2 , 2 )  decode:( move 9 , 6 ; move 7 + 2 , 2 ) 
[11644] c:0 is:( move ua , 6 + 4 ; move ua , 0 - 2 )  decode:( move ua , 2 / ua ; move ua , 2 ) 
[11645] c:0 is:( move 0 - ua , ua / 4 ; move 3 , 2 )  decode:( move ua , 2 - 9 ; move 3 , 2 ) 
[11646] c:0 is:( move 0 - ua , 4 / 3 ; move ua , 2 )  decode:( move ua , 9 / 4 ; move ua , ul ) 
[11647] c:0 is:( move 3 , 2 - 3 ; move ua - ul , 2 )  decode:( move ul - ua , ul ; move 5 , 2 ) 
[11648] c:0 is:( move ua + 2 , 0 ; move ua + 2 , 9 )  decode:loop 0 , 3 , move ua + ul , 3 * v0 
[11649] c:0 is:( move ua - ul , 0 - 4 ; move 4 , 2 )  decode:( move ul - ua , 0 ; move 4 , ul ) 
[11650] c:0 is:( move 3 - ua , 4 ; move 2 - ua , 2 )  decode:( move 3 , 4 ; move 4 , 2 ) 
[11651] c:0 is:( move ua + 3 , 2 - 3 ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 - ul 
[11652] c:0 is:( move 3 , 3 / ua ; move ua + 2 , 2 )  decode:( move 3 , 4 / ua ; move 9 , 2 ) 
[11653] c:0 is:( move ua , 4 * 3 ; move ua + 2 , 2 )  decode:( move ua , 4 * 3 ; move 8 , 2 ) 
[11654] c:0 is:( move 4 , 3 / ua ; move 0 - ua , 2 )  decode:( move 4 , 3 / ua ; move ua , 5 ) 
[11655] c:0 is:( move 3 - ua , ul ; move 3 + 3 , 2 )  decode:( move 3 , ul ; move ua , ul ) 
[11656] c:0 is:( move 3 - ua , 0 - 3 ; move 4 , ul )  decode:( move 3 , ul / 6 ; move 4 , 4 ) 
[11657] c:0 is:( move 0 - ua , 3 ; move ua , 4 * 3 )  decode:( move ua , 6 ; move ua , 5 * 2 ) 
[11658] c:0 is:( move ua , ua / 3 ; move 2 , 0 - 4 )  decode:( move ua , ua / 4 ; move 2 , 4 ) 
[11659] c:0 is:( move 0 - ua , 2 ; move ua , 3 / 4 )  decode:( move ua , 6 ; move ua , 0 - 4 ) 
[11660] c:0 is:( move 4 , 2 - 3 ; move ua + ul , 2 )  decode:( move 4 , 2 - 3 ; move ua , 2 ) 
[11661] c:0 is:( move 0 - ua , 3 / 2 ; move 3 , ul )  decode:( move 3 , 3 * 5 ; move ua , ul ) 
[11662] c:0 is:( move 0 - 3 , 2 ; move ua , ua / 4 )  decode:loop 0 , 4 , move v0 + ul , ua / 4 
[11663] c:0 is:( move 3 - ua , 3 ; move ua , 2 - 3 )  decode:( move 3 , 3 ; move ua , ua / 3 ) 
[11664] c:0 is:( move ua - ul , 0 - 3 ; move 3 , 4 )  decode:loop 0 , 4 , move 2 , v0 - 3 
[11665] c:0 is:( move 4 , 0 - 4 ; move ul - ua , 2 )  decode:( move 4 , 0 - 4 ; move 5 , 5 ) 
[11666] c:0 is:( move ua + 4 , 0 - 4 ; move ua , 4 )  decode:( move ua , 0 - 4 ; move ua , 4 ) 
[11667] c:0 is:( move 2 - ua , 2 - 3 ; move ua , 4 )  decode:( move 4 , ua / 3 ; move ua , ul ) 
[11668] c:0 is:( move ua , 2 / 3 ; move 2 - ua , 2 )  decode:( move ua , 7 ; move 5 , 5 ) 
[11669] c:0 is:( move 2 , 3 / ua ; move 3 + ua , 2 )  decode:( move 2 , 4 * 3 ; move 9 , 2 ) 
[11670] c:0 is:( move 2 , 3 ; move ua + 2 , ua / 3 )  decode:( move 2 , 0 ; move ua + 2 , 2 ) 
[11671] c:0 is:( move ua + 2 , 4 * 3 ; move ua , 2 )  decode:( move ua + 2 , 3 + move ua , 2 ) 
[11672] c:0 is:( move ua - 2 , 0 ; move ua , 3 / 4 )  decode:( move 4 , 0 ; move ua , 7 ) 
[11673] c:0 is:( move 2 , 4 ; move ua - ul , 2 - 3 )  decode:( move ul - ua , 3 ; move 2 , ul ) 
[11674] c:0 is:( move 3 , ul ; move 0 - ua , 2 / 4 )  decode:( move 3 , ua / 4 ; move ua , 9 ) 
[11675] c:0 is:( move ua , 2 / 4 ; move ua + 2 , 3 )  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[11676] c:0 is:( move 2 - ua , 2 - 3 ; move 4 , ul )  decode:( move 4 , 0 - 3 ; move 4 , ul ) 
[11677] c:0 is:( move 4 , 0 - 3 ; move ua , ua / 3 )  decode:( move 4 , 0 - 3 ; move 5 , 2 ) 
[11678] c:0 is:( move ua + ul , 3 ; move 4 , 2 - 3 )  decode:( move 4 , 2 ; move 4 + 3 , ul ) 
[11679] c:0 is:( move ua + 2 , 6 ; move ua + 2 , 4 )  decode:( move 8 , 6 ; move ua + 2 , 4 ) 
[11680] c:0 is:( move 0 - 3 , 4 ; move ua - ul , 4 )  decode:( move 3 , ul ; move ua - ul , 4 ) 
[11681] c:0 is:( move 3 , 0 - 4 ; move ul - ua , 4 )  decode:( move 3 , 9 / 4 ; move 5 , ul ) 
[11682] c:0 is:( move 0 - 2 , 4 / ua ; move ua , 4 )  decode:( move 2 , 4 ; move ua , ul / 4 ) 
[11683] c:0 is:( move ua , 5 * 0 - 2 ; move ua , 4 )  decode:( move ua , 0 - 9 ; move ua , 4 ) 
[11684] c:0 is:( move 3 - ua , 2 ; move ua , 2 / 3 )  decode:( move 4 , 4 ; move ua , 7 v0 ) 
[11685] c:0 is:( move ua + ul , 2 / 4 ; move 2 , 2 )  decode:( move ua + ul , 3 ; move 2 , 2 ) 
[11686] c:0 is:( move ua , 3 / ua ; move 3 , 0 - 4 )  decode:( move 3 , 9 ; move ua , 4 ) 
[11687] c:0 is:( move ua + 2 , ul / 4 ; move 2 , 2 )  decode:( move 2 , ul / 4 ; move ua , 2 ) 
[11688] c:0 is:( move 2 - ua , 0 ; move 4 , 4 / ua )  decode:( move 2 - ua , 0 ; move 4 , 7 ) 
[11689] c:0 is:( move 2 , 4 + 3 ; move ua + ul , 4 )  decode:( move 2 , 4 / ua ; move 8 , 4 ) 
[11690] c:0 is:( move ul - ua , 3 ; move 4 , 0 - 4 )  decode:( move 4 , ua / 4 ; move 5 , ul ) 
[11691] c:0 is:( move 5 + 3 , 0 ; move ua - ul , 4 )  decode:( move ua + 2 , 0 ; move ua , 4 ) 
[11692] c:0 is:( move 2 - ua , 0 ; move 4 , ua / 4 )  decode:loop 0 , 2 , move 0 - 4 , ua / 4 
[11693] c:0 is:( move 3 , 2 ; move ua + 3 , ua / 3 )  decode:( move ua + 3 , ul ; move 3 , ul ) 
[11694] c:0 is:( move ua + 4 , 4 ; move 3 + ua , 3 )  decode:loop 0 , 4 , move 4 + 4 , 4 - v0 
[11695] c:0 is:( move 4 , 2 - 3 ; move ul - ua , 2 )  decode:( move 4 , 2 - 3 ; move 5 , 2 ) 
[11696] c:0 is:( move ul - ua , 0 ; move 3 , 4 * 3 )  decode:( move ul - ua , 0 ; move 3 , 7 ) 
[11697] c:0 is:( move 4 , 3 ; move ua + ul , 2 - 3 )  decode:( move 3 , 3 ; move ua + ul , ul ) 
[11698] c:0 is:( move 0 - ua , ua / 4 ; move 4 , 2 )  decode:( move ua , 2 / 4 ; move 4 , 2 ) 
[11699] c:0 is:( move ua , ua / 4 ; move 0 - 4 , 2 )  decode:( move ua , ua / 4 ; move 4 , ul ) 
[11700] c:0 is:( move ua + 3 , 4 ; move ua + 4 , 3 )  decode:( move 4 + 3 , 4 ; move 4 , 3 ) 
[11701] c:0 is:( move 0 - 3 , 4 ; move ul - ua , 4 )  decode:( move 3 , 8 ; move ua - ul , 4 ) 
[11702] c:0 is:( move ul - ua , 3 ; move 3 + 4 , 2 )  decode:( move 5 , 0 ; move ua + ul , 2 ) 
[11703] c:0 is:( move ua - ul , 0 ; move 4 , 3 / 2 )  decode:( move 5 , 0 ; move 4 , 3 / 4 ) 
[11704] c:0 is:( move 2 - ua , 3 ; move 3 + 4 , ul )  decode:( move 4 , 3 ; move ua + ul , ul ) 
[11705] c:0 is:( move ua + 3 , 4 ; move ua - 4 , 2 )  decode:( move ua + 3 , 4 ; move 3 , 2 ) 
[11706] c:0 is:( move 5 , 0 - 2 ; move ua - ul , 4 )  decode:( move 5 , 0 - 2 ; move 5 , 4 ) 
[11707] c:0 is:( move ua , 2 / 3 ; move ua + 2 , 4 )  decode:( move ua , ua / 3 ; move 8 , 4 ) 
[11708] c:0 is:( move 0 - ua , 4 ; move ua , 2 / 4 )  decode:( move ua , 4 ; move ua , 9 ) 
[11709] c:0 is:( move ua , 4 * 3 ; move 2 - ua , 2 )  decode:loop 0 , 3 , move 3 + v0 , 4 / 3 
[11710] c:0 is:( move 4 , 0 - 3 ; move ua - ul , 4 )  decode:( move 4 , 0 - 3 ; move 5 , 4 ) 
[11711] c:0 is:( move ua + 2 , 4 ; move ua / 3 , 2 )  decode:( move ua + 2 , 4 ; move 2 , 2 ) 
[11712] c:0 is:( move 2 , 3 / 0 - 4 ; move ua , ul )  decode:( move 2 , 4 * 3 ; move ua , ul ) 
[11713] c:0 is:( move 0 - ua , 3 * 4 ; move 3 , ul )  decode:( move 3 , 0 ; move ua , ua / 3 ) 
[11714] c:0 is:( move 2 , 4 * 3 ; move ua + ul , 2 )  decode:( move 3 , 3 * 4 ; move ua , 2 ) 
[11715] c:0 is:( move ua , 0 - 3 ; move ua , 4 * 4 )  decode:loop 0 , 2 , move ua , 4 * 4 
[11716] c:0 is:( move 4 * 2 , ua ; move ua - 3 , 2 )  decode:( move ua + 3 , 0 ; move 3 , 2 ) 
[11717] c:0 is:( move ua + 2 , 4 / 3 ; move ua , 2 )  decode:( move 8 , 4 / 3 ; move ua , 2 ) 
[11718] c:0 is:( move 3 - ua , 0 ; move ua , 4 / 3 )  decode:( move 3 , 0 ; move ua , 3 / 2 ) 
[11719] c:0 is:( move 3 , 3 / 2 ; move ua + ul , 2 )  decode:( move 3 , 2 / 4 ; move 7 , 2 ) 
[11720] c:0 is:( move ul - ua , 0 - 3 ; move 4 , 4 )  decode:( move 4 , 0 ; move 5 , ul ) 
[11721] c:0 is:( move ua , 0 - 3 ; move ua , 4 / 3 )  decode:( move ua , 5 / 2 ; move ua , 5 ) 
[11722] c:0 is:( move 3 , 2 - 3 ; move ua + ul , 4 )  decode:( move 3 , 0 ; move ua + ul , 4 ) 
[11723] c:0 is:( move 4 , 0 - 3 ; move 4 , ua * ua )  decode:( move 0 - 4 , 0 ; move 4 , 8 ) 
[11724] c:0 is:( move 0 - ua , 3 / ua ; move 3 , 4 )  decode:( move ua , 2 * 9 ; move 3 , ul ) 
[11725] c:0 is:( move 3 , 0 - 3 ; move ua , 4 / ua )  decode:loop 0 , 3 , move 3 , ua / ua ua 
[11726] c:0 is:( move ua + ul , 4 ; move 3 , 2 - 3 )  decode:( move 3 , 4 ; move 7 , ul ) 
[11727] c:0 is:( move 3 , ua / 2 ; move ua + 2 , 4 )  decode:( move 3 , 0 ; move 9 , 4 ) 
[11728] c:0 is:( move ua + ul , 2 - 3 ; move 3 , 4 )  decode:( move 3 , 6 ; move ua , 0 - 4 ) 
[11729] c:0 is:( move 3 - ua , ul ; move 3 , 4 + 2 )  decode:( move 3 , 4 ; move 4 , 3 ) 
[11730] c:0 is:( move 4 + 2 , 3 ; move 3 , ua * ua )  decode:( move ua , 3 ; move 3 , ua * ua ) 
[11731] c:0 is:( move 4 , ul ; move 0 - ua , 2 / 3 )  decode:( move 4 , ul ; move ua , 5 / 2 ) 
[11732] c:0 is:( move ua , 0 - ul ; move 3 , 4 * 3 )  decode:( move 3 , 8 ; move ua , 3 / 4 ) 
[11733] c:0 is:( move 2 , 0 - 4 ; move ua , ua / 4 )  decode:( move ua , 4 + 3 ; move 9 , 8 ) 
[11734] c:0 is:( move ul - ua , 2 - 3 ; move 4 , 2 )  decode:( move 4 , 0 - 4 ; move 4 , 2 ) 
[11735] c:0 is:( move ua + 4 , 2 - 3 ; move ua , 4 )  decode:( move ua + 4 , 3 ; move ua , 4 ) 
[11736] c:0 is:( move 3 , 2 / ua ; move ua + 2 , 4 )  decode:( move 3 , 9 / ua ; move 9 , 4 ) 
[11737] c:0 is:( move ul - ua , 0 ; move 3 , 2 / 4 )  decode:( move ul - ua , 0 ; move 4 , 7 ) 
[11738] c:0 is:( move ua - 2 , ul ; move 4 + 4 , 2 )  decode:( move 4 , ul ; move ua + 2 , 2 ) 
[11739] c:0 is:( move ua + 2 , ua / 4 ; move 3 , 2 )  decode:( move ua + 2 , 9 ; move 3 , 2 ) 
[11740] c:0 is:( move 2 , ul / 4 ; move 2 + ua , 2 )  decode:( move 2 , 4 / ua ; move 8 , 2 ) 
[11741] c:0 is:( move ua , 2 ; move ua - 3 , 3 / 2 )  decode:( move ua , 2 ; move 3 , 3 / 2 ) 
[11742] c:0 is:( move 4 , 2 - 3 ; move 2 , ua * ua )  decode:( move 2 , 4 ; move 4 , 0 - 9 ) 
[11743] c:0 is:( move 0 - ua , 3 ; move 3 , ua / 4 )  decode:( move ua , 6 ; move 3 , 3 / 2 ) 
[11744] c:0 is:( move ua , 4 * 4 ; move ua + 2 , 2 )  decode:( move ua , 4 * 4 ; move 9 , 2 ) 
[11745] c:0 is:( move 2 - ua , 2 / 4 ; move ua , 2 )  decode:( move 4 , 0 - 4 ; move ua , 2 ) 
[11746] c:0 is:( move 4 , 2 / ua ; move 3 + ua , 2 )  decode:( move 4 , ua / ua ; move 9 , 2 ) 
[11747] c:0 is:( move 0 - ua , 2 ; move 4 , ua / 4 )  decode:( move ua , 2 ; move 4 , 9 / 2 ) 
[11748] c:0 is:( move ua , 3 / 2 ; move ua + 2 , 4 )  decode:( move ua , 9 / 2 ; move 9 , 4 ) 
[11749] c:0 is:( move 0 - ua , 3 ; move ua , 4 / 3 )  decode:( move 6 , 0 - 3 ; move ua , 8 ) 
[11750] c:0 is:( move 4 , 3 ; move ua - ul , 0 - 4 )  decode:( move 5 , ua / 4 ; move 4 , 4 ) 
[11751] c:0 is:( move ul - ua , 3 ; move 3 , 2 - 3 )  decode:( move 3 , 2 ; move ua - ul , ul ) 
[11752] c:0 is:( move 4 , 3 ; move ul - ua , 0 - 4 )  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[11753] c:0 is:( move ua + 2 , 3 / 2 ; move ua , 4 )  decode:( move 8 , 3 / 2 ; move ua , 4 ) 
[11754] c:0 is:( move ua + ul , 4 ; move 3 , 0 - 5 )  decode:( move 3 , 4 ; move ua + ul , 5 ) 
[11755] c:0 is:( move 0 - 3 , 6 ; move ul - ua , 2 )  decode:( move 3 , 9 ; move ua - ul , 2 ) 
[11756] c:0 is:( move ua , 0 - 3 ; move 4 , ua / 3 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[11757] c:0 is:( move 3 , 0 ; move ua + ul , 3 / 4 )  decode:( move 3 , 0 ; move 8 , 7 ) 
[11758] c:0 is:( move 0 - ua , 2 / ua ; move 4 , 4 )  decode:( move ua , 0 - 4 ; move 4 , ul ) 
[11759] c:0 is:( move ua - ul , 3 ; move 4 , 0 - 4 )  decode:( move 4 , ua / 3 ; move 5 , 4 ) 
[11760] c:0 is:( move 4 , 2 / ua ; move ua + 2 , 3 )  decode:( move 3 , ul / move ua + 2 , 3 ) 
[11761] c:0 is:( move ua , 4 / 3 ; move ua + 2 , 2 )  decode:loop 0 , 4 , move v0 * 2 , 0 - 2 
[11762] c:0 is:( move 0 - ua , 4 ; move ua , 4 * 3 )  decode:( move ua , ul + 3 ; move ua , 9 ) 
[11763] c:0 is:( move 4 , 3 / ua ; move ua + 2 , 2 )  decode:( move 4 , 3 / ua ; move 9 , 2 ) 
[11764] c:0 is:( move 4 , 0 ; move ua - ul , 2 / 3 )  decode:( move 4 , 0 ; move ul - ua , 7 ) 
[11765] c:0 is:( move 0 - 4 , 3 ; move ua - ul , 4 )  decode:( move 4 , 6 ; move 5 , 2 / 5 ) 
[11766] c:0 is:( move ua - ul , 3 ; move 2 - 4 , 2 )  decode:( move 5 , 3 ; move ua - 4 , 2 ) 
[11767] c:0 is:( move 4 , ua / 4 ; move 0 - ua , 2 )  decode:( move 4 , ua / 4 ; move ua , ul ) 
[11768] c:0 is:( move 2 , 0 ; move ul - ua , 4 / 3 )  decode:( move 2 , 0 ; move ua - ul , 5 ) 
[11769] c:0 is:( move 2 , 3 ; move ua + 2 , ua / 4 )  decode:( move 3 , 9 ; move ua + 2 , 8 ) 
[11770] c:0 is:( move 3 , ua / 3 ; move ua + 3 , 2 )  decode:( move 3 , 3 ; move ua + 3 , 2 ) 
[11771] c:0 is:( move ua + 4 , 4 ; move ul - 2 , 2 )  decode:( move ua + 3 , 4 ; move ul , ul ) 
[11772] c:0 is:( move 3 , 3 ; move ua - 2 , ul - 3 )  decode:( move 2 - ua , ul ; move 3 , 2 ) 
[11773] c:0 is:( move 4 , 0 - 3 ; move ul - ua , 4 )  decode:loop 0 , 3 , move 0 - 3 , v0 - 3 
[11774] c:0 is:( move ua + 2 , 2 / 4 ; move 2 , ul )  decode:( move ua + 2 , 3 ; move 2 , ul ) 
[11775] c:0 is:( move 2 , 2 - 3 ; move ua , ua / 3 )  decode:( move ua , 2 * 2 ; move 2 , 2 ) 
[11776] c:0 is:( move ua + 2 , 3 ; move 3 - ua , 5 )  decode:( move ua + 2 , 3 ; move 4 , 5 ) 
[11777] c:0 is:( move ua , 0 - 3 ; move 3 , ua / 4 )  decode:loop 0 , 4 , move 0 - 2 , ua / 4 
[11778] c:0 is:( move ua + 2 , 0 - 9 ; move ua , 2 )  decode:( move 8 , 0 - 9 ; move ua , 2 ) 
[11779] c:0 is:( move 2 , 4 ; move ul - ua , 2 - 3 )  decode:( move 2 , 4 ; move ua - ul , ul ) 
[11780] c:0 is:( move 3 , 3 ; move ua , 2 + 3 / ua )  decode:( move 3 , 4 ; move ua , 5 / 2 ) 
[11781] c:0 is:( move 2 - ua , 2 ; move ua , 4 * 3 )  decode:( move 4 , 2 ; move ua , 9 ) 
[11782] c:0 is:( move ua , 4 * 3 ; move ua , 0 - 4 )  decode:( move ua , 9 + 2 ; move ua , 4 ) 
[11783] c:0 is:( move ua + 3 , ul / 3 ; move 2 , 2 )  decode:( move 9 , 2 / 4 ; move 3 , 2 ) 
[11784] c:0 is:( move 4 , 0 - 4 ; move ua + ul , 4 )  decode:( move ua , 0 - 4 ; move 8 , 4 ) 
[11785] c:0 is:( move 3 , 0 ; move ua + ul , 4 / 3 )  decode:( move 3 , 0 ; move ua + 2 , 5 ) 
[11786] c:0 is:( move 0 - ua , 4 / ua ; move 4 , 2 )  decode:( move ua , 9 ; move 4 , 5 ) 
[11787] c:0 is:( move 2 , 2 - 3 ; move ua - ul , 4 )  decode:( move 2 , 2 - 3 ; move ua , 4 ) 
[11788] c:0 is:( move 3 , 0 - 4 ; move ua + ul , 5 )  decode:( move ua , 4 ; move 3 , 3 + 4 ) 
[11789] c:0 is:( move ua - ul , 2 ; move 3 + 3 , 4 )  decode:( move ul - ua , 2 ; move ua , 4 ) 
[11790] c:0 is:( move 4 , 0 - 4 ; move 3 , ua * ua )  decode:( move 3 , 4 ; move 4 , 0 - 2 ) 
[11791] c:0 is:( move ua - 2 , 3 ; move ua - 2 , 5 )  decode:( move 4 , 3 ; move 2 - ua , 5 ) 
[11792] c:0 is:( move 2 , 3 ; move ua + ul , 2 / 3 )  decode:( move 2 , 3 ; move ua + ul , 7 ) 
[11793] c:0 is:( move 3 , 0 - 4 ; move ua - ul , 4 )  decode:( move 0 - 3 , 0 ; move ua , 7 ) 
[11794] c:0 is:( move 2 , 2 - 3 ; move ul - ua , 4 )  decode:( move 2 , 2 - 3 ; move 5 , ul ) 
[11795] c:0 is:( move ua + 4 , 4 ; move ua + 2 , 4 )  decode:( move ua + 4 , 4 ; move ua , 4 ) 
[11796] c:0 is:( move ul , 3 ; move 3 * 3 , 0 - ul )  decode:( move 3 - ua , 0 ; move 3 , 2 ) 
[11797] c:0 is:( move 4 , ua - 3 ; move 2 , ul - 2 )  decode:loop 0 , 4 , move v0 , v0 - v0 
[11798] c:0 is:( move 3 , ua / 4 ; move ua + 2 , 2 )  decode:( move 3 , ua / 4 ; move ua , 2 ) 
[11799] c:0 is:( move ua + 2 , 3 / 4 ; move ua , 2 )  decode:( move 9 , 4 + 3 ; move ua , 2 ) 
[11800] c:0 is:( move 3 , 2 ; move ua + ul , 3 / 2 )  decode:( move 3 , 2 ; move ua + ul , 8 ) 
[11801] c:0 is:( move 0 - 4 , ua / 4 ; move ua , 2 )  decode:( move 4 , 4 / ua ; move ua , 2 ) 
[11802] c:0 is:( move 3 , 3 ; move ua - ul , 2 - 3 )  decode:loop 0 , 3 , move 3 , 2 - v0 
[11803] c:0 is:( move 4 , 0 - 4 ; move ua , 2 / ua )  decode:( move ua , 4 / 4 ; move 4 , 7 ) 
[11804] c:0 is:( move ua , 0 - 4 ; move 4 , 2 / ua )  decode:loop 0 , 3 , move 3 - ua , 4 * 3 
[11805] c:0 is:( move ua , 3 ; move 0 - ua , 4 / 3 )  decode:( move 5 , 3 ; move ua , 0 - 8 ) 
[11806] c:0 is:( move 4 - ua , 3 ; move ua + 2 , 4 )  decode:( move 3 , 0 ; move : move 8 , ul ) 
[11807] c:0 is:( move ua + 2 , 2 ; move 3 , ua / 4 )  decode:( move 8 , 2 ; move 3 , ua / 4 ) 
[11808] c:0 is:( move 3 , 2 ; move ua + 2 , ua / 4 )  decode:( move 3 , 2 ; move 9 , ua / 4 ) 
[11809] c:0 is:( move 4 - ua , 4 ; move 0 - ua , 4 )  decode:( move - 3 , 4 / 0 - ua , 4 ) 
[11810] c:0 is:( move ua - 2 , 2 - 3 ; move 4 , ul )  decode:( move 4 , 2 - 3 ; move 4 , ul ) 
[11811] c:0 is:( move 5 , 0 - 4 ; move ul - ua , 2 )  decode:( move 4 , 0 - 4 ; move 5 , 5 ) 
[11812] c:0 is:( move ua , 0 ; move ua - 3 , 4 / 3 )  decode:( move ua , 0 ; move 3 , 3 / 2 ) 
[11813] c:0 is:( move ua , 0 - 2 / 4 ; move ua , 4 )  decode:( move ua , 4 * 3 ; move ua , 4 ) 
[11814] c:0 is:( move 2 , 4 / ua ; move ua + 3 , 2 )  decode:( move 2 , 4 ; move ua + 3 , 2 ) 
[11815] c:0 is:( move 3 , 4 * 3 ; move 0 - ua , ul )  decode:( move 3 , 3 * 4 ; move ua , 2 ) 
[11816] c:0 is:( move 4 , 4 / ua ; move 0 - ua , 2 )  decode:( move 4 , 9 ; move ua , ul ) 
[11817] c:0 is:( move ua + 4 , ul ; move 3 , 2 - 3 )  decode:( move 3 , ul ; move ua + 4 , ul ) 
[11818] c:0 is:( move 3 - ua , 2 ; move ua , 3 / 2 )  decode:( move 4 , 2 ; move ua , 3 / 2 ) 
[11819] c:0 is:( move 2 , 3 ; move 2 - ua , 3 / ua )  decode:( move 3 , 4 * 4 ; move 4 , 9 ) 
[11820] c:0 is:( move 2 , 3 ; move ua + ul , 3 / 2 )  decode:( move 2 , 3 ; move ua + ul , 8 ) 
[11821] c:0 is:( move 4 , 2 - 3 ; move ua - ul , 2 )  decode:( move 2 - ua , ul ; move 5 , 2 ) 
[11822] c:0 is:( move 4 , 4 ; move ua + ul , 0 - 4 )  decode:( move ua + ul , 0 ; move 4 , 4 ) 
[11823] c:0 is:( move ul , 0 - 2 ; move ua , 4 / 3 )  decode:( move ul , 4 ; move ua , 2 / 3 ) 
[11824] c:0 is:( move 3 , 3 ; move ua , ua - 4 + 3 )  decode:( move 3 , 3 ; move ua , 4 * 3 ) 
[11825] c:0 is:( move 0 - 4 , 2 / ua ; move ua , 4 )  decode:loop 0 , 4 , move ua - 4 , 2 / 5 
[11826] c:0 is:( move 0 - ua , 6 ; move ua - 4 , 2 )  decode:( move ua , 9 ; move 4 - ua , 2 ) 
[11827] c:0 is:( move ua , 4 / 3 ; move 2 , 0 - ul )  decode:( move 2 , 0 - 9 ; move ua , ul ) 
[11828] c:0 is:( move 0 - ua , 3 / 2 ; move 4 , ul )  decode:( move ua , 9 + 2 ; move 4 , 2 ) 
[11829] c:0 is:( move 4 + 4 , 0 ; move 4 , ua * ua )  decode:( move ua + 2 , 0 ; move 4 , 8 ) 
[11830] c:0 is:( move 3 , 2 / ua ; move 4 , 0 - ul )  decode:( move 4 , 3 * 2 ; move 3 , ul ) 
[11831] c:0 is:( move 5 , 3 ; move ua + ul , 0 - 4 )  decode:( move ua , 9 / 3 ; move 5 , 4 ) 
[11832] c:0 is:( move 4 , 0 ; move 2 - ua , ua / 4 )  decode:loop 0 , 2 , move 4 , ua / 4 
[11833] c:0 is:( move 0 - 3 , 3 ; move ua , ua / 4 )  decode:( move 3 , 3 ; move ua , 3 / 2 ) 
[11834] c:0 is:( move ua , 2 - 3 ; move ua , 3 / 2 )  decode:( move ua , 0 - 9 ; move ua , 7 ) 
[11835] c:0 is:( move 3 , 4 / ua ; move ua + 2 , 2 )  decode:( move 3 , 3 / 4 ; move 7 , 2 ) 
[11836] c:0 is:( move 3 - ua , 0 - 4 ; move 4 , ul )  decode:loop 0 , 3 , move ua - 4 , 0 - 3 
[11837] c:0 is:( move 4 , ua / 3 ; move ua + 2 , 2 )  decode:( move 4 , ul ; move 2 + ua , 2 ) 
[11838] c:0 is:( move 2 , ua / 4 ; move 0 - ua , 4 )  decode:( move 2 , 3 / 2 ; move ua , ul ) 
[11839] c:0 is:( move 3 - ua , 3 ; move 2 - ua , 4 )  decode:( move 3 , 3 ; move 4 , 4 ) 
[11840] c:0 is:( move ua + 2 , 4 / ua ; move 3 , 2 )  decode:( move ua + 2 , 3 + move 3 , 2 ) 
[11841] c:0 is:( move 3 , 0 ; move ua - ul , 4 * 3 )  decode:loop 0 , 3 , move 3 , + 7 0 + 4 
[11842] c:0 is:( move 5 , ul - 3 ; move ua , 0 - 3 )  decode:( move 0 - ua , 0 ; move ua , 3 ) 
[11843] c:0 is:( move 5 , 2 - 3 ; move ua + ul , 2 )  decode:( move 3 , 2 - 3 ; move 8 , 2 ) 
[11844] c:0 is:( move 0 - 4 , 4 / ua ; move ua , 2 )  decode:( move 4 , 4 * 3 ; move ua , 2 ) 
[11845] c:0 is:( move ua + 2 , 4 * 4 ; move ua , 2 )  decode:( move 8 , 4 * 4 ; move ua , 2 ) 
[11846] c:0 is:( move 5 , 2 ; move 3 + 2 , ua * ua )  decode:( move 5 , 2 ; move ul - ua , 5 ) 
[11847] c:0 is:( move ua , 0 - 9 ; move ua + 3 , 2 )  decode:( move ua , 0 - 9 ; move 3 , 2 ) 
[11848] c:0 is:( move ua - 3 , 0 ; move 4 , ua / 4 )  decode:loop 0 , 2 , move ua - 2 , ua / 4 
[11849] c:0 is:( move 2 , 2 - 3 ; move ua , 4 / ua )  decode:( move ua , 9 ; move 2 , 3 - 8 ) 
[11850] c:0 is:( move ua , 2 / 3 ; move 2 - ua , 4 )  decode:( move ua , 4 / ua ; move 4 , ul ) 
[11851] c:0 is:( move 0 - ua , ul ; move 4 , 2 / 4 )  decode:( move ua , ul ; move 4 , 5 * 2 ) 
[11852] c:0 is:( move ua + 2 , 5 * 2 ; move 3 , ul )  decode:( move ua + 2 , 0 ; move 3 , ul ) 
[11853] c:0 is:( move 0 - 4 , ul ; move ua , 2 / 4 )  decode:( move 4 , ul ; move ua , 9 ) 
[11854] c:0 is:( move 0 - 4 , 6 ; move ua - ul , 2 )  decode:( move 4 , 9 ; move ua - ul , 2 ) 
[11855] c:0 is:( move ua , 3 / 2 ; move ua - 4 , 2 )  decode:( move ua , 4 / 3 ; move 2 , 2 ) 
[11856] c:0 is:( move ua + ul , 3 ; move 2 , 4 * 3 )  decode:( move ua , 3 ; move 3 , 2 / 4 ) 
[11857] c:0 is:( move 2 , 2 / 4 ; move ul - ua , 2 )  decode:( move 2 , 4 / ua ; move ua , 2 ) 
[11858] c:0 is:( move 4 , 0 ; move 3 - ua , ua / 4 )  decode:loop 0 , 3 , move ua - 4 , ua / 4 
[11859] c:0 is:( move 3 , 3 ; move ua + 2 , ua / 4 )  decode:( move 3 , 9 ; move ua + 2 , 8 ) 
[11860] c:0 is:( move 0 - ua , 4 ; move 3 , ua / 4 )  decode:( move ua , 4 ; move 3 , ua / 4 ) 
[11861] c:0 is:( move 3 , 0 - 4 ; move ua , ua / 4 )  decode:( move ua , 4 / ua ; move 9 , ua / ) 4 
[11862] c:0 is:( move 4 , ua / 4 ; move 2 + ua , 2 )  decode:( move 4 , ua / 4 ; move 8 , 2 ) 
[11863] c:0 is:( move ul + ua , 2 ; move 3 , 2 / 4 )  decode:( move ua + ul , 2 ; move 3 , 9 ) 
[11864] c:0 is:( move 0 - ua , 2 / 4 ; move 4 , ul )  decode:( move 4 , 9 + 2 ; move ua , ul ) 
[11865] c:0 is:( move 4 , ul / ua ; move 0 - 4 , 2 )  decode:( move 4 , ul / 4 ; move 4 , 2 ) 
[11866] c:0 is:( move 2 , ul / 2 ; move ua , 2 - 4 )  decode:( move ua , ua / 4 ; move 2 , 2 ) 
[11867] c:0 is:( move ul - ua , 0 - 4 ; move 4 , 4 )  decode:( move 4 , :  3 ; move 4 , ul ) 
[11868] c:0 is:( move 0 - ua , 3 * 4 ; move 4 , ul )  decode:( move ua , 3 * 4 ; move 4 , 4 ) 
[11869] c:0 is:( move 0 - ua , ua / 4 ; move 3 , 4 )  decode:( move ua , 9 + 2 ; move 3 , 7 ) 
[11870] c:0 is:( move ua + 2 , 2 ; move 4 , ua / 4 )  decode:( move ua + 2 , 2 ; move 4 , 8 ) 
[11871] c:0 is:( move 5 , 0 - 2 ; move ul - ua , 5 )  decode:( move ul - ua , ul ; move 5 , 5 ) 
[11872] c:0 is:( move 5 , 2 - 3 ; move 2 - ua , ul )  decode:( move 4 , 0 ; move 5 , ua / 3 ) 
[11873] c:0 is:( move 0 - 4 , ua * ua ; move 4 , 4 )  decode:( move 4 , 9 + 2 ; move 4 , 4 ) 
[11874] c:0 is:( move 0 - 4 , 4 ; move ul - ua , 4 )  decode:( move 4 , ul - 4 ; move 5 , 4 ) 
[11875] c:0 is:( move 3 , 4 ; move ul - ua , 2 - 3 )  decode:( move 5 , 3 ; move 3 , ua / 3 ) 
[11876] c:0 is:( move ua , 0 - 4 ; move ua , 4 * 4 )  decode:loop 0 , 2 , move ua , 0 - 9 
[11877] c:0 is:( move 4 , 0 ; move ua - 3 , ua / 4 )  decode:loop 0 , 2 , move ua - 3 , ua / 4 
[11878] c:0 is:( move 4 , 2 - 3 ; move 3 , ua * ua )  decode:( move 3 , 4 ; move 4 , 3 * 5 ) 
[11879] c:0 is:( move 3 , 2 - 3 ; move ua , ua / 3 )  decode:( move 3 , 2 - 3 ; move ua , 2 ) 
[11880] c:0 is:( move 0 - 4 , 4 ; move ua - ul , 4 )  decode:( move 4 , ul / 5 ; move 5 , 7 ) 
[11881] c:0 is:( move 4 , 2 - 3 ; move ua + ul , 4 )  decode:loop 0 , 4 , move 3 , 3 + 4 - v0 
[11882] c:0 is:( move ul - ua , 2 / 3 ; move 3 , 2 )  decode:( move 5 , 3 / 2 ; move 3 , ul ) 
[11883] c:0 is:( move 0 - 3 , 3 / 4 ; move ua , ul )  decode:( move 3 , 4 ; move ua , 4 * 5 ) 
[11884] c:0 is:( move ua + 3 , 4 * 4 ; move ua , 2 )  decode:loop 0 , 3 , move v0 * 4 , 0 - 2 
[11885] c:0 is:( move 2 , 3 ; move ua + ul , 4 * 3 )  decode:( move 2 , 4 ; move ua , 4 * 3 ) 
[11886] c:0 is:( move 4 , 0 ; move ua + ul , 4 / 3 )  decode:( move 4 , 0 ; move ua , 4 / 3 ) 
[11887] c:0 is:( move ua + 2 , 4 * 4 ; move 2 , ul )  decode:( move ua + 2 , 4 ; move 2 , ul ) 
[11888] c:0 is:( move ua , 3 / 4 ; move 2 - ua , 2 )  decode:( move 0 - ua , 4 ; move 4 , 2 ) 
[11889] c:0 is:( move 0 - 4 , ul / 2 ; move 3 , ul )  decode:( move 3 , 2 / 4 ; move 4 , 2 ) 
[11890] c:0 is:( move 4 + 3 , 4 ; move ua + ul , 3 )  decode:( move ua , 4 ; move 8 , 3 ) 
[11891] c:0 is:( move 4 , 0 - 4 ; move 4 , ua * ua )  decode:( move 4 , ul ; move 4 , 0 - 5 ) 
[11892] c:0 is:( move ua + 3 , ua / 3 ; move 4 , 2 )  decode:( move 9 , 2 ; move 4 , 0 - 2 ) 
[11893] c:0 is:( move 4 , ul / 4 ; move ua , 0 - 2 )  decode:( move ua , 4 / 3 ; move 4 , 2 ) 
[11894] c:0 is:( move ua + 2 , 3 ; move 4 , ua / 3 )  decode:( move 4 , 2 ; move ua + 2 , ul ) 
[11895] c:0 is:( move 2 , 4 / 3 ; move ua + 2 , ul )  decode:( move 2 , 3 / move d3 , 4 + v) 0 
[11896] c:0 is:( move ua , 3 * 5 ; move ua + 3 , 2 )  decode:( move ua , 0 - 3 ; move 9 , 2 ) 
[11897] c:0 is:( move 3 , ul / 4 ; move ua + 2 , 2 )  decode:( move 3 , ul / 4 ; move 8 , 2 ) 
[11898] c:0 is:( move 0 - ua , 3 ; move 4 , ua / 4 )  decode:( move ua , 3 ; move 4 , ua / 4 ) 
[11899] c:0 is:( move 4 , 2 ; move ua + ul , 3 / 2 )  decode:( move 4 , 2 ; move ua + ul , ul ) 
[11900] c:0 is:( move ua , ul / 3 ; move 2 , 2 - 3 )  decode:( move 2 , 0 ; move ua , ul ) 
[11901] c:0 is:( move 0 - ua , 9 ; move 2 - ua , 2 )  decode:( move ua , 9 ; move 4 , 2 ) 
[11902] c:0 is:( move 5 , 0 - 4 ; move ua + ul , 4 )  decode:( move ua , 0 - 4 ; move 7 , 4 ) 
[11903] c:0 is:( move ul - ua , 0 ; move 4 , 4 * 3 )  decode:( move 5 , 0 - 3 ; move 4 , 9 ) 
[11904] c:0 is:( move 5 , 0 - 3 ; move ua - ul , 4 )  decode:loop 0 , 4 , move 0 - 3 , v0 * 4 
[11905] c:0 is:( move 5 , ua / 2 ; move ua + 3 , 2 )  decode:( move ul - ua , 0 ; move 3 , 2 ) 
[11906] c:0 is:( move ua , ul / 2 ; move 2 - 4 , 2 )  decode:( move 2 , 2 ; move ua , 2 ) 
[11907] c:0 is:( move 3 , 0 ; move ul - ua , 4 / 3 )  decode:( move 3 , 0 ; move ua - ul , 4 ) 
[11908] c:0 is:( move 5 , 0 ; move 2 - ua , ua / 4 )  decode:loop 0 , 2 , move ua - 2 , 3 / 2 
[11909] c:0 is:( move 3 , 3 / 4 ; move 0 - ua , ul )  decode:( move 3 , 4 / move ua , 4 ) 
[11910] c:0 is:( move ua + 2 , 9 ; move ua + 2 , 2 )  decode:( move 9 , 9 ; move ua + 2 , 2 ) 
[11911] c:0 is:( move 2 + 3 , 3 / ua ; move ua , 4 )  decode:( move 5 , 9 + 4 ; move ua , 4 ) 
[11912] c:0 is:( move 3 , 4 * 3 ; move ua + ul , 2 )  decode:( move 3 , 3 * 4 ; move 8 , 2 ) 
[11913] c:0 is:( move 2 - ua , 0 ; move 4 , ul / 4 )  decode:( move 5 , 0 ; move 4 , 3 ) 
[11914] c:0 is:( move 4 , 0 ; move ua + ul , 4 * 4 )  decode:( move ua , 0 ; move ua , 4 * 4 ) 
[11915] c:0 is:( move 0 - ua , 4 ; move ua , 4 / 3 )  decode:( move ua , 4 ; move ua , 4 / 3 ) 
[11916] c:0 is:( move 2 - ua , 2 ; move ua , 4 / 3 )  decode:( move 5 , ul / ua ; move 5 , 8 ) 
[11917] c:0 is:( move 0 - 4 , 3 ; move ua , ua / 4 )  decode:( move 4 , 6 ; move ua , ua / 4 ) 
[11918] c:0 is:( move ua + 3 , ul / 4 ; move 2 , 2 )  decode:( move 9 , ul / 4 ; move 2 , 2 ) 
[11919] c:0 is:( move 3 , 4 ; move ua - ul , 2 - 3 )  decode:( move 5 , 6 ; move 3 , 2 - 3 ) 
[11920] c:0 is:( move ua + ul , 3 ; move 3 , 3 / 2 )  decode:( move ua + ul , 3 ; move 3 , 8 ) 
[11921] c:0 is:( move ua + ul , 2 ; move 4 , 2 / 3 )  decode:( move 0 - 9 , 2 ; move 4 , 7 ) 
[11922] c:0 is:( move 4 , ua / 3 ; move ua + 3 , 2 )  decode:( move 3 , ul ; move d4 , 0 - 2 ) 
[11923] c:0 is:( move 3 , ua / 4 ; move 0 - ua , 4 )  decode:( move 3 , 3 / 2 ; move ua , ul ) 
[11924] c:0 is:( move ua + 2 , 3 / ua ; move 3 , 4 )  decode:( move ua + 2 , 3 ; move 3 , 4 ) 
[11925] c:0 is:( move 4 - ua , 0 ; move ua , 4 / 3 )  decode:( move 2 , 0 - 4 ; move ua , 5 ) 
[11926] c:0 is:( move ua , 3 / 4 ; move ua + 3 , 2 )  decode:( move ua , 4 / 3 ; move 3 , 2 ) 
[11927] c:0 is:( move 3 , 2 ; move ua + ul , 2 / 4 )  decode:( move 3 , 2 ; move ua , 2 / 4 ) 
[11928] c:0 is:( move ua , 3 ; move 2 - ua , 4 * 3 )  decode:( move ua , 3 ; move 4 , 9 ) 
[11929] c:0 is:( move 0 - ua , ua / 3 ; move 4 , 4 )  decode:( move ua , 2 ; move 4 , ul ) 
[11930] c:0 is:( move 5 , 3 + 4 ; move ua + ul , 2 )  decode:( move 5 , 4 / 5 ; move ua , 2 ) 
[11931] c:0 is:( move 3 , 2 - 3 ; move ua - ul , 4 )  decode:( move 3 , 2 ; move ul - ua , ul ) 
[11932] c:0 is:( move ua , 2 / 6 ; move ua + 2 , 2 )  decode:( move ua , 9 + 4 ; move 9 , 2 ) 
[11933] c:0 is:( move ua + 2 , 4 / 3 ; move ua , 3 )  decode:( move ua + 2 , 4 / move ua , 3 ) 
[11934] c:0 is:( move ua , 2 - 3 ; move ua , 2 / 4 )  decode:( move 5 , 9 ; move ua , 4 / 3 ) 
[11935] c:0 is:( move 4 , 2 - 3 ; move ua , 2 / ua )  decode:( move 4 , 9 + 2 ; move 4 , 2 / ) 5 
[11936] c:0 is:( move ua + 3 , 2 / 4 ; move 2 , ul )  decode:( move ua + 2 , 3 ; move 3 , ul ) 
[11937] c:0 is:( move 2 , 3 ; move ua + ul , 2 / 4 )  decode:loop 0 , 4 , move 2 , 4 / 4 / 4 
[11938] c:0 is:( move ul - ua , 2 ; move 4 + 3 , 4 )  decode:( move ul - ua , 2 ; move ua , 4 ) 
[11939] c:0 is:( move 4 , 3 / 2 ; move ua + ul , 2 )  decode:( move 4 , ua / 2 ; move 7 , 2 ) 
[11940] c:0 is:( move 4 , 0 ; move ua - ul , 4 * 3 )  decode:( move 4 , 0 ; move ul - ua , 7 ) 
[11941] c:0 is:( move 4 , 3 / ua ; move 2 + ua , 3 )  decode:( move 2 - ua , 3 + move ua , 3 ) 
[11942] c:0 is:( move ua + 2 , ua / 4 ; move 2 , 4 )  decode:( move ua + 2 , 9 ; move 2 , 4 ) 
[11943] c:0 is:( move ua + ul , 3 / 4 ; move 2 , 2 )  decode:( move ua , 4 + 3 ; move 2 , 2 ) 
[11944] c:0 is:( move 0 - ua , ul ; move 4 , 4 * 3 )  decode:( move ua , 4 * 4 ; move 4 , 9 ) 
[11945] c:0 is:( move 2 , 4 / ua ; move ua + 4 , 2 )  decode:( move 2 , 4 / ua ; move ua , 2 ) 
[11946] c:0 is:( move ua + 4 , ua / 3 ; move 3 , 2 )  decode:( move ua + 4 , 3 ; move 3 , 2 ) 
[11947] c:0 is:( move 2 - ua , ul / 2 ; move 3 , 3 )  decode:( move ua , 2 ; move 3 / 4 , 6 ) 
[11948] c:0 is:( move 3 + ua , 2 ; move 3 , ua / 4 )  decode:( move 9 , 2 ; move 3 , ua / 4 ) 
[11949] c:0 is:( move 4 - ua , 2 ; move ua , 3 * 3 )  decode:( move 3 , 7 ; move ua , 2 / 3 ) 
[11950] c:0 is:( move 4 , 3 ; move ua - ul , 2 - 3 )  decode:( move ul - ua , 2 ; move 4 , ul ) 
[11951] c:0 is:( move ua + ul , 3 / 2 ; move 4 , 2 )  decode:( move ua + ul , 3 + 2 , 2 2 ) 
[11952] c:0 is:( move 4 , 2 / ua ; move ua + 2 , 4 )  decode:( move 4 , 2 / ua ; move 9 , 4 ) 
[11953] c:0 is:( move 3 , ul ; move ua + 3 , 3 / 2 )  decode:( move 3 , ul ; move ua + 3 , 4 ) 
[11954] c:0 is:( move ul - ua , 0 ; move 4 , 2 / 4 )  decode:( move ul - ua , 0 ; move 4 , 7 ) 
[11955] c:0 is:( move ua + 2 , 4 * 3 ; move ua , 4 )  decode:loop 0 , 3 , move v0 * 4 , 2 / 4 
[11956] c:0 is:( move 0 - ua , ul / 4 ; move 2 , 4 )  decode:( move ua , 0 - 4 ; move 2 , ul ) 
[11957] c:0 is:( move 2 , ul / 4 ; move ua , 0 - 4 )  decode:( move 2 , 4 / 3 ; move ua , 2 ) 
[11958] c:0 is:( move 3 , 0 ; move ul + 4 , ul / 3 )  decode:( move 3 , 0 ; move 5 , 2 / ua ) 
[11959] c:0 is:( move 3 , ua / 4 ; move ua - 2 , 2 )  decode:( move 3 , ua / 4 ; move 4 , 2 ) 
[11960] c:0 is:( move 0 - 4 , ul ; move 4 , 2 / ua )  decode:( move 4 , 4 ; move 4 , 4 * 4 ) 
[11961] c:0 is:( move 3 / 2 , 4 ; move ua + ul , 2 )  decode:( move 2 , 4 ; move ua + ul , 2 ) 
[11962] c:0 is:( move 4 , 2 ; move ua + 3 , ua / 3 )  decode:( move 3 , 2 ; move d3 + 3 , ul ) 
[11963] c:0 is:( move ua , 2 / 5 ; move ua , 0 - 4 )  decode:( move ua , 4 * 3 ; move ua , 4 ) 
[11964] c:0 is:( move ul - ua , 2 - 3 ; move 3 , 4 )  decode:( move 5 , 2 ; move 3 , 2 - 3 ) 
[11965] c:0 is:( move 4 , 0 - 4 ; move ua - ul , 4 )  decode:( move 5 , 0 - 4 ; move 5 , 4 ) 
[11966] c:0 is:( move 0 - 4 , ul ; move 4 + 4 , ul )  decode:( move 4 , ul - move   4 , ul ) 
[11967] c:0 is:( move ua + ul , 2 ; move 4 , 3 / 2 )  decode:( move ua + ul , 2 ; move ua , 8 ) 
[11968] c:0 is:( move ua + 2 , ul / 4 ; move 3 , 2 )  decode:( move ua + 2 , 4 ; move 3 , 2 ) 
[11969] c:0 is:( move 3 - ua , 0 ; move 4 , ua / 4 )  decode:loop 0 , 2 , move 0 - 4 , ua / 4 
[11970] c:0 is:( move 2 , 2 ; move ul - ua , 4 * 3 )  decode:( move 2 , 4 ; move ua - ul , 7 ) 
[11971] c:0 is:( move 0 - ua , 4 / ua ; move 3 , 4 )  decode:( move ua , 2 * 5 ; move 3 , ul ) 
[11972] c:0 is:( move ua + 2 , 6 ; move ua , 2 - 4 )  decode:( move ua , 7 ; move 2 + ua , 2 ) 
[11973] c:0 is:( move 0 - ua , ul / 4 ; move 4 , 2 )  decode:( move ua , 4 * 4 ; move 4 , 2 ) 
[11974] c:0 is:( move 2 , 2 ; move ua + ul , 4 / 3 )  decode:( move 2 , 2 ; move ua + ul , 5 ) 
[11975] c:0 is:( move 3 , 3 ; move ua + ul , 3 / 2 )  decode:( move 3 , 9 ; move ua + ul , 8 ) 
[11976] c:0 is:( move 3 - ua , 3 ; move ua , 2 / 3 )  decode:( move 4 , 3 ; move ua , 5 * 2 ) 
[11977] c:0 is:( move 3 , 0 - 3 ; move ua , ul / 4 )  decode:loop 0 , 4 , move 2 , 4 / 4 / 4 
[11978] c:0 is:( move 3 , 2 - 3 ; move ua + ul , 5 )  decode:( move 3 , ul - 3 ; move 7 , 5 ) 
[11979] c:0 is:( move 0 - 3 , 3 ; move ua , ul / 4 )  decode:( move ua , 0 ; move 3 , 3 ) 
[11980] c:0 is:( move ua , 2 ; move ua - 2 , 4 / 3 )  decode:( move ua , 2 ; move 4 , 4 / 3 ) 
[11981] c:0 is:( move 5 , ua / 3 ; move ua + 2 , 2 )  decode:( move 4 , ua / 3 ; move ua , 2 ) 
[11982] c:0 is:( move ul , 2 - 3 ; move ua , 2 / 3 )  decode:( move ua , 3 ; move ua , 2 / 3 ) 
[11983] c:0 is:( move 3 , 0 - 4 ; move ua , 4 / ua )  decode:( move ua , 6 ; move 3 , 4 * 3 ) 
[11984] c:0 is:( move 4 , 3 ; move ua + 2 , ua / 3 )  decode:( move 4 , 3 ; move 2 + ua , ul ) 
[11985] c:0 is:( move ua , 0 - 4 ; move 3 , ua / 4 )  decode:( move 3 , 4 / ua ; move ua , 8 ) 
[11986] c:0 is:( move 4 , 2 / ua ; move ua + 4 , 2 )  decode:( move 4 , 2 / ua ; move 4 , 2 ) 
[11987] c:0 is:( move ua , 3 / 0 - 4 ; move ua , 4 )  decode:( move ua , 2 *  ua , 4 * 5 ) 
[11988] c:0 is:( move ua + 2 , ua / 2 ; move 4 , 4 )  decode:loop 0 , 3 , move 0 - 4 , v0 * 4 
[11989] c:0 is:( move 3 , 3 ; move ua + 3 , ua / 3 )  decode:( move 3 , 3 ; move 3 + 3 , 2 ) 
[11990] c:0 is:( move 2 , ul ; move ua + 2 , 4 / 3 )  decode:( move 2 , 4 ; move 3 + 4 , 3 ) 
[11991] c:0 is:( move ua , 4 / 3 ; move 2 - ua , 2 )  decode:( move 4 , 0 - 3 ; move ua , ul ) 
[11992] c:0 is:( move 9 , 0 - 2 ; move ua + ul , 2 )  decode:( move ua * 2 , 0 ; move ua , 2 ) 
[11993] c:0 is:( move ua , 2 - 3 ; move 4 , 2 / ua )  decode:( move 3 , 5 ; move ua , 2 / 4 ) 
[11994] c:0 is:( move ua + 2 , 3 ; move 3 , ua / 4 )  decode:( move ua + 3 , 3 ; move 3 , 8 ) 
[11995] c:0 is:( move ua - ul , 0 ; move 4 , 2 / 4 )  decode:loop 0 , 4 , move 3 / v0 , 4 / ua 
[11996] c:0 is:( move 4 , 3 / ua ; move ua + 3 , 2 )  decode:( move 4 , 4 / 9 ; move 9 , 2 ) 
[11997] c:0 is:( move 0 - 4 , 4 / ua ; move ua , 3 )  decode:( move 4 , 3 * move ua , ul / ua ) 
[11998] c:0 is:( move ua , 3 * 4 ; move 2 + ua , 4 )  decode:loop 0 , 3 , move v0 * 4 , 4 * 0 
[11999] c:0 is:( move 2 - ua , 3 + 4 ; move 4 , ul )  decode:( move 4 , 4 ; move 2 - ua , ul ) 
[12000] c:0 is:( move 4 , 0 ; move ul - ua , 4 * 3 )  decode:( move 4 , 0 ; move ul - ua , 9 ) 
[12001] c:0 is:( move 0 - 4 , 5 ; move ua + ul , 4 )  decode:( move 4 , ul ; move ua + ul , 7 ) 
[12002] c:0 is:( move 2 , 4 / ua ; move ua + 2 , 4 )  decode:( move 2 , 4 / ua ; move 8 , 4 ) 
[12003] c:0 is:( move 3 , ua / 3 ; move ua + 2 , 4 )  decode:( move 3 , 2 ; move ua + 2 , 4 ) 
[12004] c:0 is:( move 0 - ua , 4 / 3 ; move 3 , ul )  decode:( move ua , 9 / 2 ; move 3 , 4 ) 
[12005] c:0 is:( move ul - ua , 4 * 3 ; move 2 , 2 )  decode:( move 2 , 9 ; move ua - ul , 5 ) 
[12006] c:0 is:( move 4 + 3 , 3 / ua ; move ua , 2 )  decode:( move ua + ul , 9 ; move ua , 2 ) 
[12007] c:0 is:( move ua , 4 + 3 ; move 3 - ua , 4 )  decode:( move ua , 7 ; move 3 , ul ) 
[12008] c:0 is:( move 3 , 3 / 2 ; move ua - ul , 2 )  decode:( move 3 , 2 / ua ; move 5 , 2 ) 
[12009] c:0 is:( move 3 , ua / 3 ; move ua + 4 , 2 )  decode:( move 3 , ua / 4 ; move ua , 2 ) 
[12010] c:0 is:( move 4 , 0 - 4 ; move ul - ua , 4 )  decode:( move 4 , 0 ; move 4 , 2 * 5 ) 
[12011] c:0 is:( move ua , 2 / 3 ; move ua - 2 , 4 )  decode:( move ua , 4 / ua ; move 5 , 4 ) 
[12012] c:0 is:( move 4 , 3 ; move 0 - ua , 4 / ua )  decode:( move 4 , 3 ; move ua , 9 ) 
[12013] c:0 is:( move 2 - ua , 3 / 4 ; move ua , 2 )  decode:( move 4 , 4 ; move ua , 2 - 3 ) 
[12014] c:0 is:( move 2 , 2 - 3 ; move ua , ua / 4 )  decode:( move 3 , 0 - 2 ; move ua , 8 ) 
[12015] c:0 is:( move ua , 2 - 3 ; move 2 , ua / 4 )  decode:( move 2 , 9 ; move ua , 3 / 2 ) 
[12016] c:0 is:( move ua + 2 , 3 ; move ua , 4 * 4 )  decode:( move ua + 2 , 3 - move ua , 9 ) 
[12017] c:0 is:( move ua , ul / 4 ; move 4 , 0 - 2 )  decode:( move 4 , 4 / 3 ; move ua , 2 ) 
[12018] c:0 is:( move 2 - ua , 2 ; move 3 , ua / 4 )  decode:( move 2 - ua , 2 ; move 3 , 8 ) 
[12019] c:0 is:( move 4 , 0 - 3 ; move ua , 4 / ua )  decode:( move 2 - ua , 4 ; move ua , 9 ) 
[12020] c:0 is:( move ua , 5 / 4 ; move ua , 0 - 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 4 
[12021] c:0 is:( move ua , 4 * 3 ; move 3 - ua , 2 )  decode:( move ua , 4 * 3 ; move 3 , 2 ) 
[12022] c:0 is:( move 3 , 3 + 4 ; move ua + ul , 4 )  decode:( move 3 , 4 / 4 ; move 8 , 4 ) 
[12023] c:0 is:( move ua , 4 * 4 ; move ua + 3 , 2 )  decode:( move ua , 4 * 4 ; move 3 , 2 ) 
[12024] c:0 is:( move ul - 4 , 4 ; move ua - 2 , 2 )  decode:( move 3 , 7 ; move 4 , 0 - 2 ) 
[12025] c:0 is:( move ua - 4 , 0 ; move ua , 4 / 3 )  decode:( move 4 - ua , 0 ; move 3 , 5 ) 
[12026] c:0 is:( move 5 , 3 ; move ul - ua , 0 - 4 )  decode:( move ul - ua , 2 ; move 5 , 4 ) 
[12027] c:0 is:( move ua + 2 , 2 / 4 ; move 3 , ul )  decode:( move ua + 2 , 3 + move 3 , ul ) 
[12028] c:0 is:( move ul - ua , 0 - 3 ; move 4 , 5 )  decode:( move 5 , 0 ; move 4 , ua / 3 ) 
[12029] c:0 is:( move ua , ua / 3 ; move 4 , 2 - 3 )  decode:( move 4 , 0 - 2 ; move ua , ul ) 
[12030] c:0 is:( move ua + ul , 2 - 3 ; move 5 , 4 )  decode:( move ua , 0 ; move ua - ul , 4 ) 
[12031] c:0 is:( move 4 , 2 - 3 ; move ua , 3 / ua )  decode:( move 4 , 9 ; move ua , 4 * 3 ) 
[12032] c:0 is:( move 3 , 4 / ua ; move ua - 3 , 2 )  decode:( move 3 , 2 / 3 ; move 4 , 2 ) 
[12033] c:0 is:( move 4 , 4 / ua ; move 0 - ua , 4 )  decode:( move 4 , 4 / ua ; move ua , 7 ) 
[12034] c:0 is:( move 4 , ua / 4 ; move 2 - ua , 2 )  decode:( move 4 , ua / 4 ; move 4 , ul ) 
[12035] c:0 is:( move ua , 4 * 4 ; move 0 - ua , 5 )  decode:( move ua , 4 * 4 ; move ua , 5 ) 
[12036] c:0 is:( move 4 , 2 - 3 ; move ul - ua , 4 )  decode:( move 4 , 2 - 3 ; move 5 , ul ) 
[12037] c:0 is:( move ua + 2 , ul ; move 4 , 4 * 3 )  decode:loop 0 , 4 , move 3 - ua , 2 * 8 
[12038] c:0 is:( move ua + ul , 2 / 4 ; move 4 , 2 )  decode:( move ua + ul , 3 / ; move ua , ul ) 
[12039] c:0 is:( move 5 , 0 - 3 ; move ua , ua / 4 )  decode:( move 5 , ua / 4 ; move ua , 8 ) 
[12040] c:0 is:( move 0 - ua , 4 / ua ; move 3 , 5 )  decode:( move ua , 2 ; move 3 , ua * ua ) 
[12041] c:0 is:( move 5 , 4 ; move ul - ua , 0 - 4 )  decode:( move 5 , 0 ; move ua - 2 , 4 ) 
[12042] c:0 is:( move 4 , ul ; move ua + 3 , 4 + 4 )  decode:( move 4 , ul ; move 3 + ua , 8 ) 
[12043] c:0 is:( move 4 , ua / 3 ; move 2 + ua , 4 )  decode:( move 4 , 4 ; move ua , 0 - 4 ) 
[12044] c:0 is:( move ua + ul , 4 / 3 ; move 3 , 2 )  decode:( move 3 , 0 ; move ua , 0 - 2 ) 
[12045] c:0 is:( move ua , 2 / 4 ; move 3 + 3 , ul )  decode:( move ua , 9 / ua ; move ua , ul ) 
[12046] c:0 is:( move ua , 2 * 4 / 3 ; move ua , 2 )  decode:( move ua , 9 ; move ua , 2 ) 
[12047] c:0 is:( move ua , 3 ; move 2 - ua , 4 / 3 )  decode:( move ua , 3 ; move 4 , 0 - 7 ) 
[12048] c:0 is:( move 3 , 4 / 3 ; move ua + 2 , ul )  decode:( move 3 , 4 / 3 ; move 9 , ul ) 
[12049] c:0 is:( move 0 - 4 , 3 / ua ; move 4 , ul )  decode:( move 4 , 0 - 9 ; move 4 , 2 ) 
[12050] c:0 is:( move ua , 4 / 3 ; move 0 - ua , 5 )  decode:( move ua , 5 / 5 ; move ua , 5 ) 
[12051] c:0 is:( move 3 , 2 ; move ua + ul , 3 / 4 )  decode:( move 3 , 2 ; move ua + ul , 7 ) 
[12052] c:0 is:( move 3 , 3 / 2 ; move 3 - ua , ul )  decode:( move 3 , 2 / 4 ; move 3 , 4 ) 
[12053] c:0 is:( move 4 , 4 / ua ; move ua , 0 - 4 )  decode:( move ua , 6 ; move 4 , 4 ) 
[12054] c:0 is:( move 3 , 4 / ua ; move ua , 2 - 3 )  decode:( move ua , 9 ; move 3 , ul ) 
[12055] c:0 is:( move 0 - ua , ul ; move 4 , 4 / 3 )  decode:( move 3 , 2 * 3 ; move ua , 5 ) 
[12056] c:0 is:( move 3 , ua / 4 ; move ua + 2 , 4 )  decode:( move 3 , 4 / ua ; move 9 , 4 ) 
[12057] c:0 is:( move 2 , ul / 4 ; move ua , 2 - 3 )  decode:( move ua , 4 / 3 ; move 2 , ul ) 
[12058] c:0 is:( move 3 , 2 / ua ; move ua , 3 / 2 )  decode:( move ua , 7 ; move 3 , ua / 4 ) 
[12059] c:0 is:( move 4 + 3 , 2 ; move ua , ua / 4 )  decode:( move ua + ul , 2 ; move ua , 8 ) 
[12060] c:0 is:( move ul - ua , 0 ; move 4 , 5 / 2 )  decode:( move 5 , 3 ; move 4 , 4 * 3 ) 
[12061] c:0 is:( move 3 , 9 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 7 ; move 3 , 2 ) 
[12062] c:0 is:( move 3 , 3 ; move ua + ul , 4 * 3 )  decode:( move 3 , 4 ; move ua + ul , 7 ) 
[12063] c:0 is:( move ua , 3 / 4 ; move ua + 2 , 4 )  decode:( move ua , 7 ; move 3 + 3 , 4 ) 
[12064] c:0 is:( move ua + 2 , ul / 6 ; move 2 , 2 )  decode:( move ua + 2 , ul ; move 2 , 2 ) 
[12065] c:0 is:( move ua + ul , 4 * 4 ; move 3 , 2 )  decode:( move ua + ul , 4 * move 3 , 2 ) 
[12066] c:0 is:( move 0 - ua , ua / 4 ; move 3 , 5 )  decode:( move ua , ul - 9 ; move 3 , 2 ) 
[12067] c:0 is:( move 4 , 2 - 3 ; move 4 , ua * ua )  decode:( move 4 , 4 - 3 ; move 4 , 8 ) 
[12068] c:0 is:( move 4 , 4 * 3 ; move ua + ul , 2 )  decode:( move 4 , 3 * 4 ; move 8 , 2 ) 
[12069] c:0 is:( move ul - ua , 2 ; move 3 , 2 / 4 )  decode:( move ul - ua , 2 ; move 3 , 7 ) 
[12070] c:0 is:( move 0 - ua , 4 ; move 4 , 4 / ua )  decode:( move ua , 4 ; move 4 , 5 / 2 ) 
[12071] c:0 is:( move ul - ua , 3 ; move 3 , 3 / 2 )  decode:( move 5 , 3 ; move 3 , 3 / 4 ) 
[12072] c:0 is:( move 3 + ua , 2 / 4 ; move ua , 4 )  decode:( move 9 , ua / 4 ; move ua , 4 ) 
[12073] c:0 is:( move ua - ul , 2 ; move 3 , 2 / 4 )  decode:( move ul - ua , 2 ; move 3 , 9 ) 
[12074] c:0 is:( move 4 , ua / 3 ; move 4 + ua , 2 )  decode:( move 4 , ua / 4 ; move ua , 2 ) 
[12075] c:0 is:( move ua , ua - 2 / 4 ; move 4 , 2 )  decode:( move ua , 4 * 3 ; move 4 , 2 ) 
[12076] c:0 is:( move 4 , 2 ; move ua + ul , 2 / 4 )  decode:0 0 loop 0 , 3 , move 4 , 3 * 3 
[12077] c:0 is:( move 0 - ua , ul ; move 4 , 3 / 4 )  decode:( move ua , 4 ; move 4 , 4 ) 
[12078] c:0 is:( move ua , 2 - 3 ; move ua , 4 * 4 )  decode:( move ua , 2 - 9 ; move ua , 9 ) 
[12079] c:0 is:( move 3 , 2 ; move ua + ul , 4 / 3 )  decode:( move 3 , 2 ; move ua , 4 / 3 ) 
[12080] c:0 is:( move ua , 2 - 3 ; move 3 , ua / 4 )  decode:( move ua , 0 - 3 ; move 3 , 8 ) 
[12081] c:0 is:( move 3 , 2 / 4 ; move 2 - ua , ul )  decode:( move 3 , 2 / 4 ; move 5 , 4 ) 
[12082] c:0 is:( move 4 , ul / ua ; move 3 , 0 - 4 )  decode:loop 0 , 3 , move ua - 4 , 0 - 3 
[12083] c:0 is:( move 2 , 3 ; move ua + ul , 4 / 3 )  decode:( move 3 , 3 ; move 4 + 2 , 7 ) 
[12084] c:0 is:( move ua + 2 , ul / 3 ; move 5 , 2 )  decode:( move ua + 2 , 3 + 9 move 4 , ) 
[12085] c:0 is:( move 4 , 2 - 3 ; move ua - ul , 4 )  decode:( move 4 , 2 - 3 ; move 5 , 4 ) 
[12086] c:0 is:( move 3 - ua , 2 ; move ua , 4 * 4 )  decode:( move 3 , 5 ; move ua , 2 / ua ) 
[12087] c:0 is:( move ul - ua , 4 * 4 ; move 2 , 2 )  decode:( move 5 , 2 / 4 ; move 2 , 2 ) 
[12088] c:0 is:( move ua + 3 , 2 / 4 ; move 3 , ul )  decode:( move 9 , 4 + 3 ; move 4 , ul ) 
[12089] c:0 is:( move ua , ua / 2 ; move 3 , 3 / 2 )  decode:( move ua , 0 ; move 3 , ua / 4 ) 
[12090] c:0 is:( move 4 + 4 , 2 ; move ul - ua , 4 )  decode:( move ua + 3 , 2 ; move 5 , ul ) 
[12091] c:0 is:( move 4 , 3 ; move ua + ul , 3 / 2 )  decode:( move 4 , 9 ; move 5 , 3 / 2 ) 
[12092] c:0 is:( move ua , 4 / 5 ; move ua + 2 , 2 )  decode:( move ua , 4 / 5 ; move 8 , 2 ) 
[12093] c:0 is:( move 2 - ua , 4 ; move ua , 3 * 4 )  decode:( move 4 , ul - 4 ; move ua , 9 ) 
[12094] c:0 is:( move ua , 4 / 3 ; move ua + 2 , 4 )  decode:( move ua , 4 / 3 ; move 9 , 4 ) 
[12095] c:0 is:( move ul - ua , 2 ; move 3 , 4 * 3 )  decode:( move 4 , 0 - 3 ; move 5 , 7 ) 
[12096] c:0 is:( move 3 - ua , 4 ; move ua , 3 / 2 )  decode:( move 3 , 4 ; move ua , 3 / 2 ) 
[12097] c:0 is:( move 3 , 4 * 3 ; move ul - ua , 2 )  decode:( move 3 , 3 * 4 ; move 5 , ul ) 
[12098] c:0 is:( move 0 - ua , ul / 6 ; move 3 , 2 )  decode:( move ua , 0 - 3 ; move 3 , 2 ) 
[12099] c:0 is:( move 9 , 0 ; move ua - ul , 0 - 4 )  decode:( move 9 , ul / 9 ; move 9 , 4 ) 
[12100] c:0 is:( move ua , 4 * 3 ; move ua + 3 , 4 )  decode:( move ua , 4 * 3 ; move 8 , 4 ) 
[12101] c:0 is:( move ul - ua , 4 * 3 ; move 3 , 2 )  decode:( move ua - ul , 9 ; move 3 , 2 ) 
[12102] c:0 is:( move 3 - ua , 4 * 4 ; move ua , 2 )  decode:( move 3 , 2 / 6 ; move ua , 2 ) 
[12103] c:0 is:( move 3 , 2 / 4 ; move ul - ua , 2 )  decode:( move 3 , 2 / 4 ; move 5 , 5 ) 
[12104] c:0 is:( move 4 , 3 ; move 2 + ua , ua / 4 )  decode:( move 4 , 9 ; move 9 , ua / 4 ) 
[12105] c:0 is:( move 3 , 3 ; move ua - ul , 3 / 2 )  decode:( move 3 , 3 ; move 5 , ua / 4 ) 
[12106] c:0 is:( move 4 + 4 , 2 ; move 4 , ua * ua )  decode:( move ua + 2 , 2 ; move 4 , 8 ) 
[12107] c:0 is:( move 0 - 4 , ua / 4 ; move 3 , ul )  decode:( move 3 , 4 * 3 ; move 3 , 4 ) 
[12108] c:0 is:( move 3 , 3 * 3 ; move ua + ul , 4 )  decode:( move 3 , 9 ; move 8 , 4 ) 
[12109] c:0 is:( move 0 - 4 , ul ; move 3 , ua / 4 )  decode:( move 0 - 4 , ul ; move 4 , 8 ) 
[12110] c:0 is:( move ua , 2 / 6 ; move 2 - ua , 2 )  decode:( move ua , 2 - 6 ; move 4 , ul ) 
[12111] c:0 is:( move ua , 4 / 3 ; move ua , 2 - 3 )  decode:( move ua , 4 * 3 ; move ua , ul ) 
[12112] c:0 is:( move 2 , 4 + 3 ; move ua , 4 / ua )  decode:( move 4 - ua , 4 ; move ua , 7 ) 
[12113] c:0 is:( move ua + 2 , 3 / 4 ; move ua , 4 )  decode:( move ua + 2 , 7 ; move ua , 4 ) 
[12114] c:0 is:( move 2 , 4 / 3 ; move ua + 3 , ul )  decode:( move 2 , 3 / 4 ; move 3 , ul ) 
[12115] c:0 is:( move ua , 0 - 4 ; move 3 , ul / 4 )  decode:( move 3 , 2 / move ua , 2 / ua ) 
[12116] c:0 is:( move 4 , 2 - 3 ; move 2 , ul / ua )  decode:( move ul , 0 - 4 ; move 5 , ul ) 
[12117] c:0 is:( move 4 , 3 / 2 ; move ua - ul , 2 )  decode:( move 4 , 3 / 2 ; move 5 , 2 ) 
[12118] c:0 is:( move ua + ul , 3 / 2 ; move 3 , 4 )  decode:( move ua + ul , 3 / move 3 , 4 ) 
[12119] c:0 is:( move 4 , ua / 4 ; move 0 - ua , 4 )  decode:( move 4 , 3 / 2 ; move ua , ul ) 
[12120] c:0 is:( move ua , 0 - 4 ; move 4 , ua / 4 )  decode:( move 4 , 4 / 4 ; move 5 , 8 ) 
[12121] c:0 is:( move ua - 3 , 3 ; move 4 * 2 , ul )  decode:( move 3 , 3 ; move ua + 2 , ul ) 
[12122] c:0 is:( move 4 - ua , ua ; move 4 + 3 , 4 )  decode:( move 2 , 3 ; move ua + ul , 4 ) 
[12123] c:0 is:( move 0 - 7 , ul ; move 2 + 4 , ul )  decode:( move 0 - ua , ul ; move ua , ul ) 
[12124] c:0 is:( move 4 - ua , 4 * 3 ; move ua , 2 )  decode:( move 2 , 9 ; move ua , 5 ) 
[12125] c:0 is:( move 4 , 0 - 7 ; move ua - ul , 2 )  decode:loop 0 , 2 , move 4 + v0 , 0 - 2 
[12126] c:0 is:( move ua , 4 ; move 2 - ua , 2 / 4 )  decode:( move ua , 4 ; move 4 , 4 * 4 ) 
[12127] c:0 is:( move 3 , ul ; move ua + 2 , 4 / 3 )  decode:( move 3 , 0 - 4 ; move 4 , 5 ) 
[12128] c:0 is:( move ua + 3 , 3 / 4 ; move 2 , ul )  decode:( move 9 , 4 ; move 3 , ul ) 
[12129] c:0 is:( move 4 , 2 - 3 ; move ua , ua / 3 )  decode:( move 3 , 2 - 3 ; move ua , 2 ) 
[12130] c:0 is:( move 3 , 3 / ua ; move 2 - ua , 4 )  decode:( move 3 , 3 / ua ; move 4 , ul ) 
[12131] c:0 is:( move 9 , 0 - 3 ; move ua + ul , 2 )  decode:( move 9 , 0 - 3 ; move ua , 2 ) 
[12132] c:0 is:( move 4 - ua , ul ; move 4 , 2 - 3 )  decode:( move 4 , 0 ; move 3 , 4 - 3 ) 
[12133] c:0 is:( move 3 , 3 / ua ; move ua , 3 + 4 )  decode:loop 0 , 4 , move 2 , 2 / ua 
[12134] c:0 is:( move 4 * 2 , ul ; move ul , 2 - 3 )  decode:( move 9 , ul ; move ul , ul / 4 ) 
[12135] c:0 is:( move 4 , 0 ; move ua - ul , 4 / 3 )  decode:( move 4 , 0 ; move 5 , 4 / 3 ) 
[12136] c:0 is:( move ua + ul , 2 ; move 3 , 4 / 3 )  decode:( move ua , 2 ; move 3 , 3 / 4 ) 
[12137] c:0 is:( move 2 , 4 * 4 ; move ul - ua , 2 )  decode:( move 2 , 4 * 2 ; move ua , 5 ) 
[12138] c:0 is:( move ua + 2 , ul / 4 ; move 4 , 2 )  decode:loop 0 , 4 , move 3 , v0 - 6 
[12139] c:0 is:( move ua - ul , 3 / 2 ; move 4 , 2 )  decode:( move 5 , 3 / 2 ; move 4 , 2 ) 
[12140] c:0 is:( move 4 , 2 * 5 ; move ua + ul , 2 )  decode:( move 4 , 5 + 3 ; move ua , 2 ) 
[12141] c:0 is:( move 0 - 4 , ul ; move ua , 4 / 3 )  decode:( move 4 , ul ; move ua , 0 - 7 ) 
[12142] c:0 is:( move 3 - ua , 4 + 3 ; move 4 , ul )  decode:( move 3 , 4 ; move 4 , 4 ) 
[12143] c:0 is:( move ua , 0 - 9 ; move 3 - ua , 2 )  decode:( move ua , 3 * 9 ; move 4 , 5 ) 
[12144] c:0 is:( move 2 - ua , 4 * 3 ; move 3 , ul )  decode:( move 4 , ua * 4 ; move 4 , 2 ) 
[12145] c:0 is:( move 3 , ua ; move 4 + 2 , ua / 4 )  decode:( move 4 , 0 ; move ua , ua / 4 ) 
[12146] c:0 is:( move 3 , 2 / 4 ; move ua , ul - 2 )  decode:( move ua , 3 / 2 ; move 3 , ul ) 
[12147] c:0 is:( move ua + 2 , 4 ; move ua , 4 * 4 )  decode:( move 9 , 4 ; move ua , 4 * 4 ) 
[12148] c:0 is:( move ul - ua , 2 - 3 ; move 4 , 4 )  decode:( move 4 , ua / 4 ; move 4 , 7 ) 
[12149] c:0 is:( move 2 , 3 ; move ul - ua , 2 / 4 )  decode:( move 3 , 4 * 2 ; move 5 , 9 ) 
[12150] c:0 is:( move ua + 4 , ua / 3 ; move 4 , 2 )  decode:( move 3 , ul ; move ua - 4 , 2 ) 
[12151] c:0 is:( move ua , 9 + 2 ; move ua + 2 , 3 )  decode:( move ua , 2 + 5 ; move ua , 3 ) 
[12152] c:0 is:( move 0 - ua , ua / 4 ; move 4 , 4 )  decode:( move ua , 4 + 9 ; move 4 , 4 ) 
[12153] c:0 is:( move ua , 4 / ua - 3 ; move 3 , 2 )  decode:( move 3 , 0 ; move 5 , 0 - 2 ) 
[12154] c:0 is:( move ua + ul , 6 ; move 4 + 2 , 3 )  decode:( move ua + ul , 6 ; move ua , 3 ) 
[12155] c:0 is:( move 2 , ua / 4 ; move 2 - ua , 4 )  decode:loop 0 , 3 , move 4 - ua , 3 - 8 
[12156] c:0 is:( move 3 , 4 ; move ua + ul , 3 / 2 )  decode:( move 3 , 4 ; move ua + ul , 8 ) 
[12157] c:0 is:( move ua - ul , 2 / 3 ; move 4 , 2 )  decode:( move 5 , 2 / 3 ; move 4 , 2 ) 
[12158] c:0 is:( move ua + 4 , 2 / 3 ; move ua , 4 )  decode:( move ua + 4 , 2 ; move ua , 4 ) 
[12159] c:0 is:( move 4 + 4 , ul ; move ua + 3 , 4 )  decode:( move ua + ul , ul ; move 9 , 4 ) 
[12160] c:0 is:( move 4 , 4 / ua ; move ua + 3 , 2 )  decode:( move 4 , ua / 4 ; move 3 , 2 ) 
[12161] c:0 is:( move 0 - 7 , 4 ; move ul - ua , 2 )  decode:( move 7 , 4 ; move ul - ua , 2 ) 
[12162] c:0 is:( move 3 , 2 / 5 ; move ua + ul , 2 )  decode:( move 3 , 4 / 9 ; move ua , 2 ) 
[12163] c:0 is:( move 3 - ua , 2 ; move ua , 3 / 4 )  decode:( move 4 , 6 ; move ua , 0 - 4 ) 
[12164] c:0 is:( move 3 , 4 / ua ; move ua + 4 , 2 )  decode:( move 3 , 4 / ua ; move 4 , 2 ) 
[12165] c:0 is:( move 0 - 3 , 5 ; move ua , ua / 4 )  decode:( move 3 , ua / 4 ; move ua , 8 ) 
[12166] c:0 is:( move 4 , ul / 4 ; move ua + 2 , 2 )  decode:( move 4 , ul / 4 ; move 8 , 2 ) 
[12167] c:0 is:( move 3 , 2 ; move ul - ua , 4 * 3 )  decode:( move 3 , 2 ; move ua - ul , 9 ) 
[12168] c:0 is:( move ua + 2 , 3 ; move 2 + ua , 9 )  decode:( move ua + 9 , 3 ; move 9 , 9 ) 
[12169] c:0 is:( move 2 - ua , 4 ; move ua , 2 / 4 )  decode:( move 4 , 4 ; move ua , 5 * 2 ) 
[12170] c:0 is:( move 4 , 2 ; move 2 - ua , ua / 4 )  decode:( move 4 , 2 ; move 4 , ua / 4 ) 
[12171] c:0 is:( move 3 , 4 * 4 ; move ua + ul , 2 )  decode:( move 3 , 4 * 4 ; move 8 , 2 ) 
[12172] c:0 is:( move 4 * 2 , ua - 4 ; move 2 , ul )  decode:( move 2 , 0 ; move ua + ul , ul ) 
[12173] c:0 is:( move ua - ul , 4 ; move 4 + 2 , 4 )  decode:( move 5 , 4 ; move ua , 4 ) 
[12174] c:0 is:( move ua , 2 / 6 ; move 2 + ua , 3 )  decode:( move ua + 2 , 2 ; move 9 , 3 ) 
[12175] c:0 is:( move 5 , 0 ; move ua + ul , 4 / 3 )  decode:( move 4 , 0 ; move 9 , 4 / 3 ) 
[12176] c:0 is:( move ua , 3 / 2 ; move ul - 4 , 2 )  decode:( move ua , 0 - 2 ; move 3 , ul ) 
[12177] c:0 is:( move ua , 3 / 4 ; move 0 - 4 , ul )  decode:( move ua , 4 / 5 ; move 4 , 4 ) 
[12178] c:0 is:( move 9 , 0 - 2 ; move 2 - ua , ul )  decode:( move 9 , 0 - 2 ; move 4 , 2 ) 
[12179] c:0 is:( move 3 , 4 * 4 ; move ua + 2 , ul )  decode:( move 3 , 4 * 4 ; move 9 , ul ) 
[12180] c:0 is:( move 2 , 2 / ua ; move 4 + 4 , ul )  decode:( move 2 , 2 / 7 ; move 9 , ul ) 
[12181] c:0 is:( move 4 , 2 - 3 ; move ua + ul , 5 )  decode:( move 4 , 2 - 3 ; move 7 , 5 ) 
[12182] c:0 is:( move ua + 3 , 9 ; move ua + 2 , 2 )  decode:( move 9 , 9 ; move ua + 2 , 2 ) 
[12183] c:0 is:( move 3 , ul / 4 ; move ua + 3 , 2 )  decode:( move 3 , ul / 4 ; move 3 , 2 ) 
[12184] c:0 is:( move 4 + 3 , 2 ; move ul - ua , 5 )  decode:( move ua + ul , 2 ; move 5 , 5 ) 
[12185] c:0 is:( move 3 , 4 / ua ; move ua + 2 , 4 )  decode:( move 3 , 4 / ua ; move 8 , 4 ) 
[12186] c:0 is:( move 0 - 3 , 9 ; move ua + 2 , ul )  decode:( move 3 , 9 ; move ua + 2 , 4 ) 
[12187] c:0 is:( move 5 , 0 - 4 ; move ul - ua , 4 )  decode:( move 4 , 4 / 4 ; move 5 , ul ) 
[12188] c:0 is:( move ua , 0 - 9 ; move ua + 2 , 4 )  decode:( move ua , 0 - 9 ; move 9 , 4 ) 
[12189] c:0 is:( move 6 , ul ; move 0 - ua , 4 + 4 )  decode:( move 6 , 9 ; move ua , 4 / 3 ) 
[12190] c:0 is:( move ua , 4 * 4 ; move ua + 2 , 4 )  decode:( move ua , 4 * 4 ; move 9 , 4 ) 
[12191] c:0 is:( move 0 - 4 , 3 / 4 ; move ua , ul )  decode:( move 4 , 4 ; move ua , 4 ) 
[12192] c:0 is:( move ua + 2 , ua / 3 ; move 4 , 4 )  decode:( move 8 , ua / 3 ; move 4 , 4 ) 
[12193] c:0 is:( move ua + ul , 4 + 3 ; move 3 , 5 )  decode:( move ua + ul , 7 ; move 3 , 5 ) 
[12194] c:0 is:( move 4 , ua / 4 ; move ua + 3 , 2 )  decode:( move 4 , ua / 4 ; move ua , 2 ) 
[12195] c:0 is:( move 0 - ua , ul / 4 ; move 3 , 4 )  decode:( move ua , 0 - 4 ; move 3 , ul ) 
[12196] c:0 is:( move 3 - ua , 4 / 3 ; move ua , 2 )  decode:( move ua , ul / 4 ; move 3 , ul ) 
[12197] c:0 is:( move 3 , ul ; move 2 - ua , 4 * 3 )  decode:loop 0 , 2 , move 0 - 4 , 0 - 9 
[12198] c:0 is:( move ua , 3 ; move 3 - ua , 4 * 3 )  decode:( move ua , 3 ; move 3 , 9 ) 
[12199] c:0 is:( move 4 , 0 ; move ul - ua , 4 / 3 )  decode:( move 4 , 0 ; move ua - 2 , 4 ) 
[12200] c:0 is:( move 4 , 0 ; move 4 - ua , ua / 4 )  decode:( move 4 , 0 ; move 4 - ua , 8 ) 
[12201] c:0 is:( move 0 - ua , 4 ; move ua / 4 , 4 )  decode:( move ua , 4 ; move 2 , 4 / 4 ) 
[12202] c:0 is:( move 3 , ul ; move 2 - ua , 2 / 4 )  decode:( move 3 , ul ; move 4 , ua / 9 ) 
[12203] c:0 is:( move 0 - ua , 9 ; move ua , 4 + 2 )  decode:loop 0 , 2 , move 0 - ua , 9 
[12204] c:0 is:( move ua , ua - 6 ; move 4 + 3 , 2 )  decode:( move ua , 2 / 6 ; move 7 , 2 ) 
[12205] c:0 is:( move ua , 2 - 3 ; move 4 , ua / 3 )  decode:( move 4 , 0 - 2 ; move ua , ul ) 
[12206] c:0 is:( move 3 , 2 - 3 ; move ua , ua / 4 )  decode:( move 3 , 2 - 3 ; move ua , 8 ) 
[12207] c:0 is:( move ua + ul , 4 ; move 3 , 3 / 2 )  decode:( move ua , 4 ; move 3 , 3 + 8 ) 
[12208] c:0 is:( move 3 , 2 / 4 ; move ua - ul , 2 )  decode:( move 3 , 3 / ua ; move 5 , 2 ) 
[12209] c:0 is:( move 0 - ua , 4 / 3 ; move ua , 5 )  decode:( move ua , 0 - 9 ; move ua , 5 ) 
[12210] c:0 is:( move 5 , 2 - 3 ; move ua + ul , 4 )  decode:loop 0 , 3 , move ua - 2 , v0 - 3 
[12211] c:0 is:( move 4 , ua - 4 ; move ua , 3 + 4 )  decode:( move ua , 9 / 4 ; move ua , 9 ) 
[12212] c:0 is:( move 2 , 2 / 4 ; move ua + ul , 4 )  decode:( move 2 , 4 / 4 ; move 7 , 4 ) 
[12213] c:0 is:( move ua + ul , 0 - 3 ; move 7 , 4 )  decode:( move ua + ul , 0 ; move 7 , 4 ) 
[12214] c:0 is:( move 3 , ul / 4 ; move ua - 2 , 2 )  decode:( move 3 , ul / 4 ; move 4 , 2 ) 
[12215] c:0 is:( move ua - ul , 2 - 3 ; move 4 , 4 )  decode:( move ul - ua , 2 ; move 4 , 4 ) 
[12216] c:0 is:( move 4 , ul / ua ; move 0 - 3 , 4 )  decode:( move 4 , ul / 4 ; move 3 , ul ) 
[12217] c:0 is:( move 0 - 4 + 2 , ul ; move ua , 8 )  decode:( move ul - ua , ul ; move ua , 8 ) 
[12218] c:0 is:( move ua + 4 , 4 / ua ; move 3 , 2 )  decode:( move ua + 3 , 2 ; move 3 , 2 ) 
[12219] c:0 is:( move 4 , ul / 0 - 4 ; move ua , 4 )  decode:( move 4 , 6 ; move ua , 4 ) 
[12220] c:0 is:( move ul - ua , 5 ; move 4 , 2 - 3 )  decode:( move 4 , 4 ; move 5 , 2 ) 
[12221] c:0 is:( move 9 , 0 - 4 ; move ua + ul , 2 )  decode:( move 9 , 0 - 4 ; move ua , 2 ) 
[12222] c:0 is:( move 5 , 0 ; move ul - ua , 4 / 3 )  decode:( move 5 , 0 ; move ul - ua , ul ) 
[12223] c:0 is:( move ua + ul , 2 ; move 4 , 4 * 4 )  decode:( move ua , ua / 3 ; move 9 , 9 ) 
[12224] c:0 is:( move 0 - ua , 9 ; move ua - 4 , 2 )  decode:( move ua , ua / 4 ; move 2 , ul ) 
[12225] c:0 is:( move 4 , ul / ua ; move 4 + 3 , 2 )  decode:( move 4 , ul / 4 ; move ua , 2 ) 
[12226] c:0 is:( move 2 - ua , ul ; move 3 - 7 , 2 )  decode:( move 0 - 4 , ul ; move 4 , 2 ) 
[12227] c:0 is:( move 4 , ua / 3 ; move 2 - ua , 4 )  decode:( move 4 , ua / 3 ; move 4 , ul ) 
[12228] c:0 is:( move 4 , 4 / ua ; move ua + 4 , 2 )  decode:( move 4 , ua / 4 ; move 4 , 2 ) 
[12229] c:0 is:( move 4 , 2 ; move ul - ua , 3 * 4 )  decode:( move 4 , 2 ; move ul - ua , 9 ) 
[12230] c:0 is:( move ua + 2 , 9 ; move 3 - ua , 2 )  decode:( move ua + 2 , 9 ; move 3 , ul ) 
[12231] c:0 is:( move 3 , 3 ; move ua + ul , 4 / 3 )  decode:( move 3 , 3 ; move ua , 4 / 3 ) 
[12232] c:0 is:( move ul - ua , 3 ; move 3 , 2 / 4 )  decode:( move 5 , 6 ; move 4 , / 9 / 4 ) 2 
[12233] c:0 is:( move ua , 2 / 3 ; move 3 , 3 / ua )  decode:( move 3 , 4 + 3 ; move ua , 9 ) 
[12234] c:0 is:( move ua - ul , 2 ; move 3 , 3 / 4 )  decode:( move 5 , 2 ; move 3 , 7 ) 
[12235] c:0 is:( move 3 , ul / 4 ; move ua + 4 , 2 )  decode:( move 3 , ul / 4 ; move 4 , 2 ) 
[12236] c:0 is:( move 4 , 3 ; move ul - ua , 3 / 2 )  decode:( move 4 , 3 ; move ua - ul , 8 ) 
[12237] c:0 is:( move ua + 2 , 8 ; move ua - 2 , 4 )  decode:( move ua + 2 , ua ; move 4 , 4 ) 
[12238] c:0 is:( move ua + ul , 4 / 3 ; move 4 , 2 )  decode:( move 4 , 5 / 3 ; move 4 , 2 ) 
[12239] c:0 is:( move 4 , 4 / ua - 3 ; move ua , 2 )  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[12240] c:0 is:( move 3 , 4 / ua ; move ua - 2 , 4 )  decode:( move 3 , 2 / 4 ; move 4 , 4 ) 
[12241] c:0 is:( move ua + 3 , ul / 4 ; move 4 , 2 )  decode:( move 9 , ul / 4 ; move 4 , 2 ) 
[12242] c:0 is:( move 3 , 4 ; move ua + ul , 4 * 3 )  decode:( move 4 , 4 ; move ua , 4 * 3 ) 
[12243] c:0 is:( move 3 - ua , 2 / 4 ; move 3 , ul )  decode:( move 3 , 0 - 4 ; move 3 , 4 ) 
[12244] c:0 is:( move 4 , 2 / 4 ; move ua - ul , 2 )  decode:( move 4 , 3 / 4 ; move ua , 2 ) 
[12245] c:0 is:( move 3 , 9 ; move ul - ua , 0 - 2 )  decode:( move 4 , 9 ; move 4 , 2 - 3 ) 
[12246] c:0 is:( move ua , 3 ; move 3 - ua , 4 / 3 )  decode:( move ua , 2 - 3 ; move ua , 3 ) 
[12247] c:0 is:( move ua , 4 / ua ; move 4 , 2 - 3 )  decode:( move 4 , 9 ; move ua , ul ) 
[12248] c:0 is:( move 4 - ua , 3 ; move ua , 2 / 4 )  decode:( move 3 , 6 ; move ua , 9 ) 
[12249] c:0 is:( move ua + ul , 4 ; move 3 , 2 / 4 )  decode:( move ua , 4 ; move 3 , 2 / 4 ) 
[12250] c:0 is:( move 5 , 2 / ua ; move ua , 3 + 4 )  decode:loop 0 , 3 , move 3 + v0 , 2 / 4 
[12251] c:0 is:( move 2 , 4 / 3 ; move ua + ul , 4 )  decode:( move 2 , ul ; move ua + ul , 4 ) 
[12252] c:0 is:( move ua + 3 , 4 * 4 ; move ua , 4 )  decode:( move 9 , 4 * 4 ; move ua , 4 ) 
[12253] c:0 is:( move 5 , 4 / ua ; move ua + 3 , 2 )  decode:( move 5 , 3 / ua ; move 9 , 2 ) 
[12254] c:0 is:( move ua , 4 / 5 ; move ua , 0 - 4 )  decode:( move ua , 0 ; move ua , 4 ) 
[12255] c:0 is:( move 0 - 4 , ul / 4 ; move 3 , ul )  decode:( move 4 , 4 * 4 ; move 4 , 4 ) 
[12256] c:0 is:( move 5 , 4 * 3 ; move ua + ul , 2 )  decode:( move 5 , 4 * 3 ; move ua , 2 ) 
[12257] c:0 is:( move ua + ul , 4 * 4 ; move 4 , 2 )  decode:loop 0 , 3 , move v0 * 4 , 0 - 2 
[12258] c:0 is:( move ua - ul , 2 / 3 ; move 3 , 4 )  decode:( move 5 , 3 / 4 ; move 3 , 4 ) 
[12259] c:0 is:( move 2 , 3 ; move ul - ua , 4 / 3 )  decode:( move 2 , 4 ; move ua - ul , 4 ) 
[12260] c:0 is:( move 3 , 3 / 4 ; move ua , ul - 2 )  decode:( move ua , 9 ; move 3 , ul ) 
[12261] c:0 is:( move 2 , 4 / 3 ; move ua , 2 / ua )  decode:( move ua , 8 ; move 2 , 3 ) 
[12262] c:0 is:( move 3 - ua , 2 ; move 4 , 4 / ua )  decode:( move 3 , 4 ; move 4 , 7 / 3 ) 
[12263] c:0 is:( move 0 - 7 , 3 - 4 ; move ua , ul )  decode:( move ua , 0 - 3 ; move ua , ul ) 
[12264] c:0 is:( move 5 , 2 - 3 ; move ul - ua , 4 )  decode:( move ul - ua , 2 ; move 5 , 4 ) 
[12265] c:0 is:( move 3 , ua / 4 ; move ua - 2 , 4 )  decode:( move 3 , ua / 4 ; move 4 , 4 ) 
[12266] c:0 is:( move ua - ul , 2 ; move 4 , 4 * 3 )  decode:( move 4 , 2 ; move 4 , 3 * 4 ) 
[12267] c:0 is:( move ua , 4 / 3 ; move ua + 3 , 4 )  decode:( move ua , 4 / 3 ; move 9 , 4 ) 
[12268] c:0 is:( move 0 - 4 , 4 ; move ua , ul / 4 )  decode:( move 3 , 4 ; move ua , 4 * 4 ) 
[12269] c:0 is:( move 4 , 2 - 3 ; move ua , ua / 4 )  decode:loop 0 , 4 , move ul - v0 , ua / 4 
[12270] c:0 is:( move 5 , 2 / 4 ; move ua + ul , 2 )  decode:( move 5 , 3 / ua ; move 7 , 2 ) 
[12271] c:0 is:( move 4 - ua , 3 / 2 ; move ua , 4 )  decode:( move 2 , ul - 9 ; move ua , ul ) 
[12272] c:0 is:( move 4 , 4 / 3 ; move ua + ul , 2 )  decode:loop 0 , 4 , move v0 * 2 , 0 - 3 
[12273] c:0 is:( move ua + ul , 2 ; move 4 , 3 / 4 )  decode:( move ua + ul , 2 ; move 4 , 7 ) 
[12274] c:0 is:( move 4 , ul ; move 2 - ua , 4 * 3 )  decode:loop 0 , 2 , move 0 - 4 , 0 - 8 
[12275] c:0 is:( move ul - ua , 2 ; move 3 , 4 * 4 )  decode:( move 3 , 5 ; move ua , 2 / ua ) 
[12276] c:0 is:( move 9 , 3 ; move ua - ul , 0 - 2 )  decode:( move 9 , 3 ; move ua , 0 - 2 ) 
[12277] c:0 is:( move ua , ul - 3 ; move 3 , 4 * 3 )  decode:loop 0 , 3 , move 3 , 4 / ua 
[12278] c:0 is:( move 4 , ul ; move 2 - ua , 2 / 4 )  decode:( move 4 , 4 ; move 4 , 9 ) 
[12279] c:0 is:( move ua - 3 , 3 ; move ua , 4 / 3 )  decode:( move 3 , 3 ; move ua , 4 / 3 ) 
[12280] c:0 is:( move 4 , 4 * 3 ; move ul - ua , 2 )  decode:( move 4 , 3 * 4 ; move 5 , ul ) 
[12281] c:0 is:( move 3 , ua / 2 ; move ua , 4 * 3 )  decode:( move 3 , 3 ; move ua , 4 * 3 ) 
[12282] c:0 is:( move 2 , 4 * 3 ; move 4 , ua * ua )  decode:( move 3 , 3 * 4 ; move 4 , 8 ) 
[12283] c:0 is:( move 4 , 2 ; move ua - ul , 3 * 4 )  decode:( move 3 , 2 ; move ua , 4 * 3 ) 
[12284] c:0 is:( move 0 - 3 , 4 ; move ua + ul , 8 )  decode:( move 3 , ul / 4 ; move ua , 8 ) 
[12285] c:0 is:( move 0 - 4 , 6 ; move ul - ua , 4 )  decode:( move 4 , 9 ; move ul - ua , 4 ) 
[12286] c:0 is:( move ua + 2 , ul / 6 ; move 3 , 2 )  decode:( move ua + 2 , ul ; move 3 , 2 ) 
[12287] c:0 is:( move 3 , 2 / 4 ; move ua + ul , 4 )  decode:( move 3 , 3 / 2 ; move 7 , 4 ) 
[12288] c:0 is:( move ua , 4 * 4 ; move ua + 3 , 4 )  decode:( move ua , 4 * 4 ; move 9 , 4 ) 
[12289] c:0 is:( move ua , 4 ; move 0 - 7 , 4 + ul )  decode:( move ua , 4 ; move ua + ul , 5 ) 
[12290] c:0 is:( move 4 , 4 * 4 ; move ua + ul , 2 )  decode:( move 4 , 4 * 4 ; move 8 , 2 ) 
[12291] c:0 is:( move ul - ua , 4 * 4 ; move 3 , 2 )  decode:( move 5 , ul - 4 ; move 3 , 2 ) 
[12292] c:0 is:( move 4 , ul / 6 ; move 0 - ua , 2 )  decode:( move 4 , ul / 4 ; move ua , 2 ) 
[12293] c:0 is:( move 3 , 2 / 6 ; move ua + ul , 2 )  decode:( move 3 , 2 / 6 ; move ua , 2 ) 
[12294] c:0 is:( move 4 - ua , 2 ; move ua , 4 / 3 )  decode:( move 3 , ul / 4 ; move 3 , 4 ) 
[12295] c:0 is:( move ua , 3 + 4 / 3 ; move ua , 4 )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[12296] c:0 is:( move 3 , ul / 4 ; move ua + 2 , 4 )  decode:( move 3 , 0 - 4 ; move 8 , 4 ) 
[12297] c:0 is:( move 2 - ua , 4 ; move ua , 4 / 3 )  decode:( move ua , 0 - 4 ; move 4 , 5 ) 
[12298] c:0 is:( move ua , 3 / 4 ; move 2 - ua , 4 )  decode:( move 0 - ua , 4 ; move 4 , 4 ) 
[12299] c:0 is:( move 6 , ul ; move ua + 2 , 4 + 4 )  decode:( move ua , ul ; move 8 , 8 ) 
[12300] c:0 is:( move ul - ua , 3 ; move 2 , 8 + 2 )  decode:( move 5 , 0 ; move 2 , 4 + 4 ) 
[12301] c:0 is:( move 9 , 2 ; move ua + ul , 0 - 4 )  decode:( move 9 , 2 ; move ua , 0 - 4 ) 
[12302] c:0 is:( move 4 , 9 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 7 ; move 4 , 2 ) 
[12303] c:0 is:( move ua + ul , 2 / 6 ; move 3 , 2 )  decode:( move ua + ul , 9 ; move 3 , 2 ) 
[12304] c:0 is:( move ua , 3 ; move ua - 3 , 4 / 3 )  decode:( move ua , 3 ; move 3 , 4 / 3 ) 
[12305] c:0 is:( move 2 - ua , 4 ; move ua , 3 / 4 )  decode:loop 0 , 2 , move v0 - ua , 4 
[12306] c:0 is:( move 3 , 4 ; move ua + 3 , ua / 4 )  decode:( move 3 , 4 ; move 3 + ua , 8 ) 
[12307] c:0 is:( move 4 , 0 - 9 ; move ua + ul , 2 )  decode:( move 4 , 0 - 9 ; move 7 , 2 ) 
[12308] c:0 is:( move ul - ua , 4 ; move 3 , 3 - 4 )  decode:( move 5 , ul ; move 3 , 0 - 4 ) 
[12309] c:0 is:( move 4 , 4 * 3 ; move ua - ul , 2 )  decode:( move 4 , 4 * 3 ; move 5 , 2 ) 
[12310] c:0 is:( move 0 - 4 , ua / 4 ; move 4 , ul )  decode:( move 4 , 4 * 3 ; move 4 , ul ) 
[12311] c:0 is:( move 3 , 3 ; move ua - ul , 2 / 4 )  decode:( move 3 , 3 ; move 5 , 2 / 4 ) 
[12312] c:0 is:( move 4 + 4 , 3 ; move ul - 3 , ul )  decode:( move ua + ul , 3 ; move 2 , ul ) 
[12313] c:0 is:( move 4 , 2 ; move ul - ua , 2 / 4 )  decode:( move 4 , 2 ; move ua - ul , 9 ) 
[12314] c:0 is:( move ul , 3 / 4 ; move ua + 2 , 4 )  decode:( move 2 , 0 ; move ua + 2 , 4 ) 
[12315] c:0 is:( move 4 , 3 / 4 ; move ua + ul , 2 )  decode:( move 4 , 4 / 3 ; move 7 , 2 ) 
[12316] c:0 is:( move 3 - ua , ua / 4 ; move 2 , 4 )  decode:( move 3 , 0 - 4 ; move 2 , ul ) 
[12317] c:0 is:( move ul - ua , 2 ; move 3 , 4 / 3 )  decode:( move 3 , ul / 4 ; move 5 , 5 ) 
[12318] c:0 is:( move 3 - ua , 4 / ua ; move 4 , 2 )  decode:( move 3 , 4 + 3 ; move 4 , 5 ) 
[12319] c:0 is:( move 3 , 2 ; move 4 + ul , 4 / ua )  decode:( move 3 , 2 ; move 5 , 4 / ua ) 
[12320] c:0 is:( move 2 , 4 ; move ua + ul , 4 / 3 )  decode:( move 2 , 0 - 4 ; move 7 , 5 ) 
[12321] c:0 is:( move 3 , 4 / 3 ; move ua - ul , 2 )  decode:( move 3 , 4 / 3 ; move 5 , 2 ) 
[12322] c:0 is:( move 4 , 2 / ua ; move ua , 3 / 2 )  decode:( move ua , 5 ; move 4 , 3 / 2 ) 
[12323] c:0 is:( move 4 , ua / 4 ; move 2 - ua , 3 )  decode:move ua , 4 * 3 
[12324] c:0 is:( move 0 - ua , ul / 4 ; move 4 , 4 )  decode:( move ua , 0 - 4 ; move 4 , ul ) 
[12325] c:0 is:( move ua , 2 / 8 ; move ua + 2 , 2 )  decode:( move ua , ul / 4 ; move 8 , 2 ) 
[12326] c:0 is:( move ua + 2 , 2 / 6 ; move ua , 4 )  decode:loop 0 , 4 , move v0 * 2 , ua / ua 
[12327] c:0 is:( move 2 , ul ; move 4 * 2 , ua / 3 )  decode:( move 2 , ul ; move 8 , ua / 3 ) 
[12328] c:0 is:( move ua + 3 , ul / 2 ; move 4 , 4 )  decode:( move 9 , 3 / ua ; move 4 , 4 ) 
[12329] c:0 is:( move ul - ua , 2 - 3 ; move 4 , 5 )  decode:( move 5 , ua / 3 ; move 4 , 5 ) 
[12330] c:0 is:( move 3 , 4 * 4 ; move ul - ua , 2 )  decode:( move 3 , 4 * 4 ; move 5 , 5 ) 
[12331] c:0 is:( move ua , 0 - 9 ; move ua + 3 , 4 )  decode:loop 0 , 3 , move v0 + 3 , 0 - 9 
[12332] c:0 is:( move ua + 2 , 9 + 4 ; move ua , 2 )  decode:loop 0 , 3 , move v0 + 4 , 3 / 4 
[12333] c:0 is:( move 5 , ua / 3 ; move 4 + ua , 2 )  decode:( move ua , ua / 4 ; move ua , 2 ) 
[12334] c:0 is:( move ul - ua , 3 ; move 3 , 3 * 4 )  decode:( move 5 , 0 ; move 3 , 9 ) 
[12335] c:0 is:( move 3 - ua , 3 ; move ua , 4 / 3 )  decode:( move 3 , 0 ; move ua , 3 / 2 ) 
[12336] c:0 is:( move 2 - ua , ul / 4 ; move 4 , 2 )  decode:( move 4 , 4 * 4 ; move 4 , 5 ) 
[12337] c:0 is:( move 2 - ua , 2 / 4 ; move 4 , ul )  decode:( move 4 , 9 + 2 ; move 4 , 4 ) 
[12338] c:0 is:( move 0 - 4 , 6 ; move ua - ul , 4 )  decode:( move 4 , 9 ; move ua - ul , 4 ) 
[12339] c:0 is:( move 2 , 2 / 4 ; move ul - ua , 4 )  decode:( move 2 , 3 / ua ; move 5 , ul ) 
[12340] c:0 is:( move 5 , ua / 3 ; move 0 - 4 , ul )  decode:( move 5 , ua / 3 ; move 4 , 4 ) 
[12341] c:0 is:( move 4 , ul - 3 ; move 3 , 2 / ua )  decode:( move 3 , 4 / move 4 , 2 / 4 ) 
[12342] c:0 is:( move 2 - ua , 6 ; move ua , 2 / 3 )  decode:( move 5 , 9 ; move ua , 9 ) 
[12343] c:0 is:( move ua + 2 , 4 ; move 3 , ul / 4 )  decode:( move 3 , 4 ; move ua + ul , 6 ) 
[12344] c:0 is:( move 9 , 0 ; move ul - ua , 2 - 3 )  decode:( move 9 , ul / 9 ; move ua , 4 ) 
[12345] c:0 is:( move 4 + 4 , 3 ; move ua , ua / 3 )  decode:( move ua + ul , 3 ; move 8 , ul ) 
[12346] c:0 is:( move ua + ul , 2 ; move 4 , 4 / 3 )  decode:( move ua + ul , 2 ; move ua , 8 ) 
[12347] c:0 is:( move 2 , 4 ; move ua + ul , 3 / 4 )  decode:( move 2 , 4 ; move ua + ul , 7 ) 
[12348] c:0 is:( move ua - ul , 4 * 3 ; move 4 , 2 )  decode:( move 5 , 4 * 3 ; move 4 , 2 ) 
[12349] c:0 is:( move 3 - ua , 2 / 6 ; move ua , 2 )  decode:( move 3 , 0 - 9 ; move ua , 2 ) 
[12350] c:0 is:( move ua + 3 , 2 / 4 ; move 4 , ul )  decode:( move 9 , 4 + 4 ; move 4 , ul ) 
[12351] c:0 is:( move ua , 0 - 9 ; move ua - 4 , 2 )  decode:( move ua , 0 - 9 ; move 3 , 2 ) 
[12352] c:0 is:( move 6 , 2 - 3 ; move ua + ul , 4 )  decode:loop 0 , 3 , move ua - ul , 2 - v0 
[12353] c:0 is:( move ul - ua , 2 / 3 ; move 2 , 5 )  decode:( move 5 , 7 ; move 3 , ua * ua ) 
[12354] c:0 is:( move 4 , ul ; move ua , 2 - 4 * 3 )  decode:( move 4 , ul ; move ua , 5 * 2 ) 
[12355] c:0 is:( move 4 , 2 / 4 ; move ul - ua , 2 )  decode:( move 4 , 3 / ua ; move 5 , 5 ) 
[12356] c:0 is:( move 4 , ul ; move 3 - ua , 3 * 3 )  decode:( move 4 , ul ; move 3 , 2 / 3 ) 
[12357] c:0 is:( move ua + 2 , 3 ; move 9 - ua , 2 )  decode:( move ua + 2 , 3 ; move 3 , 2 ) 
[12358] c:0 is:( move 3 , 4 * 3 ; move ua + ul , 4 )  decode:( move 3 , 4 * 3 ; move 7 , 4 ) 
[12359] c:0 is:( move 2 - 9 , 0 ; move ua , 4 + ul )  decode:( move ul - ua , 0 ; move ua , 5 ) 
[12360] c:0 is:( move 4 , 4 / 3 ; move ua + ul , 2 )  decode:loop 0 , 4 , move v0 * 2 , 0 - 3 
[12361] c:0 is:( move ul - ua , 2 / 4 ; move 2 , 4 )  decode:( move 5 , 2 ; move 4 , ul / 4 ) 
[12362] c:0 is:( move ua , ua - 2 / 4 ; move 3 , 4 )  decode:( move ua , 4 * 3 ; move 4 , 4 ) 
[12363] c:0 is:( move 4 , 3 ; move 0 - 7 , ua * ua )  decode:( move 4 , 3 ; move ua + ul , 5 ) 
[12364] c:0 is:( move 4 , 4 ; move ua + 2 , ua / 4 )  decode:( move 4 , 4 ; move 3 + ua , 8 ) 
[12365] c:0 is:( move 3 - ua , 2 / ua ; move 4 , 4 )  decode:( move 3 , 0 - 4 ; move 4 , 7 ) 
[12366] c:0 is:( move 3 , 2 / ua ; move ua , 2 / 4 )  decode:( move ua , 4 ; move 3 , 2 / 4 ) 
[12367] c:0 is:( move 4 , 4 / ua ; move ua + 2 , 4 )  decode:( move 4 , ua / 4 ; move 8 , 4 ) 
[12368] c:0 is:( move ua , 2 / 6 ; move ua + 2 , 4 )  decode:( move ua , 2 / 6 ; move 8 , 4 ) 
[12369] c:0 is:( move ua , 3 / 2 ; move 2 , 4 / ua )  decode:( move 2 , 2 ; move ua , 2 / 4 ) 
[12370] c:0 is:( move 4 , 9 ; move 0 - ua + ul , 2 )  decode:( move 4 , 9 ; move ua + ul , ul ) 
[12371] c:0 is:( move 4 , 4 / ua ; move 0 - 4 , ul )  decode:( move 4 , 4 / ua ; move 4 , 4 ) 
[12372] c:0 is:( move 4 , 2 ; move ua + ul , 4 / 3 )  decode:( move 4 , 3 / move ua , 4 / 3 ) 
[12373] c:0 is:( move 0 - ua , 5 ; move 4 , ua / 4 )  decode:loop 0 , 4 , move 4 - ua , 4 / 9 
[12374] c:0 is:( move 4 , 4 * 3 ; move 2 - ua , ul )  decode:( move 4 , 4 * 3 ; move 5 , 4 ) 
[12375] c:0 is:( move 4 , 2 ; move ua + ul , 4 * 4 )  decode:( move 4 , 9 / 4 ; move ua , 9 ) 
[12376] c:0 is:( move 6 , 0 ; move ua + ul , 4 / 3 )  decode:( move ua , 0 ; move 8 , 4 / 3 ) 
[12377] c:0 is:( move 4 , 4 ; move ua + ul , 3 / 2 )  decode:( move 4 , 4 ; move ua , 3 / 2 ) 
[12378] c:0 is:( move ua , ul / 4 ; move 3 , 2 - 3 )  decode:( move 3 , 0 - 4 ; move ua , ul ) 
[12379] c:0 is:( move 0 - ua , 4 ; move ua , 4 / 5 )  decode:loop 0 , 2 , move 0 - ua , 4 
[12380] c:0 is:( move 0 - 4 , 9 ; move ua + ul , 2 )  decode:( move 4 , 4 / 3 ; move 9 , 2 ) 
[12381] c:0 is:( move 2 , 4 * 3 ; move ua - ul , 4 )  decode:( move 2 , 4 * 3 ; move ua , 4 ) 
[12382] c:0 is:( move ul - ua , 2 ; move 4 , 2 / 4 )  decode:( move ul - ua , 2 ; move 4 , 9 ) 
[12383] c:0 is:( move 3 - ua , ul ; move 4 , 4 * 3 )  decode:( move 3 , 5 + 9 ; move 4 , 9 ) 
[12384] c:0 is:( move 4 , 2 / 4 ; move 3 , ua * ua )  decode:( move 4 , 2 / 4 ; move 4 , 8 ) 
[12385] c:0 is:( move ua , 4 + 3 ; move 4 , ua / 4 )  decode:( move ua , 2 - 3 ; move 5 , 8 ) 
[12386] c:0 is:( move ul , 2 / 4 ; move ua , 4 + 4 )  decode:( move ul , 2 - 3 ; move ua , 5 ) 
[12387] c:0 is:( move ua , 4 * 6 ; move 2 + ua , 4 )  decode:( move ua , 6 ; move ua + 2 , 4 ) 
[12388] c:0 is:( move 4 , 4 / 3 ; move 2 - ua , ul )  decode:( move 4 , 4 / 3 ; move 5 , 4 ) 
[12389] c:0 is:( move ul - ua , 5 ; move 4 + 3 , 4 )  decode:( move 5 , ua * ua ; move 7 , ul ) 
[12390] c:0 is:( move 3 , 3 ; move ul - ua , 4 / 3 )  decode:( move 3 , 3 ; move ua , 0 - 5 ) 
[12391] c:0 is:( move 4 , 3 ; move ul - ua , 3 * 4 )  decode:( move 4 , 3 ; move 5 , 9 ) 
[12392] c:0 is:( move ua , 3 / 2 ; move 3 , ua / 4 )  decode:( move 3 , 0 ; move ua , 9 * 4 ) 
[12393] c:0 is:( move 4 , 2 / 4 ; move 3 - ua , ul )  decode:( move 4 , 3 / 2 ; move 4 , ul ) 
[12394] c:0 is:( move 0 - 7 , ul ; move 4 , 4 + ul )  decode:( move 0 - 9 , ul ; move 4 , 5 ) 
[12395] c:0 is:( move ua , 4 * 4 / 3 ; move ua , 2 )  decode:( move ua , 2 - 3 ; move ua , 2 ) 
[12396] c:0 is:( move 5 , 2 / 4 ; move ua - ul , 2 )  decode:( move 5 , 3 / ua ; move ua , 2 ) 
[12397] c:0 is:( move ua + ul , 4 ; move 4 , 4 * 3 )  decode:( move ua , 4 ; move 4 , 2 / 3 ) 
[12398] c:0 is:( move ul - ua , 4 / 3 ; move 2 , 4 )  decode:( move 2 , 0 - 2 ; move ua , ul ) 
[12399] c:0 is:( move ul - ua , 2 / 4 ; move 3 , 4 )  decode:( move ul - ua , 2 ; move 3 , 4 ) 
[12400] c:0 is:( move 3 - ua , 5 ; move ua , 4 * 3 )  decode:( move 3 , 9 / ua ; move ua , 9 ) 
[12401] c:0 is:( move ul - ua , 3 / 2 ; move 4 , 4 )  decode:( move ul - ua , ul ; move 4 , 4 ) 
[12402] c:0 is:( move ua + ul , 3 ; move 4 , 4 * 4 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[12403] c:0 is:( move ua - ul , 3 / 4 ; move 4 , 2 )  decode:( move ul - ua , 4 ; move 4 , 2 ) 
[12404] c:0 is:( move 3 , ul ; move 3 - ua , 4 / 3 )  decode:( move 3 , 4 ; move 3 , 0 - 2 ) 
[12405] c:0 is:( move ua , 4 / 3 ; move ua + 4 , 4 )  decode:( move ua , 4 / 3 ; move 4 , 4 ) 
[12406] c:0 is:( move 5 , 4 * 3 ; move 2 - ua , ul )  decode:( move ul - ua , 9 ; move 5 , ul ) 
[12407] c:0 is:( move 4 , 4 * 4 ; move ul - ua , 2 )  decode:( move 4 , 4 * 4 ; move 5 , 2 ) 
[12408] c:0 is:( move 4 , 2 ; move ua - ul , 4 / 3 )  decode:( move 4 , 2 ; move 5 , 4 / 3 ) 
[12409] c:0 is:( move ul - ua , 3 ; move 4 , 4 * 3 )  decode:( move 5 , 2 / 3 ; move 4 , 9 ) 
[12410] c:0 is:( move 4 * 2 , ua / 4 ; move ua , 3 )  decode:( move ua + ul , 3 + move ua , 3 ) 
[12411] c:0 is:( move ua , 2 / ua ; move 3 , 3 / 4 )  decode:loop 0 , 4 , move 4 - ua , 2 / 4 
[12412] c:0 is:( move 3 , 4 / ua ; move ua , 2 / 3 )  decode:loop 0 , 4 , move 2 , 2 / ua 
[12413] c:0 is:( move 3 - ua , 2 ; move ua , 5 / 4 )  decode:( move ua , ul / 6 ; move 3 , 2 ) 
[12414] c:0 is:( move ua + 2 , 9 ; move 4 - ua , 2 )  decode:( move ua + 2 , 9 ; move 2 , 5 ) 
[12415] c:0 is:( move 5 , 4 / 3 ; move ua + ul , 2 )  decode:( move 5 , 4 / 3 ; move 8 , 2 ) 
[12416] c:0 is:( move ua + ul , 3 / 2 ; move 4 , 5 )  decode:( move ua + ul , 0 ; move 4 , 5 ) 
[12417] c:0 is:( move 4 , 4 / 3 ; move ul - ua , 2 )  decode:( move 4 , 4 / 3 ; move 5 , ul ) 
[12418] c:0 is:( move 2 - ua , ul ; move 4 , 4 / 3 )  decode:( move 4 , 2 * 3 ; move 4 , 5 ) 
[12419] c:0 is:( move 4 , 4 / ua ; move ua - 2 , 4 )  decode:( move 4 , 2 / 4 ; move 5 , 4 ) 
[12420] c:0 is:( move 2 , 9 ; move ua + ul , 2 - 3 )  decode:( move 2 , 9 ; move ua , 2 - 3 ) 
[12421] c:0 is:( move 4 , 2 ; move ua - ul , 4 * 4 )  decode:( move 4 , 0 - 4 ; move 4 , 3 ) 
[12422] c:0 is:( move 4 - ua , 0 ; move ua , 7 / 3 )  decode:loop 0 , 3 , move ua - 4 , v0 - 3 
[12423] c:0 is:( move 0 - 4 , 9 ; move ua - ul , 2 )  decode:( move 4 , 4 / 3 ; move ua , 2 ) 
[12424] c:0 is:( move 5 , 2 ; move ul - ua , 4 * 3 )  decode:( move 5 , 2 ; move ul - ua , 8 ) 
[12425] c:0 is:( move ua - ul , 9 ; move 4 , 0 - 2 )  decode:( move 4 , 9 ; move ua , 0 - 2 ) 
[12426] c:0 is:( move 4 , 2 ; move ul - ua , 4 / 3 )  decode:( move 5 , 0 - 3 ; move 5 , 5 ) 
[12427] c:0 is:( move 5 , ua / 4 ; move ua - 3 , 2 )  decode:( move 5 , ua / 4 ; move 4 , 2 ) 
[12428] c:0 is:( move ul - ua , 5 ; move 3 , 3 * 3 )  decode:( move ul - ua , 5 ; move 3 , 9 ) 
[12429] c:0 is:( move 4 , 4 * 4 ; move 2 - ua , ul )  decode:( move 4 , 4 * 4 ; move 4 , 4 ) 
[12430] c:0 is:( move ua - ul , 3 ; move 4 , 2 / 4 )  decode:( move ul - ua , 3 ; move 4 , 7 ) 
[12431] c:0 is:( move 3 - ua , 5 ; move 4 + 4 , ul )  decode:( move 3 , 2 ; move ua + 2 , 4 ) 
[12432] c:0 is:( move 3 , 4 ; move ua + ul , 4 / 3 )  decode:( move 3 , 4 ; move 7 , 4 / 3 ) 
[12433] c:0 is:( move 2 / 4 , ua ; move ua , 2 / 4 )  decode:( move ul , 9 ; move ua , 3 / 4 ) 
[12434] c:0 is:( move 2 , 4 / 3 ; move ul - ua , 4 )  decode:( move 2 , 4 / 3 ; move ua , ul ) 
[12435] c:0 is:( move 4 , 2 / 4 ; move ul - ua , 3 )  decode:( move 4 , 4 + move ua , ul / 4 ) 
[12436] c:0 is:( move 4 , ua * ua ; move 3 , 4 * 3 )  decode:( move 2 , 4 ; move ua - ul , 7 ) 
[12437] c:0 is:( move 3 , 2 ; move ua + ul , 5 / 4 )  decode:( move 3 , 0 ; move ua - ua , 3 ) 
[12438] c:0 is:( move 3 , ua / 3 ; move ua , 3 * 4 )  decode:( move 3 , 9 ; move ua , 3 * 4 ) 
[12439] c:0 is:( move ua , 9 * 3 ; move ua + 2 , 2 )  decode:( move ua , ua * ua ; move 9 , 2 ) 
[12440] c:0 is:( move ul - ua , 4 * 3 ; move 3 , 4 )  decode:( move ua - ul , 9 ; move 3 , 4 ) 
[12441] c:0 is:( move 3 , 4 ; move 3 - ua , ua / 4 )  decode:( move 3 , 9 ; move 3 , 3 + 8 ) 
[12442] c:0 is:( move 4 , 3 ; move 3 - ua , ua / 4 )  decode:( move 4 , 3 ; move 4 , 7 + 4 ) 
[12443] c:0 is:( move 3 , 4 ; move ul - ua , 3 * 4 )  decode:( move 3 , 4 ; move ua , 0 - 9 ) 
[12444] c:0 is:( move 3 , 3 ; move 4 + ul , 4 / ua )  decode:( move 3 , 3 ; move 5 , 7 ) 
[12445] c:0 is:( move 4 , 0 - 4 ; move ua + ul , 8 )  decode:( move ua , 4 ; move 4 , 3 + 4 ) 
[12446] c:0 is:( move 3 , 4 / 3 ; move ul + ua , 4 )  decode:( move 3 , 9 / 4 ; move 7 , 4 ) 
[12447] c:0 is:( move ua , 4 + 9 ; move 2 - ua , 2 )  decode:( move ua , 5 + 4 ; move 4 , 5 ) 
[12448] c:0 is:( move 4 , 9 ; move ul - ua , 0 - 2 )  decode:( move 5 , 7 ; move 4 , 5 ) 
[12449] c:0 is:( move ua , 2 * 4 / 3 ; move ua , 4 )  decode:( move ua , 9 ; move ua , 4 ) 
[12450] c:0 is:( move 3 , 2 / 4 ; move 4 , ua * ua )  decode:( move 3 , 4 + 9 ; move 4 , 2 ) 
[12451] c:0 is:( move 4 , 4 / ua ; move ua - 4 , 2 )  decode:( move 3 , 4 / ua ; move 3 , 2 ) 
[12452] c:0 is:( move 3 , ua / 2 ; move 4 , ua / 3 )  decode:( move 3 , ua / 2 ; move 4 , ua / ) 3 
[12453] c:0 is:( move 3 , 2 / 3 ; move ua - ul , 5 )  decode:( move 3 , 4 / ua ; move ua , 5 ) 
[12454] c:0 is:( move 4 , ul / 4 ; move ua + 4 , 2 )  decode:( move 4 , ul / 4 ; move 4 , 2 ) 
[12455] c:0 is:( move ul - ua , 2 ; move 4 , 3 / 4 )  decode:( move ul - ua , 2 ; move 4 , 7 ) 
[12456] c:0 is:( move 4 , 3 ; move ua + ul , 4 / 3 )  decode:( move 4 , 3 ; move 7 , 4 / 3 ) 
[12457] c:0 is:( move 3 , 2 / 4 ; move ua - ul , 4 )  decode:( move 3 , 3 / 2 ; move ua , 4 ) 
[12458] c:0 is:( move 5 , ua * ua ; move 3 , 4 + 4 )  decode:loop 0 , 2 , move 4 , ua / ua + v0 
[12459] c:0 is:( move 4 , 0 - 9 ; move ua - ul , 2 )  decode:( move 4 , 0 - 9 ; move 5 , 2 ) 
[12460] c:0 is:( move 4 , 2 / 4 ; move ua + ul , 4 )  decode:( move 4 , 3 / ua ; move 8 , 4 ) 
[12461] c:0 is:( move 4 , 4 * 4 ; move ua - ul , 2 )  decode:( move 4 , 4 * 4 ; move ua , 2 ) 
[12462] c:0 is:( move 4 , 3 ; move ua - ul , 4 * 3 )  decode:( move 4 , 3 ; move ul - ua , 4 ) 
[12463] c:0 is:( move 4 - ua , 3 ; move ua , 4 / 3 )  decode:( move 2 , ul ; move ua , 3 / 2 ) 
[12464] c:0 is:( move ua , 2 / 4 ; move 4 , 2 / ua )  decode:( move 4 , 4 ; move ul - ua , 9 ) 
[12465] c:0 is:( move ua + ul , 4 * 3 ; move 4 , 4 )  decode:( move ua + ul , 3 ; move 4 , 4 ) 
[12466] c:0 is:( move 4 , 3 ; move ua , 4 + ua / 4 )  decode:( move 4 , 3 ; move ua , 4 * 3 ) 
[12467] c:0 is:( move 4 , 3 / 4 ; move 2 - ua , ul )  decode:( move 4 , 7 ; move 5 , 4 ) 
[12468] c:0 is:( move 3 - ua , 4 ; move ua , 4 / 3 )  decode:( move 3 , 4 ; move ua , 4 / 3 ) 
[12469] c:0 is:( move 2 - ua , 9 ; move ua , 2 - 3 )  decode:( move 5 , ul / 4 ; move 5 , ul ) 
[12470] c:0 is:( move 4 + 4 , 3 ; move ul - 4 , ul )  decode:( move ua + 2 , 3 ; move 3 , 4 ) 
[12471] c:0 is:( move 2 - ua , 4 ; move 4 , ua / 4 )  decode:( move 4 , 4 ; move 4 , 3 / 4 ) 
[12472] c:0 is:( move ua - 4 , 3 ; move ua , 3 / 4 )  decode:( move 3 , 3 ; move ua , 7 ) 
[12473] c:0 is:( move ua , 3 + 4 ; move 4 , 4 / ua )  decode:( move ua , 7 ; move 4 , 7 ) 
[12474] c:0 is:( move 4 , 4 + 3 ; move ua , ua / 4 )  decode:loop 0 , 3 , move 4 / v0 , 4 / 4 
[12475] c:0 is:( move 3 - ua , 2 / 4 ; move 4 , ul )  decode:( move 3 , 4 ; move 4 , 2 / 5 ) 
[12476] c:0 is:( move ua - ul , 4 * 4 ; move 4 , 2 )  decode:( move 5 , 4 * 4 ; move 4 , 2 ) 
[12477] c:0 is:( move 4 , 2 ; move 3 - ua , ul / 4 )  decode:( move 4 , 9 / 4 ; move 4 , 3 ) 
[12478] c:0 is:( move ua / 2 , 4 ; move 4 + ul , 4 )  decode:( move 3 , 4 ; move ul - ua , 4 ) 
[12479] c:0 is:( move ua + 3 , ul ; move 4 , 4 * 4 )  decode:( move 9 , ul ; move 4 , 9 ) 
[12480] c:0 is:( move ua , 3 / 2 ; move ua , 4 / 3 )  decode:( move 6 , 6 ; move ua , 5 ) 
[12481] c:0 is:( move ua + ul , 2 / 4 ; move 4 , 4 )  decode:( move ua + ul , 4 / move 4 , 4 ) 
[12482] c:0 is:( move ua , 3 / 2 - 4 ; move 4 , ul )  decode:( move 4 , 9 ; move ua , 2 - 3 ) 
[12483] c:0 is:( move 5 , 3 / 2 ; move ua + ul , 4 )  decode:( move 5 , ua / 2 ; move ua , 4 ) 
[12484] c:0 is:( move 3 , 0 - 9 ; move ua + ul , 4 )  decode:( move 3 , 0 - 9 ; move ua , 4 ) 
[12485] c:0 is:( move ua + 2 , ul / 4 ; move 4 , 4 )  decode:loop 0 , 4 , move 3 , ua / v0 / ua 
[12486] c:0 is:( move 3 , 2 / 4 ; move ul - ua , 4 )  decode:( move 3 , 3 / 4 ; move 5 , ul ) 
[12487] c:0 is:( move 3 , 3 ; move ua - ul , 4 / 3 )  decode:( move 3 , 3 ; move 5 , 4 / 3 ) 
[12488] c:0 is:( move 4 , 4 * 4 ; move ua + ul , 3 )  decode:( move ua , 4 * 4 ; move 8 , 3 ) 
[12489] c:0 is:( move 3 - ua , ua / 4 ; move 3 , 4 )  decode:( move 4 , 9 + 2 ; move 3 , 4 ) 
[12490] c:0 is:( move ul - ua , 2 ; move 4 , 4 / 3 )  decode:( move ua - 2 , ul ; move 5 , 8 ) 
[12491] c:0 is:( move ua + ul , 4 ; move 3 , 3 / 4 )  decode:( move ua + ul , 4 ; move 3 , 7 ) 
[12492] c:0 is:( move 3 , ul / 4 ; move ua + 2 , 5 )  decode:( move 9 , 2 / 4 ; move ua , 8 ) 
[12493] c:0 is:( move ua , 2 - 3 ; move 4 , ul / 4 )  decode:( move 3 , 5 / move ua , 2 / ua ) 
[12494] c:0 is:( move 8 - 2 , 3 ; move ua - 2 , ul )  decode:( move ua , 3 ; move 4 , ul ) 
[12495] c:0 is:( move 3 - ua , 4 ; move ua , 4 * 4 )  decode:( move 3 , ul ; move ua , 2 / ua ) 
[12496] c:0 is:( move 3 , 4 * 4 ; move ua + ul , 4 )  decode:( move 3 , 0 - 4 ; move ua , 4 ) 
[12497] c:0 is:( move 3 , 4 / ua ; move 3 + 4 , ul )  decode:( move 3 , ua / 4 ; move ua , ul ) 
[12498] c:0 is:( move ua + 4 , ua / 3 ; move 4 , 4 )  decode:( move 4 , 3 ; move 4 , 4 / 4 ) 
[12499] c:0 is:( move ua + ul , 4 * 4 ; move 3 , 4 )  decode:( move ua + ul , 4 ; move 3 , 4 ) 
[12500] c:0 is:( move 5 , 2 / 4 ; move 2 - ua , ul )  decode:( move 5 , 2 / 4 ; move 5 , 4 ) 
[12501] c:0 is:( move 4 , 3 ; move ua + ul , 4 * 4 )  decode:( move ua , 3 ; move 4 , 4 * 4 ) 
[12502] c:0 is:( move 0 - ua , 9 ; move ua , 3 / 2 )  decode:( move ua , 6 ; move ua , 9 / 2 ) 
[12503] c:0 is:( move 4 , 4 * 3 ; move ua + ul , 4 )  decode:loop 0 , 4 , move v0 * 2 , 4 
[12504] c:0 is:( move 5 , ua / 3 ; move ua - 4 , 2 )  decode:( move 5 , ua / 3 ; move 2 , 2 ) 
[12505] c:0 is:( move 4 , 4 ; move ua - 2 , ua / 4 )  decode:( move 4 , 4 ; move 4 , 3 / 2 ) 
[12506] c:0 is:( move ua + ul , 4 / 3 ; move 3 , 4 )  decode:( move ua + ul , 4 ; move 3 , 4 ) 
[12507] c:0 is:( move 2 , ua / 3 ; move ua , 4 / 3 )  decode:( move 2 , 4 * 3 ; move ua , 5 ) 
[12508] c:0 is:( move 4 , 2 + 9 ; move ua + ul , 2 )  decode:( move 4 , 9 + 2 ; move 9 , 2 ) 
[12509] c:0 is:( move 4 , ul / 4 ; move ua , 2 - 3 )  decode:( move ua , ua * 4 ; move 4 , ul ) 
[12510] c:0 is:( move 4 , 4 / 3 ; move ua - ul , 2 )  decode:( move 4 , 4 / 3 ; move 5 , 2 ) 
[12511] c:0 is:( move ul - ua , 6 ; move 3 , 3 + 4 )  decode:( move ul - ua , 6 ; move 3 , 7 ) 
[12512] c:0 is:( move 4 , 2 / 3 ; move ua , 3 / ua )  decode:( move ul - ua , ul ; move 4 , 7 ) 
[12513] c:0 is:( move 4 , 0 - 9 ; move 2 - ua , ul )  decode:( move 4 , 0 - 9 ; move 5 , 4 ) 
[12514] c:0 is:( move 5 , 4 * 3 ; move ul - ua , 2 )  decode:( move 5 , 3 * 4 ; move 5 , ul ) 
[12515] c:0 is:( move 0 - ua , ul / 6 ; move 3 , 4 )  decode:( move 3 , 0 - 3 ; move 3 , ul ) 
[12516] c:0 is:( move 4 , 0 - 9 ; move ul - ua , 2 )  decode:( move 4 , 0 - 9 ; move ua , 5 ) 
[12517] c:0 is:( move 2 , 4 ; move ul - ua , 4 / 3 )  decode:( move 2 , ul - 2 ; move 5 , 2 ) 
[12518] c:0 is:( move ua + 2 , 9 ; move ua + 3 , 4 )  decode:( move 9 , 9 ; move ua + 3 , 4 ) 
[12519] c:0 is:( move ul - ua , 3 ; move 4 , 2 / 4 )  decode:( move 5 , 3 ; move 4 , 9 ) 
[12520] c:0 is:( move ua , ua / 3 ; move 3 , 2 / 4 )  decode:0 loop 0 , 4 , move 2 , ua / v0 
[12521] c:0 is:( move ul - ua , 2 ; move 4 , 4 * 4 )  decode:( move 4 , 5 ; move 4 , 2 / ua ) 
[12522] c:0 is:( move 3 , 4 * 3 ; move ul - ua , 4 )  decode:( move 3 , 3 * 4 ; move ua , ul ) 
[12523] c:0 is:( move 4 , 3 / ua ; move 3 + 4 , ul )  decode:( move 4 , 2 / 4 ; move 7 , ul ) 
[12524] c:0 is:( move 4 , ua / 4 ; move ua , 2 / 3 )  decode:( move 3 , ua / 4 ; move ua , 7 ) 
[12525] c:0 is:( move ul - ua , 4 ; move 4 , 2 / 4 )  decode:( move 5 , 4 ; move 4 , 9 ) 
[12526] c:0 is:( move ua , 2 / ua ; move 4 , 4 / 3 )  decode:loop 0 , 3 , move 3 - ua , v0 / 3 
[12527] c:0 is:( move 4 , ua / 2 ; move ua , 3 / 4 )  decode:( move 4 , 3 ; move ua , v0 / 4 ) 
[12528] c:0 is:( move 4 + 3 , 9 ; move ua + ul , 2 )  decode:( move ua + ul , 9 ; move 8 , 2 ) 
[12529] c:0 is:( move 4 , 2 / 6 ; move ua - ul , 2 )  decode:( move 4 , 9 + 4 ; move ua , 2 ) 
[12530] c:0 is:( move ua , ua / 4 ; move 3 , 2 / 4 )  decode:( move 3 , 4 ; move ua , 4 / ua ) 
[12531] c:0 is:( move 2 , 4 * 4 ; move ua , 4 / ua )  decode:( move ua , 4 ; move 2 , 4 * 3 ) 
[12532] c:0 is:( move 3 , 0 - 9 ; move ul - ua , 4 )  decode:loop 0 , 3 , move 0 - 3 , 2 / 5 
[12533] c:0 is:( move 3 , 4 ; move ul - ua , 4 / 3 )  decode:( move 3 , 4 ; move ua - ul , 8 ) 
[12534] c:0 is:( move 5 , 4 / 3 ; move 2 - ua , ul )  decode:loop 0 , 2 , move 5 , 0 - 4 
[12535] c:0 is:( move 3 , 5 / 4 ; move ua - ul , 2 )  decode:( move 3 , 0 ; move 5 , 0 - 2 ) 
[12536] c:0 is:( move 4 , 2 / 6 ; move 2 - ua , ul )  decode:( move 4 , 2 / 6 ; move 4 , 4 ) 
[12537] c:0 is:( move 3 , ul / 4 ; move ua , 3 / 2 )  decode:( move ua , 4 / 3 ; move 3 , 8 ) 
[12538] c:0 is:( move 4 , ul ; move 3 - ua , 4 / 3 )  decode:( move 3 , ul ; move 4 , 0 - 5 ) 
[12539] c:0 is:( move 5 , 2 ; move ul - ua , 4 / 3 )  decode:( move 5 , 0 - 3 ; move 5 , 8 ) 
[12540] c:0 is:( move ua , 5 * 4 + 3 ; move 4 , ul )  decode:( move ua , 0 - 9 ; move 4 , ul ) 
[12541] c:0 is:( move ul - ua , 3 ; move 4 , 4 / 3 )  decode:( move 5 , 4 / 3 ; move 5 , 4 ) 
[12542] c:0 is:( move 5 , 4 * 3 ; move ua + ul , 4 )  decode:loop 0 , 3 , move 4 + v0 , 4 - 3 
[12543] c:0 is:( move 3 , ua / 4 ; move ua , 4 * 3 )  decode:( move ua , 4 ; move 3 , 2 / 4 ) 
[12544] c:0 is:( move 4 , 4 ; move ul - ua , 2 / 4 )  decode:( move 4 , 4 ; move 5 , 3 * 5 ) 
[12545] c:0 is:( move 3 - ua , 3 ; move 4 , ul / 4 )  decode:( move 3 , 0 ; move 4 , 3 ) 
[12546] c:0 is:( move 3 , ul / 3 ; move 4 + 4 , ul )  decode:( move 3 , 2 / 9 ; move 9 , ul ) 
[12547] c:0 is:( move 4 * 2 , ul / 2 ; move 4 , ul )  decode:( move ua + ul , 4 + v0 , ul ) 
[12548] c:0 is:( move 3 , 4 * 3 ; move ua , ua / 4 )  decode:( move 0 - ua , ul ; move 3 , 8 ) 
[12549] c:0 is:( move 4 - ua , 2 / 4 ; move 4 , ul )  decode:( move 2 , 4 + 6 ; move 4 , 4 ) 
[12550] c:0 is:( move 4 , 2 / ua ; move 4 , ua / 3 )  decode:loop 0 , 3 , move 3 , 0 - 4 
[12551] c:0 is:( move 9 , 0 - 4 ; move ua + ul , 4 )  decode:( move ua + 3 , 0 ; move ua , 4 ) 
[12552] c:0 is:( move ua , 3 * 6 ; move ua , 3 * 3 )  decode:( move ua , 4 * 3 ; move ua , 9 ) 
[12553] c:0 is:( move 4 , 2 / 4 ; move ua - ul , 4 )  decode:( move 4 , 2 / 4 ; move 5 , 4 ) 
[12554] c:0 is:( move ul - ua , 3 / 4 ; move 3 , 4 )  decode:( move 5 , 4 ; move 3 , 7 ) 
[12555] c:0 is:( move ul - ua , 4 / 3 ; move 3 , 4 )  decode:( move ua - ul , 0 ; move 3 , ul ) 
[12556] c:0 is:( move 4 , 3 / 4 ; move 3 , ua * ua )  decode:( move 5 , 4 / 5 ; move 3 , 8 ) 
[12557] c:0 is:( move 4 , 4 ; move ua + ul , 4 / 3 )  decode:( move 4 , 4 ; move ua , 4 / 3 ) 
[12558] c:0 is:( move ua + 2 , 3 ; move 9 + ul , 4 )  decode:( move ua + ul , 3 ; move ul , 4 0 0 0 0 + 0 0 0 0 ul 4 
[12559] c:0 is:( move 5 , 4 / 3 ; move ua - ul , 2 )  decode:( move 5 , 4 / 3 ; move 5 , 2 ) 
[12560] c:0 is:( move 3 , 4 / 3 ; move ua - 4 , ul )  decode:loop 0 , 2 , move 3 , 4 * 3 
[12561] c:0 is:( move 4 , 4 ; move 3 - ua , ua / 4 )  decode:( move 4 , 4 ; move 3 , 3 + 8 ) 
[12562] c:0 is:( move 4 , ul / ua ; move 4 + 4 , 3 )  decode:( move ua , 0 ; move ua , 3 ) 
[12563] c:0 is:( move 5 , ul ; move 3 - ua , 4 * 3 )  decode:( move 5 , ul ; move 3 , 9 ) 
[12564] c:0 is:( move 4 , 4 / 3 ; move ua + ul , 4 )  decode:( move 4 , 4 / 3 ; move 7 , 4 ) 
[12565] c:0 is:( move ua + ul , 6 ; move 4 , 4 * 2 )  decode:( move ua + ul , 6 ; move 4 , 8 ) 
[12566] c:0 is:( move ua + ul , 9 ; move 4 + 3 , 2 )  decode:( move 8 , 9 ; move ua + ul , 2 ) 
[12567] c:0 is:( move 4 , 3 ; move ul - ua , 4 / 3 )  decode:( move 4 , 3 ; move ua , 0 - 4 ) 
[12568] c:0 is:( move 4 , 3 / 4 ; move ua + ul , 4 )  decode:( move 4 , 4 / move ua + ul , 4 ) 
[12569] c:0 is:( move 4 , 2 ; move ua - ul , 9 + 2 )  decode:( move 4 , 2 ; move ul - ua , 8 ) 
[12570] c:0 is:( move ua + ul , 4 ; move 4 , 4 * 4 )  decode:( move ua + ul , 4 ; move ua , 6 ) 
[12571] c:0 is:( move ul , 2 / 4 ; move 4 + 4 , ul )  decode:( move ul , ul ; move ua + 2 , 7 ) 
[12572] c:0 is:( move 5 , 3 / ua - 3 ; move ua , 4 )  decode:( move 5 , ul ; move ua , 4 ) 
[12573] c:0 is:( move ua , 4 * 3 ; move ua , 4 * 4 )  decode:( move ua , 6 ; move ua , 9 ) 
[12574] c:0 is:( move 4 , 4 * 3 ; move ua - ul , 4 )  decode:( move 4 , 3 * 4 ; move ua , 4 ) 
[12575] c:0 is:( move 3 , 4 / 3 ; move ul - ua , 4 )  decode:loop 0 , 3 , move 3 , 2 + 4 * 5 
[12576] c:0 is:( move 4 , 4 * 3 ; move ul - ua , 4 )  decode:( move 4 , 3 * 4 ; move 5 , ul ) 
[12577] c:0 is:( move 4 , ul / 4 ; move ua + 3 , 4 )  decode:( move 4 , 4 / move 9 , 4 ) 
[12578] c:0 is:( move 4 , ul / 4 ; move 2 - ua , 4 )  decode:( move 4 , ul / 4 ; move 4 , ul ) 
[12579] c:0 is:( move ul , 4 / 3 ; move ua + 4 , 4 )  decode:( move ul , 4 / move ua + 3 , 4 ) 
[12580] c:0 is:( move 9 , 2 ; move ua + 2 , ua / 3 )  decode:( move 9 , 2 ; move ua + 2 , 2 ) 
[12581] c:0 is:( move 2 - 9 , 4 ; move ua + 2 , ul )  decode:( move ua + ul , 4 ; move 8 , ul ) 
[12582] c:0 is:( move ua + ul , 4 ; move 4 , 4 / 3 )  decode:( move ua , 4 ; move 4 , 3 / 2 ) 
[12583] c:0 is:( move 3 , ua / 4 ; move 4 * 2 , ul )  decode:( move 3 , 4 / 4 ; move 2 , ul ) 
[12584] c:0 is:( move 4 , 3 / 7 ; move 0 - ua , ul )  decode:( move 4 , 3 / ua ; move ua , ul ) 
[12585] c:0 is:( move 3 , 4 / ua ; move ua , 4 * 3 )  decode:loop 0 , 4 , move 2 , v0 / 4 
[12586] c:0 is:( move 3 , 4 * 4 ; move ua - ul , 4 )  decode:( move 3 , 0 - 4 ; move ua , 4 ) 
[12587] c:0 is:( move 4 - ua , 4 ; move ua , 4 / 3 )  decode:( move ua , 0 - 4 ; move 2 , 4 ) 
[12588] c:0 is:( move 2 , 4 / ua ; move ua , 4 / 3 )  decode:( move ua , 2 ; move 2 , 3 / 2 ) 
[12589] c:0 is:( move 3 , ul + 9 ; move ua , 4 + 2 )  decode:loop 0 , ua , move ua - 4 , ul / ua 
[12590] c:0 is:( move 4 , 4 ; move ul - ua , 4 * 3 )  decode:( move 4 , 4 ; move 5 , 9 ) 
[12591] c:0 is:( move 3 - ua , 9 * 2 ; move ua , 2 )  decode:( move 3 , 0 - 4 ; move ua , 2 ) 
[12592] c:0 is:( move 5 , 9 + 2 ; move ua + ul , 2 )  decode:( move 5 , 2 * 9 ; move ua , 2 ) 
[12593] c:0 is:( move 2 - 5 , ul / 3 ; move ua , 4 )  decode:( move 3 , 4 * 4 ; move ua , ul ) 
[12594] c:0 is:( move 4 - ua , 4 / ua ; move 3 , 4 )  decode:loop 0 , 3 , move v0 - 3 , 2 / 3 
[12595] c:0 is:( move ua + ul , 4 * 4 ; move 4 , 4 )  decode:( move ua + ul , 4 ; move 4 , 4 ) 
[12596] c:0 is:( move ua , ul / 4 ; move 3 , 2 / 3 )  decode:loop 0 , 4 , move ua - 4 , v0 / ua 
[12597] c:0 is:( move ua , 3 / 4 ; move 4 - ua , 4 )  decode:( move ua , 4 / 3 ; move 2 , ul ) 
[12598] c:0 is:( move 4 , ua / 4 ; move ua + 4 , 4 )  decode:( move 4 , 0 - 9 ; move 9 , 4 ) 
[12599] c:0 is:( move 3 , 4 * 4 ; move ua , 3 / ua )  decode:loop 0 , 2 , move 2 - ua , 2 / 9 
[12600] c:0 is:( move 3 - ua , ul ; move 4 , 4 * 4 )  decode:( move 3 , 4 ; move 4 , 2 / 4 ) 
[12601] c:0 is:( move ua , ul / 3 * 4 ; move 4 , 2 )  decode:( move ua , 0 ; move 4 , 2 ) 
[12602] c:0 is:( move ua + ul , 4 ; move 3 , 7 + 4 )  decode:( move ua + ul , 4 ; move 3 , 8 ) 
[12603] c:0 is:( move ua , ul / 3 ; move 4 , 2 / 3 )  decode:( move 5 , 4 / ua ; move 4 , 7 ) 
[12604] c:0 is:( move 5 , ul / 3 ; move ua + 3 , 4 )  decode:( move 5 , 2 / 9 ; move 9 , 4 ) 
[12605] c:0 is:( move ua , 2 / ua ; move 4 , 4 * 4 )  decode:( move 4 , 2 / 4 ; move ua , 3 ) 
[12606] c:0 is:( move 4 , 4 ; move ua + ul , 4 * 4 )  decode:( move 4 , 0 - 2 ; move 4 , 9 ) 
[12607] c:0 is:( move ua , 9 + 4 ; move ua + 2 , 4 )  decode:( move ua , 3 / ua ; move 8 , 4 ) 
[12608] c:0 is:( move 3 , 4 * 3 ; move ul - ua , 5 )  decode:( move 3 , 3 * 4 ; move 5 , 2 ) 
[12609] c:0 is:( move 3 , 6 ; move ua + ul , 4 * 3 )  decode:( move 3 , 3 - move ua , 3 - 9 ) 
[12610] c:0 is:( move 4 , 3 / 4 ; move 3 - ua , ul )  decode:( move 0 - 4 , 4 ; move 3 , ul ) 
[12611] c:0 is:( move ua + 3 , 5 ; move 4 , ua / 4 )  decode:( move 9 , 5 ; move 4 , ua / 4 ) 
[12612] c:0 is:( move 3 - ua , 4 ; move 4 , ua / 4 )  decode:( move 3 , 4 ; move 4 , 3 + 8 ) 
[12613] c:0 is:( move ul - ua , 4 ; move 3 , 4 / 3 )  decode:( move 3 , 9 / 4 ; move 5 , 5 ) 
[12614] c:0 is:( move 3 , 4 / 3 ; move ua - ul , 4 )  decode:( move 3 , ul ; move 5 , 0 - 4 ) 
[12615] c:0 is:( move 5 , 4 * 4 ; move ua - ul , 2 )  decode:( move 5 , 4 * 4 ; move ua , 2 ) 
[12616] c:0 is:( move 9 , 6 ; move ua + ul , 0 - 2 )  decode:( move 0 - 0 - 2 ; move 9 , 2 ) 
[12617] c:0 is:( move 4 , 2 / 4 ; move 4 , ua * ua )  decode:( move 4 , 2 / 4 ; move 4 , 8 ) 
[12618] c:0 is:( move ua , 3 / ua ; move 3 , 4 / 3 )  decode:( move 3 , 5 ; move ua , 5 ) 
[12619] c:0 is:( move 4 , 3 / 4 + 4 ; move ua , ul )  decode:( move 4 , 9 + 4 ; move ua , ul ) 
[12620] c:0 is:( move 4 , 3 / 2 ; move ua , ua / 4 )  decode:( move ua , 6 ; move 4 , ua / 4 ) 
[12621] c:0 is:( move 4 , 4 + 4 / ua ; move ua , 4 )  decode:( move 4 , 9 + 2 ; move ua , 4 ) 
[12622] c:0 is:( move 9 , ua / 3 ; move ua , 0 - 3 )  decode:( move 9 , ua / 4 ; move ua , 3 ) 
[12623] c:0 is:( move 4 , ul - 9 ; move ua + 2 , 2 )  decode:( move 4 , 9 / ul ; move 8 , 2 ) 
[12624] c:0 is:( move 4 , ul / 3 ; move 4 + 3 , ul )  decode:( move 4 , 9 / ua ; move ua , ul ) 
[12625] c:0 is:( move 3 - ua , ul ; move 4 , 4 / 3 )  decode:( move 3 , ul ; move 4 , 0 - 8 ) 
[12626] c:0 is:( move 4 , 4 / ua ; move ua , 3 / 2 )  decode:( move 4 , 4 / ua ; move ua , 9 ) 
[12627] c:0 is:( move 9 , 0 - 3 ; move ua - ul , 4 )  decode:( move 9 , 0 - 3 ; move 5 , 4 ) 
[12628] c:0 is:( move 4 + ua , 4 / ua ; move 4 , 4 )  decode:( move ua + 4 , ua / 2 , 4 / 0 v0 0 0 0 0 / 0 
[12629] c:0 is:( move 4 , 3 ; move ua - ul , 4 / 3 )  decode:( move 4 , 3 ; move 5 , 4 / 3 ) 
[12630] c:0 is:( move 5 , 2 / 6 ; move ua + ul , 2 )  decode:loop 0 , 3 , move 4 , 9 + v0 
[12631] c:0 is:( move ua , 4 * 3 ; move 3 , ua / 4 )  decode:( move 3 , 4 ; move ua , ua / 4 ) 
[12632] c:0 is:( move ua , ul / 2 - 4 ; move 4 , 4 )  decode:( move ua , 4 * 3 ; move 4 , 4 ) 
[12633] c:0 is:( move 9 , 3 + 2 ; move ul + ua , 4 )  decode:( move ua + 3 , 3 ; move ua , 4 ) 
[12634] c:0 is:( move 4 , 4 * ua * ua ; move 5 , 2 )  decode:( move 4 , 5 / 3 ; move 5 , 2 ) 
[12635] c:0 is:( move ua + ul , 4 / 3 ; move 4 , 4 )  decode:( move ua + ul , 4 / 3 , 4 - v) 0 
[12636] c:0 is:( move ul - ua , 2 / 4 ; move 4 , 4 )  decode:( move 5 , 2 * 5 ; move 4 , ul ) 
[12637] c:0 is:( move 4 , 0 - 9 ; move 3 , ua * ua )  decode:( move 4 , 0 - 9 ; move 3 , 8 ) 
[12638] c:0 is:( move 5 , ul / 4 ; move 3 - ua , 2 )  decode:( move 5 , ul / 4 ; move 4 , 2 ) 
[12639] c:0 is:( move 3 , 4 * 4 ; move ul - ua , 4 )  decode:( move 3 , 4 * 4 ; move 5 , 7 ) 
[12640] c:0 is:( move 3 , 2 / 4 ; move ua - ul , 5 )  decode:( move 3 , 4 / 4 ; move 5 , 5 ) 
[12641] c:0 is:( move 4 - ua , 4 / 3 ; move ua , 4 )  decode:( move 3 , 0 - 2 ; move ua , ul ) 
[12642] c:0 is:( move 9 , 4 + 3 ; move ua + ul , 2 )  decode:( move 9 , 4 / 3 ; move ua , 2 ) 
[12643] c:0 is:( move ua , 2 / 3 ; move 5 , ua / 3 )  decode:( move ua , 4 / 3 ; move 5 , 2 ) 
[12644] c:0 is:( move 4 , 0 - 9 ; move ua + ul , 4 )  decode:( move 4 , 0 - 9 ; move 7 , 4 ) 
[12645] c:0 is:( move 4 , 4 * 3 ; move 4 , ua * ua )  decode:loop 0 , 2 , move 4 , 4 * 3 / 2 
[12646] c:0 is:( move ul - ua , 3 ; move 5 , 4 * 3 )  decode:( move ul - ua , 3 ; move 5 , 7 ) 
[12647] c:0 is:( move ua , ua / 2 ; move 4 , 4 / 3 )  decode:( move 4 , 4 / 3 ; move ua , 5 ) 
[12648] c:0 is:( move 4 , ul ; move ua - 3 , 4 / 3 )  decode:( move 3 , ul ; move 4 , 4 / 3 ) 
[12649] c:0 is:( move 4 , 4 ; move ua - ul , 2 / 4 )  decode:( move 4 , 4 ; move 5 , 4 / ua ) 
[12650] c:0 is:( move 5 , 3 / 4 ; move ul - ua , 2 )  decode:( move 5 , 4 / 3 ; move 5 , 2 ) 
[12651] c:0 is:( move 4 , ua * ua ; move 4 , 4 * 3 )  decode:( move 3 , 0 - 2 ; move 4 , 7 ) 
[12652] c:0 is:( move 3 , 4 + 3 ; move ua + ul , 8 )  decode:( move 3 , 4 / 3 ; move ua , 8 ) 
[12653] c:0 is:( move 9 , 2 - 3 ; move ua - ul , 2 )  decode:( move ua + 3 , 2 ; move 5 , 2 ) 
[12654] c:0 is:( move 5 , 2 / 4 ; move ua + ul , 4 )  decode:( move 5 , ua / 4 ; move 8 , 4 ) 
[12655] c:0 is:( move 4 , 4 * 4 ; move ua + ul , 4 )  decode:( move 4 , 4 * 4 ; move ua , 4 ) 
[12656] c:0 is:( move ua , 4 * 3 ; move ua + 2 , 8 )  decode:( move ua , 2 * 9 ; move 8 , 8 ) 
[12657] c:0 is:( move 4 , 2 / 3 ; move ua , ul / 3 )  decode:( move ua , 4 ; move 4 , ul / 4 ) 
[12658] c:0 is:( move 4 , 9 ; move ua + ul , 0 - 4 )  decode:( move 8 , ua * ua ; move 4 , 4 ) 
[12659] c:0 is:( move 4 , ua / 3 ; move ua , 2 / 4 )  decode:( move 4 , 2 ; move ua , 4 / ua ) 
[12660] c:0 is:( move 4 , 4 * 4 ; move ua , 2 / ua )  decode:( move ua , 2 / 5 ; move 4 , 7 ) 
[12661] c:0 is:( move 9 , 3 ; move ua - ul , 0 - 4 )  decode:( move 4 , 9 ; move 5 + 3 , 4 ) 
[12662] c:0 is:( move ul - ua , 5 ; move 3 , 3 * 4 )  decode:( move ul - ua , 5 ; move 4 , 7 ) 
[12663] c:0 is:( move ua + ul , 2 / 4 ; move 5 , 4 )  decode:( move ua + ul , 3 / ; move ua , 4 ) 
[12664] c:0 is:( move 0 - 8 , 3 ; move ua , ul / 4 )  decode:( move ua + ul , ul ; move 8 , 4 ) 
[12665] c:0 is:( move 0 - 3 , 9 ; move ua , ua / 4 )  decode:( move 3 , 9 ; move ua , 9 + 4 ) 
[12666] c:0 is:( move 4 , 4 * 4 ; move 4 - ua , ul )  decode:loop 0 , 4 , move v0 , 0 - 8 
[12667] c:0 is:( move ua , 9 * 3 ; move ua + 2 , 4 )  decode:( move ua , ul ; move 8 , 4 ) 
[12668] c:0 is:( move 5 , 2 / 4 ; move ul - ua , 4 )  decode:( move 5 , 9 / ua ; move 5 , 4 ) 
[12669] c:0 is:( move ua , 4 * 9 ; move ua + 3 , 2 )  decode:( move ua , 9 + 4 ; move 9 , 2 ) 
[12670] c:0 is:( move 4 , 6 ; move ul - ua , 3 / 2 )  decode:( move 4 , 6 ; move ua - ul , 8 ) 
[12671] c:0 is:( move 4 , 9 ; move ul - ua , 0 - 4 )  decode:( move ul - ua , ul ; move 4 , 4 ) 
[12672] c:0 is:( move 4 , 4 * 4 ; move ua - ul , 4 )  decode:( move 4 , 4 * 4 ; move 5 , 4 ) 
[12673] c:0 is:( move ua , 4 / 3 ; move ua , 4 * 4 )  decode:( move ua , 3 / 2 ; move ua , 3 ) 
[12674] c:0 is:( move 4 , 0 - 9 ; move ua - ul , 4 )  decode:( move 4 , 0 - 9 ; move 5 , 4 ) 
[12675] c:0 is:( move 5 , 2 / 4 ; move ua - ul , 4 )  decode:( move 5 , 9 / ua ; move 5 , 4 ) 
[12676] c:0 is:( move 3 , 4 / 3 ; move ua , ua / 4 )  decode:( move ua , ua / 3 ; move ua , 3 ) 
[12677] c:0 is:( move 4 , 4 * 4 ; move 4 , ua * ua )  decode:( move 4 , 0 - 4 ; move 4 , 5 ) 
[12678] c:0 is:( move 9 , 4 + 3 ; move ua - ul , 2 )  decode:( move 9 , 4 + 3 ; move 5 , 2 ) 
[12679] c:0 is:( move ua , ul / 4 ; move 3 * 3 , 4 )  decode:( move ua , ul / 4 ; move 9 , 4 ) 
[12680] c:0 is:( move 4 , 4 ; move ul - ua , 3 / 4 )  decode:( move 4 , 4 ; move ul - ua , 7 ) 
[12681] c:0 is:( move 3 , 6 ; move ua + ul , 4 / 3 )  decode:( move 3 , 6 ; move ua , 4 / 3 ) 
[12682] c:0 is:( move 5 , 4 * 4 ; move ua + ul , 4 )  decode:( move 5 , 0 - 4 ; move 7 , 4 ) 
[12683] c:0 is:( move ua , 0 - 9 ; move ua , 4 * 4 )  decode:loop 0 , 2 , move ua , 4 * 4 
[12684] c:0 is:( move 9 , ua * ua ; move 4 + 3 , 2 )  decode:( move 9 , ua * ua ; move ua , 2 ) 
[12685] c:0 is:( move 4 , 4 * 3 ; move ua , ua / 4 )  decode:( move ua , ul ; move 4 , ua / 4 ) 
[12686] c:0 is:( move ua - ul , 4 ; move 4 , 4 / 3 )  decode:( move ua , 4 ; move 4 , 4 / 3 ) 
[12687] c:0 is:( move 3 + 4 , 9 ; move 2 - ua , ul )  decode:( move ua + ul , 9 ; move 5 , 2 ) 
[12688] c:0 is:( move 4 , 4 / 3 ; move ul - ua , 4 )  decode:( move 4 , 4 / 3 ; move 5 , ul ) 
[12689] c:0 is:( move 4 , ua / 3 ; move ua , 3 / 4 )  decode:( move 4 , 3 / 2 ; move ua , 7 ) 
[12690] c:0 is:( move ua , 4 * 3 ; move 4 , ua / 4 )  decode:( move 4 , 4 ; move ua , 3 / 2 ) 
[12691] c:0 is:( move ua , ua / 3 ; move 4 , 4 * 4 )  decode:( move 4 , 0 - 4 ; move ua , 9 ) 
[12692] c:0 is:( move 5 , 4 * 3 ; move ua - ul , 4 )  decode:( move 5 , 3 * 4 ; move 5 , 4 ) 
[12693] c:0 is:( move 4 , 4 ; move ua - ul , 4 / 3 )  decode:( move 4 , ua / 4 ; move 4 , 5 ) 
[12694] c:0 is:( move 3 , 2 / 6 ; move ua - ul , 4 )  decode:( move 3 , 2 / 6 ; move 5 , 4 ) 
[12695] c:0 is:( move 3 , 4 / ua ; move ua , 4 * 4 )  decode:( move ua , ul ; move 3 , 4 * 4 ) 
[12696] c:0 is:( move ua , 3 / 9 ; move ua + 3 , 2 )  decode:( move ua , 9 / ua ; move 9 , 2 ) 
[12697] c:0 is:( move ua , ul / 4 ; move 3 , 2 / 4 )  decode:loop 0 , 4 , move ua - 4 , ul / ua 
[12698] c:0 is:( move 5 , 2 / 6 ; move 2 - ua , ul )  decode:( move 5 , 2 / 6 ; move 4 , 4 ) 
[12699] c:0 is:( move 2 , ul / 6 ; move 4 + 3 , ul )  decode:( move 2 , ul / 4 ; move 7 , ul ) 
[12700] c:0 is:( move 4 , 9 ; move ua + ul , 2 - 3 )  decode:( move ua , 9 ; move ua - 2 , ul ) 
[12701] c:0 is:( move 3 , 4 ; move ul - ua , 4 + 7 )  decode:( move 3 , 4 ; move ua - ul , 8 ) 
[12702] c:0 is:( move 5 , 3 ; move ua - ul , 4 / 3 )  decode:( move 5 , 3 ; move 5 , 4 / 3 ) 
[12703] c:0 is:( move ua + 2 , 9 ; move 4 , ua - 4 )  decode:( move 4 , ua * ua ; move 4 , 4 ) 
[12704] c:0 is:( move ua , ul / 4 ; move 3 , 4 * 3 )  decode:( move 3 , 9 ; move ua , 3 / 2 ) 
[12705] c:0 is:( move 9 , 4 ; move ua + 2 , ua - 4 )  decode:( move ua + 3 , 3 ; move 2 , 4 ) 
[12706] c:0 is:( move 3 - ua , 4 ; move 5 , ua / 4 )  decode:( move 3 , 4 ; move ua - ul , 8 ) 
[12707] c:0 is:( move 2 - ua , 9 ; move ua , 2 / 3 )  decode:loop 0 , 3 , move 4 , 9 + v0 
[12708] c:0 is:( move ua , 4 / ua ; move 4 , 2 / 4 )  decode:loop 0 , 3 , move 3 , 4 /  / 4 
[12709] c:0 is:( move 4 , 0 - 9 ; move ua + ul , 5 )  decode:( move 4 , 0 - 9 ; move 7 , 5 ) 
[12710] c:0 is:( move 9 , 3 / ua ; move ua , 0 - 4 )  decode:( move ua , 6 ; move ua + 3 , 4 ) 
[12711] c:0 is:( move ua , 2 / 4 ; move 4 , 4 / ua )  decode:loop 0 , 3 , move 3 + v0 , ua / ua 
[12712] c:0 is:( move ua , 4 / ua ; move 3 , 4 / 3 )  decode:( move 3 , 5 ; move ua , ua * ua ) 
[12713] c:0 is:( move 5 , 2 / ua ; move ua , 4 * 4 )  decode:loop 0 , 2 , move 0 - ua , 4 * 4 
[12714] c:0 is:( move 5 , 4 / 3 ; move ua + ul , 4 )  decode:( move 5 , 4 / 3 ; move ua , 4 ) 
[12715] c:0 is:( move 3 , 4 / 3 ; move ul - 4 , ul )  decode:( move 3 , 4 / 5 ; move 3 , 4 ) 
[12716] c:0 is:( move 4 , 2 / 3 ; move ua , ul / 4 )  decode:( move ua , 4 ; move 3 , ul + 4 ) 
[12717] c:0 is:( move 4 , 4 * 4 ; move ul - ua , 4 )  decode:( move 4 , 4 * 4 ; move 5 , ul ) 
[12718] c:0 is:( move 3 , 9 / 2 ; move ua + ul , 2 )  decode:( move 3 , 2 - 9 ; move 8 , 2 ) 
[12719] c:0 is:( move 3 - ua , 9 ; move ua + 2 , 5 )  decode:( move 4 , 9 ; move ua + 2 , 5 ) 
[12720] c:0 is:( move ul - ua , 4 ; move 4 , 4 / 3 )  decode:( move 4 , 4 ; move 5 , 0 - ua ) 
[12721] c:0 is:( move ua , ul / 4 ; move 4 , 2 / 3 )  decode:loop 0 , 4 , move 4 - ua , 2 / 4 
[12722] c:0 is:( move ua , 9 + 4 ; move ua , 3 + 4 )  decode:loop 0 , 3 , move 4 , 4 + 4 / 9 
[12723] c:0 is:( move ua , 4 / ul - 4 ; move 3 , 4 )  decode:( move ua , 5 ; move 3 , 4 ) 
[12724] c:0 is:( move ua - ul , 9 ; move 3 , 2 - 3 )  decode:( move ua - ul , 9 ; move 5 , ul ) 
[12725] c:0 is:( move 4 , 0 - 9 ; move ul - ua , 4 )  decode:( move 4 , 0 - 9 ; move 5 , ul ) 
[12726] c:0 is:( move 4 , ua / 3 ; move ua , 4 / 3 )  decode:( move 4 , ul / 4 ; move 4 , 5 ) 
[12727] c:0 is:( move ua , 4 * 4 ; move ua , 4 / 3 )  decode:( move ua , ua / 4 ; move ua , 5 ) 
[12728] c:0 is:( move 3 , 3 / 4 ; move ua , ua / 4 )  decode:loop 0 , 3 , move 3 , 4 / 4 
[12729] c:0 is:( move 3 , 4 / ua ; move ua , 4 / 3 )  decode:( move ua , ua / 3 ; move 3 , 8 ) 
[12730] c:0 is:( move ua , 4 * 8 ; move ua + 2 , 4 )  decode:( move ua , 4 / 7 ; move 8 , 4 ) 
[12731] c:0 is:( move 4 , 4 / 3 ; move 4 - ua , ul )  decode:( move 3 , 4 / 3 ; move 3 , 4 ) 
[12732] c:0 is:( move ul - 4 , 8 ; move ua + 2 , 4 )  decode:( move 3 , 2 - move 8 , 2 - 3 ) 
[12733] c:0 is:( move 4 , ul / 4 ; move 3 , ul - 3 )  decode:( move 3 , 4 / 6 ; move 4 , 2 ) 
[12734] c:0 is:( move 9 , 4 + 3 ; move ua , ua - 3 )  decode:( move ua , 3 / 2 ; move 9 , 3 ) 
[12735] c:0 is:( move 4 , ul / 4 ; move ua , 2 / 3 )  decode:( move 4 , 4 / 3 ; move ua , 7 ) 
[12736] c:0 is:( move 4 , 3 / 4 ; move ul - ua , 4 )  decode:( move 4 , 4 / 5 ; move 5 , 4 ) 
[12737] c:0 is:( move 2 - ua , 3 / 9 ; move ua , 2 )  decode:( move 4 , 4 * 4 ; move ua , 2 ) 
[12738] c:0 is:( move 4 , ul + ua / 4 ; move 4 , 4 )  decode:( move 4 , ua / 4 ; move 4 , 4 ) 
[12739] c:0 is:( move 6 , 4 * ua ; move ua , 3 / 2 )  decode:( move ua , 0 ; move ua , ua / 4 ) 
[12740] c:0 is:( move ul - ua , 4 * 4 ; move 4 , 4 )  decode:( move 5 , 2 / 4 ; move 4 , ul ) 
[12741] c:0 is:( move 4 , 4 ; move 4 - ua , ua / 4 )  decode:( move 4 , 4 ; move 3 , ua / 4 ) 
[12742] c:0 is:( move 3 , 9 ; move ul - ua , 2 - 3 )  decode:( move 3 , 9 ; move ua - ua , ul ) 
[12743] c:0 is:( move 4 , 4 ; move ul - ua , 4 / 3 )  decode:( move 4 , 4 ; move 5 , 0 - 5 ) 
[12744] c:0 is:( move 4 , ul / ua ; move 3 , 4 * 3 )  decode:( move 3 , 9 ; move 4 , 4 / ua ) 
[12745] c:0 is:( move 3 , 2 + 9 ; move ua - ul , 4 )  decode:( move 3 , 2 * 9 ; move 5 , 4 ) 
[12746] c:0 is:( move 3 , ul / 9 ; move ua + 2 , 2 )  decode:( move 3 , ul / 4 ; move 8 , 2 ) 
[12747] c:0 is:( move ua , 3 / ua ; move 4 , 4 / 3 )  decode:( move 4 , ua * ua ; move ua , 5 ) 
[12748] c:0 is:( move 4 / 3 , ul ; move 4 , 2 / ua )  decode:( move ul , ul ; move 4 , 2 / ua ) 
[12749] c:0 is:( move ua , 4 / 3 ; move 3 , 4 / ua )  decode:( move 3 , 7 ; move ua , 2 / 7 ) 
[12750] c:0 is:( move 4 , 2 / 6 ; move ua - ul , 3 )  decode:loop 0 , 2 , move 0 - 4 , 0 - 3 
[12751] c:0 is:( move ua , 6 + 4 ; move 3 , ua / 4 )  decode:( move 3 , 2 ; move ua , ua / 4 ) 
[12752] c:0 is:( move 9 , 2 - 3 ; move ua + ul , 4 )  decode:( move 8 , 0 - 2 ; move ua , 4 ) 
[12753] c:0 is:( move 9 , 0 - 3 ; move ua , ua / 4 )  decode:loop 0 , 3 , move 0 - 4 , 5 / 4 
[12754] c:0 is:( move 9 , 3 / 2 ; move ua + ul , 2 )  decode:( move 9 , 3 / 2 ; move ua , 2 ) 
[12755] c:0 is:( move 4 - 9 , 3 ; move ua + ul , 2 )  decode:( move 5 , 0 ; move ua + ul , 2 ) 
[12756] c:0 is:( move ua , 5 / 3 ; move ua , 5 * 3 )  decode:( move 0 - ua , 4 ; move ua , 7 ) 
[12757] c:0 is:( move ua , 4 / 9 ; move ua + 3 , 2 )  decode:( move ua , 9 / ua ; move 9 , 2 ) 
[12758] c:0 is:( move 4 , ua / 4 ; move ua , 3 / 4 )  decode:( move 4 , 3 / 4 ; move ua , 7 ) 
[12759] c:0 is:loop 0 , 3 , move ua + v0 , ul + v0  decode:loop 0 , 3 , move ua + v0 , ul + ul 
[12760] c:0 is:( move 5 , ul / 3 ; move 4 - ua , 4 )  decode:( move 5 , 2 / 4 ; move 3 , ul ) 
[12761] c:0 is:( move ua , 4 * 4 ; move 4 , ua / 4 )  decode:loop 0 , 3 , move 3 - ua , ua / 4 
[12762] c:0 is:( move 4 , 5 / 4 ; move 3 - ua , ul )  decode:( move 4 , 4 / 4 ; move 4 , 4 ) 
[12763] c:0 is:( move 5 , 4 * 4 ; move ua - ul , 4 )  decode:loop 0 , 3 , move 3 - ua , v0 - 5 
[12764] c:0 is:( move 4 , 4 / ua ; move ua , 4 / 3 )  decode:( move 0 - ua , 2 ; move 4 , 5 ) 
[12765] c:0 is:( move ua , 4 + 6 ; move 4 , ua / 4 )  decode:( move 4 , ua / 5 ; move ua , 8 ) 
[12766] c:0 is:( move 9 , 4 * 3 ; move ua + ul , 2 )  decode:( move 9 , ua * ua ; move ua , 2 ) 
[12767] c:0 is:( move ua , 4 / ua / 3 ; move 4 , 4 )  decode:( move 0 - ua , 5 ; move 4 , 4 ) 
[12768] c:0 is:( move 4 , ua / 5 ; move ua , 4 * 3 )  decode:loop 0 , 3 , move 3 - ua , 7 - 9 
[12769] c:0 is:( move ul , 9 ; move ua + 3 , 4 + 4 )  decode:( move 2 , 9 ; move ua + 3 , 4 ) 
[12770] c:0 is:( move 9 , 3 / ua ; move ua + 2 , 4 )  decode:( move 9 , 3 / ua ; move 8 , 4 ) 
[12771] c:0 is:( move 3 , 2 - 9 ; move ua , 3 / ua )  decode:( move ua , 9 ; move 3 , 4 * 3 ) 
[12772] c:0 is:( move ul - ua , 9 ; move 4 , 2 - 3 )  decode:( move 4 , 8 ; move 5 , 2 ) 
[12773] c:0 is:( move ua , 9 + ul ; move 3 , 2 / 3 )  decode:loop 0 , 2 , move v0 - ua , 4 / ua 
[12774] c:0 is:( move ua , ul / 9 ; move 4 + 2 , 2 )  decode:( move ua , ul / 6 ; move 6 , 2 ) 
[12775] c:0 is:( move 4 , 4 / ua ; move ua , 3 / 4 )  decode:( move 4 , 7 ; move ua , 7 ) 
[12776] c:0 is:( move 9 , 4 + 3 ; move ua + ul , 4 )  decode:( move 9 , 3 + move 9 , 4 ) 
[12777] c:0 is:( move 4 , 9 / 2 ; move ua + ul , 2 )  decode:loop 0 , 4 , move v0 * 3 , 4 / 3 
[12778] c:0 is:( move 3 , 4 - 9 ; move ul - ua , 2 )  decode:( move 3 , 4 / 3 ; move 5 , ul ) 
[12779] c:0 is:( move ua , 9 / 4 ; move 2 - ua , 2 )  decode:( move 4 , 0 - 4 ; move 5 , ul ) 
[12780] c:0 is:( move 4 , 2 + 9 ; move 4 , ua * ua )  decode:( move 4 , 9 + 2 ; move 4 , 8 ) 
[12781] c:0 is:( move 3 , ul / ua ; move 4 , 4 / 3 )  decode:loop 0 , 2 , move 3 , v0 + 4 
[12782] c:0 is:( move ua , ul - 9 ; move 3 + 3 , 4 )  decode:( move ua , 9 / ua ; move ua , 4 ) 
[12783] c:0 is:( move 4 , 9 ; move ul - ua , 4 + 2 )  decode:( move 4 , 9 ; move 5 , 3 ) 
[12784] c:0 is:( move ua , 4 / 3 ; move 4 , ua / 4 )  decode:( move 4 , 6 ; move ua , 3 / 2 ) 
[12785] c:0 is:( move 9 , 3 ; move ua + 4 + ul , 4 )  decode:( move ua + 3 , 3 ; move 2 , 4 0 0 0 0 + 0 0 2 4 
[12786] c:0 is:( move ul - ua , 9 ; move 3 , 3 + 4 )  decode:( move 5 , 9 ; move 4 , 9 ) 
[12787] c:0 is:( move ua , 9 ; move 2 - ua , 2 / 4 )  decode:( move ua , 9 ; move 5 , 9 ) 
[12788] c:0 is:( move 3 - 9 , 4 ; move ua - ul , 2 )  decode:( move ul - ua , 4 ; move 5 , 2 ) 
[12789] c:0 is:( move 3 , 9 / 2 ; move ua - ul , 2 )  decode:( move 3 , ul - 9 ; move ua , 2 ) 
[12790] c:0 is:( move 4 , 9 ; move ul - ua , 2 - 3 )  decode:( move 4 , 9 ; move ua - ul , ul ) 
[12791] c:0 is:( move 9 , ua / 3 ; move ua + 2 , 4 )  decode:( move 9 , 2 ; move ua + 2 , 4 ) 
[12792] c:0 is:( move ua , 9 * 4 ; move ua + 2 , 4 )  decode:loop 0 , 3 , move v0 + ua , 4 
[12793] c:0 is:( move ua , ua / 4 ; move 4 , 4 * 4 )  decode:( move ua , ua * 5 ; move 5 , 3 ) 
[12794] c:0 is:( move 4 , 2 / 6 ; move ua - ul , 4 )  decode:( move 4 , 2 / 6 ; move 5 , 4 ) 
[12795] c:0 is:( move 4 , 2 - 9 ; move ua + ul , 4 )  decode:loop 0 , 4 , move v0 * 2 , 0 - 7 
[12796] c:0 is:( move 4 , 4 / 3 ; move ul - ua , 5 )  decode:( move 5 , 4 / 3 ; move 5 , 5 ) 
[12797] c:0 is:( move ua + ul , 2 / 4 ; move 7 , 4 )  decode:( move ua + ul , 2 ; move 7 , 4 ) 
[12798] c:0 is:( move ua - ul , 6 ; move 4 , 4 * 3 )  decode:( move 4 , 6 ; move ua , 4 / 4 ) 
[12799] c:0 is:( move 4 , 4 - 9 ; move ua + ul , 2 )  decode:loop 0 , 4 , move v0 * 2 , 0 - 2 
[12800] c:0 is:( move ua , 2 / 6 ; move ua , 4 / 3 )  decode:loop 0 , 2 , move ua - v0 , ua / 4 
[12801] c:0 is:( move 4 , 4 / 3 ; move ua , ua / 4 )  decode:( move ua , 6 ; move 4 , 3 / 2 ) 
[12802] c:0 is:( move 4 , 6 ; move ua + ul , 4 / 3 )  decode:( move 4 , 6 ; move ua , 4 / 3 ) 
[12803] c:0 is:( move 4 + 3 , ua - 9 ; move ua , 4 )  decode:( move ua , 0 - 9 ; move ua , 4 ) 
[12804] c:0 is:( move 9 , 4 / 3 ; move 0 - ua , ul )  decode:loop 0 , 3 , move v0 + ua , 0 - 3 
[12805] c:0 is:( move 4 , 3 / 4 ; move ua , ul / 3 )  decode:( move 9 , 0 - 2 ; move 4 , 7 ) 
[12806] c:0 is:( move 9 , ua - 4 / ua ; move 2 , 2 )  decode:( move 2 , 4 ; move 9 , 2 ) 
[12807] c:0 is:loop 0 , 2 , move v0 - ua , v0 + ul  decode:( move 0 - ua , ul ; move 5 , 2 ) 
[12808] c:0 is:( move 9 , 0 - 9 ; move ua + ul , 2 )  decode:( move 9 , 0 - 9 ; move ua , 2 ) 
[12809] c:0 is:loop 0 , 3 , move ua - v0 , ul + v0  decode:loop 0 , 3 , move ua / v0 , ul + ul 
[12810] c:0 is:( move ua , ul / 4 ; move 4 , 4 / 3 )  decode:( move 4 , 9 + 2 ; move ua , 8 ) 
[12811] c:0 is:( move ua , ul / 4 ; move 4 , 4 * 4 )  decode:loop 0 , 3 , move 3 , 4 * 4 
[12812] c:0 is:( move ua , 9 * 3 ; move ua , 3 * 3 )  decode:( move ua , 2 ; move ua , 9 ) 
[12813] c:0 is:( move 5 , 5 / 4 ; move ua + ul , 4 )  decode:( move ua , 4 / 5 ; move ua , 4 ) 
[12814] c:0 is:( move 5 , 4 / 5 ; move ua , ua - 4 )  decode:( move ua , 0 ; move 5 , 4 ) 
[12815] c:0 is:( move 9 , 3 / 4 ; move ua + ul , 2 )  decode:( move 9 , 4 + 3 ; move ua , 2 ) 
[12816] c:0 is:( move ua , ua / 4 ; move 3 + 8 , 4 )  decode:( move ua , ua / 4 ; move 4 , 4 + ) 4 
[12817] c:0 is:( move 4 , 2 / 6 ; move ua , 4 / ua )  decode:( move ua , 2 / ua ; move 4 , 9 ) 
[12818] c:0 is:( move 4 , 2 / 6 ; move ua , ua / 4 )  decode:( move ua , 5 ; move 4 , ua / 9 ) 
[12819] c:0 is:( move 9 , 4 * 4 ; move ua + ul , 2 )  decode:( move 9 , 4 * 4 ; move ua , 2 ) 
[12820] c:0 is:( move 5 , 2 / 6 ; move ua , ua / 3 )  decode:( move 5 , 9 + 4 ; move ua , 2 ) 
[12821] c:0 is:( move 9 , 2 / 2 ; move 4 , ua * ua )  decode:( move 9 , ul ; move 4 , ua * ua ) 
[12822] c:0 is:( move 4 , 4 * 9 ; move ua + ul , 2 )  decode:loop 0 , 4 , move 3 , v0 - 4 
[12823] c:0 is:loop 0 , 3 , move v0 - ua , ul + v0  decode:loop 0 , 3 , move 0 - 4 , v0 + ul 
[12824] c:0 is:( move 9 , 4 / 3 ; move ua + ul , 2 )  decode:( move 9 , 4 / 3 ; move ua , 2 ) 
[12825] c:0 is:( move 3 - 8 , 4 / 2 ; move ua , ul )  decode:( move ul - ua , 2 ; move ua , ul ) 
[12826] c:0 is:( move 4 - ua , 9 ; move ua , 3 / 2 )  decode:( move ua , 4 * 5 ; move 2 , 8 ) 
[12827] c:0 is:( move 5 , ua / 3 ; move ua + 2 , 9 )  decode:( move 5 , 2 ; move 8 , 9 ) 
[12828] c:0 is:( move ua + ul , 9 ; move 4 , 3 / 2 )  decode:( move 4 , 9 ; move ua + ul , 8 ) 
[12829] c:0 is:( move ua , 9 / 4 ; move ua + 2 , 4 )  decode:( move ua + 2 , 0 ; move 9 , 4 ) 
[12830] c:0 is:( move 9 , 2 / 4 - ua ; move 2 , ul )  decode:( move 2 , 9 / 2 ; move 9 , ul ) 
[12831] c:0 is:( move 4 , ua / 9 ; move ua + 2 , 4 )  decode:( move 4 , 7 ; move ua + 2 , 4 ) 
[12832] c:0 is:( move 4 , ul / ua ; move 4 , 4 / 3 )  decode:loop 0 , 2 , move ua - 3 , ua / 4 
[12833] c:0 is:( move 4 , 2 - 9 ; move ua - ul , 4 )  decode:loop 0 , 3 , move 3 , v0 - 3 
[12834] c:0 is:( move 9 , ua / 6 ; move ua , 0 - 3 )  decode:( move 9 , ul ; move ua , 3 ) 
[12835] c:0 is:( move 5 , 4 / ua ; move ua , 4 * 4 )  decode:( move ua , ul ; move 5 , 9 ) 
[12836] c:0 is:( move 4 , 5 / 4 ; move ua - ul , 4 )  decode:( move 4 , 4 / 5 ; move 5 , 4 ) 
[12837] c:0 is:( move 4 , ua / 6 ; move ua , 3 * 4 )  decode:loop 0 , 2 , move 0 - 4 ,  ua / 4 
[12838] c:0 is:( move 9 , ul ; move 4 + 2 , ua / 3 )  decode:( move ua , ul ; move 9 , ua / 3 ) 
[12839] c:0 is:( move 9 , ua / 2 ; move ua , 4 + 4 )  decode:loop 0 , 4 , move 0 - 4 , ua / 4 
[12840] c:0 is:( move 5 , 4 / ua ; move ua , 4 / 3 )  decode:( move ua , 7 ; move 4 , 5 ) 
[12841] c:0 is:( move 4 , ul / 4 ; move ua , 4 / 3 )  decode:loop 0 , 3 , move 3 , v0 + 9 
[12842] c:0 is:( move ua , ul / 4 ; move 7 + 3 , 4 )  decode:( move ua , ul / 4 ; move 9 , 4 ) 
[12843] c:0 is:( move 9 , ua / 4 ; move ua + 2 , 4 )  decode:( move 9 , 3 / 2 ; move 9 , 4 ) 
[12844] c:0 is:loop 0 , 4 , move ua + v0 , v0 + ul  decode:loop 0 , 4 , move ua + ul , 0 - ul 0 ul 
[12845] c:0 is:( move ua , 2 / 8 ; move ua , 4 / 3 )  decode:loop 0 , 3 , move 4 , v0 - 9 
[12846] c:0 is:( move 9 , 3 / ua ; move ua , 3 * 3 )  decode:( move ua , 0 ; move 9 , 9 ) 
[12847] c:0 is:( move 9 , 2 / 4 ; move ua - 3 , ul )  decode:( move 9 , 4 + 3 ; move 4 , ul ) 
[12848] c:0 is:( move 9 , ua / 4 ; move ua + 3 , 4 )  decode:( move ua + ul , 3 / move 9 , 4 ) 
[12849] c:0 is:( move ua , 9 * 4 * 4 ; move ua , 2 )  decode:( move ua , 4 * 3 ; move ua , 2 ) 
[12850] c:0 is:( move ua , 4 / 5 ; move 4 , ua / 4 )  decode:( move ua , 7 ; move 4 , 3 + 8 ) 
[12851] c:0 is:( move 9 , ua / 4 ; move ua / 2 , 2 )  decode:( move 9 , 9 / 4 ; move 3 , 2 ) 
[12852] c:0 is:( move ul - ua , 9 ; move 3 , 4 * 3 )  decode:( move 3 , 2 * 5 ; move 5 , 9 ) 
[12853] c:0 is:( move 5 , 0 - ul / 9 ; move ua , 4 )  decode:( move 5 , 0 ; move ua , 4 ) 
[12854] c:0 is:( move ua , 4 * 9 ; move ua + 4 , 4 )  decode:loop 0 , 3 , move 4 + v0 , 0 - 4 
[12855] c:0 is:( move ua , 4 / 9 ; move ua + 3 , 4 )  decode:( move ua , 9 + 4 ; move 9 , 4 ) 
[12856] c:0 is:( move 4 , 9 / ua ; move ua - 4 , 2 )  decode:( move 4 , 3 / 2 ; move 3 , 2 ) 
[12857] c:0 is:( move 8 , 4 * 4 ; move ua + ul , 4 )  decode:loop 0 , 2 , move v0 - ua , 0 - 3 
[12858] c:0 is:( move 4 - 9 , 2 ; move ua - ul , 5 )  decode:( move ul - ua , 2 ; move 5 , 5 ) 
[12859] c:0 is:( move 9 , ul / 4 ; move ua + 2 , 4 )  decode:loop 0 , 3 , move 3 + 3 , v0 - 3 
[12860] c:0 is:( move ua + ul , 9 ; move 4 , 4 * 3 )  decode:( move ua , 9 ; move 5 , 4 * 3 ) 
[12861] c:0 is:( move 4 , 3 - 9 ; move 4 - ua , ul )  decode:( move 2 , 2 / 6 ; move 4 , 4 ) 
[12862] c:0 is:( move ua - 4 , 9 / 4 ; move ua , 2 )  decode:( move ua , 0 - 4 ; move 2 , 2 ) 
[12863] c:0 is:( move 4 , 4 + 9 ; move ua - ul , 4 )  decode:( move 4 , 3 / 2 ; move 5 , 4 ) 
[12864] c:0 is:( move 2 - 9 , 4 ; move ua , 4 / ua )  decode:( move ua , 4 ; move ua , 7 / 2 ) 
[12865] c:0 is:( move 4 , 4 / ua ; move 4 , ul / 4 )  decode:( move 4 , 4 ; move 4 , 6 ) 
[12866] c:0 is:( move 9 , 4 * 3 ; move ua + ul , 4 )  decode:loop 0 , 3 , move v0 * 3 , 0 - 4 
[12867] c:0 is:( move ua + ul , 2 / 6 ; move 7 , 4 )  decode:0 loop 0 , 2 , move ua + v0 - 2 0 
[12868] c:0 is:( move ua , ul / 6 ; move 4 , 4 * 4 )  decode:loop 0 , 3 , move 3 , 4 * 4 
[12869] c:0 is:( move 4 , ua / 2 ; move 9 , ua / 3 )  decode:( move 4 , 0 ; move 9 , ua / 3 ) 
[12870] c:0 is:( move 4 , ul / 6 ; move ua , 4 / 3 )  decode:( move 4 , ul - 9 ; move 4 , 5 ) 
[12871] c:0 is:loop 0 , 3 , move ua / v0 , v0 + ul  decode:( move ua , ul ; move 7 , 2 ) 
[12872] c:0 is:( move ua , ul / 5 ; move 5 , 4 * 4 )  decode:loop 0 , 3 , move 0 - 4 , 4 * 4 
[12873] c:0 is:loop 0 , 4 , move ul + v0 , ul - v0  decode:loop 0 , 3 , move 4 , v0 - 2 
[12874] c:0 is:loop 0 , 4 , move ul + v0 , v0 - ul  decode:loop 0 , 3 , move 3 - ua , 2 - v0 
[12875] c:0 is:( move 3 , 4 / 9 ; move 3 - ua , ul )  decode:( move 3 , 2 / 4 ; move 3 , 2 ) 
[12876] c:0 is:( move ua , ul / 6 ; move 4 , 4 / 3 )  decode:( move 4 , ul - 9 ; move ua , 7 ) 
[12877] c:0 is:( move 3 , 4 / 9 ; move ua + ul , 4 )  decode:( move 3 , 2 / 4 ; move 7 , 4 ) 
[12878] c:0 is:( move 9 / 4 , 0 ; move ua , ua / 5 )  decode:( move 4 - ua , 0 ; move ua , 5 ) 
[12879] c:0 is:( move 9 , 4 * 3 ; move ua , ua / 3 )  decode:( move 9 , 4 + 3 ; move ua , 2 ) 
[12880] c:0 is:( move 9 , 4 / 3 ; move ua + ul , 4 )  decode:loop 0 , 2 , move ua + 2 , 0 - 4 
[12881] c:0 is:( move 9 , ul / 3 ; move ua - 3 , 4 )  decode:( move 9 , ul / 3 ; move 3 , 4 ) 
[12882] c:0 is:( move 5 , 5 / 4 ; move ua , ua / 4 )  decode:( move ua , 6 ; move ua - ul , 8 ) 
[12883] c:0 is:( move 4 , ul - 9 ; move ua , 4 * 3 )  decode:( move ua , 7 ; move 4 , 7 - 7 ) 
[12884] c:0 is:loop 0 , 5 , move ua - v0 , v0 + ul  decode:loop 0 , 4 , move ua - v0 , 0 - 8 
[12885] c:0 is:( move 5 , 3 / 9 ; move ua - ul , 2 )  decode:( move 5 , 9 + 4 ; move 5 , 2 ) 
[12886] c:0 is:( move 4 , 9 / 2 ; move ua - ul , 4 )  decode:( move 4 , 9 / 2 ; move 5 , 4 ) 
[12887] c:0 is:loop 0 , 5 , move v0 - ua , v0 + ul  decode:loop 0 , 4 , move ua , 4 * 5 
[12888] c:0 is:( move 4 , 4 * 9 ; move ua + ul , 4 )  decode:( move 4 , 9 * 4 ; move ua , 4 ) 
[12889] c:0 is:loop 0 , 5 , move v0 + v0 , ua * ua  decode:loop 0 , 3 , move ua , v0 + 3 
[12890] c:0 is:loop 0 , 6 , move v0 - ua , v0 + ul  decode:loop 0 , 4 , move ua , 2 * 5 
[12891] c:0 is:loop 0 , 4 , move v0 - ul , ul - v0  decode:loop 0 , 4 , move v0 - 2 , 4 
[12892] c:0 is:loop 0 , 4 , move ul - v0 , ul - v0  decode:loop 0 , 4 , move ul , ul - 4 
[12893] c:0 is:( move 9 , ua / 3 ; move 4 , ua / 3 )  decode:( move 9 , 2 / 4 ; move 4 , 2 ) 
[12894] c:0 is:loop 0 , 6 , move ua - v0 , v0 + ul  decode:loop 0 , 4 , move ua , 0 - ua / v0 
[12895] c:0 is:loop 0 , 6 , move v0 + ul , ua - v0  decode:loop 0 , 4 , move v0 + 4 , 0 - 9 
[12896] c:0 is:( move 5 , 9 / 2 ; move ua - ul , 4 )  decode:( move 5 , 4 * 2 ; move 5 , 4 ) 
[12897] c:0 is:loop 0 , 4 , move v0 * v0 , ua * ua  decode:( move 4 , ul - 3 ; move 9 , 4 ) 
[12898] c:0 is:loop 0 , 4 , move v0 + ul , v0 / ua  decode:loop 0 , 4 , move ua - 4 , ul / v0 
[12899] c:0 is:loop 0 , 5 , move ul + v0 , ul - v0  decode:loop 0 , 4 , move 4 , v0 + 5 
[12900] c:0 is:loop 0 , 5 , move ul + v0 , v0 - ul  decode:loop 0 , 3 , move 5 , 3 / v0 
[12901] c:0 is:loop 0 , 5 , move v0 - ul , ua - v0  decode:0 0 loop 0 , 4 , move 2 , 0 - v0 
[12902] c:0 is:( move 4 , 9 / 2 ; move ua , ua / 4 )  decode:( move ua , 9 ; move 4 , ua / 4 ) 
[12903] c:0 is:loop 0 , 5 , move ul - v0 , ul + v0  decode:loop 0 , 3 , move 4 - ua , v0 - 4 
[12904] c:0 is:( move 9 , 4 + 9 ; move ua + ul , 2 )  decode:( move 9 , 9 + 4 ; move ua , 2 ) 
[12905] c:0 is:( move ua , move ul , ul ; move ua , ul )  decode:( move ul - ua , 3 ; move ua , 2 ) 
[12906] c:0 is:loop 0 , 5 , move ul - v0 , ua - v0  decode:loop 0 , 4 , move 2 , 9 + v0 
[12907] c:0 is:loop 0 , 5 , move v0 - ul , ul + v0  decode:loop 0 , 3 , move 4 - v0 , 0 - 4 
[12908] c:0 is:( move 4 , 9 * 4 ; move 4 , ua * ua )  decode:loop 0 , 2 , move 0 - 4 , 0 - 4 ua 
[12909] c:0 is:( move 9 , 2 * 9 ; move ul + ua , 2 )  decode:( move 9 , 2 * 9 ; move ua , 2 ) 
[12910] c:0 is:( move ua , 4 * 9 ; move ua , 4 / 3 )  decode:( move ua , 9 ; move ua , 5 ) 
[12911] c:0 is:( move 5 , ua / 4 ; move 4 - 7 , ul )  decode:( move 3 , 9 ; move 5 , 0 - 4 ) 
[12912] c:0 is:( move ua , ul / 9 ; move 4 , 4 + 4 )  decode:( move ua , ul / ua ; move 4 , 8 ) 
[12913] c:0 is:( move ua , 9 / 4 ; move 2 , ua / 4 )  decode:( move 2 , 4 / move ua , ua / 4 ) 
[12914] c:0 is:( move ua + 2 , 0 ; move 0 - ua , ul )  decode:( move ua + 2 , 0 ; move 7 , ul ) 
[12915] c:0 is:loop 0 , 6 , move ul - v0 , ua - v0  decode:loop 0 , 3 , move 3 - ua , 3 + v0 
[12916] c:0 is:loop 0 , 6 , move ul - v0 , v0 + ul  decode:( move 3 , 4 / ua ; move ua , 8 ) 
[12917] c:0 is:( move ua + ul , 0 ; move ua , 0 - 2 )  decode:loop 0 , 3 , move ua - v0 , 3 - 3 
[12918] c:0 is:( move 9 , 2 / 6 ; move ua , ua / 3 )  decode:( move 9 , 9 + 4 ; move ua , 2 ) 
[12919] c:0 is:loop 0 , 5 , move v0 + ul , ua / v0  decode:loop 0 , 3 , move 4 , 3 * 8 
[12920] c:0 is:loop 0 , 6 , move ul + v0 , ul - v0  decode:loop 0 , 4 , move ua - ul , v0 * 5 
[12921] c:0 is:( move 9 , ua / 4 ; move ua , 4 * 4 )  decode:( move ua , ua * ua ; move 9 , 9 ) 
[12922] c:0 is:( move ua , 0 ; move ua + ul , 0 - 2 )  decode:( move ua , 0 ; move ua , ua / 4 ) 
[12923] c:0 is:loop 0 , 4 , move ul + v0 , ul / v0  decode:loop 0 , 4 , move ua - 4 , v0 + 4 
[12924] c:0 is:loop 0 , 6 , move v0 + ul , v0 - ul  decode:0 loop 0 , 4 , move ua - ul , 0 - v0 
[12925] c:0 is:( move 4 , 4 * 9 ; move ul - 4 , ul )  decode:( move 4 , ul - 9 ; move 3 , ul ) 
[12926] c:0 is:loop 0 , 7 , move v0 - ua , ul + v0  decode:loop 0 , 4 , move ua , v0 + 5 
[12927] c:0 is:loop 0 , 6 , move v0 - ul , ua - v0  decode:( move ul - ua , 4 ; move 5 , 7 ) 
[12928] c:0 is:( move ua , 9 / 4 ; move 4 , ua / 3 )  decode:( move ua , 4 / 4 ; move 5 , 2 ) 
[12929] c:0 is:loop 0 , 6 , move v0 - ul , v0 + ul  decode:( move 3 , 9 + 2 ; move ua , 8 ) 
[12930] c:0 is:loop 0 , 7 , move ua - v0 , v0 + ul  decode:loop 0 , 4 , move ua , 0 - 9 
[12931] c:0 is:( move 4 , ul - 9 ; move ua , 5 / 3 )  decode:( move ua , 9 / move 4 , ua / 4 ) 
[12932] c:0 is:( move 9 / 4 , 3 ; move ua , ua / 4 )  decode:( move 2 , 3 ; move ua , ua / 4 ) 
[12933] c:0 is:( move 0 - ua , 0 ; move ua + 2 , ul )  decode:( move ua , 0 - 3 ; move 9 , ul ) 
[12934] c:0 is:( move ua - ul , 0 ; move ua , 0 - 2 )  decode:( move 5 , 0 ; move ua , 0 - 2 ) 
[12935] c:0 is:loop 0 , 5 , move v0 - ul , v0 / ua  decode:( move 3 , ul ; move 2 - ua , 7 ) 
[12936] c:0 is:loop 0 , 6 , move ul + v0 , ua / v0  decode:0 loop 0 , 4 , move 4 , 4 + v0 
[12937] c:0 is:loop 0 , 6 , move ul - v0 , v0 - ul  decode:loop 0 , 3 , move ua - 3 , 0 - v0 
[12938] c:0 is:( move 2 , 0 ; move 0 - ua , ua * ua )  decode:( move 4 - ua , 0 ; move ua , 5 ) 
[12939] c:0 is:( move ua , 0 ; move ul - ua , 0 - 2 )  decode:( move ua , 0 ; move 5 , 2 - 3 ) 
[12940] c:0 is:( move ua + 2 , 0 ; move ua + ul , 2 )  decode:( move ua + 2 , 0 ; move 8 , 2 ) 
[12941] c:0 is:loop 0 , 6 , move v0 - ul , ul - v0  decode:loop 0 , 4 , move v0 + ul , 0 - 8 
[12942] c:0 is:loop 0 , 6 , move ua / v0 , ul + v0  decode:loop 0 , 4 , move ua - v0 , ul / 3 
[12943] c:0 is:loop 0 , 7 , move ul - v0 , ua - v0  decode:loop 0 , 4 , move 3 - ua , ul + v0 
[12944] c:0 is:loop 0 , 6 , move ul - v0 , ul - v0  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[12945] c:0 is:( move ul - ua , 0 ; move 0 - ua , 2 )  decode:( move 5 , 2 ; move ua , 0 - 2 ) 
[12946] c:0 is:( move 9 , 4 + 9 ; move ua , ua - 4 )  decode:( move ua , 9 ; move ua + 3 , 4 ) 
[12947] c:0 is:( move ua , 0 ; move ua - ul , 0 - 2 )  decode:( move ua , 0 ; move ua , 0 - 2 ) 
[12948] c:0 is:( move 0 - ua , 0 ; move 2 - ua , ul )  decode:( move 0 - ua , 0 ; move 5 , ul ) 
[12949] c:0 is:( move 0 - ua , 0 ; move ua - 2 , ul )  decode:( move 0 - ua , 0 ; move 4 , ul ) 
[12950] c:0 is:( move 0 - ua , 0 - 2 ; move ua , ul )  decode:loop 0 , 2 , move ua , ua / - 3 
[12951] c:0 is:( move 0 - ua , 0 ; move ua + 3 , ul )  decode:( move 9 , 0 - 3 ; move 9 , ul ) 
[12952] c:0 is:( move ua , 0 ; move 2 - ua , 0 - ul )  decode:( move ua , 0 ; move 4 , 0 - 2 ) 
[12953] c:0 is:( move ul - ua , 0 ; move ua , 0 - 2 )  decode:( move 5 , 0 - 5 ; move 5 , 2 ) 
[12954] c:0 is:loop 0 , 7 , move v0 - ul , ua - v0  decode:( move 9 , 3 / 2 ; move ua , 8 ) 
[12955] c:0 is:( move 9 , 3 / 4 ; move ua / 4 , ul )  decode:( move 9 , 4 ; move 2 , ul ) 
[12956] c:0 is:( move ua , 9 * 2 ; move ua , 3 * 9 )  decode:loop 0 , 2 , move ua , 0 - 2 
[12957] c:0 is:( move ul + ua , 0 ; move ua + 2 , 2 )  decode:( move ua + ul , 0 ; move 8 , 2 ) 
[12958] c:0 is:( move 0 - ua , 0 ; move ua - ul , 2 )  decode:( move 0 - ua , 0 ; move 5 , 2 ) 
[12959] c:0 is:( move 0 - ua , 0 ; move ua + 4 , ul )  decode:( move ua , 0 ; move 4 + ua , ul ) 
[12960] c:0 is:( move 3 , 0 ; move 0 - ua , ua * ua )  decode:( move 3 , 0 ; move ua , 5 ) 
[12961] c:0 is:( move ua + ul , 0 ; move ua - 2 , 2 )  decode:( move ua + ul , 0 ; move 4 , 2 ) 
[12962] c:0 is:( move 0 - ua , 0 - 3 ; move ua , ul )  decode:loop 0 , 3 , move v0 - ua , v0 0 0 ua - 
[12963] c:0 is:( move ua + ul , 0 ; move ua , 0 - 4 )  decode:loop 0 , 3 , move ua - ul , v0 - 3 
[12964] c:0 is:( move ua - ul , 0 ; move ua + 2 , 2 )  decode:( move 5 , 0 ; move ua + 2 , 2 ) 
[12965] c:0 is:( move ul - ua , 0 ; move ua + 2 , 2 )  decode:( move ul - ua , 0 ; move 8 , 2 ) 
[12966] c:0 is:( move ua + 2 , 0 ; move 2 - ua , ul )  decode:( move ua , 0 ; move ua - 2 , ul ) 
[12967] c:0 is:( move ua , 0 - 2 ; move ua + ul , 2 )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[12968] c:0 is:( move 0 - ua , 2 ; move ua + 2 , ul )  decode:( move ua + ul , 0 ; move 9 , ul ) 
[12969] c:0 is:( move ua - 2 , 0 ; move ua + 2 , ul )  decode:( move 4 , 0 ; move 9 , ul ) 
[12970] c:0 is:( move 9 , 2 / 8 ; move ua - ul , 4 )  decode:( move 9 , ul / 4 ; move 5 , 4 ) 
[12971] c:0 is:loop 0 , 6 , move v0 - ul , v0 / ua  decode:loop 0 , 3 , move 3 - ua , 9 / v0 
[12972] c:0 is:loop 0 , 7 , move v0 - ul , ul - v0  decode:loop 0 , 3 , move 2 - ua , v0 + 4 
[12973] c:0 is:( move ua + ul , 0 ; move ua + 3 , 2 )  decode:( move ua + 3 , 0 ; move 3 , 2 ) 
[12974] c:0 is:loop 0 , 7 , move ul - v0 , v0 - ul  decode:loop 0 , 4 , move 0 - 4 , v0 - 9 
[12975] c:0 is:loop 0 , 6 , move v0 - ul , ua / v0  decode:loop 0 , 4 , move ua - 4 , 5 / v0 
[12976] c:0 is:( move ua , ul ; move ua + 2 , 0 - 2 )  decode:( move 8 , ua / 3 ; move ua , 2 ) 
[12977] c:0 is:( move ua - 2 , 0 ; move ua + ul , 2 )  decode:( move 4 , 0 ; move 8 , 2 ) 
[12978] c:0 is:loop 0 , 7 , move ul - v0 , ul - v0  decode:loop 0 , 3 , move ua - 2 , v0 - 9 
[12979] c:0 is:( move 0 - 2 , 0 ; move ul - ua , ul )  decode:( move 5 , 0 - 3 ; move 2 , ul ) 
[12980] c:0 is:( move ua + 2 , 0 ; move ua - ul , 2 )  decode:( move ua + 2 , 0 ; move 5 , 2 ) 
[12981] c:0 is:loop 0 , 7 , move ua / v0 , ul + v0  decode:loop 0 , 4 , move ua , ul - v0 
[12982] c:0 is:loop 0 , 6 , move ul - v0 , v0 / ua  decode:loop 0 , 4 , move 3 , v0 * 9 
[12983] c:0 is:( move ua + ul , 2 ; move ua , 0 - 2 )  decode:( move ua , 2 ; move ua + ul , 2 ) 
[12984] c:0 is:( move ua , 0 ; move ua + ul , 0 - 4 )  decode:( move ua , 0 ; move ua , 0 - 4 ) 
[12985] c:0 is:( move ua + ul , 0 - 2 ; move ua , 2 )  decode:( move ua , 0 ; move ua , 0 - 2 ) 
[12986] c:0 is:loop 0 , 7 , move v0 - ul , v0 - ul  decode:loop 0 , 3 , move 4 + v0 , 9 - 9 
[12987] c:0 is:( move ua + 2 , ul ; move ua , 0 - 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[12988] c:0 is:loop 0 , 6 , move ul - v0 , ua / v0  decode:loop 0 , 4 , move 0 - 3 , v0 + 8 
[12989] c:0 is:( move ua - ul , 0 ; move ua + 3 , 2 )  decode:( move 5 , 0 ; move ua + 3 , 2 ) 
[12990] c:0 is:( move ua + ul , 0 ; move 0 - ua , 5 )  decode:( move ua + ul , 0 ; move ua , 5 ) 
[12991] c:0 is:( move 0 - 4 , 0 ; move ua + ul , ul )  decode:( move 4 , 0 ; move 8 , ua / 3 ) 
[12992] c:0 is:( move 0 - 2 , 2 ; move ua , ua * ua )  decode:( move 2 , 5 ; move ua , ua * ua ) 
[12993] c:0 is:loop 0 , 7 , move ul - v0 , v0 / ua  decode:loop 0 , 3 , move 0 - 4 , 5 * 4 
[12994] c:0 is:( move ua + ul , 0 - 2 ; move 2 , ul )  decode:( move 2 , 0 - 2 ; move ua , ul ) 
[12995] c:0 is:( move 3 , 0 ; move ua + 2 , ua * ua )  decode:( move 3 , 0 ; move 9 , ua * ua ) 
[12996] c:0 is:( move ua , 0 - 2 ; move 2 - ua , ul )  decode:loop 0 , 2 , move v0 - ua , 2 - 3 
[12997] c:0 is:( move ua + ul , 0 ; move ua + 2 , 4 )  decode:( move ua , 0 ; move 2 + ua , 4 ) 
[12998] c:0 is:( move ua + 2 , 0 - 2 ; move ul , ul )  decode:( move 2 , ul ; move ua + 2 , ul ) 
[12999] c:0 is:( move ua - ul , 0 - 2 ; move ua , 2 )  decode:( move ua , 0 - 2 ; move ua , 2 ) 
[13000] c:0 is:( move ua + ul , 0 ; move 3 - ua , 2 )  decode:( move ua + ul , 0 ; move 3 , ul ) 
[13001] c:0 is:( move 2 , 0 - 2 ; move ua + ul , ul )  decode:( move 2 , 0 - 2 ; move ua , ul ) 
[13002] c:0 is:( move ua + ul , 0 - 3 ; move ua , 2 )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[13003] c:0 is:( move ul - ua , 0 - 2 ; move ua , 2 )  decode:( move ua , 5 / 4 ; move ua , 2 ) 
[13004] c:0 is:( move ua , 0 - 4 ; move 0 - ua , ul )  decode:( move ua , 0 - 4 ; move ua , 2 ) 
[13005] c:0 is:( move 3 + ua , ul ; move ua , 0 - 2 )  decode:( move ua , ul ; move ua + 3 , 2 ) 
[13006] c:0 is:loop 0 , 7 , move v0 - ul , ua / v0  decode:loop 0 , 4 , move 2 - ua , v0 + 9 
[13007] c:0 is:( move 2 - ua , 0 ; move 2 , ua * ua )  decode:( move ul - ua , 0 ; move 2 , 8 ) 
[13008] c:0 is:( move ua , ul ; move 2 - ua , 0 - 2 )  decode:( move 4 , 2 * 6 ; move ua , 5 ) 
[13009] c:0 is:loop 0 , 7 , move ul - v0 , ua / v0  decode:loop 0 , 4 , move 4 , 2 - v0 
[13010] c:0 is:( move 2 - ua , 0 - 2 ; move ua , ul )  decode:( move 3 , ul ; move ua , ua / 3 ) 
[13011] c:0 is:( move ua , 0 - 2 ; move ua - ul , 2 )  decode:( move ua , 0 - 2 ; move 5 , 2 ) 
[13012] c:0 is:( move ua + 3 , 2 ; move 0 - ua , ul )  decode:( move ua + 3 , 2 ; move ua , ul ) 
[13013] c:0 is:( move ua - ul , 0 ; move ua , 0 - 4 )  decode:( move 5 , 0 ; move ua , 0 - 4 ) 
[13014] c:0 is:( move ua + ul , 3 ; move ua , 0 - 2 )  decode:( move ua , 3 ; move ua + ul , 2 ) 
[13015] c:0 is:( move ua , 0 - 2 ; move ul - ua , 2 )  decode:( move ua , 0 ; move 5 , 2 - 3 ) 
[13016] c:0 is:( move 0 - ua , 0 ; move ua - 4 , ul )  decode:( move 0 - ua , 0 ; move 3 , ul ) 
[13017] c:0 is:( move 0 - 3 , 0 ; move ul - ua , ul )  decode:( move 3 , ul ; move ua - ul , ul ) 
[13018] c:0 is:( move 3 - ua , 0 ; move ua + ul , 2 )  decode:loop 0 , 3 , move 3 + v0 , v0 ul * 
[13019] c:0 is:( move ua + ul , 3 ; move 0 - ua , 2 )  decode:( move ua + ul , 3 ; move ua , 2 ) 
[13020] c:0 is:( move ua , 3 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[13021] c:0 is:( move 9 , 3 / 9 ; move ua , ua - 4 )  decode:( move ua , 4 * 3 ; move 9 , 4 ) 
[13022] c:0 is:( move 4 , 0 ; move 0 - ua , ua * ua )  decode:( move 4 , 0 ; move ua , 5 ) 
[13023] c:0 is:( move ua + 2 , 0 ; move ua + ul , 4 )  decode:( move ua + 2 , 0 ; move 7 , 4 ) 
[13024] c:0 is:( move ua , 0 - 3 ; move ua + ul , 2 )  decode:( move ua , 0 - 3 ; move 8 , 2 ) 
[13025] c:0 is:( move 0 - 3 , 0 ; move ua - ul , ul )  decode:( move 3 , 0 ; move ul - ua , ul ) 
[13026] c:0 is:( move 2 , 0 - 2 ; move ua , ua * ua )  decode:( move ua , 9 ; move 3 , 3 / 2 ) 
[13027] c:0 is:( move ua , 9 * 9 / 4 ; move ua , 2 )  decode:( move ua , 5 / 3 ; move ua , 2 ) 
[13028] c:0 is:( move 2 , 2 ; move 0 - ua , ua * ua )  decode:( move 2 , ua / 2 ; move ua , 8 ) 
[13029] c:0 is:( move 2 - ua , 0 ; move ul - ua , 2 )  decode:( move 0 - 4 , 0 ; move 5 , 2 ) 
[13030] c:0 is:loop 0 , 7 , move v0 - ul , v0 / ua  decode:loop 0 , 4 , move 4 , 3 * 4 / v0 
[13031] c:0 is:( move 0 - ua , 3 ; move ua + ul , 2 )  decode:( move ua , 0 ; move ua + ul , 2 ) 
[13032] c:0 is:( move 0 - ua , 3 ; move ua + 2 , ul )  decode:( move 0 - ua , 3 ; move 8 , ul ) 
[13033] c:0 is:( move ua + 2 , 0 ; move 3 - ua , ul )  decode:( move ua + 2 , 0 ; move 3 , 2 ) 
[13034] c:0 is:( move ul + ua , 2 ; move ua + 2 , 2 )  decode:( move ua + ul , 2 ; move 9 , 2 ) 
[13035] c:0 is:( move ua , ul ; move ua + 3 , 0 - 2 )  decode:( move 9 , 0 - 3 ; move ua , 2 ) 
[13036] c:0 is:( move ua , 0 ; move 3 , 2 + ua * ua )  decode:( move ua , 0 ; move 3 , 4 ) 
[13037] c:0 is:( move ul - ua , 0 ; move 0 - ua , 4 )  decode:( move 5 , 4 ; move ua , 0 - 4 ) 
[13038] c:0 is:( move 2 , 3 ; move 0 - ua , ua * ua )  decode:( move 2 , 3 ; move ua , ua * ua ) 
[13039] c:0 is:( move ua , ul ; move ua + 4 , 0 - 2 )  decode:( move ua , ul ; move 4 + 4 , 2 ) 
[13040] c:0 is:( move ua + ul , 2 ; move ua , 0 - 4 )  decode:( move ua , 2 ; move ua + ul , 4 ) 
[13041] c:0 is:( move ua - ul , 0 ; move 0 - 4 , ul )  decode:( move ua - 2 , 0 ; move 4 , ul ) 
[13042] c:0 is:( move ua - ul , 0 - 2 ; move 2 , ul )  decode:( move ua , 0 - 2 ; move 2 , ul ) 
[13043] c:0 is:( move ua , 2 ; move ua + ul , 0 - 4 )  decode:( move ua + ul , 2 ; move ua , - v) 0 
[13044] c:0 is:( move ua , 4 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 5 ; move ua , 2 ) 
[13045] c:0 is:( move ua + ul , 0 ; move ua + 3 , 4 )  decode:( move ul - ua , 0 ; move 3 , 4 ) 
[13046] c:0 is:( move 0 - ua , 3 ; move ua + 3 , ul )  decode:( move ul - ua , 3 ; move ua , ul ) 
[13047] c:0 is:( move 0 - ua , 0 ; move ua , 4 / ua )  decode:( move ua , 0 ; move ua , 5 * 2 ) 
[13048] c:0 is:( move ua + ul , 0 ; move ua - 2 , 4 )  decode:( move ua + ul , 0 ; move 5 , 4 ) 
[13049] c:0 is:( move ul - ua , 0 ; move ua , 2 - 3 )  decode:( move ul - ua , 0 ; move 5 , ul ) 
[13050] c:0 is:( move 3 , 0 - 2 ; move ua + ul , ul )  decode:( move 3 , 0 - 4 ; move 7 , ul ) 
[13051] c:0 is:( move 3 , ua * ua ; move 0 - ua , 2 )  decode:( move 3 , ua * ua ; move ua , ul ) 
[13052] c:0 is:( move ua - ul , 0 ; move ua , 2 - 3 )  decode:( move ua , ua / 3 ; move 5 , ul ) 
[13053] c:0 is:( move 4 , 0 ; move ua + 2 , ua * ua )  decode:( move 4 , 0 ; move 8 , ua * ua ) 
[13054] c:0 is:( move 0 - 3 , ul ; move ua + ul , 2 )  decode:( move 3 ,  ; move ua + ul , 2 ) 
[13055] c:0 is:( move 3 , ua * ua ; move ua , 0 - 2 )  decode:( move ua , ua / 3 ; move 3 , 2 ) 
[13056] c:0 is:( move ua - 3 , 0 ; move ua + 3 , ul )  decode:( move 3 , 0 ; move ua + 3 , ul ) 
[13057] c:0 is:( move ul - ua , 0 ; move ua , 0 - 5 )  decode:( move 5 , 0 - 4 ; move 5 , 5 ) 
[13058] c:0 is:( move ua + 2 , 4 ; move 0 - ua , ul )  decode:( move ua + 2 , 4 ; move ua , 2 ) 
[13059] c:0 is:( move ua + ul , 0 - 3 ; move 2 , ul )  decode:( move 0 - 4 , 0 ; move 2 , ul ) 
[13060] c:0 is:( move ua + ul , 0 - 2 ; move ua , 4 )  decode:loop 0 , 3 , move v0 - ua , 0 - 8 
[13061] c:0 is:( move ua + 2 , ul ; move ua , 0 - 4 )  decode:( move ua , ul ; move ua + 2 , 4 ) 
[13062] c:0 is:( move ua + 2 , 3 ; move ua + ul , 2 )  decode:( move ua + 2 , 3 ; move 7 , 2 ) 
[13063] c:0 is:( move ul - ua , 0 ; move 0 - 4 , ul )  decode:( move 2 - ua , 0 ; move 4 , ul ) 
[13064] c:0 is:( move ua + 3 , 2 ; move ua + ul , 2 )  decode:( move ua + 3 , 2 ; move 7 , 2 ) 
[13065] c:0 is:( move ua , 0 ; move ua + 2 , ua / 3 )  decode:( move ua , 0 ; move 9 , ua / 3 ) 
[13066] c:0 is:( move ua + ul , 0 - 4 ; move ua , 2 )  decode:loop 0 , 2 , move ua , 0 - 4 - v0 
[13067] c:0 is:( move ua + ul , ul ; move 3 , 0 - 2 )  decode:( move ua , ul ; move 3 , 0 - 2 ) 
[13068] c:0 is:( move ul - ua , 3 ; move 0 - ua , 2 )  decode:( move ul - ua , 3 ; move ua , 2 ) 
[13069] c:0 is:( move ua + 2 , ul ; move 2 - ua , 2 )  decode:( move ua + 2 , ul ; move 4 , 5 ) 
[13070] c:0 is:( move 3 , ul ; move ua + ul , 0 - 2 )  decode:( move 3 , ul ; move ua , 0 - 2 ) 
[13071] c:0 is:( move ua , 0 ; move ul - ua , 2 - 3 )  decode:( move ua , ul / 6 ; move 5 , 4 ) 
[13072] c:0 is:( move 4 + ua , ul ; move ua , 0 - 2 )  decode:( move ua , ul ; move ua + ua , 0 - ) 2 
[13073] c:0 is:( move 3 , 0 - 2 ; move ua , ua * ua )  decode:( move 3 , 2 - 2 ; move ua , 8 ) 
[13074] c:0 is:( move ua , 0 ; move 3 , 3 + ua * ua )  decode:( move ua , 0 ; move 3 , 3 / 2 ) 
[13075] c:0 is:( move 0 - 3 , 2 ; move ua + ul , ul )  decode:( move 3 , 5 ; move ua + ul , ul ) 
[13076] c:0 is:( move 2 - ua , 0 - 3 ; move ua , ul )  decode:( move 4 , ul / 6 ; move ua , ul ) 
[13077] c:0 is:( move ua , 0 - 2 ; move 3 - ua , ul )  decode:( move 3 , 2 * 5 ; move 3 , ul ) 
[13078] c:0 is:( move ul , 0 - 2 ; move ua + 3 , ul )  decode:( move ul , 0 - 4 ; move 3 , ul ) 
[13079] c:0 is:( move ua + ul , 3 ; move ua + 2 , 2 )  decode:( move ua + ul , 3 ; move 8 , 2 ) 
[13080] c:0 is:( move 4 - ua , 0 ; move ua + ul , 2 )  decode:( move 3 , 0 ; move ua + ul , 2 ) 
[13081] c:0 is:( move ua , ua * ua ; move 3 , 0 - 2 )  decode:( move 3 , 3 ; move ua , 2 ) 
[13082] c:0 is:( move ua , 3 ; move ua - ul , 0 - 2 )  decode:( move ul - ua , ul ; move ua , 2 ) 
[13083] c:0 is:( move 9 , 9 / 4 ; move 3 , ua * ua )  decode:( move 9 , 4 ; move 4 , 9 / 4 ) 
[13084] c:0 is:( move 2 - ua , 2 ; move ua + 2 , ul )  decode:( move 4 , 5 ; move ua + 2 , 4 ) 
[13085] c:0 is:( move ua , 0 ; move 2 - ua , 2 / ua )  decode:( move ua , ul / 4 ; move ua , 3 ) 
[13086] c:0 is:( move ua , 0 - 3 ; move 2 - ua , ul )  decode:( move ua , 0 - 3 ; move 4 , 4 ) 
[13087] c:0 is:( move ua + 3 , ul ; move ua + 2 , 2 )  decode:( move 3 + 7 , ul ; move 7 , 2 ) 
[13088] c:0 is:( move 2 , 2 ; move ua + 2 , ua * ua )  decode:( move 2 , 2 ; move ua + 2 , 8 ) 
[13089] c:0 is:( move 0 - ua , 2 ; move ua , 2 / ua )  decode:( move ua , 2 - 3 ; move ua , 4 ) 
[13090] c:0 is:( move ul - ua , 0 - 3 ; move ua , 2 )  decode:( move 5 , ul / 4 ; move ua , 2 ) 
[13091] c:0 is:( move ul + ua , 4 ; move ua , 0 - 2 )  decode:( move 0 - ua , 2 ; move 8 , 2 ) 
[13092] c:0 is:( move 2 , 0 - 3 ; move ua + ul , ul )  decode:( move 2 , 0 - 4 ; move 8 , ul ) 
[13093] c:0 is:( move ua , ua * ua ; move 0 - 3 , 2 )  decode:( move ua , 8 ; move 3 , 5 ) 
[13094] c:0 is:( move ua + 2 , 2 ; move 2 - ua , ul )  decode:( move 8 , 2 ; move 4 , 2 ) 
[13095] c:0 is:( move ua + 2 , 0 ; move ua , ua / 3 )  decode:( move ua + 2 , 0 ; move ua , 2 ) 
[13096] c:0 is:( move 5 , 0 ; move 0 - ua , ua * ua )  decode:( move 5 , 0 ; move ua , ua * ua ) 
[13097] c:0 is:( move ua , 0 - 4 ; move ua + ul , 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 2 
[13098] c:0 is:( move ua , 0 - 2 ; move ua + ul , 4 )  decode:( move ua , 0 - 2 ; move 8 , 4 ) 
[13099] c:0 is:( move 0 - 4 , 0 ; move ua - ul , ul )  decode:( move 3 - ua , 0 ; move 5 , ul ) 
[13100] c:0 is:( move ua , 3 ; move ua + ul , 0 - 3 )  decode:( move    , 3 ; move ua , 3 ) 
[13101] c:0 is:( move ua + 2 , ul ; move 0 - 3 , ul )  decode:( move 4 , ul ; move 9 , ua / 3 ) 
[13102] c:0 is:( move 3 , 2 ; move 0 - ua , ua * ua )  decode:( move 3 , ua * 2 ; move ua , 8 ) 
[13103] c:0 is:( move ua , 0 - 3 ; move ua - ul , 2 )  decode:( move ua , 0 - 3 ; move 6 , 2 ) 
[13104] c:0 is:( move ua , ul ; move ua - 3 , 0 - 2 )  decode:( move 3 , ua / 3 ; move ua , 2 ) 
[13105] c:0 is:( move ua + ul , 0 - 4 ; move ua , 3 )  decode:( move ua , 0 - 4 ; move ua , 3 ) 
[13106] c:0 is:( move 4 , ul ; move ua + ul , 0 - 2 )  decode:( move ua , ua / 3 ; move 4 , 2 ) 
[13107] c:0 is:( move ua , ua * ua ; move 4 , 0 - 2 )  decode:( move 4 , ua * ua ; move ua , 2 ) 
[13108] c:0 is:( move 5 , 0 ; move ua + 2 , ua * ua )  decode:( move 5 , 0 ; move ua + 2 , 8 ) 
[13109] c:0 is:( move 0 - 3 , 3 ; move ua + ul , ul )  decode:( move 3 , 0 ; move ua + ul , ul ) 
[13110] c:0 is:( move 3 - ua , 0 ; move 3 , ua * ua )  decode:( move 3 , 5 ; move 3 , ua * ua ) 
[13111] c:0 is:( move ul - ua , ul ; move 3 , 0 - 2 )  decode:( move 3 , 0 - 4 ; move 5 , 5 ) 
[13112] c:0 is:( move 2 - ua , 0 ; move ua , ua / 3 )  decode:( move 4 , ul - 3 ; move ua , 2 ) 
[13113] c:0 is:( move 0 - 2 , 4 ; move ua , ua * ua )  decode:( move 2 , 4 ; move ua , ua * ua ) 
[13114] c:0 is:( move ua , 0 - 2 ; move 4 , ua * ua )  decode:( move 4 , 0 - 2 ; move 4 , 7 ) 
[13115] c:0 is:( move ua + 2 , 3 ; move ua - ul , 2 )  decode:( move ua + 2 , 3 ; move 5 , 2 ) 
[13116] c:0 is:( move ua + 2 , 2 ; move ua + ul , 4 )  decode:( move 8 , 2 ; move ua + ul , 4 ) 
[13117] c:0 is:( move 0 - ua , 4 ; move ul - ua , 2 )  decode:( move 0 - ua , 4 ; move 5 , 2 ) 
[13118] c:0 is:( move 4 , 2 ; move 0 - ua , ua * ua )  decode:( move 4 , 2 ; move ua , 5 ) 
[13119] c:0 is:( move 0 - 4 , 2 ; move ua + ul , ul )  decode:( move 4 , 2 ; move ua + ul , ul ) 
[13120] c:0 is:( move ua + 3 , 2 ; move 2 - ua , ul )  decode:( move 3 , 3 ; move 9 , ul / 3 ) 
[13121] c:0 is:( move ua + ul , 2 ; move ua + 2 , 4 )  decode:( move 8 , 2 ; move ua + 2 , 4 ) 
[13122] c:0 is:( move ua + 2 , 3 ; move 2 - ua , ul )  decode:( move ua + 2 , 3 ; move 5 , ul ) 
[13123] c:0 is:( move ua - 2 , ul ; move 2 - ua , 2 )  decode:( move 4 , ul ; move 5 , 5 ) 
[13124] c:0 is:( move ua + ul , 4 ; move ua + 2 , 2 )  decode:( move ua + ul , 4 ; move 8 , 2 ) 
[13125] c:0 is:( move ua + 3 , 4 ; move 0 - ua , ul )  decode:( move ua + 3 , 4 ; move ua , 2 ) 
[13126] c:0 is:( move ua , ua * ua ; move 2 , 0 - 4 )  decode:( move 2 , ul ; move ua , 4 ) 
[13127] c:0 is:( move ua - 3 , 0 ; move ua + 4 , ul )  decode:( move 3 , 0 ; move 9 , ul ) 
[13128] c:0 is:( move ua + ul , 2 ; move 0 - 4 , ul )  decode:( move 8 , 2 ; move 4 , 2 ) 
[13129] c:0 is:( move ua , 2 ; move 0 - ua , 3 / ua )  decode:( move ua , 2 ; move ua , 2 * 5 ) 
[13130] c:0 is:( move ua , ua * ua ; move 0 - 4 , 2 )  decode:( move ua , ua * ua ; move 4 , ul ) 
[13131] c:0 is:( move ul - ua , 2 ; move 0 - ua , 4 )  decode:( move ul - ua , 2 ; move ua , 7 ) 
[13132] c:0 is:( move ua + 2 , 2 ; move ul , ul - 2 )  decode:( move 2 , 4 ; move 8 , ul ) 
[13133] c:0 is:( move ul - ua , 0 - 3 ; move 2 , ul )  decode:( move 2 , ul / 4 ; move ua , ul ) 
[13134] c:0 is:( move ua - ul , 0 - 2 ; move 3 , ul )  decode:( move ua , 0 - 4 ; move 2 , ul ) 
[13135] c:0 is:( move ul - ua , 3 ; move ua + 2 , 2 )  decode:( move 5 , 0 ; move ua + 2 , 2 ) 
[13136] c:0 is:( move ul - ua , 0 - 2 ; move 3 , ul )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[13137] c:0 is:( move 2 , 0 - 3 ; move ua - ul , ul )  decode:( move 2 , 0 - 3 ; move 5 , ul ) 
[13138] c:0 is:( move ua + ul , 3 ; move ua , 0 - 4 )  decode:loop 0 , 4 , move 4 , 3 + v0 
[13139] c:0 is:( move 0 - ua , 3 ; move ua + 4 , ul )  decode:( move 7 , ul ; move ua + 4 , ul ) 
[13140] c:0 is:( move ua + ul , 3 ; move ua - 2 , 2 )  decode:( move ua + ul , 3 ; move 4 , 2 ) 
[13141] c:0 is:( move 3 , ul ; move ul - ua , 0 - 2 )  decode:( move ua , 2 - 3 ; move 2 , 5 ) 
[13142] c:0 is:( move ul - ua , 4 ; move 0 - ua , 2 )  decode:( move 6 , 4 ; move ua , 2 ) 
[13143] c:0 is:( move ua , 3 / ua ; move ua , 0 - 2 )  decode:( move ua , ua / 4 ; move ua , 2 ) 
[13144] c:0 is:( move 0 - 4 , 2 ; move ua , ua * ua )  decode:( move 2 - ua , 2 ; move ua , 8 ) 
[13145] c:0 is:( move 3 - ua , 2 ; move ua + ul , 2 )  decode:( move 3 , 0 - 2 ; move 7 , 2 ) 
[13146] c:0 is:( move 3 , 0 - 3 ; move ua + ul , ul )  decode:( move 3 , 0 - 3 ; move 8 , ul ) 
[13147] c:0 is:( move 4 , 0 - 2 ; move ua , ua * ua )  decode:( move 5 , 9 ; move 4 , 0 - ua ) 
[13148] c:0 is:( move 0 - 3 , ul ; move ua + 3 , ul )  decode:( move 3 , 4 ; move 9 , 0 - 2 ) 
[13149] c:0 is:( move ul - ua , 3 ; move 0 - ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 3 
[13150] c:0 is:( move ua + ul , 0 - 3 ; move 3 , ul )  decode:( move ua + ul , 0 ; move 3 , ul ) 
[13151] c:0 is:( move ua + ul , 0 - 3 ; move ua , 4 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 3 
[13152] c:0 is:( move ul - ua , 0 ; move ua + 2 , 5 )  decode:( move 5 , ua / 2 ; move ua , 5 ) 
[13153] c:0 is:( move 0 - ua , ul ; move 2 - ua , 4 )  decode:( move ua , ul ; move 4 , 4 ) 
[13154] c:0 is:( move ua + ul , 3 ; move 2 - ua , 2 )  decode:( move ua + ul , 3 ; move 4 , 2 ) 
[13155] c:0 is:( move ua , 4 ; move ua + ul , 0 - 3 )  decode:( move ua , 4 ; move 8 , 3 ) 
[13156] c:0 is:( move 3 + 4 , 0 ; move ua , ua * ua )  decode:( move ua , 0 ; move ua , ua * ua ) 
[13157] c:0 is:( move 2 - ua , 0 ; move ul - ua , 4 )  decode:( move 4 , 0 ; move ul - ua , 4 ) 
[13158] c:0 is:( move 2 - ua , 3 ; move ua + ul , 2 )  decode:( move 4 , 0 ; move ua + ul , 2 ) 
[13159] c:0 is:( move ua , 0 ; move ua + ul , 3 / 2 )  decode:( move ua , 0 ; move ua + ul , 8 ) 
[13160] c:0 is:( move 3 , 0 - 2 ; move ul - ua , ul )  decode:( move ua - 2 , 2 ; move 5 , ul ) 
[13161] c:0 is:( move 2 , 0 ; move ua + ul , ua / 3 )  decode:( move 2 , 0 ; move 8 , 2 ) 
[13162] c:0 is:( move ua , 3 ; move ua + ul , 0 - 4 )  decode:( move ua , 3 ; move ua , 0 - 4 ) 
[13163] c:0 is:( move ua , 0 ; move ua + 3 , ua / 3 )  decode:( move ua , 0 ; move 9 , 2 ) 
[13164] c:0 is:( move 2 - ua , 3 ; move ua + 2 , ul )  decode:( move 4 , ul - move 9 , ua / 3 ) 
[13165] c:0 is:( move 3 , 0 - 3 ; move ua , ua * ua )  decode:( move 3 , 0 - 3 ; move ua , 5 ) 
[13166] c:0 is:( move 3 - ua , 2 ; move ua , ua - 2 )  decode:( move 0 - ua , 0 ; move 4 , 2 ) 
[13167] c:0 is:( move ua , 0 - 3 ; move ua + ul , 4 )  decode:( move ua , 0 - 3 ; move 7 , 4 ) 
[13168] c:0 is:( move 0 - ua , 0 ; move ua , ua / 5 )  decode:( move ua , 0 - 5 ; move ua , 5 ) 
[13169] c:0 is:( move ul - ua , 2 ; move 2 - ua , 2 )  decode:( move ul - ua , 2 ; move 5 , 5 ) 
[13170] c:0 is:( move ua - ul , ul ; move 3 , 0 - 2 )  decode:( move 5 , ul ; move 3 , 0 - 2 ) 
[13171] c:0 is:( move 2 , 0 - 4 ; move ua + ul , ul )  decode:( move 2 , 0 - 4 ; move 8 , ul ) 
[13172] c:0 is:( move ua , 0 - 2 ; move ua - ul , 4 )  decode:( move ua , 0 - 2 ; move 5 , 4 ) 
[13173] c:0 is:( move ul - ua , 0 ; move 2 - ua , 4 )  decode:( move ul - ua , 0 ; move 5 , 4 ) 
[13174] c:0 is:( move ua + ul , 3 ; move ua + 3 , 2 )  decode:( move 7 , 3 ; move 9 , 2 ) 
[13175] c:0 is:( move ua + ul , 0 ; move 4 + ua , 4 )  decode:( move ul - ua , 0 ; move 4 , 4 ) 
[13176] c:0 is:( move ua + ul , ul ; move 4 , 0 - 2 )  decode:( move 4 , 0 - 4 ; move ua , 2 ) 
[13177] c:0 is:( move 0 - ua , 2 ; move ul - ua , 4 )  decode:( move ua , 2 ; move ul - ua , 4 ) 
[13178] c:0 is:( move 3 , 0 - 2 ; move ua - ul , ul )  decode:( move 3 , 0 - 2 ; move 5 , ul ) 
[13179] c:0 is:( move ua , 0 - 2 ; move ua , ua / 3 )  decode:loop 0 , 2 , move ua , 0 - v0 
[13180] c:0 is:( move 2 - ua , 0 - 4 ; move ua , ul )  decode:( move ua , ul / 4 ; move 5 , 4 ) 
[13181] c:0 is:( move 4 , 0 ; move 2 - ua , ua * ua )  decode:( move 4 , 0 ; move 4 , 5 ) 
[13182] c:0 is:( move ua , 2 - 3 ; move ua + ul , 2 )  decode:loop 0 , 2 , move ua + v0 , ua / 3 
[13183] c:0 is:( move 2 , 0 - 4 ; move ua , ua * ua )  decode:( move ua , 4 ; move 2 , 4 / 3 ) 
[13184] c:0 is:( move ua , 0 - 3 ; move 3 , ua * ua )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[13185] c:0 is:( move ua , ua / 3 ; move ua , 0 - 2 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[13186] c:0 is:( move ua - 2 , 3 ; move ua + ul , 2 )  decode:( move 4 , 3 ; move ua + ul , 2 ) 
[13187] c:0 is:( move 3 , 2 ; move ua + 2 , ua * ua )  decode:( move 3 , 2 ; move 8 , ua * ua ) 
[13188] c:0 is:( move 4 , ua * ua ; move ua , 0 - 2 )  decode:( move ua , 6 ; move 4 , 2 ) 
[13189] c:0 is:( move 0 - ua , 4 ; move ua + 3 , ul )  decode:( move ua , 0 - 4 ; move 9 , ul ) 
[13190] c:0 is:( move 3 - ua , 2 ; move ua + 2 , ul )  decode:( move 3 , 5 ; move ua + 2 , 4 ) 
[13191] c:0 is:( move ua + 2 , 4 ; move ua + ul , 2 )  decode:( move ua + 2 , 4 ; move ua , 2 ) 
[13192] c:0 is:( move 2 - ua , 2 ; move ua - 2 , ul )  decode:( move 2 - ua , 2 ; move 4 , ul ) 
[13193] c:0 is:( move ua , 2 ; move ua , 0 - ua / 3 )  decode:( move ua , 2 ; move ua , ua / 3 ) 
[13194] c:0 is:( move ua + ul , 2 - 3 ; move ua , 2 )  decode:loop 0 , 2 , move ua + v0 , ua / 3 
[13195] c:0 is:( move ua , 0 ; move ua + 2 , ua / 4 )  decode:( move ua , 0 ; move 9 , ua / 4 ) 
[13196] c:0 is:( move 2 - ua , 0 ; move ua + ul , 5 )  decode:( move 4 , ua / 2 ; move 8 , 5 ) 
[13197] c:0 is:( move 3 , 0 - 2 ; move ua , ul / ua )  decode:( move 4 , 0 - 4 ; move 4 , 3 ) 
[13198] c:0 is:( move ua , 0 - 2 ; move ul - ua , 5 )  decode:( move 5 , 3 ; move ua , 0 - 8 ) 
[13199] c:0 is:( move 3 , 2 ; move 3 + ua , ua * ua )  decode:( move 3 , 2 ; move ua + 3 , 8 ) 
[13200] c:0 is:( move ua , ul / ua ; move 3 , 0 - 2 )  decode:( move 3 , 4 / 3 ; move ua , 2 ) 
[13201] c:0 is:( move 4 - ua , ua ; move 0 - 3 , ul )  decode:( move 2 , 0 ; move 3 , ul ) 
[13202] c:0 is:( move 4 , 0 - 2 ; move ua - ul , ul )  decode:( move 4 , 0 - 2 ; move 5 , ul ) 
[13203] c:0 is:( move ua , ua / 3 ; move ua + 2 , 2 )  decode:( move ua , ua / 3 ; move ua , 2 ) 
[13204] c:0 is:( move ua + ul , 3 ; move ua + 3 , 3 )  decode:loop 0 , 3 , move v0 - 8 , 3 
[13205] c:0 is:( move 0 - ua , ul ; move ua - 3 , 4 )  decode:( move ua , ul ; move 3 , 4 / 5 ) 
[13206] c:0 is:( move 2 , 2 ; move ua , 3 - ua * ua )  decode:( move 2 , ul ; move ua , 0 - 2 ) 
[13207] c:0 is:( move ua - 2 , 3 ; move ua - ul , 2 )  decode:( move 2 - ua , 3 ; move 5 , 2 ) 
[13208] c:0 is:( move 5 , 0 - 2 ; move ua , ua * ua )  decode:( move ua , 2 - move ua , 3 / 4 ) 
[13209] c:0 is:( move ua , 2 ; move ua - 2 , ua - 4 )  decode:( move 4 , 2 ; move ua , 0 - 4 ) 
[13210] c:0 is:( move 2 - ua , 0 ; move ul - ua , 5 )  decode:( move 4 , 5 ; move ul - ua , 0 0 ) - 0 
[13211] c:0 is:( move 0 - 3 , 4 ; move ua + ul , ul )  decode:( move 3 , ul ; move ua + ul , ul ) 
[13212] c:0 is:( move 3 , 2 ; move ua - ul - ua , 2 )  decode:( move 3 , 2 ; move ua + 5 , 2 ) 
[13213] c:0 is:( move 0 - ua , 4 ; move 3 , ua * ua )  decode:( move ua , 4 ; move 3 , 8 ) 
[13214] c:0 is:( move 3 - ua , 0 ; move 4 , ua * ua )  decode:( move 3 , 5 ; move 4 , ua * ua / ) 4 
[13215] c:0 is:( move ua + ul , 2 ; move ua - 2 , 4 )  decode:( move 8 , ua / 3 ; move 4 , 4 ) 
[13216] c:0 is:( move 4 , 3 ; move 0 - ua , ua * ua )  decode:( move 4 , 3 ; move ua , ua * ua ) 
[13217] c:0 is:( move ul - ua , ul ; move 4 , 0 - 2 )  decode:( move 0 - 4 , ul ; move ua , 2 ) 
[13218] c:0 is:( move ua + 3 , 2 ; move ua + ul , 4 )  decode:( move 9 , 2 ; move ua + ul , 4 ) 
[13219] c:0 is:( move ua , 6 ; move ua + ul , 0 - 2 )  decode:( move 8 , 4 ; move ua , 2 ) 
[13220] c:0 is:( move 3 - ua , 0 - 4 ; move ua , ul )  decode:( move 4 , ul / 6 ; move ua , 4 ) 
[13221] c:0 is:( move 2 , 2 - 3 ; move ua , ua * ua )  decode:( move ua , 4 ; move 5 , 0 - 8 ) 
[13222] c:0 is:( move ua - ul , ul ; move 4 , 0 - 2 )  decode:( move 4 , ua / 4 ; move 9 , 2 ) 
[13223] c:0 is:( move ua , 0 - 3 ; move ua , ua / 3 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[13224] c:0 is:( move ua , 0 - 3 ; move ua - ul , 4 )  decode:( move 0 - ua , 0 ; move 5 , 4 ) 
[13225] c:0 is:( move ul - ua , 0 - 3 ; move ua , 4 )  decode:( move 5 , ul / 4 ; move ua , ul ) 
[13226] c:0 is:( move 5 , 2 ; move 0 - ua , ua * ua )  decode:( move 5 , 2 ; move ua , 5 ) 
[13227] c:0 is:( move ua , 3 ; move ua - ul , 0 - 4 )  decode:loop 0 , 3 , move ua - 2 , 3 / v0 
[13228] c:0 is:( move ua , 0 ; move ua + 4 , ua / 3 )  decode:( move ua , ul ; move 4 + 4 , 2 ) 
[13229] c:0 is:( move 0 - ua , 3 / 2 ; move ua , ul )  decode:( move ua , 3 * 4 ; move ua , 2 ) 
[13230] c:0 is:( move ua - 4 , ul ; move ua + 2 , 2 )  decode:( move 2 , ul ; move 8 , 2 ) 
[13231] c:0 is:( move ua , 0 - 4 ; move 3 , ua * ua )  decode:( move 3 , 4 ; move ua , 4 / 3 ) 
[13232] c:0 is:( move 4 - ua , 2 ; move 2 + ua , ul )  decode:( move 2 , 2 ; move ua + 2 , 4 ) 
[13233] c:0 is:( move ua - 2 , 2 ; move ua + ul , 4 )  decode:( move 4 , 2 ; move ua + ul , 4 ) 
[13234] c:0 is:( move 0 - ua , 4 ; move 3 - ua , ul )  decode:( move ua , 4 ; move 3 , ul ) 
[13235] c:0 is:( move ua , ua * ua ; move 3 , 0 - 4 )  decode:( move 3 , ul ; move ua , 4 ) 
[13236] c:0 is:( move ua - ul , 3 ; move ua , 0 - 4 )  decode:( move ua , 0 - 3 ; move 5 , 4 ) 
[13237] c:0 is:( move ul - ua , 0 ; move ua , 3 / 2 )  decode:( move 5 , 0 - 5 ; move ua , 8 ) 
[13238] c:0 is:( move ua + ul , 4 ; move ua + 3 , 2 )  decode:( move ua + ul , 4 ; move 8 , 2 ) 
[13239] c:0 is:( move ul - ua , 3 ; move 0 - ua , 4 )  decode:( move 5 , 0 ; move ua , 4 ) 
[13240] c:0 is:( move ul - ua , 3 ; move ua , 0 - 4 )  decode:( move ua , ua / 3 ; move 5 , ul ) 
[13241] c:0 is:( move ua , 2 ; move 0 - ua , 4 / ua )  decode:( move ua , 2 ; move ua , 5 * 2 ) 
[13242] c:0 is:( move ua - ul , 0 - 2 ; move 4 , ul )  decode:( move 3 , 0 - 2 ; move 4 , ul ) 
[13243] c:0 is:( move ua + ul , 0 - 4 ; move 3 , ul )  decode:( move ua , 0 - 4 ; move 3 , ul ) 
[13244] c:0 is:( move 0 - 4 , ua * ua ; move 2 , ul )  decode:( move 2 , 0 ; move 4 , 0 - 4 ) 
[13245] c:0 is:( move 2 , 2 / ua ; move ua + ul , 2 )  decode:( move 2 , 2 / 4 ; move ua , 2 ) 
[13246] c:0 is:( move ua , 0 ; move ua - 2 , ua / 4 )  decode:( move ua , 0 ; move 4 , ua / 4 ) 
[13247] c:0 is:( move ua - ul , 0 ; move ua , 3 / 2 )  decode:( move 5 , 0 ; move ua , 3 / 2 ) 
[13248] c:0 is:( move ua , 4 ; move ua + ul , 0 - 4 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[13249] c:0 is:( move ua - 2 , 3 ; move ul - ua , 2 )  decode:( move 4 , 3 ; move ul - ua , 2 ) 
[13250] c:0 is:( move 2 , 3 / ua ; move ua , 0 - ul )  decode:( move ua , 9 ; move 4 - ua , 4 ) 
[13251] c:0 is:( move ua - 3 , 3 ; move ua + ul , 2 )  decode:( move 3 , 3 ; move 8 , 2 ) 
[13252] c:0 is:( move ua , 2 ; move ul - ua , 2 - 3 )  decode:( move 5 , ul ; move ua , ua / 3 ) 
[13253] c:0 is:( move ua - ul , 4 ; move ua + 2 , 2 )  decode:( move 5 , 4 ; move ua + 2 , 2 ) 
[13254] c:0 is:( move ua , 2 - 3 ; move ua - ul , 2 )  decode:( move ua , 2 - 3 ; move 5 , 2 ) 
[13255] c:0 is:( move 3 + ua , 2 ; move ua - 3 , ul )  decode:( move 3 - ua , 2 ; move 3 , ul ) 
[13256] c:0 is:( move 2 , 2 - 3 ; move ua + ul , ul )  decode:( move ua + ul , 0 ; move 2 , ul ) 
[13257] c:0 is:( move ua + ul , 0 - 3 ; move 4 , ul )  decode:( move 0 - ua , 0 ; move 4 , ul ) 
[13258] c:0 is:( move 3 , 0 - 3 ; move ua - ul , ul )  decode:loop 0 , 4 , move 2 , v0 - ul 
[13259] c:0 is:( move 4 , ul ; move ul - ua , 0 - 2 )  decode:( move 4 , 2 - 6 ; move 5 , 2 ) 
[13260] c:0 is:( move ul - ua , 0 - 3 ; move 3 , ul )  decode:( move 5 , ul / 4 ; move 3 , 2 ) 
[13261] c:0 is:( move ua + 4 , ul ; move ua + 2 , 3 )  decode:( move ua + 4 , ul ; move ua , 3 ) 
[13262] c:0 is:( move ua + 2 , 2 ; move ua - ul , 4 )  decode:( move 8 , 2 ; move 5 , 4 ) 
[13263] c:0 is:( move 4 - ua , 2 ; move ua + ul , 2 )  decode:( move 4 - ua , 2 ; move 7 , 2 ) 
[13264] c:0 is:( move ua + ul , 2 ; move ua + 3 , 4 )  decode:( move ua + ul , 9 ; move 3 , 4 ) 
[13265] c:0 is:( move ua + ul , 3 ; move ua - 3 , 2 )  decode:( move ua + ul , 3 ; move 3 , 2 ) 
[13266] c:0 is:( move 0 - ua , 2 ; move ua , 4 / ua )  decode:( move ua , 2 ; move ua , 5 * 2 ) 
[13267] c:0 is:( move ua , ua * ua ; move 2 , 2 - 3 )  decode:( move 2 , 4 ; move ua , ul ) 
[13268] c:0 is:( move ua + ul , 4 ; move ua , 0 - 4 )  decode:( move ua , 4 ; move ua + 2 , 4 ) 
[13269] c:0 is:( move ua + 3 , 2 ; move 3 - ua , ul )  decode:( move 9 , 2 ; move 4 , ul ul - v) 0 
[13270] c:0 is:( move 3 , ul ; move ua + ul , 0 - 4 )  decode:( move 3 , ul ; move ua , 0 - 4 ) 
[13271] c:0 is:( move ua + ul , 4 ; move 2 - ua , 2 )  decode:( move 4 + 3 , 4 ; move 4 , 2 ) 
[13272] c:0 is:( move 4 , 0 - 2 ; move ul - ua , ul )  decode:loop 0 , 4 , move 2 , v0 - 2 
[13273] c:0 is:( move ua + ul , ul ; move 5 , 0 - 2 )  decode:( move 4 , ua / 4 ; move 6 , 2 ) 
[13274] c:0 is:( move 0 - ua , ua * ua ; move 3 , 4 )  decode:( move ua , 5 ; move 3 , ul ) 
[13275] c:0 is:( move ua , ul ; move 3 - ua , 0 - 4 )  decode:( move 3 , 0 - 3 ; move ua , 7 ) 
[13276] c:0 is:( move ua , 0 ; move ul - ua , 3 / 2 )  decode:( move ua , 0 ; move ul - ua , 8 ) 
[13277] c:0 is:( move 5 , ul ; move ua + ul , 0 - 2 )  decode:( move ua , ua / 3 ; move 5 , 2 ) 
[13278] c:0 is:( move ua + ul , 0 - 4 ; move ua , 4 )  decode:( move ua , 0 - 4 ; move ua , 4 ) 
[13279] c:0 is:( move 0 - ua , 3 ; move 4 , ua * ua )  decode:( move ua , 6 ; move 4 , ua * ua ) 
[13280] c:0 is:( move ua , 0 - 4 ; move ua + ul , 4 )  decode:( move ua , 0 - 4 ; move 7 , 4 ) 
[13281] c:0 is:( move 3 , 3 ; move ua + 2 , ua * ua )  decode:( move 3 , 9 ; move ua + 2 , 5 ) 
[13282] c:0 is:( move ua + ul , 0 ; move ua / 2 , 4 )  decode:( move ua + ul , 0 ; move 3 , 4 ) 
[13283] c:0 is:( move ul - ua , 3 ; move 2 - ua , 2 )  decode:( move ul - ua , 3 ; move 5 , 2 ) 
[13284] c:0 is:( move ua + 2 , 4 ; move 2 - ua , ul )  decode:( move ua + 2 , 4 ; move 4 , ul ) 
[13285] c:0 is:( move ua , 3 / 2 ; move 0 - ua , ul )  decode:( move ua , 3 / 2 ; move ua , 4 ) 
[13286] c:0 is:( move 2 , 0 ; move ua + ul , ua / 4 )  decode:( move 2 , 0 ; move ua + ul , 8 ) 
[13287] c:0 is:( move 2 , 0 - 4 ; move ua - ul , ul )  decode:( move 2 , 0 - 4 ; move ua , ul ) 
[13288] c:0 is:( move ua , 0 - 3 ; move ua , ua / 3 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[13289] c:0 is:( move 3 , 0 - 4 ; move ua , ua * ua )  decode:( move ua , 4 ; move 3 , 4 / 3 ) 
[13290] c:0 is:( move ua , ua / 4 ; move 0 - ua , 2 )  decode:( move ua , 3 / 2 ; move ua , ul ) 
[13291] c:0 is:( move 2 , ul ; move ul - ua , 0 - 4 )  decode:loop 0 , 4 , move 0 - 2 , v0 / 4 
[13292] c:0 is:( move ua + 2 , 3 ; move ua - ul , 3 )  decode:( move ua + 2 , 3 ; move ua , 3 ) 
[13293] c:0 is:( move 2 , 0 - 4 ; move ul - ua , ul )  decode:( move 2 , 0 - 4 ; move ua , 4 ) 
[13294] c:0 is:( move ua + 3 , ul ; move 3 - ua , 2 )  decode:( move 3 , ul ; move ua - 3 , 2 ) 
[13295] c:0 is:( move ua + ul , 2 ; move 2 - ua , 4 )  decode:( move ua + ul , 2 ; move 4 , 4 ) 
[13296] c:0 is:( move 0 - 2 , 3 / ua ; move ua , ul )  decode:( move 2 , 0 - 2 ; move ua , 4 ) 
[13297] c:0 is:( move 4 , 0 - 3 ; move ua + ul , ul )  decode:( move 4 , 0 - 3 ; move 8 , ul ) 
[13298] c:0 is:( move ua , 2 - 3 ; move ua + ul , 3 )  decode:( move ua , 0 - 3 ; move 7 , 3 ) 
[13299] c:0 is:( move 3 - ua , 0 ; move ul - ua , 4 )  decode:( move 3 , 0 ; move ul - ua , 4 ) 
[13300] c:0 is:( move ul - ua , 2 ; move ua , 2 - 3 )  decode:( move ua , ul ; move ul - ua , ul ) 
[13301] c:0 is:( move 2 , 0 ; move ua - ul , ua / 3 )  decode:( move 2 , 0 ; move 5 , 2 ) 
[13302] c:0 is:( move ua + 2 , 3 ; move ua + ul , 4 )  decode:( move ua + 2 , 3 ; move 7 , 4 ) 
[13303] c:0 is:( move 2 - ua , 4 ; move ua + 2 , ul )  decode:( move 0 - 4 , 4 ; move 8 , ul ) 
[13304] c:0 is:( move 0 - ua , ul ; move ua , 2 / 3 )  decode:( move ua , ul ; move ua , 7 / 3 ) 
[13305] c:0 is:( move ua - 4 , 0 ; move ua + 4 , ul )  decode:( move 2 , 0 ; move 8 + 4 , ul ) 
[13306] c:0 is:( move 0 - ua , ua / 4 ; move ua , 2 )  decode:loop 0 , 2 , move ua , 0 - 7 
[13307] c:0 is:( move ua , 3 / ua ; move ua + 2 , 2 )  decode:( move ua , 3 / ua ; move 9 , 2 ) 
[13308] c:0 is:( move 0 - ua , 2 / ua ; move ua , 4 )  decode:loop 0 , 2 , move v0 - ua , 2 / 4 
[13309] c:0 is:( move ua - ul , 3 ; move ua + 3 , 2 )  decode:( move 5 , 3 ; move 9 , 2 ) 
[13310] c:0 is:( move ua , 0 ; move 2 - ua , ua / 4 )  decode:( move ua , 0 ; move 4 , ua / 4 ) 
[13311] c:0 is:( move ua , 0 - 3 ; move 4 , ua * ua )  decode:loop 0 , 4 , move 0 - 3 , 0 - v0 
[13312] c:0 is:( move ul + ua , 3 ; move ua + 2 , 4 )  decode:( move ua + ul , 3 ; move 8 , 4 ) 
[13313] c:0 is:( move 0 - ua , 4 ; move ua , 2 / ua )  decode:( move ua , ul / 4 ; move ua , 9 ) 
[13314] c:0 is:( move ua , 0 - 2 ; move ua - ul , 5 )  decode:( move ua , 0 - 2 ; move 5 , 5 ) 
[13315] c:0 is:( move 2 - ua , 3 ; move ul - ua , 2 )  decode:( move 4 , 6 ; move ul - ua , 2 ) 
[13316] c:0 is:( move 0 - ua , ul ; move ua , 3 / 2 )  decode:( move ua , 2 * 4 ; move ua , 8 ) 
[13317] c:0 is:( move ua , 2 + ua / 3 ; move ua , 2 )  decode:( move ua , 3 ; move ua , 0 - 2 ) 
[13318] c:0 is:( move ua , 0 ; move 2 - ua , 4 / ua )  decode:( move ua , 0 ; move 5 , 5 * 2 ) 
[13319] c:0 is:( move 4 , 0 - 3 ; move ua , ua * ua )  decode:( move 4 , 0 - 3 ; move ua , 5 ) 
[13320] c:0 is:( move ul , 0 - 2 ; move ua , ua / 4 )  decode:( move ua , 2 ; move ul , 6 ) 
[13321] c:0 is:( move 5 , 0 ; move 3 - ua , ua * ua )  decode:( move 5 , 0 ; move 3 - ua , 8 ) 
[13322] c:0 is:( move 0 - 3 , 4 ; move ul - ua , ul )  decode:( move 3 , ul ; move ua - ul , ul ) 
[13323] c:0 is:( move ua , 0 - 4 ; move ua , ua / 3 )  decode:0 0 loop 0 , 2 , move ua , 0 - 4 
[13324] c:0 is:( move ua + ul , 2 - 3 ; move 3 , ul )  decode:( move 3 , 3 ; move 7 , 2 - 3 ) 
[13325] c:0 is:( move ua - 3 , 2 ; move ua + ul , 4 )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[13326] c:0 is:( move ua - ul , 2 - 3 ; move 2 , ul )  decode:( move 2 , 0 - 2 ; move 5 , ul ) 
[13327] c:0 is:( move 3 - ua , 0 ; move ua , ua / 4 )  decode:( move 3 , 0 ; move ua , ua / 4 ) 
[13328] c:0 is:( move 2 - ua , 4 ; move ua - ul , 2 )  decode:( move 4 , 7 ; move ua - ul , 2 ) 
[13329] c:0 is:( move ul - ua , 2 ; move 4 - ua , 2 )  decode:( move ua - ul , 2 ; move 2 , 2 ) 
[13330] c:0 is:( move 0 - ua , 2 / 4 ; move ua , ul )  decode:( move ua , 0 - 9 ; move ua , ul ) 
[13331] c:0 is:( move ua + 2 , 0 ; move ua + ul , 8 )  decode:( move 8 , 0 ; move ua + ul , 8 ) 
[13332] c:0 is:( move ua + 2 , 3 ; move ua , ua / 3 )  decode:( move ua + 2 , 3 ; move 8 , ul ) 
[13333] c:0 is:( move ua , 0 ; move ua + ul , 4 / 3 )  decode:( move ua , 0 ; move 8 , 4 / 3 ) 
[13334] c:0 is:( move 2 , 3 / ua ; move ua + ul , 2 )  decode:( move 2 , 4 / ua ; move 7 , 2 ) 
[13335] c:0 is:( move 2 - ua , ul ; move 2 - ua , 4 )  decode:( move 2 - ua , ul ; move 4 , 4 ) 
[13336] c:0 is:( move ua + ul , 0 ; move 3 , ua / 4 )  decode:( move ua + 2 , 0 ; move 3 , 8 ) 
[13337] c:0 is:( move 3 , 4 ; move ua + 2 , ua * ua )  decode:( move 3 , 4 ; move ua + 2 , 8 ) 
[13338] c:0 is:( move ua - ul , 0 - ul ; move 3 , 4 )  decode:( move 3 , 2 - 3 ; move 3 , 4 ) 
[13339] c:0 is:( move ua + ul , 2 - 3 ; move ua , 4 )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[13340] c:0 is:( move 4 , ua * ua ; move 3 + ua , 2 )  decode:( move 4 , 8 ; move ua + 3 , 2 ) 
[13341] c:0 is:( move ua + ul , 4 ; move ua + 2 , 4 )  decode:( move ua + ul , 4 ; move 8 , 4 ) 
[13342] c:0 is:( move ua + ul , 3 ; move ua + 3 , 4 )  decode:( move ua , 3 ; move d3 + 4 4 ) 
[13343] c:0 is:( move ua / 4 , 0 ; move ua + 3 , ul )  decode:( move ul , 0 ; move ua + 3 , ul ) 
[13344] c:0 is:( move 3 - ua , 0 ; move 5 , ua * ua )  decode:( move 3 - ua , 0 ; move 5 , 8 ) 
[13345] c:0 is:( move 0 - 3 , ua / 3 ; move ua , ul )  decode:( move 3 , 2 - 3 ; move ua , 4 ) 
[13346] c:0 is:( move ua - ul , 4 ; move ua + 3 , 2 )  decode:( move 5 , 4 ; move ua + 3 , 2 ) 
[13347] c:0 is:( move 2 - ua , 4 ; move ua + 3 , ul )  decode:( move 4 , ul - move ua + 3 , ul ) 
[13348] c:0 is:( move ua + ul , ul ; move 4 , 0 - 4 )  decode:( move 4 , ul ; move ua , 0 - 4 ) 
[13349] c:0 is:( move ua + 3 , 2 / ua ; move ua , 3 )  decode:( move ua + 3 , 3 ; move ua , 3 ) 
[13350] c:0 is:( move ul , 0 - 4 ; move ul - ua , 3 )  decode:move 4 * 3 , - 3 
[13351] c:0 is:( move 4 , 4 ; move 0 - ua , ua * ua )  decode:( move 4 , 4 ; move ua , 5 ) 
[13352] c:0 is:( move 3 , 2 ; move ul - 3 + ua , ul )  decode:( move 3 , 2 ; move ua + 2 , 4 ) 
[13353] c:0 is:( move ua , 3 ; move ua - ul , 2 - 3 )  decode:( move ul - ua , 2 ; move ua , ul ) 
[13354] c:0 is:( move ua + 2 , 3 ; move ua - ul , 4 )  decode:( move ua + 2 , 3 ; move 5 , 4 ) 
[13355] c:0 is:( move 3 + ua , 4 ; move 2 - ua , ul )  decode:( move 3 + ua , 4 ; move 4 , 4 ) 
[13356] c:0 is:( move 4 , 0 - 4 ; move ua , ua * ua )  decode:( move 3 , 4 ; move ua , 4 / 3 ) 
[13357] c:0 is:( move 3 , 0 ; move ua + ul , ua / 4 )  decode:( move 3 , 0 ; move ua + ul , 8 ) 
[13358] c:0 is:( move ua + ul , 2 ; move ua , 3 / 2 )  decode:( move ua + ul , 2 ; move ua , 8 ) 
[13359] c:0 is:( move ua , 0 - 3 ; move ua , ua / 4 )  decode:loop 0 , 3 , move 0 - 4 , ua / 9 
[13360] c:0 is:( move 4 , 0 ; move ua + ul , ua / 3 )  decode:( move 4 , 0 ; move 8 , ua / 3 ) 
[13361] c:0 is:( move ua + ul , 0 ; move ua , 4 / 3 )  decode:( move ua , 0 ; move ua + ul , 7 ) 
[13362] c:0 is:( move 3 + 4 , ul ; move ua + ul , 2 )  decode:loop 0 , 3 , move ua + v0 , v0 0 0 ul / 
[13363] c:0 is:( move 2 - ua , 2 ; move ul - ua , 4 )  decode:( move 2 - ua , 2 ; move 5 , 4 ) 
[13364] c:0 is:( move 3 , 2 - 3 ; move ua , ua * ua )  decode:( move 3 , 0 - 4 ; move ua , 5 ) 
[13365] c:0 is:( move ul - ua , 4 ; move 0 - ua , 4 )  decode:( move ul - ua , 4 ; move ua , 4 ) 
[13366] c:0 is:( move ua , 2 - 3 ; move ua + ul , 4 )  decode:( move ua , 2 - 3 ; move ua , 4 ) 
[13367] c:0 is:( move ua - ul , 2 ; move ua + 3 , 4 )  decode:( move 5 , 2 ; move 3 + 3 , 4 ) 
[13368] c:0 is:( move 0 - ua , ua * ua ; move 4 , 4 )  decode:( move ua , 5 ; move 4 , 4 ) 
[13369] c:0 is:( move 3 , ua / 3 ; move 0 - ua , ul )  decode:( move 3 , ua / 4 ; move ua , 4 ) 
[13370] c:0 is:( move ua + ul , 4 ; move 3 - ua , 2 )  decode:( move ua + ul , 4 ; move 3 , 5 ) 
[13371] c:0 is:( move 2 - ua , ul ; move ua + 2 , 5 )  decode:( move 2 - ua , ul ; move 8 , 5 ) 
[13372] c:0 is:( move 0 - ua , 3 / ua ; move ua , 4 )  decode:loop 0 , 2 , move v0 - ua , 2 / ua 
[13373] c:0 is:( move ua , 0 - 4 ; move ua - ul , 4 )  decode:( move ua , 0 - 4 ; move 5 , 4 ) 
[13374] c:0 is:( move 4 + 3 , 2 ; move ua , ua * ua )  decode:( move ua + ul , 2 ; move ua , 5 ) 
[13375] c:0 is:( move 2 , ul / ua ; move 3 + ua , 2 )  decode:( move 2 , ul / 4 ; move 9 , 2 ) 
[13376] c:0 is:( move 0 - ua , 2 / ua ; move 4 , ul )  decode:( move ua , 0 - 4 ; move 4 , 4 ) 
[13377] c:0 is:( move ua , 3 / ua ; move ua + 3 , 2 )  decode:( move ua , 3 / ua ; move 9 , 2 ) 
[13378] c:0 is:( move ua + 2 , 3 ; move 4 , ua * ua )  decode:( move ua + 2 , 3 ; move 4 , 5 ) 
[13379] c:0 is:( move ua , ul ; move 0 - ua , 4 * 3 )  decode:loop 0 , 2 , move v0 - ua , 0 - 9 
[13380] c:0 is:( move 3 , ul ; move ua - ul , 0 - 4 )  decode:( move 5 , ul ; move 4 , 0 - 4 ) 
[13381] c:0 is:( move 3 , 0 - 4 ; move ua - ul , ul )  decode:( move 3 , 0 - 4 ; move 5 , ul ) 
[13382] c:0 is:( move ua , 3 / 2 ; move ua + ul , 2 )  decode:( move ua , ua / 2 ; move 7 , 2 ) 
[13383] c:0 is:( move 0 - ua , ul ; move ua , 2 / 4 )  decode:( move ua , ul ; move ua , 5 * 2 ) 
[13384] c:0 is:( move ua + ul , 0 - 4 ; move 4 , ul )  decode:( move ua + ul , 0 ; move 4 , ul ) 
[13385] c:0 is:( move 3 , 0 ; move ua + ul , 4 / ua )  decode:( move 3 , 0 ; move ua + ul , 7 ) 
[13386] c:0 is:( move ua , 0 ; move 3 - ua , ua / 4 )  decode:( move ua , 0 ; move 4 , 7 + 4 ) 
[13387] c:0 is:( move 3 , 0 ; move ua - ul , ua / 3 )  decode:( move 3 , ul / 3 ; move ua , ul ) 
[13388] c:0 is:( move ua , 0 ; move ul - ua , 2 / 4 )  decode:( move ua , 0 ; move ua - ul , 9 ) 
[13389] c:0 is:( move ua + ul , 0 ; move 4 , ua / 3 )  decode:( move 4 , 0 ; move ua + ul , ul ) 
[13390] c:0 is:( move ua + 4 , ul ; move ua + 2 , 4 )  decode:( move ua + 4 , ul ; move ua , 4 ) 
[13391] c:0 is:( move ua , ul / ua ; move 0 - 4 , 2 )  decode:( move ua , ul / 4 ; move 4 , 2 ) 
[13392] c:0 is:( move 2 - ua , 4 ; move 2 - ua , ul )  decode:( move 4 , ul ; move 5 , ul ) 
[13393] c:0 is:( move ul - ua , 3 ; move ua , 2 - 3 )  decode:( move ua , 2 ; move ul - ua , ul ) 
[13394] c:0 is:( move 0 - ua , ul / ua ; move 4 , 2 )  decode:( move ua , 0 - 4 ; move 4 , 2 ) 
[13395] c:0 is:( move 2 , ua / 3 ; move ua + ul , 2 )  decode:( move 2 , ua / 3 ; move ua , 2 ) 
[13396] c:0 is:( move 0 - 4 , ul ; move ua , 2 / ua )  decode:( move ua , 9 / 2 ; move 4 , 4 ) 
[13397] c:0 is:( move 3 , 2 - 3 ; move ua + ul , ul )  decode:( move 4 , 2 - 3 ; move 4 , ul ) 
[13398] c:0 is:( move ua , 0 ; move ul - ua , 4 * 3 )  decode:( move ua , 0 ; move 5 , 9 ) 
[13399] c:0 is:( move 2 - ua , 4 ; move ul - ua , 2 )  decode:( move 2 - ua , 4 ; move 5 , 2 ) 
[13400] c:0 is:( move ua , 0 - 3 ; move 5 , ua * ua )  decode:( move ul - ua , 0 ; move 5 , 8 ) 
[13401] c:0 is:( move 4 , 2 + 3 ; move ua , ua * ua )  decode:( move 4 , 5 ; move ua , ua * ua ) 
[13402] c:0 is:( move 3 - ua , 2 - 3 ; move ua , ul )  decode:( move 3 , ua / 4 ; move ua , ul ) 
[13403] c:0 is:( move ua , 6 ; move ua + ul , 0 - 3 )  decode:loop 0 , 3 , move v0 + 3 , 3 
[13404] c:0 is:( move ua - ul , 2 ; move 3 + 3 , ul )  decode:( move 5 , 2 ; move ul - ua , ul ) 
[13405] c:0 is:( move 0 - ua , 3 / ua ; move 3 , ul )  decode:( move 3 , 2 * 5 ; move ua , ul ) 
[13406] c:0 is:( move 3 , ua * ua ; move 4 , 0 - ul )  decode:( move 4 , 4 ; move 3 , ul ) 
[13407] c:0 is:( move 0 - 3 , ul ; move ul - ua , 4 )  decode:( move 3 , ul ; move ul - ua , 4 ) 
[13408] c:0 is:( move ul - ua , 0 ; move ua , 4 * 3 )  decode:( move 5 , 0 ; move ua , 9 ) 
[13409] c:0 is:( move ua + ul , 5 ; move ua , 0 - 4 )  decode:( move ua , 2 ; move ua + ul , 4 ) 
[13410] c:0 is:( move 3 , ul ; move ua + ul , 2 - 3 )  decode:( move 0 - 4 , 0 ; move 3 , ul ) 
[13411] c:0 is:( move ua + ul , 2 ; move ua - 3 , 4 )  decode:( move 7 , ua / 3 ; move 4 , 4 ) 
[13412] c:0 is:( move ua , 3 / ua ; move ua , 0 - 4 )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[13413] c:0 is:( move ua , ua / 3 ; move ua , 0 - 4 )  decode:( move ua , 0 - 5 ; move ua , 4 ) 
[13414] c:0 is:( move 0 - ua , 4 ; move 4 , ua * ua )  decode:( move 0 - ua , 4 ; move 4 , 8 ) 
[13415] c:0 is:( move 0 - ua , ul ; move ua , 3 * 4 )  decode:( move ua , 0 - 9 ; move ua , 9 ) 
[13416] c:0 is:( move ua + 3 , ul ; move 4 - ua , 2 )  decode:( move 9 , ul ; move 3 , 5 ) 
[13417] c:0 is:( move ua + ul , 6 ; move ua + 2 , 2 )  decode:( move ua + ul , 6 ; move 8 , 2 ) 
[13418] c:0 is:( move ua + ul , ul ; move 3 , 2 - 3 )  decode:( move 3 , ul ; move 7 , 2 - 3 ) 
[13419] c:0 is:( move ua + ul , 2 ; move 3 , 2 / ua )  decode:( move ua , 2 ; move 4 , 2 / ua ) 
[13420] c:0 is:( move ua , 0 - 3 ; move 3 / ua , ul )  decode:( move 2 , 0 - 3 ; move ua , ul ) 
[13421] c:0 is:( move ul - ua , 0 ; move 4 , 2 / ua )  decode:( move 5 , 0 ; move 4 , 4 * 4 ) 
[13422] c:0 is:( move ua + 3 , 3 / ua ; move ua , 2 )  decode:( move 9 , 9 + 4 ; move ua , 2 ) 
[13423] c:0 is:( move ua - 3 , 0 ; move ua , ua / 4 )  decode:( move 3 , 0 ; move ua , ua / 4 ) 
[13424] c:0 is:( move ua - ul , 2 ; move 2 - ua , 4 )  decode:( move 5 , 2 ; move 4 , ul ) 
[13425] c:0 is:( move 3 , ul ; move ul - ua , 0 - 4 )  decode:( move 3 , ul ; move 5 , 2 - 3 ) 
[13426] c:0 is:( move ua - ul , ul ; move 3 , 0 - 4 )  decode:( move 3 , 0 ; move ul - ua , ul ) 
[13427] c:0 is:( move ua , 4 * 3 ; move 0 - ua , ul )  decode:( move ua , 4 * 3 ; move ua , 4 ) 
[13428] c:0 is:( move 0 - ua , 3 * 4 ; move ua , ul )  decode:( move ua , 9 + 2 ; move ua , 4 ) 
[13429] c:0 is:( move 4 , 0 - 3 ; move ul - ua , ul )  decode:( move 4 , 0 - 3 ; move 5 , 4 ) 
[13430] c:0 is:( move ul - ua , 3 ; move 3 - ua , 2 )  decode:( move ul - ua , 3 ; move 4 , 2 ) 
[13431] c:0 is:( move 5 , 0 - 3 ; move ua + ul , ul )  decode:( move 5 , 0 - 3 ; move ua , ul ) 
[13432] c:0 is:( move 5 , 0 - 2 ; move ul - ua , ul )  decode:loop 0 , 2 , move 2 - ua , 0 - 2 
[13433] c:0 is:( move 2 - ua , 2 ; move 4 , ua * ua )  decode:( move 2 - ua , 2 ; move 4 , 8 ) 
[13434] c:0 is:( move 2 , 4 ; move ua + 3 , ua * ua )  decode:( move 2 , 4 ; move ua + 3 , 8 ) 
[13435] c:0 is:( move ua + ul , 2 / 3 ; move ua , 2 )  decode:( move ua + ul , 4 / move ua , 2 ) 
[13436] c:0 is:( move ua - ul , 6 ; move 0 - ua , 2 )  decode:( move 5 , 6 ; move ua , ul ) 
[13437] c:0 is:( move ua + 4 , ul ; move ua + 3 , 3 )  decode:( move ua + 3 , ul ; move 7 , 3 ) 
[13438] c:0 is:( move ua , 3 ; move 0 - ua , 4 / ua )  decode:( move ua , 3 ; move ua , 5 * 2 ) 
[13439] c:0 is:( move ua + 2 , ua / 4 ; move ua , 2 )  decode:( move ua + 2 , 3 + move ua , 2 ) 
[13440] c:0 is:( move 2 - ua , 2 ; move ua - ul , 4 )  decode:( move 2 - ua , 2 ; move 5 , 4 ) 
[13441] c:0 is:( move 5 , 0 - 3 ; move ua , ua * ua )  decode:( move 5 , 0 - 3 ; move ua , 5 ) 
[13442] c:0 is:( move 0 - 5 , 3 ; move ua , ua * ua )  decode:( move 5 , 3 ; move ua , ua * ua ) 
[13443] c:0 is:( move 0 - 3 , 3 / ua ; move ua , ul )  decode:( move 3 , 0 - 9 ; move ua , 4 ) 
[13444] c:0 is:( move 4 - ua , 0 ; move 4 , ua * ua )  decode:( move 2 , ua / 4 ; move 4 , 5 ) 
[13445] c:0 is:( move ua + 3 , 2 - 3 ; move ul , ul )  decode:( move ul , 0 - 4 ; move 7 , ul ) 
[13446] c:0 is:( move ua + 2 , ua * ua ; move 3 , 4 )  decode:( move ua + 2 , ua + 2 move 2 , 2 ) 
[13447] c:0 is:( move ua , ua / 3 ; move ua + 3 , 2 )  decode:( move ua , ua / 3 ; move ua , 2 ) 
[13448] c:0 is:( move ua , 2 - 3 ; move 3 , ua * ua )  decode:( move 3 , 4 * 3 ; move 3 , 8 ) 
[13449] c:0 is:( move ua + 2 , ua / 2 ; move ua , 4 )  decode:( move ua + 2 , 3 ; move ua , 4 ) 
[13450] c:0 is:( move ul - ua , 2 / ua ; move 2 , 2 )  decode:( move 2 , 0 - 9 ; move ua , 2 ) 
[13451] c:0 is:( move ua + 2 , 4 ; move 3 , ua * ua )  decode:( move ua + 3 , 4 ; move 3 , 5 ) 
[13452] c:0 is:( move 2 , 2 / ua ; move ua , ul - 2 )  decode:( move 2 , 2 / 6 ; move ua , ul ) 
[13453] c:0 is:( move ua + 2 , 6 ; move ua + ul , 2 )  decode:( move 8 , 6 ; move ua + 2 , 2 ) 
[13454] c:0 is:( move ua - ul , 0 - 3 ; move 4 , ul )  decode:( move 5 , 0 - 3 ; move 4 , ul ) 
[13455] c:0 is:( move ua - ul , 2 ; move ua - 4 , 2 )  decode:( move ua - ul , 2 ; move 4 , 2 ) 
[13456] c:0 is:( move ua + ul , 3 / 2 ; move ua , 2 )  decode:( move ua + ul , 3 + move ua , 2 ) 
[13457] c:0 is:( move ua , ua / 3 ; move 2 - ua , 2 )  decode:( move 4 , ua / 3 ; move 4 , 2 ) 
[13458] c:0 is:( move 0 - 3 , ul ; move ua - ul , 4 )  decode:( move 3 , 4 ; move 5 , ul ) 
[13459] c:0 is:( move ua + 2 , 4 ; move ua + ul , 4 )  decode:( move 8 , 4 ; move ua + ul , 4 ) 
[13460] c:0 is:( move 4 , 0 - 3 ; move ua - ul , ul )  decode:loop 0 , 3 , move 0 - 3 , v0 - ul 
[13461] c:0 is:( move 3 , 0 - 4 ; move ul - ua , ul )  decode:( move 0 - 4 , 0 ; move 5 , ul ) 
[13462] c:0 is:( move 0 - ua , ua / 4 ; move 2 , ul )  decode:( move 2 , 4 / ua ; move ua , 4 ) 
[13463] c:0 is:( move ul - ua , 0 - 3 ; move 4 , ul )  decode:loop 0 , 3 , move v0 - 4 , 3 / 3 
[13464] c:0 is:( move ua + 4 , 0 - 4 ; move ul , ul )  decode:( move 9 , 4 / move 4 , ul - 4 ) 
[13465] c:0 is:( move ua , 3 ; move ua + 2 , ua / 3 )  decode:( move 8 , 2 ; move ua , 2 ) 
[13466] c:0 is:( move 4 , 3 ; move ua + 2 , ua * ua )  decode:( move 4 , ua / 2 ; move 9 , 5 ) 
[13467] c:0 is:( move ul - ua , ul ; move 4 + 2 , 2 )  decode:( move ul - ua , ul ; move ua , 2 ) 
[13468] c:0 is:( move 2 - ua , ul ; move 4 + 2 , ul )  decode:( move 0 - 4 , ul ; move ua , ul ) 
[13469] c:0 is:( move ua , 0 ; move ua - 3 , ua / 4 )  decode:( move ua , 0 ; move 4 , ua / 4 ) 
[13470] c:0 is:( move 4 , ua * ua ; move 0 - ua , 4 )  decode:( move 4 , ua * ua ; move ua , ul ) 
[13471] c:0 is:( move ua + 3 , 2 ; move ua - 4 , ul )  decode:( move ua + 3 , 2 ; move 2 , ul ) 
[13472] c:0 is:( move 0 - ua , 3 ; move ua , ua / 4 )  decode:loop 0 , 2 , move ua , 3 / 2 
[13473] c:0 is:( move ua , 3 / ua ; move 0 - ua , 4 )  decode:( move ua , 9 + 4 ; move ua , ul ) 
[13474] c:0 is:( move ul - ua , 0 - 3 ; move ua , 6 )  decode:( move ua , ul / ua ; move ua , 4 ) 
[13475] c:0 is:( move ua , 2 * 5 ; move ul + ua , 2 )  decode:( move ua , 9 + 4 ; move 8 , 2 ) 
[13476] c:0 is:( move ua + 3 , 4 + 3 ; move ul , ul )  decode:( move ua + ul , 4 ; move 2 , ul ) 
[13477] c:0 is:( move 3 , 0 ; move ua - ul , 4 / ua )  decode:( move 3 , 0 ; move ul - ua , 7 ) 
[13478] c:0 is:( move ua + 4 , ul - 2 ; move 3 , ul )  decode:loop 0 , 4 , move v0 - 4 , ul ul 
[13479] c:0 is:( move 4 , 2 / ua ; move ua + ul , 2 )  decode:( move 4 , 2 / ua ; move ua , 2 ) 
[13480] c:0 is:( move 3 , 4 + 3 ; move ua , ua * ua )  decode:( move 3 , 3 / 2 ; move ua , 8 ) 
[13481] c:0 is:( move ua + 3 , 4 ; move 3 , ua * ua )  decode:( move 9 , 4 ; move 3 , ua * ua ) 
[13482] c:0 is:( move 4 , 2 - 3 ; move ua , ua * ua )  decode:( move 4 , 3 * 5 ; move ua , 5 ) 
[13483] c:0 is:( move 2 - ua , 2 ; move ua , ua / 4 )  decode:( move 2 - ua , 2 ; move ua , 8 ) 
[13484] c:0 is:( move ua , ua / 4 ; move 0 - 3 , ul )  decode:( move ua , 3 / 2 ; move 3 , 4 ) 
[13485] c:0 is:( move ua , 4 / ua ; move ua + 3 , 2 )  decode:( move ua , 3 / 4 ; move 9 , 2 ) 
[13486] c:0 is:( move ua - ul , 3 / 2 ; move ua , 2 )  decode:( move 5 , 3 / 2 ; move ua , 2 ) 
[13487] c:0 is:( move 3 , ul ; move ua + 2 , ua / 3 )  decode:( move 3 , ul ; move ua + ul , ul ) 
[13488] c:0 is:( move ua , 2 ; move ua - 2 , ua / 4 )  decode:( move ua , 2 ; move 4 , 3 / 2 ) 
[13489] c:0 is:( move ua + ul , 3 ; move 2 - ua , 5 )  decode:( move ua + ul , 3 ; move 5 , 5 ) 
[13490] c:0 is:( move ua + 2 , 3 / ua ; move ua , 4 )  decode:( move 9 , ua / 5 ; move ua , 4 ) 
[13491] c:0 is:( move ua , 6 ; move ua + ul , 0 - 4 )  decode:( move 0 - 0 - - ua , 4 ) 
[13492] c:0 is:( move ua , 4 * 3 ; move ua + ul , 2 )  decode:( move ua , 4 * 3 ; move ua , 2 ) 
[13493] c:0 is:( move 2 , ua * ua ; move ua , 2 / 3 )  decode:( move 2 , 2 ; move ua , 3 / 4 ) 
[13494] c:0 is:( move 4 , ul ; move 0 - ua , ua / 3 )  decode:( move 4 , ul ; move ua , 2 - 3 ) 
[13495] c:0 is:( move ua , 3 / 2 ; move ul - ua , 2 )  decode:( move ua , 3 / 2 ; move 5 , ul ) 
[13496] c:0 is:( move ua , 0 - ul / 3 ; move ua , 4 )  decode:( move ua , 6 ; move ua , 4 ) 
[13497] c:0 is:( move ua + 2 , 2 / ua ; move 4 , ul )  decode:( move 2 + ua , 2 ; move 4 , ul ) 
[13498] c:0 is:( move 0 - ua , 3 / 4 ; move ua , ul )  decode:( move ua , 5 ; move ua , ua / 3 ) 
[13499] c:0 is:( move 2 - ua , ul ; move ua , 3 / 2 )  decode:( move 4 , 4 ; move ua , 3 + 7 ) 
[13500] c:0 is:( move ul - ua , 0 ; move ua , 4 / 3 )  decode:( move 5 , 0 - 4 ; move 5 , 5 ) 
[13501] c:0 is:( move ua + ul , 4 * 3 ; move ua , 2 )  decode:( move ua + ul , 3 + move ua , 2 ) 
[13502] c:0 is:( move 2 , ua - 3 ; move 4 , ua - ul )  decode:( move 2 , 3 * 9 ; move 3 , ul ) 
[13503] c:0 is:( move ul - ua , 2 ; move 3 - ua , 4 )  decode:( move ua - ul , 2 ; move 3 , 4 ) 
[13504] c:0 is:( move ua , 4 + ua / 3 ; move ua , 2 )  decode:( move ua , 5 ; move ua , 0 - 2 ) 
[13505] c:0 is:( move 0 - ua , ul ; move ua , 4 / 3 )  decode:( move ua , 2 - 3 ; move ua , 8 ) 
[13506] c:0 is:( move 4 , ua * ua ; move ua , 2 - 3 )  decode:( move ua , 4 ; move 4 , ul ) 
[13507] c:0 is:( move 4 , 2 ; move 3 - ua , ua * ua )  decode:( move 4 , ua * ua ; move 3 , 8 ) 
[13508] c:0 is:( move ua , 2 - 3 ; move ua - 4 , ul )  decode:( move 2 , 2 - 3 ; move 2 , ul ) 
[13509] c:0 is:( move ul - ua , 0 ; move ua , 3 / 4 )  decode:( move 5 , 0 ; move ua , 4 ) 
[13510] c:0 is:( move 5 , 3 ; move ua + 2 , ua * ua )  decode:( move 5 , ua / 2 ; move 8 , 5 ) 
[13511] c:0 is:( move ua , 4 + 3 ; move 3 , ua * ua )  decode:( move ua , 4 + 3 ; move 3 , 8 ) 
[13512] c:0 is:( move 3 , 2 / ua ; move ua - ul , 2 )  decode:( move 3 , 2 / ua ; move 5 , 2 ) 
[13513] c:0 is:( move 3 - ua , 2 ; move ua - ul , 4 )  decode:( move 3 , 2 ; move ua - ul , 4 ) 
[13514] c:0 is:( move 4 - ua , ua / 2 ; move ua , 2 )  decode:( move ua , 2 ; move 3 , ul ) 
[13515] c:0 is:( move ua + ul , 2 / 4 ; move ua , 2 )  decode:( move ua + ul , 9 ; move ua , 2 ) 
[13516] c:0 is:( move 0 - ua , 4 * 4 ; move ua , ul )  decode:loop 0 , 2 , move ua , v0 - 3 
[13517] c:0 is:( move 4 , ua / 3 ; move 0 - ua , ul )  decode:( move ua , ua / 3 ; move ua , ul ) 
[13518] c:0 is:( move ua + ul , ul / 3 ; move 2 , 2 )  decode:( move 2 , 2 ; move ua + ul , 2 ) 
[13519] c:0 is:( move ua , 0 - 9 ; move 0 - ua , ul )  decode:( move ua , 0 - 9 ; move ua , ul ) 
[13520] c:0 is:( move ua , 4 / ua ; move ua , 0 - 4 )  decode:( move ua , 6 ; move ua , 4 ) 
[13521] c:0 is:( move ua , ua / 4 ; move ua + 3 , 2 )  decode:( move ua , ua / 4 ; move 9 , 2 ) 
[13522] c:0 is:( move ua , 4 / 3 ; move 0 - ua , ul )  decode:( move ua , 0 - 3 ; move ua , 4 ) 
[13523] c:0 is:( move ua - ul , 3 ; move 2 - ua , 4 )  decode:( move ul - ua , 6 ; move 4 , 4 ) 
[13524] c:0 is:( move 5 , 4 ; move 0 - ua , ua * ua )  decode:( move 5 , 4 ; move ua , 5 ) 
[13525] c:0 is:( move ua / 4 , 0 - 3 ; move ua , ul )  decode:( move ul , 0 - 4 ; move ua , ul ) 
[13526] c:0 is:( move 2 - ua , 2 ; move ua , 4 / ua )  decode:( move 4 , 2 ; move ua , 9 ) 
[13527] c:0 is:( move ua , ua / 0 - 3 ; move 4 , ul )  decode:( move ua , 0 - 2 ; move 4 , ul ) 
[13528] c:0 is:( move 3 , 2 / ua ; move ul - ua , 2 )  decode:( move 3 , 2 / ua ; move 5 , 5 ) 
[13529] c:0 is:( move ua , 0 ; move 3 - ua , ua / 5 )  decode:( move ua , 0 ; move 4 , 0 - 2 ) 
[13530] c:0 is:( move 3 , 4 / ua ; move 0 - ua , ul )  decode:( move 3 , ua / 4 ; move ua , 4 ) 
[13531] c:0 is:( move ua , ul ; move 0 - 3 , ul / 3 )  decode:( move ua , ul ; move 4 , 4 * 4 ) 
[13532] c:0 is:( move ua + ul , 4 ; move 4 - ua , 2 )  decode:( move ua + ul , 4 ; move 2 , 5 ) 
[13533] c:0 is:( move ua , ua - 3 / 2 ; move 2 , ul )  decode:( move ua , 9 + 2 ; move 2 , ul ) 
[13534] c:0 is:( move ul - ua , 3 ; move ua - 4 , 2 )  decode:( move 5 , 6 ; move 3 , 5 ) 
[13535] c:0 is:( move 3 , 4 ; move 3 + ua , ua * ua )  decode:( move 3 , 4 ; move 9 , ua * ua ) 
[13536] c:0 is:( move ua , 2 ; move ul - ua , 2 / 3 )  decode:( move ua , 2 ; move 5 , 5 2 + 2 ) 
[13537] c:0 is:( move ul - ua , 4 ; move 3 - ua , 2 )  decode:( move ua - ul , 4 ; move 4 , 2 ) 
[13538] c:0 is:( move ua + ul , 2 - 3 ; move 4 , ul )  decode:( move 4 , 3 ; move ua , 2 - 3 ) 
[13539] c:0 is:( move 0 - 4 , ul ; move ua - ul , 4 )  decode:( move 4 , 0 - 2 ; move 5 , 4 ) 
[13540] c:0 is:( move ua , ua * ua ; move 4 , 2 - 3 )  decode:( move 4 , 4 ; move ua , ul ) 
[13541] c:0 is:( move 4 , 0 ; move ua + ul , ua / 4 )  decode:( move 4 , 0 ; move ua + ul , 8 ) 
[13542] c:0 is:( move 3 , 3 / ua ; move ua + ul , 2 )  decode:( move 3 , 3 / ua ; move ua , 2 ) 
[13543] c:0 is:( move ua - ul , 4 ; move ua + 2 , 4 )  decode:( move 5 , 4 ; move ua + 2 , 4 ) 
[13544] c:0 is:( move 4 + ua , ua / 3 ; move ua , 2 )  decode:( move ua + 3 , ul ; move ua , 2 ) 
[13545] c:0 is:( move 3 + 4 , ul ; move ua - ul , 2 )  decode:( move 7 , ul ; move ua - ul , 2 ) 
[13546] c:0 is:( move ua + ul , 3 / 2 ; move 2 , ul )  decode:( move 2 , 3 / 2 ; move ua , ul ) 
[13547] c:0 is:( move 2 , 4 / ua ; move ua + ul , 2 )  decode:( move 2 , 2 / 4 ; move 7 , 2 ) 
[13548] c:0 is:( move ua , ua / 3 ; move 3 - ua , 2 )  decode:( move 3 , 4 ; move 1 - 4 , 2 ) 
[13549] c:0 is:( move ua - ul , 2 / 3 ; move ua , 2 )  decode:( move ua - ul , 4 / ; move ua , ) 
[13550] c:0 is:( move 4 - ua , 3 ; move ul - ua , 2 )  decode:( move 2 , 6 ; move ua - ul , 2 ) 
[13551] c:0 is:( move ua , ua / 3 ; move ua + 2 , 4 )  decode:( move ua , 3 ; move ua + 2 , 4 ) 
[13552] c:0 is:( move ua , 3 ; move ua + ul , 3 / 2 )  decode:( move ua , 3 ; move 5 , 4 + 4 ) 
[13553] c:0 is:( move ul , 4 ; move ua + ul , 4 + 2 )  decode:( move 2 , 4 ; move ua , 6 ) 
[13554] c:0 is:( move 0 - ua , 4 / ua ; move 3 , ul )  decode:( move ua , 2 + 5 ; move 3 , 4 ) 
[13555] c:0 is:( move 0 - 3 , ul / 3 ; move ua , ul )  decode:( move 3 , 0 - 9 ; move ua , 4 ) 
[13556] c:0 is:( move ua , 3 ; move ua + 2 , ua / 4 )  decode:( move ua , 9 ; move 9 , ua / 4 ) 
[13557] c:0 is:( move ua , 3 / 2 ; move ua - ul , 2 )  decode:( move ua , 3 / 2 ; move 5 , 2 ) 
[13558] c:0 is:( move 2 - ua , 3 ; move 4 , ua * ua )  decode:( move 2 - ua , 3 ; move 4 , 5 ) 
[13559] c:0 is:( move ua + 2 , ul / 3 ; move 2 , ul )  decode:( move 2 , ul ; move ua , ul 4 * 3 ) 
[13560] c:0 is:( move ua + 3 , 2 ; move 5 , ua * ua )  decode:( move 9 , 2 ; move 5 , ua * ua ) 
[13561] c:0 is:( move 3 - ua , 2 ; move ul - ua , 4 )  decode:( move 3 , 2 ; move ul - ua , 4 ) 
[13562] c:0 is:( move 3 - ua , 3 ; move ua , 2 / ua )  decode:( move 3 , ul / 4 ; move ua , 3 ) 
[13563] c:0 is:( move ua , 2 - 3 ; move ul - ua , 4 )  decode:( move ul - ua , 2 ; move 5 , 4 ) 
[13564] c:0 is:( move ua + 2 , ua / 3 ; move ua , 4 )  decode:( move 4 * 2 , 3 ; move ua , 4 ) 
[13565] c:0 is:( move ua - ul , 0 - 4 ; move 4 , ul )  decode:( move 4 , ul / 4 ; move 4 , ul ) 
[13566] c:0 is:( move 4 , 4 ; move ua + 2 , ua * ua )  decode:( move 4 , 4 ; move 8 , ua * ua ) 
[13567] c:0 is:( move 0 - ua , ul / 4 ; move 2 , ul )  decode:( move 2 , 4 / move ua , 4 ) 
[13568] c:0 is:( move ua , 2 / ua ; move ua + 3 , 4 )  decode:( move ua , 2 / ua ; move 9 , 4 ) 
[13569] c:0 is:( move ua - ul , 2 / ua ; move 3 , 2 )  decode:( move 5 , 2 / ua ; move 4 , 2 ) 
[13570] c:0 is:( move 4 - ua , 2 / ua ; move ua , 2 )  decode:( move 2 , 4 * 2 ; move ua , 2 ) 
[13571] c:0 is:( move ua , 2 - 3 ; move 4 , ua * ua )  decode:( move 4 , 4 ; move ua , 0 - 7 ) 
[13572] c:0 is:( move 0 - ua , 4 ; move ua , 4 / ua )  decode:loop 0 , 2 , move 0 - ua , 4 + v0 
[13573] c:0 is:( move ua , ua / 3 ; move ua - 3 , 2 )  decode:( move ua , ua / 3 ; move 3 , 2 ) 
[13574] c:0 is:( move 4 , ul ; move ul - ua , 0 - 4 )  decode:( move 2 - ua , 0 ; move 4 , 4 ) 
[13575] c:0 is:( move 2 , ul ; move ua + ul , 3 / 2 )  decode:( move 2 , 0 - 3 ; move ua , 7 ) 
[13576] c:0 is:( move ua , 3 ; move ua - 2 , ua / 3 )  decode:( move 6 , 3 ; move ua , ua / 3 ) 
[13577] c:0 is:( move ua + 2 , 3 ; move ul - ua , 5 )  decode:( move ua + 2 , 3 ; move 5 , 5 ) 
[13578] c:0 is:( move ua , 3 ; move 3 + 4 , ua * ua )  decode:( move ua , 3 ; move ua + ul , 5 ) 
[13579] c:0 is:( move ua , 0 - 4 ; move ua , ua / 4 )  decode:loop 0 , 2 , move 0 - ua , 4 / 4 
[13580] c:0 is:( move ua + 2 , ua / 3 ; move 3 , ul )  decode:( move 9 , 2 ; move 3 , ul ) 
[13581] c:0 is:( move ua , ua / 4 ; move ua - 2 , 2 )  decode:( move ua , 3 / 2 ; move 4 , 2 ) 
[13582] c:0 is:( move ul - ua , 3 / 2 ; move ua , 2 )  decode:( move 5 , 2 / 9 ; move ua , 2 ) 
[13583] c:0 is:( move ul - ua , 3 ; move ua + 2 , 5 )  decode:( move 5 , 0 ; move 8 , 2 ) 
[13584] c:0 is:( move ua , 2 ; move 2 - ua , ua / 4 )  decode:( move ua , ul - 9 ; move 5 , 8 ) 
[13585] c:0 is:( move ua - ul , 2 - 3 ; move ua , 4 )  decode:( move ul - ua , 2 ; move ua , 4 ) 
[13586] c:0 is:( move ua , 4 ; move 3 , 3 + ua * ua )  decode:( move ua , 4 ; move 3 , 3 + 8 ) 
[13587] c:0 is:( move ua , 2 - 3 ; move ua , ua / 3 )  decode:0 0 loop 0 , 2 , move ua , 0 - v0 
[13588] c:0 is:( move ua + 3 , 4 ; move 3 - ua , ul )  decode:( move 3 , 5 ; move ua + 3 , 2 ) 
[13589] c:0 is:( move 2 + ua , ul / ua ; move 2 , 4 )  decode:( move 2 , ul ; move 4 + 4 , 4 ) 
[13590] c:0 is:( move 3 - ua , 4 ; move ua + 3 , ul )  decode:( move 3 , ul ; move 3 + ua , 4 ) 
[13591] c:0 is:( move 2 , ua / 4 ; move ua + 2 , ul )  decode:( move 2 , 4 / 3 ; move 9 , ul ) 
[13592] c:0 is:( move ua - 2 , 2 ; move ua , ua / 4 )  decode:( move 4 , 2 ; move ua , ua / 4 ) 
[13593] c:0 is:( move 2 , ul ; move ua + 2 , ua / 4 )  decode:( move 2 , ul ; move ua + 2 , 8 ) 
[13594] c:0 is:( move ua + ul , 2 / 3 ; move 2 , ul )  decode:( move 2 , 2 ; move ua , ul / 4 ) 
[13595] c:0 is:( move 3 , ul ; move ul - ua , 2 - 3 )  decode:( move 5 , 0 ; move 4 , 0 - 4 ) 
[13596] c:0 is:( move ul - ua , 4 ; move ua , 2 - 3 )  decode:( move 0 - ua , 3 ; move ua , ul ) 
[13597] c:0 is:( move 4 , ul ; move ua - ul , 0 - 4 )  decode:( move 5 , ul ; move 4 , 0 - 4 ) 
[13598] c:0 is:( move ul - ua , 2 / ua ; move 3 , 2 )  decode:( move 5 , 4 * 4 ; move 3 , 2 ) 
[13599] c:0 is:( move 5 , 0 - 3 ; move ul - ua , ul )  decode:( move 5 , 0 - 3 ; move 5 , 4 ) 
[13600] c:0 is:( move 3 , ua - 4 ; move 2 , ua - ul )  decode:( move 2 , 0 - 2 ; move 3 , ul ) 
[13601] c:0 is:( move 4 , 0 - 4 ; move ul - ua , ul )  decode:loop 0 , 3 , move 0 - 3 , 0 - v0 
[13602] c:0 is:( move ua , 2 - 3 ; move ua - ul , 4 )  decode:( move ua , 2 - 3 ; move 5 , 4 ) 
[13603] c:0 is:( move ua , 0 ; move ul - ua , 4 / 3 )  decode:( move 5 , 4 / 3 ; move ua , 5 ) 
[13604] c:0 is:( move ul - ua , 0 - 4 ; move 4 , ul )  decode:( move 4 , 0 - 4 ; move 4 , 4 ) 
[13605] c:0 is:( move 2 - ua , ul ; move ua , 2 / 3 )  decode:( move 4 , ul ; move ua , 7 - 8 ) 
[13606] c:0 is:( move ua + ul , ua / 4 ; move 2 , 2 )  decode:( move ua + ul , 4 / 2 , 2 2 ) 
[13607] c:0 is:( move ua + 3 , ul / 3 ; move ua , 2 )  decode:( move 9 , 9 + 4 ; move ua , 2 ) 
[13608] c:0 is:( move 3 - ua , 3 ; move ua + ul , 4 )  decode:( move 3 , 5 ; move ua + ul , 4 ) 
[13609] c:0 is:( move ul , 0 - 3 ; move ua , 4 / ua )  decode:( move ua , 4 ; move ul , 2 / 4 ) 
[13610] c:0 is:( move ua , ua / 3 ; move ua + 3 , 3 )  decode:( move 9 , ua / 3 ; move 9 , 3 ) 
[13611] c:0 is:( move ua , 0 - 4 ; move ul - ua , 5 )  decode:( move 6 , 0 - 4 ; move 5 , 5 ) 
[13612] c:0 is:( move ua , 3 / ua ; move 3 - ua , 2 )  decode:( move ua , 3 / ua ; move 4 , 5 ) 
[13613] c:0 is:( move 4 , ul ; move ul - ua , 0 - 4 )  decode:( move 2 - ua , 0 ; move 4 , 4 ) 
[13614] c:0 is:( move ua - ul , 0 ; move ua , 4 / 3 )  decode:( move 5 , 0 ; move ua , 4 / 3 ) 
[13615] c:0 is:( move ua + 3 , 6 ; move ua + ul , 2 )  decode:( move 9 , 6 ; move ua + ul , 2 ) 
[13616] c:0 is:( move ua + 4 , ul ; move 3 + ua , 4 )  decode:( move ua + 4 , ul ; move 7 , 4 ) 
[13617] c:0 is:( move 0 - 4 , 3 / ua ; move ua , ul )  decode:( move 4 , 9 + 5 ; move ua , ul ) 
[13618] c:0 is:( move 4 , 0 - 4 ; move ua - ul , ul )  decode:( move 4 , 0 - 4 ; move 5 , ul ) 
[13619] c:0 is:( move ul - ua , 5 ; move 0 - ua , 4 )  decode:( move ul - ua , 5 ; move ua , 4 ) 
[13620] c:0 is:( move ua , 4 * 4 ; move 0 - ua , ul )  decode:( move ua , 4 / 4 ; move ua , 4 ) 
[13621] c:0 is:( move ua + ul , 2 / ua ; move 4 , 2 )  decode:loop 0 , 3 , move 4 , v0 - 4 
[13622] c:0 is:( move ua , 3 / 4 ; move 0 - ua , ul )  decode:( move ua , 7 ; move ua , ua / 3 ) 
[13623] c:0 is:( move ua , 0 ; move ul - ua , 3 / 4 )  decode:( move ua , 0 ; move ua , 4 ) 
[13624] c:0 is:( move ua + ul , 2 ; move 2 , ua / 4 )  decode:( move ua + ul , 2 ; move 2 , 8 ) 
[13625] c:0 is:( move ul - ua , 2 ; move ua , 2 / 3 )  decode:( move ul - ua , 2 ; move ua , 7 ) 
[13626] c:0 is:( move ua + 3 , 4 ; move ua + ul , 4 )  decode:( move 3 + ua , 4 ; move ua , 4 ) 
[13627] c:0 is:( move 0 - 4 , ul ; move ua , ua / 3 )  decode:( move 2 - ua , 0 ; move 5 , ul ) 
[13628] c:0 is:( move ua + ul , 6 ; move ua , 0 - 4 )  decode:( move ua , 6 ; move ua + ul , 4 ) 
[13629] c:0 is:( move ua + ul , ul ; move 4 , 2 - 3 )  decode:( move 4 , ul ; move ua + 2 , ul ) 
[13630] c:0 is:( move ua , 2 / 4 ; move ua + ul , 2 )  decode:( move ua , 3 / 4 ; move 8 , 2 ) 
[13631] c:0 is:( move ua + 2 , ul / 4 ; move ua , 2 )  decode:loop 0 , 3 , move v0 + 4 , 2 / 3 
[13632] c:0 is:( move 0 - ua , 4 / 3 ; move ua , ul )  decode:( move ua , 9 / 2 ; move ua , 4 ) 
[13633] c:0 is:( move 0 - ua , 4 ; move ua , ua / 4 )  decode:( move ua , 4 ; move ua , 9 + 9 ) 
[13634] c:0 is:( move ua + 4 , ul ; move 4 - ua , 2 )  decode:( move ua + 3 , ul ; move 3 , 5 ) 
[13635] c:0 is:( move 2 - ua , 3 ; move ua + ul , 5 )  decode:( move 4 , 0 ; move ua + ul , 5 ) 
[13636] c:0 is:( move ul , 0 ; move ua + ul , 3 / 4 )  decode:( move ua , 4 ; move ul , 2 / 4 ) 
[13637] c:0 is:( move 4 , ua * ua ; move 3 - ua , 2 )  decode:( move 3 , ua * ua ; move 4 , 2 ) 
[13638] c:0 is:( move ua + 4 , 4 ; move 2 - ua , ul )  decode:( move ua + 4 , 4 ; move 4 , ul ) 
[13639] c:0 is:( move 4 , ua * ua ; move ua + 2 , 4 )  decode:( move 4 , ua * ua ; move 2 , 4 ) 
[13640] c:0 is:( move 2 - ua , 3 ; move ul - ua , 4 )  decode:( move 4 , 3 ; move ua - ul , 4 ) 
[13641] c:0 is:( move ua , 4 + 6 ; move 0 - ua , ul )  decode:( move ua , 2 * 5 ; move ua , ua ) 
[13642] c:0 is:( move 5 - ua , 0 ; move ua - ul , 4 )  decode:( move 5 , 0 - 4 ; move 5 , ul ) 
[13643] c:0 is:( move ua + 2 , 6 ; move ul - ua , 2 )  decode:( move ua + 2 , 6 ; move 5 , 2 ) 
[13644] c:0 is:( move 3 , 4 ; move ua - 2 , ua * ua )  decode:( move 3 , 4 ; move 4 , ua * ua ) 
[13645] c:0 is:( move ua - ul , 2 ; move ua , 3 / 2 )  decode:( move 5 , 2 ; move ua , 3 / 2 ) 
[13646] c:0 is:( move 0 - ua , 5 ; move ua - ul , 4 )  decode:( move ua , ua * ua ; move 5 , ul ) 
[13647] c:0 is:( move 3 - ua , 3 / ua ; move ua , 3 )  decode:loop 0 , 4 , move ua - 4 , ul / ua 
[13648] c:0 is:( move 3 + ua , 4 ; move ua , ua / 3 )  decode:( move ua , 4 ; move ua + 3 , 2 ) 
[13649] c:0 is:( move ua + ul , 0 - 9 ; move ua , 2 )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[13650] c:0 is:( move ua , ul / 4 ; move ua , 0 - 4 )  decode:( move ua , 3 * 4 ; move ua , 4 ) 
[13651] c:0 is:( move ua - 3 , 3 ; move ua , ua / 3 )  decode:( move 3 , 3 ; move ua , 2 ) 
[13652] c:0 is:( move ua + ul , 2 / 3 ; move 3 , ul )  decode:( move 3 , ua / 3 ; move ua , ul ) 
[13653] c:0 is:( move 5 , ul ; move 0 - ua , 3 / ua )  decode:( move 5 , ul ; move ua , 9 ) 
[13654] c:0 is:( move ua + 2 , 4 / ua ; move 3 , ul )  decode:( move 3 , 3 / 4 ; move ua , ul ) 
[13655] c:0 is:( move ua + 2 , ul ; move ua , 4 * 4 )  decode:( move 8 , ul ; move ua , 4 * 4 ) 
[13656] c:0 is:( move ua + 3 , ua / 3 ; move ua , 4 )  decode:( move ua + 3 , 3 ; move ua , 4 ) 
[13657] c:0 is:( move 3 , 2 ; move ua + ul , ua / 4 )  decode:( move 3 , 2 ; move ua + ul , 8 ) 
[13658] c:0 is:( move ua , 9 ; move ua + ul , 0 - 2 )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[13659] c:0 is:( move ul - ua , 4 + 4 ; move 2 , ul )  decode:( move 2 , 6 ; move ua - ul , 4 ) 
[13660] c:0 is:( move ua , 2 ; move ul - ua , 4 * 3 )  decode:( move ul - ua , 2 ; move ua , 8 ) 
[13661] c:0 is:( move ua + ul , 2 / 3 ; move ua , 4 )  decode:( move ua + ul , 7 ; move ua , 4 ) 
[13662] c:0 is:( move 4 , 3 ; move 3 - ua , ua - ul )  decode:( move 3 , 2 ; move 4 , ua / 3 ) 
[13663] c:0 is:( move 3 , 2 ; move ua + ul , ul / 3 )  decode:( move 3 , 2 ; move ua , ul / 5 ) 
[13664] c:0 is:( move 8 , ul ; move ua + ul , 0 - 2 )  decode:loop 0 , 2 , move ua + 2 , ua / 3 
[13665] c:0 is:( move ua + ul , ul ; move 2 , 4 * 3 )  decode:( move ua , ul ; move 9 - 3 , 9 ) 
[13666] c:0 is:( move 4 , ua * ua ; move ua + 3 , 4 )  decode:( move 4 , 8 ; move ua + 3 , 4 ) 
[13667] c:0 is:( move 4 , 2 - 3 ; move ul - ua , ul )  decode:( move 4 , 0 ; move 5 , 0 - 4 ) 
[13668] c:0 is:( move ua + ul , 4 * 4 ; move ua , 2 )  decode:( move 8 , 4 * 4 ; move ua , 2 ) 
[13669] c:0 is:( move ua + ul , 2 ; move 4 , ua / 3 )  decode:( move 4 , ul ; move ua + ul , 2 ) 
[13670] c:0 is:( move 4 + ua , ul ; move ua , 3 * 3 )  decode:( move ua + 4 , ul ; move ua , 9 ) 
[13671] c:0 is:( move ua + 2 , 6 ; move ua + ul , 4 )  decode:( move ua + 2 , 6 ; move 9 , 4 ) 
[13672] c:0 is:( move 0 - 4 , 4 / ua ; move ua , ul )  decode:( move 4 , 5 ; move ua , 0 - 4 ) 
[13673] c:0 is:( move 4 , ul / ua ; move ua + 3 , 2 )  decode:( move 4 , ul / 4 ; move 9 , 2 ) 
[13674] c:0 is:( move 2 , 3 ; move ul - 4 , ua * ua )  decode:loop 0 , 2 , move 3 - v0 , ua * ua 
[13675] c:0 is:( move ua + 3 / ua , 3 ; move ua , 4 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[13676] c:0 is:( move 0 - ua , 9 + 2 ; move ua , ul )  decode:( move ua , ua / 4 ; move ua , 4 ) 
[13677] c:0 is:( move 3 - ua , ul ; move 2 - ua , 5 )  decode:( move 0 - 3 , ul ; move 4 , 5 ) 
[13678] c:0 is:( move ua , ul / 4 ; move 0 - ua , 4 )  decode:loop 0 , 2 , move ua , v0 - ua 
[13679] c:0 is:( move ua - 3 , ul ; move ua , 3 / 2 )  decode:( move 3 - ua , ul ; move ua , 8 ) 
[13680] c:0 is:( move 3 , 4 / ua ; move ua + ul , 2 )  decode:( move 3 , 4 / 3 ; move 7 , 2 ) 
[13681] c:0 is:( move ua , 2 / 4 ; move ua - 2 , ul )  decode:( move ua , 3 / ua ; move 4 , ul ) 
[13682] c:0 is:( move 4 + ul , 4 ; move ul - ua , 2 )  decode:( move 5 , 4 ; move ul - ua , 2 ) 
[13683] c:0 is:( move ua + 2 , 4 / ua ; move ua , 4 )  decode:( move ua + 2 , 7 ; move ua , 4 ) 
[13684] c:0 is:( move 2 , 2 / 4 ; move ua , ua * ua )  decode:( move 2 , 2 / 4 ; move ua , 8 ) 
[13685] c:0 is:( move ua , 2 / 4 ; move ua + ul , 3 )  decode:( move ua , 2 / 4 ; move ua , 3 ) 
[13686] c:0 is:( move ua + 2 , ul / 3 ; move 3 , ul )  decode:( move ua + 2 , 2 ; move 3 , ul ) 
[13687] c:0 is:( move 4 , 2 - 3 ; move ua - ul , ul )  decode:( move 4 , 0 ; move 5 , ul ) 
[13688] c:0 is:( move 2 , ua / 4 ; move ua + 3 , ul )  decode:( move 2 , 4 / 3 ; move 3 , ul ) 
[13689] c:0 is:( move ua + 2 , ul / ua ; move 3 , 4 )  decode:( move 3 , ul ; move ua , 0 - 4 ) 
[13690] c:0 is:( move 0 - 4 , ul / 3 ; move ua , ul )  decode:( move 4 , 4 * 4 ; move ua , ul ) 
[13691] c:0 is:( move 3 , 2 ; move ua + ul , 4 / ua )  decode:( move 3 , 2 ; move ua + ul , 7 ) 
[13692] c:0 is:( move ua - ul , 4 + 3 ; move 3 , ul )  decode:( move 5 , 3 / 4 ; move 3 , ul ) 
[13693] c:0 is:( move 3 , 3 / 2 ; move ua + ul , ul )  decode:( move 3 , 3 / 2 ; move 6 , ul ) 
[13694] c:0 is:( move 3 , ul ; move ua + 2 , ua / 4 )  decode:loop 0 , 3 , move 4 , 0 - 2 / v0 
[13695] c:0 is:( move ul - ua , 2 ; move ua , 3 * 4 )  decode:( move 5 , 2 ; move ua , 9 ) 
[13696] c:0 is:( move 2 - ua , 4 ; move ua + ul , 5 )  decode:( move 4 , 4 ; move ua + ul , 5 ) 
[13697] c:0 is:( move 4 , 3 / ua ; move ua + ul , 2 )  decode:( move 4 , 3 / ua ; move ua , 2 ) 
[13698] c:0 is:( move 4 , ua / 4 ; move 0 - ua , ul )  decode:( move 4 , ua / 4 ; move ua , 4 ) 
[13699] c:0 is:( move 0 - 3 , ul / ua ; move 4 , ul )  decode:( move 3 , 0 - 4 ; move 4 , ul ) 
[13700] c:0 is:( move ua - 2 , 3 ; move ua , ua / 4 )  decode:( move 4 , 3 ; move ua , ua / 4 ) 
[13701] c:0 is:( move 3 , ul / 4 ; move 0 - ua , ul )  decode:( move 3 , ul / 4 ; move ua , 4 ) 
[13702] c:0 is:( move 2 , 4 ; move ua + ul , ua / 3 )  decode:( move 2 , 4 ; move ua + ul , 2 ) 
[13703] c:0 is:( move 0 - ua , ul ; move 4 , 4 / ua )  decode:( move ua , ul ; move 4 , 5 * 4 ) 
[13704] c:0 is:( move ua - 3 , ua / 4 ; move ua , 2 )  decode:( move 3 , ua / 4 ; move ua , 2 ) 
[13705] c:0 is:( move 3 - ua , 2 / ua ; move 3 , ul )  decode:( move 3 , 4 * 4 ; move 3 , 4 ) 
[13706] c:0 is:( move 3 , 2 / ua ; move ua + ul , 4 )  decode:( move 3 , 0 - 4 ; move 7 , 4 ) 
[13707] c:0 is:( move 2 , ul / 4 ; move ua + 2 , ul )  decode:( move 2 , ul / 4 ; move 9 , ul ) 
[13708] c:0 is:( move 3 , 2 / ua ; move ua + ul , 4 )  decode:( move 3 , 0 - 4 ; move 7 , 4 ) 
[13709] c:0 is:( move ul - ua , 0 ; move 4 , 4 / ua )  decode:( move ul - ua , 0 ; move 4 , 7 ) 
[13710] c:0 is:( move ua , 4 * 3 ; move ua - ul , 2 )  decode:( move ua , 4 * 3 ; move 5 , 2 ) 
[13711] c:0 is:( move ua , 2 ; move ua - ul , 2 / 4 )  decode:loop 0 , 2 , move ua - v0 , 4 * 3 
[13712] c:0 is:( move ul - ua , 0 ; move 4 , ua / 4 )  decode:( move 5 , ua / 2 ; move 4 , 8 ) 
[13713] c:0 is:( move 0 - ua , 5 / ua ; move 3 , ul )  decode:( move ua , 4 ; move 3 , ul ) 
[13714] c:0 is:( move ua , 2 / ua ; move 3 + 4 , ul )  decode:loop 0 , 3 , move 2 + v0 , 2 - 3 
[13715] c:0 is:( move ul - ua , 3 ; move ua , 3 / 2 )  decode:( move 5 , 3 ; move ua , 3 / 2 ) 
[13716] c:0 is:( move 4 , 4 ; move ua + 3 , ua * ua )  decode:( move 4 , 4 ; move 3 + ua , 8 ) 
[13717] c:0 is:( move ua , 2 ; move ua + ul , 4 * 4 )  decode:( move ua , 2 ; move ua , 4 * 4 ) 
[13718] c:0 is:( move 4 , 6 ; move 0 - ua , ua * ua )  decode:( move 4 , 6 ; move ua , 5 ) 
[13719] c:0 is:( move ul - 3 , 4 ; move ua + 3 , ul )  decode:( move 3 , ul ; move 3 + ua , 4 ) 
[13720] c:0 is:( move 2 , ua / 3 ; move ua + ul , 4 )  decode:( move 2 , 4 ; move ua + ul , 4 ) 
[13721] c:0 is:( move ua + ul , 3 / 2 ; move ua , 4 )  decode:( move ua + ul , 3 + move ua , 4 ) 
[13722] c:0 is:( move 3 , 3 ; move ua + ul , ua / 3 )  decode:( move 8 , ua * ua ; move 3 , 2 ) 
[13723] c:0 is:( move 2 - ua , ul / 4 ; move ua , 2 )  decode:( move 4 , 4 * 4 ; move ua , 2 ) 
[13724] c:0 is:( move ua , 4 * 3 ; move 2 - ua , ul )  decode:( move ua , 3 * 4 ; move 5 , 4 ) 
[13725] c:0 is:( move ua , 3 ; move ul - ua , 2 / 3 )  decode:( move ua , 3 ; move ul - ua , 7 ) 
[13726] c:0 is:( move 2 - ua , 3 ; move ua , ua / 4 )  decode:( move 4 , 3 ; move ua , ua / 4 ) 
[13727] c:0 is:( move ua , 2 ; move 3 - ua , 4 / ua )  decode:( move ua , 2 ; move 3 , 9 ) 
[13728] c:0 is:( move 3 , ul ; move ua + ul , 3 / 2 )  decode:( move 3 , ul ; move ua + ul , 8 ) 
[13729] c:0 is:( move 2 , 2 ; move ua + ul , ul / 4 )  decode:( move 3 , 2 ; move ua , ul / 2 ) 
[13730] c:0 is:( move ua , 2 / 5 ; move ua + ul , 2 )  decode:( move ua , 9 + 4 ; move 8 , 2 ) 
[13731] c:0 is:( move 4 , 0 ; move ua - ul , ua / 4 )  decode:loop 0 , 2 , move ua - 2 , ua / 4 
[13732] c:0 is:( move 2 - ua , ul ; move ua , 4 * 3 )  decode:( move 5 , 9 + 4 ; move ua , 9 ) 
[13733] c:0 is:( move ua , 5 * 3 ; move ua + ul , 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 4 
[13734] c:0 is:( move 0 - 3 , ul / 4 ; move ua , ul )  decode:( move 3 , 0 - 4 ; move ua , 4 ) 
[13735] c:0 is:( move 0 - ua , 4 / ua ; move 4 , ul )  decode:( move ua , 2 / 5 ; move 4 , 4 ) 
[13736] c:0 is:( move ua + 3 , ul / 4 ; move ua , 2 )  decode:( move 9 , 2 / ua ; move ua , 2 ) 
[13737] c:0 is:( move 4 , ua * ua ; move 2 - ua , 4 )  decode:( move 4 , ua * ua ; move 4 , ul ) 
[13738] c:0 is:( move ua , 2 - 3 ; move ua , ua / 4 )  decode:( move ua , 9 + 2 ; move ua , 8 ) 
[13739] c:0 is:( move ua , 2 + 3 / ua ; move 4 , ul )  decode:( move ua , 4 + 3 ; move 4 , ul ) 
[13740] c:0 is:( move ua , 3 / 4 ; move ua + ul , 2 )  decode:( move ua , 4 / 5 ; move ua , 2 ) 
[13741] c:0 is:( move ua , ua - ul / 3 ; move 3 , 2 )  decode:( move ua , 6 ; move 3 , 2 ) 
[13742] c:0 is:( move ua - ul , 2 / 3 ; move ul , 2 )  decode:( move ul , 6 ; move ua - ul , 2 ) 
[13743] c:0 is:( move ua + ul , ul / 4 ; move 2 , 2 )  decode:( move ua + ul , 4 ; move 2 , 2 ) 
[13744] c:0 is:( move ul - ua , 2 - 3 ; move 4 , ul )  decode:( move 4 , 0 - 3 ; move 4 , ul ) 
[13745] c:0 is:( move 2 , 2 / 3 ; move ua - ul , ul )  decode:( move 2 , 7 ; move ua - ul , ul ) 
[13746] c:0 is:( move ua + ul , 3 / 4 ; move ua , 2 )  decode:( move 8 , 4 / 3 ; move ua , 2 ) 
[13747] c:0 is:( move ua , 3 ; move 2 - ua , ua / 4 )  decode:( move ua , 3 ; move 4 , ua / 4 ) 
[13748] c:0 is:( move ua , 3 / 2 - ua ; move ua , 4 )  decode:( move ua , ul - 7 ; move ua , 4 ) 
[13749] c:0 is:( move ua , 0 - 9 ; move ua + ul , 2 )  decode:( move ua , 0 - 9 ; move 8 , 2 ) 
[13750] c:0 is:( move ua + 4 , 4 ; move ul - 2 , ul )  decode:( move ul , 0 ; move ua + 3 , 2 ) 
[13751] c:0 is:( move ul , ua / 4 ; move 2 - ua , 2 )  decode:( move 4 , 0 - 3 ; move 2 , ul ) 
[13752] c:0 is:( move ul - ua , 2 ; move 4 , 2 / ua )  decode:( move ul - ua , 2 ; move 5 , 6 ) 
[13753] c:0 is:( move ua , ua / 4 ; move 0 - 4 , ul )  decode:( move ua , 8 ; move 4 , ua / 3 ) 
[13754] c:0 is:( move ua - 3 , 2 ; move ua , ua / 4 )  decode:( move 3 , 2 ; move ua , ua / 4 ) 
[13755] c:0 is:( move ua + ul , ua / 4 ; move 3 , 2 )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[13756] c:0 is:( move ua + 2 , ua / 4 ; move ua , 4 )  decode:( move ua + 2 , 3 / move ua , 4 ) 
[13757] c:0 is:( move 3 , 2 / ua ; move ua , 2 / ua )  decode:loop 0 , 3 , move 3 , 2 / 8 
[13758] c:0 is:( move ua , 4 + 3 ; move 4 , ua * ua )  decode:( move ua , 4 + 3 ; move 4 , 8 ) 
[13759] c:0 is:( move ul + ua , 6 ; move ua + 2 , 4 )  decode:( move ua + ul , 6 ; move 8 , 4 ) 
[13760] c:0 is:( move 2 , ul ; move ua - ul , 2 / 3 )  decode:( move 4 - ua , 4 ; move 5 , 7 ) 
[13761] c:0 is:( move 4 , ul ; move 2 - ua , 2 / ua )  decode:( move 4 , 4 / 3 ; move ua , 4 ) 
[13762] c:0 is:( move 4 - ua , 3 / ua ; move ua , 2 )  decode:( move 2 , 0 - 9 ; move ua , 5 ) 
[13763] c:0 is:( move 4 - ua , ul ; move 2 - ua , 4 )  decode:( move 0 - 4 , ul ; move 4 , 4 ) 
[13764] c:0 is:( move ua + ul , 4 / 3 ; move ua , 2 )  decode:( move ua , 5 / 3 ; move ua , 2 ) 
[13765] c:0 is:( move 2 , ua / 4 ; move ua - 2 , ul )  decode:( move 2 , ua / 4 ; move 4 , ul ) 
[13766] c:0 is:( move ua , 4 * 4 ; move ua + ul , 2 )  decode:( move ua , 4 * 4 ; move 8 , 2 ) 
[13767] c:0 is:( move ua , ua / 4 ; move 3 - ua , 2 )  decode:( move ua , ua / 4 ; move 3 , 5 ) 
[13768] c:0 is:( move 2 , 2 / 4 ; move ul + ua , ul )  decode:( move 2 , 2 / ua ; move 7 , ul ) 
[13769] c:0 is:( move 2 - ua , ul / 3 ; move 2 , ul )  decode:( move 2 , 4 * 3 ; move 4 , 4 ) 
[13770] c:0 is:( move ua , 4 / ua ; move ua + 4 , 2 )  decode:( move ua , 7 ; move + 4 + 3 , 4 ) 
[13771] c:0 is:( move ua - ul , 4 / ua ; move 2 , 2 )  decode:( move 5 , 4 / ua ; move 2 , 2 ) 
[13772] c:0 is:( move 3 , ul ; move 3 * 2 , ua * ua )  decode:( move 3 , ul ; move ua , ua * ua ) 
[13773] c:0 is:( move ua , 3 / 2 ; move ua + ul , 4 )  decode:( move 6 , ua / 2 ; move 7 , 4 ) 
[13774] c:0 is:( move 2 , ul - 2 ; move 3 , ul / ua )  decode:( move ul , 0 - 4 ; move 4 , ul ) 
[13775] c:0 is:( move ul - ua , 4 ; move ua + 2 , 5 )  decode:( move 5 , 4 ; move 8 , ua * ua ) 
[13776] c:0 is:( move ua , 3 ; move ul - ua , 3 / 2 )  decode:( move ua , 3 ; move 5 , ua / 4 ) 
[13777] c:0 is:( move ua , ua / 6 ; move ua + 2 , 2 )  decode:( move ua , ul ; move ua + 2 , 2 ) 
[13778] c:0 is:( move ua , 4 / 3 ; move ua + ul , 2 )  decode:loop 0 , 4 , move 3 , v0 - 3 
[13779] c:0 is:( move ua , 6 ; move ua + ul , 2 - 3 )  decode:( move 7 , ua * ua ; move ua , ul ) 
[13780] c:0 is:( move 6 , 0 ; move ua + ul , ua / 3 )  decode:( move 6 , 0 ; move ua + ul , 2 ) 
[13781] c:0 is:( move ua , ua / 4 ; move ua + 2 , 4 )  decode:( move ua , ua / 4 ; move 9 , 4 ) 
[13782] c:0 is:( move ua + ul , 6 ; move ua , 2 - 3 )  decode:( move ua , ua * ua ; move ua , ul ) 
[13783] c:0 is:( move ua , 2 ; move 2 - ua , ul / 4 )  decode:( move 4 , ua / 3 ; move ua , 9 ) 
[13784] c:0 is:( move ua , ua / ua - 2 ; move 3 , 4 )  decode:( move ua , 9 / ua ; move 3 , 4 ) 
[13785] c:0 is:( move 3 - ua , ul ; move ua , 3 / 2 )  decode:( move 3 , 9 + 2 ; move ua , 8 ) 
[13786] c:0 is:( move 2 , 2 ; move ul - ua , ua / 4 )  decode:( move 2 , ua * ua ; move ua , 8 ) 
[13787] c:0 is:( move ua + ul , 4 / ua ; move 3 , 2 )  decode:( move ua + ul , 4 + v0 , 2 ) 
[13788] c:0 is:( move 2 , ua * ua ; move ua , 4 * 3 )  decode:( move 2 , 0 - 5 ; move ua , 5 ) 
[13789] c:0 is:( move ua , 4 / ua ; move ua + 2 , 4 )  decode:( move ua , ua / 4 ; move 8 , 4 ) 
[13790] c:0 is:( move ua , ul / 4 ; move 2 - ua , 2 )  decode:( move ua , ul / 4 ; move 5 , 2 ) 
[13791] c:0 is:loop 0 , 4 , move 3 , 4 * 0 - 3 - v0  decode:loop 0 , 2 , move ua - v0 , 0 - 8 
[13792] c:0 is:( move 2 , ul ; move ua + 3 , ua / 4 )  decode:( move 2 , ul ; move ua + 3 , 4 ) 
[13793] c:0 is:( move ul - ua , 2 / ua ; move 2 , 4 )  decode:( move 5 , 4 * 4 ; move 2 , ul ) 
[13794] c:0 is:( move ua , 3 / 2 ; move 3 , ua * ua )  decode:( move 3 , 9 / 2 ; move 4 , 8 ) 
[13795] c:0 is:( move 3 , 2 / ua ; move 3 , ua * ua )  decode:loop 0 , 3 , move 2 , 0 - v0 / 4 
[13796] c:0 is:( move 3 - ua , 4 ; move ua , 2 / ua )  decode:( move 3 , 4 ; move ua , 0 - 9 ) 
[13797] c:0 is:( move 0 - ua , 9 ; move ua + 2 , ul )  decode:( move ua , 9 ; move ua + 2 , ul ) 
[13798] c:0 is:( move ul - ua , 3 / ua ; move 3 , 2 )  decode:( move 5 , 0 - 9 ; move 3 , 2 ) 
[13799] c:0 is:( move ua , 9 + 2 ; move 0 - ua , ul )  decode:( move ua , 2 * 3 ; move ua , 2 ) 
[13800] c:0 is:( move ua + ul , 9 ; move ua , 0 - 2 )  decode:( move ua , 9 ; move ua + ul , 2 ) 
[13801] c:0 is:( move 3 - ua , ul ; move ua , 2 / 3 )  decode:( move 3 , 4 ; move ua , 5 / 2 ) 
[13802] c:0 is:( move ua , ul / 4 ; move ua + 2 , 3 )  decode:( move ua , ul / 4 ; move 9 , 3 ) 
[13803] c:0 is:( move ua , 4 + ul / 3 ; move ua , 2 )  decode:( move ua , 0 - 2 ; move ua , 2 ) 
[13804] c:0 is:( move 0 - ua , ul / 4 ; move ua , 4 )  decode:( move ua , 4 * 4 ; move ua , ul ) 
[13805] c:0 is:( move ul - ua , 3 ; move 3 - ua , 4 )  decode:( move ul - ua , 3 ; move 4 , 4 ) 
[13806] c:0 is:( move 2 , ua - 3 ; move ua , ul / 3 )  decode:loop 0 , 4 , move 2 , v0 / 4 
[13807] c:0 is:( move ua , 4 - ul / 2 ; move ua , 2 )  decode:( move ua , 0 - 9 ; move ua , 2 ) 
[13808] c:0 is:( move 0 - ua , 4 ; move ua , ul / 4 )  decode:( move ua , ul ; move ua , 4 * 4 ) 
[13809] c:0 is:( move ua , 4 * 3 ; move ul - ua , 2 )  decode:( move ua , 3 * 4 ; move 5 , ul ) 
[13810] c:0 is:( move 2 - ua , ua ; move 4 , 3 / ua )  decode:( move 4 , 2 * 5 ; move 5 , 9 ) 
[13811] c:0 is:( move ua - ul , ul ; move 2 + 4 , 4 )  decode:( move 5 , ul ; move ul - ua , 4 ) 
[13812] c:0 is:( move 4 + 3 , 4 ; move ua , ua * ua )  decode:( move ua + ul , 4 ; move ua , 8 ) 
[13813] c:0 is:( move ua , 2 ; move ul - ua , 2 / 4 )  decode:( move ua , 2 ; move 5 , 9 ) 
[13814] c:0 is:( move ua , ul ; move ua + 2 , 4 * 4 )  decode:( move ua + 2 , 3 ; move ua , 4 0 0 0 0 0 * 2 2 4 
[13815] c:0 is:( move ua + 2 , ul / 4 ; move 2 , ul )  decode:( move ua + 2 , ul ; move 2 , ul ) 
[13816] c:0 is:( move ua - ul , 2 ; move ul - 3 , 4 )  decode:( move ua - ul , 2 ; move 2 , 4 ) 
[13817] c:0 is:( move 2 , 4 / ua ; move ua - 2 , ul )  decode:( move 2 , 7 ; move 5 , ul ) 
[13818] c:0 is:( move ua + ul , 0 ; move ua + 3 , 9 )  decode:( move ua , 0 ; move 9 , 9 ) 
[13819] c:0 is:( move 9 , 0 ; move ua + 2 , ua * ua )  decode:( move 9 , 0 ; move 9 , ua * ua ) 
[13820] c:0 is:( move 5 , 2 ; move ua - 3 , ua * ua )  decode:( move 5 , 2 ; move 3 - ua , 5 ) 
[13821] c:0 is:( move ua , ul / 4 ; move ua + 3 , 2 )  decode:( move ua , 4 / ua ; move 9 , 2 ) 
[13822] c:0 is:( move 0 - ul , 4 ; move ua , ua / 4 )  decode:( move ul , 4 / 2 ; move ua , 8 ) 
[13823] c:0 is:( move ua + 2 , ua / 3 ; move 4 , ul )  decode:( move 8 , 2 ; move 4 , ul ) 
[13824] c:0 is:( move ul , ua - 2 ; move 4 * 2 , ul )  decode:( move ul , 9 / 2 ; move ua , ul ) 
[13825] c:0 is:( move 2 - ua , 2 / 4 ; move ua , ul )  decode:( move 4 , 5 + 9 ; move ua , 4 ) 
[13826] c:0 is:( move 3 - ua , ua / 4 ; move ua , 2 )  decode:( move 4 , 2 / ua ; move ua , 2 ) 
[13827] c:0 is:( move 0 - 4 , ul / ua ; move ua , 4 )  decode:loop 0 , 3 , move 3 - ua , v0 / ua 
[13828] c:0 is:( move ua - ul , 2 ; move ua , 2 / 4 )  decode:loop 0 , 2 , move 4 + 2 , 4 * 3 
[13829] c:0 is:( move ua , ul ; move 2 - ua , 4 * 3 )  decode:( move ua , ul ; move 4 , 9 ) 
[13830] c:0 is:( move 4 , 0 ; move ul - ua , 4 / ua )  decode:( move 4 , 0 ; move ua - ul , 7 ) 
[13831] c:0 is:( move ua , ul / 4 ; move 0 - 3 , ul )  decode:( move ua , ul - 4 ; move 3 , 4 ) 
[13832] c:0 is:( move ua , 2 / 4 ; move 2 - ua , ul )  decode:( move ua , 9 + 4 ; move 5 , ul ) 
[13833] c:0 is:( move 4 , 0 ; move ul - ua , ua / 4 )  decode:( move 4 , 0 ; move ua - ul , 8 ) 
[13834] c:0 is:( move 2 , 3 ; move ua + ul , ua / 4 )  decode:( move 3 , 3 ; move ua + ul , 8 ) 
[13835] c:0 is:( move ul - ua , 0 - 3 ; move 6 , ul )  decode:( move 5 , ul / 4 ; move ua , ul ) 
[13836] c:0 is:( move 2 - ua , 3 / ua ; move ua , 4 )  decode:loop 0 , 3 , move 0 - 4 , 2 / 9 
[13837] c:0 is:( move 4 , 2 ; move ua + ul , ua / 3 )  decode:( move 4 , 2 ; move 6 , ua / 3 ) 
[13838] c:0 is:( move 0 - ua , ua / 4 ; move 4 , ul )  decode:( move ua , 2 / 3 ; move 4 , ul ) 
[13839] c:0 is:( move ua + ul , 2 ; move 3 , ua / 4 )  decode:( move ua + ul , 2 ; move 3 , 8 ) 
[13840] c:0 is:( move ua , 2 / 6 ; move 0 - ua , ul )  decode:loop 0 , 2 , move ua , v0 - 2 
[13841] c:0 is:( move ul - ua , 2 ; move ua , 2 / 4 )  decode:( move ul - ua , 2 ; move ua , 6 ) 
[13842] c:0 is:( move ua + 3 , 4 / ua ; move 2 , ul )  decode:( move 9 , 4 / 3 ; move 2 , ul ) 
[13843] c:0 is:( move 2 , 0 - 9 ; move ua , ua * ua )  decode:loop 0 , 4 , move v0 , 4 / 4 
[13844] c:0 is:( move 3 , 2 / ua ; move ua + ul , 5 )  decode:( move 3 , 2 / 6 ; move ua , 5 ) 
[13845] c:0 is:( move ul - ua , 6 ; move ua , 2 - 3 )  decode:( move ua , 5 ; move 5 , 2 ) 
[13846] c:0 is:( move 0 - 4 , ul ; move ua , ul / 4 )  decode:( move 4 , 0 - 2 ; move ua , 3 ) 
[13847] c:0 is:( move ua + 4 , 4 ; move ua , ua / 3 )  decode:( move ua , 4 ; move ua + 4 , ul ) 
[13848] c:0 is:( move 5 , ua / 3 ; move ua + ul , 2 )  decode:( move 5 , ua / 3 ; move 8 , 2 ) 
[13849] c:0 is:( move ua , 6 ; move 2 + ua , ua / 3 )  decode:( move ua + 2 , 5 ; move ua , ul ) 
[13850] c:0 is:( move 3 - ua , 4 * 3 ; move ua , ul )  decode:( move 3 , 9 ; move ua , ua / 3 ) 
[13851] c:0 is:( move 3 , ua / 2 ; move 4 , ua * ua )  decode:( move 3 , ua / 2 ; move 4 , 5 ) 
[13852] c:0 is:( move 4 , ul / 4 ; move 0 - ua , ul )  decode:( move 4 , ul / 4 ; move ua , 4 ) 
[13853] c:0 is:( move 0 - 7 , 4 ; move ua + ul , ul )  decode:( move 4 + 3 , 4 ; move 7 , ul ) 
[13854] c:0 is:( move 2 , 4 ; move ua + ul , ua / 4 )  decode:( move 2 , 4 ; move ua + ul , 8 ) 
[13855] c:0 is:( move ul , 4 / ua ; move ua + 4 , 2 )  decode:( move 2 , 4 + 4 ; move ua , 2 ) 
[13856] c:0 is:( move ua , ua / 4 ; move ua - 4 , 2 )  decode:( move ua , 3 / 2 ; move 2 , 2 ) 
[13857] c:0 is:( move ua , 4 / 3 ; move 2 - ua , ul )  decode:( move ua , 5 / 3 ; move 4 , 2 ) 
[13858] c:0 is:( move 3 , 2 / ua ; move ua , ua / 3 )  decode:( move 3 , 2 / 6 ; move ua , 2 ) 
[13859] c:0 is:( move 2 , 4 / ua ; move ua , 2 / ua )  decode:( move ua , 4 ; move 2 , ul + 4 ) 
[13860] c:0 is:( move 3 - ua , 3 ; move ua - ul , 5 )  decode:( move 3 , 3 ; move ul - ua , 5 ) 
[13861] c:0 is:( move 4 , 3 / 2 ; move ua + ul , ul )  decode:( move 4 , 3 / 2 ; move 6 , ul ) 
[13862] c:0 is:( move ua , 4 ; move ul - ua , 3 / 2 )  decode:( move ua , 4 ; move 5 , 3 + 8 ) 
[13863] c:0 is:( move ua - ul , 6 ; move ua , 2 - 3 )  decode:( move 0 - ua , 5 ; move 5 , ul ) 
[13864] c:0 is:( move ua , ua / 4 ; move ua + 3 , 4 )  decode:( move ua , ua / 4 ; move 9 , 4 ) 
[13865] c:0 is:( move 3 , ua / 4 ; move ul - ua , 2 )  decode:( move 3 , ua / 4 ; move ua , ul ) 
[13866] c:0 is:( move ua , 2 / 4 ; move ua - 3 , ul )  decode:( move ua , 3 / ua ; move 4 , ul ) 
[13867] c:0 is:( move 4 + 4 , ua * ua ; move 3 , ul )  decode:( move ua + 2 , 8 ; move 3 , ul ) 
[13868] c:0 is:( move ua + ul , 4 / ua ; move 4 , 2 )  decode:( move ua + ul , 4 / move 4 , 2 ) 
[13869] c:0 is:( move ua , 0 - 9 ; move 2 - ua , ul )  decode:( move ua , 0 - 9 ; move 4 , 4 ) 
[13870] c:0 is:( move 3 + 4 , ua ; move ua , ua / 4 )  decode:( move ua + ul , 0 ; move ua , 8 ) 
[13871] c:0 is:( move ua , 4 / ua - 3 ; move 2 , ul )  decode:( move 2 , ul ; move ua , 2 - 3 ) 
[13872] c:0 is:( move 0 - 7 , 2 / ua ; move ua , ul )  decode:( move ua + ul , 0 - move ua , ul ) 
[13873] c:0 is:( move 3 - ua , 3 ; move ua , ua / 4 )  decode:( move 3 - ua , 3 ; move ua , 8 ) 
[13874] c:0 is:( move ul - ua , 4 * 3 ; move 2 , ul )  decode:( move ua - 2 , 9 ; move 3 , 2 ) 
[13875] c:0 is:( move 4 , 4 / ua ; move ua + ul , 2 )  decode:( move 4 , 4 / ua ; move 7 , 2 ) 
[13876] c:0 is:( move ul - ua , 4 ; move 2 - 4 , ul )  decode:( move ul - ua , 4 ; move 2 , ul ) 
[13877] c:0 is:( move 2 , 3 ; move ua - ul , 4 / ua )  decode:( move 2 , 3 ; move 5 , 2 / 4 ) 
[13878] c:0 is:( move 5 , 0 ; move ul - ua , ua / 4 )  decode:loop 0 , 2 , move ua - 2 , ua / 4 
[13879] c:0 is:( move ua , 2 / 6 ; move ua + ul , 2 )  decode:( move ua , 9 + 4 ; move 8 , 2 ) 
[13880] c:0 is:( move 4 + 3 , ul ; move ua - ul , 4 )  decode:( move ua + ul , ul ; move 5 , 4 ) 
[13881] c:0 is:( move 0 - ua , 9 ; move ua + 3 , ul )  decode:( move ua , 9 ; move ua + 3 , ul ) 
[13882] c:0 is:( move 3 - ua , 2 / 4 ; move ua , ul )  decode:( move 3 , 9 + 4 ; move ua , 4 ) 
[13883] c:0 is:( move 3 , ua / 4 ; move 2 - ua , ul )  decode:( move 3 , 9 / 4 ; move 4 , 4 ) 
[13884] c:0 is:( move ua - ul , 4 / 3 ; move ua , 2 )  decode:loop 0 , 2 , move v0 - ua , 4 / 3 
[13885] c:0 is:( move 4 , ua / 4 ; move ua + ul , 2 )  decode:( move 4 , ua / 4 ; move 7 , 2 ) 
[13886] c:0 is:( move ul - 4 , ua + 4 ; move ua , 4 )  decode:( move 3 , ul ; move ua , ul ) 
[13887] c:0 is:( move ua - ul , 4 / ua ; move 3 , 2 )  decode:( move 5 , 4 + 3 ; move 3 , 2 ) 
[13888] c:0 is:( move 3 , ua / 5 ; move ua + ul , 2 )  decode:( move ua + ul , 0 ; move 2 , 2 ) 
[13889] c:0 is:( move ua , 3 / ua ; move ua , 3 / 2 )  decode:loop 0 , 3 , move ua - 2 , v0 / ua 
[13890] c:0 is:( move 5 , 2 ; move ua - ul , 2 / ua )  decode:( move 4 , 2 ; move ua , ul / 5 ) 
[13891] c:0 is:( move ua , 4 ; move ul - ua , 2 / 3 )  decode:( move ua , 4 ; move 5 , 5 * 2 ) 
[13892] c:0 is:( move ua + ul , 2 / 3 ; move 4 , ul )  decode:( move ua + ul , 3 / move 4 , ul ) 
[13893] c:0 is:( move ua / 2 , 4 ; move ua , ul - 3 )  decode:( move 0 - ua , 2 ; move 3 , 2 ) 
[13894] c:0 is:( move ua - 2 , ua / 4 ; move ua , 4 )  decode:( move 4 , ua / 4 ; move ua , 4 ) 
[13895] c:0 is:( move ua , 4 ; move ua - ul , 3 / 2 )  decode:( move ua , 4 ; move 5 , 3 / 2 ) 
[13896] c:0 is:( move ua , ua / 4 ; move ua - 2 , 4 )  decode:( move ua , ua / 4 ; move 4 , 4 ) 
[13897] c:0 is:( move 4 , ua * ua ; move ua , 3 / 2 )  decode:( move 4 , 8 ; move ua , 3 / 4 ) 
[13898] c:0 is:( move ua - 2 , 4 / 3 ; move ua , ul )  decode:( move 4 , 3 / 2 ; move ua , ul ) 
[13899] c:0 is:( move ua , 3 ; move 3 - ua , ua / 4 )  decode:( move ua , 3 ; move 4 , 8 ) 
[13900] c:0 is:( move ua , 3 ; move ul - ua , 4 * 3 )  decode:( move ua , 3 ; move ua , 6 + 4 ) 
[13901] c:0 is:( move ua + ul , 2 / 4 ; move 3 , ul )  decode:( move ua + ul , 3 ; move 3 , ul ) 
[13902] c:0 is:( move 3 , 2 / 3 ; move ul - ua , ul )  decode:( move 3 , 3 / 4 ; move 5 , 4 ) 
[13903] c:0 is:( move 3 , 2 / ua ; move ul - ua , 4 )  decode:( move 3 , 2 / ua ; move 5 , ul ) 
[13904] c:0 is:( move ul - ua , 3 ; move ua , 4 * 3 )  decode:( move 5 , 3 ; move ua , 5 * 2 ) 
[13905] c:0 is:( move ua , 3 / 2 ; move 4 , ua * ua )  decode:( move ua , 3 / 2 ; move 4 , 4 ) 
[13906] c:0 is:( move ua + ul , 4 * 3 ; move 3 , ul )  decode:( move ua + ul , 3 - move 3 , ul ) 
[13907] c:0 is:( move 4 , 2 - 3 ; move ua , ul / ua )  decode:( move 3 , 4 - move ua , 2 / ua ) 
[13908] c:0 is:( move ua , 3 / 2 ; move ua - ul , 4 )  decode:( move ua , ua / 3 ; move 5 , 4 ) 
[13909] c:0 is:( move ua , 3 / 4 ; move ua - 2 , ul )  decode:( move 0 - ua , 4 ; move 5 , ul ) 
[13910] c:0 is:( move ua , ul / 6 ; move ua + 2 , 2 )  decode:( move ua , ul / ua ; move 8 , 2 ) 
[13911] c:0 is:( move 3 - ua , ul ; move ua , 4 * 3 )  decode:( move 3 , ul ; move ua , 9 ) 
[13912] c:0 is:( move 4 , ua / 4 ; move ua + 2 , ul )  decode:( move 4 , 8 ; move 2 + ua , ul ) 
[13913] c:0 is:( move ul , 3 / 4 ; move ua + 2 , ul )  decode:( move ul , 4 ; move ua + 2 , 4 ) 
[13914] c:0 is:( move ua , ua - 4 ; move 2 / 3 , ul )  decode:( move ul , 0 ; move ua , 2 - 3 ) 
[13915] c:0 is:( move 3 , 2 ; move ua - ul , ua / 4 )  decode:( move 3 , 2 ; move 5 , ua / 4 ) 
[13916] c:0 is:( move ul - ua , 3 / ua ; move 4 , 2 )  decode:( move 5 , 9 / 4 ; move 4 , 2 ) 
[13917] c:0 is:( move ul - ua , 4 ; move ua + 2 , 6 )  decode:( move 6 , ul + 9 ; move 9 , 9 ) 
[13918] c:0 is:( move 4 , 3 / 2 ; move ua , ua * ua )  decode:( move 4 , ua / 2 ; move ua , 8 ) 
[13919] c:0 is:( move 4 , ul / ua ; move ua + 2 , 4 )  decode:( move 4 , ul / 4 ; move 8 , 4 ) 
[13920] c:0 is:( move 3 , 2 / 4 ; move ua , ua * ua )  decode:( move 3 , 3 / ua ; move ua , 8 ) 
[13921] c:0 is:( move ua + ul , 4 / 3 ; move ua , 3 )  decode:( move ua + ul , 4 / move ua , 3 ) 
[13922] c:0 is:( move ua , 2 ; move ua - ul , 3 / 4 )  decode:( move ua , 2 ; move ul - ua , 4 ) 
[13923] c:0 is:( move 2 , ul ; move ua + 4 , ua / 4 )  decode:( move 2 , ul ; move 4 + ua , 4 ) 
[13924] c:0 is:( move 3 , ua * ua ; move ua , 4 * 3 )  decode:( move 2 , 9 ; move ua , 3 / ua ) 
[13925] c:0 is:( move ua , 4 / 2 - ua ; move 3 , ul )  decode:loop 0 , 3 , move ua - 3 , v0 - ul 
[13926] c:0 is:( move 0 - 9 , 2 ; move ua + ul , ul )  decode:( move ua + 3 , 2 ; move ua , 2 ) 
[13927] c:0 is:( move 2 , 4 ; move ua + ul , 4 / ua )  decode:( move 2 , 4 ; move ua + ul , 7 ) 
[13928] c:0 is:( move 4 , ul ; move ua + 2 , ua / 4 )  decode:( move 4 , ul ; move 8 , ua / 4 ) 
[13929] c:0 is:( move 2 , 4 * 3 ; move ul - ua , ul )  decode:( move 2 , 2 * 3 ; move 5 , 2 ) 
[13930] c:0 is:( move 2 , ul ; move ua + ul , 4 / 3 )  decode:( move 2 , 4 / 3 ; move ua , 5 ) 
[13931] c:0 is:( move 3 , ul / 4 ; move ua + 2 , ul )  decode:( move 3 , ul / 4 ; move 9 , ul ) 
[13932] c:0 is:( move 2 - ua , 4 / ua ; move 3 , ul )  decode:( move 4 , 9 ; move 3 , ua / 4 ) 
[13933] c:0 is:( move 3 , 4 / ua ; move ul - ua , 2 )  decode:( move 3 , 2 / 4 ; move ua , 5 ) 
[13934] c:0 is:( move 4 , 2 ; move ua + ul , ua / 4 )  decode:( move 4 , 2 ; move ua + ul , 8 ) 
[13935] c:0 is:( move 5 , 2 + 5 ; move ua , ua * ua )  decode:( move 5 , 4 / ua ; move ua , 8 ) 
[13936] c:0 is:( move ua , ua / 3 ; move 3 , 2 / ua )  decode:( move 3 , 2 ; move ua , ul / 4 ) 
[13937] c:0 is:( move 2 , ul / ua ; move ua + 4 , 4 )  decode:( move 2 , ul ; move ua + 4 , 4 ) 
[13938] c:0 is:( move ua , ua / 3 ; move ua , 3 / 2 )  decode:( move ua , 3 / 2 ; move ua , 8 ) 
[13939] c:0 is:( move ua , 3 / 2 ; move ua , ua / 3 )  decode:( move ua , 3 / 2 ; move ua , 2 ) 
[13940] c:0 is:( move 4 , 5 ; move 2 - ua , ua * ua )  decode:( move 4 , 5 ; move 4 , 5 ) 
[13941] c:0 is:( move 3 , 2 ; move ul - ua , 4 / ua )  decode:( move 3 , 2 ; move ua - ul , 7 ) 
[13942] c:0 is:( move 3 , ul ; move ua + ul , 4 * 3 )  decode:( move 3 , ul ; move ua , 4 * 3 ) 
[13943] c:0 is:( move ua + ul , 3 / ua ; move 3 , 4 )  decode:( move ua + ul , 9 ; move 3 , 4 ) 
[13944] c:0 is:( move ua , 4 ; move 2 - ua , ua / 4 )  decode:( move ua , 4 ; move 4 , 3 + 7 ) 
[13945] c:0 is:( move 4 , 2 ; move ul - ua , ua / 3 )  decode:( move 5 , 4 ; move 4 , ul ) 
[13946] c:0 is:( move ul - 3 , 2 / 3 ; move ua , ul )  decode:( move 2 , 9 ; move ua , 2 ) 
[13947] c:0 is:( move ua - ul , 9 ; move 0 - ua , 2 )  decode:( move ul - ua , 9 ; move ua , 2 ) 
[13948] c:0 is:( move ua + ul , ul / 4 ; move 3 , 2 )  decode:( move ua + ul , 4 ; move 3 , 2 ) 
[13949] c:0 is:( move ua + ul , 3 ; move 4 , ua / 3 )  decode:( move 4 , 2 ; move ua + ul , ul ) 
[13950] c:0 is:( move ua , ul / 4 ; move ua + 2 , 4 )  decode:( move ua , ul / 4 ; move 9 , 4 ) 
[13951] c:0 is:( move 3 , 4 ; move ul - ua , 2 / ua )  decode:loop 0 , 4 , move 2 , 0 - v0 / 4 
[13952] c:0 is:( move 4 , 2 ; move ua + ul , 4 / ua )  decode:( move 4 , 2 ; move ua + ul , 7 ) 
[13953] c:0 is:( move ua + 2 , 9 ; move ua + ul , 2 )  decode:( move 8 , 9 ; move ua + ul , 2 ) 
[13954] c:0 is:( move 0 - ua , 9 ; move ul - ua , 2 )  decode:( move ua , 9 ; move ua - ul , 2 ) 
[13955] c:0 is:( move 4 , 2 / ua ; move ua + ul , 4 )  decode:( move 4 , ul / 4 ; move 7 , 4 ) 
[13956] c:0 is:( move ua + ul , 3 / 2 ; move ua , 5 )  decode:( move 8 , ua / 5 ; move ua , 5 ) 
[13957] c:0 is:( move 2 , ul / ua ; move ua , 2 / 3 )  decode:( move ul , 4 ; move ua , 7 ) 
[13958] c:0 is:( move ua , 3 ; move ua + ul , 4 / 3 )  decode:( move ua , 3 ; move 7 , 4 / 3 ) 
[13959] c:0 is:( move 4 + 4 , ul / ua ; move ua , 2 )  decode:( move ua + 2 , ul ; move ua , 2 ) 
[13960] c:0 is:( move 2 , 4 / ua ; move 3 , ua * ua )  decode:( move 2 , 4 + 3 ; move 3 , 2 ) 
[13961] c:0 is:( move ua + 2 , 4 / ua ; move 4 , ul )  decode:( move ua + 2 , 4 / move 4 , ul ) 
[13962] c:0 is:( move ul , ul / 3 ; move ua + 4 , 2 )  decode:( move ul , ul / move 4 + ua , 3 ) 
[13963] c:0 is:( move ua , 2 / 4 ; move ua + ul , 4 )  decode:( move ua , 3 / ua ; move 8 , 4 ) 
[13964] c:0 is:( move 4 , 3 / ua ; move 2 - ua , ul )  decode:( move 4 , 2 / 4 ; move 4 , 4 ) 
[13965] c:0 is:( move ua + ul , 3 ; move ua , 3 * 5 )  decode:( move ua , 3 ; move ua , 0 - 4 ) 
[13966] c:0 is:( move 3 , ul - 3 / 2 ; move ua , ul )  decode:( move 3 , 5 * 5 ; move ua , ul ) 
[13967] c:0 is:( move ua - ul , 2 / ua ; move 3 , 4 )  decode:( move 5 , ul / ua ; move 3 , 4 ) 
[13968] c:0 is:( move ua , 4 * 3 ; move 3 - ua , ul )  decode:( move ua , 3 / 4 ; move 3 , 4 ) 
[13969] c:0 is:( move ua + ul , ua / 4 ; move 2 , 4 )  decode:( move 2 , 9 ; move ua + ul , 4 ) 
[13970] c:0 is:( move 4 , ua / 4 ; move ua + 2 , ul )  decode:( move 4 , 8 ; move 2 + ua , ul ) 
[13971] c:0 is:( move 2 - ua , 4 ; move ua , ua / 4 )  decode:loop 0 , 3 , move 3 - ua , 4 / 3 
[13972] c:0 is:( move 3 , 3 * 4 ; move ua , ua * ua )  decode:( move 3 , 3 * 4 ; move ua , 8 ) 
[13973] c:0 is:( move ua , ua / 3 ; move ua , 2 / 3 )  decode:( move 6 , 2 ; move ua , 3 / 4 ) 
[13974] c:0 is:( move ua + ul , ua / 4 ; move 4 , 2 )  decode:( move ua + ul , 3 ; move 2 , 2 ) 
[13975] c:0 is:( move ua , 3 / 2 ; move 4 - ua , ul )  decode:( move 2 , 0 - 2 ; move 3 , 4 ) 
[13976] c:0 is:( move 2 , ua / 4 ; move ua + 4 , ul )  decode:( move 2 , 4 ; move 4 + 4 , ul ) 
[13977] c:0 is:( move ua + 3 , 4 / ua ; move ua , 4 )  decode:( move 9 , ua / 4 ; move ua , 4 ) 
[13978] c:0 is:( move ul - ua , 4 ; move 3 - ua , 4 )  decode:( move ul - ua , 4 ; move 3 , 4 ) 
[13979] c:0 is:( move 3 , ua / 2 ; move ua + ul , 5 )  decode:( move 3 , 5 ; move ua + ul , 5 ) 
[13980] c:0 is:( move 2 , 3 / 4 ; move ua , ua * ua )  decode:( move 2 , 4 ; move ua , ua / 4 ) 
[13981] c:0 is:( move 2 , ul ; move ul - ua , 2 / 4 )  decode:( move ua - 4 , 4 ; move ua , 9 ) 
[13982] c:0 is:( move ua + ul , 4 * 3 ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , 0 - 4 
[13983] c:0 is:( move 3 , 2 / ua ; move 4 , ua * ua )  decode:( move 3 , ul / 4 ; move 4 , 8 ) 
[13984] c:0 is:( move ul - ua , 0 ; move 4 , ua / 5 )  decode:( move ul - ua , 0 ; move 5 , 5 ) 
[13985] c:0 is:( move ua , ul ; move ua + 3 , 4 * 4 )  decode:( move ua , 4 ; move 9 , 4 * 4 ) 
[13986] c:0 is:( move ua + 2 , ul / 4 ; move ua , 4 )  decode:loop 0 , 4 , move ua - 3 , v0 - 3 
[13987] c:0 is:( move 2 - ua , ua / 4 ; move ua , 4 )  decode:( move 4 , 9 + 2 ; move ua , ul ) 
[13988] c:0 is:( move ua , 4 + 4 ; move 2 / ua , ul )  decode:( move ul , ua / 2 ; move ua , 5 ) 
[13989] c:0 is:( move 4 - ua , 4 ; move ua + ul , 4 )  decode:( move 2 , ul ; move ua + ul , 4 ) 
[13990] c:0 is:( move ua + 4 , ua / 3 ; move ua , 4 )  decode:( move ua + 4 , 3 ; move ua , 4 ) 
[13991] c:0 is:( move 4 - ua , 4 / ua ; move ua , 2 )  decode:( move 2 , 4 ; move ua , 5 ) 
[13992] c:0 is:( move ul , ua ; move 3 * 3 , 4 + ul )  decode:( move 0 - 4 , 5 ; move ua , ul ) 
[13993] c:0 is:( move 3 , ul / 4 ; move ua + ul , 2 )  decode:( move 3 , ul / 4 ; move 7 , 2 ) 
[13994] c:0 is:( move ua , 4 * 3 ; move ua + ul , 4 )  decode:loop 0 , 2 , move ua + v0 , 4 / 3 
[13995] c:0 is:( move ua + ul , 3 / 4 ; move 2 , ul )  decode:( move ua , 4 / 3 ; move 2 , ul ) 
[13996] c:0 is:( move ua , 4 * 4 ; move ua - ul , 2 )  decode:( move ua , 4 * 4 ; move ua , 2 ) 
[13997] c:0 is:( move ua , 4 - 2 / 3 ; move ua , ul )  decode:( move ua , 4 * 4 ; move ua , ul ) 
[13998] c:0 is:( move 5 - ua , 4 ; move ul - ua , 2 )  decode:( move ul , ul ; move ua - ul , 2 ) 
[13999] c:0 is:( move 5 , ul ; move 0 - ua , ua / 4 )  decode:( move 5 , ul ; move ua , 3 + 7 ) 
[14000] c:0 is:( move 2 - ua , 4 ; move ua , ul / 3 )  decode:( move ua , 4 ; move 4 , 4 * 4 ) 
[14001] c:0 is:( move ua - 3 , 3 / ua ; move 3 , ul )  decode:( move 3 , 2 / 4 ; move 3 , ul ) 
[14002] c:0 is:( move ua , ua / 4 ; move ua + 2 , 5 )  decode:loop 0 , 4 , move v0 * 2 , 5 
[14003] c:0 is:( move ua , 2 / 4 ; move 3 - ua , ul )  decode:( move ua , 2 / 4 ; move 4 , 4 ) 
[14004] c:0 is:( move 2 , 4 / ua ; move ua + ul , 4 )  decode:( move 2 , ua / 4 ; move 8 , 4 ) 
[14005] c:0 is:( move 3 , 2 ; move ul - ua , ua / 4 )  decode:( move 3 , 2 ; move 5 , ua / 4 ) 
[14006] c:0 is:( move 3 - ua , ua * ua ; move 4 , 4 )  decode:( move 3 , 5 ; move 4 , ul ) 
[14007] c:0 is:( move 3 , ua / 3 ; move ua , 2 / ua )  decode:( move 3 , 2 / move ua , 2 / ua ) 
[14008] c:0 is:( move 0 - ua , ul / 4 ; move 4 , ul )  decode:( move ua , 4 * 4 ; move 4 , 4 ) 
[14009] c:0 is:( move ul , 4 / ua ; move ua + 2 , 4 )  decode:( move 2 , ua / 2 ; move 9 , 4 ) 
[14010] c:0 is:( move 2 - ua , 4 / 3 ; move ua , ul )  decode:( move 4 , 9 / 2 ; move ua , 4 ) 
[14011] c:0 is:( move ua - ul , 3 / ua ; move 4 , 2 )  decode:( move 5 , 4 / ua ; move 5 , 2 ) 
[14012] c:0 is:( move 2 - ua , 4 / ua ; move ua , 4 )  decode:( move 4 , 5 + 5 ; move ua , ul ) 
[14013] c:0 is:( move ua - 3 , 3 ; move ua , ua / 4 )  decode:( move 3 , 3 ; move ua , ua / 4 ) 
[14014] c:0 is:( move ua - ul , 6 + 4 ; move ua , 2 )  decode:( move 5 , 9 + 6 ; move ua , 2 ) 
[14015] c:0 is:( move ua , ua / 4 ; move 4 - ua , 2 )  decode:( move ua , ua / 4 ; move 2 , ul ) 
[14016] c:0 is:( move ua , 2 / 4 ; move 3 , ua * ua )  decode:loop 0 , 4 , move ua - 4 , v0 + 6 
[14017] c:0 is:( move ua + 2 , ul / 4 ; move 3 , ul )  decode:( move 4 + 3 , 2 ; move 3 , ul ) 
[14018] c:0 is:( move ua + ul , 4 / 3 ; move 2 , ul )  decode:( move ua + ul , 9 ; move 2 , ul ) 
[14019] c:0 is:( move ua , ul / 4 ; move 0 - 4 , ul )  decode:loop 0 , 4 , move ul - ua , v0 - 3 
[14020] c:0 is:( move 3 - ua , ul / 4 ; move ua , 2 )  decode:( move 3 , 4 * 4 ; move ua , 2 ) 
[14021] c:0 is:( move 3 , ua / 4 ; move ua + 3 , ul )  decode:( move 3 , 4 / 3 ; move 3 , ul ) 
[14022] c:0 is:( move ua + ul , 2 / ua ; move 4 , 4 )  decode:loop 0 , 4 , move v0 - 4 , 0 - 7 
[14023] c:0 is:( move 0 - 4 , ul / 4 ; move ua , ul )  decode:( move 4 , 0 - 4 ; move ua , 4 ) 
[14024] c:0 is:( move ua , 6 / ua ; move ua , 0 - 4 )  decode:( move ua , ul ; move ua , 0 - 4 ) 
[14025] c:0 is:( move 4 , 4 / ua ; move ua + ul , 2 )  decode:( move 4 , 4 / ua ; move 7 , 2 ) 
[14026] c:0 is:( move ua , 9 + 2 ; move ua + ul , 2 )  decode:( move ua + ul , 9 ; move ua , 2 ) 
[14027] c:0 is:( move ua - ul , 2 ; move 3 , ua / 4 )  decode:( move 5 , 2 ; move 3 , ua / 4 ) 
[14028] c:0 is:( move 4 - ua , 2 ; move ua , ua / 4 )  decode:( move 3 , 2 ; move ua , 3 / 2 ) 
[14029] c:0 is:( move ua + ul , 2 / ua ; move 4 , 4 )  decode:loop 0 , 4 , move v0 - 4 , 0 - 7 
[14030] c:0 is:( move ua - ul , 5 ; move 4 + 2 , ul )  decode:( move ul - ua , 5 ; move ua , ul ) 
[14031] c:0 is:( move 2 , 4 * 4 ; move ua + ul , ul )  decode:( move 2 , 4 * 4 ; move ua , ul ) 
[14032] c:0 is:( move 4 , ua / 3 ; move 2 - ua , ul )  decode:loop 0 , 3 , move 3 , v0 - 2 
[14033] c:0 is:( move ua - ul , 9 ; move ua , 0 - 2 )  decode:( move ua , 9 ; move ua , 0 - 2 ) 
[14034] c:0 is:( move ua , 2 ; move ul - ua , 3 / 4 )  decode:( move ua , 2 ; move ul - ua , 7 ) 
[14035] c:0 is:( move 3 - ua , 2 / ua ; move 4 , ul )  decode:( move 3 , 4 * 4 ; move 4 , 4 ) 
[14036] c:0 is:( move ua - 3 , 3 ; move ul - ua , 5 )  decode:( move 3 - ua , 3 ; move ua , 5 ) 
[14037] c:0 is:( move 2 , 2 / 4 ; move ua - ul , ul )  decode:( move 2 , 2 / 4 ; move ua , ul ) 
[14038] c:0 is:( move ua , 2 - 3 ; move 4 , ul / ua )  decode:( move 4 , 0 - 4 ; move ua , ul ) 
[14039] c:0 is:( move ua , 4 / 3 ; move ua - ul , 2 )  decode:( move ua , 4 / 3 ; move 5 , 2 ) 
[14040] c:0 is:( move 3 , 4 / ua ; move ua - ul , 2 )  decode:( move 3 , 4 / ua ; move ua , 2 ) 
[14041] c:0 is:( move ua - ul , 4 * 4 ; move ua , 2 )  decode:( move 5 , 4 * 4 ; move ua , 2 ) 
[14042] c:0 is:( move 3 , 4 ; move ua + ul , ua / 3 )  decode:( move 3 , 4 ; move 8 , 2 ) 
[14043] c:0 is:( move 2 , 3 / 4 ; move ua + ul , ul )  decode:( move 2 , 4 / 3 ; move 8 , ul ) 
[14044] c:0 is:( move 3 , ua / 3 ; move ua + ul , 4 )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[14045] c:0 is:( move ul - ua , 2 / ua ; move 3 , 4 )  decode:loop 0 , 4 , move 2 , 4 + 4 / 4 
[14046] c:0 is:( move ua + 5 , 4 ; move ua + ul , 4 )  decode:( move ua + 4 , 4 ; move ua , 4 ) 
[14047] c:0 is:( move 3 , ul ; move ua + 3 , ua / 4 )  decode:( move 3 , ul ; move ua + 3 , 7 ) 
[14048] c:0 is:( move 3 , 3 ; move ua , ul - ua / 3 )  decode:( move 3 , 3 ; move ua , 2 - 3 ) 
[14049] c:0 is:( move 4 , ua - 4 ; move 3 , ua - ul )  decode:( move 3 , 0 - 2 ; move 4 , ul ) 
[14050] c:0 is:( move 2 - ua , 4 * 4 ; move ua , ul )  decode:( move 4 , 2 / 5 ; move ua , 4 ) 
[14051] c:0 is:( move 0 - ua , 9 ; move ua - ul , 2 )  decode:( move 0 - ua , 9 ; move 6 , 2 ) 
[14052] c:0 is:( move ul - ua , 4 / 3 ; move ua , 2 )  decode:( move ua , 9 / 2 ; move ua , ul ) 
[14053] c:0 is:( move 4 , 2 ; move ua + ul , ul / 3 )  decode:( move 3 , 2 ; move ua , ul / ul ) 
[14054] c:0 is:( move 2 - ua , 4 ; move ua , 4 / ua )  decode:( move 4 , 4 ; move ua , 5 * 2 ) 
[14055] c:0 is:( move ua , 4 ; move ua - 2 , ua / 4 )  decode:( move ua , 4 ; move 4 , 3 + 8 ) 
[14056] c:0 is:( move ua - ul , ua / 4 ; move 3 , 2 )  decode:( move 5 , 3 / ua ; move 3 , 2 ) 
[14057] c:0 is:( move 3 , 3 ; move ua + ul , ua / 4 )  decode:( move 3 , 3 ; move ua + ul , 8 ) 
[14058] c:0 is:( move ua + ul , 9 ; move ua + 2 , 2 )  decode:( move ua + ul , 9 ; move 8 , 2 ) 
[14059] c:0 is:( move 2 , 4 / 3 ; move ua + ul , ul )  decode:( move 2 , 4 / 3 ; move 6 , ul ) 
[14060] c:0 is:( move 2 , ul / ua ; move ua , 3 / 2 )  decode:( move 2 , 0 ; move ua , 8 ) 
[14061] c:0 is:( move ua + 4 , ul ; move ua , 4 * 4 )  decode:( move ua + 3 , ul ; move 3 , 9 ) 
[14062] c:0 is:( move ua + ul , 4 / 5 ; move ua , 2 )  decode:( move 7 , 4 / 5 ; move ua , 2 ) 
[14063] c:0 is:( move 4 , 2 / 4 ; move ua , ua * ua )  decode:( move 4 , 4 / ua ; move ua , 8 ) 
[14064] c:0 is:( move 4 , 2 / ua ; move ua + ul , 5 )  decode:( move 4 , 2 / ua ; move 7 , 5 ) 
[14065] c:0 is:( move 3 - ua , 2 / ua ; move 5 , ul )  decode:( move 3 , 0 - 9 ; move 5 , 4 ) 
[14066] c:0 is:( move ua , ua / 2 ; move 3 , 4 / ua )  decode:( move ua , 3 ; move 3 , 7 ) 
[14067] c:0 is:( move ua + ul , 3 ; move 4 , ua / 4 )  decode:( move ua + ul , 3 ; move 4 , 8 ) 
[14068] c:0 is:( move ul - ua , ua / 4 ; move 2 , 4 )  decode:( move 5 , 9 + 2 ; move 2 , ul ) 
[14069] c:0 is:( move ua - ul , 4 ; move 2 , ua / 4 )  decode:( move 5 , 4 ; move 3 , 3 / 2 ) 
[14070] c:0 is:( move 9 , ua * ua ; move ua + 2 , 2 )  decode:( move 9 , ua * ua ; move 9 , 2 ) 
[14071] c:0 is:( move 3 - ua , ul ; move ua , 4 / 3 )  decode:( move 3 , 4 ; move ua , 3 / 2 ) 
[14072] c:0 is:( move 4 , ua / 2 ; move 4 , ua * ua )  decode:( move 0 - 4 , 0 ; move 4 , 5 ) 
[14073] c:0 is:( move 4 , 4 ; move ua + ul , ua / 3 )  decode:( move ua + ul , 3 ; move ua , 2 ) 
[14074] c:0 is:( move ul - ua , ua / 4 ; move 4 , 2 )  decode:( move ua , 2 / 4 ; move 4 , ul ) 
[14075] c:0 is:( move 3 , 4 ; move ua + ul , ua / 4 )  decode:( move 3 , 4 ; move ua + ul , 8 ) 
[14076] c:0 is:( move ua , 9 ; move ua + ul , 0 - 4 )  decode:( move 0 - 7 , ua ; move ua , ul ) 
[14077] c:0 is:( move ua - ul , 2 / 4 ; move 3 , ul )  decode:( move 5 , 4 / ua ; move 3 , ul ) 
[14078] c:0 is:( move ua - ul , 3 / 2 ; move 4 , ul )  decode:( move 5 , 3 / 2 ; move 4 , ul ) 
[14079] c:0 is:( move ul - 3 , ua ; move ua , 4 * 4 )  decode:( move 2 , 3 ; move ua , 2 / ua ) 
[14080] c:0 is:( move 3 , ua / 4 ; move ua , 2 / ua )  decode:( move ua , 5 ; move 3 , ul / 4 ) 
[14081] c:0 is:( move 4 , ul ; move ul - ua , 3 / 2 )  decode:( move 4 , ul ; move ua - ul , 7 ) 
[14082] c:0 is:( move 5 , ua * ua ; move 3 , ul - 3 )  decode:( move 3 , 3 ; move 5 , 2 ) 
[14083] c:0 is:( move 4 , ua / 4 ; move 2 - ua , ul )  decode:( move 4 , ua / 4 ; move 4 , 4 ) 
[14084] c:0 is:( move 3 , 0 - 9 ; move ua + ul , ul )  decode:( move 3 , 9 / 2 ; move 8 , ul ) 
[14085] c:0 is:( move 4 , ul ; move ua + 3 , ua / 4 )  decode:( move 4 , ul ; move 3 + ua , 8 ) 
[14086] c:0 is:( move 4 , ul / 4 ; move ua + ul , 2 )  decode:( move 4 , ul / 4 ; move 7 , 2 ) 
[14087] c:0 is:( move ua + ul , ul ; move 3 , 4 / 3 )  decode:( move ua + ul , ul ; move 2 , 8 ) 
[14088] c:0 is:( move ua , 0 - 9 ; move ua + ul , 4 )  decode:( move ua , 0 - 9 ; move 7 , 4 ) 
[14089] c:0 is:( move 3 , 2 / ua ; move ua , ua / 4 )  decode:( move ua , 5 ; move 3 , ua / 4 ) 
[14090] c:0 is:( move ul - ua , 2 / 4 ; move ua , 4 )  decode:loop 0 , 3 , move 2 - ua , 0 - 0 4 
[14091] c:0 is:( move ua - ul , 9 + 2 ; move ua , 2 )  decode:( move 5 , 9 + 2 ; move ua , 2 ) 
[14092] c:0 is:( move 4 , ul / 4 ; move ua + 2 , ul )  decode:( move 4 , ul / 4 ; move 9 , ul ) 
[14093] c:0 is:( move ua , 9 / ua ; move ua , 0 - 2 )  decode:( move ua , 9 + 2 ; move ua , 2 ) 
[14094] c:0 is:( move ul - ua , 4 ; move ua , 4 * 3 )  decode:( move 5 , ul - 4 ; move ua , 9 ) 
[14095] c:0 is:( move 4 , 3 / 2 ; move ul - ua , ul )  decode:( move 4 , 2 / 3 ; move 5 , ul ) 
[14096] c:0 is:( move 5 , ua / 2 ; move 3 - ua , ul )  decode:( move ul - ua , 0 ; move 4 , ul ) 
[14097] c:0 is:( move 3 , ul ; move ul - ua , 2 / 4 )  decode:( move 3 , ul ; move ua - ul , 9 ) 
[14098] c:0 is:( move ua + 2 , ul / 6 ; move 2 , ul )  decode:( move 4 * 2 , ul ; move 2 , ul ) 
[14099] c:0 is:( move 4 , 4 / ua ; move ua - ul , 2 )  decode:( move 4 , 4 / ua ; move ua , 2 ) 
[14100] c:0 is:( move 3 , ua / 3 ; move ua - ul , 4 )  decode:( move 3 , 2 ; move ua - ul , 4 ) 
[14101] c:0 is:( move ua - 4 , 6 ; move ua - ul , 2 )  decode:( move 4 - ua , 3 ; move ua , 2 ) 
[14102] c:0 is:( move ua , 3 ; move 4 - ua , ua / 4 )  decode:( move ua , 3 ; move 9 - ua , 8 ) 
[14103] c:0 is:( move 5 , 2 ; move ul - ua , ua / 3 )  decode:( move 2 - ua , ul ; move 5 , ul ) 
[14104] c:0 is:( move 3 , ul ; move ua + ul , 4 / 3 )  decode:( move 3 , 0 - 4 ; move 3 , 5 ) 
[14105] c:0 is:( move ua + ul , ua / 3 ; move 4 , 4 )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[14106] c:0 is:( move ua , 3 / 4 ; move ua + ul , 4 )  decode:( move ua , 7 ; move ua + ul , 4 ) 
[14107] c:0 is:( move 2 , 3 / 4 ; move ul - ua , ul )  decode:( move 2 , 4 / 3 ; move 5 , 4 ) 
[14108] c:0 is:( move ul - ua , 2 ; move 4 , 4 / ua )  decode:( move ul - ua , 2 ; move 4 , 7 ) 
[14109] c:0 is:( move 3 , ua / 6 ; move ua + ul , 2 )  decode:( move 3 , ul ; move 7 , 2 ) 
[14110] c:0 is:( move 3 , ua / 3 ; move ua , 3 / ua )  decode:( move 3 , 2 ; move ua , 2 / 4 ) 
[14111] c:0 is:( move 3 , 4 / ua - 3 ; move ua , ul )  decode:( move 3 , 4 / 3 ; move ua , ul ) 
[14112] c:0 is:( move 3 / 2 , ua ; move ua , ua / 4 )  decode:( move 2 , 0 ; move ua , ua * ua ) 
[14113] c:0 is:( move ua + ul , ua / 4 ; move 4 , 3 )  decode:( move 3 , ua / 4 ; move 8 , 3 ) 
[14114] c:0 is:( move 4 , 2 / ua ; move 4 , ua * ua )  decode:( move 4 , 2 / ua ; move 4 , 5 ) 
[14115] c:0 is:( move 3 , 3 ; move ul - ua , 4 / ua )  decode:( move 4 , 3 ; move ua - ul , 9 ) 
[14116] c:0 is:( move 3 - ua , 4 / ua ; move ua , 4 )  decode:( move 3 , 9 + 4 ; move ua , 4 ) 
[14117] c:0 is:( move ua , 5 + 5 ; move 3 , ua * ua )  decode:( move ua , 0 - 5 ; move 3 , 8 ) 
[14118] c:0 is:( move 3 - ua , ul ; move ua , 4 * 4 )  decode:( move 3 , 4 ; move ua , ul / 4 ) 
[14119] c:0 is:( move 3 , ul ; move ua + 4 , ua / 4 )  decode:( move 3 , ul ; move 4 + 4 , 7 ) 
[14120] c:0 is:( move 4 , ua * ua ; move 4 + 4 , ul )  decode:( move 4 , ua * ua ; move 8 , ul ) 
[14121] c:0 is:( move 2 , ul / 4 ; move ua + ul , 4 )  decode:( move 2 , ul ; move 4 + 4 , 4 ) 
[14122] c:0 is:( move ua , 4 / ua / 3 ; move ua , 2 )  decode:( move ua , ul / 3 ; move ua , 2 ) 
[14123] c:0 is:( move ua + ul , ul / 4 ; move 4 , 2 )  decode:loop 0 , 4 , move 3 , v0 - 4 
[14124] c:0 is:( move 3 , ua / 4 ; move ua + 4 , ul )  decode:( move 3 , 4 / 4 ; move 4 , ul ) 
[14125] c:0 is:( move ua , 4 / 3 ; move 3 - ua , ul )  decode:( move ua , 4 / 3 ; move 3 , 4 ) 
[14126] c:0 is:( move ul - ua , 3 ; move ua , 4 / 3 )  decode:( move 5 , 0 - 4 ; move 5 , 9 ) 
[14127] c:0 is:( move ua , 4 + 6 ; move ua + ul , 4 )  decode:( move ua , 5 + 4 ; move 8 , 4 ) 
[14128] c:0 is:( move ua + ul , ua / 4 ; move 3 , 4 )  decode:( move ua + ul , 8 ; move 3 , 4 ) 
[14129] c:0 is:( move 3 , 4 * 4 ; move ua + ul , ul )  decode:( move 3 , 4 * 4 ; move 8 , ul ) 
[14130] c:0 is:( move ul - ua , ul / 4 ; move 3 , 2 )  decode:( move 5 , 4 * 4 ; move 4 , 2 ) 
[14131] c:0 is:( move ul - 4 , 5 ; move 2 - ua , ul )  decode:( move 3 , ul ; move 4 , ul ) 
[14132] c:0 is:( move ua , ua / 6 ; move ua + 2 , 4 )  decode:( move ua , ul ; move 8 , 4 ) 
[14133] c:0 is:( move ua , 4 * 3 ; move ua - ul , 4 )  decode:( move ua , 3 * 4 ; move 5 , 4 ) 
[14134] c:0 is:( move ua , ul / 2 ; move ul - 5 , 2 )  decode:( move ua , 5 / 4 ; move 4 , 5 ) 
[14135] c:0 is:( move 0 - 7 , ul ; move ua + ul , 5 )  decode:( move ua + ul , 9 ; move 8 , 5 ) 
[14136] c:0 is:( move ua , 2 / 3 ; move 3 , ul / ua )  decode:( move 3 , 4 ; move ua , 6 ) 
[14137] c:0 is:( move ul - ua , 4 / 3 ; move 2 , ul )  decode:( move 5 , 2 - 9 ; move 2 , 4 ) 
[14138] c:0 is:( move 3 , ua / 2 ; move ua , ua / 4 )  decode:( move 3 , ua / 2 ; move ua , 8 ) 
[14139] c:0 is:( move ua - ul , 2 ; move 4 , 4 / ua )  decode:( move 5 , 2 ; move 4 , 7 ) 
[14140] c:0 is:( move 4 , 2 / ua ; move ua , ua / 3 )  decode:( move 4 , 9 / ua ; move ua , 2 ) 
[14141] c:0 is:( move 4 , 3 / ua ; move ua , ua - 4 )  decode:( move ua , 4 * 3 ; move 5 , 4 ) 
[14142] c:0 is:( move 3 , ua / 3 ; move 4 , ua * ua )  decode:( move 3 , 2 ; move 4 , 5 ) 
[14143] c:0 is:( move ua , 9 + 2 ; move ua - ul , 2 )  decode:( move ua , 2 + 9 ; move ua , 2 ) 
[14144] c:0 is:( move 4 , ua / 3 ; move ua + ul , 4 )  decode:( move 4 , 2 ; move ua + ul , 4 ) 
[14145] c:0 is:( move ua + ul , 4 * 4 ; move ua , 4 )  decode:loop 0 , 4 , move 3 , v0 - 3 
[14146] c:0 is:( move ua - ul , ul ; move 3 , 4 * 3 )  decode:( move 5 , ul ; move 3 , 4 * 3 ) 
[14147] c:0 is:( move ua , 4 * 3 ; move 4 , ua * ua )  decode:( move ua , 9 + 3 ; move 4 , 8 ) 
[14148] c:0 is:( move 2 , 2 / ua ; move ua , ul / 4 )  decode:( move ua , 4 ; move 3 , ul + 4 ) 
[14149] c:0 is:( move 4 , 2 / ua ; move ul - ua , 4 )  decode:loop 0 , 3 , move v0 + ul , 2 / ua 
[14150] c:0 is:( move ua , ua / 3 ; move 4 , 2 / ua )  decode:( move 3 , 2 ; move ua , 2 / ua ) 
[14151] c:0 is:( move ua + ul , 3 / 4 ; move 3 , ul )  decode:( move ua + ul , 7 ; move 3 , ul ) 
[14152] c:0 is:( move ua , 4 / 5 ; move ua + ul , 2 )  decode:( move ua , 5 / 4 ; move 7 , 2 ) 
[14153] c:0 is:( move ua - ul , 2 ; move 4 , ua / 4 )  decode:( move 5 , 2 ; move 4 , ua / 4 ) 
[14154] c:0 is:( move 3 , 4 ; move ua - ul , 3 / ua )  decode:( move 3 , 4 ; move 4 , 2 / 4 ) 
[14155] c:0 is:( move 4 , ul ; move 2 - ua , ua / 4 )  decode:( move 4 , ul ; move 5 , ua / 4 ) 
[14156] c:0 is:( move ua + ul , ul ; move 4 , 3 * 4 )  decode:( move ua , ul ; move 4 , 4 * 3 ) 
[14157] c:0 is:( move 4 , 4 ; move 4 + ul , ua * ua )  decode:( move 4 , 4 ; move 5 , ua * ua ) 
[14158] c:0 is:( move ua - ul , 2 / ua ; move 4 , 4 )  decode:loop 0 , 2 , move v0 - 4 , 3 / 4 
[14159] c:0 is:( move ua , 4 - 3 / ua ; move ua , 4 )  decode:( move ua , ua / 6 ; move ua , 4 ) 
[14160] c:0 is:( move ua + ul , 4 * 4 ; move 3 , ul )  decode:( move ua + ul , 0 ; move 3 , ul ) 
[14161] c:0 is:( move ul - ua , 4 / ua ; move 4 , 2 )  decode:( move 5 , 9 ; move 4 , 5 ) 
[14162] c:0 is:( move ua , 4 / 3 ; move ua + ul , 4 )  decode:( move ua , 0 - 5 ; move 7 , 4 ) 
[14163] c:0 is:( move ua , ul / 6 ; move ua + 3 , 2 )  decode:( move ua , ul / 6 ; move 9 , 2 ) 
[14164] c:0 is:( move 4 - ua , ul / ua ; move 4 , 2 )  decode:loop 0 , 3 , move 0 - 2 , v0 - 4 
[14165] c:0 is:( move 4 , 2 ; move ua - ul , ua / 4 )  decode:( move 4 , 2 ; move ul - ua , 8 ) 
[14166] c:0 is:( move 3 , ul ; move ua - ul , 4 * 3 )  decode:( move 3 , ul ; move 5 , 4 * 3 ) 
[14167] c:0 is:( move 2 , 4 ; move ua + ul , 5 / ua )  decode:( move 2 , 4 ; move ua + ul , 7 ) 
[14168] c:0 is:( move ua - 2 , 4 / ua ; move 4 , ul )  decode:( move 4 , 4 / ua ; move 4 , ul ) 
[14169] c:0 is:( move 4 , ul / 4 ; move ua + ul , 2 )  decode:( move 4 , ul / 4 ; move 7 , 2 ) 
[14170] c:0 is:( move ua , 2 / 4 ; move ua , ua / 3 )  decode:( move ua , 4 * 3 ; move ua , ul ) 
[14171] c:0 is:( move 2 - ua , ul ; move 4 , ua / 4 )  decode:( move 4 , ul ; move 4 , ua / 4 ) 
[14172] c:0 is:( move 5 , ua / 3 ; move ua - ul , 2 )  decode:( move 5 , ua / 3 ; move 5 , 2 ) 
[14173] c:0 is:( move ua - ul , 4 ; move 4 - ua , 4 )  decode:( move ul - ua , 4 ; move 3 , 4 ) 
[14174] c:0 is:( move 3 , 4 / 3 ; move ua + ul , ul )  decode:( move 3 , 4 / 3 ; move 6 , ul ) 
[14175] c:0 is:( move 3 , 4 / ua ; move ua + ul , 4 )  decode:( move 3 , 2 / 4 ; move 8 , 4 ) 
[14176] c:0 is:( move 0 - ua , 9 ; move 3 , ua * ua )  decode:( move ua , 9 ; move 3 , 3 + 8 ) 
[14177] c:0 is:( move 3 / 2 , ul ; move ua , ua / 3 )  decode:( move ua , 0 ; move 2 , 0 - 4 ) 
[14178] c:0 is:( move ua + ul , 6 ; move 2 - 4 , ul )  decode:( move ua + ul , 6 ; move 2 , 2 ) 
[14179] c:0 is:( move ua + ul , ul / 3 ; move 3 , 4 )  decode:loop 0 , 4 , move ua - 4 , v0 - 4 
[14180] c:0 is:( move 4 , 2 ; move ul - ua , 4 / ua )  decode:( move 4 , 2 ; move ua - ul , 7 ) 
[14181] c:0 is:( move ua , 4 ; move ul - ua , 4 * 3 )  decode:loop 0 , 2 , move ua , 4 * v0 
[14182] c:0 is:( move ua , 4 / ua ; move 3 , ua - 4 )  decode:( move 3 , 6 ; move ua , 4 ) 
[14183] c:0 is:( move 3 , ul / 4 ; move ul - ua , 2 )  decode:( move 3 , ul / 4 ; move 5 , 2 ) 
[14184] c:0 is:( move ul - ua , 3 ; move ua , 3 / 4 )  decode:( move 5 , 0 ; move ua , 0 - 4 ) 
[14185] c:0 is:( move ul - ua , 2 / 4 ; move 3 , ul )  decode:( move 5 , 2 - 9 ; move 3 , 4 ) 
[14186] c:0 is:( move 3 , ul ; move ul - ua , 4 * 3 )  decode:( move 3 , ul ; move ua - ul , 9 ) 
[14187] c:0 is:( move 3 , 4 * 4 ; move ua , ua * ua )  decode:( move 3 , 4 * 4 ; move ua , 4 ) 
[14188] c:0 is:( move ua , ua - 4 ; move 3 , 4 / ua )  decode:loop 0 , 3 , move 3 - ua , 6 
[14189] c:0 is:( move 4 - ua , ul ; move ua , 2 / 4 )  decode:( move 2 , ul ; move ua , 5 * 2 ) 
[14190] c:0 is:( move 3 , ua / 3 ; move ua , ua / 3 )  decode:( move ua , ul ; move 3 , 0 - 2 ) 
[14191] c:0 is:( move 2 , ua / 4 ; move ul - ua , 4 )  decode:( move 2 , ua / 4 ; move ua , ul ) 
[14192] c:0 is:( move 4 , ul ; move 2 - ua , 4 / ua )  decode:( move 4 , ul ; move 5 , 5 * 2 ) 
[14193] c:0 is:( move ua + 4 , 4 ; move ul - 4 , ul )  decode:( move 3 , 5 ; move ua + 4 , ul ) 
[14194] c:0 is:( move 5 , ua / 4 ; move ua + ul , 2 )  decode:( move 5 , ua / 4 ; move 7 , 2 ) 
[14195] c:0 is:( move ua - ul , 2 / 4 ; move ua , 4 )  decode:( move 5 , 2 / 4 ; move ua , 4 ) 
[14196] c:0 is:( move 3 , 2 / 4 ; move ua - ul , ul )  decode:( move 3 , 2 / 4 ; move 5 , ul ) 
[14197] c:0 is:( move ua , 4 ; move ua + ul , 4 * 4 )  decode:( move ua , 4 ; move 8 , 4 * 4 ) 
[14198] c:0 is:( move ul - ua , ul ; move 4 , 3 / 2 )  decode:( move ul - ua , ul ; move 4 , 8 ) 
[14199] c:0 is:( move ua , 2 / ua ; move 3 , ua / 4 )  decode:( move 3 , 2 / 6 ; move ua , 8 ) 
[14200] c:0 is:( move ua , 6 * 3 ; move ua - ul , 2 )  decode:loop 0 , 2 , move ua , 0 - 2 
[14201] c:0 is:( move ua + ul , ua / 2 ; move 4 , 5 )  decode:( move 0 - 0 , 0 ; move 4 , 5 ) 
[14202] c:0 is:( move ul - ua , ul ; move 4 , 2 / 3 )  decode:( move ul - ua , ul ; move 4 , 7 ) 
[14203] c:0 is:( move 0 - ua , 2 / 8 ; move ua , ul )  decode:loop 0 , 2 , move ua , v0 - 3 
[14204] c:0 is:( move 4 , 3 ; move ua + ul , ua / 4 )  decode:loop 0 , 3 , move 4 , 4 / 4 
[14205] c:0 is:( move ul - ua , 2 / ua ; move 4 , 4 )  decode:( move 5 , 4 * 4 ; move 4 , ul ) 
[14206] c:0 is:( move 3 - ua , 4 * 4 ; move ua , ul )  decode:( move 3 , 2 / 4 ; move ua , 4 ) 
[14207] c:0 is:( move ua , 2 - 9 ; move ua + ul , 2 )  decode:( move ua , 2 - 9 ; move 8 , 2 ) 
[14208] c:0 is:( move ul - ua , 4 ; move ua , 2 / 4 )  decode:( move 5 , 4 ; move ua , 5 / 2 ) 
[14209] c:0 is:( move 2 , 3 / 4 ; move ua - ul , ul )  decode:( move 2 , 7 ; move ua - ul , ul ) 
[14210] c:0 is:( move ua , 3 ; move ua - ul , 4 / 3 )  decode:( move ua , 3 ; move 5 , 4 / 3 ) 
[14211] c:0 is:( move ua , 4 * 4 ; move ua + ul , 4 )  decode:( move ua , 4 * 4 ; move 7 , 4 ) 
[14212] c:0 is:( move ua + 3 , 9 ; move ua + ul , 2 )  decode:( move 9 , 9 ; move ua + ul , 2 ) 
[14213] c:0 is:( move ul - ua , 4 ; move 4 , 2 / ua )  decode:( move 4 , ul / 5 ; move 5 , 4 ) 
[14214] c:0 is:( move ua , ua / 3 ; move ua , 2 / 4 )  decode:loop 0 , 4 , move 4 / v0 , 4 * 3 
[14215] c:0 is:( move 3 , ua - 3 / 4 ; move ua , ul )  decode:( move 3 , 2 - 9 ; move ua , ul ) 
[14216] c:0 is:( move 4 * 2 , ul / ua ; move ul , 2 )  decode:( move ul , 0 ; move ua + 2 , 4 ) 
[14217] c:0 is:( move 3 , 2 / 4 ; move ua - ul , ul )  decode:( move 3 , 2 / 4 ; move 5 , ul ) 
[14218] c:0 is:( move ua , 4 + 4 / ua ; move ua , 4 )  decode:( move ua , 9 * 2 ; move ua , 4 ) 
[14219] c:0 is:( move ua - 3 , ul ; move 4 + ul , 5 )  decode:( move 3 , ul ; move ua - ul , 5 ) 
[14220] c:0 is:( move 2 , 4 ; move ua + ul , ul / 4 )  decode:( move 3 , 0 - 4 ; move ua , ul ) 
[14221] c:0 is:( move ua + ul , 3 / 4 ; move ua , 4 )  decode:loop 0 , 2 , move 0 - ua , 4 
[14222] c:0 is:( move ua - ul , 2 / 6 ; move ua , 2 )  decode:( move 5 , 9 / ua ; move ua , 2 ) 
[14223] c:0 is:( move ua , 4 / ua ; move 3 - ua , 4 )  decode:( move ua , 4 / ua ; move 3 , ul ) 
[14224] c:0 is:( move 3 - ua , 4 ; move ua , 4 / ua )  decode:( move 4 , ua / 4 ; move ua , 9 ) 
[14225] c:0 is:( move 3 , ua / 2 ; move ua , 4 / ua )  decode:( move 3 , 7 ; move ua , 4 / ua ) 
[14226] c:0 is:( move ua , 4 ; move ul - ua , 2 / 4 )  decode:( move ua , 4 ; move 5 , 4 * 4 ) 
[14227] c:0 is:( move ua + ul , 4 ; move 3 , 4 / ua )  decode:( move ua + ul , 4 ; move 3 , 7 ) 
[14228] c:0 is:( move ua - ul , 3 ; move ua - 4 , 5 )  decode:( move ul - ua , 3 ; move 3 , 5 ) 
[14229] c:0 is:( move 3 - ua , 4 / 3 ; move ua , ul )  decode:( move 3 , 9 / 2 ; move ua , 4 ) 
[14230] c:0 is:( move ua , 2 / 4 ; move ul - ua , 4 )  decode:( move ua , 9 + 4 ; move 5 , ul ) 
[14231] c:0 is:( move ua , 2 / ua ; move 4 , ua / 3 )  decode:( move ua , 2 / 5 ; move 4 , 2 ) 
[14232] c:0 is:( move ua , ua / 3 + 4 ; move 4 , ul )  decode:( move ua , ul ; move 4 , ul ) 
[14233] c:0 is:( move 4 - ua , ua * ua ; move 4 , 4 )  decode:( move 2 , 5 ; move 4 , ul ) 
[14234] c:0 is:( move 4 , 4 * 3 ; move ua , ua * ua )  decode:( move 4 , 3 * 5 ; move ua , 8 ) 
[14235] c:0 is:( move ua - ul , 4 * 3 ; move ua , 4 )  decode:( move ul - ua , 9 ; move ua , 7 ) 
[14236] c:0 is:( move ul - ua , 9 + 2 ; move ua , 2 )  decode:( move ua , 3 / 2 ; move ua , ul ) 
[14237] c:0 is:( move 4 , 4 / ua ; move ul - ua , 2 )  decode:( move 4 , 7 ; move ua - ul , 2 ) 
[14238] c:0 is:( move ul - ua , 4 * 3 ; move 3 , ul )  decode:( move 3 , 9 ; move 5 , 0 - 4 ) 
[14239] c:0 is:( move ul , 2 / 4 ; move ua + ul , 4 )  decode:( move ul , 2 / 4 ; move 4 , 4 ) 
[14240] c:0 is:( move 9 , ul ; move ua - ul , 0 - 2 )  decode:( move 4 , ua / 3 ; move ua , 2 ) 
[14241] c:0 is:( move ua - ul , ul ; move 3 , 2 / 4 )  decode:( move 5 , ul ; move 3 , 2 / 4 ) 
[14242] c:0 is:( move ul , 4 + ul ; move ua , 2 / 4 )  decode:( move ul , 4 ; move ua , 2 / ua ) 
[14243] c:0 is:( move 3 - ua , ua / 4 ; move ua , 4 )  decode:( move 3 , 9 + 2 ; move ua , ul ) 
[14244] c:0 is:( move 3 , 3 ; loop 0 , 3 , move 2 , 2 )  decode:0 loop 0 , 3 , move 3 , 4 
[14245] c:0 is:( move ua , ul / 4 ; move ua + 3 , 4 )  decode:( move ua , ul / 4 ; move 9 , 4 ) 
[14246] c:0 is:( move ua + 2 , 9 ; move 2 - ua , ul )  decode:( move ua + 2 , 9 ; move 5 , 2 ) 
[14247] c:0 is:( move ua , 3 ; move ul - ua , 4 / 3 )  decode:( move ua , 3 ; move 5 , 0 - 5 ) 
[14248] c:0 is:( move ua , ua - 4 * 4 ; move ua , 4 )  decode:( move ua , 9 ; move ua , 4 ) 
[14249] c:0 is:( move ua - ul , 3 ; move ua , 4 / 3 )  decode:( move 5 , 3 ; move ua , 4 / 3 ) 
[14250] c:0 is:( move ua , ul - 9 ; move ua + 2 , 2 )  decode:loop 0 , 4 , move v0 * 2 , 0 - 2 
[14251] c:0 is:( move ua , 3 / 2 ; move 5 , ua * ua )  decode:( move 5 , ua / 4 ; move 5 , 8 ) 
[14252] c:0 is:( move ua , 6 ; move ua + ul , 3 / 2 )  decode:( move ua , 6 ; move ua , 3 / 2 ) 
[14253] c:0 is:( move 4 - ua , 3 ; move ua , ua / 4 )  decode:( move 2 , 3 ; move ua , ua / 4 ) 
[14254] c:0 is:( move ua , 2 / 6 ; move 2 - ua , ul )  decode:( move ua , 2 / 6 ; move 5 , 4 ) 
[14255] c:0 is:( move 4 - ua , 2 / 4 ; move ua , ul )  decode:( move 2 , 0 - 9 ; move ua , 4 ) 
[14256] c:0 is:( move 2 , 2 / 5 ; move ul - ua , ul )  decode:( move 2 , ul / 4 ; move ua , 4 ) 
[14257] c:0 is:( move ua , 2 / 5 ; move ua + ul , 4 )  decode:loop 0 , 3 , move v0 + 2 , 4 / 3 
[14258] c:0 is:( move 5 , ua * ua ; move 3 , 2 / ua )  decode:( move 3 , 5 ; move ua - ul , 3 ) 
[14259] c:0 is:( move 9 , 2 ; move ua + ul , ua - 2 )  decode:( move 7 , 2 ; move 0 - 9 , 2 ) 
[14260] c:0 is:( move 4 , ua / 4 ; move ul - ua , 2 )  decode:( move 4 , ua / 4 ; move 5 , ul ) 
[14261] c:0 is:( move ua + 3 , ul / 4 ; move ua , 4 )  decode:( move 9 , ul / 4 ; move ua , 4 ) 
[14262] c:0 is:( move 2 - ua , 2 / 6 ; move ua , ul )  decode:( move 4 , 4 * 4 ; move ua , 4 ) 
[14263] c:0 is:( move 5 , 0 ; loop 0 , 3 , move 4 , 2 )  decode:loop 0 , 4 , move ua - 2 , 2 
[14264] c:0 is:( move 4 , 4 / 3 - ua ; move ua , ul )  decode:( move 4 , 4 ; move ua , 2 - 3 ) 
[14265] c:0 is:( move ua , ua / 6 ; move ua + 3 , 4 )  decode:( move ua , 2 ; move 9 , 0 - 4 ) 
[14266] c:0 is:( move 5 , 2 / 3 ; move ul - ua , ul )  decode:( move 5 , 7 ; move 5 , ua / 3 ) 
[14267] c:0 is:( move 5 , 2 ; move ua - ul , ua / 4 )  decode:( move 5 , 2 ; move ul - ua , 8 ) 
[14268] c:0 is:( move 9 - ua , 3 ; move ua + ul , 2 )  decode:( move 3 , 3 ; move ua + ul , 2 ) 
[14269] c:0 is:( move ul - ua , ul ; move 3 , 4 * 4 )  decode:( move 4 , 4 ; move ua , 2 / ua ) 
[14270] c:0 is:( move 4 , 0 - 9 ; move ua , ua * ua )  decode:loop 0 , 3 , move v0 - ua , ua / 4 
[14271] c:0 is:( move ua + ul , ua / 4 ; move 4 , 4 )  decode:( move ua + ul , 8 ; move 4 , 4 ) 
[14272] c:0 is:( move ua - ul , 4 / 3 ; move 3 , ul )  decode:( move 5 , 4 / 3 ; move 3 , ul ) 
[14273] c:0 is:( move ua , 4 + 6 ; move ua , 3 / ua )  decode:loop 0 , 2 , move v0 - ua , ua / ua 
[14274] c:0 is:( move 0 - ua , ul / 6 ; move 4 , ul )  decode:( move ua , 0 - 4 ; move 4 , ul ) 
[14275] c:0 is:( move 4 , 4 * 4 ; move ul + ua , ul )  decode:( move 4 , 4 * 4 ; move ua , ul ) 
[14276] c:0 is:( move ua + 2 , ul / 8 ; move ua , 2 )  decode:( move ua + 2 , ul ; move ua , 2 ) 
[14277] c:0 is:( move 8 , 2 + 3 ; move ul - ua , ul )  decode:( move ua + 2 , 5 ; move 5 , ua ) 
[14278] c:0 is:( move 3 , ua * ua ; move 4 , 4 / ua )  decode:( move 3 , 8 ; move 4 , 4 / ua ) 
[14279] c:0 is:( move 3 , 3 / ua ; move ua , ua / 4 )  decode:( move ua , 2 ; move 3 , 9 / 2 ) 
[14280] c:0 is:( move 4 , 4 + ul ; move ul / 2 , ul )  decode:( move ul , 9 ; move 4 , 0 - 2 ) 
[14281] c:0 is:( move 5 , 2 / ua ; move ua - ul , 4 )  decode:( move 5 , 2 / ua ; move 5 , 4 ) 
[14282] c:0 is:( move ua , 5 / 4 ; move 2 - ua , ul )  decode:( move ua , 4 / 5 ; move 4 , 4 ) 
[14283] c:0 is:( move 3 , 4 + 6 ; move ul - ua , ul )  decode:( move 3 , 4 + 3 ; move ua , 4 ) 
[14284] c:0 is:( move 3 , ul ; move ua - ul , 3 / 4 )  decode:( move 3 , ul ; move ul - ua , 4 ) 
[14285] c:0 is:( move 4 , 3 ; move ul - ua , ua / 4 )  decode:( move 4 , 3 ; move ua - ul , 8 ) 
[14286] c:0 is:( move ua + 2 , 9 ; move 3 - ua , ul )  decode:( move ua + 2 , 9 ; move 4 , 4 ) 
[14287] c:0 is:( move 2 - ua , 9 ; move ul - ua , 2 )  decode:( move 2 - ua , 9 ; move 5 , 2 ) 
[14288] c:0 is:( move ul - ua , 3 ; move 4 , 4 / ua )  decode:( move 5 , 0 ; move 4 , 9 ) 
[14289] c:0 is:( move ua , 4 ; move ul - ua , 4 / 3 )  decode:loop 0 , 2 , move ul - ua , 0 - 8 
[14290] c:0 is:( move ua + ul , 2 / 6 ; move 3 , ul )  decode:( move ua + ul , 2 ; move 3 , ul ) 
[14291] c:0 is:( move 4 , ul ; move ua - 3 , ua / 4 )  decode:( move 4 , ul ; move 4 , ua / 4 ) 
[14292] c:0 is:( move ua , 4 / 3 ; move ua - ul , 4 )  decode:( move ua , 5 / 5 ; move 5 , 4 ) 
[14293] c:0 is:( move 4 , ua / 4 + 4 ; move ua , ul )  decode:( move 4 , 7 ; move ua , ul ) 
[14294] c:0 is:( move ul - ua , ua / 4 ; move 3 , 4 )  decode:( move ua - ul , 9 ; move 3 , ul ) 
[14295] c:0 is:( move ua , ul / 4 * 4 ; move ua , 2 )  decode:( move ua , ul ; move 6 , 0 - 2 ) 
[14296] c:0 is:( move 4 , ul ; move ul - ua , 3 * 4 )  decode:( move 4 , ul ; move 5 , 9 ) 
[14297] c:0 is:( move ua + ul , 9 ; move 3 - ua , 2 )  decode:( move ua + ul , 9 ; move 4 , ul ) 
[14298] c:0 is:( move ua + ul , ul / 4 ; move 5 , 2 )  decode:loop 0 , 3 , move v0 + 2 , 2 - 3 
[14299] c:0 is:( move ua , ua / 2 ; move ua + 2 , 9 )  decode:( move ua , 9 ; move ua , 9 + 4 4 ) 
[14300] c:0 is:( move ua - ul , ul ; move 3 , 4 / 3 )  decode:( move 5 , ul ; move 3 , 4 / 3 ) 
[14301] c:0 is:( move 4 - ua , 4 ; move ua , ua / 4 )  decode:( move 3 , 4 ; move ua , ua / 4 ) 
[14302] c:0 is:( move 4 , ua / 2 ; move ua , ua / 4 )  decode:loop 0 , 3 , move 0 - 4 , ua / 4 
[14303] c:0 is:( move 4 , 4 * ua - 4 ; move ua , ul )  decode:( move 4 , 9 ; move ua , ul ) 
[14304] c:0 is:( move 0 , 2 ; loop 0 , 5 , move 3 , 4 )  decode:loop 0 , 4 , move ua - 3 , 0 - 4 
[14305] c:0 is:( move ua , ua / 3 ; move 4 , ua / 3 )  decode:( move ua , 2 ; move 4 , 0 - 2 ) 
[14306] c:0 is:( move ua + ul , ul / 4 ; move 4 , 3 )  decode:( move ua , ul / 4 ; move 5 , 3 ) 
[14307] c:0 is:( move ua , 2 / 4 ; move ua , 4 / ua )  decode:0 loop 0 , 3 , move 4 , 2 / 4 
[14308] c:0 is:( move ul - ua , ul / 4 ; move 2 , 4 )  decode:loop 0 , 4 , move 0 - v0 , 0 - 5 
[14309] c:0 is:( move 5 , ua / 3 ; move ua + ul , 4 )  decode:( move 5 , ua / 3 ; move 8 , 4 ) 
[14310] c:0 is:( move 0 - ua , 9 ; move 4 - ua , ul )  decode:( move ua , 4 * 3 ; move 2 , ul ) 
[14311] c:0 is:( move ua - ul , ul / 4 ; move 4 , 2 )  decode:( move 5 , ul / 4 ; move 4 , 2 ) 
[14312] c:0 is:( move 4 , ul / 4 ; move ul - ua , 2 )  decode:( move 4 , ul / 4 ; move 5 , 2 ) 
[14313] c:0 is:( move ul - ua , ul ; move 4 , 2 / 4 )  decode:( move 4 , 4 ; move 4 , 9 ) 
[14314] c:0 is:( move 3 - ua , ua / 4 ; move 4 , ul )  decode:( move 3 , 4 + 3 ; move 4 , ul ) 
[14315] c:0 is:( move 5 , 4 / ua ; move ua - ul , 2 )  decode:( move 5 , 4 / ua ; move 5 , 2 ) 
[14316] c:0 is:( move 4 , 4 ; move ua - ul , ua / 3 )  decode:( move 4 , 4 ; move 5 , ua / 3 ) 
[14317] c:0 is:( move 9 , 0 - 3 ; move ul - ua , ul )  decode:( move 9 , 0 - 3 ; move ua , 2 ) 
[14318] c:0 is:( move ua + ul , 4 * 4 ; move 4 , ul )  decode:( move ua , 4 * 4 ; move 4 , ul ) 
[14319] c:0 is:( move ua - ul , 3 ; move 4 , 4 / ua )  decode:( move ul - ua , 3 ; move 4 , 7 ) 
[14320] c:0 is:( move 4 , 6 ; move ua , 3 - ua * ua )  decode:( move 0 - ua , ul ; move 4 , 5 ) 
[14321] c:0 is:( move ua - ul , ua / 4 ; move 4 , 3 )  decode:( move 5 , ua / 4 ; move 5 , 3 ) 
[14322] c:0 is:( move 3 - ua , ul / 6 ; move ua , 2 )  decode:loop 0 , 3 , move 0 - 3 , v0 - ul 
[14323] c:0 is:( move ul - ua , 4 * 3 ; move 4 , ul )  decode:( move ua - ul , 9 ; move 4 , 4 ) 
[14324] c:0 is:( move 4 , ua / 3 ; move 4 , ua * ua )  decode:( move 4 , 2 ; move 4 , ua * ua ) 
[14325] c:0 is:( move ua , 9 + 2 ; move 3 - ua , ul )  decode:( move ua , 3 / 2 ; move 3 , 4 ) 
[14326] c:0 is:( move ua , 2 - 9 ; move ua - ul , 2 )  decode:loop 0 , 2 , move ua , 0 - 2 
[14327] c:0 is:( move ua , 0 - 9 ; move ua - ul , 4 )  decode:( move ua , 0 - 9 ; move 5 , 4 ) 
[14328] c:0 is:( move ua , 4 * 4 ; move ul - ua , 4 )  decode:( move ua , 4 * 4 ; move 5 , ul ) 
[14329] c:0 is:( move ua , ul / 4 * 3 ; move ua , 3 )  decode:( move ua , 0 ; move ua , 3 ) 
[14330] c:0 is:( move ua , ua / 3 ; move ua , 4 * 4 )  decode:( move ua , 0 - 4 ; move ua , 9 ) 
[14331] c:0 is:( move 4 , 4 * 3 ; move ul - ua , ul )  decode:( move 2 - ua , 9 ; move 5 , ul ) 
[14332] c:0 is:( move ua / 4 , 3 ; move 4 , ua * ua )  decode:( move ul , 3 ; move 4 , ua * ua ) 
[14333] c:0 is:( move ua , ul / ua ; move 4 , 2 / 3 )  decode:( move 4 , 4 ; move ua , 4 / ua ) 
[14334] c:0 is:( move ua , 2 / ua ; move 4 , ua / 4 )  decode:loop 0 , 3 , move 3 - ua , v0 - 8 
[14335] c:0 is:( move 3 , 3 / ua ; move ua , 4 / ua )  decode:loop 0 , 3 , move 3 , 2 / 8 
[14336] c:0 is:( move ua , 0 - 9 ; move ul - ua , 4 )  decode:( move ua , 0 - 9 ; move 5 , ul ) 
[14337] c:0 is:( move ua , 3 / ua ; move 4 , ua / 3 )  decode:( move ua , 9 + 4 ; move 5 , 2 ) 
[14338] c:0 is:( move ul - 3 , 4 ; move ua , 4 / ua )  decode:( move 3 , 0 - 4 ; move ua , 7 ) 
[14339] c:0 is:( move 4 , 3 / 4 ; move ua , ua * ua )  decode:( move 4 , 4 / 3 ; move ua , 8 ) 
[14340] c:0 is:( move 3 , 0 - 9 ; move ua - ul , ul )  decode:( move 3 , 0 - 9 ; move 5 , ul ) 
[14341] c:0 is:( move ua + ul , 2 / 6 ; move ua , 4 )  decode:loop 0 , 2 , move 4 + v0 , 4 / 3 
[14342] c:0 is:( move 5 , 3 ; move ua + ul , ua / 4 )  decode:loop 0 , 3 , move 4 , 3 / 4 
[14343] c:0 is:( move ul - ua , ul / 4 ; move 4 , 2 )  decode:( move 5 , 4 * 4 ; move 4 , 2 ) 
[14344] c:0 is:( move 5 , ua / 4 ; move ul - ua , 2 )  decode:( move 5 , ua / 4 ; move 5 , ul ) 
[14345] c:0 is:( move ul - ua , ul / 3 ; move 5 , 2 )  decode:( move ua , 4 * 9 ; move 5 , 2 ) 
[14346] c:0 is:( move ua - ul , 4 ; move 3 , ua / 4 )  decode:( move 5 , 4 ; move 3 , ua / 4 ) 
[14347] c:0 is:( move ua , ua / 2 ; move 4 , ua / 4 )  decode:( move ua , 0 ; move 4 , ua / 4 ) 
[14348] c:0 is:( move 3 , 4 ; move ul - ua , ua / 4 )  decode:( move 3 , 4 ; move ua - ul , 8 ) 
[14349] c:0 is:( move ua + ul , ul / 4 ; move 3 , 4 )  decode:( move ua + ul , ul ; move 3 , 4 ) 
[14350] c:0 is:( move 4 , 4 / 3 ; move ua , ua * ua )  decode:( move ua , 4 / 3 ; move ua , 8 ) 
[14351] c:0 is:( move 4 , ua * ua ; move 4 , 3 / ua )  decode:loop 0 , 3 , move 3 , ua / v0 * 4 
[14352] c:0 is:( move ul - ua , 4 ; move ua , 4 / 3 )  decode:( move 5 , 4 ; move ua , 3 / 2 ) 
[14353] c:0 is:( move 4 , ul ; move ua - ul , 4 * 3 )  decode:loop 0 , 2 , move 0 - 4 ,  ua / ua 
[14354] c:0 is:( move ua , 4 / 3 ; move ua + ul , 5 )  decode:( move 0 - 4 , 0 ; move 8 , 5 ) 
[14355] c:0 is:( move 5 , ua / 4 ; move 2 - ua , ul )  decode:( move 5 , ua / 4 ; move 5 , 4 ) 
[14356] c:0 is:( move 0 - 9 , 4 ; move ua + ul , ul )  decode:( move 9 , 4 ; move ua + ul , ul ) 
[14357] c:0 is:( move ua , 4 * 4 ; move ua , ua / 3 )  decode:( move ua , 4 * 4 ; move ua , 2 ) 
[14358] c:0 is:( move ua , 9 + 2 ; move ua + ul , 4 )  decode:( move ua , 9 + 2 ; move 8 , 4 ) 
[14359] c:0 is:( move ua , ul / ua ; move 3 , 2 / 4 )  decode:loop 0 , 3 , move 3 , ua / ua 
[14360] c:0 is:( move 4 , ul ; move ua + ul , 4 * 4 )  decode:( move 4 , ul ; move ua , 4 * 4 ) 
[14361] c:0 is:( move 0 - 4 , 9 + ul ; move ua , ul )  decode:( move 4 , ua / 4 ; move ua , ul ) 
[14362] c:0 is:( move ul - ua , 4 / ua ; move 3 , 4 )  decode:( move 5 , 2 * 5 ; move 3 , ul ) 
[14363] c:0 is:( move 5 , 3 / 2 ; move ul - ua , ul )  decode:( move 5 , 2 / 3 ; move 5 , ul ) 
[14364] c:0 is:( move 3 , ua / 4 ; move ul - ua , 4 )  decode:( move 3 , 8 ; move ul - ua , 4 ) 
[14365] c:0 is:( move 5 , 2 ; move ul - ua , ua / 4 )  decode:( move 5 , 2 ; move 5 , 5 + 4 ) 
[14366] c:0 is:( move ua + ul , 4 ; move 4 , ua / 4 )  decode:( move ua + ul , 4 ; move 4 , 8 ) 
[14367] c:0 is:( move 3 , 2 / ua ; move ua , ul / 4 )  decode:( move ua , 2 / 4 ; move 3 , 6 ) 
[14368] c:0 is:( move ul - ua , 2 ; move 5 , ua / 4 )  decode:( move ul - ua , 2 ; move 5 , 8 ) 
[14369] c:0 is:( move ua + ul , 3 ; move 4 , ua / 5 )  decode:( move 3 * 3 , 3 ; move ua , 5 ) 
[14370] c:0 is:( move ua - ul , ul ; move 4 , 3 * 4 )  decode:( move 5 , ul ; move 4 , 4 * 3 ) 
[14371] c:0 is:( move 4 , ul / ua ; move ua , 2 / 3 )  decode:( move 4 , 4 ; move ua , 3 / 4 ) 
[14372] c:0 is:( move ua , 4 / 3 ; move 4 - ua , ul )  decode:( move ua , 4 / 3 ; move 2 , 4 ) 
[14373] c:0 is:( move 9 , ul / ua ; move ua , 0 - 2 )  decode:loop 0 , 4 , move 4 , v0 - 2 
[14374] c:0 is:( move 4 , 4 / ua ; move ua , 2 / ua )  decode:( move ua , 4 ; move 4 , ul / 4 ) 
[14375] c:0 is:( move ua + ul , ul / 6 ; move 3 , 2 )  decode:( move ua + ul , ul ; move 3 , 2 ) 
[14376] c:0 is:( move ua , 3 / ua ; move ua , 3 / 4 )  decode:loop 0 , 2 , move ua , 4 + 4 / ua 
[14377] c:0 is:( move 3 - ua , ul ; move 4 , ua / 4 )  decode:( move 3 , ul ; move 4 , 7 + 4 ) 
[14378] c:0 is:( move ua , 4 / 3 ; move ua , ua / 3 )  decode:( move ua , 5 / 3 ; move ua , 2 ) 
[14379] c:0 is:( move 9 , 3 ; move ua + 2 , ua * ua )  decode:( move 9 , 3 ; move 2 + ua , 8 ) 
[14380] c:0 is:( move ua - 9 , ul - 2 ; move ua , 2 )  decode:( move 3 , ua / 4 ; move ua , 2 ) 
[14381] c:0 is:( move ua , 4 * 5 ; move 3 - ua , ul )  decode:( move 3 , 2 ; move ua , 0 - 2 ) 
[14382] c:0 is:( move 4 , ua * ua ; move ua , 4 * 4 )  decode:( move ua , ua / 3 ; move 4 , 4 ) 
[14383] c:0 is:( move 5 , 4 * 3 ; move ua , ua * ua )  decode:( move 5 , 9 / 3 ; move ua , 8 ) 
[14384] c:0 is:( move 4 , ul ; move ua , 4 + ua / 4 )  decode:( move 4 , ul ; move ua , 4 * 3 ) 
[14385] c:0 is:( move ul - ua , 4 ; move ua + 4 , 6 )  decode:( move 6 , 0 / 4 ; move 9 , 9 ) 
[14386] c:0 is:( move 4 , 2 / ua ; move 5 , ua * ua )  decode:( move 4 , 2 / ua ; move 5 , 8 ) 
[14387] c:0 is:( move 2 , ul / 4 ; move ul - ua , 4 )  decode:( move 2 , ul / 4 ; move 5 , ul ) 
[14388] c:0 is:( move 4 + 3 , ul / 4 ; move ua , ul )  decode:( move ua , ul / 4 ; move ua , ul ) 
[14389] c:0 is:( move 0 - ua , 9 ; move ul - ua , 4 )  decode:( move ua , 4 * 3 ; move 5 , 4 ) 
[14390] c:0 is:( move 4 , 4 ; move ua + ul , ua / 4 )  decode:( move 4 , 4 ; move ua + ul , 8 ) 
[14391] c:0 is:( move 4 , 4 ; move ul - ua , ua / 3 )  decode:( move 2 - ua , 3 ; move 4 , ul ) 
[14392] c:0 is:( move ua , 4 / 5 ; move ua - 2 , ul )  decode:( move 0 - ua , 4 ; move 4 , ul ) 
[14393] c:0 is:( move ul - ua , 3 ; move 4 , ua / 4 )  decode:( move 5 , 3 ; move 4 , ua / 4 ) 
[14394] c:0 is:( move 3 , 3 / 4 ; move ul - ua , ul )  decode:( move 3 , 4 / 3 ; move 5 , 4 ) 
[14395] c:0 is:( move 3 , 4 * 4 ; move ul - ua , ul )  decode:( move 3 , 0 - 4 ; move 5 , 4 ) 
[14396] c:0 is:( move 5 , ul / 4 ; move ua + ul , 2 )  decode:( move 5 , ul / 4 ; move 8 , 2 ) 
[14397] c:0 is:( move ul - ua , ul ; move 4 , 4 * 3 )  decode:loop 0 , 3 , move 3 , v0 + 9 
[14398] c:0 is:( move ua , ua / 2 ; move ua / 4 , 4 )  decode:( move ua , 0 ; move ul , 4 ) 
[14399] c:0 is:( move 4 , ua / 4 ; move 3 - ua , ul )  decode:( move 3 , ua / 4 ; move 4 , ul ) 
[14400] c:0 is:( move 4 , ul ; move ua , ul + 4 * 4 )  decode:( move 4 , ul ; move ua , 0 - 2 ) 
[14401] c:0 is:( move 4 , 3 ; move ua - ul , ua / 4 )  decode:( move 4 , 3 ; move ul - ua , 8 ) 
[14402] c:0 is:( move 4 - ua , ul ; move ua , 4 / 3 )  decode:( move 2 , ul ; move ua , 0 - 2 ) 
[14403] c:0 is:( move 6 , ua / 4 ; move ua + ul , 2 )  decode:( move ua , ua / 4 ; move 7 , 2 ) 
[14404] c:0 is:( move 4 - ua , 3 / 4 ; move ua , ul )  decode:( move 3 , 4 ; move ua , 2 ) 
[14405] c:0 is:( move 3 , ua / 4 ; move 4 , ua * ua )  decode:loop 0 , 3 , move ua - 4 , v0 / 4 
[14406] c:0 is:( move ua , 3 / ua ; move ua , 4 * 4 )  decode:loop 0 , 2 , move 0 - ua , 4 * 4 
[14407] c:0 is:( move 3 , 0 - 9 ; move ul - ua , ul )  decode:( move 3 , 0 - 9 ; move ua , 4 ) 
[14408] c:0 is:( move 4 , 4 / ua ; move ua + ul , 4 )  decode:( move 4 , ua / 4 ; move 8 , 4 ) 
[14409] c:0 is:( move ul - ua , 4 ; move 3 , ua / 4 )  decode:( move 5 , 4 ; move 3 , 3 + 8 ) 
[14410] c:0 is:( move ul - ua , 4 / 3 ; move 3 , ul )  decode:( move ul - ua , ul ; move 3 , ul ) 
[14411] c:0 is:( move ul - ua , 3 / 4 ; move 3 , ul )  decode:( move ul - ua , 4 ; move 3 , ul ) 
[14412] c:0 is:( move ua , 2 / 6 ; move ua + ul , 4 )  decode:( move ua , 2 / 6 ; move 8 , 4 ) 
[14413] c:0 is:( move 4 , ua / 4 ; move ua + ul , 4 )  decode:( move 4 , ua / 4 ; move ua , 4 ) 
[14414] c:0 is:( move 4 , 4 * 4 ; move ua , ua * ua )  decode:( move 4 , 4 * 4 ; move ua , 8 ) 
[14415] c:0 is:( move ul - ua , 9 ; move 0 - ua , 4 )  decode:( move ul - ua , 9 ; move ua , 4 ) 
[14416] c:0 is:( move ua , 4 / 3 ; move 4 , ua * ua )  decode:( move 4 , 0 ; move ua , 3 / 2 ) 
[14417] c:0 is:( move 4 , 4 ; move ua + ul , ua / 4 )  decode:( move 4 , 4 ; move ua + ul , 8 ) 
[14418] c:0 is:( move 3 , 4 / 3 ; move ua - ul , ul )  decode:( move 3 , 4 / 3 ; move 5 , ul ) 
[14419] c:0 is:( move 3 , 4 / 3 ; move ul - ua , ul )  decode:( move 3 , 2 / 3 ; move 5 , 4 ) 
[14420] c:0 is:( move ul - ua , 2 / 5 ; move 3 , ul )  decode:( move 5 , 0 - 2 ; move 3 , 4 ) 
[14421] c:0 is:( move ul - 3 , 4 * 4 ; move ua , ul )  decode:( move 2 , 0 - 4 ; move ua , 4 ) 
[14422] c:0 is:( move 3 , 4 ; move ul - ua , 4 / ua )  decode:( move 3 , 4 ; move ul - ua , 7 ) 
[14423] c:0 is:( move ua + 2 , 9 ; move ua + ul , 4 )  decode:( move ua + 2 , 9 ; move 9 , 4 ) 
[14424] c:0 is:( move 3 , ua / 3 ; move ua , ua / 4 )  decode:( move 3 , ua / 3 ; move ua , 8 ) 
[14425] c:0 is:( move 4 , ua * ua ; move ua , 3 / 4 )  decode:( move 4 , 8 ; move ua , 3 / 4 ) 
[14426] c:0 is:( move 2 , ua / 4 ; move ua - ul , 5 )  decode:( move 2 , ua / 4 ; move 5 , 5 ) 
[14427] c:0 is:( move 4 , 3 / ua ; move ul - ua , 4 )  decode:( move 4 , 9 / ua ; move 5 , 4 ) 
[14428] c:0 is:( move ua , 2 / 6 ; move 3 - ua , ul )  decode:( move ua , 2 / 6 ; move 3 , 4 ) 
[14429] c:0 is:( move ua , 6 ; move ul - ua , 3 - 4 )  decode:( move ul - ua , 5 ; move ua , ul ) 
[14430] c:0 is:( move ua , 2 / 6 ; move 3 , ua * ua )  decode:( move ua , 2 / 6 ; move 4 , 5 ) 
[14431] c:0 is:( move 3 , 4 / ua ; move ul - ua , 4 )  decode:( move 3 , 2 / 3 ; move 5 , 4 ) 
[14432] c:0 is:( move ua - ul , ul / 6 ; move 2 , 2 )  decode:( move 5 , ul / 4 ; move 2 , 2 ) 
[14433] c:0 is:( move 2 , ul / ua ; move ua , 4 / 3 )  decode:( move 2 , 0 ; move ua , 5 / 4 ) 
[14434] c:0 is:( move 4 , ul / 4 ; move ua - ul , 2 )  decode:( move 4 , ul / 4 ; move ua , 2 ) 
[14435] c:0 is:( move 2 , 4 / ua ; move ua , ua / 4 )  decode:( move 2 , 4 / 3 ; move ua , 8 ) 
[14436] c:0 is:( move ul , 4 ; move ua + 4 , ua / 4 )  decode:( move 2 , 4 ; move 4 + 4 , 7 ) 
[14437] c:0 is:( move 4 , ul ; move ua + ul , 4 / 3 )  decode:( move 4 , ul ; move ua , 4 / 3 ) 
[14438] c:0 is:( move ua , 4 * 3 ; move ua , ua / 4 )  decode:( move ua , 4 ; move ua , 3 + 8 ) 
[14439] c:0 is:( move 8 , ua / 2 ; move ua + ul , 2 )  decode:( move 8 , ua ; move ua + ul , 2 ) 
[14440] c:0 is:( move 4 , ul ; move ua + 4 , ua / 4 )  decode:( move 4 , ul ; move 4 + 4 , 7 ) 
[14441] c:0 is:( move ul - ua , 2 ; move 4 , ul / 4 )  decode:( move 5 , 0 - 3 ; move ua , 3 ) 
[14442] c:0 is:( move ua - 9 , 3 ; move ua + ul , 2 )  decode:( move 3 , 0 ; move 8 , ul ) 
[14443] c:0 is:( move 8 , 0 ; move ua + ul , ua / 4 )  decode:loop 0 , 3 , move ua + ul , 0 - 8 
[14444] c:0 is:( move ua , 4 * 4 ; move 4 , ua * ua )  decode:( move ua , 0 - 4 ; move 4 , 5 ) 
[14445] c:0 is:( move ua , ua / 3 ; move 3 , 4 / ua )  decode:( move ua , ua / 3 ; move 3 , 7 ) 
[14446] c:0 is:( move ua , ul / ua ; move 3 + 5 , 4 )  decode:( move ua , ul ; move ua + 2 , 4 ) 
[14447] c:0 is:( move 5 , ul / 3 ; move ul - ua , 2 )  decode:( move 5 , 2 / ua ; move 5 , 5 ) 
[14448] c:0 is:( move 4 , ul / 3 ; move ua , 2 / ua )  decode:( move ua , 2 / 4 ; move 4 , 3 ) 
[14449] c:0 is:( move ua , 4 * 4 ; move ua - ul , 4 )  decode:loop 0 , 2 , move ua - 2 , v0 - 4 
[14450] c:0 is:( move 3 - ua , ul ; move 4 , 4 / ua )  decode:( move 3 , 4 ; move 4 , 4 / ua ) 
[14451] c:0 is:( move 3 , ul ; move ul - ua , 4 / 3 )  decode:( move 3 , ul ; move ua - ul , 8 ) 
[14452] c:0 is:( move ua , 5 / 4 ; move ua - ul , 2 )  decode:( move 5 , 4 / 5 ; move 5 , 2 ) 
[14453] c:0 is:( move ua - ul , 5 ; move ul - 5 , 2 )  decode:( move 4 , 5 ; move 5 , ul ) 
[14454] c:0 is:( move ua , 4 + 9 ; move ua + ul , 2 )  decode:( move ua , 9 + 4 ; move 9 , 2 ) 
[14455] c:0 is:( move 4 , 0 - 9 ; move ua + ul , ul )  decode:( move 5 , 0 - 9 ; move 8 , ul ) 
[14456] c:0 is:( move 3 , ul ; move ua - ul , 4 / 3 )  decode:( move 3 , 4 ; move ua - ul , 4 / ) 4 
[14457] c:0 is:( move ua + ul , 9 ; move ua + 2 , 4 )  decode:( move 8 , 9 ; move ua + 2 , 4 ) 
[14458] c:0 is:( move ua - ul , 9 ; move 2 - ua , 2 )  decode:( move ul - ua , 9 ; move 4 , 2 ) 
[14459] c:0 is:( move 3 , ua / 4 ; move ua + ul , 5 )  decode:( move 3 , 5 / 4 ; move 5 , 5 ) 
[14460] c:0 is:( move 4 , ul ; move 3 - ua , ua / 4 )  decode:( move 4 , ul ; move 4 , 7 + 4 ) 
[14461] c:0 is:( move ua , 2 - 3 ; move ua + ul , 9 )  decode:( move ua , 2 - 3 ; move 8 , 9 ) 
[14462] c:0 is:( move ul - ua , 3 ; move ua , 5 / 4 )  decode:( move 5 , 0 - 4 ; move 5 , 5 ) 
[14463] c:0 is:( move 4 , 0 - 9 ; move ul - ua , ul )  decode:( move 4 , 0 - 9 ; move 5 , 4 ) 
[14464] c:0 is:( move ua + ul , ul / 6 ; move 4 , 2 )  decode:( move ua + ul , ul ; move 4 , 2 ) 
[14465] c:0 is:( move 4 , 9 + 2 ; move ua + ul , ul )  decode:( move 4 , 2 - 9 ; move 8 , ul ) 
[14466] c:0 is:( move ua , 9 ; move 4 + 2 , ua * ua )  decode:( move ua + ul , 9 ; move ua , 8 ) 
[14467] c:0 is:( move ul - ua , ul ; move 4 , 4 / 3 )  decode:( move 2 - ua , ul ; move 5 , 8 ) 
[14468] c:0 is:( move 4 - ua , 9 ; move ua + ul , 2 )  decode:( move 2 , 2 / 3 ; move ua , 2 ) 
[14469] c:0 is:( move 4 , ul ; move ul - ua , 4 / 3 )  decode:( move 4 , ul ; move ua - ul , 5 ) 
[14470] c:0 is:( move ul - ua , 6 ; move ua , 4 * 3 )  decode:0 loop 0 , 3 , move v0 + 4 , 9 
[14471] c:0 is:( move 8 , 2 - 3 ; move ul - ua , ul )  decode:( move ua , ul - 8 ; move 5 , ul ) 
[14472] c:0 is:( move ua , 4 / ua / 3 ; move ua , 4 )  decode:( move 0 - ua , 5 ; move ua , 4 ) 
[14473] c:0 is:( move ua , 4 * 3 / ua ; move 4 , ul )  decode:( move 0 - ua , 5 ; move 4 , ul ) 
[14474] c:0 is:( move ul - ua , 4 * 4 ; move 4 , ul )  decode:( move 5 , ul / 4 ; move 4 , ul ) 
[14475] c:0 is:( move 3 , 4 / ua ; move ua , ua / 4 )  decode:( move 3 , 3 / 2 ; move ua , 8 ) 
[14476] c:0 is:( move ua / 4 , 3 ; move ua , ua / 4 )  decode:( move 2 , 9 ; move ua , 7 + 4 ) 
[14477] c:0 is:( move ul - ua , ul / 4 ; move 3 , 4 )  decode:loop 0 , 4 , move v0 , v0 - 4 
[14478] c:0 is:( move 3 , 2 / 6 ; move ul - ua , ul )  decode:( move 3 , 2 / 6 ; move 5 , 4 ) 
[14479] c:0 is:( move ua , ul / 3 ; move ua , 3 / 4 )  decode:loop 0 , 3 , move ua - 2 , 2 / 4 
[14480] c:0 is:( move ua , 2 / 6 ; move ua , ua / 3 )  decode:( move ua , 3 / move ua , 0 - 4 ) 
[14481] c:0 is:( move 2 - ua , 9 ; move ua , ul - 3 )  decode:( move ua , 4 ; move 5 , 5 ) 
[14482] c:0 is:( move 4 , 3 / ua ; move ua , ua / 4 )  decode:( move ua , 4 / 3 ; move ua , 8 ) 
[14483] c:0 is:( move ua , 4 * 4 / ua ; move 3 , ul )  decode:( move ua , 4 + 9 ; move 3 , ul ) 
[14484] c:0 is:( move 4 , ua / 4 ; move ua , ua / 3 )  decode:( move 4 , 4 / ua ; move ua , ul ) 
[14485] c:0 is:( move 6 , ul / 4 ; move ua + ul , 2 )  decode:( move ua , ul / 4 ; move 7 , 2 ) 
[14486] c:0 is:( move 4 , 4 ; move ua - ul , ua / 4 )  decode:( move 4 , 4 ; move 5 , ua / 4 ) 
[14487] c:0 is:( move ua , ua / 3 ; move 4 , ua / 4 )  decode:( move ua , 3 / ua ; move 4 , 8 ) 
[14488] c:0 is:( move 9 , 0 ; move ua + ul , ua / 4 )  decode:( move 9 , 0 ; move 9 , ua / 4 ) 
[14489] c:0 is:( move ua , 4 + 9 ; move 2 - ua , ul )  decode:( move ua , 9 + 4 ; move 5 , 4 ) 
[14490] c:0 is:( move 4 , 4 / ua ; move ua - 4 , ul )  decode:( move 4 , 4 / ua ; move 3 , ul ) 
[14491] c:0 is:( move 4 , 0 - 9 ; move ua - ul , ul )  decode:( move 4 , 0 - 9 ; move 5 , ul ) 
[14492] c:0 is:( move ul - 6 , 2 ; move ua , 4 / ua )  decode:( move ul - ua , 2 ; move ua , 7 ) 
[14493] c:0 is:( move 4 , ua / 4 ; move ul - ua , 4 )  decode:( move 4 , 3 / 2 ; move 5 , ul ) 
[14494] c:0 is:( move 3 , ua / 4 ; move ua , 4 / ua )  decode:( move 3 , 3 / 4 ; move ua , 7 ) 
[14495] c:0 is:( move ua - ul , ua / 6 ; move 4 , 2 )  decode:( move ua - ul , 0 ; move 4 , 2 ) 
[14496] c:0 is:( move 4 , 9 ; move ua + 2 , ua * ua )  decode:( move 2 - ua , 9 ; move 8 , 5 ) 
[14497] c:0 is:( move ua , 4 / 3 ; move ua - ul , 5 )  decode:( move 5 , 5 / 5 ; move 5 , 5 ) 
[14498] c:0 is:( move ul - ua , 4 ; move 4 , ua / 4 )  decode:( move 5 , 4 ; move 4 , ua / 4 ) 
[14499] c:0 is:( move 4 , ul / 4 ; move ua + ul , 4 )  decode:( move 4 , ul / 4 ; move 7 , 4 ) 
[14500] c:0 is:( move ua , ul / 4 * 3 ; move 3 , ul )  decode:( move ua , ul ; move 3 , 2 - 3 ) 
[14501] c:0 is:( move 5 , ul / 4 ; move ul - ua , 2 )  decode:( move 5 , ul / 4 ; move 5 , 5 ) 
[14502] c:0 is:( move ul - ua , 9 ; move ua - 3 , 2 )  decode:( move 5 , 3 * 2 ; move 4 , 2 ) 
[14503] c:0 is:( move ua , 5 / 3 ; move ua - ul , 4 )  decode:( move ua , 8 ; move ul - ua , 4 ) 
[14504] c:0 is:( move ul - ua , ul ; move 4 , 3 / 4 )  decode:( move ul - ua , ul ; move 4 , 7 ) 
[14505] c:0 is:( move ua , 4 / ua ; move ua , 4 * 4 )  decode:( move ua , ul ; move ua , 9 ) 
[14506] c:0 is:( move 4 , 4 / ua ; move ua - ul , 4 )  decode:( move 4 , 7 ; move ua - ul , 4 ) 
[14507] c:0 is:( move ul - ua , 4 ; move ua , 5 / 3 )  decode:( move 5 , 4 ; move ua , 9 + 4 ) 
[14508] c:0 is:( move ua - ul , ul / 4 ; move 3 , 4 )  decode:( move 5 , ul / 4 ; move 3 , 4 ) 
[14509] c:0 is:( move ua , ul / 6 ; move ua , 2 - 4 )  decode:( move ua , 4 / 3 ; move ua , 2 ) 
[14510] c:0 is:( move ua + ul , ul - 6 ; move 4 , 4 )  decode:( move ua , 4 / 5 ; move 4 , 4 ) 
[14511] c:0 is:( move 4 , ua - 4 ; move ua , ul / 4 )  decode:( move ua , 4 * move 4 , 2 / 4 ) 
[14512] c:0 is:( move 4 , 4 / 3 ; move ul - ua , ul )  decode:( move 4 , 4 / 3 ; move 5 , 4 ) 
[14513] c:0 is:( move 9 - ua , 2 ; move ua + ul , 4 )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[14514] c:0 is:( move ua , 5 / 4 ; move ua + ul , 4 )  decode:( move ua , 0 - 5 ; move 7 , 4 ) 
[14515] c:0 is:( move ul - ua , 4 / 3 ; move 4 , ul )  decode:( move 5 , 9 / 2 ; move 4 , 4 ) 
[14516] c:0 is:( move ua , 3 / ua ; move 4 , ua / 4 )  decode:( move 2 - ua , 2 ; move ua , 8 ) 
[14517] c:0 is:( move 4 , 4 ; move ua - ul , ul / 3 )  decode:( move 3 , 4 ; move ul - ua , 4 ) 
[14518] c:0 is:( move ua / 4 , 4 ; move ul - ua , 4 )  decode:( move 2 , 4 ; move ua - ul , 4 ) 
[14519] c:0 is:( move 4 , 4 + 6 ; move ul - ua , ul )  decode:( move 4 , 5 + 5 ; move 5 , ul ) 
[14520] c:0 is:( move ul / 2 , 4 ; move ua , ua / 4 )  decode:( move ul , 4 ; move ua , ua * ua ) 
[14521] c:0 is:( move ua , ua / 4 ; move 3 , 4 / ua )  decode:( move ua , 3 / 2 ; move 3 , 7 ) 
[14522] c:0 is:( move 4 , 4 / ua ; move 4 , ua * ua )  decode:( move 4 , 2 / 3 ; move 4 , 8 ) 
[14523] c:0 is:( move 4 , ul / 4 ; move 3 , ua * ua )  decode:( move 3 , 2 ; move 4 , 4 / 3 ) 
[14524] c:0 is:( move ua - ul , 9 ; move ua + 2 , 4 )  decode:( move ua , 9 ; move ua + 2 , 4 ) 
[14525] c:0 is:( move ul - ua , ul / 3 ; move 3 , 5 )  decode:( move 5 , 4 * 4 ; move 3 , 5 ) 
[14526] c:0 is:( move 9 , 2 / ua ; move ua + ul , 2 )  decode:( move 9 , 9 + 4 ; move ua , 2 ) 
[14527] c:0 is:( move 5 , 2 / 4 ; move ul - ua , ul )  decode:( move 5 , 2 / 4 ; move 5 , 4 ) 
[14528] c:0 is:( move ul - ua , 3 ; move 3 - ua , 8 )  decode:( move ul - ua , 3 ; move 4 , 8 ) 
[14529] c:0 is:( move ua , 4 / ua ; move 4 , ua / 3 )  decode:( move ua , 4 / ua ; move 4 , 2 ) 
[14530] c:0 is:( move ul - ua , 4 / ua ; move 4 , 4 )  decode:( move ul - ua , 7 ; move 4 , 4 ) 
[14531] c:0 is:( move 5 , 3 ; move ul - ua , ua / 4 )  decode:( move 5 , 3 ; move ul - ua , 8 ) 
[14532] c:0 is:( move ua + ul , 6 ; move 4 , ua / 3 )  decode:( move 4 , 5 ; move ua + ul , ul ) 
[14533] c:0 is:( move 5 , 3 * 4 ; move ul - ua , ul )  decode:( move ul - ua , 4 ; move ua , ul ) 
[14534] c:0 is:( move ul - ua , 3 / 4 ; move 4 , ul )  decode:( move 5 , 4 ; move 4 , ua / 3 ) 
[14535] c:0 is:( move ua , ul / 3 ; move 4 , 3 / ua )  decode:( move 4 , 4 ; move ua , 4 * 3 ) 
[14536] c:0 is:( move 4 , ua / 3 ; move ua , ua / 4 )  decode:( move 4 , 2 ; move ua , ua / 4 ) 
[14537] c:0 is:( move 5 , 4 ; move ua + ul , ua / 4 )  decode:( move 5 , 4 ; move ua , ua / 4 ) 
[14538] c:0 is:( move 4 , 4 / 3 ; move ua - ul , ul )  decode:( move 4 , 5 / 3 ; move ua , ul ) 
[14539] c:0 is:( move 5 , ua / 4 ; move 3 , ua * ua )  decode:( move 5 , ua / 4 ; move 3 , 8 ) 
[14540] c:0 is:( move 5 , 4 ; move ul - ua , 3 / ua )  decode:( move 5 , 0 - 2 ; move 5 , 9 ) 
[14541] c:0 is:( move ua - ul , ul / 6 ; move 3 , 2 )  decode:( move 5 , ul / 6 ; move 3 , 2 ) 
[14542] c:0 is:( move ua - ul , 4 ; move 4 , 4 / ua )  decode:( move ul - ua , 7 ; move 4 , 7 ) 
[14543] c:0 is:( move ua / 4 , 3 ; move ul - ua , 5 )  decode:( move 2 , 3 ; move 5 , 2 ) 
[14544] c:0 is:( move 3 , 4 ; loop 0 , 3 , move 3 , 2 )  decode:loop 0 , 4 , move 3 - ua , 4 
[14545] c:0 is:( move 3 , 9 + 2 ; move ul - ua , ul )  decode:( move 3 , 9 + 2 ; move ua , 4 ) 
[14546] c:0 is:( move 4 , ua / 4 ; move 4 , ua * ua )  decode:( move 4 , ua / 4 ; move 4 , 8 ) 
[14547] c:0 is:( move 3 , ul / 4 ; move ua - ul , 4 )  decode:( move 3 , ul / 4 ; move 6 , 4 ) 
[14548] c:0 is:( move 3 , ul / 4 ; move ua + ul , 5 )  decode:( move 3 , ul / 4 ; move 7 , 5 ) 
[14549] c:0 is:( move 4 , 4 ; move ul - ua , 4 / ua )  decode:( move 4 , 4 ; move ul - ua , 7 ) 
[14550] c:0 is:( move 4 , ul / ua ; move 4 + 4 , ul )  decode:loop 0 , 4 , move ul + v0 , ul / 4 
[14551] c:0 is:( move ul - ua , ua / 4 ; move 4 , 4 )  decode:( move 5 , 2 * 2 ; move 4 , 4 ) 
[14552] c:0 is:( move 9 , 3 ; move ua + ul , ua - 3 )  decode:( move 9 , 3 ; move ua , 0 - 3 ) 
[14553] c:0 is:( move 6 , ua / 3 ; move ul + ua , 4 )  decode:( move ua , 9 ; move ua + ul , 4 ) 
[14554] c:0 is:( move ua + ul , ul / 4 ; move 4 , 4 )  decode:loop 0 , 4 , move ua - 4 , v0 - 3 
[14555] c:0 is:( move ul - ua , ul / 4 ; move 5 , 2 )  decode:( move ua , ul - 4 ; move 5 , 2 ) 
[14556] c:0 is:( move 4 , 4 / ua ; move ul - ua , 4 )  decode:( move 4 , 4 / ua ; move 5 , 4 ) 
[14557] c:0 is:( move ua , ua / 4 ; move 3 , ua / 4 )  decode:( move 3 , 0 ; move ua , ua / 4 ) 
[14558] c:0 is:( move 4 , 4 ; move ul - ua , ua / 4 )  decode:( move 4 , 4 ; move 5 , 7 + 4 ) 
[14559] c:0 is:( move ua , 4 - 9 ; move ua + ul , 2 )  decode:loop 0 , 2 , move ua , v0 - 3 
[14560] c:0 is:( move 4 , 4 * 4 ; move ul - ua , ul )  decode:( move 4 , 4 * 4 ; move 5 , 4 ) 
[14561] c:0 is:( move ua , ua / 3 ; move 4 , 4 / ua )  decode:( move ua , 2 ; move 4 , 2 / 5 ) 
[14562] c:0 is:( move ua , 9 / 2 ; move ua + ul , 2 )  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[14563] c:0 is:( move ua + ul , ul - 9 ; move 3 , 2 )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[14564] c:0 is:( move ul - ua , ua / 4 ; move 3 , 5 )  decode:( move 5 , ul - 9 ; move 3 , 2 ) 
[14565] c:0 is:( move 3 - ua , 9 ; move ul - ua , 2 )  decode:( move 3 - ua , 9 ; move ua , ul ) 
[14566] c:0 is:( move 3 - ua , 2 ; move ua - ul , 9 )  decode:( move 3 , 4 ; move ua , 2 / 4 ) 
[14567] c:0 is:( move 4 , 9 + 2 ; move ua , ua * ua )  decode:( move 4 , 5 + 3 ; move ua , 8 ) 
[14568] c:0 is:( move 3 , 5 / 4 ; move ua , ua * ua )  decode:( move ua , 0 ; move 3 , 3 / 2 ) 
[14569] c:0 is:( move 9 , ua / 2 ; move ua + ul , 2 )  decode:( move 9 , ua ; move 9 , 2 ) 
[14570] c:0 is:( move ua , ul / 6 ; move ua - 4 , 2 )  decode:( move ua , ul / 4 ; move 3 , 2 ) 
[14571] c:0 is:( move 5 , ua / 4 - ua ; move 3 , ul )  decode:( move 3 , 9 + 4 ; move 3 , ul ) 
[14572] c:0 is:( move ua - ul , 6 ; move ua / 2 , 4 )  decode:( move ul - ua , 9 ; move 3 , 4 ) 
[14573] c:0 is:( move ua , 4 / 3 ; move ua , ua / 4 )  decode:loop 0 , 2 , move 3 + 2 , 3 / 2 
[14574] c:0 is:( move ul - ua , ul ; move 4 , 4 * 4 )  decode:( move 4 , 4 ; move 4 , ul / 4 ) 
[14575] c:0 is:( move 0 - ua , 9 ; move ua , 4 / ua )  decode:( move ua , 9 ; move ua , 9 ) 
[14576] c:0 is:( move ua , 9 ; move ul - ua , 2 - 3 )  decode:( move ul - ua , 8 ; move ua , ul ) 
[14577] c:0 is:( move ua - ul , ul ; move 4 , 4 / 3 )  decode:( move 4 , ul ; move 5 , 4 / 3 ) 
[14578] c:0 is:( move ua , ua / 4 ; move ua , 4 * 4 )  decode:( move ua , ua / 4 ; move ua , 3 ) 
[14579] c:0 is:( move ua - ul , 5 / 3 ; move ua , 4 )  decode:( move ul - ua , ua / 2 , 2 + v) 0 
[14580] c:0 is:( move ua , 6 * 3 ; move ua , ua / 3 )  decode:loop 0 , 2 , move ua , 0 - 2 
[14581] c:0 is:( move 9 , ua * ua ; move ua + 2 , 4 )  decode:( move 9 , ua * ua ; move 9 , 4 ) 
[14582] c:0 is:( move 4 , ua / 4 ; move ua + ul , 5 )  decode:( move 4 , ua / 4 ; move 8 , 5 ) 
[14583] c:0 is:( move 9 , ul / ua ; move ua + 2 , 2 )  decode:( move 9 , ul / ua ; move ua , 2 ) 
[14584] c:0 is:( move ua , 0 - 9 ; move ul - ua , 5 )  decode:( move ua , 0 - 9 ; move 5 , 5 ) 
[14585] c:0 is:( move 3 , 6 ; move ua + ul , ua / 4 )  decode:( move 3 , 0 ; move ua + ul , 8 ) 
[14586] c:0 is:( move ua , 4 * 8 ; move ua + ul , 2 )  decode:( move ua , 4 / ua ; move 8 , 2 ) 
[14587] c:0 is:( move ua , ul / 6 ; move 2 - ua , 4 )  decode:( move ua , ul / 4 ; move 4 , ul ) 
[14588] c:0 is:( move 6 , 2 / ua ; move ul - ua , 4 )  decode:( move ua , 2 / ua ; move 5 , ul ) 
[14589] c:0 is:( move 4 , 3 / ua ; move ua , 4 / ua )  decode:loop 0 , 4 , move ua - 4 , 2 / 8 
[14590] c:0 is:( move ua , 2 / 6 ; move 4 , ua * ua )  decode:( move 5 , 2 / ua ; move 5 , 5 ) 
[14591] c:0 is:( move 5 , 4 / ua ; move ua + ul , 4 )  decode:( move 5 , ua / 2 ; move 8 , 4 ) 
[14592] c:0 is:( move ua + ul , 4 - 9 ; move ua , 2 )  decode:( move ua , ul / 5 ; move ua , 2 ) 
[14593] c:0 is:( move 2 - ua , ul / 6 ; move 4 , ul )  decode:( move 4 , 0 - 3 ; move 4 , 4 ) 
[14594] c:0 is:( move 4 , 5 / 4 ; move ua , ua * ua )  decode:( move ua , 4 / 3 ; move ua , 8 ) 
[14595] c:0 is:( move ua + ul , 9 + 4 ; move ua , 4 )  decode:loop 0 , 2 , move ua , v0 - 4 
[14596] c:0 is:( move ul - ua , 6 ; move ua , 4 / 3 )  decode:( move 0 - ua , ul ; move 5 , 5 ) 
[14597] c:0 is:( move 4 , ua - 4 ; move 7 , ua * ua )  decode:( move ua , 4 ; move 4 , 0 - 5 ) 
[14598] c:0 is:( move 4 , 4 / ua ; move ua - ul , 5 )  decode:( move 4 , 4 / ua ; move 5 , 5 ) 
[14599] c:0 is:( move ul - ua , 4 ; move ua , 5 / 4 )  decode:( move ua , ua / 3 ; move 5 , 5 ) 
[14600] c:0 is:( move 9 , 3 / ua ; move ua + ul , 2 )  decode:( move 9 , 3 / 4 ; move ua , 2 ) 
[14601] c:0 is:( move 5 , ul / 4 ; move ua + ul , 4 )  decode:( move 5 , ul / 4 ; move 7 , 4 ) 
[14602] c:0 is:( move ua , ul / 6 ; move 3 , 2 / ua )  decode:loop 0 , 4 , move ua - 4 , 6 / 4 
[14603] c:0 is:( move ul - 4 , ua ; move ul - 8 , 2 )  decode:( move 3 , 0 ; move 7 , 2 ) 
[14604] c:0 is:( move 4 , 4 / ua ; move ua , 4 / ua )  decode:loop 0 , 4 , move ua - 4 , 2 / ua 
[14605] c:0 is:( move 4 , 2 / 6 ; move ul - ua , ul )  decode:( move 4 , 2 / 6 ; move 5 , 4 ) 
[14606] c:0 is:( move ua , ul / 4 ; move 4 , ua / 3 )  decode:( move ua , 2 / 4 ; move 5 , 2 ) 
[14607] c:0 is:( move ua , 9 * 3 ; move ua - ul , 2 )  decode:( move 0 - ua , 5 ; move 5 , ul ) 
[14608] c:0 is:( move 5 , ul / 6 ; move ua + ul , 2 )  decode:( move 5 , ul / 4 ; move 8 , 2 ) 
[14609] c:0 is:( move ul - ua , 6 ; move ul - 4 , 4 )  decode:( move ul - ua , 6 ; move 3 , 4 ) 
[14610] c:0 is:( move 5 , 4 / ua ; move ua , ua / 3 )  decode:( move ua , 4 / ua ; move ua , 2 ) 
[14611] c:0 is:( move 9 , ua / 3 ; move ua + ul , 2 )  decode:( move 9 , ua / 3 ; move ua , 2 ) 
[14612] c:0 is:( move 4 , 4 - ul / 4 ; move ua , ul )  decode:( move 4 , 8 ; move ua , ul ) 
[14613] c:0 is:( move 5 , 0 - 9 ; move ua - ul , ul )  decode:( move 5 , 0 - 9 ; move 5 , ul ) 
[14614] c:0 is:( move 5 , 4 ; move ul - ua , ua / 4 )  decode:( move 5 , 4 ; move 5 , 7 + 4 ) 
[14615] c:0 is:( move ua , 2 / 6 ; move ua , ua / 4 )  decode:( move ua , 5 ; move ua , ua / 4 ) 
[14616] c:0 is:( move 5 , 4 / ua ; move ua - ul , 4 )  decode:( move 5 , 4 / ua ; move 5 , 4 ) 
[14617] c:0 is:( move 4 , 4 ; move ul - ua , ul / 4 )  decode:( move 4 , 0 - 2 ; move 5 , 3 ) 
[14618] c:0 is:( move 4 , ul / 4 - ua ; move 4 , ul )  decode:( move 4 , ua / ua ; move 4 , ul ) 
[14619] c:0 is:( move ua , 4 * 9 ; move ua + ul , 2 )  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[14620] c:0 is:( move 4 , 0 ; move 3 , 4 ; move 3 , 4 )  decode:loop 0 , 4 , move ua - 4 , v0 * 4 
[14621] c:0 is:( move 3 , 9 / ua ; move 2 + ua , ul )  decode:( move 3 , 3 / 2 ; move ua , ul ) 
[14622] c:0 is:( move ua , 4 * 4 / ua ; move 4 , ul )  decode:( move ua , 4 / 9 ; move 4 , ul ) 
[14623] c:0 is:( move ua , 9 + 5 ; move ua - ul , 2 )  decode:( move ua , 9 + 5 ; move 5 , 2 ) 
[14624] c:0 is:( move 4 , ul / 4 ; move ul - ua , 4 )  decode:( move 4 , ul / 4 ; move 5 , ul ) 
[14625] c:0 is:( move 3 + 4 , 9 ; move ua , ua * ua )  decode:( move ua + ul , 9 ; move ua , 8 ) 
[14626] c:0 is:( move ua , ul / 6 ; move 2 , ua / 3 )  decode:( move ua , ul / 6 ; move 9 , 2 ) 
[14627] c:0 is:( move 4 , ul / 6 ; move ua - ul , 2 )  decode:( move 4 , ul / 6 ; move 5 , 2 ) 
[14628] c:0 is:( move ua , 4 / 7 ; move ua - ul , 2 )  decode:( move ua , 4 / ua ; move 5 , 2 ) 
[14629] c:0 is:( loop 0 , 4 , move 4 , 4 ; move 4 , 0 )  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[14630] c:0 is:( move 4 , 6 ; move ua + ul , ua / 4 )  decode:( move 4 , 6 ; move ua + ul , 8 ) 
[14631] c:0 is:( move 4 , 9 + 2 ; move ul - ua , ul )  decode:( move 4 , 2 + 5 ; move 5 , ul ) 
[14632] c:0 is:( move 5 , ul / 4 ; move ua , ul - 3 )  decode:( move ua , 5 / 3 ; move 5 , 2 ) 
[14633] c:0 is:( move 3 , ul / 4 ; move ua , 4 / ua )  decode:( move ua , 4 / ua ; move ua , 7 ) 
[14634] c:0 is:( move 3 , ul / 6 ; move 3 - ua , ul )  decode:( move 3 , ul ; move 3 , 0 - 2 ) 
[14635] c:0 is:( move ua , ul / 6 ; move ua , 3 / 2 )  decode:loop 0 , 2 , move ua , v0 + 2 
[14636] c:0 is:( move ua , 4 / 5 ; move ua , ua / 3 )  decode:( move ua , 4 / 5 ; move ua , 2 ) 
[14637] c:0 is:( move ul , 4 * 4 ; move ua , 4 / ua )  decode:( move ua , 4 ; move ul , ul ) 
[14638] c:0 is:( move 2 - ua , 9 ; move 4 , ua * ua )  decode:loop 0 , 2 , move 4 + v0 , 4 / 3 
[14639] c:0 is:( move 9 , 2 / ua ; move 2 - ua , ul )  decode:( move 9 , ul / ua ; move ua , ul ) 
[14640] c:0 is:( move ua , 9 / 2 ; move ua - ul , 2 )  decode:( move ua , 9 / 2 ; move 5 , 2 ) 
[14641] c:0 is:( move ua , ul / ua ; move 7 + 3 , 4 )  decode:( move 9 , ul / ul ; move ua , 4 ) 
[14642] c:0 is:( move ua , ua / 4 ; move 5 , ua / 3 )  decode:( move ua , ua / 4 ; move 5 , 2 ) 
[14643] c:0 is:( move ul - ua , ul / 4 ; move 4 , 4 )  decode:( move 5 , 4 * 4 ; move 4 , ul ) 
[14644] c:0 is:( move 4 , 0 ; move 2 , 4 ; move 4 , 4 )  decode:( move 2 - ua , 2 ; move 4 , 6 ) 
[14645] c:0 is:( move ul - ua , 3 ; move 4 , ua - 8 )  decode:( move ua , 6 ; move 4 , 3 / 2 ) 
[14646] c:0 is:( move ua , ul / 4 ; move 3 , ua / 4 )  decode:( move 3 - ua , 3 ; move ua , 8 ) 
[14647] c:0 is:( move 4 , ul / ua ; move 3 , ua / 4 )  decode:loop 0 , 3 , move 3 / v0 , 2 / 4 
[14648] c:0 is:( move 5 , 3 / 4 ; move ul - ua , ul )  decode:( move 5 , 4 / 3 ; move 5 , 4 ) 
[14649] c:0 is:( move ul - ua , 4 ; move 5 , ua / 4 )  decode:( move 5 , 4 ; move 5 , ua / 4 ) 
[14650] c:0 is:( move ua - 9 , 4 ; move ua + 3 , ul )  decode:( move 3 , ul ; move 3 + ua , ul ) 
[14651] c:0 is:( move ua , 3 / ua ; move 4 , ul / 4 )  decode:( move 4 , 4 * 3 ; move ua , ul ) 
[14652] c:0 is:( move 5 , ua / 3 ; move ua , ua / 4 )  decode:( move 5 , ua / 3 ; move ua , 8 ) 
[14653] c:0 is:( move 5 , 6 ; move ua + ul , ua / 3 )  decode:( move 5 , 7 ; move ua , ua / 3 ) 
[14654] c:0 is:( move 3 , 3 ; loop 0 , 3 , move 3 , 4 )  decode:loop 0 , 3 , move 3 - ua , 0 - 9 
[14655] c:0 is:( move ua , 2 / 8 ; move ua + ul , 4 )  decode:( move ua , ul / 4 ; move 7 , 4 ) 
[14656] c:0 is:( move 4 , ua / 6 ; move ua + ul , 4 )  decode:( move 4 , ul ; move ua + ul , 4 ) 
[14657] c:0 is:( move 0 - ua , 9 / ua ; move 4 , ul )  decode:( move ua , 9 + 2 ; move 4 , 4 ) 
[14658] c:0 is:( move 4 , ul / 4 ; move ua - ul , 4 )  decode:( move 4 , ul / 4 ; move 5 , 4 ) 
[14659] c:0 is:( move 5 , 3 / ua ; move ua , ua / 4 )  decode:( move ua , 2 ; move 5 , ua / 4 ) 
[14660] c:0 is:( move ua , 9 ; move 3 + 4 , ua * ua )  decode:( move ua , 9 ; move ua + ul , 8 ) 
[14661] c:0 is:( move ul - ua , 9 + 2 ; move 4 , ul )  decode:( move 4 , 8 ; move 5 , ua / 3 ) 
[14662] c:0 is:( move 4 , ua / 4 ; move ua - ul , 5 )  decode:( move 4 , ua / 4 ; move 5 , 5 ) 
[14663] c:0 is:( move 4 - ua , 9 ; move 3 + ua , ul )  decode:( move 3 , 4 / ua ; move 9 , ul ) 
[14664] c:0 is:( move 5 , 4 / 3 ; move ul - ua , ul )  decode:loop 0 , 2 , move ul - ua , 0 - 4 
[14665] c:0 is:( move 5 , ua / 4 ; move ua - 4 , ul )  decode:( move 5 , 3 / 2 ; move 3 , ul ) 
[14666] c:0 is:( move ua - 9 , 0 ; move ua , ua / 5 )  decode:( move 3 , 0 - 4 ; move 5 , 5 ) 
[14667] c:0 is:( move 4 , 6 / ua ; move ua + ul , 4 )  decode:( move 4 , ul ; move ua + ul , 4 ) 
[14668] c:0 is:( move ua , ul - 9 ; move ua + 3 , 4 )  decode:loop 0 , 3 , move v0 * ua , 0 - 4 
[14669] c:0 is:( move 6 , 4 / ua ; move ua + ul , 4 )  decode:( move 6 , ua / 3 ; move 8 , 4 ) 
[14670] c:0 is:( move 5 , ul ; move ul - ua , 4 / 3 )  decode:( move 5 , ul ; move 5 , 0 - 5 ) 
[14671] c:0 is:( move ul - ua , ul ; move 4 , 7 + 4 )  decode:( move ua - ul , ul ; move 4 , 8 ) 
[14672] c:0 is:( move ua , 2 - 9 ; move ua - ul , 4 )  decode:( move ua , 0 - 9 ; move 5 , 4 ) 
[14673] c:0 is:( move 2 - ua , 9 ; move ua - ul , 4 )  decode:( move 4 , 6 ; move ua - ul , 4 ) 
[14674] c:0 is:( move ul - ua , 2 / 8 ; move 3 , ul )  decode:( move ul - ua , ul ; move 3 , ul ) 
[14675] c:0 is:( move 5 , 4 / ua ; move ua , ua / 4 )  decode:( move 5 , 4 / ua ; move ua , 8 ) 
[14676] c:0 is:( move 4 , 2 * 9 ; move ua , ua * ua )  decode:( move ua , 2 - 3 ; move ua , 5 ) 
[14677] c:0 is:( move 3 - ua , 9 ; move ul - ua , 4 )  decode:( move 4 , 9 ; move 5 , 4 ) 
[14678] c:0 is:( move ua , ul / 3 ; move ua , 7 / 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 9 
[14679] c:0 is:( move ua , 6 * 4 ; move ua , ua / 4 )  decode:loop 0 , 3 , move v0 - ua , 4 ) 
[14680] c:0 is:( move 4 , 0 ; move 4 , 4 ; move 4 , 3 )  decode:loop 0 , 4 , move ua - 3 , 0 - v0 
[14681] c:0 is:( move 3 , 9 / ua ; move ua - ul , 2 )  decode:( move 3 , 2 / 6 ; move 5 , 2 ) 
[14682] c:0 is:( move 5 , ul / 4 ; move ua , ua / 3 )  decode:( move 5 , 2 / 6 ; move 6 , 2 ) 
[14683] c:0 is:( move 6 + ul , ua / 4 ; move ua , 5 )  decode:( move ua + ul , ua ; move ua , 5 ) 
[14684] c:0 is:( move 4 , 9 + 4 ; move ua , ua * ua )  decode:( move 4 , 9 + 4 ; move ua , 9 ) 
[14685] c:0 is:( move 3 , 9 ; move ua + ul , ua / 3 )  decode:( move 3 , 9 ; move ua + 2 , ul ) 
[14686] c:0 is:( move 5 , ul / 6 ; move 2 - ua , ul )  decode:loop 0 , 2 , move 4 , v0 - 3 
[14687] c:0 is:( move 9 , ua / 4 ; move ua + ul , 2 )  decode:( move 9 , 3 / 4 ; move ua , 2 ) 
[14688] c:0 is:( move 2 - ua , 9 ; move ua , ua / 4 )  decode:( move 4 , 9 ; move ua , ua / 4 ) 
[14689] c:0 is:( move 3 , 9 - ul / ua ; move ua , 2 )  decode:( move 3 , 9 ; move ua , ua * ua ) 
[14690] c:0 is:( move ul - 9 , 3 ; move 3 , ua * ua )  decode:( move ua + 2 , 3 ; move 3 , 5 ) 
[14691] c:0 is:( move ua + ul , ul / 6 ; move 4 , 4 )  decode:loop 0 , 4 , move ul + v0 , ua / 3 
[14692] c:0 is:( move 0 - 6 , 9 ; move ua - ul , ul )  decode:( move ua , 4 * 3 ; move 5 , 2 ) 
[14693] c:0 is:( move ua , 9 / 2 ; move 3 - ua , ul )  decode:( move ua , 9 / 2 ; move 3 , 4 ) 
[14694] c:0 is:( move 4 , ua / 5 ; move ua , ua / 4 )  decode:( move ua , 6 ; move 4 , 3 / 2 ) 
[14695] c:0 is:( move 4 , 6 ; move ua - ul , ua / 4 )  decode:( move 4 , 6 ; move 5 , ua / 4 ) 
[14696] c:0 is:( move ua , 9 ; move ua - ul , 3 / 2 )  decode:( move 5 , 9 ; move ua , 3 / 2 ) 
[14697] c:0 is:( move ua , 8 ; move ua + ul , 4 * 4 )  decode:( move ua + ul , ua - move ua , 3 ) 
[14698] c:0 is:( move ua , 9 * 3 ; move ua + ul , 4 )  decode:( move ua , 8 ; move ua + ul , 4 ) 
[14699] c:0 is:( move 4 , ua / 6 ; move ul - ua , 4 )  decode:( move 3 , ul ; move 5 , ul / 4 ) 
[14700] c:0 is:( move ua , 2 / 8 ; move ua , ua / 3 )  decode:loop 0 , 2 , move ua , 0 - 4 * 4 
[14701] c:0 is:( move 9 , ua / 2 ; move ua + ul , 4 )  decode:( move 9 , ua / 2 ; move ua , 4 ) 
[14702] c:0 is:( move ua , 9 / 2 ; move ua + ul , 4 )  decode:( move ua , 4 / 2 ; move ua , 4 ) 
[14703] c:0 is:( move ul - 9 , 4 ; move ul - ua , 2 )  decode:( move 9 , 4 ; move ul - ua , 2 ) 
[14704] c:0 is:( move 5 , 5 / 4 ; move ua , ua * ua )  decode:( move ua , 0 - 4 ; move ua , 8 ) 
[14705] c:0 is:( move 9 , 4 / ua ; move ua + ul , 2 )  decode:( move 9 , 4 / ua ; move ua , 2 ) 
[14706] c:0 is:( move 4 , 2 - 9 ; move ua - ul , ul )  decode:( move 4 , 9 + 4 ; move 5 , ul ) 
[14707] c:0 is:( move 4 , ul / 4 ; move ul - ua , 5 )  decode:( move 4 , ul / 4 ; move 5 , 5 ) 
[14708] c:0 is:( move 4 , 6 / ua ; move ul - ua , 4 )  decode:( move 4 , ul ; move 5 , ul / 5 ) 
[14709] c:0 is:( move 4 , 2 - 9 ; move ul - ua , ul )  decode:( move 5 , 2 - 9 ; move 5 , 2 ) 
[14710] c:0 is:( move 4 , 3 ; loop 0 , 4 , move 4 , 2 )  decode:loop 0 , 4 , move 5 , - 3 - 4 - 3 
[14711] c:0 is:( move 4 , ul - 9 ; move ua - ul , 2 )  decode:( move 4 , ul - 9 ; move 5 , 2 ) 
[14712] c:0 is:( move 4 - ua , 9 ; move ua + ul , 4 )  decode:( move 3 , 9 ; move ua , ul ) 
[14713] c:0 is:( move ua , 4 + 9 ; move ul - ua , 4 )  decode:( move ua , 9 + 4 ; move 5 , ul ) 
[14714] c:0 is:( move ul - ua , 4 ; move 5 , ul / 4 )  decode:( move 5 , ul / 5 ; move 5 , 3 ) 
[14715] c:0 is:( move ua , 9 ; move ua - 2 , ua / 4 )  decode:( move ua , 9 ; move 4 , 3 / 2 ) 
[14716] c:0 is:( move 4 , ul / ua ; move 4 , ua / 4 )  decode:loop 0 , 3 , move ua - 4 , ua / 4 
[14717] c:0 is:( move ua , 4 / ua ; move 4 , ul / 4 )  decode:( move 4 , 4 ; move ul - ua , 3 ) 
[14718] c:0 is:( move 4 , ul / 6 ; move 3 - ua , ul )  decode:( move 3 , ul / 6 ; move 4 , 4 ) 
[14719] c:0 is:( move 2 , ul - 9 ; move ul - ua , 4 )  decode:( move 2 , 9 / 2 ; move ua , ul ) 
[14720] c:0 is:( move 6 , 9 ; move ua + 2 , ua * ua )  decode:( move 6 , 9 ; move ua + 2 , 8 ) 
[14721] c:0 is:( move ua , 4 * 9 ; move ul - ua , 2 )  decode:( move ua , 9 + 9 ; move 5 , ul ) 
[14722] c:0 is:( move 2 , 9 ; move ua + ul , 4 / ua )  decode:( move 2 , 9 ; move ua + ul , 7 ) 
[14723] c:0 is:( move 2 , 4 ; move 4 , 4 ; move 3 , 2 )  decode:loop 0 , 3 , move 3 , 4 / v0 
[14724] c:0 is:( move ua , 9 ; move ul - ua , 2 / 3 )  decode:loop 0 , 2 , move ua , 9 + v0 
[14725] c:0 is:( move ul + ua , ul - 6 ; move 6 , 4 )  decode:( move 8 , 0 - 5 ; move ua , 4 ) 
[14726] c:0 is:( move 4 , 9 / ua ; move ua + ul , 2 )  decode:loop 0 , 4 , move 3 , v0 - 2 
[14727] c:0 is:( move 9 , ua / 3 ; move ua - ul , 2 )  decode:( move 9 , 2 ; move 5 , 2 ) 
[14728] c:0 is:( move 5 , ul / ua ; move 3 , ua / 4 )  decode:( move 5 , ul / ua ; move 4 , ua / ) 4 
[14729] c:0 is:( move 3 , ul / 4 ; move ua , ul / 4 )  decode:( move 3 , 4 / ua ; move ua , ul ) 
[14730] c:0 is:( move ua , 2 / 8 ; move ua - ul , 4 )  decode:( move ua , ul / 4 ; move 5 , 4 ) 
[14731] c:0 is:( move ua , ul / 4 ; move 4 , ua / 4 )  decode:loop 0 , 3 , move 3 - ua , 4 / 3 
[14732] c:0 is:( move ua , 4 - 9 ; move ua + ul , 4 )  decode:( move ua , 4 / 5 ; move ua , 4 ) 
[14733] c:0 is:( move ul , 4 * 4 ; move ua , ul / 4 )  decode:move ua , 2 * 4 
[14734] c:0 is:( move 9 , 2 / ua ; move ul + ua , 4 )  decode:( move 9 , 2 / 4 ; move ua , 4 ) 
[14735] c:0 is:( move 3 , 9 / 2 ; move ua , ua * ua )  decode:( move ua , 0 ; move 3 , 4 / 7 ) 
[14736] c:0 is:( move ua , 2 / 8 ; move ua , ua / 4 )  decode:loop 0 , 3 , move 4 , v0 - 9 
[14737] c:0 is:( move ua + ul , ua / 9 ; move 5 , 2 )  decode:( move ua + ul , 4 / move 5 , 2 ) 
[14738] c:0 is:( move 2 , 3 / 9 ; move ul - ua , ul )  decode:( move 2 , 2 / 4 ; move ua , 4 ) 
[14739] c:0 is:( move 9 , 2 / ua ; move ua - ul , 4 )  decode:( move 9 , 2 / 4 ; move 5 , 4 ) 
[14740] c:0 is:( move 3 , 4 / ua ; move ua + ul , 9 )  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[14741] c:0 is:( move ua , 9 ; move ua - ul , 4 * 3 )  decode:( move ua , 9 ; move 5 , 4 * 3 ) 
[14742] c:0 is:( move ua - 9 , 2 / ua ; move 4 , ul )  decode:( move 3 , 0 - 4 ; move 4 , 4 ) 
[14743] c:0 is:( move ua + ul , 9 ; move 3 , ua / 4 )  decode:( move ua , 9 ; move 3 , 9 + 4 ) 
[14744] c:0 is:( move 5 , 5 / 4 ; move ul - ua , ul )  decode:loop 0 , 2 , move ul - ua , 0 - 4 
[14745] c:0 is:( move ua , 4 - 9 ; move ua - ul , 4 )  decode:( move ua , 4 / 5 ; move 5 , 4 ) 
[14746] c:0 is:( move 9 , ua / 3 ; move ua + ul , 4 )  decode:( move 9 , ua / 3 ; move ua , 4 ) 
[14747] c:0 is:( move ua , 9 * 3 ; move 4 , ua * ua )  decode:( move ua , ua * ua ; move 4 , 5 ) 
[14748] c:0 is:( move ua , 9 / 4 ; move ua - ul , 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 0 4 
[14749] c:0 is:( move 8 , ua / 4 ; move ua + ul , 4 )  decode:( move ua + ul , ua / move 8 , 4 ) 
[14750] c:0 is:( move 4 , ul / 6 ; move 4 - ua , ul )  decode:( move 3 , ul / 4 ; move 2 , 4 ) 
[14751] c:0 is:( move 3 , 3 / 9 ; move ua + ul , ul )  decode:( move 3 , 2 / 9 ; move 7 , ul ) 
[14752] c:0 is:( move ua , ul / 6 ; move 3 , ua / 4 )  decode:loop 0 , 4 , move 3 / v0 , 2 / 4 
[14753] c:0 is:( move ua , 9 ; move ul - ua , 4 * 3 )  decode:( move ua , 9 ; move 5 , 9 ) 
[14754] c:0 is:( move 3 , ul / 6 ; move ua , 4 / ua )  decode:( move 3 , ul / ua ; move ua , 7 ) 
[14755] c:0 is:( move 3 , 9 ; move ua + ul , ua / 4 )  decode:( move 3 , 9 ; move ua + ul , 8 ) 
[14756] c:0 is:( move ua , 4 * 9 ; move ua + ul , 4 )  decode:loop 0 , 2 , move v0 - ua , 0 - 4 
[14757] c:0 is:( move 9 , ul / 4 ; move ua + ul , 2 )  decode:loop 0 , 2 , move 4 + 3 , 0 - 4 
[14758] c:0 is:( move 4 , 4 / 7 ; move ua , ua * ua )  decode:loop 0 , 3 , move 3 + v0 , 9 / 4 
[14759] c:0 is:( move 4 , ul / 6 ; move ul - ua , 4 )  decode:( move 4 , ul / 4 ; move 5 , ul ) 
[14760] c:0 is:( move ua , 4 / 7 ; move ua - ul , 4 )  decode:( move ua , 4 / 7 ; move 5 , 4 ) 
[14761] c:0 is:( move ua , ul / 6 ; move ua , 4 / 3 )  decode:( move ua , ul / 9 ; move ua , 7 ) 
[14762] c:0 is:( move ua , ul / 6 ; move 4 , ua / 3 )  decode:( move ua , ul / 6 ; move 4 , 2 ) 
[14763] c:0 is:( move ua , 9 / 4 ; move ua + ul , 3 )  decode:( move ua , 9 / 4 ; move ua , 3 ) 
[14764] c:0 is:( move 9 , ua / 2 ; move ua - ul , 4 )  decode:( move 9 , 0 ; move ul - ua , 4 ) 
[14765] c:0 is:( move ua , 9 ; move ua + ul , 4 * 4 )  decode:( move ua + ul , 9 ; move ua , 9 ) 
[14766] c:0 is:( move ua , 2 / 5 ; move ua + ul , 9 )  decode:( move ua + ul , / ua move ua , 9 ) 
[14767] c:0 is:( move 3 , 9 / ua ; move ua + ul , 4 )  decode:( move 3 , 9 / ua ; move ua , 4 ) 
[14768] c:0 is:( move ul - ua , 9 ; move ua , 4 * 3 )  decode:( move ua , 2 - 3 ; move ua , 9 ) 
[14769] c:0 is:( move ua + ul , 9 ; move ua , 4 * 4 )  decode:( move ua + ul , 3 ; move ua , 9 ) 
[14770] c:0 is:( move 9 , ua / 4 ; move 2 - ua , ul )  decode:( move 9 , 9 + 4 ; move 4 , 4 ) 
[14771] c:0 is:( move ua , 2 / 4 ; move ul - 8 , ul )  decode:( move ua , 4 / 3 ; move ua , 4 ) 
[14772] c:0 is:( move 9 , 4 / ua ; move 2 - ua , ul )  decode:( move 9 , 4 + 3 ; move 4 , 2 ) 
[14773] c:0 is:( move 9 , 4 / ua ; move ua - ul , 2 )  decode:( move 9 , 4 / ua ; move 5 , 2 ) 
[14774] c:0 is:( move ua , ul / 6 ; move ua , 4 * 4 )  decode:loop 0 , 3 , move v0 - ua , 4 * 4 
[14775] c:0 is:( move 3 - 9 , ua ; move ul - ua , 5 )  decode:( move ul - ua , 0 ; move 5 , 5 ) 
[14776] c:0 is:( move 9 , 2 / ua ; move 4 , ua * ua )  decode:( move 9 , 2 / ua ; move 4 , 4 ) 
[14777] c:0 is:( move ua , ul / 6 ; move 4 , ua / 4 )  decode:loop 0 , 3 , move 3 - ua , 3 / 4 
[14778] c:0 is:( move 9 , 4 ; move ua - ul , ua / 3 )  decode:( move ua , 4 ; move  4 , 4 + v) 0 
[14779] c:0 is:( move 9 , ul / ua ; move ua - 3 , 4 )  decode:( move 3 , ul ; move ua , 0 - 4 ) 
[14780] c:0 is:( move 4 , ul / 6 ; move ua , ua / 4 )  decode:( move 4 , ul / 4 ; move ua , 8 ) 
[14781] c:0 is:( move ul - ua , 9 * 3 ; move 4 , ul )  decode:( move 4 , 5 ; move ua - ul , ul ) 
[14782] c:0 is:( move 3 , 9 ; move ul - ua , ua / 4 )  decode:( move 3 , 9 ; move ul - ua , 8 ) 
[14783] c:0 is:( move 4 , ua / 4 ; move ul - ua , 8 )  decode:loop 0 , 3 , move 0 - 3 , 0 - 8 
[14784] c:0 is:( move ua , 9 / ua - 4 ; move ua , 4 )  decode:( move ua , 4 ; move ua , 4 ) 
[14785] c:0 is:( move 9 , 4 / ua ; move ua + ul , 4 )  decode:( move 9 , 4 + 4 ; move ua , 4 ) 
[14786] c:0 is:( move 9 , 4 / 3 ; move ua , ua * ua )  decode:( move ua , 0 ; move 9 , 4 / 3 ) 
[14787] c:0 is:( move 9 , ua / 4 ; move ua + ul , 4 )  decode:( move 9 , ua / 4 ; move ua , 4 ) 
[14788] c:0 is:( move 4 , 9 ; move ua + ul , ua / 4 )  decode:( move 4 , 9 ; move ua + ul , 8 ) 
[14789] c:0 is:( move 4 , 9 / 2 ; move ul - ua , ul )  decode:( move 4 , ul / 2 ; move 5 , 4 ) 
[14790] c:0 is:( move 3 , ua / 9 ; move ua , ua / 3 )  decode:( move 3 , 7 ; move ua , ua / 3 ) 
[14791] c:0 is:( move 5 , 4 + 9 ; move ul - ua , ul )  decode:( move 5 , 3 / 2 ; move 5 , 4 ) 
[14792] c:0 is:( move 9 , ua / 4 ; move ua - ul , 3 )  decode:( move ua , 3 / 2 ; move ua , 3 ) 
[14793] c:0 is:( move 9 , ua / 3 ; move 4 , ua * ua )  decode:( move 9 , ua / 3 ; move 4 , ua ) 
[14794] c:0 is:( move ul - ua , 9 ; move ua , 4 / 3 )  decode:( move ua , 4 ; move 5 , ua * ua ) 
[14795] c:0 is:( move 9 , 3 ; move ul - ua , ua / 4 )  decode:( move 9 , 9 ; move 4 , ua / 4 ) 
[14796] c:0 is:( move ua , ul / 9 ; move ua + 4 , 4 )  decode:( move 9 , ul / ul ; move ua , 4 ) 
[14797] c:0 is:( move ua , 9 ; move ul - ua , 4 / 3 )  decode:( move ua , 4 ; move ul - ua , 5 ) 
[14798] c:0 is:( loop 0 , 5 , move 4 , 3 ; move 4 , 4 )  decode:loop 0 , 4 , move 0 - 4 , 0 - 3 
[14799] c:0 is:( move 4 , 9 * 4 ; move ul - ua , ul )  decode:( move 4 , 9 * 4 ; move 5 , ul ) 
[14800] c:0 is:( move 4 , 4 * 9 ; move ua - ul , ul )  decode:( move 4 , ul - 9 ; move 5 , ul ) 
[14801] c:0 is:( move 4 , ua / 9 ; move ua , ua / 3 )  decode:( move 4 , 6 ; move ua , ua / 3 ) 
[14802] c:0 is:( move 4 , 9 ; move ua - ul , ua / 4 )  decode:( move 5 , 9 ; move 4 , ua / 4 ) 
[14803] c:0 is:( move 4 , 9 / ua ; move ua - ul , 4 )  decode:( move 4 , ua / 3 ; move ua , 4 ) 
[14804] c:0 is:( move 9 , ua / 6 ; move 2 - ua , ul )  decode:( move 4 , 2 ; move 9 , 0 - 2 ) 
[14805] c:0 is:( move 5 , ul / 6 ; move ua , ua / 4 )  decode:loop 0 , 3 , move 4 , 2 / v0 
[14806] c:0 is:( move 9 , 4 / ua ; move 4 , ua * ua )  decode:( move ua + 3 , 9 ; move 4 , 8 ) 
[14807] c:0 is:( move 5 , 9 / 2 ; move ul - ua , ul )  decode:( move 5 , 9 / 2 ; move 5 , 4 ) 
[14808] c:0 is:( move 9 , ua / 4 ; move ua - ul , 4 )  decode:( move 9 , 3 / 2 ; move ua , 4 ) 
[14809] c:0 is:( move 9 , ul / 6 ; move ua + ul , 2 )  decode:( move 9 , ul / 9 ; move 9 , 2 ) 
[14810] c:0 is:( move 9 , ua / 4 ; move ua , ua / 3 )  decode:( move 9 , 3 / ua ; move ua , ul ) 
[14811] c:0 is:( move 9 , ul / 4 ; move ua + ul , 4 )  decode:( move 9 , ul / 4 ; move ua , 4 ) 
[14812] c:0 is:( move 9 , 4 / 3 ; move ul - ua , ul )  decode:( move 9 , 4 / 3 ; move 5 , 2 ) 
[14813] c:0 is:( move 4 , 9 ; move ul - ua , ua / 4 )  decode:( move 4 , 9 ; move ul - ua , 8 ) 
[14814] c:0 is:( move 4 , 3 ; move 4 , 4 ; move 4 , 4 )  decode:loop 0 , 3 , move 2 - ua , 4 
[14815] c:0 is:( move 5 , 4 * 9 ; move ul - ua , ul )  decode:( move 5 , 9 * 4 ; move 5 , 4 ) 
[14816] c:0 is:( move ua , ul / 9 ; move ua , 4 * 4 )  decode:loop 0 , 3 , move v0 - ua , 4 * 4 
[14817] c:0 is:( move 4 , 3 / move 3 , 4 ; move 3 , 2 )  decode:( move 3 , 4 ; move ua , 5 / 2 ) 
[14818] c:0 is:( move ua , ua - ul / 7 ; move 7 , 4 )  decode:( move ua , 0 ; move 7 , 4 ) 
[14819] c:0 is:( move 5 , ul - 9 ; move ua , ua / 4 )  decode:( move ua , 3 ; move 5 , ua / 4 ) 
[14820] c:0 is:( move 5 , 9 ; move ua - ul , ua / 4 )  decode:( move 5 , 9 ; move 5 , ua / 4 ) 
[14821] c:0 is:( move 4 , ul / 9 ; move ua - ul , 4 )  decode:( move 4 , ul ; move 5 , 0 - 4 ) 
[14822] c:0 is:( move 9 , ua / 6 ; move ul - 3 , ul )  decode:( move 9 , ul ; move 9 , 0 - 2 ) 
[14823] c:0 is:( move 4 , ul / 9 ; move ua , ua / 4 )  decode:( move 4 , 0 ; move ua , 3 / 2 ) 
[14824] c:0 is:( move 9 , ua / 6 ; move ua - ul , 4 )  decode:( move ua + 2 , ul ; move 5 , 4 ) 
[14825] c:0 is:( move ua + ul , 0 ; move 0 - ua , ul )  decode:( move ua + ul , 0 ; move ua , ul ) 
[14826] c:0 is:( move 0 - ua , 0 ; move ua + ul , ul )  decode:( move ua , 0 ; move 8 , ua / 3 ) 
[14827] c:0 is:( move 9 , 4 + 9 ; move ul - ua , ul )  decode:( move 9 , 3 + move ua - ul , 4 ) 
[14828] c:0 is:( move ua , 0 ; move 0 - ua , ua * ua )  decode:( move ua , 0 ; move ua , 5 ) 
[14829] c:0 is:loop 0 , 3 , move 2 + v0 , v0 * v0  decode:( move 2 - ua , 5 ; move 4 , 7 ) 
[14830] c:0 is:loop 0 , 4 , move v0 + v0 , v0 - 2  decode:( move 0 - ua , 0 ; move ua , ul ) 
[14831] c:0 is:loop 0 , 4 , move v0 * v0 , 0 - v0  decode:loop 0 , 3 , move 4 + v0 , 0 - 3 
[14832] c:0 is:( move 0 - ua , 0 ; move ua - ul , ul )  decode:( move ua , 0 - 3 ; move 5 , 4 ) 
[14833] c:0 is:( move ua , 0 ; move ua + 2 , ua * ua )  decode:( move ua , 0 ; move 9 , ua * ua ) 
[14834] c:0 is:loop 0 , 5 , move 2 - v0 , v0 + v0  decode:loop 0 , 4 , move 2 , 0 - v0 
[14835] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , v0  decode:( move 3 , 0 ; move 3 , 0 - 4 ) 
[14836] c:0 is:loop 0 , 3 , move 3 + v0 , v0 * v0  decode:loop 0 , 3 , move 4 , ua / v0 * 4 
[14837] c:0 is:loop 0 , 3 , move v0 + v0 , v0 - 4  decode:( move 4 , 2 / 4 ; move 2 , 2 ) 
[14838] c:0 is:loop 0 , 3 , move 2 + v0 , v0 / v0  decode:loop 0 , 3 , move 3 , v0 - v0 
[14839] c:0 is:loop 0 , 4 , move v0 + 2 , v0 * v0  decode:loop 0 , 3 , move ul - ua , 0 - 9 
[14840] c:0 is:( move ua - ul , 0 ; move 0 - ua , ul )  decode:( move ul - ua , 0 ; move ua , ul ) 
[14841] c:0 is:( move ua , 0 ; move 2 - ua , ua * ua )  decode:( move ua , 0 ; move 4 , ua * ua ) 
[14842] c:0 is:( move ua + ul , 2 ; move 0 - ua , ul )  decode:( move 8 , 2 ; move ua , ua / 3 ) 
[14843] c:0 is:loop 0 , 4 , move v0 * v0 , v0 - 2  decode:( move 4 , 4 * 4 ; move ua , ul ) 
[14844] c:0 is:( move 2 , 0 ; move ua + ul , ua * ua )  decode:( move 2 , 0 ; move ua + ul , 5 ) 
[14845] c:0 is:loop 0 , 4 , move v0 * v0 , 2 - v0  decode:( move 9 , 3 ; move ua - ul , ul ) 
[14846] c:0 is:( move ua + ul , ul ; move ua , 0 - 2 )  decode:loop 0 , 2 , move ua + v0 , ua / 3 
[14847] c:0 is:( move ua , ul ; move ua + ul , 0 - 2 )  decode:( move ua , ul ; move ua , 0 - 2 ) 
[14848] c:0 is:( move ua , 0 - 2 ; move ua , ua * ua )  decode:( move ua , 9 ; move ua , 4 / 3 ) 
[14849] c:0 is:( move ua + ul , 0 ; move 2 - ua , ul )  decode:( move ua + ul , 0 ; move ua , ul ) 
[14850] c:0 is:( move ul - ua , 0 ; move ua + ul , 2 )  decode:loop 0 , 2 , move 0 - ua , v0 * 4 
[14851] c:0 is:( move ua , 0 ; move ua - 2 , ua * ua )  decode:( move ua , 0 ; move 4 , ua * ua ) 
[14852] c:0 is:( move 0 - ua , ul ; move ua + 2 , ul )  decode:( move ua , ul ; move 8 , ul ) 
[14853] c:0 is:( move ua + 2 , ul ; move 0 - ua , ul )  decode:( move ua + 2 , ul ; move ua , ul ) 
[14854] c:0 is:loop 0 , 6 , move 2 - v0 , v0 + v0  decode:loop 0 , 3 , move 3 - ua , v0 + 8 
[14855] c:0 is:( move ua - 2 , 0 ; move ua + ul , ul )  decode:( move 4 , 0 ; move 7 , ul ) 
[14856] c:0 is:( move ua + ul , 0 ; move ua - ul , 2 )  decode:( move ua + ul , 0 ; move 5 , 2 ) 
[14857] c:0 is:( move ua , ua * ua ; move ua , 0 - 2 )  decode:( move ua , 3 ; move ua , 0 - 2 ) 
[14858] c:0 is:( move 9 , 4 * 9 ; move ul - ua , ul )  decode:( move 9 , 9 + 4 ; move 5 , 4 ) 
[14859] c:0 is:loop 0 , 3 , move 4 + v0 , v0 * v0  decode:( move 3 + ua , ul ; move 5 , 4 ) 
[14860] c:0 is:loop 0 , 4 , move 3 + v0 , v0 * v0  decode:loop 0 , 4 , move ua - v0 , 4 / 0 0 
[14861] c:0 is:( move 0 - ua , 2 ; move ua + ul , ul )  decode:( move ua , 0 - 3 ; move ua , ul ) 
[14862] c:0 is:loop 0 , 5 , move v0 + 2 , v0 * v0  decode:loop 0 , 4 , move v0 + 4 , 4 
[14863] c:0 is:loop 0 , 3 , move 3 + v0 , v0 / v0  decode:loop 0 , 4 , move 3 , v0 - 9 
[14864] c:0 is:( move ua + ul , ul ; move ua + 2 , 2 )  decode:( move ua + 2 , ul ; move 8 , 2 ) 
[14865] c:0 is:( move ua - ul , 0 ; move ul - ua , 2 )  decode:( move 5 , 0 ; move ul - ua , 2 ) 
[14866] c:0 is:loop 0 , 4 , move 2 * v0 , v0 * v0  decode:loop 0 , 3 , move 2 - ua , 0 - 9 
[14867] c:0 is:( move 0 - ua , ul ; move ua + 3 , ul )  decode:( move 0 - ua , ul ; move 3 , ul ) 
[14868] c:0 is:( move ua + ul , 3 ; move 0 - ua , ul )  decode:( move ua + ul , 3 ; move ua , ul ) 
[14869] c:0 is:( move ua - 3 , 0 ; move ua , ua * ua )  decode:( move 3 , 0 ; move ua , ua * ua ) 
[14870] c:0 is:( move ua , ua * ua ; move ua , 0 - 3 )  decode:( move ua , ua * ua ; move ua , 3 ) 
[14871] c:0 is:( move ul - ua , 0 ; move ua + 3 , ul )  decode:( move ul - ua , 0 ; move 9 , ul ) 
[14872] c:0 is:loop 0 , 4 , move 3 + v0 , v0 / v0  decode:loop 0 , 4 , move 2 - ua , 3 * v0 
[14873] c:0 is:( move ua + 2 , 2 ; move ua , ua * ua )  decode:( move 9 , 2 ; move ua , ua * ua ) 
[14874] c:0 is:( move ua , 0 ; move ua - 3 , ua * ua )  decode:( move ua , 0 ; move 3 - ua , 8 ) 
[14875] c:0 is:( move ua , 0 ; move 3 - ua , ua * ua )  decode:( move ua , 0 ; move 3 - ua , 8 ) 
[14876] c:0 is:loop 0 , 6 , move v0 - 3 , v0 + v0  decode:loop 0 , 4 , move 0 - 2 , v0 * 4 
[14877] c:0 is:( move ul - ua , 0 ; move ua - 2 , ul )  decode:( move ul - ua , 0 ; move 4 , ul ) 
[14878] c:0 is:( move ul , ua ; move ua + 3 , 0 - ul )  decode:( move ul , 0 ; move ua + 3 , ul ) 
[14879] c:0 is:( move 0 - ua , 3 ; move ua + ul , ul )  decode:( move 0 - ua , 3 ; move 7 , ul ) 
[14880] c:0 is:( move ua , ul ; move ua + ul , 0 - 3 )  decode:( move ua + ul , ul ; move ua , 3 ) 
[14881] c:0 is:loop 0 , 7 , move v0 - 2 , v0 + v0  decode:loop 0 , 4 , move 0 - 3 , 2 / v0 
[14882] c:0 is:( move ua + 2 , ul ; move ua + ul , 2 )  decode:( move ua + 2 , ul ; move 7 , 2 ) 
[14883] c:0 is:( move ul - ua , 0 - 2 ; move ua , ul )  decode:( move ua , 4 / 5 ; move ua , 2 ) 
[14884] c:0 is:( move 0 - 2 , ul ; move ua + ul , ul )  decode:( move ua + ul , 0 ; move 2 , 4 ) 
[14885] c:0 is:( move ua , 0 - 2 ; move ul - ua , ul )  decode:loop 0 , 2 , move v0 - ua , 0 - 2 
[14886] c:0 is:( move ua - 3 , 0 ; move ua + ul , ul )  decode:( move 3 , 0 ; move 7 , ul ) 
[14887] c:0 is:( move 0 - ua + 3 , ul ; move ua , ul )  decode:( move 3 + ua , ul ; move ua , 4 ) 
[14888] c:0 is:( move ua + ul , 0 ; move 3 - ua , ul )  decode:( move ua + ul , 0 ; move 3 , 4 ) 
[14889] c:0 is:( move ua + 3 , ul ; move 0 - ua , ul )  decode:( move ua + 3 , ul ; move ua , ul ) 
[14890] c:0 is:( move ua , ua * ua ; move ua + 2 , 2 )  decode:( move ua , 8 ; move 8 , 2 ) 
[14891] c:0 is:loop 0 , 3 , move v0 - 4 , v0 * v0  decode:( move ul - ua , 0 ; move 3 , 4 ) 
[14892] c:0 is:( move ua - ul , 0 ; move ua - 2 , ul )  decode:( move ua - ul , 0 ; move 4 , ul ) 
[14893] c:0 is:( move ua + 2 , ua * ua ; move ua , 2 )  decode:( move ua + 2 , 8 ; move ua , 2 ) 
[14894] c:0 is:loop 0 , 3 , move 2 - ua + v0 , 0 - 4  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[14895] c:0 is:( move ua , 3 ; move 0 - ua , ua * ua )  decode:( move ua , 3 ; move ua , 5 ) 
[14896] c:0 is:( move 0 - ua , 3 ; move ua , ua * ua )  decode:( move ua , 8 ; move ua , ua * ua ) 
[14897] c:0 is:( move ul , 0 - 2 ; move ua , ua * ua )  decode:( move ua , 5 ; move ul , ua * ua ) 
[14898] c:0 is:( move ua , 0 - 3 ; move ua , ua * ua )  decode:( move ua , 0 - 3 ; move ua , 8 ) 
[14899] c:0 is:( move ua , ua * ua ; move ua , 0 - 3 )  decode:( move ua , ua * ua ; move ua , 3 ) 
[14900] c:0 is:( move 3 , 0 ; move ua + ul , ua * ua )  decode:( move 3 , 0 ; move ua + ul , 8 ) 
[14901] c:0 is:loop 0 , 3 , move 4 - v0 , v0 * v0  decode:loop 0 , 4 , move 2 , v0 0 
[14902] c:0 is:( move 0 - ua , ua * ua ; move 2 , ul )  decode:( move 2 , 9 ; move ua , 0 - 4 ) 
[14903] c:0 is:( move ua + 3 , ul ; move 0 - ua , ul )  decode:( move ua + 3 , ul ; move ua , ul ) 
[14904] c:0 is:loop 0 , 5 , move v0 + 3 , v0 * v0  decode:loop 0 , 4 , move 4 + v0 , 4 * ua 
[14905] c:0 is:( move 2 - ua , ua * ua ; move ua , 2 )  decode:( move 5 , ua * ua ; move ua , 2 ) 
[14906] c:0 is:( move ul - ua , 0 - 3 ; move ua , ul )  decode:( move 5 , ul / 6 ; move ua , ul ) 
[14907] c:0 is:( move ua + 3 , 2 ; move ua , ua * ua )  decode:( move ua + 3 , 2 ; move ua , 8 ) 
[14908] c:0 is:loop 0 , 4 , move v0 * v0 , 5 + v0  decode:( move 9 , 4 ; move 4 , 3 + 4 ) 
[14909] c:0 is:( move ua , 0 - 3 ; move ul - ua , ul )  decode:( move ua , 0 - 3 ; move 5 , 4 ) 
[14910] c:0 is:( move 4 - ua , 0 ; move ua , ua * ua )  decode:( move 3 , 0 ; move ua , 5 ) 
[14911] c:0 is:( move ua + ul , 0 ; move ua , ua / 3 )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[14912] c:0 is:( move ua + ul , 0 ; move 4 , ua * ua )  decode:( move ua + ul , 0 ; move 4 , 8 ) 
[14913] c:0 is:loop 0 , 4 , move v0 * 3 , v0 * v0  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[14914] c:0 is:( move ua + ul , 0 ; move ua - ul , 4 )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[14915] c:0 is:( move ul , ul ; move ua + 2 , ua - 2 )  decode:( move ul , ul ; move ua + 2 , 2 ) 
[14916] c:0 is:( move ua + 2 , 2 ; move ul - ua , ul )  decode:( move 8 , 2 ; move 5 , 2 ) 
[14917] c:0 is:loop 0 , 5 , move 2 * v0 , v0 * v0  decode:loop 0 , 4 , move ua , v0 + 5 
[14918] c:0 is:( move 2 , ua * ua ; move ua + 2 , ul )  decode:( move 2 , 4 ; move ua + 2 , ul ) 
[14919] c:0 is:( move ua , ua * ua ; move ua + 3 , 2 )  decode:( move ua , 8 ; move 9 , 2 ) 
[14920] c:0 is:( move ua + ul , 2 ; move 2 , ua * ua )  decode:( move ua + ul , 2 ; move 2 , 5 ) 
[14921] c:0 is:( move 3 - ua , 0 ; move ua - ul , ul )  decode:( move 3 , 0 ; move ul - ua , ul ) 
[14922] c:0 is:( move ul - ua , 0 ; move ua + 4 , ul )  decode:( move ua , 0 ; move ua + 4 , ul ) 
[14923] c:0 is:( move 3 , 0 ; move ul - ua , ua * ua )  decode:( move 3 , 0 ; move ua - ul , 8 ) 
[14924] c:0 is:loop 0 , 3 , move 3 / v0 , v0 * v0  decode:( move 5 , 0 ; move 3 , 4 ) 
[14925] c:0 is:( move 3 - ua , 0 ; move ul - ua , ul )  decode:( move 3 , ul ; move 5 , 2 - 3 ) 
[14926] c:0 is:( move ua , ua * ua ; move 0 - 3 , ul )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[14927] c:0 is:( move ua , 2 ; move 2 - ua , ua * ua )  decode:( move ua , ua / 3 ; move 4 , 5 ) 
[14928] c:0 is:loop 0 , 3 , move 2 / v0 , v0 / v0  decode:( move 3 , 0 ; move 2 , 5 ) 
[14929] c:0 is:( move ua , 0 - 3 ; move ua - ul , ul )  decode:( move ua , 0 - 3 ; move 5 , ul ) 
[14930] c:0 is:( move 3 , 0 ; move ua - ul , ua * ua )  decode:( move 3 , 0 ; move ul - ua , 5 ) 
[14931] c:0 is:( move ua , 0 ; move ua + ul , ua / 3 )  decode:( move ua , 0 ; move 8 , ua / 3 ) 
[14932] c:0 is:( move ua , ul ; move ua + ul , 0 - 4 )  decode:( move ua + ul , ul ; move ua , 4 ) 
[14933] c:0 is:( move 2 , ul ; move ua + 2 , ua * ua )  decode:( move 2 , ul ; move ua + 2 , 8 ) 
[14934] c:0 is:( move ua - ul , 2 ; move ua + ul , 2 )  decode:( move 5 , 2 ; move ua + ul , 2 ) 
[14935] c:0 is:loop 0 , 4 , move 2 * v0 , v0 / v0  decode:( move ua , ul ; move ua , ul ) 
[14936] c:0 is:( move ua + ul , ua * ua ; move 2 , 2 )  decode:( move ua + ul , ua ; move 2 , 2 ) 
[14937] c:0 is:( move ua - 2 , ul ; move ul + ua , 2 )  decode:( move 2 - ua , ul ; move 7 , 2 ) 
[14938] c:0 is:( move ua , 3 ; move ua + 2 , ua * ua )  decode:( move ua , 9 ; move 8 , ua * ua ) 
[14939] c:0 is:( move ua + ul , 4 ; move 0 - ua , ul )  decode:( move ua + ul , 4 ; move ua , ul ) 
[14940] c:0 is:( move 3 , ua * ua ; move 0 - ua , ul )  decode:( move 3 , 8 ; move ua , ua / 3 ) 
[14941] c:0 is:( move ua + 3 , ul ; move ua + ul , 2 )  decode:( move 7 , ul ; move 7 , 2 ) 
[14942] c:0 is:( move ua + 2 , 3 ; move ua , ua * ua )  decode:( move ua + 2 , 3 ; move ua , 8 ) 
[14943] c:0 is:( move ua + ul , 0 ; move 4 - ua , ul )  decode:( move ua + ul , 0 ; move 2 , ul ) 
[14944] c:0 is:( move ua - ul , 0 ; move 3 , ua * ua )  decode:( move 5 , 0 ; move 3 , ua * ua ) 
[14945] c:0 is:( move ua + ul , ul ; move 0 - 3 , ul )  decode:( move 0 - ua , ul ; move 3 , ul ) 
[14946] c:0 is:( move 4 , 0 ; move ua + ul , ua * ua )  decode:( move 4 , 0 ; move ua + ul , 8 ) 
[14947] c:0 is:( move 3 , ul ; move 0 - ua , ua * ua )  decode:( move 3 , ul ; move ua , 5 ) 
[14948] c:0 is:( move 2 , 2 ; move ua + ul , ua * ua )  decode:( move - 2 , 2 ; ; move 8 , 5 ) 
[14949] c:0 is:( move ua , ua * ua ; move ua + 2 , 3 )  decode:( move ua * 2 , 8 ; move 8 , 3 ) 
[14950] c:0 is:( move 0 - 3 , ua * ua ; move ua , ul )  decode:( move 3 , 5 ; move ua , 2 ) 
[14951] c:0 is:loop 0 , 6 , move 2 - v0 , v0 * v0  decode:( move 3 , 2 / move 5 , ua * ua ) 
[14952] c:0 is:( move ua - ul , ul ; move ua + 2 , 2 )  decode:( move 6 , ul ; move ua + 2 , 2 ) 
[14953] c:0 is:loop 0 , 4 , move v0 * v0 , 3 * v0  decode:( move ua , 9 ; move 9 , 9 ) 
[14954] c:0 is:( move ul - ua , 9 / 7 ; move ua , 8 )  decode:( move ua , 6 ; move 5 , 3 / 2 ) 
[14955] c:0 is:( move 0 - ua , ul ; move 3 , ua * ua )  decode:( move 3 , 6 ; move ua , 3 / 4 ) 
[14956] c:0 is:( move ul - ua , 2 ; move ua + 2 , ul )  decode:( move ua , 0 - 2 ; move ua , ul ) 
[14957] c:0 is:( move ul - ua , 2 ; move ua + 2 , ul )  decode:( move ua , 0 - 2 ; move ua , ul ) 
[14958] c:0 is:( move ua + 4 , ul ; move 0 - ua , ul )  decode:( move ua + 4 , ul ; move ua , 2 ) 
[14959] c:0 is:( move 0 - ua , 4 ; move ua + ul , ul )  decode:( move ul - ua , 4 ; move 8 , ul ) 
[14960] c:0 is:( move ua + ul , 2 ; move 2 - ua , ul )  decode:( move 8 , 2 ; move 4 , 2 ) 
[14961] c:0 is:( move ua , ua * ua ; move ua , 0 - 4 )  decode:( move 0 - ua , 4 ; move ua , 4 ) 
[14962] c:0 is:( move ua + 2 , 2 ; move ua - ul , ul )  decode:( move ua + 2 , 2 ; move 5 , ul ) 
[14963] c:0 is:( move ua - ul , 0 ; move ul + ua , 4 )  decode:( move ua - ul , 0 ; move 7 , 4 ) 
[14964] c:0 is:loop 0 , 7 , move v0 - 3 , v0 + v0  decode:( move 4 , 0 - 4 ; move 5 , 5 ) 
[14965] c:0 is:( move ua , 0 - 4 ; move ua , ua * ua )  decode:( move ua , 4 ; move ua , 4 / 3 ) 
[14966] c:0 is:( move 0 - 3 , ul ; move ua , ua * ua )  decode:( move 3 , ul ; move ua , 7 ) 
[14967] c:0 is:( move 0 - ua , ua * ua ; move 3 , ul )  decode:( move 3 , 6 ; move ua , 2 ) 
[14968] c:0 is:( move ua + 2 , ul ; move 2 - ua , ul )  decode:( move ua + 2 , ul ; move 4 , ul ) 
[14969] c:0 is:loop 0 , 6 , move v0 - 2 , v0 * v0  decode:( move 3 , ua / 4 ; move ua , 5 ) 
[14970] c:0 is:loop 0 , 7 , move 3 - v0 , v0 + v0  decode:( move 4 , 0 ; move ua , 4 / 3 ) 
[14971] c:0 is:( move 2 - ua , 2 ; move ua + ul , ul )  decode:( move 4 , 2 ; move ua + ul , ul ) 
[14972] c:0 is:( move ul - ua , 2 ; move ua - ul , 2 )  decode:( move 5 , 2 ; move 5 , 2 ) 
[14973] c:0 is:( move 4 , 0 ; move ul - ua , ua * ua )  decode:( move 4 , 0 ; move ua - ul , 5 ) 
[14974] c:0 is:( move ua , 3 / ua ; move 0 - ua , ul )  decode:( move ua , 9 + 4 ; move ua , 4 ) 
[14975] c:0 is:( move ua + ul , 0 ; move ua , ua / 4 )  decode:( move 8 , 0 ; move ua , ua / 4 ) 
[14976] c:0 is:( move 2 - ua , ul ; move ul - ua , 2 )  decode:( move 0 - 4 , ul ; move 5 , 2 ) 
[14977] c:0 is:( move ul , 2 ; move ua + 3 , ua * ua )  decode:( move ul , 3 ; move ua + 3 , 2 ) 
[14978] c:0 is:loop 0 , 2 , move ua - 0 - 4 , v0 - 4  decode:loop 0 , 3 , move 4 + 3 , 0 - 4 0 ul 9 + 
[14979] c:0 is:( move 2 , 3 ; move ua + ul , ua * ua )  decode:( move 2 , 3 ; move ua + 2 , 5 ) 
[14980] c:0 is:( move ua + ul , 3 ; move 2 - ua , ul )  decode:( move ua + ul , 3 ; move 4 , 4 ) 
[14981] c:0 is:( move 2 - ua , 2 ; move ul - ua , ul )  decode:( move 0 - 4 , 2 ; move 5 , ul ) 
[14982] c:0 is:( move ua + 2 , ua * ua ; move ua , 4 )  decode:( move ua + 2 , 8 ; move ua , 4 ) 
[14983] c:0 is:( move ua , 3 ; move ua - 2 , ua * ua )  decode:( move ua , 3 ; move 4 , ua * ua ) 
[14984] c:0 is:( move 3 , 2 ; move ua + ul , ua * ua )  decode:( move 3 , 2 ; move ua + ul , 5 ) 
[14985] c:0 is:loop 0 , 6 , move 3 - v0 , v0 * v0  decode:loop 0 , 3 , move 3 , v0 / 2 
[14986] c:0 is:( move 0 - ua , ul ; move 4 , ua * ua )  decode:( move ua , 4 ; move 4 , 4 / 3 ) 
[14987] c:0 is:( move ua - 3 , ul ; move ua + ul , 2 )  decode:( move 3 , ul ; move 7 , 2 ) 
[14988] c:0 is:( move 3 , ua * ua ; move ua + 2 , ul )  decode:( move 3 , ua * ua ; move 2 , ul ) 
[14989] c:0 is:( move ua , ua * ua ; move 0 - 4 , ul )  decode:( move 3 - ua , ul ; move 4 , ul ) 
[14990] c:0 is:loop 0 , 6 , move v0 - 3 , v0 * v0  decode:loop 0 , 4 , move 0 - 2 , v0 / 2 
[14991] c:0 is:( move ua , ua - 2 / ua ; move ua , 2 )  decode:( move ua , 6 ; move ua , 2 ) 
[14992] c:0 is:( move ul - ua , 0 - 4 ; move ua , ul )  decode:loop 0 , 2 , move ua - ul , 0 - v0 
[14993] c:0 is:loop 0 , 3 , move 4 / v0 , v0 * v0  decode:( move ua , 0 ; move 3 , 4 / 3 ) 
[14994] c:0 is:loop 0 , 7 , move v0 - 4 , v0 + v0  decode:loop 0 , 3 , move 0 - 4 , v0 * 2 
[14995] c:0 is:( move ua - 4 , 0 ; move ua - ul , ul )  decode:( move 4 - ua , ul ; move 5 , ul ) 
[14996] c:0 is:( move 2 - ua , 2 ; move ua - ul , ul )  decode:( move 2 - ua , 2 ; move 5 , ul ) 
[14997] c:0 is:( move 5 , 0 ; move ua + ul , ua * ua )  decode:( move 5 , 0 ; move ua + ul , 5 ) 
[14998] c:0 is:( move ua + ul , 0 ; move ua - ul , 5 )  decode:( move ua + ul , 0 ; move 5 , 5 ) 
[14999] c:0 is:( move 4 , ua * ua ; move 0 - ua , ul )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[15000] c:0 is:( move 3 - ua , 2 ; move ua + ul , ul )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[15001] c:0 is:( move ua + 3 , ul ; move ua - ul , 2 )  decode:( move ua + 3 , ul ; move 5 , 2 ) 
[15002] c:0 is:( move ua , ua * ua ; move ua - 3 , 2 )  decode:( move ua , ua * ua ; move 3 , 2 ) 
[15003] c:0 is:( move ul - ua , 0 ; move 4 , ua * ua )  decode:( move ul - ua , 0 ; move 4 , 8 ) 
[15004] c:0 is:( move 3 - ua , ua * ua ; move ua , 2 )  decode:( move 3 , 5 ; move ua , ul ) 
[15005] c:0 is:( move ul - ua , ul ; move 2 - ua , 2 )  decode:( move ul - ua , ul ; move 5 , ul ) 
[15006] c:0 is:( move ua , 4 ; move ua + 2 , ua * ua )  decode:( move ua , 4 ; move 2 + ua , 8 ) 
[15007] c:0 is:( move ua + ul , ua * ua ; move 3 , 2 )  decode:( move ua + ul , 8 ; move 3 , 2 ) 
[15008] c:0 is:( move 2 - ua , ul ; move ua + 3 , ul )  decode:( move 4 , ul ; move 3 + ua , ul ) 
[15009] c:0 is:( move ua , 2 ; move ua + ul , ua - 4 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[15010] c:0 is:( move ua - ul , 0 ; move 4 , ua * ua )  decode:( move 5 , 0 ; move 4 , ua * ua ) 
[15011] c:0 is:( move 3 , ul ; move ua + 2 , ua * ua )  decode:( move 3 , ul ; move ua + 2 , 8 ) 
[15012] c:0 is:( move ua + ul , 3 ; move ua - ul , 2 )  decode:( move ua + ul , 3 ; move 5 , 2 ) 
[15013] c:0 is:( move ua - ul , 2 ; move 2 - ua , ul )  decode:( move 5 , 2 ; move 5 , ua / 3 ) 
[15014] c:0 is:( move ua , ua / 3 ; move 0 - ua , ul )  decode:( move ua , ua / 3 ; move ua , ul ) 
[15015] c:0 is:( move 0 - ua , ul ; move 4 , ua * ua )  decode:( move ua , 4 ; move 4 , 4 / 3 ) 
[15016] c:0 is:( move ua + ul , 4 ; move ua + ul , 2 )  decode:( move ua + ul , 4 ; move 7 , 2 ) 
[15017] c:0 is:( move ua + 3 , 2 ; move ul - ua , ul )  decode:( move 9 , 2 ; move ul - ua , ul ) 
[15018] c:0 is:( move 0 - ua , ua ; move ua , ua / 4 )  decode:( move ua , 0 ; move ua , ua / 4 ) 
[15019] c:0 is:( move ua + 3 , ul ; move 2 - ua , ul )  decode:( move 3 , ul ; move ua + 3 , ul ) 
[15020] c:0 is:( move 0 - ua , ul ; move ul - ua , 4 )  decode:( move 0 - ua , ul ; move 5 , 4 ) 
[15021] c:0 is:( move ua , 0 ; move ua + ul , ua / 4 )  decode:( move ua , 0 ; move ua + ul , 8 ) 
[15022] c:0 is:( move ua + 2 , ul ; move ul + ua , 4 )  decode:( move ua + 2 , ul ; move ua , 4 ) 
[15023] c:0 is:( move ua - ul , 3 ; move ua + ul , 2 )  decode:( move 5 , 3 ; move ua + ul , 2 ) 
[15024] c:0 is:( move ua - ul , 0 ; move ua - 4 , ul )  decode:( move ua - ul , 0 ; move 3 , ul ) 
[15025] c:0 is:loop 0 , 7 , move v0 - 2 , v0 * v0  decode:( move 2 - ua , 3 ; move ua , 7 ) 
[15026] c:0 is:( move ul - ua , ul ; move 0 - ua , 4 )  decode:( move ul - ua , ul ; move ua , 4 ) 
[15027] c:0 is:loop 0 , 7 , move 4 - v0 , v0 + v0  decode:loop 0 , 3 , move 4 , v0 * v0 
[15028] c:0 is:( move ua , ua - 4 ; move ua + ul , 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 2 
[15029] c:0 is:( move ua , 0 - 4 ; move ul - ua , ul )  decode:( move ua , 0 - 4 ; move 5 , 2 ) 
[15030] c:0 is:( move ua , ul ; move 0 - ua , 3 / ua )  decode:( move ua , ul ; move ua , 9 ) 
[15031] c:0 is:( move ua - 2 , ul ; move ul - ua , 2 )  decode:( move 4 , ul ; move ua - ul , 2 ) 
[15032] c:0 is:( move ua , ul ; move ua - ul , 0 - 4 )  decode:( move 5 , ul ; move ua , 0 - 4 ) 
[15033] c:0 is:( move 2 , ua * ua ; move 2 - ua , ul )  decode:( move 2 , 2 ; move 5 , 4 ) 
[15034] c:0 is:( move ua + ul , 2 ; move 3 , ua * ua )  decode:( move 8 , 2 ; move 3 , ua * ua ) 
[15035] c:0 is:( move 3 - ua , ul ; move ua + 2 , ul )  decode:( move 3 , 4 ; move ua + 2 , ul ) 
[15036] c:0 is:( move ua , ua * ua ; move ua + 2 , 4 )  decode:( move ua , 8 ; move ua + 2 , 4 ) 
[15037] c:0 is:( move ul - ua , 0 ; move ua + ul , 5 )  decode:( move 5 , ua / 2 ; move 8 , 5 ) 
[15038] c:0 is:( move 0 - ua , ua * ua ; move ul , 4 )  decode:( move ua , ua + ua ; move ul , ul ) 
[15039] c:0 is:( move 2 , 2 ; move ul - ua , ua * ua )  decode:( move 2 , 2 ; move 5 , 5 ) 
[15040] c:0 is:( move ua - 2 , 3 ; move ua , ua * ua )  decode:( move 4 , 3 ; move ua , ua * ua ) 
[15041] c:0 is:( move 0 - ua , ul ; move ua + ul , 5 )  decode:( move 0 - ua , ul ; move 9 , 5 ) 
[15042] c:0 is:( move ul , 3 ; move ua + 2 , ua * ua )  decode:( move ul , ua / 4 ; move 8 , 2 ) 
[15043] c:0 is:( move ua , 0 ; move ul - ua , ua / 3 )  decode:( move 5 , 0 ; move ua , ul ) 
[15044] c:0 is:( move 2 - ua , 3 ; move ua , ua * ua )  decode:( move 2 - ua , 3 ; move ua , 5 ) 
[15045] c:0 is:( move ua - ul , 0 ; move ua , ua / 3 )  decode:( move ua - ul , 0 ; move ua , ul ) 
[15046] c:0 is:( move 4 , ul ; move 0 - ua , ua * ua )  decode:( move 4 , ul ; move ua , 4 + 5 ) 
[15047] c:0 is:loop 0 , 4 , move 4 - v0 , v0 / v0  decode:loop 0 , 3 , move 3 , v0 - v0 
[15048] c:0 is:( move ul - ua , 0 ; move ua , 3 / ua )  decode:( move ul - ua , 0 ; move ua , 7 ) 
[15049] c:0 is:( move 3 - ua , ul ; move ua + ul , 2 )  decode:( move 0 - 3 , ul ; move 8 , 2 ) 
[15050] c:0 is:( move 2 , ul ; move ua + 3 , ua * ua )  decode:( move 2 , ul ; move ua + 3 , 8 ) 
[15051] c:0 is:( move ua + ul , 3 ; move ul - ua , 2 )  decode:( move ua + ul , 3 ; move 5 , ul ) 
[15052] c:0 is:( move ua , 2 - 3 ; move ua , ua * ua )  decode:( move ua , 4 + 3 ; move ua , 8 ) 
[15053] c:0 is:( move ua + ul , 2 ; move ua + ul , 4 )  decode:( move ul + ua , 2 ; move 7 , 4 ) 
[15054] c:0 is:( move 5 - ua , 0 ; move ua , ua * ua )  decode:( move 2 , ua / 2 ; move ua , 5 ) 
[15055] c:0 is:( move ul - ua , 0 ; move ua - ul , 5 )  decode:( move ul - ua , 0 ; move 5 , 5 ) 
[15056] c:0 is:( move ua , 2 ; move ul - ua , 2 / ua )  decode:( move ua , 0 - 9 ; move ua , 9 ) 
[15057] c:0 is:( move 3 - ua , 3 ; move ua , ua * ua )  decode:( move 4 , 3 ; move ua , ua * ua ) 
[15058] c:0 is:( move ua , 0 - 4 ; move ua , ul / ua )  decode:( move ua , 7 / 4 ; move ua , 7 ) 
[15059] c:0 is:( move ua + 2 , ul ; move 4 , ua * ua )  decode:( move 9 , ul ; move 4 , ua * ua ) 
[15060] c:0 is:( move 4 - ua , ul ; move ua + 2 , ul )  decode:( move ua - 4 , ul ; move 9 , ul ) 
[15061] c:0 is:( move ua , 0 ; move ua - ul , ua / 4 )  decode:( move ua , 0 ; move ua - ul , 8 ) 
[15062] c:0 is:loop 0 , 7 , move 3 - v0 , v0 * v0  decode:( move 4 , 0 ; move ua + ul , 7 ) 
[15063] c:0 is:( move ul - ua , 3 ; move ua - ul , 2 )  decode:( move ul - ua , 3 ; move 5 , 2 ) 
[15064] c:0 is:( move 2 - ua , ua * ua ; move 3 , ul )  decode:( move 3 , 9 ; move 4 , 0 - 4 ) 
[15065] c:0 is:( move 4 , ua * ua ; move ua + ul , 2 )  decode:( move 4 , 8 ; move ua + ul , 2 ) 
[15066] c:0 is:( move ua , 4 / ua ; move 0 - ua , ul )  decode:( move ua , 4 / 3 ; move ua , 4 ) 
[15067] c:0 is:( move 2 , ul / ua ; move ua + 2 , ul )  decode:( move 2 , ul / ua ; move 2 , ul ) 
[15068] c:0 is:( move 4 , ul ; move ua + 2 , ua * ua )  decode:( move 4 , ul ; move 8 , ua * ua ) 
[15069] c:0 is:( move ul - ua , 3 ; move ua + 3 , ul )  decode:( move 4 , 3 ; move 9 , ua / 3 ) 
[15070] c:0 is:( move ua + ul , 3 ; move 3 - ua , ul )  decode:( move ua + ul , 3 ; move 3 , 4 ) 
[15071] c:0 is:( move ua - ul , 2 ; move 3 , ua * ua )  decode:( move 5 , 2 ; move 3 , ua * ua ) 
[15072] c:0 is:( move ul - ua , 2 - 3 ; move ua , ul )  decode:loop 0 , 2 , move ul - ua , v0 - 2 
[15073] c:0 is:( move ua + ul , ul ; move 0 - ua , 6 )  decode:( move ua + ul , ul ; move ua , 9 ) 
[15074] c:0 is:( move ua , 0 ; move ul - ua , ua / 4 )  decode:( move ua , 0 ; move ua - ul , 8 ) 
[15075] c:0 is:( move ul - ua , 3 ; move 2 - ua , ul )  decode:( move 5 , 4 ; move 4 , ul ) 
[15076] c:0 is:( move ua , 2 ; move ua + ul , ua / 3 )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[15077] c:0 is:( move ua , 2 - 3 ; move ul - ua , ul )  decode:( move ua , 0 ; move ul - ua , ul ) 
[15078] c:0 is:( move ua + ul , 2 ; move ul - ua , 4 )  decode:( move 7 , 2 ; move ua - ul , 4 ) 
[15079] c:0 is:( move 4 - ua , ul ; move ul + ua , 2 )  decode:( move 2 , 4 ; move ua + ul , 2 ) 
[15080] c:0 is:( move ua , ua * ua ; move 2 - ua , 4 )  decode:( move ua , ua * ua ; move 4 , ul ) 
[15081] c:0 is:( move ua , 3 ; move ua - 3 , ua * ua )  decode:( move ua , 3 ; move 3 , ua * ua ) 
[15082] c:0 is:( move 0 - 3 , ul / ua ; move ua , ul )  decode:( move 3 , 0 - 4 ; move ua , ul ) 
[15083] c:0 is:( move 2 , 2 / ua ; move ua + ul , ul )  decode:( move 2 , 2 / ua ; move 7 , ul ) 
[15084] c:0 is:( move ua + ul , 3 ; move 3 , ua * ua )  decode:( move ua + ul , 3 ; move 3 , 8 ) 
[15085] c:0 is:( move 0 - ua , ul ; move ua - ul , 5 )  decode:( move 0 - ua , ul ; move 5 , 5 ) 
[15086] c:0 is:( move 3 - ua , ul ; move ul - ua , 2 )  decode:( move 3 - ua , ul ; move 5 , 2 ) 
[15087] c:0 is:( move ua - ul , 2 ; move 3 - ua , ul )  decode:( move ua - ul , 2 ; move 3 , 4 ) 
[15088] c:0 is:( move 2 - ua , 4 ; move ua , ua * ua )  decode:( move 4 , ul ; move ua , 4 + 4 ) 
[15089] c:0 is:( move ua , ul / ua ; move 0 - 3 , ul )  decode:( move ua , ul / 4 ; move 3 , 2 ) 
[15090] c:0 is:( move ua + ul , 2 ; move ua - 4 , ul )  decode:( move ua + ul , 2 ; move 2 , ul ) 
[15091] c:0 is:( move 6 , 0 ; move ua + ul , ua * ua )  decode:( move 6 , 0 ; move ua + ul , 5 ) 
[15092] c:0 is:( move 0 - ua , 6 ; move ua , ua * ua )  decode:( move ua , 9 ; move ua , ua * ua ) 
[15093] c:0 is:( move ua , ul ; move ua + 2 , ua / 3 )  decode:( move ua + 2 , 0 ; move 7 , ul ) 
[15094] c:0 is:( move 2 - ua , ul / ua ; move ua , 2 )  decode:( move 4 , 0 - 3 ; move ua , 2 ) 
[15095] c:0 is:( move ul - ua , 0 - ul ; move ua , 5 )  decode:( move ul - ua , ul ; move ua , 5 ) 
[15096] c:0 is:( move ua , ul ; move 4 + 2 , ua * ua )  decode:( move 7 , ul ; move ua , ua * ua ) 
[15097] c:0 is:( move 2 , 4 ; move ua + ul , ua * ua )  decode:( move 2 , 4 ; move ua + ul , 8 ) 
[15098] c:0 is:( move ul , 2 / ua ; move ua + 2 , ul )  decode:( move ul , 2 / 4 ; move 9 , ul ) 
[15099] c:0 is:( move ua , 2 - 3 ; move ua - ul , ul )  decode:( move 3 - ua , ul ; move 5 , ul ) 
[15100] c:0 is:( move 4 , 2 ; move ua + ul , ua * ua )  decode:( move 4 , 2 ; move ua + ul , 8 ) 
[15101] c:0 is:( move ua + ul , ul ; move ua + 3 , 4 )  decode:( move ua + ul , ul ; move 3 , 4 ) 
[15102] c:0 is:( move 2 , ua * ua ; move ua , 2 / ua )  decode:( move 2 , ul ; move ua , 2 / ua ) 
[15103] c:0 is:( move 3 - ua , 2 ; move ul - ua , ul )  decode:( move 3 , 2 ; move ul - ua , ul ) 
[15104] c:0 is:( move 0 - ua , 6 ; move ua + ul , ul )  decode:( move ua , 7 ; move ua + ul , ul ) 
[15105] c:0 is:( move ua + ul , ua / 3 ; move ua , 2 )  decode:( move ua + ul , ua ; move ua , 2 ) 
[15106] c:0 is:( move ul , 4 ; move ua + 2 , ua * ua )  decode:( move 2 , 4 ; move ua + ul , 8 ) 
[15107] c:0 is:loop 0 , 3 , move 4 / v0 , v0 / v0  decode:loop 0 , 3 , move 3 , v0 - 6 
[15108] c:0 is:( move 2 , 3 ; move ul - ua , ua * ua )  decode:( move 2 , 9 ; move ua - ul , 5 ) 
[15109] c:0 is:( move ua + 4 , ul ; move 2 - ua , ul )  decode:( move ua + 4 , ul ; move 4 , ul ) 
[15110] c:0 is:( move ul - ua , ua * ua ; move 3 , 2 )  decode:( move ua - ul , 8 ; move 3 , 2 ) 
[15111] c:0 is:( move ua + ul , 3 ; move 3 , ua * ua )  decode:( move ua + ul , 3 ; move 3 , 8 ) 
[15112] c:0 is:( move ua , 0 ; move ul - ua , 4 / ua )  decode:( move ua , 0 ; move ua - ul , 7 ) 
[15113] c:0 is:( move ua + ul , 6 ; move 0 - ua , ul )  decode:( move ua + ul , 6 ; move ua , ul ) 
[15114] c:0 is:( move 3 , ua * ua ; move ul - ua , 2 )  decode:( move 3 , 8 ; move ua - ul , ul ) 
[15115] c:0 is:( move ua , 0 - 5 ; move ul - ua , ul )  decode:( move ua , 5 / 5 ; move 5 , 4 ) 
[15116] c:0 is:( move 0 - ua , ul ; move ul - ua , 5 )  decode:( move ua , 2 ; move 5 , 5 ) 
[15117] c:0 is:( move 3 , 3 ; move ua + ul , ua * ua )  decode:( move 3 , 3 ; move ua + ul , 5 ) 
[15118] c:0 is:( move ul - ua , 4 ; move ua + 2 , ul )  decode:( move 5 , ul * 5 ; move 8 , 4 ) 
[15119] c:0 is:loop 0 , 7 , move v0 - 3 , v0 * v0  decode:loop 0 , 4 , move 3 , v0 * 2 
[15120] c:0 is:( move ua - ul , 2 ; move ua + ul , 4 )  decode:( move ul - ua , 2 ; move 7 , 4 ) 
[15121] c:0 is:( move ua + ul , 2 ; move 4 , ua * ua )  decode:( move ua + ul , 2 ; move 4 , 9 ) 
[15122] c:0 is:( move ua + ul , ul ; move 4 - ua , 2 )  decode:( move ua + ul , ul ; move 2 , 5 ) 
[15123] c:0 is:( move 5 , 0 ; move ua - ul , ua * ua )  decode:( move 5 , 0 ; move ul - ua , 5 ) 
[15124] c:0 is:( move ua , 4 + 3 ; move ua , ua * ua )  decode:loop 0 , 2 , move ua , 7 + v0 
[15125] c:0 is:( move 0 - ua , ul ; move ua , ul / 3 )  decode:( move ua , 0 - 2 ; move ua , 9 ) 
[15126] c:0 is:( move ul , 0 ; move ua + ul , ua / 4 )  decode:( move ul , 0 ; move ua + ul , 8 ) 
[15127] c:0 is:( move 3 , ul ; move ua + 3 , ua * ua )  decode:( move 3 , ul ; move 3 + ua , 8 ) 
[15128] c:0 is:( move 0 - ua , ul / 3 ; move ua , ul )  decode:( move ua , 0 - 9 ; move ua , 4 ) 
[15129] c:0 is:( move ua + ul , 4 ; move 2 - ua , ul )  decode:( move ua + ul , 4 ; move 4 , ul ) 
[15130] c:0 is:( move 0 - ul , ul ; move ua , ua / 3 )  decode:( move ua , 0 ; move ul , 3 ) 
[15131] c:0 is:( move ua + 3 , ul ; move ua + ul , 4 )  decode:( move 9 , ul ; move ua , 4 ) 
[15132] c:0 is:( move ua - ul , ua * ua ; move 3 , 2 )  decode:( move 5 , ua * ua ; move 3 , 2 ) 
[15133] c:0 is:( move ua , ua * ua ; move ua + 3 , 4 )  decode:( move ua , 8 ; move 9 , 4 ) 
[15134] c:0 is:( move ua + ul , 2 ; move ua , ua / 3 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[15135] c:0 is:( move 2 - ua , 3 ; move ul - ua , ul )  decode:( move 4 , 4 ; move ua - 2 , ul ) 
[15136] c:0 is:( move ua + ul , 5 ; move ua + ul , 2 )  decode:( move 8 , 4 / 5 ; move ua , 2 ) 
[15137] c:0 is:( move ua + 2 , ul ; move ua - ul , 4 )  decode:( move 4 + 3 , ul ; move 5 , 4 ) 
[15138] c:0 is:( move ul - ua , 0 ; move ua , 4 / ua )  decode:( move 5 , 0 ; move ua , 4 * 4 ) 
[15139] c:0 is:( move ua + ul , ua * ua ; move 2 , 4 )  decode:( move ua + ul , 8 ; move 2 , 4 ) 
[15140] c:0 is:( move 2 - ua , ua * ua ; move ua , 4 )  decode:( move 4 , ua * ua ; move ua , 4 ) 
[15141] c:0 is:( move 3 - ua , ul ; move ua - ul , 2 )  decode:( move 3 , ul ; move 2 - ua , 2 ) 
[15142] c:0 is:( move ua + 2 , ul ; move ua , ua / 3 )  decode:( move ul + ua , ul ; move 9 , ul ) 
[15143] c:0 is:( move ul - ua , 0 - 5 ; move ua , ul )  decode:( move ua , 2 - 2 ; move ua , 4 ) 
[15144] c:0 is:( move 2 - ua , 4 ; move ua + ul , ul )  decode:( move 4 , ul / 4 ; move 8 , 4 ) 
[15145] c:0 is:( move ua + ul , ua * ua ; move 4 , 2 )  decode:( move ua + ul , 8 ; move 4 , 2 ) 
[15146] c:0 is:( move ua + ul , 2 / ua ; move ua , 3 )  decode:( move ua , 2 / 4 ; move ua , 3 ) 
[15147] c:0 is:( move ua , 0 ; move ul - ua , ul / 3 )  decode:( move ua , ul / 4 ; move ua , 9 ) 
[15148] c:0 is:( move ua , ua / 3 ; move ua + ul , 2 )  decode:( move ua , ua / 3 ; move 7 , 2 ) 
[15149] c:0 is:( move ua + 2 , 4 ; move ul - ua , ul )  decode:( move 4 + 3 , 4 ; move 5 , ul ) 
[15150] c:0 is:( move 0 - ua , 4 / ua ; move ua , ul )  decode:( move ua , 2 / 5 ; move ua , ul ) 
[15151] c:0 is:( move ua , ua / 3 ; move ua + ul , 3 )  decode:( move ua , 2 ; move 8 , 3 ) 
[15152] c:0 is:( move ul - ua , ua * ua ; move 2 , 4 )  decode:( move 5 , ua * ua ; move 2 , 4 ) 
[15153] c:0 is:loop 0 , 5 , move 4 / v0 , v0 * v0  decode:loop 0 , 4 , move 3 , v0 - 7 
[15154] c:0 is:( move 2 - ua , ul ; move ua + ul , 5 )  decode:( move ua , ul ; move ua + ul , 5 ) 
[15155] c:0 is:( move ua , 3 ; move ul - ua , 2 / ua )  decode:( move ua , 3 ; move 5 , 4 * 4 ) 
[15156] c:0 is:loop 0 , 4 , move v0 * 2 , 2 + 2 / ua  decode:loop 0 , 3 , move 2 - ua , 3 / v0 
[15157] c:0 is:( move ua + 3 , ul ; move ua , ua / 3 )  decode:( move 9 , ul ; move ua , 0 - 2 ) 
[15158] c:0 is:( move 2 , ua * ua ; move ul - ua , 4 )  decode:( move 2 , 2 ; move ua - ul , 4 ) 
[15159] c:0 is:( move 0 - 4 , ul / ua ; move ua , ul )  decode:( move 4 , 0 - 3 ; move ua , 4 ) 
[15160] c:0 is:( move ua + 4 , ul ; move 3 - ua , ul )  decode:( move ua + 3 , ul ; move 4 , 4 ) 
[15161] c:0 is:( move 2 , 4 ; move ul - ua , ua * ua )  decode:( move 2 , 4 ; move ua - ul , 5 ) 
[15162] c:0 is:( move 4 + ua , ul ; move ua + ul , 4 )  decode:( move ua + 4 , ul ; move ua , 4 ) 
[15163] c:0 is:( move ul - ua , 4 ; move ul - ua , 2 )  decode:( move 5 , 4 ; move ul - ua , 2 ) 
[15164] c:0 is:( move 3 - ua , ua * ua ; move ua , 4 )  decode:( move 3 , 4 ; move ua , ul / 5 ) 
[15165] c:0 is:( move ua + 2 , 3 / ua ; move ul , ul )  decode:( move ua , 9 + 4 ; move ul , ul ) 
[15166] c:0 is:( move 3 , ul / ua ; move ua + 2 , ul )  decode:( move 3 , ul / ua ; move 9 , ul ) 
[15167] c:0 is:( move ua - ul , ua * ua ; move 4 , 2 )  decode:( move ua - ul , 8 ; move 4 , 2 ) 
[15168] c:0 is:( move ua , ua / 3 ; move ua - ul , 2 )  decode:( move ua , ua / 3 ; move 5 , 2 ) 
[15169] c:0 is:( move ua + ul , ua * ua ; move 5 , 2 )  decode:( move 4 + 4 , 2 ; move 5 , 2 ) 
[15170] c:0 is:( move 3 , 2 / ua ; move ua , ua - ul )  decode:( move 3 , d; move ua - ul , ul ) 
[15171] c:0 is:( move 4 , 3 ; move ua + ul , ua * ua )  decode:( move 4 , 3 ; move ua + ul , 5 ) 
[15172] c:0 is:( move 4 , ul ; move ua + 3 , ua * ua )  decode:( move 4 , ul ; move 3 + 3 , 8 ) 
[15173] c:0 is:( move ua , ul / 4 ; move 0 - ua , ul )  decode:loop 0 , 2 , move ua , v0 - 2 
[15174] c:0 is:( move 0 - ua , ul ; move ua , ul / 4 )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[15175] c:0 is:( move 2 - ua , 4 ; move ul - ua , ul )  decode:( move 4 , ul / 5 ; move 5 , ul ) 
[15176] c:0 is:( move ul - ua , 2 / ua ; move 2 , ul )  decode:( move 2 , 4 * 4 ; move ua , 4 ) 
[15177] c:0 is:( move ua + ul , 3 ; move ua , ua / 3 )  decode:( move ua + ul , 3 ; move ua , 2 ) 
[15178] c:0 is:( move ul - ua , ua * ua ; move 4 , 2 )  decode:( move 5 , ua / 2 ; move 4 , ul ) 
[15179] c:0 is:loop 0 , 7 , move 4 - v0 , v0 * v0  decode:loop 0 , 3 , move 4 + v0 , 0 - 3 
[15180] c:0 is:( move 4 , ua * ua ; move ul - ua , 2 )  decode:( move 4 , 8 ; move ul - ua , 2 ) 
[15181] c:0 is:( move ua + 2 , ul / ua ; move ua , 4 )  decode:( move ua + 2 , ul ; move ua , 4 ) 
[15182] c:0 is:( move ua + ul , 3 ; move 4 - ua , ul )  decode:( move ua + ul , 3 ; move 2 , 4 ) 
[15183] c:0 is:( move 3 , ua / 2 ; move ua , ua * ua )  decode:( move 3 , ua / 2 ; move ua , 5 ) 
[15184] c:0 is:( move 3 , 2 / ua ; move ua , ua * ua )  decode:( move 3 , ul / 9 ; move ua , 9 ) 
[15185] c:0 is:( move ua + 3 , ul ; move ua - ul , 4 )  decode:( move 9 , ul ; move ul - ua , ul ) 
[15186] c:0 is:( move ua , ua / ua - 4 ; move ua , 2 )  decode:( move ua , 9 ; move ua , 2 ) 
[15187] c:0 is:( move 4 , ua * ua ; move ua - ul , 2 )  decode:( move 4 , 8 ; move 5 , 2 ) 
[15188] c:0 is:( move 3 , ua * ua ; move ua , 2 / ua )  decode:( move ua , ua / 3 ; move 3 , 9 ) 
[15189] c:0 is:( move ua + ul , ua * ua ; move 3 , 4 )  decode:( move ua + ul , 9 ; move 3 , 4 ) 
[15190] c:0 is:( move ua + 2 , 6 ; move ua , ua * ua )  decode:( move 8 , 6 ; move ua , ua * ua ) 
[15191] c:0 is:( move 4 , 2 ; move ul - ua , ua * ua )  decode:( move 4 , 2 ; move ul - ua , 8 ) 
[15192] c:0 is:( move 4 , ul ; move 2 - ua , ua * ua )  decode:( move 4 , ul ; move 4 , ua * ua ) 
[15193] c:0 is:( move ua , 3 / ua ; move ua - ul , 2 )  decode:( move ua , 3 / ua ; move 5 , 2 ) 
[15194] c:0 is:( move ua + 3 , ul ; move ul , 2 / ua )  decode:( move 9 , ul ; move 4 , 2 / ua ) 
[15195] c:0 is:( move ua , ul ; move 0 - ua , ul / 4 )  decode:( move ua , ul ; move ua , 4 * 4 ) 
[15196] c:0 is:( move ua , 3 ; move ua + ul , ua / 3 )  decode:( move 7 , 3 ; move ua , ua / 3 ) 
[15197] c:0 is:( move 2 , ul - 2 ; move ua , ul / ua )  decode:move 4 * 2 , 2 / 3 
[15198] c:0 is:( move ua , 4 / ua ; move ua + ul , 2 )  decode:( move ua , 4 / ua ; move 8 , 2 ) 
[15199] c:0 is:( move ua , ua ; move 0 - 7 , ua * ua )  decode:( move 5 , 0 ; move ua + ul , 5 ) 
[15200] c:0 is:( move ua , ul ; move 2 - ua , ua / 3 )  decode:( move ua , ul ; move 4 , 2 - 3 ) 
[15201] c:0 is:( move 2 , ua / 3 ; move ua + ul , ul )  decode:( move ua + ul , 0 ; move 2 , ul ) 
[15202] c:0 is:( move ul - ua , ua ; move 3 , 4 + ul )  decode:( move ul - ua , 0 ; move 3 , 5 ) 
[15203] c:0 is:( move ua , 6 ; move ua + 2 , ua * ua )  decode:( move ua , 6 ; move 9 , ua * ua ) 
[15204] c:0 is:( move ua + 3 , 4 ; move ul - ua , ul )  decode:( move 3 + ua , 4 ; move 5 , 2 ) 
[15205] c:0 is:( move 3 - ua , 4 ; move ua , ua * ua )  decode:( move 3 , 4 ; move ua , ua * ua ) 
[15206] c:0 is:( move 3 - ua , ul ; move ua , 2 / ua )  decode:( move 3 , ul ; move ua , 0 - 9 ) 
[15207] c:0 is:( move ua - ul , ul ; move ua + 3 , 4 )  decode:( move 5 , ul ; move ua + 3 , 4 ) 
[15208] c:0 is:( move 2 - ua , ul ; move 4 , ua * ua )  decode:( move 0 - 4 , ul ; move 4 , 5 ) 
[15209] c:0 is:( move ua + ul , 3 ; move ua + ul , 5 )  decode:( move ua + ul , 3 ; move 8 , 5 ) 
[15210] c:0 is:( move ua + ul , ua / 4 ; move ua , 2 )  decode:( move ua + ul , 3 + move ua , 2 ) 
[15211] c:0 is:( move ul - ua , 2 ; move ua + ul , 5 )  decode:( move 5 , 2 ; move 7 , 2 ) 
[15212] c:0 is:( move 4 , 2 ; move ua - ul , ua * ua )  decode:( move 4 , 2 ; move ul - ua , 5 ) 
[15213] c:0 is:( move 3 , ua * ua ; move ul - ua , 3 )  decode:move ua , 5 
[15214] c:0 is:( move 4 - ua , ul ; move 2 - ua , ul )  decode:( move 2 , 0 - 4 ; move 4 , ul ) 
[15215] c:0 is:( move ua + ul , 4 + 3 ; move ul , ul )  decode:( move ua , 4 + 3 ; move ul , ul ) 
[15216] c:0 is:( move ua + ul , 3 / ua ; move 2 , ul )  decode:( move ua + ul , 3 ; move 2 , ul ) 
[15217] c:0 is:( move ua + ul , 6 ; move ua + ul , 2 )  decode:( move ua + ul , 6 ; move 7 , 2 ) 
[15218] c:0 is:( move 5 , ua * ua ; move ua + ul , 2 )  decode:( move 5 , ua / 4 ; move 7 , 2 ) 
[15219] c:0 is:( move ua + ul , 2 ; move ua , ua / 4 )  decode:( move ua + ul , 2 ; move ua , 8 ) 
[15220] c:0 is:( move ua , 3 / 2 ; move ua , ua * ua )  decode:( move ua , ua / 2 ; move ua , 8 ) 
[15221] c:0 is:( move ul - ua , ul ; move 2 - ua , 4 )  decode:( move ul - ua , ul ; move 4 , 4 ) 
[15222] c:0 is:( move ua + ul , ua / 4 ; move ua , 2 )  decode:( move ua + ul , 3 + move ua , 2 ) 
[15223] c:0 is:loop 0 , 7 , move v0 - 4 , v0 * v0  decode:loop 0 , 3 , move ul - ua , 0 - v0 
[15224] c:0 is:( move ul - ua , 4 ; move 2 - ua , ul )  decode:( move 5 , 5 ; move 4 , ul ) 
[15225] c:0 is:( move 3 - ua , 3 ; move ul - ua , ul )  decode:( move 3 , 0 ; move ua - ul , ul ) 
[15226] c:0 is:( move ua + ul , 4 ; move 3 - ua , ul )  decode:( move ua + ul , 4 ; move 3 , ul ) 
[15227] c:0 is:( move 4 - ua , 2 ; move ua - ul , ul )  decode:( move ua - 3 , 2 ; move ua , ul ) 
[15228] c:0 is:( move ua , ul / ua ; move 0 - 4 , ul )  decode:( move ua , ul / 4 ; move 4 , 4 ) 
[15229] c:0 is:( move ul - ua , 4 ; move ua + 3 , ul )  decode:( move 5 , 4 ; move 3 + ua , ul ) 
[15230] c:0 is:( move ua , ul ; move 3 + 4 , ua * ua )  decode:( move ua , ul ; move dul , 3 + v) 0 
[15231] c:0 is:( move ua , ul - ua / 3 ; move ua , 2 )  decode:( move ua , 2 ; move ua , 2 ) 
[15232] c:0 is:( move ua - ul , 3 / ua ; move ua , 2 )  decode:( move 5 , 3 / ua ; move ua , 2 ) 
[15233] c:0 is:( move 3 , ua * ua ; move ua , ua - 4 )  decode:( move ua , 4 ; move 3 , 4 ) 
[15234] c:0 is:( move ul - ua , 2 ; move 4 - ua , ul )  decode:( move ua - ul , 2 ; move 2 , ul ) 
[15235] c:0 is:( move ul - ua , 2 ; move ua - ul , 4 )  decode:( move ul - ua , 2 ; move 5 , 4 ) 
[15236] c:0 is:( move ua , ua / 4 ; move ua + ul , 2 )  decode:( move ua , ua / 4 ; move 7 , 2 ) 
[15237] c:0 is:( move ua + 4 , ul ; move ua + ul , 4 )  decode:( move ua + 4 , ul ; move ua , 4 ) 
[15238] c:0 is:( move ua + ul , ua / 3 ; move 2 , ul )  decode:( move ua + ul , 3 ; move 2 , ul ) 
[15239] c:0 is:( move ua , ul / ua ; move 3 - ua , 2 )  decode:( move ua , ul / 4 ; move 4 , 2 ) 
[15240] c:0 is:( move ul - ua , 3 ; move ua , 2 / ua )  decode:( move 5 , ul / 4 ; move ua , 3 ) 
[15241] c:0 is:( move ua + ul , ul / 3 ; move ua , 2 )  decode:loop 0 , 2 , move ua , 0 - v0 + 4 
[15242] c:0 is:( move ua - ul , 2 ; move ua - ul , 4 )  decode:( move ul - ua , 5 ; move 5 , 4 ) 
[15243] c:0 is:( move ul - ua , 0 ; move ua , ul / 4 )  decode:loop 0 , 2 , move ua - v0 , 0 - 6 
[15244] c:0 is:( move 5 , 2 ; move ua + ul , ua * ua )  decode:( move 5 , 2 ; move ua + ul , 8 ) 
[15245] c:0 is:( move ua , ua * ua ; move ua , 3 * 3 )  decode:( move ua , 8 ; move ua , 9 ) 
[15246] c:0 is:( move ua , ua / 2 ; move 3 , ua * ua )  decode:( move ua , ua / 2 ; move 3 , 5 ) 
[15247] c:0 is:( move ua + ul , ua * ua ; move 4 , 3 )  decode:( move ua , ua * ua ; move v0 , 3 ) 
[15248] c:0 is:( move ua + ul , 0 ; move ua + ul , 8 )  decode:( move 8 , 0 ; move ua + ul , 8 ) 
[15249] c:0 is:( move 3 , 4 ; move ua + ul , ua * ua )  decode:( move 3 , 4 ; move ua + ul , 8 ) 
[15250] c:0 is:( move 4 , 3 ; move ua + ul , ua * ua )  decode:( move 4 , 3 ; move ua + ul , 5 ) 
[15251] c:0 is:( move ua , 0 ; move ul - ua , ua / 5 )  decode:( move 5 , 0 ; move ua , 4 / 3 ) 
[15252] c:0 is:( move ua - 4 , 3 ; move ua , ua * ua )  decode:( move 2 , 3 ; move ua , ua * ua ) 
[15253] c:0 is:( move ul - 3 + ua , 4 ; move ua , ul )  decode:( move 8 , 4 ; move ua , ua / 3 ) 
[15254] c:0 is:( move ua + ul , 3 ; move 4 , ua * ua )  decode:( move ua + ul , 3 ; move 4 , 8 ) 
[15255] c:0 is:( move ua / 4 , 0 ; move ua - ul , ul )  decode:( move ul , 0 ; move 5 , ul ) 
[15256] c:0 is:( move ua , 0 ; loop 0 , 3 , move 3 , 2 )  decode:loop 0 , 4 , move 3 + v0 , 4 * 3 
[15257] c:0 is:( move ua + ul , 4 ; move 4 , ua * ua )  decode:( move ua + ul , 4 ; move 4 , 8 ) 
[15258] c:0 is:( move 6 , 2 ; move ua + ul , ua * ua )  decode:( move 6 , 2 ; move ua + ul , 8 ) 
[15259] c:0 is:( move 5 , 3 ; move ua + ul , ua * ua )  decode:( move 5 , 3 ; move 8 , ua * ua ) 
[15260] c:0 is:( move ua - ul , ua / 4 ; move ua , 2 )  decode:( move 5 , ua / 4 ; move ua , 2 ) 
[15261] c:0 is:( move ua + ul , 3 ; move ua , ua / 4 )  decode:( move ua + ul , 3 ; move ua , 8 ) 
[15262] c:0 is:( move ua + ul , ua / 3 ; move ua , 4 )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[15263] c:0 is:( move ua - ul , 6 ; move ua + ul , 2 )  decode:( move 5 , 6 ; move ua + ul , 2 ) 
[15264] c:0 is:( move 3 , 2 / ua ; move ua - ul , ul )  decode:( move 3 , 2 / 9 ; move 5 , ul ) 
[15265] c:0 is:( move 4 , 0 ; move 2 , 2 ; move 2 , ul )  decode:( move 4 , 0 ; move 4 , 4 ) 
[15266] c:0 is:( move ul - ua , 3 ; move ua , ua / 3 )  decode:( move ul - ua , 3 ; move 5 , ul ) 
[15267] c:0 is:( move ua , 4 ; move ua + ul , ua / 3 )  decode:( move ua + ul , 3 ; move ua , ul ) 
[15268] c:0 is:( move ua + 4 , ul ; move ua , ua / 3 )  decode:( move 0 - ua , ul ; move ua , ul ) 
[15269] c:0 is:( move ul - ua , 3 ; move 4 , ua * ua )  decode:( move 5 , 6 ; move 4 , ua * ua ) 
[15270] c:0 is:( move ul , 4 + 4 ; move ua + ul , ul )  decode:( move ul , 9 ; move ua + ul , ul ) 
[15271] c:0 is:( move 3 - ua , ua * ua ; move 4 , ul )  decode:( move 3 , 5 ; move 4 , 2 ) 
[15272] c:0 is:( move 2 - ua , 5 ; move ua - ul , ul )  decode:( move 2 - ua , 5 ; move 5 , ul ) 
[15273] c:0 is:( move 3 , 4 ; move ua - ul , ua * ua )  decode:( move 3 , 4 ; move 5 , 8 ) 
[15274] c:0 is:( move ua , ua / 4 ; move ua - 2 , ul )  decode:( move ua , 3 / 4 ; move 4 , ul ) 
[15275] c:0 is:( move 3 - ua , ul ; move 4 , ua * ua )  decode:( move 0 - 4 , ul ; move 4 , 8 ) 
[15276] c:0 is:( move 3 , ua / 3 ; move ua + ul , ul )  decode:( move 3 , 2 ; move ua + ul , ul ) 
[15277] c:0 is:( move 4 , 3 ; move ua - ul , ua * ua )  decode:( move 4 , 3 ; move ul - ua , 5 ) 
[15278] c:0 is:( move ua - ul , 4 ; move 3 - ua , ul )  decode:( move ul - ua , ul ; move 3 , ul ) 
[15279] c:0 is:( move ul - ua + 4 , ul ; move 3 , ul )  decode:( move ua + 3 , ul ; move 3 , 4 ) 
[15280] c:0 is:( move 2 , 4 / ua ; move ua , ua * ua )  decode:( move 2 , 2 / 4 ; move ua , 8 ) 
[15281] c:0 is:( move 3 , ua / 3 ; move ua , ua * ua )  decode:( move 3 , ua / 3 ; move ua , 8 ) 
[15282] c:0 is:( move 2 , ua / 4 ; move ua + ul , ul )  decode:( move 2 , 4 / 4 ; move 7 , ul ) 
[15283] c:0 is:( move 0 , 2 ; loop 0 , 3 , move ua , 4 )  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[15284] c:0 is:( move 3 , ua * ua ; move ua + ul , 5 )  decode:( move 3 , ua * ua ; move 8 , 5 ) 
[15285] c:0 is:( move 5 - ua , ul ; move ua + 3 , ul )  decode:( move 2 , 9 ; move 9 , 0 - 2 ) 
[15286] c:0 is:( move ua , 0 ; loop 0 , 3 , move 4 , 2 )  decode:loop 0 , 4 , move 0 - 4 , v0 * 4 
[15287] c:0 is:( move ul - ua , ua - 3 ; move 4 , ul )  decode:loop 0 , 3 , move v0 - 4 , 3 / 3 
[15288] c:0 is:( move ua , ua / 4 ; move ul - ua , 2 )  decode:( move ua , ua / 4 ; move 5 , 2 ) 
[15289] c:0 is:( move ua - ul , ua / 4 ; move ua , 2 )  decode:( move 5 , ua / 4 ; move ua , 2 ) 
[15290] c:0 is:( move 3 - ua , 5 ; move ua + ul , ul )  decode:( move 3 , ul ; move ua + ul , ul ) 
[15291] c:0 is:( move 2 - ua , ul ; move ul - ua , 5 )  decode:( move 0 - 4 , ul ; move 5 , 5 ) 
[15292] c:0 is:( move 2 , 4 / ua ; move ua + ul , ul )  decode:( move 2 , 7 ; move ua + ul , ul ) 
[15293] c:0 is:loop 0 , 0 , loop 1 , 7 , move 2 - ua , 4  decode:loop 0 , 4 - 0 0 ; move ua , 0 - 9 
[15294] c:0 is:( move ua , ua / 3 ; move 3 - ua , ul )  decode:( move 3 , 0 ; move ua , ua / 3 ) 
[15295] c:0 is:( move ua + ul , ua ; move 4 , ua - 5 )  decode:( move ua , 0 ; move 4 , 4 / 3 ) 
[15296] c:0 is:( move 3 , ul ; move ua + ul , ua / 3 )  decode:( move 3 , ul ; move 7 , ua / 3 ) 
[15297] c:0 is:( move 0 - ua , ul ; move ua , ul / 5 )  decode:( move ua , 0 - 2 ; move ua , 3 ) 
[15298] c:0 is:( move ul - ua , 3 / 2 ; move ua , ul )  decode:( move ua , 4 * 3 ; move ua , ul ) 
[15299] c:0 is:( move 4 , ua * ua ; move ua + ul , 4 )  decode:( move 4 , ua * ua ; move 8 , 4 ) 
[15300] c:0 is:( move 4 , 4 ; move ua + ul , ua * ua )  decode:( move 4 , 4 ; move ua + ul , 8 ) 
[15301] c:0 is:( move 5 - ua , 3 ; move ua , ua * ua )  decode:( move ul , 0 ; move ua , ua * ua ) 
[15302] c:0 is:( move ua , 4 / ua ; move ua + ul , 3 )  decode:( move ua , 4 / ua ; move ua , 3 ) 
[15303] c:0 is:( move ua + 2 , 6 ; move ul - ua , ul )  decode:( move ua + 2 , 6 ; move 5 , 4 ) 
[15304] c:0 is:( move ua , ua / 4 ; move ul - ua , 2 )  decode:( move ua , ua / 4 ; move 5 , 2 ) 
[15305] c:0 is:( move ua , 3 ; move ua - ul , ua / 3 )  decode:( move ua , 3 ; move ul - ua , ul ) 
[15306] c:0 is:( move ul - ua , 6 ; move ua + 2 , ul )  decode:( move 5 , 9 ; move ua + 2 , 4 ) 
[15307] c:0 is:( move ul - ua , ul / ua ; move 3 , 2 )  decode:( move 4 , 0 - 3 ; move 4 , 2 ) 
[15308] c:0 is:( move ua , 0 ; move 3 , 3 ; move 3 , 2 )  decode:loop 0 , 3 , move 4 , 0 - v0 * 4 
[15309] c:0 is:( move 2 , ul ; move ua + ul , ua / 4 )  decode:( move 2 , ul ; move ua + ul , 8 ) 
[15310] c:0 is:( move 3 , 3 / ua ; move ua + ul , ul )  decode:( move 3 , 3 / ua ; move 7 , ul ) 
[15311] c:0 is:( move 3 / 2 , ua * ua ; move ua , ul )  decode:( move ua , ul / 3 ; move ul , ul ) 
[15312] c:0 is:( move ua , ua / 3 ; move 3 , ua * ua )  decode:( move ua , ua / 3 ; move 3 , 5 ) 
[15313] c:0 is:( move 4 - ua , ua * ua ; move ua , 4 )  decode:( move 2 , 9 ; move ua , ul ) 
[15314] c:0 is:( move 2 - ua , ul ; move ua , ua / 4 )  decode:( move 4 , 4 ; move ua , ua / 4 ) 
[15315] c:0 is:( move ua , 4 / ua ; move ua - ul , 2 )  decode:( move ua , 2 / 4 ; move 5 , 2 ) 
[15316] c:0 is:( move 0 , 3 ; loop 0 , 3 , move ua , 3 )  decode:loop 0 , 4 , move ua , 3 
[15317] c:0 is:( move ua , ua / 4 ; move 2 - ua , ul )  decode:( move ua , 8 + 4 ; move 4 , ul ) 
[15318] c:0 is:( move 2 / 3 , ul ; move ua , ua * ua )  decode:( move ul , 0 ; move ua , 0 - 2 ) 
[15319] c:0 is:( move ua , ul ; move ul - ua , 3 / 2 )  decode:( move 5 , ua / 4 ; move ua , 9 ) 
[15320] c:0 is:( move 2 , ua / 4 ; move ua , ua * ua )  decode:( move 2 , ua / 4 ; move ua , 8 ) 
[15321] c:0 is:( move ul , 2 ; move ua + ul , ua / 4 )  decode:( move ul , 9 ; move ua + ul , 8 ) 
[15322] c:0 is:( move 2 - ua , ul ; move ua , ul / 3 )  decode:( move ua , 9 / 2 ; move 4 , 9 ) 
[15323] c:0 is:( move ua , 4 / ua ; move ua - 2 , ul )  decode:( move ua , 4 / ua ; move 5 , ul ) 
[15324] c:0 is:( move ua - ul , 4 ; move ua + ul , 4 )  decode:( move 5 , 4 ; move ua + ul , 4 ) 
[15325] c:0 is:( move 2 , ul ; move ua + ul , 4 / ua )  decode:( move 2 , ul ; move ua + ul , 7 ) 
[15326] c:0 is:( move ul - ua , 3 ; move ua , 3 / ua )  decode:( move ua , ul / 3 ; move ua , 9 ) 
[15327] c:0 is:( move ua + 3 , ul ; move ul - 4 , ul )  decode:( move 9 , ul ; move 3 , ua / 3 ) 
[15328] c:0 is:( move 4 , 2 / ua ; move ua , ua * ua )  decode:( move 4 , 2 / 6 ; move ua , 8 ) 
[15329] c:0 is:( move ul - ua , ua / 4 ; move ua , 2 )  decode:( move ua , 3 - 3 ; move ua , 2 ) 
[15330] c:0 is:( move ua - ul , 3 ; move 4 , ua * ua )  decode:( move ul - ua , 3 ; move 4 , 5 ) 
[15331] c:0 is:( move ua - ul , 2 ; move ua , ua / 4 )  decode:( move 5 , 2 ; move ua , ua / 4 ) 
[15332] c:0 is:( move ua + ul , 3 / ua ; move ua , 4 )  decode:( move ua + ul , 3 + move ua , 4 ) 
[15333] c:0 is:( move ua , ua * ua ; move 4 , ua - 4 )  decode:( move 4 , ul ; move ua , 4 ) 
[15334] c:0 is:( move ua + ul , ua / 4 ; move 2 , ul )  decode:( move ua + ul , 3 / move 2 , ul ) 
[15335] c:0 is:( move 4 + 2 , ul / ua ; move ua , ul )  decode:( move ua , ul / ua ; move ua , ul ) 
[15336] c:0 is:( move ua + ul , 4 ; move ua , ua / 3 )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[15337] c:0 is:( move ua + ul , ua * ua ; move 4 , 4 )  decode:( move ua + ul , ua ; move 4 , 4 ) 
[15338] c:0 is:( move 2 - ua , ua / 4 ; move ua , ul )  decode:( move 4 , 4 * 3 ; move ua , ul ) 
[15339] c:0 is:( move ua , 2 ; move ul - ua , ua / 4 )  decode:( move ua , 2 ; move 5 , 3 8 ) 
[15340] c:0 is:( move ua , 4 * 3 ; move ua , ua * ua )  decode:( move ua , 4 * 3 ; move ua , 8 ) 
[15341] c:0 is:( move 2 , 3 / ua ; move ul - ua , ul )  decode:( move 2 , 2 / 3 ; move ua , 4 ) 
[15342] c:0 is:( move ua , 2 / ua ; move ua - ul , 4 )  decode:( move ua , 2 / ua ; move 5 , 4 ) 
[15343] c:0 is:( move ul - ua , ua * ua ; move 5 , 2 )  decode:( move 5 , 5 ; move 5 , ul ) 
[15344] c:0 is:( move ua + ul , ul ; move ua , 5 * 2 )  decode:( move ua + ul , ul ; move ua , 6 ) 
[15345] c:0 is:( move 3 - ua , 4 ; move ua - ul , ul )  decode:( move 3 , 2 ; move ua - ul , ul ) 
[15346] c:0 is:( move ul - ua , 4 ; move 3 , ua * ua )  decode:( move ul - ua , 4 ; move 3 , 8 ) 
[15347] c:0 is:( move ua + ul , ul / ua ; move 2 , 4 )  decode:( move 2 , ul / 4 ; move ua , 4 ) 
[15348] c:0 is:( move ua + ul , 6 ; move ua - ul , 2 )  decode:( move ua + ul , 6 ; move 5 , 2 ) 
[15349] c:0 is:( move 4 , ua / 2 ; move ua , ua * ua )  decode:( move 4 , ua / 2 ; move ua , 5 ) 
[15350] c:0 is:( move ua + ul , 6 ; move 2 - ua , ul )  decode:( move ua + ul , 6 ; move 4 , 2 ) 
[15351] c:0 is:( move ul , 4 / ua ; move ua + 2 , ul )  decode:( move ul , 4 ; move ua + 2 , 4 ) 
[15352] c:0 is:( move 3 , ua * ua ; move ua - ul , 4 )  decode:( move 3 , ua * ua ; move ua , 4 ) 
[15353] c:0 is:( move ua + 4 , 4 ; move ul - ua , ul )  decode:( move ua + 4 , 4 ; move 5 , 2 ) 
[15354] c:0 is:( move ul - ua , 5 ; move ul - ua , 2 )  decode:( move 5 , ua * ua ; move 5 , 2 ) 
[15355] c:0 is:( move ua + ul , 4 ; move 4 - ua , ul )  decode:( move ua + ul , 4 ; move 2 , ul ) 
[15356] c:0 is:( move 4 , 3 ; move ul - ua , ua * ua )  decode:( move 4 , 3 ; move ua - ul , 5 ) 
[15357] c:0 is:( move 0 - ua , ul / ua ; move 5 , ul )  decode:loop 0 , 2 , move ua - 2 , v0 - 3 
[15358] c:0 is:( move ua - 3 , 3 / ua ; move ua , ul )  decode:( move 3 , 2 / ua ; move ua , ul ) 
[15359] c:0 is:( move ul - ua , ul ; move ua , 3 / 2 )  decode:( move 5 , ul ; move ua , 3 + 8 ) 
[15360] c:0 is:( move ul , 2 ; move ua - ul , ua / 3 )  decode:( move ul , 2 ; move ua , 0 - 2 ) 
[15361] c:0 is:( move ua , 3 / 2 ; move ul - ua , ul )  decode:( move ua , 2 / 3 ; move 5 , ul ) 
[15362] c:0 is:( move 2 , 0 ; move 2 , 4 ; move 2 , ul )  decode:loop 0 , 4 , move v0 , 4 * v0 
[15363] c:0 is:( move ua , 4 / ua ; move 2 - ua , ul )  decode:( move ua , 4 / 3 ; move 4 , 4 ) 
[15364] c:0 is:( move 3 - ua , ul ; move ua , 3 / ua )  decode:( move 3 , 4 ; move ua , 9 ) 
[15365] c:0 is:( move ul - ua , 2 / ua ; move 3 , ul )  decode:( move 5 , 0 - 4 ; move 3 , 4 ) 
[15366] c:0 is:( move ua , ul / ua ; move ua + 3 , 4 )  decode:( move ua , ul / ua ; move 9 , 4 ) 
[15367] c:0 is:( move ua , ua * ua ; move 2 , 4 / ua )  decode:( move ua , 8 ; move 3 , 4 * 3 ) 
[15368] c:0 is:( move ul - ua , 6 ; move ua + ul , 2 )  decode:( move 5 , 9 ; move ua + ul , 2 ) 
[15369] c:0 is:loop 0 , 3 , move 4 - ua , 2 + 4 * v0  decode:( move 4 , 2 ; move 3 , 9 ) 
[15370] c:0 is:( move 0 , 2 ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 3 , move 0 - 3 , 2 - 8 
[15371] c:0 is:( move ua + ul , ul / 4 ; move ua , 2 )  decode:loop 0 , 2 , move ua , 0 - 2 
[15372] c:0 is:( move ua , ul / 4 ; move ua + ul , 2 )  decode:loop 0 , 3 , move 4 + v0 , 0 - 2 
[15373] c:0 is:( move 3 , ul / ua ; move ua + 3 , ul )  decode:( move 9 , ul / 4 ; move 9 , ul ) 
[15374] c:0 is:( move ua , ua / 4 ; move ua - ul , 2 )  decode:( move ua , 3 / 2 ; move 5 , 2 ) 
[15375] c:0 is:( move ul - ua , 2 ; move ua , ua / 4 )  decode:( move ua , 2 ; move ua , ua / 4 ) 
[15376] c:0 is:( move ua , 3 ; move ul - ua , 3 / ua )  decode:( move ua , 3 ; move ua , 9 ) 
[15377] c:0 is:( move ua , ua / 2 ; move ua , ua / 3 )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[15378] c:0 is:( move ul - ua , 3 ; move ua + ul , 5 )  decode:( move 5 , 0 ; move ua + ul , 2 ) 
[15379] c:0 is:( move 2 - ua , 4 / ua ; move ua , ul )  decode:( move 4 , 9 + 2 ; move ua , ul ) 
[15380] c:0 is:( move ul - ua , 4 ; move 3 - ua , ul )  decode:( move ul - ua , 4 ; move 3 , ul ) 
[15381] c:0 is:( move ul - ua + 4 , 4 ; move ua , ul )  decode:( move ua + 3 , 4 ; move ua , 2 ) 
[15382] c:0 is:( move ua , 4 / ua ; move 2 , ua - ul )  decode:( move 2 , 9 ; move ua , ul ) 
[15383] c:0 is:( move ua , 3 ; move ua + ul , ua / 4 )  decode:( move ua , 3 ; move ua + ul , 8 ) 
[15384] c:0 is:( move ua , ua * ua ; move 4 * 2 , ul )  decode:( move 0 - ua , 9 ; move 9 , ul ) 
[15385] c:0 is:( move ua , 2 / ua ; move 4 - ua , ul )  decode:( move 2 , ul / 4 ; move ua , 4 ) 
[15386] c:0 is:( move ua + ul , 5 ; move 3 , ua * ua )  decode:( move ua + ul , 5 ; move 3 , 5 ) 
[15387] c:0 is:( move 3 , ul ; move ua , ua - 3 / ua )  decode:( move 3 , ul ; move ua , 4 + 3 ) 
[15388] c:0 is:( move ua - ul , 3 ; move ua , ua / 3 )  decode:( move 6 , 2 ; move ua , ua / 3 ) 
[15389] c:0 is:( move ua , 2 ; move ua - ul , ua / 4 )  decode:( move ua , 2 ; move 5 , 3 / 4 ) 
[15390] c:0 is:( move ul - ua , ua * ua ; move 3 , 4 )  decode:( move ua , ua * ua ; move 3 , 4 ) 
[15391] c:0 is:( move ul - ua , 4 ; move ua , 2 / ua )  decode:( move ua , 4 ; move ua , 4 * 4 ) 
[15392] c:0 is:( move 3 , 0 ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 3 , move 3 , v0 
[15393] c:0 is:( move 2 - ua , ul ; move 5 , ua * ua )  decode:( move 0 - 4 , ul ; move 5 , 5 ) 
[15394] c:0 is:( move ua , 2 / 3 ; move ul - ua , ul )  decode:( move ua , 4 / 3 ; move 5 , 4 ) 
[15395] c:0 is:( move ua , ul ; move 2 - ua , 4 / ua )  decode:( move ua , 4 * ua ; move 4 , 7 ) 
[15396] c:0 is:( move ua , 4 ; move ul - ua , 2 / ua )  decode:( move ua , 0 - 2 ; move ua , 6 ) 
[15397] c:0 is:( move ua - ul , 2 / ua ; move ua , 4 )  decode:( move 5 , 2 / ua ; move ua , 4 ) 
[15398] c:0 is:( move 0 , 2 ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 3 , move 4 , 3 / v0 
[15399] c:0 is:( move ua , 0 ; move 3 , 2 ; move 3 , 4 )  decode:loop 0 , 3 , move 4 , 0 - v0 * 3 
[15400] c:0 is:( move 3 , 6 ; move ua + ul , ua * ua )  decode:( move 3 , 9 ; move ua + ul , 8 ) 
[15401] c:0 is:( move ua , 0 ; move 3 , 4 ; move 3 , 2 )  decode:loop 0 , 4 , move 3 , 3 + v0 
[15402] c:0 is:( move 3 , ua * ua ; move ul - ua , 5 )  decode:( move 3 , ua * ua ; move ua , 5 ) 
[15403] c:0 is:( move ul , ul / 4 ; move ua + ul , 2 )  decode:( move ul , ul / 4 ; move 7 , 2 ) 
[15404] c:0 is:( move 3 , ua / 3 ; move ul - ua , ul )  decode:( move 5 , 3 ; move 3 , 0 - 4 ) 
[15405] c:0 is:( move ua , ul - ua / 3 ; move ua , 4 )  decode:( move 0 - ua , 2 ; move ua , 4 ) 
[15406] c:0 is:( move ua , ua / 6 ; move ua + ul , 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[15407] c:0 is:( move ul - ua , 2 / ua ; move 4 , ul )  decode:( move 5 , 0 - 4 ; move 4 , 4 ) 
[15408] c:0 is:( move ul - ua , ul ; move 3 * 3 , ul )  decode:( move ul - ua , ul ; move 8 , ul ) 
[15409] c:0 is:( move ua , 2 ; move 2 , 4 ; move 2 , 2 )  decode:( move ua , 2 ; move 3 , 2 / 4 ) 
[15410] c:0 is:( move ua , 0 ; move ua + ul , 8 / ua )  decode:( move ua , 0 ; move 7 , 4 / 3 ) 
[15411] c:0 is:( move ua , 3 ; move ua - ul , ua / 4 )  decode:( move ua , 3 ; move 5 , ua / 4 ) 
[15412] c:0 is:( move ul - ua , ua * ua ; move 3 , 5 )  decode:( move ua - ul , 5 ; move 3 , 5 ) 
[15413] c:0 is:( move 2 , 2 ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua , 4 + 3 / v0 
[15414] c:0 is:( move ul - ua , 3 ; move ul - ua , 5 )  decode:( move ul - ua , 3 ; move ua , 5 ) 
[15415] c:0 is:( move 4 , ul ; move ua + ul , ua / 3 )  decode:loop 0 , 3 , move ua - 2 , v0 
[15416] c:0 is:( move 2 - ua , ul / 4 ; move ua , ul )  decode:( move 4 , 0 - 4 ; move ua , 4 ) 
[15417] c:0 is:( move ul - ua , 4 * 3 ; move ua , ul )  decode:( move 5 , 9 * 4 ; move ua , 2 ) 
[15418] c:0 is:( move 3 , 0 ; move 2 , ul ; move 2 , 4 )  decode:( move 4 , 0 ; move 3 , ua / ua ) 
[15419] c:0 is:( move ua + ul , ua / 4 ; move ua , 4 )  decode:( move ua + ul , 3 / move ua , 4 ) 
[15420] c:0 is:( move ua , 2 / 4 ; move ul - ua , ul )  decode:( move ua , 9 + 4 ; move 5 , 4 ) 
[15421] c:0 is:( move ul - ua , 3 ; move ua , ua / 4 )  decode:( move 5 , 3 ; move ua , ua / 4 ) 
[15422] c:0 is:( move 4 / 3 , ua ; move ua + ul , ul )  decode:( move ul , 0 ; move 8 , ul ) 
[15423] c:0 is:( move 5 , 2 / ua ; move ua , ua * ua )  decode:( move ua , 2 / ua ; move ua , 8 ) 
[15424] c:0 is:( move 2 , ul / 4 ; move ua + ul , ul )  decode:( move 2 , ul / 4 ; move 7 , ul ) 
[15425] c:0 is:( move ul - ua , ua * ua ; move 4 , 4 )  decode:( move 5 , ua * ua ; move 4 , 4 ) 
[15426] c:0 is:( move ua , 2 ; loop 0 , 3 , move 3 , 2 )  decode:( move 5 , 2 ; move ua + ul , 4 ) 
[15427] c:0 is:( move 3 - ua , 5 ; move ul - ua , ul )  decode:( move 3 , ua * ua ; move 5 , ul ) 
[15428] c:0 is:( move ua , ul ; move ul - ua , 4 * 3 )  decode:( move ua , ul ; move ul - ua , 9 ) 
[15429] c:0 is:( move ul - ua , 6 ; move ul - ua , 2 )  decode:( move ul - ua , 6 ; move 5 , 2 ) 
[15430] c:0 is:( move ua , ul / 4 ; move 2 - ua , ul )  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[15431] c:0 is:( move 9 , 0 ; move ua + ul , ua * ua )  decode:( move 9 , 0 ; move ua + 2 , 8 ) 
[15432] c:0 is:( move 0 - ua , 9 ; move ua + ul , ul )  decode:( move ua , 9 ; move ua + ul , ul ) 
[15433] c:0 is:( move 3 , ua - 4 ; move ua , ul / ua )  decode:( move ua , 4 / move 4 , 2 / ua ) 
[15434] c:0 is:( move ul - ua , 5 ; move 3 , ua * ua )  decode:( move ua - ul , ua - ; move ua , 4 ) 
[15435] c:0 is:( move ua , ul ; move 3 - ua , ua / 4 )  decode:( move ua , ul ; move 3 , ua / 4 ) 
[15436] c:0 is:( move 2 , 4 / ua ; move ul - ua , ul )  decode:( move 4 - ua , ua - ul , 4 ua ) 
[15437] c:0 is:( move ua , ul / 4 ; move ua + ul , 3 )  decode:loop 0 , 4 , move 0 - 4 , 0 - 3 
[15438] c:0 is:( move ua , 0 ; loop 0 , 3 , move 3 , 4 )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[15439] c:0 is:( move ua , ua / 4 ; move ua - 3 , ul )  decode:( move ua , 3 / 2 ; move 3 , ul ) 
[15440] c:0 is:( move 0 , ul ; loop 1 , 3 , move 3 , 2 )  decode:loop 0 , 3 , move 3 - ua , 3 * v0 
[15441] c:0 is:( move ua - ul , 6 ; move ua - ul , 2 )  decode:( move ul - ua , 6 ; move 5 , ul ) 
[15442] c:0 is:( move ua , 5 / 2 ; move ua , ua * ua )  decode:( move ua , 0 - 5 ; move ua , 9 ) 
[15443] c:0 is:( move 2 , ul ; move ul - ua , ua / 4 )  decode:( move 2 , ul ; move ua - ul , 8 ) 
[15444] c:0 is:( move 4 , ul ; move ul - ua , 2 / ua )  decode:( move 4 , ul ; move 5 , 4 * 4 ) 
[15445] c:0 is:( move 4 , ua / ua - 3 ; move ua , ul )  decode:( move 4 , 2 ; move ua , ul ) 
[15446] c:0 is:( move ua , ul ; move ul - ua , 2 / 4 )  decode:( move ua , ul ; move 5 , 9 ) 
[15447] c:0 is:( move ua + ul , 2 ; move ul - ua , 7 )  decode:( move 7 , 2 ; move 5 , 7 ) 
[15448] c:0 is:( move ul - ua , 6 ; move ua + 3 , ul )  decode:( move 5 , 9 ; move ua + 3 , ul ) 
[15449] c:0 is:( move ua , 4 + 6 ; move ua , ua * ua )  decode:( move ua , 6 + 5 ; move ua , 8 ) 
[15450] c:0 is:( move ua - 4 , ul ; move 4 , ua * ua )  decode:( move 3 , ul ; move 4 , ua * ua ) 
[15451] c:0 is:( move 3 , ua / 4 ; move ua + ul , ul )  decode:( move 3 , 4 / 4 ; move 7 , ul ) 
[15452] c:0 is:( move ul - ua , ul ; move ua , 2 / 4 )  decode:( move ul - ua , ul ; move ua , 7 ) 
[15453] c:0 is:( move 5 , ua / 2 ; move ua + ul , ul )  decode:( move 5 , 2 ; move ua + 2 , ul ) 
[15454] c:0 is:( move 2 , ul ; move ua - ul , ua / 4 )  decode:( move 2 , ul ; move ul - ua , 8 ) 
[15455] c:0 is:( move ua + ul , ua / 4 ; move 3 , ul )  decode:( move ua + ul , 3 / move 3 , ul ) 
[15456] c:0 is:( move ua , ua * ua ; move ua , 4 * 4 )  decode:( move ua , ua / 3 ; move ua , 4 ) 
[15457] c:0 is:( move ul - ua , ua / 4 ; move 2 , ul )  decode:( move ul - ua , 4 ; move 2 , ul ) 
[15458] c:0 is:( move ua , 2 ; move ul - ua , ua / 5 )  decode:( move ul - ua , 0 ; move ua , 5 ) 
[15459] c:0 is:( move 3 , ul ; move ua , ul - ua / 3 )  decode:( move ua , 0 ; move 3 , 4 * 5 ) 
[15460] c:0 is:( move 5 , 3 ; move ul - ua , ua * ua )  decode:( move 5 , 3 ; move ul - ua , 5 ) 
[15461] c:0 is:( move ua , 2 / 4 ; move ua - ul , ul )  decode:( move ua , 9 / ua ; move 5 , ul ) 
[15462] c:0 is:( move ua - ul , 3 ; move ua , ua / 4 )  decode:( move 5 , 3 ; move ua , ua / 4 ) 
[15463] c:0 is:( move 3 , ul / ua ; move 3 , ua * ua )  decode:( move 3 , 4 / ua ; move 3 , 8 ) 
[15464] c:0 is:( move ua , 4 * 4 ; move ua + ul , ul )  decode:( move ua , 4 * 4 ; move ua , ul ) 
[15465] c:0 is:( move 3 - ua , 4 / ua ; move ua , ul )  decode:( move 3 - ua , ul ; move ua , 4 ) 
[15466] c:0 is:( move ua + 3 , 6 ; move ul - ua , ul )  decode:( move ua + 3 , 6 ; move 5 , 4 ) 
[15467] c:0 is:( move ua , ul ; move ua - ul , 4 * 3 )  decode:loop 0 , 3 , move 3 - ua , ua / ua 
[15468] c:0 is:( move 4 , ua * ua ; move ua - ul , 4 )  decode:( move 4 , ua * ua ; move ua , 4 ) 
[15469] c:0 is:( move ua , ua * ua ; move 3 , 4 / ua )  decode:( move ua , 8 ; move 3 , 4 / ua ) 
[15470] c:0 is:( move 3 , 0 ; move 2 , 4 ; move 2 , ul )  decode:( move 3 , 0 ; move 4 , 4 ) 
[15471] c:0 is:( move ua , ua / 3 ; move ua - ul , 4 )  decode:( move ua , ua / 3 ; move 5 , 4 ) 
[15472] c:0 is:( move 3 , ul ; move ua , ua - 4 / ua )  decode:loop 0 , 3 , move 3 - ua , 2 / 9 
[15473] c:0 is:( move ua - ul , 2 / ua ; move 4 , ul )  decode:( move 5 , 2 / ua ; move 4 , ul ) 
[15474] c:0 is:( move ua , 6 / ua ; move ua + ul , 2 )  decode:( move ua , ul ; move ua + ul , 2 ) 
[15475] c:0 is:( move 4 , ua * ua ; move ul - ua , 4 )  decode:( move 4 , ua * ua ; move 5 , ul ) 
[15476] c:0 is:( move ul - ua , ul ; move 2 , ua / 4 )  decode:( move ul - ua , ul ; move v0 , 8 ) 
[15477] c:0 is:( move ua - ul , ul / 4 ; move ua , 2 )  decode:( move 5 , ul / 4 ; move ua , 2 ) 
[15478] c:0 is:( move ua + ul , ul ; move 3 , ua / 4 )  decode:( move ua + ul , ul ; move 3 , 8 ) 
[15479] c:0 is:( move ua , ua * ua ; move ul - 4 , 4 )  decode:( move ua , 8 ; move 3 , ul ) 
[15480] c:0 is:( move ul , 2 / 4 ; move ua , ua - ul )  decode:( move ul , 9 ; move ua , 2 / 4 ) 
[15481] c:0 is:( move ua , 4 * 4 ; move ua , ua * ua )  decode:( move ua , 4 * 4 ; move ua , 8 ) 
[15482] c:0 is:( move 0 - ua , ul / 6 ; move ua , ul )  decode:( move ua , 0 - 3 ; move ua , ul ) 
[15483] c:0 is:( move ul - ua , 2 ; move ua , ul / 4 )  decode:( move ua , 2 - 3 ; move 5 , 4 ) 
[15484] c:0 is:( move 2 , ua / 4 ; move ua - ul , ul )  decode:( move 2 , ua / 4 ; move ua , ul ) 
[15485] c:0 is:( move ua , 3 ; move ul - ua , ua / 4 )  decode:( move ua , 3 ; move ul - ua , 8 ) 
[15486] c:0 is:( move 0 , 3 ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 3 , move 3 , 3 / v0 
[15487] c:0 is:( move 4 , 0 ; move 3 , 2 ; move 2 , ul )  decode:loop 0 , 3 , move 3 , 2 * 3 - v0 
[15488] c:0 is:( move 3 - ua , ul / 3 ; move ua , ul )  decode:( move 3 , 0 - 9 ; move ua , 4 ) 
[15489] c:0 is:( move ua + ul , ul ; move ua , 4 * 4 )  decode:( move ua , ul ; move ua , 4 * 4 ) 
[15490] c:0 is:( move ua , ul ; move ua + ul , 4 * 4 )  decode:( move ua , 4 * 5 ; move ua , 9 ) 
[15491] c:0 is:( move ua + ul , 3 / ua ; move 4 , ul )  decode:( move ua , ua / 4 ; move 4 , ul ) 
[15492] c:0 is:( move 3 , 0 ; move 4 , 2 ; move ua , 3 )  decode:( move ua , 0 ; move 5 , 3 ) 
[15493] c:0 is:( move 3 , 4 / ua ; move ua , ua * ua )  decode:( move 3 , 3 / 2 ; move ua , 8 ) 
[15494] c:0 is:( move ua , 4 / ua ; move ua + ul , 4 )  decode:( move ua , ua / 4 ; move 8 , 4 ) 
[15495] c:0 is:( move ua , 3 / ua ; move ua - ul , 4 )  decode:( move ua , 9 + 4 ; move 5 , 4 ) 
[15496] c:0 is:( move 3 , ul ; move ua + ul , ua / 4 )  decode:( move 3 , ul ; move ua + ul , 8 ) 
[15497] c:0 is:( move 4 , 4 ; move ul - ua , ua * ua )  decode:( move 4 , 4 ; move 5 , 7 ) 
[15498] c:0 is:( move ul - ua , 3 ; move ua , 4 / ua )  decode:( move ul - ua , 3 ; move ua , 7 ) 
[15499] c:0 is:( move 4 , 0 ; loop 0 , 2 , move ua , 4 )  decode:loop 0 , 3 , move ua / v0 , 0 - 3 
[15500] c:0 is:( move 0 , 4 ; loop 0 , 3 , move ua , 3 )  decode:loop 0 , 3 , move 0 - ua , 0 - 3 
[15501] c:0 is:( move ua + ul , 2 / 4 ; move ul , ul )  decode:( move ul , 4 ; move ua , ul / 4 ) 
[15502] c:0 is:( move 2 - ua , 6 ; move ul - ua , ul )  decode:( move 4 , 9 ; move ua - ul , ul ) 
[15503] c:0 is:( move ul - ua , ul / ua ; move 4 , 2 )  decode:( move 5 , ul - 4 ; move 4 , 2 ) 
[15504] c:0 is:( move ul , 4 ; move ua + ul , ua / 3 )  decode:( move ul , 4 ; move ua + ul , 2 ) 
[15505] c:0 is:( move ua - 4 , ul ; move ua - ul , 4 )  decode:( move 3 , ul ; move 5 , 4 ) 
[15506] c:0 is:( move ua + ul , ul / 4 ; move 2 , ul )  decode:( move ua , ul / 4 ; move 2 , ul ) 
[15507] c:0 is:( move 5 , ua / 2 ; move ua , ua * ua )  decode:( move 4 , ua / 2 ; move ua , 8 ) 
[15508] c:0 is:( move 3 , 0 ; move ul , 4 ; move 2 , 2 )  decode:loop 0 , 4 , move v0 , 0 - 6 
[15509] c:0 is:( move 4 , 0 ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 3 , move 3 , v0 
[15510] c:0 is:( move ua , 4 * 3 ; move ul - ua , ul )  decode:( move ua , 4 * 3 ; move 5 , 4 ) 
[15511] c:0 is:( move ua , 0 ; move 2 , 3 ; move 4 , 3 )  decode:( move ua , 0 ; move 4 , 3 ) 
[15512] c:0 is:( move ua , 4 / ua ; move 3 , ua * ua )  decode:( move ua , ua / 4 ; move 3 , 8 ) 
[15513] c:0 is:( move ul - ua , 0 ; move ul - ua , 8 )  decode:( move ul - ua , 0 ; move 5 , 8 ) 
[15514] c:0 is:( move ua , ua / 3 ; move ul - ua , 4 )  decode:( move ua , 3 ; move 5 , 2 / 3 ) 
[15515] c:0 is:( move ua - ul , ua / 3 ; move ua , 4 )  decode:( move 5 , ua / 3 ; move ua , 4 ) 
[15516] c:0 is:( move 3 , ua - ul / 3 ; move ua , ul )  decode:( move 3 , 6 ; move 8 , ul ) 
[15517] c:0 is:( move ua , 2 / ua ; move ul - ua , 5 )  decode:( move ua , 2 / 6 ; move 6 , 5 ) 
[15518] c:0 is:( move 4 , ua / 3 ; move ua , ua * ua )  decode:( move 4 , ua / 3 ; move ua , ua ) 
[15519] c:0 is:( move ua , ua * ua ; move 3 , ua / 4 )  decode:( move ua , ua * ua ; move 3 , 8 ) 
[15520] c:0 is:( move ul - ua , 4 ; move ua + ul , 5 )  decode:( move 5 , 0 - 4 ; move 8 , 2 ) 
[15521] c:0 is:( move ua + ul , 6 ; move ua + ul , 4 )  decode:( move ua + ul , 6 ; move 7 , 4 ) 
[15522] c:0 is:( move 3 , 3 / ua ; move ul - ua , ul )  decode:( move 3 , 3 / ua ; move ua , 4 ) 
[15523] c:0 is:( move ul - ua , 4 ; move 4 , ua * ua )  decode:( move 5 , 4 ; move 4 , ua * ua ) 
[15524] c:0 is:( move ua , 2 ; move ul - ua , ul / 4 )  decode:( move ua , 0 - 4 ; move ua , 9 ) 
[15525] c:0 is:( move 4 , 2 ; loop 0 , 2 , move ua , 2 )  decode:loop 0 , 3 , move ua , 2 
[15526] c:0 is:( move ua , 0 - 9 ; move ua , ua * ua )  decode:( move ua , 0 - 9 ; move ua , 8 ) 
[15527] c:0 is:( move ua , 4 / 3 ; move ua , ua * ua )  decode:( move 5 , 0 ; move 7 , 4 / 3 ) 
[15528] c:0 is:( move 0 - ua , 9 ; move ua , ua * ua )  decode:( move ua , 4 * 3 ; move ua , 5 ) 
[15529] c:0 is:( move ua , 8 ; move ua + 2 , ua * ua )  decode:( move ua , 8 ; move 9 , ua * ua ) 
[15530] c:0 is:( move ua + ul , ua / 6 ; move ua , 2 )  decode:( move ua + ul , 6 ; move ua , 2 ) 
[15531] c:0 is:( move ua , 9 ; move 0 - ua , ua * ua )  decode:( move ua , 9 ; move ua , 5 ) 
[15532] c:0 is:( move ua - ul , 2 ; move ul - ua , 6 )  decode:( move ul - ua , 2 ; move 5 , 6 ) 
[15533] c:0 is:( move ul - ua , ul ; move ua , 4 * 3 )  decode:( move 5 , 0 - 5 ; move ua , 9 ) 
[15534] c:0 is:( move 4 , ua * ua ; move 4 - ua , ul )  decode:( move ua - 4 , 5 ; move 3 , 4 ) 
[15535] c:0 is:( move ua + ul , 4 * 4 ; move ua , ul )  decode:( move ua , 4 * 4 ; move ua , ul ) 
[15536] c:0 is:( move ua + 2 , ul / 4 ; move ul , ul )  decode:( move ua + ul , 0 ; move ul , ul ) 
[15537] c:0 is:( move ul - ua , ua / 3 ; move ua , 4 )  decode:( move ul - ua , 2 ; move ua , 4 ) 
[15538] c:0 is:( move 4 , 0 ; move 2 , 3 ; move 2 , ul )  decode:( move 3 , 0 ; move 4 , 4 * 4 ) 
[15539] c:0 is:( move 5 , 4 ; move ua + ul , ua * ua )  decode:( move 5 , 4 ; move ua + ul , 5 ) 
[15540] c:0 is:( move ua , ua / 4 ; move ua + ul , 4 )  decode:( move ua , 3 / 2 ; move 7 , 4 ) 
[15541] c:0 is:( move 3 , 0 ; move 4 , 2 ; move 2 , ul )  decode:( move 4 , 0 ; move ul - ua , ul ) 
[15542] c:0 is:( move ua , 2 * 5 ; move ul - ua , ul )  decode:( move ua , 2 / 5 ; move 5 , ul ) 
[15543] c:0 is:( move 3 , ua / 4 ; move ua , ua * ua )  decode:( move 3 , 2 / 4 ; move ua , 8 ) 
[15544] c:0 is:( move ua , ul / ua ; move ua + 4 , 4 )  decode:( move ua , ul / 4 ; move ua , 4 ) 
[15545] c:0 is:( move ua , ua / 4 ; move 3 , ua * ua )  decode:( move ua , 3 / 2 ; move 3 , 8 ) 
[15546] c:0 is:( move ua , ua / 4 ; move ua + ul , 4 )  decode:( move ua , 3 / 2 ; move 7 , 4 ) 
[15547] c:0 is:( move ua , ua * ua ; move ua , 3 * 5 )  decode:( move ua , ul ; move ua , 5 * 2 ) 
[15548] c:0 is:( move ua - ul , 5 ; move 4 , ua * ua )  decode:( move ul - ua , 5 ; move 4 , 5 ) 
[15549] c:0 is:( move 0 - ua , ul - 9 ; move ua , ul )  decode:( move ua , 3 / 2 ; move ua , 4 ) 
[15550] c:0 is:( move 5 , ua * ua ; move ul - ua , 4 )  decode:( move 5 , ua * ua ; move 5 , ul ) 
[15551] c:0 is:( move 4 , 0 ; move 2 , ul ; move 2 , 4 )  decode:( move 5 , 0 ; move 3 , ua * ua ) 
[15552] c:0 is:( move ua , ua / 3 ; move ua , ua / 4 )  decode:( move ua , 3 / ua ; move ua , 8 ) 
[15553] c:0 is:( move 4 - ua , ul ; move ua , ua / 4 )  decode:( move 2 , 4 ; move ua , ua / 4 ) 
[15554] c:0 is:( move ua , 2 + 9 ; move ua , ua * ua )  decode:( move ua , 9 + 2 ; move ua , 8 ) 
[15555] c:0 is:( move 4 - ua , ul / 3 ; move ua , ul )  decode:( move 2 , 0 - 4 ; move ua , 4 ) 
[15556] c:0 is:( move ua , ua * ua ; move 4 , ua / 4 )  decode:( move ua , 2 / 8 ; move 4 , 8 ) 
[15557] c:0 is:( move 3 , 0 ; move 2 , 4 ; move 3 , ul )  decode:( move 3 , 0 ; move ul - ua , 5 ) 
[15558] c:0 is:( move 2 , 3 ; loop 0 , 2 , move 3 , ul )  decode:loop 0 , 3 , move 3 / v0 , ul 
[15559] c:0 is:( move 3 , 0 ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 4 , move 4 , v0 - ul 
[15560] c:0 is:( move ua + ul , ul ; move 3 , ul / 4 )  decode:( move ua , ul ; move 3 , 2 / ua ) 
[15561] c:0 is:( move ul - ua , ul ; move ua , 4 / 3 )  decode:( move 5 , 2 * 3 ; move 5 , 8 ) 
[15562] c:0 is:( move ua , ua / 4 ; move ua , ua / 3 )  decode:( move ua , 3 / 4 ; move ua , 2 ) 
[15563] c:0 is:( move ua , ua / 4 ; move 4 , ua * ua )  decode:( move ua , ua / 4 ; move 4 , 8 ) 
[15564] c:0 is:( move ua - ul , ul ; move ua , 4 / 3 )  decode:( move 5 , ul ; move ua , 4 / 4 ) 
[15565] c:0 is:( move ua , 4 / ua ; move ua - ul , 4 )  decode:( move ua , 4 / ua ; move 5 , 4 ) 
[15566] c:0 is:( move ua , ul / 4 ; move 3 , ua * ua )  decode:( move 4 , ul / 4 ; move 3 , 5 ) 
[15567] c:0 is:( move ul - ua , 4 / 3 ; move ua , ul )  decode:( move 5 , 9 / 2 ; move ua , 4 ) 
[15568] c:0 is:( move 4 , 3 / ua ; move ul - ua , ul )  decode:( move 4 , 3 / 2 ; move 5 , ul ) 
[15569] c:0 is:( move ua , 3 ; loop 0 , 3 , move 3 , 2 )  decode:loop 0 , 4 , move 4 , v0 + 4 
[15570] c:0 is:( move ua , 2 / ua * 4 ; move ul , ul )  decode:( move ul , 0 ; move ua , 5 ) 
[15571] c:0 is:( move ua , ua - 4 / ua ; move 4 , ul )  decode:( move 4 , 0 - 9 ; move 5 , ul ) 
[15572] c:0 is:( move ua , ua * ua ; move 3 , ul / 4 )  decode:( move 3 , ul + move ua , ul / 4 ) 
[15573] c:0 is:( move ua , 4 * 4 ; move ul - ua , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[15574] c:0 is:( move ua , 0 ; loop 0 , 5 , move 3 , 3 )  decode:( move ua , 0 ; move ua , 3 ) 
[15575] c:0 is:( move ua - ul , ua / 6 ; move ua , 2 )  decode:( move 6 , ul ; move ua , 2 ) 
[15576] c:0 is:( move 3 , ul ; move ul - ua , 4 / ua )  decode:( move 3 , ul ; move ua - ul , 7 ) 
[15577] c:0 is:( move ua , ua / 4 ; move ua + ul , 5 )  decode:( move 5 , 9 / ua ; move 5 , 5 ) 
[15578] c:0 is:( move 4 , 0 ; move 4 , 2 ; move 2 , ul )  decode:loop 0 , 3 , move 0 - 4 , 0 - v0 
[15579] c:0 is:( move 4 , ua * ua ; move ua , ua / 4 )  decode:( move 4 , ua / 4 ; move ua , 8 ) 
[15580] c:0 is:( move ul - ua , ul ; move 3 , ua / 4 )  decode:( move ul - ua , ul ; move 3 , 8 ) 
[15581] c:0 is:( move ua - ul , 4 ; move ua , ua / 4 )  decode:( move 5 , 4 ; move ua , ua / 4 ) 
[15582] c:0 is:( move ua , 4 ; move ul - ua , ua / 4 )  decode:( move ua , 4 ; move ul - ua , 8 ) 
[15583] c:0 is:( move ul - ua , 6 ; move 4 + ua , ul )  decode:( move 5 , 9 ; move ua + 4 , ul ) 
[15584] c:0 is:( move 4 , ua / 4 ; move ua , ua * ua )  decode:( move 4 , ua / 4 ; move ua , 8 ) 
[15585] c:0 is:( move ua , 0 ; loop 0 , 3 , move 4 , 4 )  decode:0 loop 0 , 4 , move 4 , 0 - 9 0 
[15586] c:0 is:( move ua , ua / 4 ; move ua - ul , 4 )  decode:( move ua , 3 / 2 ; move 5 , 4 ) 
[15587] c:0 is:( loop 0 , 3 , move 3 , 2 ; move 2 , ul )  decode:loop 0 , 3 , move ua - 3 , 4 / v0 
[15588] c:0 is:( move ul - ua , 3 / ua ; move 4 , ul )  decode:( move 5 , 0 - 2 ; move 4 , ul ) 
[15589] c:0 is:( move 3 , ul ; move ua - ul , ua / 4 )  decode:( move 3 , ul ; move ua - ul , 8 ) 
[15590] c:0 is:( move 4 , 6 ; move ua + ul , ua * ua )  decode:( move 4 , 6 ; move ua + ul , 8 ) 
[15591] c:0 is:( move 4 - ua , 4 / ua ; move ua , ul )  decode:( move 2 , 5 ; move ua , 2 ) 
[15592] c:0 is:( move ua + ul , 4 * 4 ; move ul , ul )  decode:( move ua , 0 - 4 ; move ul , ul ) 
[15593] c:0 is:( move 4 - ua , ul ; move ua , 4 / ua )  decode:( move 2 , ul ; move ua , 7 ) 
[15594] c:0 is:( move 9 , ua * ua ; move 0 - ua , ul )  decode:( move ua , 9 ; move 9 , 0 - 4 ) 
[15595] c:0 is:( move ul - ua , 3 ; move ua , ul / 4 )  decode:( move ua , ul / move 5 , 3 ) 
[15596] c:0 is:( move ul - ua , ul / 4 ; move 2 , ul )  decode:( move 2 , 0 - 4 ; move ua , 4 ) 
[15597] c:0 is:( move ua - 4 , 5 ; move ul - ua , ul )  decode:( move 2 , 4 ; move ua - ul , 4 ) 
[15598] c:0 is:( move 2 , ul / 4 ; move ua - ul , ul )  decode:( move 2 , ul / 4 ; move 5 , ul ) 
[15599] c:0 is:( move ua + ul , ul / 6 ; move ua , 2 )  decode:0 loop 0 , 3 , move ua + v0 - 2 
[15600] c:0 is:( move 4 , 3 / ua ; move ua - ul , ul )  decode:( move 4 , 9 / ua ; move 5 , ul ) 
[15601] c:0 is:( move ua - ul , ua / 4 ; move ua , 4 )  decode:( move 5 , ua / 4 ; move ua , 4 ) 
[15602] c:0 is:( move 4 , ul ; move ua , ul - ua / 3 )  decode:( move 4 , ul ; move ua , 5 ) 
[15603] c:0 is:( move 3 , ul / 4 ; move ua , ua * ua )  decode:( move 3 , 2 / ua ; move ua , 8 ) 
[15604] c:0 is:( move ua + ul , ul / 4 ; move ua , 4 )  decode:loop 0 , 2 , move v0 - ua , 4 - 3 
[15605] c:0 is:( move ua + ul , 9 ; move ua + ul , 2 )  decode:( move 8 , 9 ; move ua + ul , 2 ) 
[15606] c:0 is:( move ua , 5 / 2 ; move ul - ua , ul )  decode:( move ua , 0 - 9 ; move 5 , 2 ) 
[15607] c:0 is:( move ua , 4 / ua ; move ua - 4 , ul )  decode:( move ua , 4 / ua ; move 3 , ul ) 
[15608] c:0 is:( move 2 , 0 ; move 2 , 4 ; move 4 , ul )  decode:( move 2 , 0 ; move ua , 2 ) 
[15609] c:0 is:( move ua - ul , 4 / ua ; move ua , 4 )  decode:( move 5 , 4 / ua ; move ua , 4 ) 
[15610] c:0 is:( move 4 , ua ; move ua - ul , ua / 4 )  decode:loop 0 , 2 , move ua - 2 , ua / 4 
[15611] c:0 is:( move 3 , 0 ; move 3 , 4 ; move 2 , ul )  decode:( move 3 , 0 ; move ul - ua , ul ) 
[15612] c:0 is:( move ul - ua , 4 / ua ; move 3 , ul )  decode:( move 3 , 8 ; move ua , 2 ) 
[15613] c:0 is:( move ua , 4 / ua ; move 4 , ua * ua )  decode:( move ua , 2 / 4 ; move 4 , 8 ) 
[15614] c:0 is:( move ua - ul , ua ; move 8 - ua , 2 )  decode:( move 5 , 0 ; move 2 , 2 ) 
[15615] c:0 is:( move 4 , ul ; move ul - ua , 3 / ua )  decode:( move 4 , ul ; move ua - ul , 9 ) 
[15616] c:0 is:( move ua , 4 ; move ua - ul , ua / 4 )  decode:( move ua , 4 ; move ua - ul , 8 ) 
[15617] c:0 is:( move ua / 4 , 2 / ua ; move ua , ul )  decode:( move 2 , 2 / 6 ; move ua , ul ) 
[15618] c:0 is:( move ua + ul , ul / 4 ; move 3 , ul )  decode:( move ua + ul , 2 ; move 3 , ul ) 
[15619] c:0 is:( move 0 , 2 ; loop 0 , 5 , move 3 , ul )  decode:loop 0 , 4 , move 0 - 4 , 3 / 4 
[15620] c:0 is:( move 5 , ua * ua ; move ua - ul , 4 )  decode:( move 5 , 8 ; move ul - ua , ul ) 
[15621] c:0 is:( move 4 , ul ; move ua - ul , 3 / ua )  decode:( move 3 , ul ; move 5 , 2 / 5 ) 
[15622] c:0 is:( move ua , ul - 9 ; move 0 - ua , ul )  decode:( move ua , 9 / 2 ; move ua , 4 ) 
[15623] c:0 is:( move 3 , 2 ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 3 , move 3 , 2 - v0 
[15624] c:0 is:( move ua , ua - ul / 4 ; move 3 , ul )  decode:( move ua , 6 ; move 3 , ul ) 
[15625] c:0 is:( move ua , 2 / 6 ; move ua , ua * ua )  decode:( move ua , 2 / 6 ; move 7 , 8 ) 
[15626] c:0 is:( move 3 , 3 ; loop 0 , 2 , move 2 , ul )  decode:loop 0 , 4 , move v0 , ul 
[15627] c:0 is:( move 4 , 4 / ua ; move ua , ua * ua )  decode:( move 4 , 3 / ua ; move ua , 8 ) 
[15628] c:0 is:( move ul - ua , ul / 2 ; move ul , 4 )  decode:( move ul , 9 ; move ua - ul , ul ) 
[15629] c:0 is:( move ua , 0 - 9 ; move ul - ua , ul )  decode:( move ua , 0 - 9 ; move 5 , 4 ) 
[15630] c:0 is:( move 3 , ua / 4 ; move ul - ua , ul )  decode:( move 3 , ua / 4 ; move ua , 4 ) 
[15631] c:0 is:( move ua - ul , ul ; move ua , 4 * 4 )  decode:( move ua , 4 ; move 5 , 4 * 4 ) 
[15632] c:0 is:( move ul - ua , 3 / 4 ; move ua , ul )  decode:( move 5 , 4 ; move ua , ua / 3 ) 
[15633] c:0 is:( move ul , ua / 4 ; move ua + 4 , ul )  decode:( move ul , ul ; move 4 + ua , ul ) 
[15634] c:0 is:( move 6 , ua * ua ; move ua + ul , 4 )  decode:( move ua , 8 ; move 7 , 4 ) 
[15635] c:0 is:( move ul - ua , 4 ; move ua , 4 / ua )  decode:( move 5 , 4 ; move ua , 5 / 2 ) 
[15636] c:0 is:( move 3 , ul ; move ul - ua , ua / 4 )  decode:( move 3 , ul ; move ul - ua , 8 ) 
[15637] c:0 is:( move ua , ul ; move 4 , ua - 4 / ua )  decode:( move ua , 0 - 9 ; move 4 , 7 ) 
[15638] c:0 is:( move 3 , ua / 4 ; move ua - ul , ul )  decode:( move 3 , ua / 4 ; move ua , ul ) 
[15639] c:0 is:( move 3 , ua - ul ; move ua , ul / 4 )  decode:( move 4 , 2 - move ua , 2 / ua ) 
[15640] c:0 is:( move 5 , ua * ua ; move 4 - ua , ul )  decode:( move ua - ul , 9 ; move 2 , 4 ) 
[15641] c:0 is:( move 4 , ua / 4 ; move ua + ul , ul )  decode:( move 4 , 4 / 4 ; move 8 , ul ) 
[15642] c:0 is:( move ul - ua , ua / 4 ; move 3 , ul )  decode:( move 3 , ul - 3 ; move ua , ul ) 
[15643] c:0 is:( move ua - ul , 6 ; move ua + ul , 4 )  decode:( move 5 , 6 ; move ua + ul , 4 ) 
[15644] c:0 is:( move ul - ua , 4 * 4 ; move ua , ul )  decode:loop 0 , 2 , move v0 - ua , 0 - 2 
[15645] c:0 is:( move ua , ua * ua ; move 4 , 4 / ua )  decode:( move ua , 8 ; move 4 , 4 / ua ) 
[15646] c:0 is:( move ua , ul / 4 ; move 3 - ua , ul )  decode:( move ua , ul / 4 ; move 3 , 4 ) 
[15647] c:0 is:( move ua , ul / 6 ; move ua + ul , 2 )  decode:( move ua , ul / 4 ; move 7 , 2 ) 
[15648] c:0 is:( move 4 , 0 ; move 2 , ul ; move 4 , 2 )  decode:( move 3 - ua , ul ; move 5 , 2 ) 
[15649] c:0 is:( move ua , 4 / 3 ; move ul - ua , ul )  decode:( move ua , 5 / 3 ; move 5 , 4 ) 
[15650] c:0 is:( move ul - ua , ul ; move ua , 5 / 2 )  decode:loop 0 , 2 , move ua - 2 , 2 / ua 
[15651] c:0 is:( move ul - ua , 4 ; move ua , ua / 4 )  decode:( move 5 , 4 ; move ua , 3 + 7 ) 
[15652] c:0 is:( move ua , ul ; move ul - ua , 4 / 3 )  decode:( move ua , ul ; move 5 , 0 - 5 ) 
[15653] c:0 is:( move ul - ua , ua / 3 ; move ua , 5 )  decode:( move ul - ua , 4 ; move ua , 5 ) 
[15654] c:0 is:( move 3 , ul / 2 ; move ua , ul / ua )  decode:( move ua , 4 / 3 ; move 3 , 6 ) 
[15655] c:0 is:( move 4 - ua , 5 ; move ua - ul , ul )  decode:( move 2 , 2 ; move ua - ul , 4 ) 
[15656] c:0 is:( move ua , 4 / ua ; move ua , ua / 3 )  decode:( move ua , 4 / ua ; move ua , 2 ) 
[15657] c:0 is:( move ua + 2 , 8 ; move ul - ua , ul )  decode:( move 6 , 8 ; move ua - ul , ul ) 
[15658] c:0 is:( move 3 - ua , 6 ; move ua - ul , ul )  decode:( move 3 , 9 ; move 5 , 0 - 4 ) 
[15659] c:0 is:( move ua + ul , ul ; move 4 , ua / 4 )  decode:( move 8 , ul ; move 4 , ua / 4 ) 
[15660] c:0 is:( move 4 , ul ; move ua + ul , ua / 4 )  decode:( move 4 , ul ; move ua + ul , 8 ) 
[15661] c:0 is:( move ua + 2 , 9 ; move ua , ua * ua )  decode:( move ua + 2 , 9 ; move ua , 8 ) 
[15662] c:0 is:( move ua , 9 ; move ua + 2 , ua * ua )  decode:( move 6 , 9 ; move ua + 2 , 8 ) 
[15663] c:0 is:( move ua , 3 / ua ; move ua , ua / 4 )  decode:loop 0 , 3 , move 4 , ua / ua / ua 
[15664] c:0 is:( move 2 , 0 ; move ul , 2 ; move 4 , 4 )  decode:loop 0 , 3 , move ua - 4 , v0 * 3 
[15665] c:0 is:( move ua , 3 ; move ul - ua , ua - 7 )  decode:( move ua , 3 ; move 5 , 0 - 9 ) 
[15666] c:0 is:( move ua , 0 ; move 4 , 3 ; move 3 , 3 )  decode:( move ua , 0 ; move 5 , 3 ) 
[15667] c:0 is:( move ul - ua , ul / 3 ; move ua , 4 )  decode:( move ul - ua , 0 ; move ua , 4 ) 
[15668] c:0 is:( move 3 , ul / 4 ; move ua + ul , ul )  decode:( move 3 , ul / 4 ; move 8 , ul ) 
[15669] c:0 is:( move ua , 2 / 5 ; move ua - ul , ul )  decode:( move ua , 9 + 4 ; move ua , ul ) 
[15670] c:0 is:( move ul - ua , ua ; move 4 , ua / 4 )  decode:( move 5 , ua / 2 ; move 4 , 8 ) 
[15671] c:0 is:( move ua / 4 , 4 ; move ua , ua * ua )  decode:( move 2 , 4 ; move ua , ua * ua ) 
[15672] c:0 is:( move ua , 5 ; move ua - ul , ua / 3 )  decode:( move 5 , 5 ; move ua , ua / 3 ) 
[15673] c:0 is:( move ul - ua , ul / 3 ; move ua , 5 )  decode:( move ua - ul , 0 ; move ua , 8 ) 
[15674] c:0 is:( move 3 , 4 ; loop 0 , 2 , move 2 , ul )  decode:( move 4 , 4 ; move 3 , 5 ) 
[15675] c:0 is:( move ua , 3 / 5 ; move ul - ua , ul )  decode:( move ua , 4 / 3 ; move 5 , 4 ) 
[15676] c:0 is:( move 3 , 3 ; move 3 , 2 ; move 2 , ul )  decode:loop 0 , 3 , move 3 , 3 + v0 
[15677] c:0 is:( move 5 , ua / 4 ; move ua , ua * ua )  decode:( move 5 , ua / 4 ; move 7 , 8 ) 
[15678] c:0 is:( move 3 , 0 ; move 3 , 4 ; move 3 , ul )  decode:0 move move move 0 move 3 + move 2 , 4 ) 
[15679] c:0 is:( move 3 , 0 ; move 4 , 4 ; move 2 , ul )  decode:( move 3 , 0 ; move ul - ua , 4 ) 
[15680] c:0 is:( move 5 , ua / 4 ; move ua + ul , ul )  decode:( move 5 , 3 / 4 ; move 9 , ul ) 
[15681] c:0 is:( move ua , ua / 6 ; move ua + ul , 4 )  decode:( move ua , ul ; move 6 , 4 ) 
[15682] c:0 is:( move ul - ua , 6 ; move 4 , ua * ua )  decode:loop 0 , 3 , move v0 - 4 , 3 / 4 
[15683] c:0 is:( move ua - ul , ul / 6 ; move ua , 2 )  decode:( move 5 , ul / 6 ; move ua , 2 ) 
[15684] c:0 is:( move ul - ua , 9 ; move ua + 2 , ul )  decode:( move 5 , 9 ; move ua + 2 , 4 ) 
[15685] c:0 is:( move 4 - ua , ul / 4 ; move ua , ul )  decode:( move ua - 4 , 0 ; move ua , 4 ) 
[15686] c:0 is:( move ua , 3 ; loop 0 , 3 , move 4 , 2 )  decode:loop 0 , 4 , move 2 + 3 , 2 
[15687] c:0 is:( move ul - ua , 4 ; move ua , 5 / ua )  decode:( move ul - ua , 4 ; move ua , 7 ) 
[15688] c:0 is:( move 4 , 0 ; move ul , 4 ; move 2 , 3 )  decode:( move 5 , 0 ; move 3 , 3 / ua ) 
[15689] c:0 is:( move 3 , 4 ; move 2 , 3 ; move ua , 2 )  decode:( move 3 , 4 ; move ua , ua * ua ) 
[15690] c:0 is:( move 3 , 0 ; move 3 , ul ; move 4 , 3 )  decode:loop 0 , 3 , move 3 , v0 * v0 
[15691] c:0 is:( move ua - ul , 9 ; move ua + ul , 2 )  decode:( move 6 , 9 ; move ua + ul , 2 ) 
[15692] c:0 is:( move 4 , 0 ; move 4 , 3 ; move 2 , ul )  decode:( move ua - 2 , 0 ; move 9 , 0 - ) 3 
[15693] c:0 is:( move ua - ul , ua / 4 ; move 4 , ul )  decode:( move 5 , 3 / 4 ; move 4 , ul ) 
[15694] c:0 is:( move 3 , 3 ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 3 , move 0 - 3 , 3 / v0 
[15695] c:0 is:( move 4 , 3 ; move 2 , ul ; move 2 , 2 )  decode:( move 5 , 3 ; move 3 , 0 - 2 ) 
[15696] c:0 is:( move ul - ua , 6 / ua ; move 2 , ul )  decode:( move ul , 2 ; move 5 , 2 ) 
[15697] c:0 is:( move ua , 2 ; loop 0 , 3 , move 4 , 3 )  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[15698] c:0 is:( move 4 , ul ; move ua / 4 , ua - ul )  decode:( move 2 , ul ; move 3 , ul ) 
[15699] c:0 is:( move 3 , 4 ; move 2 , 2 ; move 2 , ul )  decode:loop 0 , 3 , move 4 - ua , 4 / v0 
[15700] c:0 is:( move 6 , ul ; move ua + ul , ua / 3 )  decode:( move 6 , ul ; move ua + ul , ul ) 
[15701] c:0 is:( move ul - ua , 3 * 6 ; move ua , ul )  decode:loop 0 , 2 , move ua - v0 , 0 - 2 
[15702] c:0 is:( move ul - ua , 5 ; move ua , ua / 4 )  decode:( move 5 , ua / 4 ; move ua , 8 ) 
[15703] c:0 is:( move ua , 2 ; move 3 , 4 ; move 3 , 2 )  decode:( move ua , 2 ; move ua , 3 ) 
[15704] c:0 is:( move 3 , 0 ; move ul , 4 ; move 3 , 3 )  decode:loop 0 , 3 , move 3 , v0 * 7 
[15705] c:0 is:( move 4 , ul ; move ul - ua , 4 / ua )  decode:( move 4 , ul ; move ua - ul , 7 ) 
[15706] c:0 is:( move ua + ul , 9 ; move ul - ua , 2 )  decode:( move ua + ul , 9 ; move 5 , ul ) 
[15707] c:0 is:( move 4 , 0 ; move 3 , 4 ; move 2 , ul )  decode:( move 3 , 0 ; move ua - ul , 4 ) 
[15708] c:0 is:( move ua , ul / 6 ; move 2 - ua , ul )  decode:( move ua , ul / 4 ; move 4 , 4 ) 
[15709] c:0 is:( move ul - ua , ua / 4 ; move 4 , ul )  decode:( move 4 , 2 / 3 ; move 4 , ul ) 
[15710] c:0 is:( move ua + ul , ua / 6 ; move 3 , ul )  decode:( move ua , 6 / 6 ; move 3 , ul ) 
[15711] c:0 is:( move 5 , ua / 4 - ua ; move ua , ul )  decode:( move ua , 0 - 9 ; move ua , ul ) 
[15712] c:0 is:( move ua , 2 ; move 4 , 2 ; move 2 , 4 )  decode:( move ua , 2 ; move 5 , 2 ) 
[15713] c:0 is:( move ua + 2 , 9 ; move ul - ua , ul )  decode:( move ua + 2 , 9 ; move 5 , 4 ) 
[15714] c:0 is:( move 3 , ul ; move ul - ua , ul / 4 )  decode:( move 3 , 4 ; move 5 , 4 * 4 ) 
[15715] c:0 is:( move 3 , 2 ; move 2 , ul ; move 4 , 2 )  decode:( move 4 , 2 ; move 5 , ua / 3 ) 
[15716] c:0 is:( move ua + ul , ul / 4 ; move 4 , ul )  decode:( move ua + ul , 4 ; move 4 , ul ) 
[15717] c:0 is:( move 5 , ul ; move ul - ua , 3 / ua )  decode:( move 5 , ul ; move ul - ua , 7 ) 
[15718] c:0 is:( move 5 , ul / 3 ; move ua + ul , ul )  decode:( move 5 , 2 / 9 ; move ua , ul ) 
[15719] c:0 is:( move 4 , 3 ; move 2 , 2 ; move 2 , ul )  decode:loop 0 , 3 , move 3 , 3 / v0 
[15720] c:0 is:( move 4 , ua / 4 ; move ul - ua , ul )  decode:( move 4 , 9 / 4 ; move ua , 4 ) 
[15721] c:0 is:( move 2 , 2 ; move 3 , 4 ; move 2 , ul )  decode:( move 3 , 3 ; move 5 , 4 / 4 ) 
[15722] c:0 is:( move ua - 4 , ul / ua ; move 4 , ul )  decode:( move 2 , ul / ul ; move 4 , ul ) 
[15723] c:0 is:( move ua , 5 ; move ul - ua , ua / 4 )  decode:( move ua , 5 ; move 5 , 3 / 2 ) 
[15724] c:0 is:( move 3 , 3 ; move 3 , ul ; move 2 , 2 )  decode:- 0 loop 0 , 3 , move 3 , v0 0 
[15725] c:0 is:( move 4 , ul ; move ua - ul , ua / 4 )  decode:( move 4 , ul ; move 5 , ua / 4 ) 
[15726] c:0 is:( move ua , 0 ; move 6 , 2 ; move 4 , 2 )  decode:loop 0 , 3 , move ua - v0 , ua / 3 
[15727] c:0 is:( move ul - ua , 4 / ua ; move 4 , ul )  decode:( move 5 , 4 + 5 ; move 4 , ul ) 
[15728] c:0 is:( move 4 , ua / 4 ; move ua - ul , ul )  decode:( move 4 , 3 / 4 ; move 5 , ul ) 
[15729] c:0 is:( move ua - ul , 5 ; move ua , ua / 4 )  decode:( move 5 , 5 ; move ua , ua / 4 ) 
[15730] c:0 is:( move ua , 2 / 6 ; move ul - ua , ul )  decode:loop 0 , 2 , move v0 - ua , 0 - 3 
[15731] c:0 is:( move 2 , 3 ; loop 0 , 4 , move 2 , ul )  decode:loop 0 , 4 , move 4 - ua , 5 
[15732] c:0 is:( move 5 , 4 / ua ; move ua , ua * ua )  decode:( move 5 , 3 / 2 ; move ua , 8 ) 
[15733] c:0 is:( move ua , ul / 4 ; move 4 - ua , ul )  decode:( move 2 , ul / 4 ; move ua , 4 ) 
[15734] c:0 is:( move 3 , 0 ; move 2 , 4 ; move 4 , ul )  decode:( move 3 , 0 ; move ua , ua * ua ) 
[15735] c:0 is:( move 5 , ua * ua ; move ua - ul , 5 )  decode:( move 5 , ua * ua ; move 5 , 5 ) 
[15736] c:0 is:( move ua , ul / 4 ; move 4 , ua * ua )  decode:( move 4 , ul / ua ; move 5 , 8 ) 
[15737] c:0 is:loop 0 , 2 , ( move 4 , ul ; move 3 , 2 )  decode:loop 0 , 3 , move 4 , v0 + ul 
[15738] c:0 is:( move 5 , ua / 3 ; move ul - ua , ul )  decode:( move 5 , ua / 3 ; move 5 , ul ) 
[15739] c:0 is:( move ua , ul / 6 ; move ua - ul , 2 )  decode:( move ua , ul / 6 ; move 5 , 2 ) 
[15740] c:0 is:( move 3 , ul / 4 ; move ul - ua , ul )  decode:( move 3 , ul / 4 ; move 5 , 4 ) 
[15741] c:0 is:( move 3 , 2 ; move 3 , 3 ; move ua , 3 )  decode:( move 3 , 2 ; move ua , 3 ) 
[15742] c:0 is:( move 4 , ul ; move ul - ua , ua / 4 )  decode:( move 4 , ul ; move ua - ul , 8 ) 
[15743] c:0 is:( move ua - ul , ul ; move 4 , ua / 4 )  decode:( move 5 , ul ; move 4 , ua / 4 ) 
[15744] c:0 is:( move ul - ua , 2 / 6 ; move ua , ul )  decode:( move 5 , ua / 4 ; move ua , 4 ) 
[15745] c:0 is:( move 2 , ul ; loop 0 , 3 , move 4 , 2 )  decode:loop 0 , 3 , move ua - 2 , 3 / v0 
[15746] c:0 is:( move 4 , 4 / ua ; move ua - ul , ul )  decode:( move 4 , 2 / 5 ; move 5 , ul ) 
[15747] c:0 is:( loop 0 , 3 , move 3 , 3 ; move 2 , ul )  decode:0 0 loop 0 , 3 , move 3 - ua , v0 
[15748] c:0 is:( move 2 , 9 ; move ua + ul , ua * ua )  decode:( move 3 , 9 ; move ua + ul , 8 ) 
[15749] c:0 is:( move ua , 4 ; move 2 , 3 ; move 3 , 2 )  decode:( move ua , 4 ; move 4 , ua * ua ) 
[15750] c:0 is:( move ua , 2 ; loop 0 , 3 , move 3 , 4 )  decode:loop 0 , 4 , move 3 - ua , v0 + 9 
[15751] c:0 is:( move 2 , ua / 7 ; move ua + ul , ul )  decode:( move 2 , 7 ; move ua + ul , ul ) 
[15752] c:0 is:( move ua , 2 / 6 - ul ; move ua , ul )  decode:( move ua , 9 + 4 ; move ua , ul ) 
[15753] c:0 is:( move ua , 6 ; move ua + ul , ua / 4 )  decode:( move ua , 6 ; move ua , 3 / 2 ) 
[15754] c:0 is:( move 0 , ul ; loop 0 , 3 , move 4 , 4 )  decode:loop 0 , 3 , move 4 , v0 - 4 
[15755] c:0 is:( move ua , 4 / ua ; move ua , ua / 4 )  decode:( move ua , 2 / 4 ; move ua , 8 ) 
[15756] c:0 is:( move 9 , ua * ua ; move ua + ul , 2 )  decode:( move 9 , ua * ua ; move 7 , 2 ) 
[15757] c:0 is:( loop 0 , 3 , move 3 , ul ; move 3 , 2 )  decode:loop 0 , 4 , move 3 , ul - v0 
[15758] c:0 is:( move 2 - ua , 9 ; move ua , ua * ua )  decode:( move 4 , 9 ; move ua , ua * ua ) 
[15759] c:0 is:( move ul - ua , 6 ; move ua , ua / 3 )  decode:( move ul - ua , ul ; move ua , ul ) 
[15760] c:0 is:( move ua + ul , ua / 6 ; move ua , 4 )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[15761] c:0 is:( move ua , 3 ; move ul - 7 , ua - ul )  decode:( move ua , 2 ; move 7 , ua / 3 ) 
[15762] c:0 is:( move 4 , 4 / ua ; move ul - ua , ul )  decode:( move 4 , 4 / ua ; move 5 , 4 ) 
[15763] c:0 is:( move ua - ul , ul / 4 ; move 3 , ul )  decode:( move 5 , ul / 4 ; move 3 , ul ) 
[15764] c:0 is:( move ua , ua / 5 ; move ua , ua / 3 )  decode:loop 0 , 2 , move ua , v0 - 3 
[15765] c:0 is:( move ul - ua , ul / 4 ; move ua , 4 )  decode:( move 5 , 4 * 4 ; move ua , ul ) 
[15766] c:0 is:( move ua + ul , 9 ; move ua - ul , 2 )  decode:( move 4 + 3 , 9 ; move 5 , 2 ) 
[15767] c:0 is:( move ua , ua / 4 ; move ua - ul , 5 )  decode:( move ua , ua / 4 ; move 5 , 5 ) 
[15768] c:0 is:( move ul - ua , 3 / ua ; move 5 , ul )  decode:( move 5 , 0 - 9 ; move 5 , 4 ) 
[15769] c:0 is:( move ul - ua , 4 ; move ua , ul / 4 )  decode:( move ua , 4 ; move 5 , 0 - 4 ) 
[15770] c:0 is:( move ua , ul / 4 ; move ul - ua , 4 )  decode:( move ua , ul / 4 ; move 5 , ul ) 
[15771] c:0 is:( move 4 - ua , ul / ua ; move 4 , ul )  decode:( move 2 , 0 - 4 ; move 4 , ul ) 
[15772] c:0 is:( move 4 , ul ; move ua - ul , 4 / ua )  decode:( move 3 , ul ; move ua - ul , 7 ) 
[15773] c:0 is:( move 6 , 2 ; move ul - ua , ul / ua )  decode:( move ua , 0 - 2 ; move 5 , 3 ) 
[15774] c:0 is:( move 3 , ul / 4 ; move ua - ul , ul )  decode:( move 3 , ul / 4 ; move 5 , ul ) 
[15775] c:0 is:( move 4 , ul / 4 ; move ul + ua , ul )  decode:( move 3 , ul / 4 ; move 8 , ul ) 
[15776] c:0 is:( move ua , 3 ; loop 0 , 3 , move 3 , 3 )  decode:loop 0 , 4 , move 0 - 3 , 3 
[15777] c:0 is:( move 3 , 2 ; move 3 , 3 ; move 2 , ul )  decode:loop 0 , 3 , move 3 - ua , 2 - v0 
[15778] c:0 is:( move ua - 9 , ul ; move ua + ul , 2 )  decode:( move 3 , 4 ; move 2 + ua , 2 ) 
[15779] c:0 is:( move 4 , 0 ; move 3 , 2 ; move 4 , ul )  decode:( move 5 , 0 ; move 5 , ua / 3 ) 
[15780] c:0 is:( move ua + 2 , ul / 6 ; move ul , ul )  decode:( move 2 , ul / 4 ; move ul , ul ) 
[15781] c:0 is:( move 4 , ul / 4 ; move ua , ua * ua )  decode:( move 4 , ul / 4 ; move ua , 8 ) 
[15782] c:0 is:( move 5 , ul / ua ; move 3 , ua * ua )  decode:( move 5 , ul / ua ; move 3 , 8 ) 
[15783] c:0 is:loop 0 , 2 , ( move 3 , ul ; move 4 , 2 )  decode:loop 0 , 4 , move 3 - ua , v0 
[15784] c:0 is:( move ua , 3 ; move 3 , 3 ; move 3 , 2 )  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[15785] c:0 is:( move ua - ul , ul / 4 ; move ua , 4 )  decode:( move 5 , ul / 4 ; move ua , 4 ) 
[15786] c:0 is:( move ua , 8 + 3 ; move ul - ua , ul )  decode:( move ua , 9 + 2 ; move 5 , 4 ) 
[15787] c:0 is:( move ua , 9 ; move ua + ul , ua - 3 )  decode:( move ua + ul , 9 ; move ua , 3 ) 
[15788] c:0 is:( move 4 , 6 ; move ul - ua , ua * ua )  decode:( move 4 , 6 ; move ua - ul , 5 ) 
[15789] c:0 is:( move 2 , 4 ; loop 0 , 2 , move 3 , ul )  decode:loop 0 , 3 , move 3 , 4 / 3 
[15790] c:0 is:( move 4 , 8 ; move ua + ul , ua * ua )  decode:( move 4 , 8 ; move 8 , 8 ) 
[15791] c:0 is:( move 3 , ul / 6 ; move ua + ul , ul )  decode:( move 3 , ul / 4 ; move 8 , ul ) 
[15792] c:0 is:( move ua , 0 ; move 4 , 4 ; move 4 , 3 )  decode:( move ua , 0 ; move 5 , 4 + 3 ) 
[15793] c:0 is:( move 2 , 2 ; move 2 , 4 ; move 4 , ul )  decode:( move 3 , 2 ; move ul - ua , 7 ) 
[15794] c:0 is:( move ua , ua / 5 ; move 5 , ua * ua )  decode:( move 4 - ua , 3 ; move 5 , 8 ) 
[15795] c:0 is:( move ua , 0 ; move 4 , 3 ; move 4 , 4 )  decode:loop 0 , 4 , move 4 , 4 * v0 
[15796] c:0 is:( move 2 , 9 ; move ul - ua , ua * ua )  decode:( move 3 , 9 ; move 5 , 8 ) 
[15797] c:0 is:( move 5 , ul / ua ; move ul - ua , 4 )  decode:( move 5 , ul / ua ; move 5 , ul ) 
[15798] c:0 is:( move ua + ul , 9 ; move 3 , ua * ua )  decode:( move ua + ul , 9 ; move 3 , 8 ) 
[15799] c:0 is:( move 4 , 4 ; loop 0 , 2 , move 2 , ul )  decode:loop 0 , 4 , move 2 , v0 + 2 
[15800] c:0 is:( move 9 , 0 ; move 2 , 2 ; move ua , 2 )  decode:( move 9 , ul ; move ua , 0 - 4 ) 
[15801] c:0 is:( move ul - ua , 9 ; move 2 - ua , ul )  decode:( move ul - ua , 9 ; move 4 , 4 ) 
[15802] c:0 is:( move 3 , 2 ; move 4 , 2 ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[15803] c:0 is:( move ul - ua , 6 ; move ua , ua / 4 )  decode:( move 5 , 9 ; move ua , 3 + 8 ) 
[15804] c:0 is:loop 0 , 2 , ( move ul , 3 + move 4 , 2 )  decode:( move 5 , 0 - 4 ; move 5 , 9 ) 
[15805] c:0 is:( move 3 , 0 ; move 3 , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 4 - ua , 4 * v0 
[15806] c:0 is:( move 4 , 0 ; move 3 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move ua - 3 , v0 * 8 
[15807] c:0 is:( move ul - ua , ul / 4 ; move 4 , ul )  decode:( move 5 , 4 * 4 ; move 4 , 4 ) 
[15808] c:0 is:( move ua - ul , 6 ; move ua , ua / 4 )  decode:( move ul - ua , 9 ; move ua , 8 ) 
[15809] c:0 is:( move ua , ul / ua ; move ua + 2 , 9 )  decode:( move ua + 2 , 0 ; move 9 , 9 ) 
[15810] c:0 is:( move 4 , 3 ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 4 , move ua - 4 , 3 / v0 
[15811] c:0 is:( move 2 , 3 ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 3 , move 4 , 3 / v0 
[15812] c:0 is:( move ua + ul , ul / ua ; move 8 , 2 )  decode:ua move ua , ul / ua ; move 8 , 2 ) 
[15813] c:0 is:( move 4 , 2 ; move 2 , 2 ; move 4 , ul )  decode:( move 5 , 2 ; move 5 , 4 ) 
[15814] c:0 is:( move ua - ul , ul / 4 ; move 4 , ul )  decode:( move 5 , ul / 4 ; move 4 , ul ) 
[15815] c:0 is:( move 4 , ul / 4 ; move ua - ul , ul )  decode:loop 0 , 3 , move v0 + 2 , 2 - 3 
[15816] c:0 is:( move ul - ua , ul / 6 ; move 2 , ul )  decode:( move ul , 4 ; move 5 , 0 - 2 ) 
[15817] c:0 is:( move ua , ul / 6 ; move 3 , ua * ua )  decode:( move 3 , ul / ua ; move 4 , 9 ) 
[15818] c:0 is:( move ua , 3 ; move 3 , 2 ; move 3 , 4 )  decode:loop 0 , 4 , move 3 , v0 + 4 
[15819] c:0 is:( move ua , 4 ; move 2 , 3 ; move 4 , 2 )  decode:( move ul - ua , ul ; move 5 , 5 ) 
[15820] c:0 is:( move ua , ua / 6 ; move ua - ul , 4 )  decode:( move ua , 5 ; move 5 , 0 - 4 ) 
[15821] c:0 is:( move ul - ua , ul ; move 4 , ul / 4 )  decode:( move 4 , 0 - 2 ; move ua , 4 ) 
[15822] c:0 is:( move 3 - ua , 9 ; move ua , ua * ua )  decode:loop 0 , 3 , move 3 - ua , 3 / 4 
[15823] c:0 is:loop 0 , 3 , ( move 4 , ul ; move 3 , 2 )  decode:loop 0 , 4 , move ua - ul , v0 + 4 
[15824] c:0 is:( move 4 , 0 ; move 3 , ul ; move 3 , 4 )  decode:( move ua , 0 ; move 3 , 4 ) 
[15825] c:0 is:( move ua + ul , 9 ; move ua + ul , 4 )  decode:( move ua + ul , 9 ; move 7 , 4 ) 
[15826] c:0 is:( move 3 , 0 ; move 3 , ul ; move 4 , 4 )  decode:( move ua , 0 ; move 4 , 4 ) 
[15827] c:0 is:( move 3 , ul ; loop 0 , 3 , move 3 , 3 )  decode:loop 0 , 3 , move 3 , 4 * 4 
[15828] c:0 is:( move ua , 9 ; move 3 - ua , ua * ua )  decode:( move ua , 9 ; move 3 , 5 ) 
[15829] c:0 is:( move ua , 4 / 5 ; move ul - ua , ul )  decode:( move ua , 4 ; move 5 , ua / 3 ) 
[15830] c:0 is:( move ul - ua , 2 ; move ua , ua / 8 )  decode:( move ul - ua , 2 ; move ua , 7 ) 
[15831] c:0 is:( move ul - ua , 6 ; move ua , 4 / ua )  decode:( move 5 , 6 ; move ua , 9 ) 
[15832] c:0 is:( move ua , 6 ; move ul - ua , ua / 4 )  decode:( move ua , 6 ; move ua , ua / 4 ) 
[15833] c:0 is:( move ua + ul , ul / 6 ; move 3 , ul )  decode:( move ua + ul , ul ; move 3 , ul ) 
[15834] c:0 is:( move 4 , 0 ; move ul , 2 ; move 4 , 4 )  decode:( move 3 , 0 ; move ua - ul , 3 ) 
[15835] c:0 is:( move 3 , 4 ; move 2 , ul ; move 3 , 2 )  decode:( move 4 , 4 ; move 3 , 2 ) 
[15836] c:0 is:( move 5 , ua / 4 ; move ua - ul , ul )  decode:( move 5 , 3 / 4 ; move 5 , ul ) 
[15837] c:0 is:( loop 0 , 3 , move 3 , 4 ; move 2 , ul )  decode:loop 0 , 3 , move 4 , 4 / v0 
[15838] c:0 is:( move ua , ul / 4 ; move ua - ul , 5 )  decode:( move ua , ul / 4 ; move 5 , 5 ) 
[15839] c:0 is:( move ua , 3 ; move 2 , 4 ; move 4 , 2 )  decode:( move 4 , 4 ; move ua , 4 * 3 ) 
[15840] c:0 is:( move ua , ua / 3 / ua ; move 5 , ul )  decode:( move ua , 4 / ua ; move 5 , ul ) 
[15841] c:0 is:( move 2 , 0 ; move 4 , ul ; move 4 , 4 )  decode:( move ul - ua , 5 ; move 4 , 4 ) 
[15842] c:0 is:( move 4 / 3 , ul / ua ; move ua , ul )  decode:( move 2 , ul / 4 ; move ua , ul ) 
[15843] c:0 is:( move 2 , 4 ; move 3 , ul ; move 3 , 2 )  decode:loop 0 , 3 , move 3 - v0 , 4 / 3 
[15844] c:0 is:( move 3 , 2 ; move 3 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[15845] c:0 is:( move 2 , 4 ; move ul , 2 ; move 2 , 4 )  decode:loop 0 , 2 , move 3 , 4 0 - 4 
[15846] c:0 is:( move 4 , ul ; loop 0 , 3 , move 3 , 2 )  decode:loop 0 , 4 , move 3 - ua , v0 + 2 
[15847] c:0 is:( move 0 - ua , ul / 9 ; move ua , ul )  decode:( move ua , 0 - 2 ; move ua , 3 ) 
[15848] c:0 is:( move 3 - ua , 9 ; move ua + ul , ul )  decode:( move 4 , 9 ; move ua + ul , ul ) 
[15849] c:0 is:( move ua , 3 ; loop 0 , 3 , move 3 , 4 )  decode:loop 0 , 4 , move 3 - ua , 3 * v0 
[15850] c:0 is:( move ul - ua , ul / 4 ; move ua , 5 )  decode:( move 5 , 4 * 4 ; move ua , 5 ) 
[15851] c:0 is:( move ul - ua , ul ; move ua , 5 / 4 )  decode:( move 5 , 2 - 3 ; move 5 , 2 ) 
[15852] c:0 is:( move ua , 0 ; move 3 , 4 ; move 4 , 4 )  decode:loop 0 , 4 , move 3 , v0 + ua 
[15853] c:0 is:( move 5 , ul / 4 ; move ua + ul , ul )  decode:loop 0 , 3 , move ua - 2 , v0 - 3 
[15854] c:0 is:( move 4 , 0 ; move 3 , 4 ; move 3 , ul )  decode:( move 3 , 0 ; move ua , 4 ) 
[15855] c:0 is:( move ua , 9 / ua ; move ua + ul , 2 )  decode:( move ua , 3 / 2 ; move 8 , 2 ) 
[15856] c:0 is:( move 3 , 2 ; move 2 , ul ; move 3 , 4 )  decode:( move 4 , 2 ; move 3 , ua * ua ) 
[15857] c:0 is:( move 4 , 0 ; move ul , 4 ; move 4 , 2 )  decode:( move 3 , 0 ; move ul - ua , 4 ) 
[15858] c:0 is:( move ua , ua / 6 ; move 4 , ua - ul )  decode:( move 3 - ua , 0 ; move ua , ul ) 
[15859] c:0 is:( move 3 , 9 ; move ua + ul , ua * ua )  decode:( move 4 , 9 ; move ua + ul , 8 ) 
[15860] c:0 is:( move ua , 4 ; loop 0 , 3 , move 4 , 2 )  decode:loop 0 , 4 , move v0 - ua , 4 * 4 
[15861] c:0 is:( move 6 , ul ; move ua + ul , ua / 4 )  decode:( move 6 , ul ; move ua - 7 , 8 ) 
[15862] c:0 is:( move ua + ul , 3 ; move 9 , ua * ua )  decode:( move ua + ul , 3 ; move 9 , 5 ) 
[15863] c:0 is:( move ua - ul , ul / 6 ; move 2 , ul )  decode:( move 5 , ul / 4 ; move 2 , ul ) 
[15864] c:0 is:( move ua - ul , 2 ; move 9 - ua , ul )  decode:( move ua - ul , 2 ; move 3 , ul ) 
[15865] c:0 is:( move ua , ua / 6 ; move ua - 4 , ul )  decode:( move ua , 4 * 5 ; move 2 , ul ) 
[15866] c:0 is:( move ua , ul / 6 ; move ua + ul , 4 )  decode:( move ua , ul / 6 ; move 7 , 4 ) 
[15867] c:0 is:( move 3 , 0 ; move 4 , ul ; move 3 , 4 )  decode:loop 0 , 4 , move ua - 4 , v0 * 4 
[15868] c:0 is:( move 2 , 4 ; move 3 , 2 ; move 3 , ul )  decode:( move 3 , 4 ; move 5 , 2 ) 
[15869] c:0 is:( move 5 , ua / 4 ; move ul - ua , ul )  decode:( move 5 , 3 / 2 ; move 5 , ul ) 
[15870] c:0 is:( move 4 , 2 ; move 3 , 2 ; move 3 , ul )  decode:loop 0 , 3 , move 3 , 2 / v0 
[15871] c:0 is:( move 4 , 0 ; move 4 , 4 ; move 2 , ul )  decode:( move 4 , 0 ; move ua , 4 * 4 ) 
[15872] c:0 is:( move ua , 2 ; loop 0 , 3 , move 4 , 4 )  decode:loop 0 , 3 , move ua - ul , ua / 0 0 
[15873] c:0 is:( move 2 , 3 ; move 3 , 4 ; move 2 , ul )  decode:( move 3 , 3 ; move 4 , 4 / 3 ) 
[15874] c:0 is:( move 3 , 0 ; move 4 , 4 ; move 3 , ul )  decode:( move 4 , 0 ; move 5 , 4 * 5 ) 
[15875] c:0 is:( move ua , 4 ; loop 0 , 3 , move 3 , 3 )  decode:( move ua , 4 ; move 4 , 3 ) 
[15876] c:0 is:( move ul - ua , 4 / ua ; move 5 , ul )  decode:( move 5 , 5 + 2 ; move 5 , ul ) 
[15877] c:0 is:( move 9 , 3 ; move ua + ul , ua * ua )  decode:( move 9 , 3 ; move ua + ul , 5 ) 
[15878] c:0 is:( move 4 , ul / 4 ; move ul - ua , ul )  decode:( move 4 , ul / 4 ; move 5 , 4 ) 
[15879] c:0 is:( move 4 , 2 ; move 2 , ul ; move 4 , 2 )  decode:( move 5 , 2 ; move ul - ua , ul ) 
[15880] c:0 is:( move ul - ua , 9 ; move ua - ul , 2 )  decode:( move ul - ua , 9 ; move 5 , 2 ) 
[15881] c:0 is:( loop 0 , 3 , move 3 , 4 ; move ua , 3 )  decode:loop 0 , 3 , move ua - v0 , 9 
[15882] c:0 is:( move ua , ua / 6 - ua ; move 4 , ul )  decode:( move ua , 6 ; move 4 , ul ) 
[15883] c:0 is:( move ua + ul , 9 ; move 3 - ua , ul )  decode:( move 3 , 9 ; move ua , 0 - 2 ) 
[15884] c:0 is:( move 2 - ua , 9 ; move ul - ua , ul )  decode:( move 4 , ua / ua ; move 5 , ul ) 
[15885] c:0 is:( move 4 , 2 ; move 2 , 4 ; move 2 , ul )  decode:( move 3 , 2 ; move 4 , 5 + 2 ) 
[15886] c:0 is:( move ul , ua / 4 ; move ua + ul , 6 )  decode:( move ul , 0 ; move ua , 2 / ua ) 
[15887] c:0 is:( move ua , ul / 6 ; move ua - 3 , ul )  decode:( move ua , ul / 6 ; move 4 , ul ) 
[15888] c:0 is:( move 5 , 0 ; move 2 , ul ; move 3 , 4 )  decode:( move ua , 0 ; move 3 , 5 ) 
[15889] c:0 is:( move ua , 4 ; move 3 , 2 ; move 2 , 4 )  decode:( move ua , 4 ; move 4 , ua * ua ) 
[15890] c:0 is:( move ua , ua / 9 ; move ua + ul , 2 )  decode:( move ua , 7 ; move ua + ul , 2 ) 
[15891] c:0 is:( move 2 , 4 ; move 4 , 2 ; move 2 , ul )  decode:( move 3 , 4 ; move 5 , 2 ) 
[15892] c:0 is:( move 3 , 3 ; move ul , 2 ; move 4 , 2 )  decode:loop 0 , 4 , move 2 , 4 * 4 
[15893] c:0 is:( move 0 , 5 ; loop 0 , 5 , move ua , 3 )  decode:loop 0 , 3 , move 3 + 3 , 0 - 3 
[15894] c:0 is:( move 5 , 0 ; move 4 , 4 ; move 2 , ul )  decode:( move 4 , 0 ; move ua , 4 * 3 ) 
[15895] c:0 is:( move 3 , 2 ; move 2 , 4 ; move 4 , ul )  decode:( move 3 , 2 ; move ul - ua , 5 ) 
[15896] c:0 is:( move ua , ul / 6 ; move 4 , ua * ua )  decode:( move 5 , ul / ua ; move 4 , 5 ) 
[15897] c:0 is:( move 3 , 3 ; move 3 , 2 ; move 4 , ul )  decode:( move 4 , 9 ; move ua - ul , ul ) 
[15898] c:0 is:( move 4 , 3 ; move 2 , ul ; move 2 , 4 )  decode:( move ul - ua , 6 ; move 2 , 4 ) 
[15899] c:0 is:( move 3 , 2 ; move 3 , 4 ; move 3 , ul )  decode:( move 3 , 2 ; move ul - ua , ul ) 
[15900] c:0 is:( move 3 , 4 ; move 2 , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 3 - ua , 4 / v0 
[15901] c:0 is:( move 3 , 4 ; move 4 , ul ; move 2 , 2 )  decode:loop 0 , 4 , move 2 , 4 / v0 
[15902] c:0 is:( move 6 , ul ; move ua - ul , ua / 4 )  decode:( move ua , ul ; move 5 , ua / 4 ) 
[15903] c:0 is:( move 3 , 3 ; move 3 , 4 ; move 2 , ul )  decode:( move 3 , 6 ; move 4 , 0 - 4 ) 
[15904] c:0 is:( move 3 , 0 ; move ul , 4 ; move 4 , 4 )  decode:( move 4 , 0 ; move 4 , 4 ) 
[15905] c:0 is:( move ua , ul / 6 ; move ua - ul , 4 )  decode:( move ua , ul / 6 ; move 5 , 4 ) 
[15906] c:0 is:( move ul - ua , ul / 6 ; move 3 , ul )  decode:( move ul - ua , 0 ; move 3 , ul ) 
[15907] c:0 is:( move 3 , ul / 6 ; move ul - ua , ul )  decode:( move 3 , ul / 4 ; move 5 , ul ) 
[15908] c:0 is:( move 9 , ua * ua ; move 3 , ua * ua )  decode:( move 9 , ua * ua ; move 3 , 8 ) 
[15909] c:0 is:( move 4 , 4 ; loop 0 , 2 , move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , 4 / 8 
[15910] c:0 is:( move ua , ul / 8 ; move ua - ul , 2 )  decode:( move ua , ul / ua ; move 5 , 2 ) 
[15911] c:0 is:( move ua , ua / 4 ; move ua + ul , 8 )  decode:loop 0 , 3 , move 4 + v0 , 8 / 4 
[15912] c:0 is:( move ua - 9 , 4 ; move ua , ua * ua )  decode:( move 3 , 4 ; move ua , ua * ua ) 
[15913] c:0 is:( loop 0 , 2 , move 3 , ul ; move 4 , 4 )  decode:( move ua , ul ; move 4 , 4 ) 
[15914] c:0 is:( move ua , ua / 6 ; move ua , ua / 4 )  decode:( move ua , ul ; move ua , ua / 4 ) 
[15915] c:0 is:( move ua , ul - 9 ; move 3 , ua * ua )  decode:( move 3 , 0 - 9 ; move 3 , 5 ) 
[15916] c:0 is:( move ua , 4 ; move 3 , 3 ; move 4 , 2 )  decode:loop 0 , 2 , move ua - v0 , 4 / ua 
[15917] c:0 is:( move ua + ul , ul / 6 ; move 4 , ul )  decode:( move ua , ul / 4 ; move 4 , ul ) 
[15918] c:0 is:( move 4 , 3 ; move 2 , 4 ; move 2 , ul )  decode:( move 3 , 3 ; move 5 , 4 ) 
[15919] c:0 is:( move ua / 4 , ul / 4 ; move ua , ul )  decode:( move 2 , ul / 7 ; move ua , ul ) 
[15920] c:0 is:( move 4 , 2 ; move 2 , 4 ; move 3 , ul )  decode:( move 4 , 2 ; move ul - ua , ul ) 
[15921] c:0 is:( move ua , 4 / ua ; move ua + ul , 8 )  decode:( move ua , 3 / ua ; move 9 , 8 ) 
[15922] c:0 is:( loop 0 , 6 , move 2 , 2 ; move ua , 4 )  decode:( move 5 , 2 / 4 ; move ua , 9 ) 
[15923] c:0 is:( move ua , ul / 6 ; move ul - ua , 4 )  decode:( move ua , ul / ua ; move 5 , ul ) 
[15924] c:0 is:( move 9 , 3 ; move ua - ul , ua * ua )  decode:( move 9 , 3 ; move ua - ul , 8 ) 
[15925] c:0 is:( move 4 , 2 ; move 3 , 4 ; move 2 , ul )  decode:( move 4 , 2 ; move ul - ua , 4 ) 
[15926] c:0 is:( move 2 , 4 ; move 4 , 3 ; move 2 , ul )  decode:( move 4 , 5 ; move 3 , 2 - 3 ) 
[15927] c:0 is:( move 4 , 4 ; move 4 , 2 ; move ua , 2 )  decode:loop 0 , 4 , move 0 - 4 , 4 * v0 
[15928] c:0 is:( move ua , 9 ; move ua + ul , ua / 3 )  decode:( move 6 , 9 ; move ua , ua / 3 ) 
[15929] c:0 is:( move 4 , 0 ; move 3 , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 4 - ua , 4 * v0 
[15930] c:0 is:( move ua , ul / 6 ; move 4 - ua , ul )  decode:( move ua , ul / 4 ; move 2 , 4 ) 
[15931] c:0 is:( move 4 , 4 ; move 2 , 4 ; move ua , 2 )  decode:( move 5 , 4 ; move ua , 6 ) 
[15932] c:0 is:( move ua , ul / 6 ; move ua , ua / 3 )  decode:( move ua , ul / 6 ; move ua , 2 ) 
[15933] c:0 is:( move 4 , 0 ; move ul , 4 ; move 3 , 4 )  decode:( move 4 , 0 ; move 3 , ua * ua ) 
[15934] c:0 is:( move ua , 9 / 2 ; move ua , ua * ua )  decode:( move ua , 0 - 9 ; move ua , 7 ) 
[15935] c:0 is:( move 4 , 3 ; loop 0 , 5 , move ua , 2 )  decode:loop 0 , 4 , move 0 - ua , 0 - 2 
[15936] c:0 is:( move 4 , 2 ; move 3 , 3 ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 - 2 
[15937] c:0 is:( move 3 , 2 ; move 3 , ul ; move 3 , 4 )  decode:( move 3 , 2 ; move 5 , 4 ) 
[15938] c:0 is:( move ua , ul / 9 ; move ua + ul , 2 )  decode:( move ua , ul / ua ; move 8 , 2 ) 
[15939] c:0 is:( move ua , 3 ; move 3 , 3 ; move 4 , 3 )  decode:loop 0 , 3 , move 2 - ua , 3 - v0 
[15940] c:0 is:( move 3 , 4 ; move 2 , ul ; move 2 , 4 )  decode:( move 4 , 4 ; move 3 , ua * ua ) 
[15941] c:0 is:( move 2 , 4 ; move 3 , 4 ; move 2 , ul )  decode:( move 3 , ua / 4 ; move 4 , 4 ) 
[15942] c:0 is:( move 3 , ul / 6 ; move ua - ul , ul )  decode:( move 3 , ul / ul ; move 5 , ul ) 
[15943] c:0 is:( move 9 , ua * ua ; move ua + ul , 4 )  decode:( move 9 , 8 ; move ua , 4 ) 
[15944] c:0 is:( move ul - ua , 3 ; move ul - ua , 9 )  decode:( move ul - ua , 3 ; move 5 , 9 ) 
[15945] c:0 is:( move ua , 9 + 4 ; move ul - ua , ul )  decode:( move ua , 9 + 4 ; move 5 , 4 ) 
[15946] c:0 is:( move 4 , 9 + ul ; move ua , ua * ua )  decode:( move 4 , 0 - 9 ; move ua , 8 ) 
[15947] c:0 is:( move 4 , ul / 6 ; move ua + ul , ul )  decode:( move 4 , ul / ul ; move 8 , ul ) 
[15948] c:0 is:( move 4 , 4 ; move 3 , 2 ; move 2 , ul )  decode:loop 0 , 3 , move 0 - 3 , v0 + ul 
[15949] c:0 is:( move 4 , 3 ; move 3 , 2 ; move ua , 4 )  decode:( move 9 , 6 ; move ua , 3 ) 
[15950] c:0 is:( move 5 , ul / 4 ; move ul - ua , ul )  decode:loop 0 , 2 , move v0 - ua , 0 - 3 
[15951] c:0 is:( move 9 , 2 / ua ; move ua , ua * ua )  decode:( move ua , 2 / ua ; move 9 , 8 ) 
[15952] c:0 is:( move 9 , ua / 2 ; move ua , ua * ua )  decode:( move 9 , ua / 2 ; move ua , 8 ) 
[15953] c:0 is:( move 4 , 0 ; move 4 , 4 ; move 3 , ul )  decode:( move 4 , 0 ; move 7 , 4 ) 
[15954] c:0 is:( move 4 , 2 ; move 3 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 / v0 , 2 / 3 
[15955] c:0 is:( move ua , ua / 8 ; move ua + ul , 4 )  decode:loop 0 , 2 , move 0 - ua , 4 
[15956] c:0 is:( move 2 , 3 ; move 2 , ul ; move 4 , 4 )  decode:( move 4 , 4 ; move 3 , 4 ) 
[15957] c:0 is:( move ua + ul , 9 ; move 4 , ua * ua )  decode:( move ua + ul , 9 ; move 4 , 9 ) 
[15958] c:0 is:( move 4 , 0 ; move 4 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move 0 - 4 , v0 * 5 
[15959] c:0 is:( move 4 , ul / 4 - move ua + ul , ul )  decode:( move 4 , ul ; move 4 + ul , ul ) 
[15960] c:0 is:( move 3 , 4 ; move 2 , 4 ; move 2 , ul )  decode:( move 3 , 4 ; move 4 , 0 - 5 ) 
[15961] c:0 is:( move 3 , 9 ; move ul - ua , ua * ua )  decode:( move 3 , 9 ; move 5 , 4 / 3 ) 
[15962] c:0 is:( move 4 , ua / 6 ; move ua - ul , ul )  decode:( move 4 , ul ; move 5 , ul ) 
[15963] c:0 is:( move ua , 4 ; move 2 , 4 ; move 4 , 2 )  decode:( move ul - ua , ul ; move ua , 2 ) 
[15964] c:0 is:( move 3 , 2 ; move 4 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[15965] c:0 is:( move 4 , 4 ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 4 , move 3 , 4 / v0 
[15966] c:0 is:( move 3 , 3 ; move 2 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move v0 - v0 , 0 v0 
[15967] c:0 is:( move 4 , 0 ; move 3 , ul ; move 4 , 4 )  decode:loop 0 , 3 , move 4 , v0 * v0 
[15968] c:0 is:( move 4 , 2 ; loop 0 , 5 , move 2 , ul )  decode:loop 0 , 4 , move ua - 3 , 2 
[15969] c:0 is:( move 3 , 3 ; move 3 , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[15970] c:0 is:( move 4 , 9 ; move ua + ul , ua * ua )  decode:( move 4 , 9 ; move ua + ul , 8 ) 
[15971] c:0 is:( move 4 , ul / 6 ; move ua , ua * ua )  decode:( move 4 , ul / 4 ; move ua , 8 ) 
[15972] c:0 is:( move 3 , 0 ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 4 - ua , 0 - v0 
[15973] c:0 is:( move ua , 4 ; loop 0 , 3 , move 4 , 3 )  decode:loop 0 , 4 , move 4 , 0 - v0 - 3 
[15974] c:0 is:( move ua / 4 , ul / ua ; move 4 , ul )  decode:( move ul , 0 ; move 4 , ul ) 
[15975] c:0 is:( move ua , 3 ; move 3 , 3 ; move 3 , 4 )  decode:3 0 , 3 , , 3 ; move 5 , 3 * 3 
[15976] c:0 is:( move 4 , 3 ; move 3 , ul ; move 3 , 2 )  decode:loop 0 , 3 , move 3 , 3 / v0 
[15977] c:0 is:loop 0 , 2 , ( move 4 , 4 ; move 3 , ul )  decode:( move ua + ul , 7 ; move ua , 4 ) 
[15978] c:0 is:( move ua - 9 , ua ; move ua , ua / 3 )  decode:0 loop 0 , 3 , move 4 ; move v0 , ul 
[15979] c:0 is:( move ua , 9 / ua ; move ul - ua , 2 )  decode:( move ua , 3 / 2 ; move 5 , ul ) 
[15980] c:0 is:( move ua , 2 ; loop 0 , 3 , move 5 , 4 )  decode:loop 0 , 4 , move 0 - ua , 0 - 0 5 2 2 / 
[15981] c:0 is:( move ua + ul , 9 ; move ua - ul , 4 )  decode:( move ua + ul , 9 ; move 5 , 4 ) 
[15982] c:0 is:( move ua , 4 * 7 ; move ul - ua , ul )  decode:( move ua , 9 ; move ua - ul , 4 ) 
[15983] c:0 is:( move ua , ul / 4 ; move ua / 4 , ul )  decode:( move ua , ul / 4 ; move ul , ul ) 
[15984] c:0 is:( move 4 , ul ; move 3 , 4 ; move 3 , 2 )  decode:loop 0 , 3 , move 3 - ua , 4 - v0 
[15985] c:0 is:( move 9 , ul ; move ua + ul , ul - 4 )  decode:( move 9 , ul ; move ua + 2 , 3 ) 
[15986] c:0 is:( move 9 , ua * ua ; move 4 - ua , ul )  decode:( move 9 , 9 ; move 3 , 0 - 2 ) 
[15987] c:0 is:( move ua , 3 ; move 4 , 4 ; move 4 , 2 )  decode:loop 0 , 3 , move v0 + 4 , 4 * 4 
[15988] c:0 is:( move 3 , 4 ; move 2 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[15989] c:0 is:( move 4 , 3 ; move 3 , 4 ; move 2 , ul )  decode:( move 4 , 3 ; move ul - ua , 7 ) 
[15990] c:0 is:( move 3 , 3 ; move 4 , 4 ; move 2 , ul )  decode:loop 0 , 3 , move 3 , 5 - v0 
[15991] c:0 is:( move ua , ua / 9 ; move ua + ul , 4 )  decode:( move ua , 7 ; move ua + ul , 4 ) 
[15992] c:0 is:( move 4 , 2 ; move 2 , 4 ; move 4 , ul )  decode:( move 4 , 2 ; move ul - ua , 5 ) 
[15993] c:0 is:( move 4 , 4 ; move 2 , 3 ; move 3 , ul )  decode:( move 4 , 4 ; move 4 , 3 ) 
[15994] c:0 is:( move ua , ul / 9 ; move 2 - ua , ul )  decode:( move ua , ul / 3 ; move 4 , ul ) 
[15995] c:0 is:( move ul - ua , 9 ; move 4 , ua * ua )  decode:loop 0 , 2 , move ua - 2 , v0 - 8 
[15996] c:0 is:( move 2 , 4 ; move 3 , 4 ; move ua , 4 )  decode:( move 4 , 8 ; move ua , 7 + 4 ) 
[15997] c:0 is:( move 4 , ul / 6 ; move ua - ul , ul )  decode:loop 0 , 3 , move v0 - 4 , 2 - 3 
[15998] c:0 is:( move 3 , 4 ; move 2 , 4 ; move 3 , ul )  decode:( move 3 , 4 ; move 4 , 5 ) 
[15999] c:0 is:( move 2 , 4 ; move 3 , 4 ; move 3 , ul )  decode:( move 3 , 4 ; move 5 , 2 ) 
[16000] c:0 is:( move 3 , ul ; loop 0 , 4 , move 4 , 3 )  decode:move 3 3 , 4 ; move 3 - ua , 3 ) 
[16001] c:0 is:( move 3 - ua , 9 / ua ; move ua , ul )  decode:( move 3 , 9 * 4 ; move ua , 4 ) 
[16002] c:0 is:( move 3 , 3 ; move ul , 4 ; move 2 , 4 )  decode:( move 3 , 3 ; move 3 , 9 ) 
[16003] c:0 is:( move 4 , 4 ; move ul , 4 ; move 2 , 2 )  decode:( move 4 , 4 ; move 3 , 0 - 2 ) 
[16004] c:0 is:( move ua , 9 ; move ua + ul , ua / 4 )  decode:( move ua , 9 ; move 9 , ua / 4 ) 
[16005] c:0 is:( move 2 , 2 ; move 4 , 4 ; move 4 , ul )  decode:( move 3 , 6 ; move ua , 4 / 3 ) 
[16006] c:0 is:( move 3 , 2 ; move 4 , 3 ; move 4 , ul )  decode:( move ua - ul , 9 ; move 5 , 4 ) 
[16007] c:0 is:( move ua - ul , 9 ; move ua , ua / 3 )  decode:( move 5 , 9 ; move ua , ua / 3 ) 
[16008] c:0 is:( move ua , ua / 8 ; move ua - 4 , ul )  decode:( move ua , 4 ; move 2 , ul ) 
[16009] c:0 is:( move 4 , 4 ; move 2 , 3 ; move ua , 4 )  decode:( move 4 , 4 ; move ua + 2 , 3 ) 
[16010] c:0 is:( move 4 , 3 ; move 2 , 4 ; move 3 , ul )  decode:( move 4 , 4 ; move ua - ul , 4 ) 
[16011] c:0 is:( move ua , 4 ; loop 0 , 3 , move 4 , 4 )  decode:loop 0 , 4 , move ua - ul , 4 * 4 
[16012] c:0 is:( move ua , 3 ; move 4 , 3 ; move 4 , 3 )  decode:( move ua , 3 ; move 3 - ua , 3 ) 
[16013] c:0 is:( move 4 , 2 ; move 2 , ul ; move 4 , 4 )  decode:( move ua , 2 ; move 4 , 5 / 2 ) 
[16014] c:0 is:( move 3 , 2 ; move 3 , 4 ; move 4 , ul )  decode:( move 3 , 2 ; move ua , 5 / 2 ) 
[16015] c:0 is:( move 4 , 4 ; move 2 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 + 3 
[16016] c:0 is:( move 3 , 3 ; move ul , 4 ; move 4 , 2 )  decode:( move 3 , 6 ; move ua - ul , 3 ) 
[16017] c:0 is:( move 2 , 3 ; loop 0 , 5 , move 4 , ul )  decode:loop 0 , 4 , move 4 , 3 * 4 - v0 
[16018] c:0 is:( move 4 , 3 ; move ul , 2 ; move 3 , 4 )  decode:( move 4 , 3 ; move 4 , 6 ) 
[16019] c:0 is:( move ua , 9 / ua ; move ua + ul , 4 )  decode:loop 0 , 2 , move ua + v0 , 0 - 4 
[16020] c:0 is:( move 4 , 3 ; move ul , 4 ; move 3 , 2 )  decode:( move 3 , 3 ; move 4 , 6 ) 
[16021] c:0 is:( move ua , ul / 9 ; move ul - ua , 2 )  decode:( move ua , 0 ; move 5 , ul ) 
[16022] c:0 is:( move 4 , ul - 9 ; move ua , ua * ua )  decode:( move ua , 9 - move 4 , 4 / 3 ) 
[16023] c:0 is:( move 9 , ul / ua ; move 2 - ua , ul )  decode:( move 9 , ul / 4 ; move 4 , 2 ) 
[16024] c:0 is:( move 9 , ua * ua ; move ua - ul , 4 )  decode:( move 9 , ua * ua ; move 5 , 4 ) 
[16025] c:0 is:( move 3 , ua ; loop 0 , 6 , move 2 , 4 )  decode:loop 0 , 4 , move 3 , 0 - 9 
[16026] c:0 is:( move 3 , 3 ; move 3 , 4 ; move 3 , ul )  decode:( move 3 , 3 ; move 5 , 4 ) 
[16027] c:0 is:( move ul , 2 ; loop 0 , 6 , move 4 , 2 )  decode:loop 0 , 4 , move ua - 2 - v0 0 , 0 0 0 
[16028] c:0 is:( move 3 , 4 ; move 4 , 2 ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , 4 / 3 
[16029] c:0 is:( move 3 , 2 ; move 4 , 4 ; move 3 , ul )  decode:( move 3 , 2 ; move ua , 3 * 5 ) 
[16030] c:0 is:( move 3 , 3 ; move 3 , 4 ; move ua , 4 )  decode:loop 0 , 3 , move 4 , 3 / v0 
[16031] c:0 is:( move 5 , 9 ; move ua + ul , ua * ua )  decode:( move 5 , 9 ; move ua + ul , 8 ) 
[16032] c:0 is:( move 4 , ul - 9 ; move ua + ul , ul )  decode:( move 4 , ul - 9 ; move ua , ul ) 
[16033] c:0 is:( move 4 , 4 ; move 3 , 2 ; move 3 , ul )  decode:( move 5 , 4 ; move 4 , 2 ) 
[16034] c:0 is:( move ua , 4 * 9 ; move ua , ua * ua )  decode:( move ua , 9 / 2 ; move ua , 9 ) 
[16035] c:0 is:( move ul - ua , 9 ; move ul - ua , 4 )  decode:( move 0 - ua , 9 ; move 5 , 4 ) 
[16036] c:0 is:( move ua , 9 / 2 ; move ul - ua , ul )  decode:( move ua , 9 / 2 ; move 5 , 4 ) 
[16037] c:0 is:( move ua , ul / 6 ; move 5 , ua * ua )  decode:( move ul - ua , ul ; move 5 , 8 ) 
[16038] c:0 is:( move 9 , ua / 2 ; move ul - ua , ul )  decode:( move 9 , 0 ; move ua - ul , 4 ) 
[16039] c:0 is:( move 4 , 2 ; move 4 , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 4 , 2 - v0 
[16040] c:0 is:( move 4 , 9 ; move ul - ua , ua * ua )  decode:( move 4 , 9 ; move ul - ua , 8 ) 
[16041] c:0 is:( move ua , ul - 9 ; move ua - ul , 4 )  decode:( move ua , 9 / 2 ; move 5 , 4 ) 
[16042] c:0 is:( move 2 , 4 ; move 4 , 4 ; move 2 , ul )  decode:( move ua - 2 , 9 ; move 3 , 4 ) 
[16043] c:0 is:( move 4 , 4 ; move 4 , 3 ; move ua , 2 )  decode:( move ul - ua , 4 ; move ua , ul ) 
[16044] c:0 is:( move 4 , 3 ; move 3 , 4 ; move ua , 3 )  decode:loop 0 , 3 , move 3 - ua , 4 * 4 
[16045] c:0 is:( loop 0 , 6 , move 4 , 2 ; move ua , 3 )  decode:0 6 loop 0 , 4 , move 5 , 0 - 4 
[16046] c:0 is:( move 3 , 4 ; move 3 , 4 ; move 2 , ul )  decode:( move 3 , 4 ; move 5 , 4 ) 
[16047] c:0 is:( move ua , 4 + move 3 , 2 ; move 5 , 2 )  decode:( move 4 , ua / 9 ; move 9 , 4 ) 
[16048] c:0 is:( move ua , ul / 6 ; move ua , ua / 4 )  decode:( move ua , ul / 4 ; move ua , 8 ) 
[16049] c:0 is:( move 4 , ul / 6 ; move ul - ua , ul )  decode:( move 4 , ul / 6 ; move 5 , 4 ) 
[16050] c:0 is:( move 4 , 3 ; move 4 , 2 ; move ua , 4 )  decode:loop 0 , 3 , move 4 + v0 , 4 * 3 
[16051] c:0 is:( move 4 , 4 ; move 2 , 4 ; move 2 , ul )  decode:( move 4 , 4 ; move 4 , 0 - 7 ) 
[16052] c:0 is:( move 3 , 4 ; move 2 , 3 ; move 4 , ul )  decode:( move 3 , ul / 4 ; move 5 , 4 ) 
[16053] c:0 is:( move ul - ua , ul / 6 ; move 4 , ul )  decode:( move ul - ua , 0 ; move 4 , ul ) 
[16054] c:0 is:( move 3 , 4 ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 4 , move 0 - 4 , 4 * 0 4 4 / 
[16055] c:0 is:( move 4 , 2 ; move 3 , ul ; move 3 , 4 )  decode:( move ua , 2 ; move 3 , 4 ) 
[16056] c:0 is:( move 4 , 0 ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , 0 - 4 * v0 
[16057] c:0 is:( move ua , ul / 6 ; move ul - ua , 5 )  decode:( move ua , ul / 4 ; move 5 , 5 ) 
[16058] c:0 is:( move 9 , ul / ua ; move ua + ul , 4 )  decode:( move 9 , ul / 4 ; move ua , 4 ) 
[16059] c:0 is:( move 4 , 3 ; move 3 , ul ; move 3 , 4 )  decode:( move ua , 3 ; move 4 , 4 4 + v) 0 
[16060] c:0 is:( move ua , 3 ; move 3 , 4 ; move 4 , 4 )  decode:loop 0 , 4 , move 3 - ua , 3 / v0 
[16061] c:0 is:( move 3 , 3 ; move 3 , 4 ; move 4 , ul )  decode:( move 3 , 3 ; move ua , 5 / 4 ) 
[16062] c:0 is:( move ul - ua , 9 ; move ua , ua / 4 )  decode:( move 5 , 6 ; move ua , ua / 4 ) 
[16063] c:0 is:( move 4 , 3 ; move 4 , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 4 , 3 / v0 
[16064] c:0 is:( move 4 , 2 ; move 4 , 4 ; move ua , 4 )  decode:loop 0 , 3 , move ul - ua , v0 + 9 
[16065] c:0 is:( move 4 , 4 ; move 3 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , v0 + 4 
[16066] c:0 is:( move 9 , 3 / ua ; move ul - ua , ul )  decode:( move 9 , 4 / ua ; move ua , 4 ) 
[16067] c:0 is:( move 3 , 4 ; move 2 , 4 ; move 4 , ul )  decode:( move 3 , 4 ; move ua , 5 ) 
[16068] c:0 is:( move 9 , ua / 3 ; move ul - ua , ul )  decode:( move 5 , ua / 3 ; move 9 , ul ) 
[16069] c:0 is:( move ua , 4 ; move 4 , 4 ; move 4 , 2 )  decode:loop 0 , 3 , move ul - ua , 4 / v0 
[16070] c:0 is:( move 4 , 3 ; move 2 , 4 ; move 4 , ul )  decode:( move 3 , 3 ; move ua , ua * ua ) 
[16071] c:0 is:( move 9 , ua / 4 ; move ua , ua * ua )  decode:( move 9 , 3 / 2 ; move ua , 5 ) 
[16072] c:0 is:( move 3 , 4 ; move 4 , ul ; move 2 , 4 )  decode:loop 0 , 4 , move 4 - ua , v0 + 9 
[16073] c:0 is:( move 4 , ua ; loop 0 , 6 , move 3 , 3 )  decode:loop 0 , 4 , move 3 - ua , 3 
[16074] c:0 is:( loop 1 , 6 , move 4 , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 2 - ua , 0 - 4 
[16075] c:0 is:( move 4 , 2 ; move ul , 4 ; move 4 , 3 )  decode:( move 4 , 2 ; move 4 , 7 ) 
[16076] c:0 is:( move 4 , 4 ; move 4 , ul ; move 3 , 2 )  decode:loop 0 , 3 , move 3 - ua , 4 / v0 
[16077] c:0 is:( move 4 , 4 ; move 4 , 2 ; move 3 , ul )  decode:loop 0 , 4 , move 0 - 3 , v0 - 4 
[16078] c:0 is:( move ua , 4 * 9 ; move ul - ua , ul )  decode:( move ua , 9 * 9 ; move 5 , 4 ) 
[16079] c:0 is:( move ua , 4 ; move 4 , 2 ; move 4 , 4 )  decode:loop 0 , 4 , move 4 , 4 - v0 
[16080] c:0 is:( move 4 , 9 / ua ; move ua , ua * ua )  decode:( move 4 , 4 / 3 ; move ua , 8 ) 
[16081] c:0 is:( move 3 , 4 ; move 4 , 4 ; move 2 , ul )  decode:loop 0 , 3 , move 3 , 4 - v0 
[16082] c:0 is:( move 3 , 4 ; move 3 , 4 ; move 3 , ul )  decode:loop 0 , 3 , move 3 , 4 - v0 
[16083] c:0 is:( move 9 , ul ; move ua - ul , ua / 3 )  decode:( move ul - 9 , ul ; move ua , ul ) 
[16084] c:0 is:( move ua - 9 , 4 / ua ; move ua , ul )  decode:( move 3 , 4 * 5 ; move ua , 4 ) 
[16085] c:0 is:( move 3 , 4 ; move ul , 2 ; move 4 , 4 )  decode:( move 4 , 4 ; move 4 , 2 + 4 ) 
[16086] c:0 is:( move 4 , 2 ; move 3 , 4 ; move 4 , ul )  decode:( move 3 , 2 ; move 8 , 5 ) 
[16087] c:0 is:( move ua , ul / 9 ; move ua + ul , 4 )  decode:( move ua , ul ; move 7 , 0 - 4 ) 
[16088] c:0 is:( move 4 , 4 ; move 3 , 4 ; move 2 , ul )  decode:( move 3 - ua , 4 ; move ua , 4 ) 
[16089] c:0 is:( move ua - ul , 9 ; move ua , ua / 4 )  decode:( move 5 , 9 ; move ua , ua / 4 ) 
[16090] c:0 is:( move 3 , 9 / ua ; move ul - ua , ul )  decode:( move 3 , 2 / 3 ; move 5 , 4 ) 
[16091] c:0 is:( move 4 , 4 ; move 2 , ul ; move 3 , 4 )  decode:( move ua - ul , 6 ; move 3 , 4 ) 
[16092] c:0 is:( move 3 , ul ; move 3 , 4 ; move 3 , 4 )  decode:loop 0 , 3 , move 3 - ua , 4 
[16093] c:0 is:( move 4 , 3 ; move 3 , 4 ; move 3 , ul )  decode:( move 4 , 3 ; move ua , 4 ) 
[16094] c:0 is:( move 2 , 3 ; move 4 , ul ; move 4 , 4 )  decode:loop 0 , 3 , move 0 - 4 , 4 / v0 
[16095] c:0 is:( move 2 , 4 ; move 4 , 4 ; move 3 , ul )  decode:( move 3 , 4 + 3 ; move ua , 4 ) 
[16096] c:0 is:( move 4 , 3 ; move 3 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move 4 , 3 + 8 
[16097] c:0 is:( move ua , 9 ; move ul - ua , ua / 4 )  decode:( move ua , 9 ; move ua - ul , 8 ) 
[16098] c:0 is:( move 3 , 4 ; move 4 , 2 ; move 4 , ul )  decode:loop 0 , 4 , move 3 - v0 , 4 / 3 
[16099] c:0 is:( move 9 , ua / 3 ; move ul , ua * ua )  decode:( move 9 , ul ; move ul , 0 - 2 ) 
[16100] c:0 is:( move 4 , 4 ; move 2 , 4 ; move 3 , ul )  decode:( move 4 , 4 ; move 5 , ua * ua ) 
[16101] c:0 is:( move 3 , 4 ; move 3 , 3 ; move 4 , ul )  decode:( move 3 , 4 ; move 5 , 4 ) 
[16102] c:0 is:( move ua , 4 ; move 3 , 4 ; move 4 , 3 )  decode:( move ua + ul , 4 ; move 4 , 7 ) 
[16103] c:0 is:( move 4 , 3 ; move 4 , 4 ; move 2 , ul )  decode:( move 4 , 3 ; move ua , 4 ) 
[16104] c:0 is:( move 3 , 3 ; move ua , 4 ; move 4 , 4 )  decode:loop 0 , 3 , move ua - 2 , 4 / v0 
[16105] c:0 is:( move ua , 9 / ua ; move ua - ul , 4 )  decode:loop 0 , 2 , move ua - v0 , 0 - 4 
[16106] c:0 is:( move ul - ua , 9 ; move ua , ul / 3 )  decode:( move ua , 0 ; move 5 , 9 ) 
[16107] c:0 is:( move 5 , ul / 6 ; move ua - ul , ul )  decode:loop 0 , 2 , move 4 + v0 , 2 - 3 
[16108] c:0 is:( move 9 , ua * ua ; move ul - 4 , ul )  decode:( move 3 , 9 ; move ua , 0 - 2 ) 
[16109] c:0 is:( move 3 , 4 ; move 4 , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 3 - ua , 4 / v0 
[16110] c:0 is:( move 3 , 3 ; move 3 , ul ; move 4 , 4 )  decode:loop 0 , 3 , move 3 , 4 - v0 
[16111] c:0 is:( loop 0 , 5 , move 3 , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 0 - ua , 0 - v0 
[16112] c:0 is:( move 4 , 4 ; move 3 , 4 ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , 4 * v0 
[16113] c:0 is:( move 4 , 4 ; move ul , 4 ; move 4 , 2 )  decode:( move 3 , 4 ; move 5 , 6 ) 
[16114] c:0 is:( move 2 , 4 ; move 4 , 4 ; move 4 , ul )  decode:( move 3 , 4 ; move ua , 4 + 3 ) 
[16115] c:0 is:( move 9 , ul / ua ; move ua , ua / 3 )  decode:loop 0 , 2 , move ua + 2 , v0 - 3 
[16116] c:0 is:( move 3 , 3 ; move ul , 4 ; move 4 , 4 )  decode:( move 3 , 3 ; move 4 , 7 ) 
[16117] c:0 is:( move 3 , 4 ; move 3 , ul ; move 4 , 4 )  decode:( move ua , 5 ; move 4 , 5 / 3 ) 
[16118] c:0 is:( move 4 , 4 ; move 4 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , v0 - 4 
[16119] c:0 is:( move ua , 4 ; move 4 , 3 ; move 4 , 4 )  decode:loop 0 , 3 , move v0 - ua , 4 * 4 
[16120] c:0 is:( move 4 , 4 ; move 2 , 4 ; move 4 , ul )  decode:( move 4 , 4 ; move ua , 5 ) 
[16121] c:0 is:( move ua , ul / 9 ; move 4 - ua , ul )  decode:( move ua , ul / 4 ; move 2 , 4 ) 
[16122] c:0 is:( move 4 , 4 ; move 3 , 3 ; move 4 , ul )  decode:( move 3 , 4 ; move ua , 4 ) 
[16123] c:0 is:( move 4 , 2 ; move 4 , ul ; move 4 , 4 )  decode:( move ua + 2 , 9 ; move 4 , 4 ) 
[16124] c:0 is:( move 4 , 3 ; move 3 , 4 ; move 4 , ul )  decode:( move 4 , 4 ; move ua + ul , 4 ) 
[16125] c:0 is:( move 4 , 2 ; move ul , 4 ; move 4 , 4 )  decode:( move 2 - ua , 4 ; move 4 , 7 ) 
[16126] c:0 is:( move 4 , 2 ; move 4 , 4 ; move 4 , ul )  decode:( move 4 , 2 ; move 8 , 4 ) 
[16127] c:0 is:( move 3 , 3 ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[16128] c:0 is:( move 4 , 4 ; move 4 , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 0 - 4 , 2 / v0 
[16129] c:0 is:( move 9 , ua / 4 ; move ul - ua , ul )  decode:( move 9 , 9 / 4 ; move ua , 4 ) 
[16130] c:0 is:( move ua , ul / 9 ; move ua - ul , 4 )  decode:( move ua , ul ; move ua , 0 - 4 ) 
[16131] c:0 is:( move 3 , 4 ; move ul , 3 ; move 4 , 4 )  decode:( move 3 , 4 ; move 4 , v0 - 4 ) 
[16132] c:0 is:( move 9 , ul / 3 ; move ul - ua , ul )  decode:( move 9 , ul / 3 ; move ua , 4 ) 
[16133] c:0 is:( move 3 , 3 ; move 4 , ul ; move 4 , 4 )  decode:( move ua , 4 ; move 4 , 4 ) 
[16134] c:0 is:( move 3 , 4 ; move ul , 4 ; move 4 , 3 )  decode:loop 0 , 3 , move 3 - v0 , 7 
[16135] c:0 is:( move 3 , 4 ; move 4 , 4 ; move 3 , ul )  decode:( move 3 - ua , 4 ; move ua , 4 ) 
[16136] c:0 is:( move 3 , 4 ; move 3 , 4 ; move 4 , ul )  decode:loop 0 , 4 , move ua - 4 , 4 / v0 
[16137] c:0 is:( move 4 , 4 ; move 3 , ul ; move 3 , 4 )  decode:( move ua , 5 ; move 3 , 0 - 4 ) 
[16138] c:0 is:( move 4 , 9 / ua ; move ua - ul , ul )  decode:( move 4 , 9 + 4 ; move 5 , ul ) 
[16139] c:0 is:( move 4 , 4 ; move 4 , 4 ; move 2 , ul )  decode:( move 4 , 4 ; move ua - ul , 4 ) 
[16140] c:0 is:( move 4 , 3 ; move 3 , ul ; move 4 , 4 )  decode:loop 0 , 4 , move 3 , 4 * 4 / v0 
[16141] c:0 is:( move ua , 3 ; loop 4 , 2 , move 4 , 4 )  decode:loop 0 , 4 , move 3 - ua , 3 / v0 
[16142] c:0 is:( move 4 , ul ; move 4 , 4 ; move 4 , 2 )  decode:loop 0 , 3 , move 0 - 4 , 4 * 0 3 
[16143] c:0 is:( move 4 , 2 ; move 4 , ul ; move 5 , 4 )  decode:( move ua + 2 , 3 ; move 4 , 4 ) 
[16144] c:0 is:( move 3 , 4 ; move 4 , ul ; move 4 , 4 )  decode:( move 3 + 4 , 5 ; move 4 , 4 ) 
[16145] c:0 is:( move 4 , 4 ; move 3 , ul ; move 4 , 4 )  decode:( move ua + ul , 4 ; move 4 , 4 ) 
[16146] c:0 is:( move 4 , 3 ; move 4 , 4 ; move 4 , ul )  decode:( move 4 , 3 ; move ua + ul , 4 ) 
[16147] c:0 is:( move 3 , 4 ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 3 , move 3 , 4 - v0 
[16148] c:0 is:( move 4 , 4 ; move 4 , 3 ; move 4 , ul )  decode:( move 4 , ul / 4 ; move ua , 4 ) 
[16149] c:0 is:( move 4 , 4 ; move 3 , 4 ; move 4 , ul )  decode:( move 4 , 4 ; move ua , 4 ) 
[16150] c:0 is:( move 4 , 3 ; move ul , 4 ; move 4 , 4 )  decode:( move 4 , 3 ; move 4 , ua * ua ) 
[16151] c:0 is:( move 4 , 3 ; move 4 , ul ; move 4 , 4 )  decode:( move 4 + 3 , 3 ; move 4 , 4 ) 
[16152] c:0 is:( move 4 , 4 ; move 4 , 4 ; move 3 , ul )  decode:( move 4 , 4 ; move ua , 3 * 5 ) 
[16153] c:0 is:( move 4 , 4 ; move 4 , ul ; move 3 , 4 )  decode:loop 0 , 4 , move 3 , v0 * 9 
[16154] c:0 is:( move 9 , ua / 6 ; move ul - ua , ul )  decode:( move ua , 2 ; move ua , 0 - 2 ) 
[16155] c:0 is:( move 4 , 3 ; move ul , 4 ; move 5 , 4 )  decode:( move 4 , 3 ; move ua - ul , 7 ) 
[16156] c:0 is:( move 4 , 4 ; move 4 , ul ; move 4 , 4 )  decode:( move 8 , 4 ; move 4 , 4 ) 
[16157] c:0 is:( move 9 , ua * ua ; move ua + ul , 9 )  decode:( move 9 , 9 ; move ua , 9 ) 
[16158] c:0 is:( move 4 , 4 ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , 4 - v0 
[16159] c:0 is:( move ua , 9 ; move ua - 9 , ua * ua )  decode:( move ua , 9 ; move 3 , 9 + 4 ) 
[16160] c:0 is:( move 9 , ul / 6 ; move ul - ua , ul )  decode:( move 9 , ul / 4 ; move 5 , 4 ) 
[16161] c:0 is:( move ua , 4 ; move 4 , 3 ; move 4 , 8 )  decode:loop 0 , 2 , move ua , 0 - 4 - v0 
[16162] c:0 is:( move 4 , 9 ; move 3 , 4 ; move 2 , ul )  decode:( move 4 , 9 ; move ul - ua , 7 ) 
[16163] c:0 is:( move 2 , 9 ; loop 4 , 3 , move ua , 4 )  decode:loop 0 , 3 , move ua , 0 - ua / ua 
[16164] c:0 is:( move 3 , 9 ; move 3 , 4 ; move 4 , ul )  decode:( move 4 , 9 ; move ua , 4 / 3 ) 
[16165] c:0 is:( move ua , 0 ; move ua + ul , ua * ua )  decode:( move ua , 0 ; move ua + ul , 8 ) 
[16166] c:0 is:( move 9 , 4 ; move 4 , 4 ; move ua , 4 )  decode:loop 0 , 3 , move 4 + 3 , 4 
[16167] c:0 is:loop 0 , 4 , move ul + v0 , v0 * v0  decode:loop 0 , 4 , move v0 - 4 , 0 - 9 
[16168] c:0 is:( move ua + ul , 0 ; move ua , ua * ua )  decode:( move ua + ul , 0 ; move ua , 8 ) 
[16169] c:0 is:( move ul - ua , 0 ; move ua , ua * ua )  decode:( move ul - ua , 0 ; move ua , 8 ) 
[16170] c:0 is:( move ua , ua * ua ; move 0 - ua , ul )  decode:( move 0 - ua , 0 ; move ua , ul ) 
[16171] c:0 is:( move 0 - ua , ul ; move ua + ul , ul )  decode:( move 0 - ua , ul ; move ua , ul ) 
[16172] c:0 is:( move ua + ul , ul ; move 0 - ua , ul )  decode:( move ua + ul , ul ; move ua , ul ) 
[16173] c:0 is:( move ua , 0 ; move ua - ul , ua * ua )  decode:( move ua , 0 ; move ul - ua , 8 ) 
[16174] c:0 is:loop 0 , 4 , move v0 * v0 , ul - v0  decode:( move 4 , ul ; move 9 , 0 - 4 ) 
[16175] c:0 is:loop 0 , 4 , move v0 * v0 , v0 - ul  decode:( move 5 , 0 ; move 9 , 2 ) 
[16176] c:0 is:( move ul - ua , 0 ; move ua + ul , ul )  decode:( move 2 - ua , 0 ; move 8 , ul ) 
[16177] c:0 is:( move ua + ul , 0 ; move ul - ua , ul )  decode:( move ua + ul , 0 ; move 6 , ul ) 
[16178] c:0 is:( move ua - ul , 0 ; move ua , ua * ua )  decode:( move 5 , 0 ; move ua , ua * ua ) 
[16179] c:0 is:loop 0 , 5 , move v0 + ul , v0 * v0  decode:loop 0 , 3 , move ua - 2 , 0 - 8 2 
[16180] c:0 is:( move 0 - ua , ua * ua ; move ua , ul )  decode:( move ua , 6 ; move ua , 2 ) 
[16181] c:0 is:( move ua , ua * ua ; move ua + ul , 2 )  decode:( move ua , 8 ; move 7 , 2 ) 
[16182] c:0 is:( move ua + ul , ua * ua ; move ua , 2 )  decode:( move ua + ul , 8 ; move ua , 2 ) 
[16183] c:0 is:loop 0 , 5 , move ul - v0 , v0 * v0  decode:loop 0 , 4 , move v0 - 3 , 4 
[16184] c:0 is:( move ua + ul , 2 ; move ua , ua * ua )  decode:( move ua + ul , 2 ; move ua , 5 ) 
[16185] c:0 is:( move ua , 2 ; move ua + ul , ua * ua )  decode:( move ua , 2 ; move ua + ul , 5 ) 
[16186] c:0 is:( move ul - ua , 0 ; move ua - ul , ul )  decode:( move ul - ua , 0 ; move 5 , ul ) 
[16187] c:0 is:( move ua , ul ; move ua + 2 , ua * ua )  decode:( move ua , ul ; move 9 , ua * ua ) 
[16188] c:0 is:( move ul , 0 - ul ; move ua , ua * ua )  decode:( move ul , 0 ; move ua , 0 - 5 ) 
[16189] c:0 is:loop 0 , 5 , move v0 - ul , v0 * v0  decode:loop 0 , 3 , move ua - 4 , 9 
[16190] c:0 is:( move ua + ul , ul ; move 2 - ua , ul )  decode:( move ua + ul , 2 ; move 4 , ul ) 
[16191] c:0 is:( move ua , 3 ; move ua + ul , ua * ua )  decode:( move ua , 3 ; move 8 , ua * ua ) 
[16192] c:0 is:( move ua , ua * ua ; move ua - ul , 2 )  decode:( move ua , ua * 3 ; move 5 , 2 ) 
[16193] c:0 is:( move ua + 2 , ul ; move ul - ua , ul )  decode:( move ua + 2 , ul ; move 5 , ul ) 
[16194] c:0 is:( move ua , ul ; move ua + 3 , ua * ua )  decode:( move ua , 7 ; move 3 + ua , 4 ) 
[16195] c:0 is:( move ul - ua , 2 ; move ua + ul , ul )  decode:( move ul - ua , 2 ; move ua , ul ) 
[16196] c:0 is:loop 0 , 6 , move ul - v0 , v0 * v0  decode:( move ua , 9 + 3 ; move 3 , 3 ) 
[16197] c:0 is:( move 2 , ul ; move ua + ul , ua * ua )  decode:( move ua , 7 ; move 4 + 4 , 2 ) 
[16198] c:0 is:( move ua , ul ; move ua - 2 , ua * ua )  decode:( move ua , ul ; move 4 , ua * ua ) 
[16199] c:0 is:( move ua - ul , ul ; move ua + ul , 2 )  decode:( move 6 , ul ; move ua + ul , 2 ) 
[16200] c:0 is:( move ul - ua , 2 ; move ua , ua * ua )  decode:( move ul - ua , 2 ; move ua , 8 ) 
[16201] c:0 is:( move ul - ua , ua * ua ; move ua , 2 )  decode:( move ul - ua , ua ; move ua , 2 ) 
[16202] c:0 is:loop 0 , 6 , move v0 - ul , v0 * v0  decode:( move 3 , ua / 3 ; move ua , 3 ) 
[16203] c:0 is:( move ua - ul , 2 ; move ua , ua * ua )  decode:( move 5 , 2 ; move ua , ua * ua ) 
[16204] c:0 is:( move ua + ul , ul ; move ua - ul , 2 )  decode:( move ua + ul , ul ; move 5 , 2 ) 
[16205] c:0 is:( move ua + ul , 2 ; move ua - ul , ul )  decode:( move ua + ul , 2 ; move 5 , ul ) 
[16206] c:0 is:( move ul , ua * ua ; move ua + ul , 2 )  decode:( move ul , ul ; move ua + ul , 2 ) 
[16207] c:0 is:( move 2 - ua , ul ; move ua , ua * ua )  decode:( move 0 - 4 , ul ; move ua , 8 ) 
[16208] c:0 is:loop 0 , 2 , move ul - ua , 4 + v0 + 3  decode:( move 5 , 4 ; move 5 , ua * ua ) 
[16209] c:0 is:( move ua , 2 ; move ua - ul , ua * ua )  decode:( move ua , 2 ; move ul - ua , 5 ) 
[16210] c:0 is:( move ua , 0 ; move 2 , 2 ; move ua , 2 )  decode:loop 0 , 4 , move v0 + 2 , 4 * 4 
[16211] c:0 is:( move ua , ua * ua ; move 2 - ua , ul )  decode:( move ua , ua * ua ; move 4 , ul ) 
[16212] c:0 is:( move ua , 3 ; move ua , ul + ua * ua )  decode:( move ua , 9 ; move ua , 9 ) 
[16213] c:0 is:( move ua - ul , ua * ua ; move ua , 2 )  decode:( move 5 , 8 ; move ua , 2 ) 
[16214] c:0 is:( move 2 - ua , ua * ua ; move ua , ul )  decode:( move ul - ua , 8 ; move ua , ul ) 
[16215] c:0 is:( move 2 - ua , ul ; move ua + ul , ul )  decode:( move 4 , ul ; move ua + ul , ul ) 
[16216] c:0 is:( move ua + ul , 3 ; move ua , ua * ua )  decode:( move ua + ul , 3 ; move ua , 5 ) 
[16217] c:0 is:( move ua , ul ; move 2 - ua , ua * ua )  decode:( move ua , ul ; move 4 , 4 / 3 ) 
[16218] c:0 is:( move ua + ul , ua * ua ; move 2 , ul )  decode:( move ua , 8 ; move 4 - ua , ul ) 
[16219] c:0 is:( move 2 , ua * ua ; move ua + ul , ul )  decode:( move 2 , ua * ua ; move 7 , ul ) 
[16220] c:0 is:( move ua + ul , 2 ; move ul - ua , ul )  decode:( move 7 , 2 ; move ua - 2 , ul ) 
[16221] c:0 is:( move ua - ul , ua * ua ; move 2 , ul )  decode:( move 2 , 6 ; move ua - ul , ul ) 
[16222] c:0 is:( move 3 - ua , ul ; move ua + ul , ul )  decode:( move 3 , ul ; move ua + ul , ul ) 
[16223] c:0 is:( move 3 , ul ; move ua + ul , ua * ua )  decode:( move 3 , ul ; move ua + ul , 8 ) 
[16224] c:0 is:loop 0 , 7 , move v0 - ul , v0 * v0  decode:loop 0 , 3 , move ua - ul , v0 / 2 
[16225] c:0 is:( move ua + 3 , ul ; move ul - ua , ul )  decode:( move ua + 3 , ul ; move 5 , ul ) 
[16226] c:0 is:( move ua , ua * ua ; move 3 - ua , ul )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[16227] c:0 is:( move ua , 4 ; move ua + ul , ua * ua )  decode:( move ua , 4 ; move ua + ul , 8 ) 
[16228] c:0 is:( move ua , 0 ; move 2 , 3 ; move ua , 2 )  decode:( move ua , 0 ; move 7 , 2 ) 
[16229] c:0 is:( move ua - ul , 3 ; move ua , ua * ua )  decode:( move 5 , 3 ; move ua , ua * ua ) 
[16230] c:0 is:( move ua , ua * ua ; move ua + ul , 4 )  decode:( move ua , 8 ; move ua + ul , 4 ) 
[16231] c:0 is:( move ul , ul ; move ua + 3 , ua * ua )  decode:( move ul , ul ; move 4 + 4 , 5 ) 
[16232] c:0 is:( move ua + ul , 2 / ua ; move ua , ul )  decode:( move ua , 2 / ua ; move ua , ul ) 
[16233] c:0 is:( move ua + ul , 3 ; move ul - ua , ul )  decode:( move ua + ul , 3 ; move 5 , ul ) 
[16234] c:0 is:( move ua , ul ; move 3 - ua , ua * ua )  decode:( move ua , ul ; move 3 - ua , 5 ) 
[16235] c:0 is:loop 0 , 7 , move ul - v0 , v0 * v0  decode:( move ul - ua , 0 ; move ua , 5 ) 
[16236] c:0 is:( move ua + ul , ul ; move ua + ul , 4 )  decode:( move ua + ul , ul ; move 6 , 4 ) 
[16237] c:0 is:( move ul - ua , 3 ; move ua + ul , ul )  decode:( move 5 , 3 ; move ua + ul , ul ) 
[16238] c:0 is:( move ul - ua , 2 ; move ua - ul , ul )  decode:( move ul - ua , 2 ; move 5 , ul ) 
[16239] c:0 is:( move ul , ua * ua ; move ul - ua , 2 )  decode:( move ul , 9 ; move ua - 2 , 5 ) 
[16240] c:0 is:( move 2 - ua , ul ; move ul - ua , ul )  decode:( move 0 - 4 , ul ; move 5 , ul ) 
[16241] c:0 is:( move ua + ul , ua * ua ; move ua , 4 )  decode:( move ua + ul , 8 ; move ua , 4 ) 
[16242] c:0 is:( move ua , 0 ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 3 , move ua + ul , 2 
[16243] c:0 is:( move 3 , ua * ua ; move ua + ul , ul )  decode:( move 3 , ua * ua ; move 7 , ul ) 
[16244] c:0 is:( move ua , 3 ; move ua - ul , ua * ua )  decode:( move ua , 3 ; move 5 , ua * ua ) 
[16245] c:0 is:( move 2 - ua , ul ; move ua - ul , ul )  decode:( move 0 - 4 , ul ; move 5 , ul ) 
[16246] c:0 is:( move ua , ul ; move ua , 4 + ua * ua )  decode:loop 0 , 2 , move ua - ul , ua / ua 
[16247] c:0 is:( move ua + ul , ua * ua ; move 3 , ul )  decode:( move ua + ul , 8 ; move 3 , ul ) 
[16248] c:0 is:( move 3 , ua * ua ; move ua , ua * ua )  decode:( move 3 , 8 ; move ua , ua * ua ) 
[16249] c:0 is:( move 3 - ua , ul ; move ua , ua * ua )  decode:( move 3 , ul - 3 ; move ua , 7 ) 
[16250] c:0 is:( move ua , ua * ua ; move 3 , ua * ua )  decode:( move ua , ua * ua ; move 3 , 8 ) 
[16251] c:0 is:( move ua , 0 ; move 3 , 2 ; move ua , 2 )  decode:( move ua + ul , 0 ; move ua , ul ) 
[16252] c:0 is:( move 3 - ua , ua * ua ; move ua , ul )  decode:( move 3 , 8 ; move ua , ua / 3 ) 
[16253] c:0 is:( move ua - ul , ul ; move 2 - ua , ul )  decode:( move 5 , ul ; move 4 , ua / 3 ) 
[16254] c:0 is:( move ua - ul , 2 ; move ul - ua , ul )  decode:( move ua - ul , 2 ; move 5 , ul ) 
[16255] c:0 is:( move ua , 0 ; loop 0 , 2 , move 2 , ul )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[16256] c:0 is:( move ua , 0 ; move ua , 3 ; move 2 , 2 )  decode:loop 0 , 3 , move v0 - ua , 3 
[16257] c:0 is:( move ua - ul , 3 ; move ul - ua , ul )  decode:( move ul - ua , 0 ; move 5 , ul ) 
[16258] c:0 is:( move 3 - ua , ul ; move ul - ua , ul )  decode:( move 3 , 0 - 2 ; move 5 , ul ) 
[16259] c:0 is:( move 4 , ul ; move ua , ul + ua * ua )  decode:( move 4 , ul ; move ua , 9 ) 
[16260] c:0 is:( move ul , 3 ; move ul - ua , ua * ua )  decode:( move ul , ua * ua ; move 5 , 5 ) 
[16261] c:0 is:( move ua , 3 / ua ; move ua , ua * ua )  decode:( move ua , 3 + 9 ; move ua , 8 ) 
[16262] c:0 is:( move ua + 4 , ul ; move ul - ua , ul )  decode:( move ua + 4 , ul ; move 5 , ul ) 
[16263] c:0 is:( move ul - ua , 4 ; move ua , ua * ua )  decode:( move 5 , 4 ; move ua , 4 + 4 ) 
[16264] c:0 is:( move ua , ua * ua ; move 4 , ua * ua )  decode:( move ua , 8 ; move 4 , ua * ua ) 
[16265] c:0 is:( move ua , 0 ; loop 0 , 3 , move ua , 3 )  decode:loop 0 , 3 , move 3 3 + 3 , 3 
[16266] c:0 is:( move ua , 0 ; move ul , 2 ; move 3 , 2 )  decode:( move 3 , ul ; move ua , 0 - 4 ) 
[16267] c:0 is:( move ua , 0 ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua + ul , 2 
[16268] c:0 is:( move ua + ul , 4 ; move ul - ua , ul )  decode:( move ua + ul , 4 ; move 5 , ul ) 
[16269] c:0 is:( move ul - ua , ua * ua ; move ua , 4 )  decode:( move ul - ua , ul ; move ua , 4 ) 
[16270] c:0 is:( move ua , 0 ; move 2 , 2 - move ua , 2 )  decode:( move ua , 0 ; move 5 , 0 - 4 ) 
[16271] c:0 is:( move ul - ua , 4 ; move ua + ul , ul )  decode:( move ul - ua , 4 ; move 8 , ul ) 
[16272] c:0 is:( move ua + ul , ua * ua ; move 4 , ul )  decode:( move ua + ul , 8 ; move 4 , ul ) 
[16273] c:0 is:( move ua + ul , ul ; move 4 , ua * ua )  decode:( move ua + ul , ul ; move 4 , 8 ) 
[16274] c:0 is:( move ua - ul , ua * ua ; move ua , 4 )  decode:( move ua - ul , 8 ; move ua , 4 ) 
[16275] c:0 is:( move ul - ua , 4 ; move ua , ua * ua )  decode:( move 5 , 4 ; move ua , 4 + 4 ) 
[16276] c:0 is:( move ua , 0 ; loop 0 , 2 , move ua , 4 )  decode:loop 0 , 3 , move ua , 3 * 0 - v0 
[16277] c:0 is:( move ua , 0 ; move 3 , 2 ; move ua , 3 )  decode:loop 0 , 4 , move 3 - ua , v0 +  
[16278] c:0 is:( move ua , ul ; move ua , 4 - ua * ua )  decode:( move ua , ul ; move ua , 0 - 4 ) 
[16279] c:0 is:( move 4 , ul ; move ua + ul , ua * ua )  decode:( move 4 , ul ; move ua + ul , 8 ) 
[16280] c:0 is:( move ua + ul , ul ; move ua , ua / 3 )  decode:( move ua , 0 ; move 7 , ua / 3 ) 
[16281] c:0 is:( move 4 , ua * ua ; move ua , ua * ua )  decode:( move 4 , 8 ; move ua , ua * ua ) 
[16282] c:0 is:( move ul - ua , 3 ; move ua - ul , ul )  decode:( move 5 , ul - 3 ; move 5 , ul ) 
[16283] c:0 is:( move 3 , ul ; move ul - ua , ua * ua )  decode:( move 3 , ul ; move ul - ua , 5 ) 
[16284] c:0 is:( move ua , 0 ; move 3 , 3 ; move ua , 2 )  decode:( move ua , 0 ; move ua + ul , 2 ) 
[16285] c:0 is:( move 4 - ua , ul ; move ua , ua * ua )  decode:( move - 2 , ul move ul - ua , 5 ) 
[16286] c:0 is:( move 4 , ua * ua ; move ua + ul , ul )  decode:( move 4 , ua * ua ; move 8 , ul ) 
[16287] c:0 is:( move ul - ua , ul / ua ; move ua , 2 )  decode:( move ul - ua , ul ; move ua , 2 ) 
[16288] c:0 is:( move ua , ua * ua ; move 2 , ul / ua )  decode:( move 2 , 2 ; move ua , ul / ua ) 
[16289] c:0 is:( move ua , ua / 3 ; move ua , ua * ua )  decode:( move ua , ua / 3 ; move ua , 5 ) 
[16290] c:0 is:( move ua , ua * ua ; move ua - ul , 4 )  decode:( move ua , 8 ; move 5 , 4 ) 
[16291] c:0 is:( move ua , 5 ; move ua + ul , ua * ua )  decode:( move ua , 5 ; move ua + ul , 8 ) 
[16292] c:0 is:( move ua + ul , 5 ; move ua , ua * ua )  decode:( move ua + ul , 5 ; move ua , 8 ) 
[16293] c:0 is:( move 2 , 0 ; move ua , ul ; move 3 , 2 )  decode:( move 4 , ul ; move ua , 0 - 2 ) 
[16294] c:0 is:( move ua , 4 ; move ul - ua , ua * ua )  decode:( move ua , 4 ; move 5 , 8 ) 
[16295] c:0 is:( move ul - ua , ua * ua ; move 3 , ul )  decode:( move 3 , 6 ; move ua - ul , ul ) 
[16296] c:0 is:( move ua , 0 ; move 2 , 3 ; move 2 , ul )  decode:( move ua , 0 ; move 4 , 4 * 4 ) 
[16297] c:0 is:( move 3 , ua * ua ; move ua - ul , ul )  decode:( move 3 , ua * ua ; move 5 , ul ) 
[16298] c:0 is:( move ua , 0 ; move 2 , 2 ; move 3 , ul )  decode:( move ua + ul , 0 ; move 5 , 4 ) 
[16299] c:0 is:( move ua , ua * ua ; move ul - ua , 4 )  decode:( move ua , ua * ua ; move 5 , ul ) 
[16300] c:0 is:( move ul - ua , 3 ; move ul - ua , ul )  decode:( move 5 , 4 ; move 5 , 2 - 3 ) 
[16301] c:0 is:( move ul , ul / ua ; move ua + 2 , ul )  decode:( move ul , ul ; move 2 + ua , ul ) 
[16302] c:0 is:( move ua - ul , 3 ; move ua - ul , ul )  decode:( move 5 , 3 ; move 5 , ul ) 
[16303] c:0 is:( move ul - ua , ul ; move 3 - ua , ul )  decode:( move ul - ua , ul ; move 3 , ul ) 
[16304] c:0 is:( move ua , ul ; move ua + ul , ua / 3 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[16305] c:0 is:( move ua , 2 ; move 2 , 2 ; move ua , 2 )  decode:loop 0 , 4 , move v0 + 2 , 2 
[16306] c:0 is:( move 5 - ua , ul ; move ua + ul , ul )  decode:( move ua , 0 - 2 ; move ul , ul ) 
[16307] c:0 is:( move ul - ua , 5 ; move ua + ul , ul )  decode:( move ua , 6 ; move ul + ua , ul ) 
[16308] c:0 is:( move ua - ul , ul ; move 4 , ua * ua )  decode:( move 5 , ul ; move 4 , ua * ua ) 
[16309] c:0 is:( move ua , 0 ; move 3 , 3 ; move 2 , ul )  decode:( move ua , 0 ; move 4 , 0 - 3 ) 
[16310] c:0 is:( move ua , ul ; move ul - ua , ua / 3 )  decode:( move 5 , ul ; move ua , 2 - 3 ) 
[16311] c:0 is:( move 2 , 0 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 2 , v0 - 6 
[16312] c:0 is:( move ua , 0 ; move 2 , 3 ; move 3 , ul )  decode:( move ul - ua , 0 ; move 5 , 6 ) 
[16313] c:0 is:( move ul - ua , ul ; move ul - ua , 4 )  decode:( move ul - ua , ul ; move 5 , 4 ) 
[16314] c:0 is:( move 0 , ul ; loop 0 , 3 , move ua , 3 )  decode:( move ua , 4 / ua ; move ua , 3 ) 
[16315] c:0 is:( move 5 , ua * ua ; move ua + ul , ul )  decode:( move 5 , ua * ua ; move ua , ul ) 
[16316] c:0 is:( move 3 , 0 ; move ua , 2 ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , 2 * 3 
[16317] c:0 is:( move ua , 2 ; move 3 , 2 ; move ua , 2 )  decode:( move ua , 9 ; move ua , 2 / 3 ) 
[16318] c:0 is:( move ua , 0 ; loop 0 , 2 , move ul , 4 )  decode:( move ua , 0 ; move 3 - ua , ul ) 
[16319] c:0 is:( move 3 , ul / ua ; move ua , ua * ua )  decode:( move 3 , ul / ua ; move ua , 8 ) 
[16320] c:0 is:( move 4 , ul ; move ul - ua , ua * ua )  decode:( move 4 , ul ; move 5 , 5 ) 
[16321] c:0 is:( move ua , 2 ; move 2 , 2 ; move ua , 3 )  decode:( move ua + ul , 2 ; move 5 , 5 ) 
[16322] c:0 is:( move 2 , 0 ; move 2 , 4 ; move ua , ul )  decode:( move 2 , 0 ; move 8 , ua * ua ) 
[16323] c:0 is:( move ua , 6 ; move ua + ul , ua * ua )  decode:( move ua , 6 ; move ua + ul , 5 ) 
[16324] c:0 is:( move ua , ua * ua ; move ua - ul , 5 )  decode:loop 0 , 3 , move v0 - ua , 5 
[16325] c:0 is:( move ua - ul , ua * ua ; move 4 , ul )  decode:( move ul - ua , 5 ; move 4 , ul ) 
[16326] c:0 is:( move ua - ul , 4 ; move ul - ua , ul )  decode:( move 5 , 4 ; move ul - ua , ul ) 
[16327] c:0 is:( move ua / 4 , ua ; move ua + ul , ul )  decode:( move ul , 0 ; move 8 , ul ) 
[16328] c:0 is:( move 0 , ul ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 3 , move 2 , v0 - 4 
[16329] c:0 is:( move ua , ua / 4 ; move ua , ua * ua )  decode:( move ua , ua / 4 ; move ua , 8 ) 
[16330] c:0 is:( move ua / 4 , ua ; move ua , ua - ul )  decode:( move ul , 0 ; move ua , 2 - 3 ) 
[16331] c:0 is:( move ua , 0 ; loop 0 , 3 , move ua , 4 )  decode:0 loop 0 , 4 , move ua , 0 - 3 0 0 
[16332] c:0 is:( move ul - ua , 5 ; move ua , ua * ua )  decode:( move 5 , ua * ua ; move ua , 5 ) 
[16333] c:0 is:( move 4 , ua * ua ; move ua - ul , ul )  decode:( move 4 , ua * ua ; move 5 , ul ) 
[16334] c:0 is:( move ua , ua / 3 ; move ul - ua , ul )  decode:( move ua , ua / 3 ; move 5 , ul ) 
[16335] c:0 is:( move 4 , 0 ; move 2 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 , v0 
[16336] c:0 is:( move 5 , ua * ua ; move ua , ua * ua )  decode:( move 5 , ua * ua ; move ua , 8 ) 
[16337] c:0 is:( move ua , 0 ; move 4 , 2 ; move 2 , ul )  decode:( move 6 , 0 ; move ua - ul , ul ) 
[16338] c:0 is:( move 4 , ua * ua ; move ul - ua , ul )  decode:( move 4 , 9 ; move ua - ul , ul ) 
[16339] c:0 is:( move ul - ua , ul ; move 4 , ua * ua )  decode:( move ul - ua , ul ; move 4 , 8 ) 
[16340] c:0 is:( move ua , 0 ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 4 , move ua - 3 , v0 * 3 
[16341] c:0 is:( move 3 , 0 ; move ul , 2 ; move ua , 3 )  decode:( move 4 , 2 ; move 5 , 5 / 4 ) 
[16342] c:0 is:( move 2 , 0 ; move ul , 4 ; move ua , 2 )  decode:( move 2 , 4 ; move ua + ul , 4 ) 
[16343] c:0 is:( move 2 , 0 ; move 2 , ul ; move ua , 4 )  decode:( move 4 , 2 ; move ua , 0 - 4 ) 
[16344] c:0 is:loop 0 , 2 , ( move ua , 2 ; move 2 , ul )  decode:( move 8 , 2 ; move ua , 4 ) 
[16345] c:0 is:( move ul - ua , ul ; move ua + ul , 5 )  decode:( move ul - ua , ul ; move 8 , 5 ) 
[16346] c:0 is:( move ua , 4 / ua ; move ua , ua * ua )  decode:( move ua , 4 / ua ; move ua , 8 ) 
[16347] c:0 is:( move ua , 2 ; loop 0 , 2 , move 2 , ul )  decode:( move ua , 2 ; move 3 , 2 ) 
[16348] c:0 is:( move ua , 0 ; move ul , 4 ; move 2 , 2 )  decode:( move ua , 9 ; move 3 , 4 / ua ) 
[16349] c:0 is:( move ua , 2 ; move 2 , 3 ; move ua , 2 )  decode:( move ua , 2 ; move ua + ul , 5 ) 
[16350] c:0 is:( move ul - ua , ua * ua ; move 4 , ul )  decode:( move 4 , 6 ; move 5 , 2 ) 
[16351] c:0 is:( move ua - ul , 3 / ua ; move ua , ul )  decode:( move 5 , ua / 4 ; move ua , ul ) 
[16352] c:0 is:( move ua , 0 ; loop 0 , 2 , move 4 , ul )  decode:( move ua + 2 , 0 ; move 7 , 5 ) 
[16353] c:0 is:( loop 0 , 4 , move 2 , ul ; move ua , 0 )  decode:( move 4 , 3 ; move 9 , 2 ) 
[16354] c:0 is:( move 4 + ul , ua * ua ; move ul , ul )  decode:( move ul , ul ; move 5 , ul ) 
[16355] c:0 is:( move ul - ua , 3 / ua ; move ua , ul )  decode:( move 5 , 0 - 9 ; move ua , 4 ) 
[16356] c:0 is:( move ua , 0 ; move 2 , 4 ; move 2 , ul )  decode:( move ua , 0 ; move 4 , 5 ) 
[16357] c:0 is:( move ua - ul , ua * ua ; move ua , 5 )  decode:( move 5 , ua * ua ; move ua , 5 ) 
[16358] c:0 is:( move ua , ua * ua ; move ua , ua / 4 )  decode:( move ua , 8 ; move ua , ua / 4 ) 
[16359] c:0 is:( move ua , 0 ; move 3 , 2 ; move 3 , ul )  decode:loop 0 , 3 , move 4 , 0 - v0 
[16360] c:0 is:loop 0 , ul , loop 1 , 5 , move 3 - ua , 2  decode:0 0 loop 0 , 4 , move 4 , 4 - v0 
[16361] c:0 is:( move ua , ul - ua * ua ; move 4 , ul )  decode:( move ua , 0 - 2 ; move 4 , ul ) 
[16362] c:0 is:( move ua , 0 ; loop 0 , 4 , move ua , 4 )  decode:loop 0 , 4 , move 3 + 3 , 0 - 4 
[16363] c:0 is:( move 3 , 0 ; move ul , 2 ; move ua , 4 )  decode:( move 3 , ul ; move ua , 4 / ua ) 
[16364] c:0 is:( move 3 , 0 ; move 2 , ul ; move ua , 4 )  decode:( move ua , 0 ; move 4 , 4 ) 
[16365] c:0 is:( move ua , ua / 4 - ua ; move ul , ul )  decode:( move 2 , 9 + 4 ; move ua , ul ) 
[16366] c:0 is:( move ua , 0 ; move 3 , ul ; move 2 , 4 )  decode:( move ua + 2 , 0 ; move 3 , 4 ) 
[16367] c:0 is:( move 3 , 0 ; move 2 , ul ; move 3 , ul )  decode:( move 4 , 0 ; move 4 , 4 / 3 ) 
[16368] c:0 is:( move 4 , 0 ; move 2 , ul ; move ua , 3 )  decode:( move ua , 0 ; move 5 , 4 * 4 ) 
[16369] c:0 is:( move ua , 0 ; move 2 , 3 ; move 4 , ul )  decode:( move ua , 0 ; move 4 , 4 * 4 ) 
[16370] c:0 is:( move 3 , 0 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 3 , v0 / v0 
[16371] c:0 is:( move ua , ul / 4 ; move ua + ul , ul )  decode:( move ua , ul / 4 ; move ua , ul ) 
[16372] c:0 is:( move ua , 0 ; move 3 , 3 ; move 3 , ul )  decode:( move 2 - ua , 0 ; move 5 , ul ) 
[16373] c:0 is:loop 0 , 3 , ( move ul , 0 ; move 3 , ul )  decode:loop 0 , 4 , move 3 , ul 
[16374] c:0 is:( move ul - ua , ul ; move ul - ua , 5 )  decode:( move ul - ua , ul ; move 5 , 5 ) 
[16375] c:0 is:( move ua , 0 ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 4 , move 4 , 2 / v0 
[16376] c:0 is:( move 0 , ul ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 3 , move 3 , 2 - v0 
[16377] c:0 is:( move ul - ua , ul ; move ua , 4 / ua )  decode:( move ul - ua , ul ; move ua , 7 ) 
[16378] c:0 is:( move ua , 0 ; move ul , 4 ; move 3 , 2 )  decode:( move ua , 0 ; move 4 , 4 + 2 ) 
[16379] c:0 is:( move 3 , 0 ; move 4 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 , v0 + 5 
[16380] c:0 is:( move 3 , 2 ; move 2 , 2 ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , ul ) 
[16381] c:0 is:( move ua , 0 ; move 4 , 3 ; move 2 , ul )  decode:loop 0 , 3 , move 0 - 4 , 0 - v0 
[16382] c:0 is:( move ul - ua , ul ; move ua , ul / 3 )  decode:( move ua , 0 - 2 ; move 5 , 4 ) 
[16383] c:0 is:( move ua + ul , ul ; move ua / 4 , ul )  decode:( move ua , ul ; move ul , ul / 4 ) 
[16384] c:0 is:( move ul - ua , 6 ; move ua + ul , ul )  decode:( move 5 , 9 ; move ua + ul , ul ) 
[16385] c:0 is:( move ua - ul , ua / 4 ; move ua , ul )  decode:( move 6 , 3 / 2 ; move ua , ul ) 
[16386] c:0 is:( move 3 , 0 ; move 3 , ul ; move ua , 3 )  decode:( move ua , 0 ; move 5 , 3 ) 
[16387] c:0 is:( move ul , ua / 4 ; move ua + ul , ul )  decode:( move ul , 4 ; move ua + ul , ul ) 
[16388] c:0 is:( move ua , 6 ; move ua - ul , ua * ua )  decode:( move ua , 6 ; move 5 , ua * ua ) 
[16389] c:0 is:( move 3 , 0 ; move ul , 4 ; move ua , 2 )  decode:( move 3 , 9 ; move ua , 5 ) 
[16390] c:0 is:( move ua , 3 ; move 2 , 2 ; move ua , 3 )  decode:( move ua + ul , 3 ; move 5 , 2 ) 
[16391] c:0 is:( move ul , ua / 3 ; move ul - ua , ul )  decode:( move ul , 3 ; move 5 , 0 - 4 ) 
[16392] c:0 is:( move ua , ul / 4 ; move ua , ua * ua )  decode:( move ua , ul / 4 ; move ua , 8 ) 
[16393] c:0 is:( move ua , 2 ; move 2 , 2 ; move 3 , ul )  decode:( move ua , 2 ; move 3 , ua / 3 ) 
[16394] c:0 is:( move 2 , 2 ; move 3 , 2 ; move ua , ul )  decode:( move 3 , 4 ; move ua + 2 , 4 ) 
[16395] c:0 is:( move ua , 2 ; loop 0 , 3 , move ua , 3 )  decode:loop 0 , 4 , move ua , 0 - 3 
[16396] c:0 is:( move ua , ul ; move ul - ua , ua / 4 )  decode:( move ua , 0 - 2 ; move 5 , 8 ) 
[16397] c:0 is:( move ua , 0 ; move 2 , ul ; move 3 , 4 )  decode:( move ua + ul , 0 ; move 3 , 5 ) 
[16398] c:0 is:( move 3 , 0 ; move ua , 2 ; move 4 , ul )  decode:( move 7 , 2 ; move ua , 2 ) 
[16399] c:0 is:( move ul - ua , 4 / ua ; move ua , ul )  decode:( move 5 , 9 + 5 ; move ua , ul ) 
[16400] c:0 is:( move 3 , 0 ; move ua , ul ; move 4 , 2 )  decode:( move ua , ul ; move 7 , 2 ) 
[16401] c:0 is:( move ua , 0 ; move ua , 4 ; move 4 , 2 )  decode:loop 0 , 3 , move 4 + v0 , 4 * 4 
[16402] c:0 is:( move ua - ul , 6 ; move ua , ua * ua )  decode:( move 5 , 6 ; move ua , 8 ) 
[16403] c:0 is:( move 2 , 0 ; move ul , ul ; move 4 , 2 )  decode:( move 3 , ul ; move 4 , 0 - 4 ) 
[16404] c:0 is:( move 2 , 2 ; move 2 , ul ; move ua , 3 )  decode:loop 0 , 2 , move 2 - ua , 3 
[16405] c:0 is:( move ul , 2 ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 3 , move ua , 4 + 4 / v0 
[16406] c:0 is:( move ul , ul ; move ua + ul , ua / 4 )  decode:( move ul , ul ; move ua + ul , 8 ) 
[16407] c:0 is:( move 3 , 2 ; move ua , 2 ; move 2 , ul )  decode:( move 3 , 2 ; move ua , 2 ) 
[16408] c:0 is:( move 3 , ul / ua ; move ua - ul , ul )  decode:( move 3 , ul / ul ; move 5 , ul ) 
[16409] c:0 is:( move ua , 3 ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 4 , move ua , 3 - v0 
[16410] c:0 is:( move ua , 0 ; move 2 , 4 ; move ua , 4 )  decode:( move ua , 0 ; move ua , ua * ua ) 
[16411] c:0 is:( move ua , ua / 4 ; move ul - ua , ul )  decode:( move ua , 3 / 2 ; move 5 , 4 ) 
[16412] c:0 is:( move ua , 0 ; move 2 , ul ; move 4 , 3 )  decode:( move ua + ul , 0 ; move 3 , 4 ) 
[16413] c:0 is:( move ua , 4 ; move 2 , 2 ; move ua , 2 )  decode:loop 0 , 4 , move 3 - ua , v0 + 8 
[16414] c:0 is:( move ul - ua , 5 ; move ul - ua , ul )  decode:( move 5 , ua * ua ; move 5 , ul ) 
[16415] c:0 is:( move 6 , ul ; move ua + ul , ua * ua )  decode:( move ua , ul ; move 8 , ua * ua ) 
[16416] c:0 is:( move ua - ul , 5 ; move ul - ua , ul )  decode:( move ul - ua , 5 ; move 5 , ul ) 
[16417] c:0 is:( move 4 , 0 ; move ul , 2 ; move 2 , ul )  decode:( move 4 , 0 ; move 3 , 4 ) 
[16418] c:0 is:( move 3 , 2 ; move 2 , ul ; move ua , 2 )  decode:( move 4 , 2 ; move ua , 2 ) 
[16419] c:0 is:( move 4 , 0 ; move ul , 2 ; move ua , 3 )  decode:( move 5 , 2 ; move 5 , 0 - 4 ) 
[16420] c:0 is:( move ua , 3 ; move 3 , 2 ; move ua , 2 )  decode:loop 0 , 4 , move 2 - ua , 4 / v0 
[16421] c:0 is:( move 5 , ua * ua ; move ul - ua , ul )  decode:( move 5 , 8 ; move ul - ua , ul ) 
[16422] c:0 is:( move 2 , 0 ; move ul , 4 ; move 2 , ul )  decode:( move 2 , 2 ; move 3 , 2 ) 
[16423] c:0 is:( move ul - ua , ul / ua ; move ua , 4 )  decode:loop 0 , 2 , move ua - v0 , ua / ua 
[16424] c:0 is:( move ua , 3 ; move 2 , 3 ; move ua , 2 )  decode:( move 5 , 5 ; move ua , 0 - 2 ) 
[16425] c:0 is:( move ul / 3 , ul ; move ua , ua * ua )  decode:move ua , 3 * 3 
[16426] c:0 is:( move ul - ua , 6 ; move ua , ua * ua )  decode:( move 5 , 9 ; move ua , 4 + 4 ) 
[16427] c:0 is:( move ua , 0 ; move 2 , 4 ; move 3 , ul )  decode:( move 5 , ul / move ua - ul , 4 ) 
[16428] c:0 is:( move ua , 0 ; move 3 , 3 ; move ua , 4 )  decode:( move 9 , 4 / 3 ; move ua , 4 ) 
[16429] c:0 is:( move ua , 3 ; move 2 , ul ; move 2 , 2 )  decode:( move ua + ul , 3 ; move 2 , 4 ) 
[16430] c:0 is:( move ua , 3 ; loop 0 , 2 , move 2 , ul )  decode:( move 4 + 3 , 3 ; move 3 , 2 ) 
[16431] c:0 is:( move ua , 6 ; move ul - ua , ua * ua )  decode:( move 6 , 6 ; move ua - ul , 5 ) 
[16432] c:0 is:( move 2 , 0 ; move 2 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 / v0 , 2 / 3 
[16433] c:0 is:( move 5 , ul ; move ul - ua , ua * ua )  decode:( move 5 , ul ; move 5 , 4 / 3 ) 
[16434] c:0 is:( move ua + ul , 6 ; move ul - ua , ul )  decode:( move ua + ul , 6 ; move 5 , ul ) 
[16435] c:0 is:( move ul - ua , ul ; move 5 , ua * ua )  decode:( move ul - ua , ul ; move 5 , 8 ) 
[16436] c:0 is:( move 2 , 0 ; move 3 , ul ; move ua , 4 )  decode:( move 5 , 2 ; move ua , 0 - 4 ) 
[16437] c:0 is:( move ul - ua , ul ; move ua , ua / 4 )  decode:( move 5 , 4 ; move ua , ua / 4 ) 
[16438] c:0 is:( move 3 , 0 ; move 2 , 4 ; move ua , ul )  decode:( move 3 , 0 ; move 8 , ua * ua ) 
[16439] c:0 is:( move 0 , ul ; loop 0 , 3 , move ua , 4 )  decode:loop 0 , 3 , move v0 - ua , 4 
[16440] c:0 is:( move ua , 0 ; move 3 , 4 ; move 2 , ul )  decode:( move ul - ua , 0 ; move ua , 7 ) 
[16441] c:0 is:( move ua , 0 ; move 4 , 3 ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 3 
[16442] c:0 is:( move ua , 0 ; move ul , 2 ; move 4 , 3 )  decode:( move ua , 0 ; move 3 , 5 ) 
[16443] c:0 is:( move ul - ua , ua / 4 ; move ua , ul )  decode:( move ul - ua , 9 ; move ua , ul ) 
[16444] c:0 is:( move 4 , 2 ; move ua , 2 ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[16445] c:0 is:( loop 0 , 2 , move ua , 2 ; move 4 , ul )  decode:loop 0 , 3 , move ua - v0 , 2 / 3 
[16446] c:0 is:( move 3 , 0 ; move ul , ul ; move 3 , 3 )  decode:( move 3 , ul ; move 3 , 0 - 4 ) 
[16447] c:0 is:( move ua , 6 / ua ; move ua , ua * ua )  decode:( move ua , ul ; move 7 , 8 ) 
[16448] c:0 is:( move ua , ul ; move 2 , 2 ; move 2 , 4 )  decode:( move ua , ul ; move 3 , 2 / 4 ) 
[16449] c:0 is:( move ua , 0 ; move 3 , ul ; move 3 , 4 )  decode:( move ua + ul , 0 ; move 4 , 8 ) 
[16450] c:0 is:( move 3 , 0 ; move ul , ul ; move 2 , 4 )  decode:( move 4 , 2 ; move 3 , 2 ) 
[16451] c:0 is:( loop 0 , 5 , move ul , ul ; move 2 , 0 )  decode:loop 0 , 4 , move v0 , v0 - 8 
[16452] c:0 is:( move ua , 0 ; move 4 , 4 ; move 2 , ul )  decode:( move ua , 0 ; move ua , 7 * 3 ) 
[16453] c:0 is:( move 4 , 2 ; move 2 , 2 ; move ua , ul )  decode:( move 4 , 2 ; move ua + ul , 4 ) 
[16454] c:0 is:( move ua + ul , 8 ; move ua , ua * ua )  decode:( move ua + ul , 8 ; move ua , 8 ) 
[16455] c:0 is:( move ul , 2 ; move 3 , 2 ; move 2 , ul )  decode:( move 3 , 4 ; move 2 , 4 ) 
[16456] c:0 is:( move ua , 2 ; move 2 , ul ; move 2 , 4 )  decode:( move ua + ul , 2 ; move 3 , 9 ) 
[16457] c:0 is:( move ua , 0 ; move ul , 4 ; move 3 , 3 )  decode:( move ua , 0 ; move 3 , 4 - 7 ) 
[16458] c:0 is:( move ua , 3 ; loop 0 , 2 , move 3 , ul )  decode:( move 0 - ua , 3 ; move 4 , 2 ) 
[16459] c:0 is:( move 4 , 0 ; move 2 , 4 ; move ua , ul )  decode:( move 4 , 2 ; move 8 , ua * ua ) 
[16460] c:0 is:( move ua , 0 ; loop 0 , 4 , move 4 , ul )  decode:loop 0 , 4 , move 4 , v0 - 3 
[16461] c:0 is:( move 2 , 0 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , v0 - v0 
[16462] c:0 is:( move 3 , 2 ; move 3 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 2 / v0 
[16463] c:0 is:( move ua , 2 ; move 2 , 4 ; move 2 , ul )  decode:( move ua , 2 ; move 3 , 5 + 4 ) 
[16464] c:0 is:( move ua , 3 ; move 3 , 3 ; move ua , 2 )  decode:( move 5 , 4 ; move ua + ul , 7 ) 
[16465] c:0 is:( move 3 , ul ; move 2 , 3 ; move ua , 2 )  decode:( move 3 , ul ; move ua , ua * ua ) 
[16466] c:0 is:( move 3 , 0 ; move 4 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 3 , v0 / v0 
[16467] c:0 is:( move ua , 3 ; move 3 , 2 ; move 2 , ul )  decode:( move ua , 3 ; move 4 , 4 ) 
[16468] c:0 is:( move 2 , 2 ; move ul , 2 ; move 3 , ul )  decode:( move ul , 2 ; move 4 , 4 ) 
[16469] c:0 is:( move ua , 0 ; move 4 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 5 , 0 - v0 
[16470] c:0 is:( move 2 , 2 ; move ul , 2 ; move ua , 4 )  decode:( move 2 , 9 + 2 ; move ua , 4 ) 
[16471] c:0 is:( move ua , 3 ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 4 , move 3 , 3 - v0 
[16472] c:0 is:( move ua , 0 ; move 2 , 4 ; move 4 , ul )  decode:( move 5 , 0 ; move 7 , ua * ua ) 
[16473] c:0 is:( move 3 , ul ; move 2 , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 2 , ul - v0 
[16474] c:0 is:loop 0 , 2 , ( move ua , ul ; move 4 , 2 )  decode:loop 0 , 4 , move 0 - 4 , v0 + ul 
[16475] c:0 is:( move 3 , ul ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 4 , move ua , 3 + 3 / v0 
[16476] c:0 is:( move 3 , 0 ; move 3 , 4 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 4 * v0 
[16477] c:0 is:( move ua , 3 ; move 3 , 2 ; move ua , 3 )  decode:( move ua + ul , 3 ; move 5 , 7 ) 
[16478] c:0 is:( move 3 , 0 ; move 2 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , v0 * v0 
[16479] c:0 is:( move ua , ul ; move 2 , 4 ; move 2 , 2 )  decode:( move 6 , ul ; move 3 , 6 + 2 ) 
[16480] c:0 is:loop 0 , 2 , ( move ul , 3 ; move 2 , ul )  decode:( move 2 , ul ; move 3 , 4 ) 
[16481] c:0 is:( move ua , 0 ; move 3 , 3 ; move 4 , ul )  decode:loop 0 , 3 , move 2 - ua , v0 * 4 
[16482] c:0 is:( move ua , ul / 4 ; move ul - ua , ul )  decode:( move ua , ul / 4 ; move 5 , 4 ) 
[16483] c:0 is:( move ua , 2 ; move 2 , 3 ; move 3 , ul )  decode:( move 5 , 2 ; move ua - ul , 3 ) 
[16484] c:0 is:( move 4 , 0 ; move 2 , ul ; move 3 , ul )  decode:( move 4 , 0 ; move 4 , 5 ) 
[16485] c:0 is:( loop 0 , 6 , move ua , 2 ; move ul , 0 )  decode:loop 0 , 4 , move 0 - ua , 0 - 8 
[16486] c:0 is:( move ua , ul ; loop 0 , 3 , move 3 , 2 )  decode:( move ua , ua / 4 ; move ua , 4 ) 
[16487] c:0 is:( move ua , 0 ; move ul , 3 ; move 3 , 4 )  decode:( move ua , 0 ; move 3 , 7 ) 
[16488] c:0 is:( move ua + ul , ul / 4 ; move ul , ul )  decode:( move ul , ul ; move ua , ul / 4 ) 
[16489] c:0 is:( move 4 , ul ; move 2 , 2 ; move ua , 2 )  decode:( move 3 - ua , 5 ; move ua , 7 ) 
[16490] c:0 is:( move ua , 0 ; move 3 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move 4 , 3 * v0 
[16491] c:0 is:( move 2 , ul ; move 2 , ul ; move 3 , 2 )  decode:loop 0 , 3 , move 2 , ul / v0 
[16492] c:0 is:( move ua , 0 ; move 4 , 3 ; move 3 , ul )  decode:loop 0 , 3 , move 2 - ua , 3 0 * 3 
[16493] c:0 is:( move ua , 0 ; move 4 , 4 ; move ua , 3 )  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[16494] c:0 is:( move 3 , 2 ; move 2 , ul ; move ua , 3 )  decode:( move 5 , 2 ; move ua , 4 - 3 ) 
[16495] c:0 is:( move 3 , 2 ; move 2 , ul ; move 2 , ul )  decode:( move 3 , 2 ; move 3 , 5 ) 
[16496] c:0 is:( move ua , ul / 4 ; move ua - ul , ul )  decode:( move ua , 2 / 4 ; move 5 , ul ) 
[16497] c:0 is:( move 3 , ul ; move 2 , ul ; move 2 , 2 )  decode:loop 0 , 3 , move 2 , 2 / v0 
[16498] c:0 is:( move 4 , 0 ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua - 2 , v0 
[16499] c:0 is:( move ua , 2 ; move 4 , 3 ; move ua , 2 )  decode:( move ua , 2 ; move ua + ul , ul ) 
[16500] c:0 is:( move ua , 2 ; move 3 , 3 ; move 2 , ul )  decode:( move ua , ua / 2 ; move 5 , 3 ) 
[16501] c:0 is:( move ua , ul ; move ul - ua , ua / 5 )  decode:( move ua , 0 - 4 ; move 5 , 2 ) 
[16502] c:0 is:( move ua , 4 ; move 2 , 2 ; move ua , 3 )  decode:( move 4 + 3 , 4 ; move 5 , 5 ) 
[16503] c:0 is:( move ua , 2 ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , 2 - 3 
[16504] c:0 is:( move ul , 2 ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 3 , move 4 - ua , v0 * 5 
[16505] c:0 is:( move ua , 2 ; loop 0 , 4 , move 2 , ul )  decode:( move ua , 2 ; move ua , 2 ) 
[16506] c:0 is:( move ua , 0 ; move 2 , ul ; move 4 , 4 )  decode:loop 0 , 4 , move 3 , v0 * ua 
[16507] c:0 is:( move ua , ul / ua ; move ua - ul , 5 )  decode:( move 5 , 2 ; move ua , 4 / 3 ) 
[16508] c:0 is:( move ua , ul / ua ; move ul , ul / 2 )  decode:move ua , 4 / ua 
[16509] c:0 is:( move 2 , 2 ; move ul , 4 ; move ua , 2 )  decode:( move 2 , 2 ; move ua , 5 ) 
[16510] c:0 is:( move 3 , 0 ; move ul , 4 ; move 2 , ul )  decode:( move 3 , 0 ; move 3 , 5 ) 
[16511] c:0 is:( move 2 , 2 ; move 2 , ul ; move ua , 4 )  decode:( move 2 - ua , ul ; move 5 , 7 ) 
[16512] c:0 is:( move ua , 2 ; loop 0 , 4 , move ua , 3 )  decode:loop 0 , 4 , move ua , 0 - 3 
[16513] c:0 is:( move 3 , 0 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 3 , move ua 0 - 4 , 4 * 4 
[16514] c:0 is:( move ua , 0 ; move 3 , 4 ; move 3 , ul )  decode:( move ua , 0 ; move 7 , 4 ) 
[16515] c:0 is:( loop 0 , 3 , move 3 , 2 ; move ua , ul )  decode:loop 0 , 3 , move ul - ua , v0 + 4 
[16516] c:0 is:( move 3 , 0 ; move 3 , ul ; move ua , 4 )  decode:( move ua , ua / ua ; move 4 , 4 ) 
[16517] c:0 is:loop 0 , 2 , ( move 2 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , ul 
[16518] c:0 is:( move 2 , 4 ; move ua , 2 ; move 2 , ul )  decode:( move 3 , 4 ; move ua + ul , 2 ) 
[16519] c:0 is:( move ua , 0 ; move 3 , ul ; move 4 , 3 )  decode:loop 0 , 4 , move 3 , v0 - 3 
[16520] c:0 is:( move 3 , 2 ; move ul , 3 ; move ua , 2 )  decode:( move 3 , 2 ; move ua , ua * ua ) 
[16521] c:0 is:( move ua , 3 ; move 2 , 2 ; move 3 , ul )  decode:( move ua , 3 ; move 4 , ua / 3 ) 
[16522] c:0 is:( move ua , 0 ; move 4 , 3 ; move ua , 4 )  decode:loop 0 , 4 , move 4 , 4 * v0 
[16523] c:0 is:( move ul - ua , ul ; move ua , ul / 4 )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[16524] c:0 is:( move ua , 0 ; loop 0 , 6 , move 2 , ul )  decode:loop 0 , 4 , move 4 , 4 * v0 
[16525] c:0 is:( move ua , 3 ; loop 0 , 2 , move ua , 4 )  decode:loop 0 , 4 , move v0 - ua , 4 
[16526] c:0 is:( move 2 , 3 ; move ua , ul ; move 3 , 2 )  decode:( move 3 , 3 ; move ua , 2 ) 
[16527] c:0 is:( move ua , 2 ; loop 0 , 3 , move ua , 4 )  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[16528] c:0 is:( move 2 , 0 ; move ul , 4 ; move 3 , ul )  decode:( move 2 , 0 ; move 4 , ua * ua ) 
[16529] c:0 is:( move 4 , 0 ; move 2 , ul ; move ua , 4 )  decode:( move ua , 0 ; move ul - ua , 7 ) 
[16530] c:0 is:( move 3 , 2 ; move ua , 2 ; move ua , 4 )  decode:( move ua + 2 , 4 ; move ua , 4 ) 
[16531] c:0 is:( loop 0 , 6 , move ul , 2 ; move ua , 0 )  decode:( move 2 , 9 ; move ua + ul , 2 ) 
[16532] c:0 is:( move ua , 4 ; loop 0 , 2 , move 2 , ul )  decode:( move ua , 4 ; move 3 , 5 ) 
[16533] c:0 is:( move ua , 4 ; move 2 , 3 ; move ua , 2 )  decode:( move ul - ua , 4 ; move 8 , 5 ) 
[16534] c:0 is:( move 4 , 2 ; move ua , 2 ; move 2 , ul )  decode:( move 4 , 2 ; move ua + ul , 2 ) 
[16535] c:0 is:loop 0 , 2 , ( move ua , 3 ; move ua , 4 )  decode:loop 0 , 4 , move 0 - ua , 0 - 0 4 0 
[16536] c:0 is:( loop 1 , 5 , move ua , 2 ; move ul , 0 )  decode:loop 0 , 4 , move ua + ul , ua / 3 
[16537] c:0 is:( move ua , 3 ; move 3 , ul ; move 2 , 2 )  decode:( move 4 + 3 , 3 ; move 3 , 4 ) 
[16538] c:0 is:loop 0 , 2 , ( move ua , 2 ; move 4 , ul )  decode:loop 0 , 4 , move 4 + v0 , 2 
[16539] c:0 is:( move 2 , 2 ; move 2 , 4 ; move ua , ul )  decode:( move 3 , 5 ; move 8 , 2 ) 
[16540] c:0 is:( move ul - ua , ul / 4 ; move ua , ul )  decode:( move 5 , 4 * 4 ; move ua , 4 ) 
[16541] c:0 is:loop 0 , 2 , ( move 3 , ul ; move ul , 3 )  decode:( move 3 , ul ; move 4 , 4 ) 
[16542] c:0 is:( move 3 , ul ; move ul , 3 ; move 2 , 2 )  decode:( move 3 , ul ; move 3 , 2 ) 
[16543] c:0 is:( move ua , 3 ; move 3 , ul ; move 3 , 2 )  decode:( move 4 + 3 , 3 ; move 4 , 2 ) 
[16544] c:0 is:( move 3 , 2 ; move 3 , ul ; move 2 , ul )  decode:( move 4 , 2 ; move 3 , ul ) 
[16545] c:0 is:( move ua , 2 ; move 2 , ul ; move 3 , 4 )  decode:( move ua + ul , 2 ; move 3 , 4 ) 
[16546] c:0 is:( move 4 , 0 ; move ua , 4 ; move 3 , ul )  decode:loop 0 , 4 , move 3 , ua / v0 / 2 
[16547] c:0 is:( move ua , 3 ; move ul , 2 ; move 4 , 2 )  decode:( move ua , 3 ; move 5 , 9 ) 
[16548] c:0 is:( move 4 , 0 ; move 2 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 * ul 
[16549] c:0 is:( move 2 , ul ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 4 , move 3 , ul 
[16550] c:0 is:( move 5 , 0 ; move 2 , ul ; move 3 , ul )  decode:loop 0 , 4 , move ua - 4 , v0 / ul 
[16551] c:0 is:( move 3 , 0 ; move ul , ul ; move 4 , 3 )  decode:( move 4 , 0 ; move 3 , 4 ) 
[16552] c:0 is:( move ua , ul ; loop 0 , 3 , move 3 , 3 )  decode:( move ua , ul ; move 5 , 3 ) 
[16553] c:0 is:( move ua , 3 ; move 3 , 3 ; move 2 , ul )  decode:loop 0 , 2 , move ua - v0 , 0 - 3 
[16554] c:0 is:( move 4 , 4 ; move ua , 2 ; move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , ua / 3 
[16555] c:0 is:( move 3 , 0 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , v0 - 9 
[16556] c:0 is:( move ua , 0 ; move ul , 4 ; move 3 , 4 )  decode:( move ua , 0 ; move 3 , 8 ) 
[16557] c:0 is:( move ua , 9 ; move ua + ul , ua * ua )  decode:( move ua , 9 ; move ua + ul , 8 ) 
[16558] c:0 is:( move ul , 0 ; move 3 , ul ; move 3 , 4 )  decode:loop 0 , 3 , move 4 - ua , 4 
[16559] c:0 is:( move 4 , 0 ; move ua , ul ; move 3 , 4 )  decode:( move 4 , 0 ; move ua - 4 , 4 ) 
[16560] c:0 is:( move ua , 2 ; move 3 , 3 ; move ua , 4 )  decode:( move 5 , 2 ; move ua + ul , 7 ) 
[16561] c:0 is:( move ua + ul , 9 ; move ua , ua * ua )  decode:( move ua + ul , 9 ; move ua , 8 ) 
[16562] c:0 is:( move 4 , 3 ; move 2 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 , 3 / v0 
[16563] c:0 is:( move 4 , 2 ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua - 2 , 2 
[16564] c:0 is:( move ua , 2 ; move ua , 2 ; move 4 , 4 )  decode:loop 0 , 3 , move 4 + v0 , 2 
[16565] c:0 is:loop 0 , 4 , move 4 / v0 - 3 , ua * ua  decode:loop 0 , 4 , move v0 * 2 , ua / 4 
[16566] c:0 is:( move 4 , 0 ; move 3 , 4 ; move ua , ul )  decode:( move 4 , 0 ; move 3 + ua , 4 ) 
[16567] c:0 is:( move ua , ua / 6 ; move ul - ua , ul )  decode:( move ua , 2 ; move 5 , 0 - 4 ) 
[16568] c:0 is:( move ua , ul ; move 3 , 2 ; move 2 , 4 )  decode:( move ua , ul ; move 4 , 4 ) 
[16569] c:0 is:( move ua , 2 ; move 3 , 4 ; move 2 , ul )  decode:( move ua , 2 ; move 2 - ua , 7 ) 
[16570] c:0 is:( move 4 , 0 ; move 3 , ul ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , ua / 4 
[16571] c:0 is:( move 4 , 0 ; move ul , ul ; move 3 , 3 )  decode:( move ua - 3 , 0 ; move 3 , 4 ) 
[16572] c:0 is:( move ua , 0 ; move 4 , 3 ; move 4 , ul )  decode:loop 0 , 3 , move ua - 2 , v0 * 4 
[16573] c:0 is:loop 0 , 3 , move 4 / ul + v0 , ua / 3  decode:( move 4 , 0 - 3 ; move 3 , 4 ) 
[16574] c:0 is:( loop 0 , 5 , move 2 , 2 ; move ua , ul )  decode:( move 3 - ua , 4 + v0 , 7 ) 
[16575] c:0 is:( move 3 , 2 ; move 2 , ul ; move 3 , ul )  decode:( move 4 , 2 ; move 4 , 5 ) 
[16576] c:0 is:( move 3 , 0 ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 - 9 
[16577] c:0 is:( move 3 , 3 ; move ua , 2 ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , 4 
[16578] c:0 is:( move 4 , 2 ; move 3 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 - ua , 2 / v0 
[16579] c:0 is:( move 4 , 2 ; move 2 , ul ; move ua , 3 )  decode:( move ua , 2 ; move ul - ua , 3 ) 
[16580] c:0 is:( move ua , 3 ; move 2 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , 3 + 4 / v0 
[16581] c:0 is:( move 2 , 3 ; move ua , 4 ; move ua , 3 )  decode:loop 0 , 4 , move 0 - 4 , 4 * 4 
[16582] c:0 is:( move 0 , ul ; loop 0 , 4 , move 4 , ul )  decode:loop 0 , 3 , move 4 , 3 / 3 
[16583] c:0 is:( move 2 , 3 ; move ua , ul ; move 4 , 2 )  decode:( move ua , 4 ; move 5 , 2 ) 
[16584] c:0 is:( move 3 , 2 ; move 2 , ul ; move ua , 4 )  decode:( move 5 , 2 ; move ul - ua , 5 ) 
[16585] c:0 is:( move ua , 3 ; move ua , 2 ; move 3 , 4 )  decode:loop 0 , 3 , move ua - ul , 3 - v0 
[16586] c:0 is:( move 2 , 3 ; move 2 , ul ; move 3 , ul )  decode:( move 3 , 3 ; move 4 , 5 ) 
[16587] c:0 is:( move ua , 3 ; loop 0 , 2 , move 4 , ul )  decode:( move 9 , 3 ; move 5 , 4 / 3 ) 
[16588] c:0 is:( move 2 , 3 ; move 2 , ul ; move ua , 4 )  decode:( move 4 , 5 ; move ua , 0 - 2 ) 
[16589] c:0 is:( move ua , ul / 5 ; move ua - ul , ul )  decode:( move ua , ul / 4 ; move 5 , ul ) 
[16590] c:0 is:( move 2 , 2 ; move ul , 2 ; move 4 , ul )  decode:( move 2 , 2 ; move 5 , 4 ) 
[16591] c:0 is:( move ul , 4 ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 3 , move ua , 3 + 3 - v0 
[16592] c:0 is:( move 3 , 0 ; move ul , ul ; move 3 , 4 )  decode:( move 4 , 0 ; move 3 , ua * ua ) 
[16593] c:0 is:( move ua , 3 ; move 2 , ul ; move 4 , 2 )  decode:loop 0 , 4 , move 3 , 2 - v0 
[16594] c:0 is:( move ua , 3 + move 3 , 2 ; move ul , 2 )  decode:( move ul , ul ; move ua + 3 , 2 ) 
[16595] c:0 is:( move 4 , 2 ; move ua , 2 ; move ua , 4 )  decode:( move ua + 2 , 4 ; move ua , 4 ) 
[16596] c:0 is:( move 2 , 3 ; move ul , 2 ; move ua , 4 )  decode:( move 3 , 4 ; move ua , 7 ) 
[16597] c:0 is:( move ua , 4 ; move 3 , 2 ; move ua , 3 )  decode:loop 0 , 3 , move 2 - ua , v0 + ul 
[16598] c:0 is:( move ul - ua , ul / 5 ; move ua , ul )  decode:( move 5 , 0 - 4 ; move ua , ul ) 
[16599] c:0 is:( move 3 , ul ; move 2 , 2 ; move 3 , ul )  decode:loop 0 , 3 , move 3 / v0 , 0 - 3 
[16600] c:0 is:( move 3 , 4 ; move ul , 2 ; move ua , 2 )  decode:( move 3 , 4 ; move ua , 0 - 4 ) 
[16601] c:0 is:( move ua , 3 ; move 2 , ul ; move 2 , 4 )  decode:( move ua + ul , 3 ; move 2 , 8 ) 
[16602] c:0 is:( move ul , 2 ; loop 0 , 4 , move 2 , ul )  decode:loop 0 , 4 , move 4 - ua , 5 / v0 
[16603] c:0 is:( move 3 , 0 ; move 4 , ul ; move ua , 4 )  decode:loop 0 , 3 , move 4 , ua / v0 + ua 
[16604] c:0 is:( move ua , 3 ; move 3 , 2 ; move 3 , ul )  decode:loop 0 , 4 , move 3 , 3 - v0 
[16605] c:0 is:( move ua , 4 ; move ua , 2 ; move 2 , 4 )  decode:( move ua , 4 ; move ua + ul , 4 ) 
[16606] c:0 is:( move ua , 4 ; move 3 , 2 ; move 2 , ul )  decode:( move ua , 4 ; move 4 , 2 ) 
[16607] c:0 is:( move 3 , 0 ; move ul , 4 ; move ua , 4 )  decode:( move 3 , 2 / move ua , ua * ua ) 
[16608] c:0 is:loop 0 , 2 , ( move 4 , ua ; move 3 , ul )  decode:( move 4 , 0 ; move 9 , ul ) 
[16609] c:0 is:( move ul - ua , 7 ; move ua - ul , ul )  decode:( move 5 , 7 ; move 5 , 2 ) 
[16610] c:0 is:loop 0 , 2 , ( move 3 , 3 ; move ul , ul )  decode:( move 3 , 3 ; move 4 , 4 ) 
[16611] c:0 is:( move 3 , 2 ; move ua , ul ; move 4 , 2 )  decode:( move ua + ul , 6 ; move 4 , 2 ) 
[16612] c:0 is:( move ua , ul / 6 ; move ua , ua * ua )  decode:( move ua , ul / 4 ; move ua , 8 ) 
[16613] c:0 is:( move 2 , 3 ; move 2 , 4 ; move ua , ul )  decode:( move 2 , 6 ; move ua + 2 , 2 ) 
[16614] c:0 is:( loop 0 , 3 , move 3 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 3 , ul 
[16615] c:0 is:( move ua , 0 ; move ul , 4 ; move 4 , 3 )  decode:( move ua , 0 ; move 3 , 4 / ua ) 
[16616] c:0 is:( move 4 , 0 ; move 3 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , v0 * v0 
[16617] c:0 is:( move 3 , 2 ; move ua , 4 ; move 2 , ul )  decode:loop 0 , 4 , move 3 , v0 * 4 
[16618] c:0 is:( move 2 , 0 ; move 4 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 - 9 
[16619] c:0 is:( move 4 , 3 ; move ua , ul ; move 2 , 2 )  decode:( move ua , ul ; move ua , 0 - 2 ) 
[16620] c:0 is:( move 4 , ul ; move 2 , 2 ; move ua , 3 )  decode:( move 2 - ua , 0 ; move ua , 5 ) 
[16621] c:0 is:( move ua , 2 ; move 2 , 4 ; move ua , 4 )  decode:( move ua , 2 ; move ua , 7 + 4 ) 
[16622] c:0 is:( move 3 , 2 ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua - 2 , v0 - 2 
[16623] c:0 is:( move ul , 2 ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 3 , move 3 , v0 - 5 
[16624] c:0 is:( move ul , 3 ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua - ua - ua , 2 
[16625] c:0 is:( move 3 , ul ; move 3 , 2 ; move 2 , ul )  decode:loop 0 , 3 , move 4 - ua , v0 + ul 
[16626] c:0 is:( move 4 , 2 ; move 2 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 3 / v0 , 2 - 3 
[16627] c:0 is:( move 3 , ul ; move 2 , 2 ; move ua , 4 )  decode:( move 5 , 8 ; move ua , 0 - 2 ) 
[16628] c:0 is:( move 2 , 2 ; move 3 , ul ; move ua , 4 )  decode:( move ua , 3 ; move 5 , 0 - 4 ) 
[16629] c:0 is:( move ua , 3 ; move 4 , 2 ; move 2 , ul )  decode:( move ua , 3 ; move ua - ul , ul ) 
[16630] c:0 is:( move ua , 3 ; move 4 , 3 ; move ua , 2 )  decode:( move 4 , 8 ; move ua + ul , 4 ) 
[16631] c:0 is:( move 4 , 0 ; move ul , 4 ; move ua , 3 )  decode:( move 4 , 0 ; move 5 , 7 ) 
[16632] c:0 is:( move ua , 3 ; move 2 , 3 ; move 3 , ul )  decode:( move ua , 3 ; move 5 , move 4 - ) v0 
[16633] c:0 is:( move 5 , 0 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[16634] c:0 is:( move ua , 2 ; move 3 , 2 ; move 4 , ul )  decode:( move ua , 2 ; move ua - ul , 4 ) 
[16635] c:0 is:( move ua , 3 ; move ul , 3 ; move 3 , 2 )  decode:( move ul - ua , 6 ; move 3 , 5 ) 
[16636] c:0 is:( move ua , 0 ; move 4 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move 3 + v0 , 9 
[16637] c:0 is:( move 4 , 2 + move 2 , ul ; move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , 0 - 8 
[16638] c:0 is:( move ua , ul ; loop 0 , 3 , move 4 , 2 )  decode:loop 0 , 4 , move 0 - 4 , 4 * 3 
[16639] c:0 is:( loop 0 , 3 , move 4 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 5 , 3 / v0 
[16640] c:0 is:( move 3 , 2 ; move ul , 2 ; move 3 , ul )  decode:( move 3 , 2 ; move 4 , 4 ) 
[16641] c:0 is:( move 3 , ul ; move 2 , ul ; move 3 , 2 )  decode:( move 4 , ul ; move 3 - ua , 2 ) 
[16642] c:0 is:( move 4 , 0 ; move ul , ul ; move 2 , 4 )  decode:( move 5 , 0 ; move 2 , 5 ) 
[16643] c:0 is:( move 3 , 2 ; move ua , ul ; move 2 , 4 )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[16644] c:0 is:( move 3 , 2 ; move ua , 2 ; move 4 , ul )  decode:( move ua , 4 ; move ua , ul ) 
[16645] c:0 is:( move ua , 0 ; move 4 , 4 ; move 3 , ul )  decode:( move ul - ua , 0 ; move 8 , 7 ) 
[16646] c:0 is:( move ua , 0 ; move 3 , 4 ; move 4 , ul )  decode:( move ua , 0 ; move 8 , 2 ) 
[16647] c:0 is:( move 2 , 0 ; move ul , 4 ; move 4 , ul )  decode:( move 2 , 0 ; move ul - ua , 5 ) 
[16648] c:0 is:( move 4 , ul ; move 2 , 2 ; move 2 , ul )  decode:( move 5 , ul ; move 3 , ua / 3 ) 
[16649] c:0 is:( move 2 , ul ; move 3 , ul ; move 3 , 2 )  decode:loop 0 , 3 , move 4 - ua , 2 0 - 3 
[16650] c:0 is:( move ua , 3 ; loop 0 , 3 , move ua , 4 )  decode:loop 0 , 4 , move ua , 0 - 5 / 3 
[16651] c:0 is:( move 3 , 0 ; move ua , ul ; move 4 , 4 )  decode:( move 4 , 0 ; move ua + ul , 4 ) 
[16652] c:0 is:( move ua , 4 ; move 4 , 2 ; move ua , 2 )  decode:loop 0 , 4 , move v0 - ua , 4 * 4 
[16653] c:0 is:( move 4 , 3 ; move ua , 2 ; move 2 , ul )  decode:( move 4 , 3 ; move 8 , 2 ) 
[16654] c:0 is:( move 2 , 2 ; move 3 , 4 ; move ua , ul )  decode:( move 3 , 5 ; move 8 , ua * ua ) 
[16655] c:0 is:( move ua , 2 ; move ul , 4 ; move 3 , 2 )  decode:( move 5 , 2 ; move 4 , 2 + 4 ) 
[16656] c:0 is:( move 2 , 0 ; move ul , ul ; move 4 , 4 )  decode:( move 4 , 0 ; move 3 , 5 ) 
[16657] c:0 is:( move ua , ua ; loop 0 , 4 , move 3 , 3 )  decode:( move ua , 0 ; move ua , 3 ) 
[16658] c:0 is:( move 4 , 0 ; move 4 , ul ; move ua , 3 )  decode:( move ua , 0 ; move 5 , 4 * 4 ) 
[16659] c:0 is:( move ua , 2 ; move 2 , 4 ; move 3 , ul )  decode:( move ua , 2 ; move 5 , 5 + 4 ) 
[16660] c:0 is:( move ua , 4 ; move 3 , 3 ; move ua , 2 )  decode:loop 0 , 3 , move 2 - ua , 4 * 9 
[16661] c:0 is:( move 4 , 2 ; move ul , 3 ; move ua , 2 )  decode:( move 4 , 2 ; move ua , 5 ) 
[16662] c:0 is:( move ua , ul ; move 3 , 3 ; move 3 , 2 )  decode:( move ua , 0 - move ua - ul , 3 ) 
[16663] c:0 is:( move 4 , ul ; loop 0 , 2 , move 2 , ul )  decode:( move 5 , ul ; move 3 , ul ) 
[16664] c:0 is:( move ua , 2 ; move 4 , 2 ; move 3 , ul )  decode:( move ua , 2 ; move 5 , 2 ) 
[16665] c:0 is:( move ua , 2 ; move 3 , 3 ; move 3 , ul )  decode:( move ua , 2 ; move 5 , 0 - 3 ) 
[16666] c:0 is:( move 2 , 3 ; move 3 , ul ; move 2 , ul )  decode:( move 3 , 3 ; move 4 , ul ) 
[16667] c:0 is:( move ua , 3 ; move 2 , 4 ; move 2 , ul )  decode:( move 4 , 3 ; move 5 , 4 ) 
[16668] c:0 is:( move 4 , 0 ; move ul , 3 ; move 3 , ul )  decode:( move 3 , 0 ; move 4 , 4 ) 
[16669] c:0 is:( move ua + ul , 8 ; move ul - ua , ul )  decode:( move ul - ua , 8 ; move 5 , ul ) 
[16670] c:0 is:( move ul , 2 ; move 2 , ul ; move 2 , 4 )  decode:0 loop 0 , 4 , move v0 - 2 , 4 
[16671] c:0 is:( move 4 , 0 ; move 2 , ul ; move 5 , ul )  decode:( move 4 , 0 ; move 5 , 5 ) 
[16672] c:0 is:( move ua , 6 ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 4 , move ua , , 4 
[16673] c:0 is:( move ua , ul / ua ; move ua + ul , 8 )  decode:( move ua , ul / ua ; move 8 , 8 ) 
[16674] c:0 is:( move 3 , 0 ; move ul , ul ; move 4 , 4 )  decode:( move 4 , 0 ; move 4 , 7 + 4 ) 
[16675] c:0 is:( move 3 , 3 ; move ua , ul ; move 4 , 2 )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[16676] c:0 is:( move ua , 4 ; move 3 , 3 ; move ua , 3 )  decode:loop 0 , 3 , move 4 + 2 , 0 - 0 3 
[16677] c:0 is:( move 4 , ul ; move 3 , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 4 - ua , v0 - ul 
[16678] c:0 is:( move 3 , 2 ; move 3 , ul ; move ua , 4 )  decode:( move ua , 2 ; move ul - ua , 9 ) 
[16679] c:0 is:( move 4 , 2 ; move 2 , 4 ; move ua , ul )  decode:( move 4 , 2 ; move 8 , ua * ua ) 
[16680] c:0 is:( move 4 , 0 ; move 4 , ul ; move ua , 4 )  decode:( move ua + 3 , 0 ; move 5 , 4 ) 
[16681] c:0 is:( move 3 , 2 ; move ul , ul ; move 2 , 4 )  decode:( move 4 , 2 ; move 2 , 4 ) 
[16682] c:0 is:( move 2 , 4 ; move ul , 2 ; move ua , 4 )  decode:( move ua , 4 ; move 3 , 9 ) 
[16683] c:0 is:( move ua , 2 ; move 3 , 4 ; move ua , 4 )  decode:loop 0 , 3 , move v0 - ua , 4 
[16684] c:0 is:( move ua , ul ; loop 0 , 3 , move 3 , 4 )  decode:loop 0 , 4 , move v0 + 2 , 4 * 3 
[16685] c:0 is:( move ua , 0 ; move 4 , 4 ; move 4 , ul )  decode:( move 5 , 0 ; move 9 , ua * ua ) 
[16686] c:0 is:( move 2 , 2 ; move ul , 4 ; move 3 , ul )  decode:( move 3 , 2 ; move 3 , ua * ua ) 
[16687] c:0 is:( move 3 , ul ; move 4 , ul ; move 2 , 2 )  decode:loop 0 , 4 , move 2 , ul / v0 
[16688] c:0 is:( move 4 , 2 ; move ul , 3 ; move 2 , ul )  decode:( move 3 , 2 ; move 3 , 0 - 4 ) 
[16689] c:0 is:( move 4 , ul ; move 3 , ul ; move 2 , 2 )  decode:( move 5 , ul ; move 3 , ul ) 
[16690] c:0 is:( move 4 , 2 ; move 2 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , v0 + 7 
[16691] c:0 is:( move 3 , 3 ; move 2 , 4 ; move ua , ul )  decode:( move 3 , 3 ; move 8 , 5 ) 
[16692] c:0 is:( move 3 , 4 ; move ua , 2 ; move 3 , ul )  decode:loop 0 , 4 , move 3 , 4 - v0 
[16693] c:0 is:( move ul , 2 ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 3 , move 4 , 2 - v0 / 2 
[16694] c:0 is:( move 3 , 3 ; move 2 , ul ; move ua , 4 )  decode:( move ul - ua , ul ; move 5 , 7 ) 
[16695] c:0 is:( move ua , 3 ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 0 - 4 , 3 - v0 
[16696] c:0 is:( move 2 , 3 ; move ul , 4 ; move ua , 3 )  decode:( move 2 , 9 ; move ua , 3 ) 
[16697] c:0 is:( move ua , 9 ; move ul - ua , ua * ua )  decode:( move ua , 9 ; move 5 , 4 / 3 ) 
[16698] c:0 is:( move 4 , 0 ; move ul , 3 ; move 4 , ul )  decode:( move 3 , 2 ; move 4 , 0 - 4 ) 
[16699] c:0 is:( move 4 , 2 ; move 3 , ul ; move ua , 3 )  decode:( move ua , 2 ; move ul - ua , 3 ) 
[16700] c:0 is:( move ua , 0 ; move ul , 4 ; move 4 , 4 )  decode:loop 0 , 4 , move 3 , v0 * 8 
[16701] c:0 is:( move ul , 2 ; move 3 , 2 ; move 4 , ul )  decode:( move 3 , 2 ; move 5 , 2 - 3 ) 
[16702] c:0 is:( move ua , ul ; move 2 , 2 ; move 4 , 4 )  decode:( move ua + ul , ul ; move 4 , 6 ) 
[16703] c:0 is:( move 4 , 2 ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua - 2 , 2 - 3 
[16704] c:0 is:( move 2 , ul ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , ul 
[16705] c:0 is:( move ua , 4 + move 3 , 2 ; move 2 , ul )  decode:( move 2 , 4 / ua ; move ua , 5 ) 
[16706] c:0 is:( move ua , 2 ; loop 0 , 6 , move ua , 3 )  decode:loop 0 , 4 , move 3 + 0 , 0 - 9 
[16707] c:0 is:( move 3 , 3 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 4 , move v0 - 4 , v0 0 8 / 
[16708] c:0 is:( move 2 , 2 ; move 4 , 4 ; move ua , ul )  decode:( move 4 , 3 ; move 9 , 4 + 3 ) 
[16709] c:0 is:( move ua - 9 , ul ; move ua + ul , ul )  decode:( move ua , 0 - 4 ; move 3 , 4 ) 
[16710] c:0 is:( move 3 , 2 ; move ul , ul ; move 3 , 3 )  decode:( move 4 , 2 ; move 3 , 3 ) 
[16711] c:0 is:( move 3 , 4 ; move ua , ul ; move 3 , 2 )  decode:loop 0 , 3 , move ua - 3 , 5 / 4 
[16712] c:0 is:( move 4 , 0 ; move ua , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , ua * ua 
[16713] c:0 is:( move ua , ul ; loop 0 , 4 , move 2 , 4 )  decode:( move ua , ul ; move 5 , 4 ) 
[16714] c:0 is:( move 3 , 2 ; move ua , ul ; move 3 , 4 )  decode:( move ua + 3 , 3 ; move 3 , 4 ) 
[16715] c:0 is:( move ua , 2 ; move 2 , ul ; move 4 , 4 )  decode:( move 8 , 2 ; move 4 , ua / 4 ) 
[16716] c:0 is:( move ua , 2 ; move 4 , 2 ; move 4 , ul )  decode:0 loop 0 , 3 , move ua - 2 , 2 
[16717] c:0 is:( move 2 , 2 ; move ul , ul ; move 3 , 4 )  decode:( move 3 , 2 ; move 3 , 4 ) 
[16718] c:0 is:( loop 0 , 4 , move ul , 2 ; move 3 , ul )  decode:( move 2 , 4 + 3 ; move 4 , 4 ) 
[16719] c:0 is:( move 2 , 3 ; move 3 , ul ; move ua , 4 )  decode:( move ul - ua , 0 ; move ua , 7 ) 
[16720] c:0 is:( move ul - ua , 9 ; move ua , ua * ua )  decode:( move 5 , 4 * 3 ; move ua , 8 ) 
[16721] c:0 is:( move 4 , 0 ; move ul , ul ; move 3 , 4 )  decode:( move 5 , 0 ; move 3 , ua * ua ) 
[16722] c:0 is:( move 4 , ul ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua , 0 - v0 0 
[16723] c:0 is:( move 4 , ul ; move ua , 2 ; move 2 , 4 )  decode:( move 4 , ul ; move 8 , 4 / 3 ) 
[16724] c:0 is:( move ua , 3 ; move 2 , 3 ; move 4 , ul )  decode:( move 2 - ua , 3 ; move ua , 6 ) 
[16725] c:0 is:( move ua + ul , 9 ; move ul - ua , ul )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[16726] c:0 is:( move ua , 3 ; move 4 , 4 ; move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , 9 / 3 
[16727] c:0 is:( move ua , 2 ; loop 0 , 5 , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[16728] c:0 is:( loop 0 , 4 , move ua , 4 ; move 3 , ua )  decode:loop 0 , 4 , move v0 + 4 , 4 
[16729] c:0 is:( move 4 , 4 ; move 2 , 2 ; move ua , ul )  decode:( move 5 , 4 ; move ua + ul , ul ) 
[16730] c:0 is:( move 4 , 0 ; move ul , 4 ; move 3 , ul )  decode:( move 4 , 0 ; move 4 , ua * ua ) 
[16731] c:0 is:( move ua , 3 ; move 2 , 4 ; move ua , 4 )  decode:( move 6 , 3 ; move ua , 9 ) 
[16732] c:0 is:( move ua , 3 ; move ul , 2 ; move 3 , 4 )  decode:( move ua , 3 ; move 3 , 7 + 4 ) 
[16733] c:0 is:( move ua , 3 ; move 4 , 2 ; move 3 , ul )  decode:loop 0 , 3 , move ua - 2 , 3 - v0 
[16734] c:0 is:( move 2 , 4 ; move 2 , 4 ; move ua , ul )  decode:( move 3 , ul ; move ua + ul , 4 ) 
[16735] c:0 is:( move 4 , 4 ; move 2 , ul ; move ua , 2 )  decode:loop 0 , 3 , move 4 , 4 * 0 - v0 
[16736] c:0 is:( move 3 , ul ; move 4 , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 2 , v0 
[16737] c:0 is:( move 3 , 4 ; move 3 , ul ; move ua , 2 )  decode:( move 4 , 4 ; move ua , 2 ) 
[16738] c:0 is:( move ua , 3 ; move ul , 4 ; move 3 , 2 )  decode:( move 3 , 3 ; move ua - ul , 9 ) 
[16739] c:0 is:( move 4 , ul ; move 2 , ul ; move 3 , 2 )  decode:( move 5 , ul ; move 3 , 2 ) 
[16740] c:0 is:( move ua , 3 ; move 3 , 2 ; move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[16741] c:0 is:( move 2 , 2 ; move ua , ul ; move 4 , 4 )  decode:loop 0 , 4 , move 3 , 2 + v0 
[16742] c:0 is:( move 4 , 0 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , v0 / v4 
[16743] c:0 is:( move ua , 3 ; move 4 , ul ; move 3 , 2 )  decode:( move 9 , 3 ; move 4 , 0 - 2 ) 
[16744] c:0 is:( loop 0 , 3 , move 3 , 4 ; move ua , ul )  decode:( move 4 , ua / 9 ; move 9 , 8 ) 
[16745] c:0 is:( move 2 , 4 ; move ua , 4 ; move 2 , ul )  decode:( move 3 , 7 ; move ua + ul , 4 ) 
[16746] c:0 is:( move ua , 2 ; move 2 , 4 ; move 4 , ul )  decode:( move ul - ua , 2 ; move ua , 5 ) 
[16747] c:0 is:( move ul - ua , ul ; move ua , ul / 6 )  decode:( move ua , 0 - 2 ; move ua , 3 ) 
[16748] c:0 is:( move 2 , 4 ; move 2 , ul ; move ua , 4 )  decode:( move 4 , 4 ; move ua , ua * ua ) 
[16749] c:0 is:( move 3 , 2 ; move 4 , ul ; move 2 , ul )  decode:loop 0 , 4 , move 2 , 2 - v0 
[16750] c:0 is:( move 3 , 0 ; move 4 , 4 ; move ul , ul )  decode:( move 3 , 0 ; move 4 , 4 ) 
[16751] c:0 is:( move 3 , ul ; move ul , 4 ; move 2 , 2 )  decode:( move 3 , ul ; move 3 , 5 ) 
[16752] c:0 is:( move 4 , 3 ; move ul , ul ; move 2 , 2 )  decode:( move ul - ua , 6 ; move 2 , ul ) 
[16753] c:0 is:( move ua , 2 ; move 3 , ul ; move 3 , 4 )  decode:( move 0 - 9 , 2 ; move 3 , 5 ) 
[16754] c:0 is:( move 4 , 3 ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 - ua , 3 + v0 
[16755] c:0 is:( move 2 , 4 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 4 - ua , 2 / 3 
[16756] c:0 is:( move ua , 3 ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[16757] c:0 is:( move ua , 2 ; move 4 , 3 ; move 3 , ul )  decode:loop 0 , 3 , move ua - v0 , ua * ua 
[16758] c:0 is:( move 2 , 3 ; move 2 , ul ; move 4 , ul )  decode:( move 4 - ua , 3 ; move 5 , 5 ) 
[16759] c:0 is:( move 3 , 3 ; move ul , 4 ; move ua , 2 )  decode:loop 0 , 4 , move 4 - ua , 6 * 3 
[16760] c:0 is:( move ua , 4 ; move 2 , ul ; move 2 , 4 )  decode:( move ua + ul , 4 ; move 2 , 8 ) 
[16761] c:0 is:( move 4 , 2 ; move 2 , ul ; move ua , 4 )  decode:( move ua , ua / 3 ; move 5 , 5 ) 
[16762] c:0 is:( loop 0 , 5 , move 3 , 3 ; move ua , ua )  decode:loop 0 , 4 , move 4 - ua , 4 - v4 
[16763] c:0 is:( move ua , 3 ; move 2 , ul ; move 3 , 4 )  decode:( move ua + 2 , 3 ; move 3 , 5 ) 
[16764] c:0 is:( move ua , ul ; move 4 , 3 ; move 3 , 2 )  decode:( move 5 , ul ; move ua , 3 ) 
[16765] c:0 is:( move ua , 3 ; move 3 , ul ; move 4 , 2 )  decode:loop 0 , 4 , move 3 , 3 - v0 
[16766] c:0 is:( move ul - ua , 9 ; move ua + ul , ul )  decode:( move 5 , 9 ; move ua + ul , ul ) 
[16767] c:0 is:( move 4 , 4 ; move ua , 2 ; move ua , 3 )  decode:loop 0 , 3 , move ua - v0 , 4 - 3 
[16768] c:0 is:( move 3 , ul ; move 2 , ul ; move 4 , 2 )  decode:( move 2 - ua , ul ; move 4 , ul ) 
[16769] c:0 is:( move ua , 3 ; move 2 , 4 ; move 3 , ul )  decode:( move 5 , 3 ; move ua - ul , 4 ) 
[16770] c:0 is:loop 0 , 2 , ( move 3 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 4 , ul 
[16771] c:0 is:( move 3 , 2 ; move 3 , 4 ; move ua , ul )  decode:( move 3 , 2 ; move 8 , 4 + 4 ) 
[16772] c:0 is:( move ua , 4 ; move 3 , 2 ; move 3 , ul )  decode:loop 0 , 4 , move 3 , 4 * v0 
[16773] c:0 is:( move 3 , 3 ; move ua , 4 ; move 2 , ul )  decode:( move 4 , 0 ; move ua + ul , 4 ) 
[16774] c:0 is:( move ua , 4 ; move ua , 3 ; move 4 , 2 )  decode:loop 0 , 4 , move ua - 2 , 4 / v0 
[16775] c:0 is:( move ua , 4 ; move 4 , 2 ; move 2 , ul )  decode:( move ua , 4 ; move 5 , 2 ) 
[16776] c:0 is:( move 4 , 2 ; move ua , 2 ; move 4 , ul )  decode:loop 0 , 3 , move ua - 2 , v0 + 4 
[16777] c:0 is:( move 5 , 0 ; move 4 , ul ; move 2 , ul )  decode:( move 5 , 0 ; move ua - 2 , ul ) 
[16778] c:0 is:( move 3 , 2 ; move ul , ul ; move 4 , 2 )  decode:( move 4 , 2 ; move 4 , ua * ua ) 
[16779] c:0 is:( move 4 , 2 ; move ua , ul ; move 4 , 2 )  decode:( move 4 + 3 , 2 ; move ua , 2 ) 
[16780] c:0 is:( loop 0 , 5 , move 2 , ul ; move ua , 3 )  decode:loop 0 , 4 , move 4 , 3 + 4 / v0 
[16781] c:0 is:( move ua , 3 ; move 3 , 4 ; move 2 , ul )  decode:( move ul - ua , 3 ; move ua , 7 ) 
[16782] c:0 is:( loop 0 , 4 , move ua , 4 ; move ua , 3 )  decode:loop 0 , 4 , move ua , 4 
[16783] c:0 is:( move 4 , 0 ; move ul , 4 ; move ua , 4 )  decode:( move 4 , 2 - move ua , 7 v0 ) 
[16784] c:0 is:( move 2 , 2 ; move 4 , ul ; move ua , 4 )  decode:( move ua , 3 ; move ul - ua , 4 ) 
[16785] c:0 is:( move ua , 3 ; move 4 , 3 ; move 2 , ul )  decode:( move ua , 6 ; move ua , 3 ) 
[16786] c:0 is:( move ua , 4 ; move 2 , ul ; move 4 , 2 )  decode:( move ua + ul , 4 ; move 5 , 2 ) 
[16787] c:0 is:( move 4 , 0 ; move ua , ul ; move 4 , 4 )  decode:( move ua + 2 , 0 ; move 4 , 4 ) 
[16788] c:0 is:( move 3 , ul ; move 2 , 4 ; move 2 , ul )  decode:( move 3 , ul ; move 4 , 5 ) 
[16789] c:0 is:( move 3 , 2 ; move ul , 4 ; move 2 , ul )  decode:( move 3 , 2 ; move 3 , 5 ) 
[16790] c:0 is:( move 2 , 4 ; move 4 , ul ; move ua , 2 )  decode:( move 5 , 5 ; move ua , 2 ) 
[16791] c:0 is:( move 4 , 4 ; move ua , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[16792] c:0 is:( move ua , 4 ; loop 0 , 4 , move 2 , ul )  decode:loop 0 , 4 , move 3 - ua , 4 * 0 3 
[16793] c:0 is:( move 0 , ul ; loop 0 , 6 , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - 0 8 
[16794] c:0 is:( move 3 , 0 ; move ul , 4 ; move 4 , ul )  decode:( move 3 , 0 ; move 5 , 5 ) 
[16795] c:0 is:( move ul , 2 ; move 2 , 4 ; move 3 , ul )  decode:( move 2 , 6 ; move 4 , 4 ) 
[16796] c:0 is:( move ua , ua / 7 ; move ul - ua , ul )  decode:( move ua , 4 ; move ul - ua , ul ) 
[16797] c:0 is:( move ua , ul ; loop 0 , 3 , move 4 , 3 )  decode:loop 0 , 4 , move v0 - 4 , 0 - 3 
[16798] c:0 is:( move 4 , 0 ; move ul , ul ; move 4 , 3 )  decode:( move 4 , 0 ; move 4 , 4 ) 
[16799] c:0 is:( move ua , 4 ; move 4 , 2 ; move ua , 3 )  decode:( move ua + ul , 4 ; move ua , 3 ) 
[16800] c:0 is:( move ul , 9 ; move ua + ul , ua * ua )  decode:( move ul , 9 ; move ua + ul , 4 ) 
[16801] c:0 is:( move 3 , 3 ; move ul , ul ; move 3 , 2 )  decode:loop 0 , 3 , move ua - 4 , 3 + v0 
[16802] c:0 is:( move 4 , ul ; move 3 , 3 ; move ua , 2 )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[16803] c:0 is:( move 4 , 2 ; move ua , 4 ; move 2 , ul )  decode:( move 4 , 2 ; move 4 + 4 , 4 ) 
[16804] c:0 is:( move 4 , 2 ; move ua , ul ; move 2 , 4 )  decode:( move 4 , 2 ; move  4 , 4 + v) 0 
[16805] c:0 is:( move 4 , 3 ; move ua , 2 ; move 3 , ul )  decode:( move 5 , 3 ; move ua + ul , ul ) 
[16806] c:0 is:( move 4 , 0 ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 - 9 
[16807] c:0 is:( move 4 , ul ; move 2 , 2 ; move ua , 4 )  decode:( move 5 , 8 ; move ua , 4 / ua ) 
[16808] c:0 is:( move ua , ul ; move 2 , 3 ; move 3 , 4 )  decode:( move ua , ul ; move 4 , 4 * 4 ) 
[16809] c:0 is:( move ua , 3 ; move 3 , 3 ; move ua , 4 )  decode:( move ua , 3 ; move ua + ul , 7 ) 
[16810] c:0 is:( move 3 , 2 ; move 2 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , 2 - v0 
[16811] c:0 is:( move ua - ul , 9 ; move ua , ua * ua )  decode:( move 5 , 9 ; move ua , ua * ua ) 
[16812] c:0 is:( move 3 , ul ; loop 0 , 2 , move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , ul 
[16813] c:0 is:( move 2 , 3 ; move 4 , ul ; move 2 , ul )  decode:loop 0 , 4 , move 2 , 2 / 2 / v0 
[16814] c:0 is:( move ua , 2 ; move 3 , 4 ; move 3 , ul )  decode:( move ua , 2 ; move 5 , 5 + 2 ) 
[16815] c:0 is:( move 4 , 3 ; move 2 , ul ; move 2 , ul )  decode:( move ul - ua , 3 ; move 3 , 2 ) 
[16816] c:0 is:( move 3 , 3 ; move 2 , ul ; move 3 , ul )  decode:loop 0 , 4 , move v0 - 4 , ul 
[16817] c:0 is:( move ua , 3 ; move 2 , ul ; move 4 , 3 )  decode:( move ua + ul , 3 ; move 4 , 7 ) 
[16818] c:0 is:( move 4 , ul ; loop 0 , 2 , move 3 , ul )  decode:loop 0 , 3 , move 3 , ul 
[16819] c:0 is:( move ul , 0 ; move 4 , ul ; move 3 , 4 )  decode:( move 3 , ul ; move 5 , 4 ) 
[16820] c:0 is:( move ua , 4 ; move 2 , 4 ; move 2 , ul )  decode:( move 0 - ua , ul ; move 4 , 5 ) 
[16821] c:0 is:( move 4 , 3 ; move ua , ul ; move 3 , 2 )  decode:( move ua , ul ; move ua , 2 ) 
[16822] c:0 is:( move ua , ul / 6 ; move ul - ua , ul )  decode:loop 0 , 2 , move ua - ul , v0 - 3 
[16823] c:0 is:( move 3 , 4 ; move ul , 3 ; move ua , 2 )  decode:( move 3 , 4 ; move ua , 5 ) 
[16824] c:0 is:( loop 0 , 5 , move ua , 4 ; move ua , 3 )  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[16825] c:0 is:( move ua , 5 ; loop 0 , 4 , move ua , 3 )  decode:loop 0 , 4 , move 3 + 3 , 0 - 9 
[16826] c:0 is:( move ua , 6 ; loop 0 , 3 , move ua , 3 )  decode:loop 0 , 4 , move 5 , 3 
[16827] c:0 is:( move 3 , 2 ; move 3 , ul ; move 4 , ul )  decode:( move 4 , ul ; move 5 , 5 ) 
[16828] c:0 is:( move 2 , 2 ; move ul , ul ; move 4 , 4 )  decode:( move 3 , 4 / 5 ; move 4 , 5 ) 
[16829] c:0 is:( move 3 , 4 ; move ul , 3 ; move ua , 3 )  decode:( move 3 , 4 ; move ua , 2 / ua ) 
[16830] c:0 is:( move 4 , 3 ; move 2 , ul ; move 3 , ul )  decode:( move 5 , 3 ; move 4 , 5 ) 
[16831] c:0 is:( move 3 , 2 ; move 4 , ul ; move 3 , ul )  decode:( move 4 , ul / 4 ; move ua , 2 ) 
[16832] c:0 is:( move 3 , ua ; loop 0 , 4 , move 4 , ul )  decode:loop 0 , 4 , move 4 , ul 
[16833] c:0 is:( move 4 , 2 ; move ul , ul ; move 4 , 2 )  decode:( move ua - ul , 2 ; move 4 , 2 ) 
[16834] c:0 is:( move 3 , 4 ; move ua , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 4 , 2 / 3 
[16835] c:0 is:( move 3 , 2 ; move ul , 4 ; move 3 , ul )  decode:( move 3 , ul ; move 4 , 9 - 4 ) 
[16836] c:0 is:( loop 0 , 6 , move 2 , 3 ; move ua , ul )  decode:( move 3 , 5 ; move ua , 0 - 4 ) 
[16837] c:0 is:( move 4 , 4 ; move 2 , 3 ; move ua , ul )  decode:( move 4 , 4 ; move ua + ul , 4 ) 
[16838] c:0 is:( move 4 , 3 ; move ul , 4 ; move ua , 2 )  decode:loop 0 , 4 , move 3 , 4 + 4 / v0 
[16839] c:0 is:( move 2 , 2 ; move ul , 4 ; move 4 , ul )  decode:( move 2 , 2 ; move 5 , ua * ua ) 
[16840] c:0 is:( move 3 , 3 ; move ul , 4 ; move ua , 3 )  decode:( move 3 , 3 ; move ua - ul , 7 ) 
[16841] c:0 is:( move 3 , 3 ; move 4 , ul ; move ua , 3 )  decode:0 loop 0 , 3 , move ul - ua , 4 * 3 
[16842] c:0 is:( loop 0 , 3 , move 3 , ul ; move 4 , ul )  decode:loop 0 , 4 , move 3 , ul 
[16843] c:0 is:( move 4 , 2 ; move ua , 4 ; move ua , 4 )  decode:loop 0 , 3 , move v0 + 4 , 4 
[16844] c:0 is:( move ua , 3 ; move 4 , 3 ; move 3 , ul )  decode:( move ua , 0 ; move ua - ul , ul ) 
[16845] c:0 is:( move 2 , ul ; move 4 , 2 ; move ul , 4 )  decode:( move 2 , ul ; move ua - ul , 4 ) 
[16846] c:0 is:( move ua , 3 ; move 4 , 4 ; move 2 , ul )  decode:( move ua , 3 ; move 7 , 4 ) 
[16847] c:0 is:( move 3 , ul ; move 2 , 4 ; move 3 , ul )  decode:( move 3 , ul ; move 4 , 5 + 4 ) 
[16848] c:0 is:( move ua , 3 ; move ul , 4 ; move 2 , 4 )  decode:( move ua , 3 ; move 3 , 9 ) 
[16849] c:0 is:( move 3 , 3 ; move 3 , ul ; move ua , 4 )  decode:( move ua + ul , 4 ; move 5 , 4 ) 
[16850] c:0 is:( move 3 , 2 ; move ul , ul ; move 4 , 3 )  decode:( move 4 , 2 ; move 4 , 4 ) 
[16851] c:0 is:( move 3 , 2 ; move ua , ul ; move 4 , 4 )  decode:loop 0 , 4 , move 3 , 2 - 3 / v0 
[16852] c:0 is:( move ul , 4 ; move 2 , ul ; move 4 , 2 )  decode:( move 3 , 4 ; move 4 , 2 ) 
[16853] c:0 is:( move ua , ul ; move ul - ua , ua / 8 )  decode:( move ua , ul ; move 5 , 4 ) 
[16854] c:0 is:( move 3 , 4 ; move ul , 4 ; move ua , 2 )  decode:( move 3 , 8 ; move ua , 4 * 4 ) 
[16855] c:0 is:( move ua , 3 ; move 3 , 4 ; move 3 , ul )  decode:( move 5 , 3 ; move ua + ul , 4 ) 
[16856] c:0 is:( move 4 , ul ; move 2 , 4 ; move 2 , ul )  decode:( move 3 , ul ; move 4 , 5 / 4 ) 
[16857] c:0 is:( move ua , 4 ; move 2 , 4 ; move ua , 4 )  decode:( move ua , 4 ; move ua , 6 + 4 ) 
[16858] c:0 is:( move ua , 3 ; move 4 , 3 ; move ua , 4 )  decode:loop 0 , 4 , move 4 , 3 + v0 
[16859] c:0 is:( move 4 , 0 ; move ul , 4 ; move 4 , ul )  decode:( move 4 , 0 ; move 5 , 5 ) 
[16860] c:0 is:( move ua , 3 ; loop 0 , 4 , move 4 , ul )  decode:loop 0 , 4 , move ul - ua , 3 / v0 
[16861] c:0 is:( move 3 , 3 ; move ua , 4 ; move 3 , ul )  decode:( move 4 , 6 ; move ua + 2 , 4 ) 
[16862] c:0 is:( move ua , 4 ; move 3 , 4 ; move 2 , ul )  decode:( move ul - ua , 4 ; move 5 , 7 ) 
[16863] c:0 is:( move 4 , 2 ; move 3 , ul ; move ua , 4 )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[16864] c:0 is:( move ua , 2 ; move 3 , 4 ; move 4 , ul )  decode:( move ua , 2 ; move ua + ul , 4 ) 
[16865] c:0 is:( move ua , 3 ; move 3 , ul ; move 4 , 3 )  decode:( move ua + ul , 3 ; move 4 , 3 ) 
[16866] c:0 is:( move ul , 2 ; loop 0 , 4 , move 4 , ul )  decode:loop 0 , 4 , move 0 - 4 , 3 / 3 
[16867] c:0 is:( move ul , 2 ; move 2 , 4 ; move 4 , ul )  decode:( move 2 , 2 ; move 5 , 4 / 3 ) 
[16868] c:0 is:( move 3 , 3 ; move ul , 3 ; move ua , 4 )  decode:( move 3 , 3 ; move ua , 7 ) 
[16869] c:0 is:( move 4 , 2 ; move 3 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , 2 - v0 
[16870] c:0 is:( move ua , 2 ; move 4 , ul ; move 3 , 4 )  decode:( move ua + 3 , 2 ; move 4 , 4 ) 
[16871] c:0 is:( move 2 , 3 ; move ul , 4 ; move ua , 4 )  decode:( move 2 , 9 ; move ua , 0 - 4 ) 
[16872] c:0 is:( move 4 , 2 ; move 3 , 4 ; move ua , ul )  decode:( move 4 , 2 ; move 8 , ua * ua ) 
[16873] c:0 is:( move ua , 3 ; move 2 , 4 ; move 4 , ul )  decode:( move 5 , 3 ; move ua , ua * ua ) 
[16874] c:0 is:( move 4 , ul ; move 4 , ul ; move 2 , 2 )  decode:loop 0 , 4 , move 4 - ua , ul / v0 
[16875] c:0 is:( move 4 , 4 ; move ul , 2 ; move 2 , ul )  decode:( move 4 , 4 ; move 3 , ua / 3 ) 
[16876] c:0 is:( move 3 , 2 ; move 4 , ul ; move ua , 4 )  decode:( move ua + ul , 3 ; move 5 , 4 ) 
[16877] c:0 is:( move 3 , ul ; move 3 , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 3 - ua , ul / v0 
[16878] c:0 is:( move ua , 3 ; move 3 , 4 ; move ua , 4 )  decode:( move ua , 3 ; move ua + ul , 8 ) 
[16879] c:0 is:( move 3 , ul ; move 4 , 2 ; move 3 , ul )  decode:loop 0 , 3 , move 3 , v0 0 
[16880] c:0 is:( move ua , 4 ; move 3 , ul ; move 2 , 4 )  decode:( move ua + 2 , 4 ; move 3 , 5 ) 
[16881] c:0 is:( move 3 , 3 ; move 2 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , 3 * 5 
[16882] c:0 is:( move 3 , 4 ; move ua , 4 ; move 2 , ul )  decode:( move 3 , 4 ; move ua + 2 , 4 ) 
[16883] c:0 is:( move ua , 4 ; move 4 , 2 ; move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , 4 / v0 
[16884] c:0 is:( move ua , 3 ; move 4 , ul ; move 4 , 2 )  decode:loop 0 , 4 , move 0 - 3 , 3 / v0 
[16885] c:0 is:( move 3 , 2 ; move ul , 3 ; move 4 , ul )  decode:( move 3 , 2 ; move 5 , 4 ) 
[16886] c:0 is:( move 4 , ul ; move 2 , 3 ; move ua , 4 )  decode:( move 4 , ul ; move ua , 4 / ua ) 
[16887] c:0 is:( move 4 , ul ; move 3 , 3 ; move 2 , ul )  decode:loop 0 , 3 , move 3 - ua , 4 * 4 
[16888] c:0 is:( move ua , 2 ; move 4 , 4 ; move ua , 4 )  decode:loop 0 , 3 , move ul - ua , 2 / 8 
[16889] c:0 is:( move 4 , 4 ; move 3 , ul ; move ua , 2 )  decode:( move ua , 4 ; move 5 , 2 ) 
[16890] c:0 is:( move 4 , 3 ; move ul , ul ; move 2 , 3 )  decode:( move 4 , 3 ; move 3 - ua , 7 ) 
[16891] c:0 is:( move 4 , 4 ; move ua , 2 ; move ua , 4 )  decode:loop 0 , 4 , move v0 + 2 , 9 / 3 
[16892] c:0 is:loop 0 , 3 , ( move 3 , ul ; move 4 , ul )  decode:0 loop 0 , 4 , move 4 , 4 * 3 
[16893] c:0 is:( move 9 , ua * ua ; move ul - ua , ul )  decode:( move 9 , ua * ua ; move 5 , 4 ) 
[16894] c:0 is:( move ua , 6 ; move 3 , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 3 , 3 - v0 
[16895] c:0 is:( move 4 , 3 ; move 3 , ul ; move ua , 3 )  decode:loop 0 , 3 , move ua - ul , 4 / 3 0 0 0 0 / 
[16896] c:0 is:( move ua , 4 ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 0 - 4 , 4 / v0 
[16897] c:0 is:( move ua , 3 ; move ua , 3 ; move 4 , 4 )  decode:loop 0 , 4 , move 4 , 3 + 4 - v0 
[16898] c:0 is:( move 4 , 2 ; move ul , 3 ; move 3 , ul )  decode:( move 3 , 2 ; move 4 , 4 ) 
[16899] c:0 is:( move 4 , ul ; move 4 , 2 ; move 2 , ul )  decode:loop 0 , 4 , move ua - 4 , v0 0 
[16900] c:0 is:( move 3 , 2 ; move ul , ul ; move 3 , 4 )  decode:( move 4 , 2 ; move 3 , 5 ) 
[16901] c:0 is:( move 4 , 3 ; move 2 , 4 ; move ua , ul )  decode:( move 4 , 3 ; move 8 , 5 ) 
[16902] c:0 is:( move 3 , 2 ; move 4 , 4 ; move ua , ul )  decode:( move 3 , 5 ; move ua + 3 , 4 ) 
[16903] c:0 is:( move 3 , ul ; move ua , 2 ; move 4 , 4 )  decode:( move 3 ua , move 5 ; move ua , 4 ) 
[16904] c:0 is:( move ua , 3 ; move 4 , 4 ; move ua , 3 )  decode:loop 0 , 4 , move 2 - ua , 4 / v0 
[16905] c:0 is:( move ua , ul ; loop 0 , 3 , move 4 , 4 )  decode:loop 0 , 4 , move v0 - ua , 4 
[16906] c:0 is:( move 4 , 0 ; move ul , ul ; move 4 , 4 )  decode:( move 5 , 0 ; move 4 , 5 ) 
[16907] c:0 is:( move 2 , 4 ; move 4 , ul ; move 2 , ul )  decode:( move 3 , 9 ; move ua , 2 - 3 ) 
[16908] c:0 is:( loop 0 , 6 , move 3 , 2 ; move ul , ua )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[16909] c:0 is:( move ua , 4 ; move ul , 3 ; move 2 , 4 )  decode:( move ua , 4 ; move 2 , 7 ) 
[16910] c:0 is:( move 4 , 4 ; move 3 , 2 ; move ua , ul )  decode:( move ul - ua , 4 ; move 8 , ul ) 
[16911] c:0 is:( loop 0 , 6 , move 2 , ul ; move 3 , ua )  decode:loop 0 , 4 , move 4 , 2 - 3 - v0 
[16912] c:0 is:( move 3 , 2 ; move 3 , ul ; move ul , 4 )  decode:loop 0 , 3 , move ua - 4 , 2 - v0 
[16913] c:0 is:( move 2 , ul ; move ul , 4 ; move 4 , 2 )  decode:( move 3 , 4 ; move 4 , 0 - 3 ) 
[16914] c:0 is:( move 4 , 3 ; move 2 , ul ; move ua , 4 )  decode:( move ua , 3 ; move ul - ua , 7 ) 
[16915] c:0 is:( move ua , ul ; move 3 , 4 ; move 4 , 2 )  decode:loop 0 , 3 , move ua - 2 , 2 / v0 
[16916] c:0 is:( move 3 , 3 ; move ul , ul ; move 2 , 4 )  decode:( move 4 , 3 ; move ul , 2 ) 
[16917] c:0 is:( move 4 , 4 ; move ua , 2 ; move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , 4 - v0 
[16918] c:0 is:( move 2 , 4 ; move 2 , ul ; move 4 , ul )  decode:( move 3 , 4 ; move 4 , 5 ) 
[16919] c:0 is:( move 3 , 4 ; move 3 , ul ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 9 
[16920] c:0 is:( move 2 , 3 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 0 - 3 , v0 / 4 
[16921] c:0 is:( move 4 , 2 ; move 4 , ul ; move 2 , ul )  decode:( move 5 , 2 ; move 5 , 2 ) 
[16922] c:0 is:( move 3 , ul ; move 4 , 4 ; move ua , 2 )  decode:loop 0 , 3 , move 4 , 4 + v0 
[16923] c:0 is:( move ua , 4 ; move 2 , ul ; move 3 , 4 )  decode:( move ua + 2 , 4 ; move 3 , 5 ) 
[16924] c:0 is:( move 4 , 3 ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua - 2 , v0 
[16925] c:0 is:( move ua , 4 ; move 2 , 4 ; move 3 , ul )  decode:( move ul - ua , ul ; move 5 , 5 ) 
[16926] c:0 is:( move 4 , 3 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 4 , move 2 , v0 + ul 
[16927] c:0 is:( move 4 , 2 ; move ua , 4 ; move 3 , ul )  decode:( move 4 , 2 ; move 9 , 4 ) 
[16928] c:0 is:( move 2 , 4 ; move 3 , 4 ; move ua , ul )  decode:( move 3 , 8 ; move ua + ul , 4 ) 
[16929] c:0 is:( move 3 , 4 ; move 2 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , 4 / v0 
[16930] c:0 is:( move ua , 3 ; move 3 , 3 ; move 4 , ul )  decode:0 loop 0 , 3 , move 4 , 4 - v0 
[16931] c:0 is:( move 2 , 4 ; move ul , ul ; move 2 , 4 )  decode:( move 2 , 4 ; move 2 , 2 ) 
[16932] c:0 is:( move 3 , 4 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 4 , move 2 , 4 / 2 - v0 
[16933] c:0 is:( move 4 , 2 ; move ul , 4 ; move 2 , ul )  decode:( move 4 , 2 ; move 3 , 5 ) 
[16934] c:0 is:( move 4 , 3 ; move ua , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , 3 - v0 
[16935] c:0 is:( move 4 , ul ; move 2 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 3 + v0 , ul / 3 
[16936] c:0 is:( move ua , 4 ; move 3 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , 4 * v0 
[16937] c:0 is:( move 3 , 2 ; move ul , 4 ; move ua , 4 )  decode:( move 3 , 8 ; move ua , 7 / 2 ) 
[16938] c:0 is:( move ua , 4 ; move 3 , ul ; move 4 , 2 )  decode:( move ua , 4 ; move ua - 2 , 5 ) 
[16939] c:0 is:( move 4 , ul ; move 3 , ul ; move 3 , 2 )  decode:( move 5 , ul ; move 4 , ua / 3 ) 
[16940] c:0 is:( move ua , 9 / ua ; move ua , ua * ua )  decode:( move ua , 4 / 3 ; move ua , 8 ) 
[16941] c:0 is:( move 3 , 3 ; move 4 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 3 , v0 - 2 
[16942] c:0 is:( move 3 , ul ; move ul , 4 ; move 3 , 2 )  decode:loop 0 , 2 , move v0 - 4 , 4 / ua 
[16943] c:0 is:( move 4 , 2 ; move ul , ul ; move 2 , 4 )  decode:( move ua - ul , 9 ; move 2 , 8 ) 
[16944] c:0 is:( move 3 , 4 ; move 2 , 4 ; move ua , ul )  decode:( move 3 , ul - 4 ; move 7 , 5 ) 
[16945] c:0 is:( move ul , 4 ; loop 0 , 4 , move ua , 3 )  decode:loop 0 , 4 , move v0 - ua , 0 - 3 
[16946] c:0 is:( loop 0 , 5 , move 4 , 2 ; move ua , ul )  decode:loop 0 , 4 , move ua , 8 / v0 
[16947] c:0 is:( move 3 , 3 ; move 3 , 4 ; move ua , ul )  decode:( move 3 , 3 ; move ua + 2 , 4 ) 
[16948] c:0 is:( move ul , ul ; loop 0 , 2 , move 4 , 4 )  decode:( move 4 , ua * ua ; move 4 , 4 ) 
[16949] c:0 is:( move 2 , 4 ; move 4 , ul ; move ul , 2 )  decode:( move 2 , 4 ; move 5 , 2 ) 
[16950] c:0 is:( move 3 , 4 ; move ul , ul ; move 3 , 2 )  decode:( move 4 , 4 ; move 3 , 2 ) 
[16951] c:0 is:( move 4 , 4 ; move 2 , ul ; move ua , 3 )  decode:( move 0 - ua , ul ; move 5 , 6 ) 
[16952] c:0 is:( move 4 , 2 ; move ua , ul ; move 3 , 4 )  decode:( move 4 , 2 ; move  4 , 4 7 ) 
[16953] c:0 is:( move ua , ul ; loop 0 , 5 , move 4 , 2 )  decode:loop 0 , 4 , move ua - ul , 0 - 9 
[16954] c:0 is:( move 2 , ul ; move 2 , 4 ; move 4 , ul )  decode:( move 4 - ua , ul ; move 5 , 5 ) 
[16955] c:0 is:( move 4 , ua ; loop 0 , 5 , move 2 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 * 5 
[16956] c:0 is:( move 3 , ul ; move 3 , 4 ; move 2 , ul )  decode:loop 0 , 3 , move 4 - ua , v0 * 9 
[16957] c:0 is:( move ua , 4 ; move ul , 4 ; move 3 , 2 )  decode:loop 0 , 2 , move 2 - ua , 2 / v0 
[16958] c:0 is:( move 2 , 4 ; move ua , 4 ; move 3 , ul )  decode:( move 3 , 9 + 4 ; move 3 , 4 ) 
[16959] c:0 is:( move 4 , 2 ; move 2 , ul ; move 4 , ul )  decode:( move 5 , 2 ; move 5 , 5 ) 
[16960] c:0 is:( move 4 , ul ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 3 , move 4 , ul 
[16961] c:0 is:( loop 0 , 6 , move 2 , 2 ; move ul , ul )  decode:loop 0 , 4 , move 3 , : + v0 
[16962] c:0 is:( move ua , 3 ; move 3 , ul ; move 3 , 4 )  decode:( move 0 - 9 , 0 ; move 3 , 5 ) 
[16963] c:0 is:( loop 0 , 6 , move 4 , 2 ; move ua , ua )  decode:loop 0 , 4 , move 0 - ua , v0 * 4 
[16964] c:0 is:( move 3 , 3 ; move ul , 2 + move ua , 4 )  decode:( move ua - ul , 3 ; move 3 , ul ) 
[16965] c:0 is:( move ua , 3 ; move 4 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move ua - ul , 3 - v0 
[16966] c:0 is:( move 3 , 4 ; move ul , 2 ; move ua , 4 )  decode:( move 3 , 4 ; move ua , ul / 4 ) 
[16967] c:0 is:( move 4 , 2 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 3 , move ua - v0 , 2 + 3 
[16968] c:0 is:( move 2 , ul ; move 4 , 4 ; move 2 , ul )  decode:( move 2 , 4 ; move 5 , 0 - 4 ) 
[16969] c:0 is:( move ua , 3 ; move 2 , ul ; move 4 , 4 )  decode:( move ua + 2 , 3 ; move 4 , 2 ) 
[16970] c:0 is:( move ua , 2 ; move 4 , 3 ; move 4 , ul )  decode:loop 0 , 3 , move ua - 2 , v0 - ul 
[16971] c:0 is:( move ua , 4 ; move ul , 2 ; move 3 , 4 )  decode:( move ua , 4 ; move 3 , 9 ) 
[16972] c:0 is:( move 4 , 2 ; move 4 , 2 ; move ul , ul )  decode:loop 0 , 2 , move 2 - ua , 2 
[16973] c:0 is:( move 3 , 3 ; move ul , 3 ; move 3 , ul )  decode:( move 3 , 3 ; move 3 , 4 ) 
[16974] c:0 is:( move 2 , 4 ; move ul , ul ; move 4 , 2 )  decode:( move 3 , 2 ; move 4 , 2 ) 
[16975] c:0 is:loop 0 , 2 , ( move ul , 4 ; move 4 , ul )  decode:( move 5 , 5 ; move 5 , ua * ua ) 
[16976] c:0 is:( loop 0 , 6 , move 2 , ul ; move ua , 3 )  decode:loop 0 , 4 , move 0 - 4 , 3 * 4 
[16977] c:0 is:( move 2 , 4 ; move 3 , ul ; move ua , 4 )  decode:( move 4 , 5 ; move ua , 4 ) 
[16978] c:0 is:( move 3 , 4 ; move 2 , ul ; move ua , 4 )  decode:( move 2 - ua , ul ; move 5 , 5 ) 
[16979] c:0 is:( move 4 , 2 ; move ul , 4 ; move 3 , ul )  decode:( move 4 , 2 ; move 3 - ua , 5 ) 
[16980] c:0 is:( move 2 , 3 ; move 4 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , 2 / v0 
[16981] c:0 is:( move 3 , ul ; move 4 , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 3 - ua , ul 0 - 9 
[16982] c:0 is:( loop 0 , 6 , move ul , ul ; move 3 , 2 )  decode:loop 0 , 4 , move ua - 4 , 7 / v0 
[16983] c:0 is:( move 3 , 3 ; move ua , 4 ; move 4 , ul )  decode:( move 4 , v; move ua + ul , 4 ) 
[16984] c:0 is:( move 2 , 4 ; move ul , 3 ; move 4 , ul )  decode:( move 2 , 4 ; move 4 , 4 ) 
[16985] c:0 is:( move ua , 4 ; move ul , 2 ; move 4 , 4 )  decode:( move 9 , 4 ; move 3 , 9 + 4 ) 
[16986] c:0 is:( move ua , 3 ; move 4 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move ua - 2 , 3 / 5 
[16987] c:0 is:( move 4 , 3 ; move ul , 3 ; move 3 , ul )  decode:( move 4 , 3 ; move 3 - ua , 4 ) 
[16988] c:0 is:( move 4 , ul ; move 4 , 2 ; move 3 , ul )  decode:loop 0 , 4 , move v0 + ul , ul / 0 
[16989] c:0 is:( move ua , 3 ; move 3 , ul ; move 4 , 4 )  decode:( move 9 , 3 ; move 4 , ua * ua ) 
[16990] c:0 is:( move 3 , 4 ; move ul , 3 ; move 3 , ul )  decode:( move 3 , 4 ; move 3 , 4 ) 
[16991] c:0 is:( move ua , 4 ; move 2 , 4 ; move 4 , ul )  decode:( move ul - ua , 4 ; move ua , 5 ) 
[16992] c:0 is:( move 4 , ul ; move 2 , 4 ; move ua , 4 )  decode:( move 4 , ul ; move ua , 8 ) 
[16993] c:0 is:( move ua , 4 ; move 3 , ul ; move 3 , 4 )  decode:( move 9 , 4 ; move 4 , ua * ua ) 
[16994] c:0 is:( move ul , 3 ; move 4 , 4 ; move ua , 3 )  decode:( move ua , 4 / ua ; move 5 , 3 ) 
[16995] c:0 is:( move 3 , 2 ; move ul , 4 ; move 4 , ul )  decode:( move 3 , 2 ; move 5 , 5 ) 
[16996] c:0 is:( move ua , 3 ; move 4 , 3 ; move ul , 4 )  decode:loop 0 , 3 , move 4 , 3 
[16997] c:0 is:( move ua , 4 ; move 4 , ul ; move 4 , 2 )  decode:loop 0 , 4 , move 3 - ua , 4 / v0 
[16998] c:0 is:( move 3 , 4 ; move 3 , 4 ; move ua , ul )  decode:( move 4 , 7 ; move ua + 2 , 2 ) 
[16999] c:0 is:( move 4 , 2 ; move 4 , 4 ; move ua , ul )  decode:( move 4 , 5 ; move 9 , ua * ua ) 
[17000] c:0 is:( move 4 , 4 ; move ul , 4 ; move ua , 2 )  decode:( move 4 , 3 ; move ua , 0 - 6 ) 
[17001] c:0 is:( move ul , 4 ; loop 0 , 3 , move 4 , ul )  decode:( move ua , 9 ; move 5 , 4 * 5 ) 
[17002] c:0 is:( move 4 , ul ; move 3 , 4 ; move ua , 3 )  decode:loop 0 , 3 , move 4 , 4 + 8 0 0 
[17003] c:0 is:( move 4 , 4 ; move ul , 2 ; move ua , 4 )  decode:loop 0 , 4 , move v0 + 2 , 2 / 4 
[17004] c:0 is:( move 2 , ul ; move 3 , 4 ; move 4 , ul )  decode:( move 3 , 4 ; move ua - ul , 5 ) 
[17005] c:0 is:( move ua , 3 ; move 4 , 4 ; move 3 , ul )  decode:( move 5 , 3 ; move 8 , 4 ) 
[17006] c:0 is:( move 4 , 3 ; move 3 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , 3 + 8 
[17007] c:0 is:( move 2 , ul ; move 4 , 4 ; move 3 , ul )  decode:loop 0 , 4 , move 2 , v0 - ul 
[17008] c:0 is:( move 3 , 2 ; move ua , ul ; move 5 , 4 )  decode:( move 9 , ua * 2 ; move ua , 4 ) 
[17009] c:0 is:( move 4 , 3 ; move 4 , ul ; move 2 , ul )  decode:loop 0 , 4 , move 4 - ua , v0 / 2 
[17010] c:0 is:( move 4 , 3 ; move ul , 4 ; move 2 , ul )  decode:( move 3 , 3 ; move 3 , ua * ua ) 
[17011] c:0 is:( move ul , 4 ; move 4 , 2 ; move 3 , ul )  decode:( move 4 , 4 / 5 ; move 4 , ul ) 
[17012] c:0 is:( move 3 , ul ; move 2 , 4 ; move 4 , ul )  decode:( move 3 , ul ; move ul - ua , 5 ) 
[17013] c:0 is:( move ua , 9 ; move 2 , 2 ; move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , 2 / 3 
[17014] c:0 is:( move 2 , 4 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , 2 / 3 
[17015] c:0 is:( move 4 , 4 ; move ua , 4 ; move 2 , ul )  decode:loop 0 , 3 , move 4 , v0 + v0 
[17016] c:0 is:( move ua , 3 ; move ul , 4 ; move 3 , 4 )  decode:( move ua , 3 ; move 3 , 9 ) 
[17017] c:0 is:( move 3 , 4 ; move 4 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 3 , 4 * 3 
[17018] c:0 is:( move ua , 4 ; move 4 , 4 ; move 2 , ul )  decode:loop 0 , 3 , move v0 - ua , 4 
[17019] c:0 is:( move 2 , 4 ; move ul , 4 ; move ua , 4 )  decode:( move 2 , 4 ; move ua , 9 ) 
[17020] c:0 is:( move ua , 3 + move 3 , ul ; move 3 , 4 )  decode:( move ua + 3 , 3 ; move 3 , 4 ) 
[17021] c:0 is:( move 3 , 3 ; move 4 , 2 - move ua , ul )  decode:( move 3 , 3 ; move ua , ua / 4 ) 
[17022] c:0 is:( move 4 , 4 ; move 2 , ul ; move 3 , ul )  decode:( move 5 , 4 ; move 4 , 5 ) 
[17023] c:0 is:( move 3 , 4 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 3 , move 2 - ua , 4 / v0 
[17024] c:0 is:( move ul - ua , 9 / ua ; move ua , ul )  decode:( move ul - ua , 2 ; move ua , ul ) 
[17025] c:0 is:( move 3 , 4 ; move ua , 4 ; move 3 , ul )  decode:( move 3 , 4 ; move ua + 2 , 4 ) 
[17026] c:0 is:( move 2 , 3 ; move ul , ul ; move 4 , 4 )  decode:( move 3 , 3 ; move 3 - ua , 5 ) 
[17027] c:0 is:( move 3 , 4 ; move 3 , ul ; move ua , 4 )  decode:( move ua , 4 ; move ul - ua , 7 ) 
[17028] c:0 is:( move 3 , 3 ; move ul , 4 ; move ua , 4 )  decode:( move 3 , 3 ; move ua , 8 ) 
[17029] c:0 is:( move 3 , 4 ; move ua , ul ; move 3 , 4 )  decode:( move 3 , 9 ; move ua + ul , 4 ) 
[17030] c:0 is:( move 4 , ua ; loop 0 , 6 , move 2 , ul )  decode:loop 0 , 4 , move 4 , 5 / v0 
[17031] c:0 is:( move 3 , ul ; move 3 , 4 ; move ua , 4 )  decode:loop 0 , 3 , move 3 - ua , v0 + 4 
[17032] c:0 is:( move 4 , 2 ; move ul , ul ; move 3 , 4 )  decode:( move 5 , 2 ; move 3 , 5 ) 
[17033] c:0 is:( move 4 , 2 ; move 4 , ul ; move ua , 4 )  decode:( move ua + 3 , 3 ; move 5 , 4 ) 
[17034] c:0 is:( move 4 , 3 ; move ul , ul ; move 3 , 3 )  decode:( move 4 , 3 ; move 3 , 4 ) 
[17035] c:0 is:( move ua , 4 ; move 4 , 3 ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , 4 ) 
[17036] c:0 is:loop 0 , 3 , ( move 4 , ul ; move ul , 4 )  decode:loop 0 , 4 , move 4 ,  4 / 3 
[17037] c:0 is:( move 3 , 3 ; move ul , ul ; move 4 , 3 )  decode:( move 3 , 3 ; move 4 , 4 ) 
[17038] c:0 is:( move 3 , 4 ; move 2 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , 4 / v0 
[17039] c:0 is:( move 2 , ul ; move 3 , ul ; move 4 , 4 )  decode:( move 4 , 9 ; move 5 , 0 - 4 ) 
[17040] c:0 is:( move 4 , 2 ; move ul , 4 ; move ua , 4 )  decode:( move 4 , 8 ; move ua , ua * ua ) 
[17041] c:0 is:( move 4 , 3 ; move ul , 2 ; move 4 , ul )  decode:( move 4 , 3 ; move 5 , 4 ) 
[17042] c:0 is:( move ua , 2 ; move 4 , 4 ; move 4 , ul )  decode:( move 5 , 2 ; move ua + 2 , 4 ) 
[17043] c:0 is:( move 4 , 3 ; move ul , 4 ; move ua , 3 )  decode:( move 4 , 3 ; move ua - ul , 7 ) 
[17044] c:0 is:( move ua , 4 ; move ul , 4 ; move 4 , 2 )  decode:( move ul - ua , 4 ; move 5 , 9 ) 
[17045] c:0 is:( move 4 , 2 ; move 3 , ul ; move 4 , ul )  decode:( move 5 , 2 ; move ua - ul , 5 ) 
[17046] c:0 is:( move ul , 3 ; loop 0 , 4 , move 4 , ul )  decode:loop 0 , 4 , move 0 - 4 , 4 * 0 4 4 / 
[17047] c:0 is:( move 2 , 4 ; move 4 , 4 ; move ua , ul )  decode:( move 3 - ua , 5 ; move ua , 4 ) 
[17048] c:0 is:( move 4 , 3 ; move 3 , ul ; move ua , 4 )  decode:( move ua + 2 , 3 ; move 5 , 4 ) 
[17049] c:0 is:( move ua , 4 ; move 3 , 3 ; move 4 , ul )  decode:( move ua , 4 ; move ua , 4 * 4 ) 
[17050] c:0 is:( move ua , ul ; move 4 , 4 ; move 4 , 2 )  decode:loop 0 , 3 , move ua - 2 , ua / v0 
[17051] c:0 is:( move 3 , 3 ; move ua , ul ; move 4 , 4 )  decode:( move 8 , 3 ; move ua - 2 , 4 ) 
[17052] c:0 is:( move ua , 3 ; move 3 , 4 ; move 4 , ul )  decode:( move 5 , 3 ; move ua + 2 , 4 ) 
[17053] c:0 is:( move 4 , ul ; move 3 , 3 ; move ua , 4 )  decode:( move 4 , 4 ; move ua + ul , 4 ) 
[17054] c:0 is:( move ua , 4 ; move 4 , 2 ; move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , 4 / v0 
[17055] c:0 is:( move ua , 9 / ua ; move ul - ua , ul )  decode:( move ua , 9 + ua ; move 5 , 4 ) 
[17056] c:0 is:( move ua , 6 ; move 2 , ul ; move 2 , 4 )  decode:loop 0 , 4 , move 4 - ua , 3 + v0 
[17057] c:0 is:( move 3 , 2 ; move ul , ul ; move 5 , 3 )  decode:( move 3 , 2 ; move 4 , 4 ) 
[17058] c:0 is:( move 4 , 2 ; move ul , 3 ; move 4 , ul )  decode:( move 3 , 2 ; move 5 , 4 ) 
[17059] c:0 is:( move 4 , 2 ; move ul , ul ; move 4 , 3 )  decode:( move 5 , 9 ; move 4 , 0 - 4 ) 
[17060] c:0 is:( move 4 , 4 ; move 2 , ul ; move ua , 4 )  decode:( move ul - ua , ul ; move 5 , 7 ) 
[17061] c:0 is:( move 4 , 4 ; move 4 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 - ua , v0 + 4 
[17062] c:0 is:( move 3 , 3 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , v0 - 5 
[17063] c:0 is:( move 4 , ul ; move 3 , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[17064] c:0 is:( move ua , 3 ; move ul , 4 ; move 4 , 3 )  decode:( move ua , 3 ; move 4 , 7 ) 
[17065] c:0 is:( move 4 , ul ; move 2 , 3 ; move 4 , ul )  decode:( move 3 , ul ; move ua - ul , 4 ) 
[17066] c:0 is:( move ul - ua , ul / ua ; move 8 , ul )  decode:( move 5 , 0 - 9 ; move 8 , ul ) 
[17067] c:0 is:( move 2 , 4 ; move ua , 4 ; move 4 , ul )  decode:( move 3 , 8 ; move ua - ul , 4 ) 
[17068] c:0 is:( move 4 , 4 ; move 2 , 4 ; move ua , ul )  decode:( move 4 , 4 ; move ua + 2 , 5 ) 
[17069] c:0 is:( move 4 , 4 ; move 3 , 3 ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , 4 ) 
[17070] c:0 is:( move 4 , 4 ; move ul , 2 ; move 3 , ul )  decode:( move 4 , 4 ; move 4 , ul ) 
[17071] c:0 is:( move 4 , 2 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , 2 - 3 
[17072] c:0 is:( move 9 , ul / ua ; move ua , ua * ua )  decode:( move 9 , ul / ua ; move ua , 8 ) 
[17073] c:0 is:( move 4 , ul ; move 3 , 4 ; move 2 , ul )  decode:( move 4 , ul ; move ul - ua , 7 ) 
[17074] c:0 is:( move ua , 3 ; move 4 , 3 ; move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , 4 * v0 
[17075] c:0 is:( move 4 , ul ; move 2 , ul ; move 3 , 4 )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[17076] c:0 is:( loop 0 , 6 , move ua , 2 ; move ul , 4 )  decode:0 0 0 loop 0 , 4 , move 0 - ua , 2 
[17077] c:0 is:( move 4 , ul ; move 2 , 4 ; move 3 , ul )  decode:( move 3 , 4 ; move ua - ul , 5 ) 
[17078] c:0 is:( move 3 , 2 ; loop 0 , 6 , move ul , ul )  decode:( move 4 , 2 ; move 4 , 0 - 4 ) 
[17079] c:0 is:( move 4 , 3 ; move ul , ul ; move 2 , 4 )  decode:( move 5 , 3 ; move 2 , ua * ua ) 
[17080] c:0 is:( move 3 , ul ; move 3 , 4 ; move 3 , ul )  decode:loop 0 , 4 , move ua - 4 , v0 + 8 
[17081] c:0 is:( move 2 , 4 ; move ul , ul ; move 3 , 4 )  decode:loop 0 , 4 , move v0 , v0 / 2 
[17082] c:0 is:( move 3 , ul ; move 4 , 4 ; move 2 , ul )  decode:( move 3 , ul ; move ua - ul , 4 ) 
[17083] c:0 is:( move 4 , 2 ; move 2 , ul ; move 5 , ul )  decode:( move 5 , 2 ; move ua , 5 ) 
[17084] c:0 is:( move 4 , ul ; loop 0 , 5 , move ua , 3 )  decode:loop 0 , 4 , move v0 - ua , 4 - 3 
[17085] c:0 is:( move ua , 4 ; move 4 , ul ; move 2 , 4 )  decode:( move 9 , 4 ; move 4 , 4 - 3 ) 
[17086] c:0 is:( move 3 , 4 ; move ul , ul ; move 4 , 2 )  decode:( move 3 , 4 ; move 4 , 2 ) 
[17087] c:0 is:( move 3 , 3 ; move 3 , 4 ; move ul , ul )  decode:( move 3 , 3 ; move 4 , ul ) 
[17088] c:0 is:( move ul , 4 ; move 2 , 4 ; move 3 , ul )  decode:loop 0 , 3 , move 2 , 4 - v0 
[17089] c:0 is:( move 4 , ul ; move 4 , 3 ; move ua , 3 )  decode:( move ul - ua , 0 ; move ua , 3 ) 
[17090] c:0 is:( move 3 , 4 ; move ul , 4 ; move 2 , ul )  decode:( move 3 , 4 ; move 3 , 4 ) 
[17091] c:0 is:( move 3 , 3 ; move ul , ul ; move 3 , 4 )  decode:( move 4 , 3 ; move 3 , ua * ua ) 
[17092] c:0 is:( move ua , 4 ; move 3 , 4 ; move 3 , ul )  decode:loop 0 , 3 , move 4 , 4 + 3 / v0 
[17093] c:0 is:( move 3 , ul ; move ul , 4 ; move 4 , 2 )  decode:( move 3 , ul ; move 4 , 4 + ua ) 
[17094] c:0 is:( move 4 , 2 ; move ua , ul ; move 4 , 4 )  decode:( move 9 , 2 ; move 4 , 4 ) 
[17095] c:0 is:( move 4 , 4 ; move 3 , ul ; move 2 , ul )  decode:( move 5 , 4 ; move 3 , ul ) 
[17096] c:0 is:( move 4 , 4 ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move 4 , 4 / v0 
[17097] c:0 is:( move ua , 4 ; move 4 , 2 ; move ul , 4 )  decode:( move ua , 4 ; move 5 , 2 ) 
[17098] c:0 is:( move ul , ul ; loop 0 , 4 , move 3 , 4 )  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[17099] c:0 is:( move 4 , 3 ; move 2 , ul ; move 4 , ul )  decode:( move 2 - ua , ul ; move 5 , 5 ) 
[17100] c:0 is:( move ua , 2 ; move ul , 4 ; move 4 , 4 )  decode:( move ua , 2 ; move 4 , 9 ) 
[17101] c:0 is:( move ua , 2 ; move 4 , ul ; move 4 , 4 )  decode:( move 9 , 2 ; move 4 , 4 ) 
[17102] c:0 is:( move 2 , 6 ; move 2 , ul ; move 3 , ul )  decode:loop 0 , 3 , move ua - 4 , 3 / v0 
[17103] c:0 is:( move 4 , 3 ; move 3 , 4 ; move ua , ul )  decode:loop 0 , 4 , move 3 - ua , 9 + v0 
[17104] c:0 is:( move ua , 2 ; move ul , 2 ; move 5 , 5 )  decode:( move 5 , 2 ; move ua , 7 ) 
[17105] c:0 is:( move 3 , 2 ; move 4 , ul ; move 4 , ul )  decode:( move 5 , ul ; move ua , 5 / 4 ) 
[17106] c:0 is:( move 3 , 3 ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , 8 / v0 
[17107] c:0 is:( move ua , 4 ; move 4 , 3 ; move 3 , ul )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[17108] c:0 is:( move 3 , 3 ; move ul , 4 ; move 3 , ul )  decode:( move 3 , 3 ; move 4 , ua * ua ) 
[17109] c:0 is:( move ua , 4 ; move ul , 4 ; move 3 , 4 )  decode:( move ua , 4 ; move 3 , 9 ) 
[17110] c:0 is:( move ul , 3 ; loop 0 , 6 , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - 5 0 0 0 5 / 
[17111] c:0 is:( move 3 , 4 ; move 3 , 4 ; move ul , ul )  decode:( move 3 , 4 ; move 4 , 4 ) 
[17112] c:0 is:( move 4 , 4 ; move ul , 3 ; move ua , 4 )  decode:( move 3 , 4 ; move ua , 7 ) 
[17113] c:0 is:( move 3 , 4 ; move 2 , ul - move ua , 4 )  decode:( move 3 , 4 ; move ua + ul , ul ) 
[17114] c:0 is:( move 4 , 4 ; move 3 , 4 ; move ua , ul )  decode:( move 4 , 7 ; move ua + 3 , 4 ) 
[17115] c:0 is:( move 3 , ul ; move 3 , 4 ; move 4 , ul )  decode:( move 3 , ul ; move ua , 4 ) 
[17116] c:0 is:( move 4 , ul ; move 4 , 4 ; move 2 , ul )  decode:( move 4 , ul ; move ua - ul , 7 ) 
[17117] c:0 is:( move 4 , 4 ; move ul , 2 ; move 4 , ul )  decode:( move 4 , 4 ; move 4 , 4 ) 
[17118] c:0 is:( move 3 , 4 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , 0 - 4 / 3 
[17119] c:0 is:( move 2 , ul ; move 4 , 4 ; move 4 , ul )  decode:( move 3 , 4 ; move ua , 0 - 2 ) 
[17120] c:0 is:( move ul , 4 ; loop 0 , 4 , move 4 , ul )  decode:loop 0 , 4 , move 4 , 4 * 3 - v0 
[17121] c:0 is:( move ua , 4 ; move 4 , 4 ; move ua , 4 )  decode:loop 0 , 3 , move v0 + 4 , 4 
[17122] c:0 is:( move 4 , ul ; move 3 , 4 ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 + 4 
[17123] c:0 is:( move 3 , 4 ; move ul , 3 ; move 4 , ul )  decode:( move 3 , 4 ; move 4 , 4 ) 
[17124] c:0 is:( move 3 , 4 ; move ua , 4 ; move 4 , ul )  decode:( move 4 , ua / 3 ; move 8 , 2 ) 
[17125] c:0 is:( move ua , ul / 9 ; move ul - ua , ul )  decode:( move ua , ul / 4 ; move 5 , 2 ) 
[17126] c:0 is:( move 4 , 4 ; move ul , ul ; move 2 , 4 )  decode:( move 2 , 6 ; move ua - ul , 3 ) 
[17127] c:0 is:( move 6 , 2 ; move 3 , ul ; move 3 , ul )  decode:( move 3 + 4 , 2 ; move 4 , 2 ) 
[17128] c:0 is:( move 4 , ul ; move 4 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , v0 + 2 
[17129] c:0 is:( move 4 , 3 ; move ul , 4 ; move 3 , ul )  decode:( move 3 , 3 ; move 4 , ua * ua ) 
[17130] c:0 is:( move 4 , ul ; move 3 , ul ; move 3 , 4 )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[17131] c:0 is:( move 4 , ul ; move ul , 4 ; move 4 , 2 )  decode:( move 4 , ul ; move 4 , 4 - v0 ) 
[17132] c:0 is:( loop 0 , 4 , move ul , ul ; move 4 , 4 )  decode:loop 0 , 4 , move 2 , 5 / v0 
[17133] c:0 is:( move 3 , ul ; move 4 , 4 ; move 3 , ul )  decode:loop 0 , 4 , move ua - 4 , v0 * 2 
[17134] c:0 is:( move ul , ul ; loop 0 , 4 , move 4 , 4 )  decode:loop 0 , 4 , move ua - 2 , 9 / v0 
[17135] c:0 is:( move 3 , ul ; move 4 , ul ; move 3 , 4 )  decode:( move ua , ua * ua ; move 3 , 4 ) 
[17136] c:0 is:( move ua , ul ; loop 0 , 6 , move 4 , 3 )  decode:loop 0 , 4 , move 2 - ua , v0 - 3 
[17137] c:0 is:( move 4 , 3 ; move ul , ul ; move 3 , 4 )  decode:( move 5 , 3 ; move 3 , 5 ) 
[17138] c:0 is:( move 4 , 4 ; move 4 , ul ; move 2 , ul )  decode:0 0 loop 0 , 3 , move 3 , 4 / 3 
[17139] c:0 is:( move ua , 4 ; move 4 , 4 ; move 3 , ul )  decode:loop 0 , 3 , move 4 , 4 + 3 * v0 
[17140] c:0 is:( move 4 , 4 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 3 , move 4 + v0 , 5 / 3 
[17141] c:0 is:( move ul , 4 ; loop 0 , 5 , move ua , 4 )  decode:loop 0 , 4 , move ua , 0 - ua / 5 
[17142] c:0 is:( move 4 , 4 ; move 2 , ul ; move 4 , ul )  decode:( move 5 , 4 ; move 2 - ua , 5 ) 
[17143] c:0 is:( move ua , 4 ; move 4 , 3 ; move 4 , ul )  decode:( move ua , 4 ; move ua , 4 / ua ) 
[17144] c:0 is:( move 3 , 4 ; move 4 , ul ; move ua , 4 )  decode:( move ua + ul , 5 ; move ua , 4 ) 
[17145] c:0 is:( move 4 , 4 ; move ul , 4 ; move 2 , ul )  decode:( move 4 , 4 ; move 3 , 3 + 2 ) 
[17146] c:0 is:( move 4 , 3 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 - 8 
[17147] c:0 is:( move 3 , 3 ; move 4 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[17148] c:0 is:( move 3 , 4 ; move ua , ul ; move 4 , 4 )  decode:( move 3 + ua , 5 ; move 4 , 4 ) 
[17149] c:0 is:( move 4 , 3 ; move ul , 4 ; move ua , 4 )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[17150] c:0 is:( move 4 , 3 ; move 4 , ul ; move ua , 4 )  decode:( move ua + 3 , 4 ; move 5 , 4 ) 
[17151] c:0 is:( move 4 , 2 ; move ul , 4 ; move 4 , ul )  decode:( move 4 , 2 ; move 5 , 5 ) 
[17152] c:0 is:( move 4 , 3 ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 4 , move 4 - ua , 3 / v0 
[17153] c:0 is:( move 2 , 4 ; move ul , 4 ; move 4 , ul )  decode:loop 0 , 3 , move ua - 4 , 4 / v0 
[17154] c:0 is:( move ua , 3 ; loop 0 , 6 , move 4 , ul )  decode:loop 0 , 4 , move 4 + 3 , ua * 9 
[17155] c:0 is:( move 3 , 4 ; move ul , 4 - move ua , 2 )  decode:( move 3 , 4 ; move ua , 5 ) 
[17156] c:0 is:( move 4 , ul ; move 3 , 4 ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , 4 * 0 
[17157] c:0 is:( move 4 , 2 ; move ul , ul ; move 4 , 4 )  decode:( move 5 , 2 ; move 4 , 5 ) 
[17158] c:0 is:( move ua , 3 ; move ul , 4 ; move 4 , 4 )  decode:( move ua , 3 ; move 4 , ua * ua ) 
[17159] c:0 is:( move 3 , 4 ; move ul , 4 ; move ua , 4 )  decode:( move 3 , 4 ; move ua , 9 ) 
[17160] c:0 is:( move 4 , ul ; move 2 , ul ; move 4 , 4 )  decode:( move 6 , ua / 4 ; move 4 , 7 ) 
[17161] c:0 is:( move 3 , 3 ; move 4 , 4 ; move ul , ul )  decode:( move 3 , 3 ; move 5 , 4 ) 
[17162] c:0 is:( move ua , ul ; move 4 , 3 ; move 4 , 4 )  decode:( move ua , 0 - 9 ; move ua , 3 ) 
[17163] c:0 is:( move 4 , ul ; move 3 , 3 ; move 4 , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 * 2 
[17164] c:0 is:( move ua , 4 ; move 3 , ul ; move 4 , 4 )  decode:loop 0 , 4 , move 3 - ua , 9 * v0 
[17165] c:0 is:( move 2 , 4 ; loop 0 , 6 , move ul , ul )  decode:loop 0 , 3 , move 3 / v0 , ua / 4 
[17166] c:0 is:( move ul , 2 ; move 4 , ul ; move 4 , 4 )  decode:( move 5 , 3 ; move 4 , 4 ) 
[17167] c:0 is:( move ua , 2 ; loop 0 , 3 , move ua , 9 )  decode:loop 0 , 4 , move ua ,  9 
[17168] c:0 is:( move ua , 4 ; move 3 , 4 ; move 4 , ul )  decode:( move ul - ua , 4 ; move ua , 6 ) 
[17169] c:0 is:( move 4 , 4 ; move ua , 4 ; move 3 , ul )  decode:( move 4 , 4 ; move ua + 2 , 4 ) 
[17170] c:0 is:( move ua , 6 ; move 3 , 3 ; move 3 , ul )  decode:( move ua , 6 ; move ua , 3 ) 
[17171] c:0 is:( move ua , 6 ; move 3 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move ul - ua , 3 - v0 
[17172] c:0 is:( move 3 , 3 ; move ul , ul ; move 4 , 4 )  decode:( move 4 , 3 ; move 3 - ua , 5 ) 
[17173] c:0 is:( move 4 , ul ; move 4 , 4 ; move ua , 3 )  decode:( move ua , ul ; move 7 , 3 ) 
[17174] c:0 is:( move 4 , ul ; move 4 , ul ; move 2 , 4 )  decode:( move 4 + 3 , ul ; move 2 , 4 ) 
[17175] c:0 is:( move 4 , 3 ; move ua , ul ; move 4 , 4 )  decode:( move 8 , 4 ; move ul - ua , 4 ) 
[17176] c:0 is:( move 3 , ul ; move 3 , 5 ; move 3 , ul )  decode:loop 0 , 3 , move 3 / v0 , 4 / ua 
[17177] c:0 is:( move 4 , ul ; move 2 , 4 ; move 4 , ul )  decode:( move 4 , ul ; move ul - ua , 5 ) 
[17178] c:0 is:( move 4 , 3 ; move ul , ul ; move 4 , 3 )  decode:( move 2 - ua , 3 ; move 4 , 4 ) 
[17179] c:0 is:( move ua , 9 ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 4 , move ua , 9 / v0 
[17180] c:0 is:( move 4 , 4 ; move 3 , ul ; move ua , 4 )  decode:loop 0 , 3 , move 4 + v0 , 9 * 3 
[17181] c:0 is:( move ua , 4 ; move 4 , ul ; move 3 , 4 )  decode:( move ua , 4 ; move 9 - ua , 4 ) 
[17182] c:0 is:( move 4 , 3 ; move ul , 3 ; move 4 , ul )  decode:( move 4 , 4 ; move 5 , 4 ) 
[17183] c:0 is:( move ua , 4 ; move ul , 3 ; move 4 , 4 )  decode:( move 5 , 4 ; move 4 , 7 ) 
[17184] c:0 is:( move 3 , 4 ; move 4 , 4 ; move ua , ul )  decode:( move 4 , 8 ; move ua + ul , 4 ) 
[17185] c:0 is:( move 3 , 4 ; move ul , ul ; move 4 , 3 )  decode:( move 4 , 4 ; move 3 , 4 ) 
[17186] c:0 is:( move ua , 2 ; move 3 , 3 ; move ua , 8 )  decode:( move ua , 8 ; move ua + ul , 8 ) 
[17187] c:0 is:( move ua , 3 ; move 4 , 4 ; move 4 , ul )  decode:( move 5 , 3 ; move 8 , 4 ) 
[17188] c:0 is:( move 3 , 4 ; move ul , 4 ; move 3 , ul )  decode:( move 3 , 4 ; move 4 , 5 ) 
[17189] c:0 is:( move 4 , ul ; move ul , 4 ; move 3 , 4 )  decode:( move 5 , ul ; move 3 , 4 ) 
[17190] c:0 is:( move 3 , 4 ; move ul , 4 ; move 4 , ul )  decode:( move 3 , 4 ; move ua - ul , 5 ) 
[17191] c:0 is:( move 3 , 6 ; move 2 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , v0 + 5 
[17192] c:0 is:( move 4 , ul ; move 3 , ul ; move 4 , 4 )  decode:( move ua , ul ; move 4 , 4 + 3 ) 
[17193] c:0 is:( move 4 , 3 ; move ul , 4 ; move 4 , ul )  decode:( move 4 , 3 ; move ul - ua , 5 ) 
[17194] c:0 is:( move 4 , 4 ; move 4 , ul ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , 9 * 3 
[17195] c:0 is:( move 4 , ul ; move 3 , 4 ; move 4 , ul )  decode:( move 4 , ul ; move ua , 4 ) 
[17196] c:0 is:( move ua , 4 ; move 4 , ul ; move 4 , 4 )  decode:loop 0 , 4 , move 3 - ua , 2 + v0 
[17197] c:0 is:( move ua , 4 ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 3 , move ua - v0 , 4 * 4 
[17198] c:0 is:( move 4 , 4 ; move 4 , 2 - move ua , ul )  decode:( move 4 , 9 + 4 ; move ua , 8 ) 
[17199] c:0 is:( move 5 , 4 ; move 3 , ul ; move 3 , ul )  decode:( move ua , 4 ; move 4 , 5 ) 
[17200] c:0 is:( move 4 , ul ; move 4 , 4 ; move 3 , ul )  decode:( move 4 , ul ; move ua , 4 ) 
[17201] c:0 is:( move 5 , 3 ; move ul , 3 ; move 4 , ul )  decode:( move 2 - ua , 4 ; move 5 , 4 ) 
[17202] c:0 is:( move 4 , 4 ; move 4 , 4 ; move ua , ul )  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[17203] c:0 is:( move 4 , 4 ; move ul , 4 ; move ua , 4 )  decode:( move 4 , 4 ; move ua , 9 ) 
[17204] c:0 is:( move 3 , 6 ; move ul , ul ; move 4 , 2 )  decode:( move 4 , 6 ; move 4 , 4 ) 
[17205] c:0 is:( move 4 , 2 ; move ul , ul ; move 4 , 5 )  decode:( move 4 , 2 ; move 4 , 5 ) 
[17206] c:0 is:( move 4 , 6 ; move 2 , ul ; move ua , 4 )  decode:( move ua , 6 ; move ua , 4 ) 
[17207] c:0 is:( move 3 , 3 ; move ul , ul ; move 5 , 4 )  decode:( move 4 , 3 ; move 4 , 5 ) 
[17208] c:0 is:( move 4 , 4 ; move ul , 4 ; move 3 , ul )  decode:( move 4 , 4 ; move 3 - ua , 8 ) 
[17209] c:0 is:( move ua , ul ; loop 0 , 6 , move 4 , 4 )  decode:loop 0 , 4 , move v0 + 4 , : : 0 
[17210] c:0 is:( move 4 , 4 ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 4 , move 4 - ua , 4 * 3 
[17211] c:0 is:( move 4 , 4 ; move 3 , 4 ; move ul , ul )  decode:( move 4 , 4 ; move 3 - ua , ul ) 
[17212] c:0 is:( move ul , 3 ; move 4 , ul ; move 4 , 4 )  decode:loop 0 , 3 , move 3 - ua , 4 
[17213] c:0 is:( move 4 , 4 ; move ul , ul ; move 3 , 4 )  decode:( move ul - ua , ul ; move 3 , 5 ) 
[17214] c:0 is:( move 4 , 4 ; move ul , ul ; move 4 , 3 )  decode:( move 5 , 4 ; move 4 , 4 ) 
[17215] c:0 is:( move 2 , 4 + move ul , 4 ; move 4 , ul )  decode:loop 0 , 2 , move 0 - 3 , v0 / 4 
[17216] c:0 is:( move 4 , 2 ; move ul , ul ; move 5 , 4 )  decode:( move 5 , 2 ; move 4 , 5 ) 
[17217] c:0 is:( move 4 , 2 / move 4 , ul ; move ua , 2 )  decode:loop 0 , 4 , move v0 * 2 , 0 - 9 
[17218] c:0 is:( move 4 , 4 ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , 4 / 5 
[17219] c:0 is:( move 3 , ul ; move 4 , ul ; move 4 , 4 )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[17220] c:0 is:( move 3 , ul ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 4 - ua , 2 / v0 
[17221] c:0 is:( move ul , 4 ; loop 0 , 6 , move 3 , ul )  decode:loop 0 , 4 , move 4 , 4 / 3 
[17222] c:0 is:( move 5 , ul ; move 4 , ul ; move 4 , 2 )  decode:0 loop 0 , 3 , move 5 - v0 , ul 
[17223] c:0 is:( move ua , 6 ; move 3 , 4 ; move 3 , ul )  decode:( move 5 , 6 ; move ua + ul , 7 ) 
[17224] c:0 is:( move 4 , ul ; move 4 , ul ; move 3 , 4 )  decode:( move 8 , ua / 4 ; move 3 , 4 ) 
[17225] c:0 is:( move 3 , 4 ; move 4 , 4 ; move ul , ul )  decode:( move 3 , 4 ; move 5 , 4 ) 
[17226] c:0 is:( move 3 , ul ; move ul , 4 ; move 4 , 4 )  decode:( move 3 , ul ; move 4 , ua * ua ) 
[17227] c:0 is:( move 4 , 4 ; move ua , 4 ; move 4 , ul )  decode:( move 4 , 7 ; move ua + 2 , 4 ) 
[17228] c:0 is:( move 4 , 2 ; move ul , 4 ; move 5 , ul )  decode:( move 3 , 2 ; move ua , 5 ) 
[17229] c:0 is:( move 3 , 4 ; loop 0 , 6 , move ul , ul )  decode:loop 0 , 3 , move 3 , 0 - 9 0 
[17230] c:0 is:( move 4 , 4 ; move 4 , 4 ; move ul , ul )  decode:( move 4 , 4 ; move 5 , 4 ) 
[17231] c:0 is:( move 2 , 9 ; move 2 , 4 ; move ua , ul )  decode:( move 3 , 2 * 5 ; move ua , 5 ) 
[17232] c:0 is:( move 3 , 4 - move ua , ul ; move 4 , 4 )  decode:( move 4 , 9 ; move 5 , 4 ) 
[17233] c:0 is:( move ua , 9 ; move 2 , ul ; move 4 , 2 )  decode:( move ua + 2 , 9 ; move 4 , 2 ) 
[17234] c:0 is:( move 4 , 3 ; move ul , ul ; move 5 , 4 )  decode:( move 5 , 3 ; move 4 , 5 ) 
[17235] c:0 is:( move ua , 9 ; move 2 , 2 ; move 4 , ul )  decode:( move ua , 9 ; move 5 , 2 ) 
[17236] c:0 is:( move 2 , 9 ; move ul , 2 ; move ua , 4 )  decode:( move 4 , 9 ; move ua - ul , 3 ) 
[17237] c:0 is:( move ua , ul ; move 4 , 4 ; move 4 , 5 )  decode:loop 0 , 3 , move ua - 2 , ua * ua 
[17238] c:0 is:( move 3 , ul ; move 4 , 5 ; move 4 , ul )  decode:( move ua , ul ; move 4 , 5 / 4 ) 
[17239] c:0 is:( move 4 , ul ; move 4 , ul ; move 4 , 4 )  decode:( move 8 , ua / 4 ; move 4 , 2 ) 
[17240] c:0 is:( move 4 , ul ; move ul , 4 ; move 4 , 4 )  decode:( move 4 , ul ; move 4 , ua * ua ) 
[17241] c:0 is:( move ul , 4 ; move 4 , 4 ; move 4 , ul )  decode:( move 4 , ua / 4 ; move 5 , 4 ) 
[17242] c:0 is:( move ua , 9 ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 
[17243] c:0 is:( move ua , 3 ; move ul , 5 ; move 5 , 4 )  decode:( move 5 , 5 ; move 5 , 5 + 4 ) 
[17244] c:0 is:( move 4 , ul ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 3 , ul + v0 
[17245] c:0 is:( move 8 , 2 ; move ul , 4 ; move 2 , ul )  decode:( move ua + 3 , 2 ; move 2 , 5 ) 
[17246] c:0 is:( move 4 , 4 ; move ul , 4 ; move 4 , ul )  decode:( move 3 , 4 ; move 5 , 5 ) 
[17247] c:0 is:( move 4 , 4 ; move ul , ul ; move 4 , 4 )  decode:( move ul - ua , ul ; move 4 , 5 ) 
[17248] c:0 is:( move 3 , 9 ; move ua , 2 ; move 3 , ul )  decode:( move 4 , 9 ; move 2 + ua , 2 ) 
[17249] c:0 is:( move ua , 8 ; loop 0 , 6 , move ua , 3 )  decode:loop 0 , 3 , move 3 + 3 , v0 0 0 0 0 
[17250] c:0 is:( move 2 , 9 ; move 3 , ul ; move ua , 4 )  decode:( move 4 , 9 ; move ua , 5 + 4 ) 
[17251] c:0 is:( move 3 , 9 ; move ul , 2 ; move 3 , ul )  decode:( move 3 , 9 ; move 3 , 0 - 4 ) 
[17252] c:0 is:( move ua , 9 ; move ul , 3 ; move 4 , 2 )  decode:( move ua , 9 ; move 4 , 5 ) 
[17253] c:0 is:( move ua , 9 ; move 2 , ul ; move 4 , 3 )  decode:( move ua + ul , 9 ; move 4 , 4 ) 
[17254] c:0 is:( move 3 , 9 ; move 3 , ul ; move ua , 3 )  decode:loop 0 , 2 , move ua - v0 , 0 - 3 
[17255] c:0 is:( move 9 , 3 ; move ua , 4 ; move 2 , ul )  decode:( move 9 , 3 ; move 9 , 4 ) 
[17256] c:0 is:( move 3 , 9 ; move ul , 4 ; move ua , 2 )  decode:( move 3 , 9 ; move ua , 4 * 4 ) 
[17257] c:0 is:( move ua , 9 ; move 3 , ul ; move 2 , 4 )  decode:( move ua + 2 , 9 ; move 3 , ul ) 
[17258] c:0 is:( move 3 , 9 ; move 2 , ul ; move ua , 4 )  decode:( move 5 , 9 ; move ua , 4 ) 
[17259] c:0 is:( move 4 , 9 ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[17260] c:0 is:( move 4 , 9 ; move 3 , ul ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[17261] c:0 is:( move 4 , 3 ; move ul , ul ; move 7 , 4 )  decode:( move 5 , ua / 2 ; move ua , 5 ) 
[17262] c:0 is:( move 3 , 9 ; move ul , 2 ; move 4 , ul )  decode:( move 3 , 9 ; move 4 , 4 ) 
[17263] c:0 is:( move 4 , 3 ; move 3 , ul ; move ua , 9 )  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[17264] c:0 is:( move 3 , 9 ; move ul , 3 ; move 3 , ul )  decode:( move 3 , 9 ; move 3 , 9 ) 
[17265] c:0 is:( move 3 , 9 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[17266] c:0 is:( move ua , 9 ; move 4 , 2 ; move 4 , ul )  decode:0 0 loop 0 , 4 , move 4 , 9 + 2 
[17267] c:0 is:( move ua , 9 ; move 2 , ul ; move 4 , 4 )  decode:( move ua + 2 , 9 ; move 4 , 5 ) 
[17268] c:0 is:( move 4 , 9 ; move ul , ul ; move 3 , 2 )  decode:( move 5 , 9 ; move 3 , 0 - 2 ) 
[17269] c:0 is:( move 3 , 9 ; move ua , 4 ; move 4 , ul )  decode:( move 4 , 9 ; move ua + 2 , 4 ) 
[17270] c:0 is:( move 4 , ul ; move 4 , ul ; move 7 , 4 )  decode:( move ua + 3 , ul ; move ua , 4 ) 
[17271] c:0 is:( move 4 , 9 ; move ul , ul ; move 4 , 2 )  decode:( move 5 , 9 ; move 4 , 2 ) 
[17272] c:0 is:( move 4 , 9 ; move ul , 3 ; move 3 , ul )  decode:( move 4 , 9 ; move 4 , 3 ) 
[17273] c:0 is:( move 2 , 9 ; move ul , 4 ; move 4 , ul )  decode:( move 2 , 9 ; move 5 , ua * ua ) 
[17274] c:0 is:( move ua , 9 ; move 4 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move v0 + 3 , 7 / 3 
[17275] c:0 is:( move 4 , 9 ; move ul , 3 ; move ua , 4 )  decode:( move 4 , 9 ; move ua , 3 * 4 ) 
[17276] c:0 is:( move 3 , 9 ; move 4 , ul ; move ua , 4 )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[17277] c:0 is:( move ua , 9 ; move 3 , ul ; move 4 , 4 )  decode:( move 9 , 9 ; move 4 , 4 ) 
[17278] c:0 is:( move 3 , 9 ; move ul , 4 ; move ua , 4 )  decode:( move 4 , 9 ; move ua , 8 ) 
[17279] c:0 is:( move 3 , 4 ; move ul , ul ; move 4 , 9 )  decode:( move 3 , 4 ; move 4 , 9 ) 
[17280] c:0 is:( move 4 , 9 ; move 4 , ul ; move ua , 4 )  decode:( move ua + 2 , 9 ; move 5 , 4 ) 
[17281] c:0 is:( move 4 , 9 ; move ul , 4 ; move 3 , ul )  decode:( move 3 - ua , 9 ; move 4 , 8 ) 
[17282] c:0 is:( move 3 , 9 ; move ul , 4 ; move 4 , ul )  decode:( move 3 , 9 ; move 5 , ua * ua ) 
[17283] c:0 is:( move ul , 9 ; move 4 , 4 ; move 4 , ul )  decode:( move 4 , 9 + 4 ; move 5 , 4 ) 
[17284] c:0 is:( move ua , ul ; move ua + ul , ua * ua )  decode:( move ua , ul ; move ua + ul , 8 ) 
[17285] c:0 is:( move ua , ua * ua ; move ua + ul , ul )  decode:( move ua , ua * ua ; move ua , ul ) 
[17286] c:0 is:( move ua , 0 ; move ua , 2 ; move ua , 3 )  decode:( move ua + ul , 0 ; move 6 , 3 ) 
[17287] c:0 is:( move ua , 0 ; move ua , 2 ; move 2 , ul )  decode:( move ua , 0 ; move 7 , ua / 3 ) 
[17288] c:0 is:( move ua + ul , ul ; move ul - ua , ul )  decode:( move ua + ul , ul ; move 5 , ul ) 
[17289] c:0 is:( move ua , ua * ua ; move ul - ua , ul )  decode:( move ul - ua , ua ; move 5 , ul ) 
[17290] c:0 is:( move ua , 0 ; move 2 , 2 ; move ua , ul )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[17291] c:0 is:( move ua , ul ; move ul - ua , ua * ua )  decode:( move 5 , 9 ; move ua , 4 / 3 ) 
[17292] c:0 is:( move ua + ul , ua * ua ; move ul , ul )  decode:( move ua + ul , 8 ; move ul , ul ) 
[17293] c:0 is:( move ul - ua , ul ; move ua + ul , ul )  decode:( move ul - ua , ul ; move ua , ul ) 
[17294] c:0 is:( move ul - ua , ul ; move ua , ua * ua )  decode:( move ul - ua , ul ; move ua , 8 ) 
[17295] c:0 is:( move ul , ul ; move ua + ul , ua * ua )  decode:( move ul , ul ; move ua + ul , 4 ) 
[17296] c:0 is:( move ua , 0 ; move ul , 2 ; move ua , 2 )  decode:( move ua , 0 ; move ua , 4 * 4 ) 
[17297] c:0 is:( move ua , 0 ; loop 0 , 2 , move ul , ul )  decode:( move ua , 0 ; move 2 , 2 ) 
[17298] c:0 is:( move 3 , 0 ; move ua , ul ; move ua , 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[17299] c:0 is:( move 2 , 0 ; move 2 , ul ; move ua , ul )  decode:( move 2 , 0 ; move ua + ul , 7 ) 
[17300] c:0 is:( move ua , 0 ; move ua , 3 ; move 2 , ul )  decode:( move ua + 2 , 0 ; move ua , 3 ) 
[17301] c:0 is:( move ua , 0 ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 4 , move ua - 3 , v0 
[17302] c:0 is:( move ua , 0 ; move ul , 2 ; move 2 , ul )  decode:( move ua , 0 ; move 3 , 0 - 4 ) 
[17303] c:0 is:( move ua , 0 ; loop 0 , ua , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - * 5 
[17304] c:0 is:( move 2 , 0 ; move ua , ul ; move 2 , ul )  decode:( move 2 , 0 ; move ua + ul , ul ) 
[17305] c:0 is:( move ua , 0 ; move 2 , 3 ; move ua , ul )  decode:( move ua , 0 ; move ua , 4 * 3 ) 
[17306] c:0 is:( move ua , 0 ; move 3 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 0 - v0 
[17307] c:0 is:loop 0 , 3 , move 4 + v0 , 0 - v0 + 2  decode:loop 0 , 4 , move ua - 2 , v0 - 5 
[17308] c:0 is:( move ua , 0 ; move ul , 3 ; move ua , 2 )  decode:( move ua , 0 ; move ua , 5 / 4 ) 
[17309] c:0 is:( move ua , 0 ; move ul , ul ; move 2 , 2 )  decode:( move ua , 0 ; move 2 , 3 ) 
[17310] c:0 is:( move ua , 0 ; move 2 , ul ; move ua , 3 )  decode:( move ua + 2 , ul ; move 5 , 3 ) 
[17311] c:0 is:( move ua , 0 ; move ua , 4 ; move ua , 2 )  decode:loop 0 , 3 , move 4 + 3 , 4 * v0 
[17312] c:0 is:( move ul - ua , ul ; move ua - ul , ul )  decode:( move ul - ua , ul ; move 5 , ul ) 
[17313] c:0 is:( move 3 , 0 ; move 2 , ul ; move ua , ul )  decode:( move 4 , 0 ; move ua + ul , 4 ) 
[17314] c:0 is:( move 4 , 0 ; move ua , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua + v0 , v0 
[17315] c:0 is:loop 0 , 2 , ( move ua , 2 ; move ua , ul )  decode:loop 0 , 3 , move ua + 2 , 2 
[17316] c:0 is:( move ul , ua * ua ; move ua , ul / ua )  decode:( move ul , ua ; move ua , 5 ) 
[17317] c:0 is:( move 3 , 0 ; move ua , ul ; move 2 , ul )  decode:( move 4 , 0 ; move 9 , ul ) 
[17318] c:0 is:( move ua , 2 ; move 2 , ul ; move ua , 2 )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[17319] c:0 is:( move ua , ul ; move 2 , 2 ; move ua , 2 )  decode:loop 0 , 4 , move 3 , v0 + 8 
[17320] c:0 is:( move ua , 2 ; move ua , 2 ; move ua , 3 )  decode:loop 0 , 3 , move ua , 4 / v0 
[17321] c:0 is:( move ua , 2 ; move ul , 2 ; move ua , 2 )  decode:( move ua , 2 ; move ua , 2 * 5 ) 
[17322] c:0 is:( move ul - ua , ul / ua ; move ua , ul )  decode:( move 5 , 0 - 4 ; move ua , 3 ) 
[17323] c:0 is:( move ua , 0 ; move ul , 2 ; move 3 , ul )  decode:( move ua , 0 ; move 4 , 4 * 4 ) 
[17324] c:0 is:loop 0 , 3 , ( move ua , ul ; move 0 , ul )  decode:loop 0 , 3 , move ua , v0 + ul 
[17325] c:0 is:( move ua , 2 ; move 2 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 - ua , 2 / v0 
[17326] c:0 is:( move ua , 0 ; move 3 , ul ; move ua , 3 )  decode:( move ua + 2 , 0 ; move ua , 3 ) 
[17327] c:0 is:( move ua , 2 ; move ua , 3 ; move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , ua / 3 
[17328] c:0 is:( move 4 , 0 ; move ua , 2 ; move ua , ul )  decode:( move 9 , ul ; move ua + 2 , ul ) 
[17329] c:0 is:( move ua , 0 ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 4 , move ua - 2 , v0 
[17330] c:0 is:( move ua , 0 ; move 2 , 4 ; move ua , ul )  decode:( move ua , 0 ; move 8 , ua * ua ) 
[17331] c:0 is:( move ua , 0 ; move ua , 3 ; move 3 , ul )  decode:( move 9 , 0 ; move 4 , 3 ) 
[17332] c:0 is:( move ua , 0 ; move ua , 2 ; move 4 , ul )  decode:loop 0 , 3 , move ua - v0 , ua / 3 
[17333] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , 0 - 2  decode:loop 0 , 2 , move 3 , 0 - 4 
[17334] c:0 is:( move 2 , 0 ; move ua , ul ; move 3 , ul )  decode:( move 4 , 0 ; move 8 , ul ) 
[17335] c:0 is:( move ua , 0 ; move 2 , ul ; move 3 , ul )  decode:( move ua + ul , 0 ; move 4 , 5 ) 
[17336] c:0 is:( move ua , 0 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[17337] c:0 is:( move ua , 0 ; move ua , 4 ; move 2 , ul )  decode:( move ua , 0 ; move 9 , 4 ) 
[17338] c:0 is:( move ua , 0 ; move ua , 4 ; move 2 , ul )  decode:( move ua , 0 ; move 9 , 4 ) 
[17339] c:0 is:( move 3 , 0 ; move ua , ul ; move ua , 3 )  decode:( move 7 , 0 ; move ua , 4 3 ) 
[17340] c:0 is:( move ua , 0 ; move ul , 3 ; move 2 , ul )  decode:( move ua , 0 ; move 3 , 4 * 4 ) 
[17341] c:0 is:( move ua , 0 ; move 4 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 4 , 0 - v0 
[17342] c:0 is:( move ua , 3 ; loop 0 , ua , move ua , 2 )  decode:loop 0 , 4 , move ua + 2 , 0 - 2 
[17343] c:0 is:( move ua , 2 ; move 2 , 3 ; move ua , ul )  decode:( move 2 - ua , 2 ; move 7 , 6 ) 
[17344] c:0 is:( move ua , 0 ; move 2 , ul ; move 4 , ul )  decode:( move ua + ul , 0 ; move 5 , 5 ) 
[17345] c:0 is:( move 2 , 2 ; move ua , ul ; move ua , 3 )  decode:loop 0 , 4 , move v0 * 3 , 2 / 3 
[17346] c:0 is:( move ul , 0 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 4 , move v0 , 3 / 3 
[17347] c:0 is:( move 3 , 0 ; move 3 , ul ; move ua , ul )  decode:( move 4 , 0 ; move 8 , 5 ) 
[17348] c:0 is:( move ua , ul ; loop 0 , 2 , move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 0 - 6 
[17349] c:0 is:( move ul , 2 ; move ua , 2 ; move 2 , ul )  decode:( move ua , 4 ; move 2 , ul ) 
[17350] c:0 is:( move ua , 2 ; move 2 , ul ; move ua , 3 )  decode:( move ua + ul , 2 ; move 5 , 3 ) 
[17351] c:0 is:( move ua , 2 ; move ul , 3 ; move ua , 2 )  decode:( move ua , 2 ; move ua , 5 ) 
[17352] c:0 is:( move ua , ul ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 4 , move ua , v0 + ul 
[17353] c:0 is:( move ua , 3 ; move ua , 2 ; move ua , 3 )  decode:( move ua , 3 ; move 7 , 2 - 3 ) 
[17354] c:0 is:( move ua , 0 ; move ul , ul ; move 4 , 2 )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[17355] c:0 is:( move 4 , 0 ; move ua , ul ; move 2 , ul )  decode:( move 4 , 0 ; move 8 , ul ) 
[17356] c:0 is:( move ua , ul ; move 3 , 2 ; move ua , 2 )  decode:loop 0 , 4 , move 0 - 4 , v0 + 8 
[17357] c:0 is:( move 2 , ul ; loop 0 , 2 , move ua , ul )  decode:( move ua + 2 , 2 ; move ua , ul ) 
[17358] c:0 is:loop 0 , 2 , ( move ua , ul ; move 2 , ul )  decode:( move ua , ul ; move ua + 2 , 2 ) 
[17359] c:0 is:( move ua , 0 ; move 4 , ul ; move 2 , ul )  decode:( move ua + ul , 0 ; move 4 , ul ) 
[17360] c:0 is:( move ua , 0 ; move ul , 3 ; move 3 , ul )  decode:( move 4 , 0 ; move 4 , 4 ) 
[17361] c:0 is:( move 4 , 0 ; move 2 , ul ; move ua , ul )  decode:( move 4 , 0 ; move ua + ul , 5 ) 
[17362] c:0 is:( move ul , 2 ; move 2 , ul ; move ua , 2 )  decode:( move 2 , 0 - 3 ; move ua , 2 ) 
[17363] c:0 is:( move 2 , 0 ; move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move v0 , v0 / v0 
[17364] c:0 is:( move ua , 3 ; move ua , 2 ; move 2 , ul )  decode:( move 0 - ua , 0 ; move 7 , ul ) 
[17365] c:0 is:( move 2 , 0 ; move ul , ul ; move 3 , ul )  decode:( move 4 , 0 ; move 3 , 5 ) 
[17366] c:0 is:( move ua , ul ; move 2 , 3 ; move ua , 2 )  decode:( move 5 , ul ; move ua + ul , 5 ) 
[17367] c:0 is:( move 2 , 0 ; move ua , ul ; move 4 , ul )  decode:loop 0 , 4 , move ul + v0 , ul / 3 
[17368] c:0 is:( move ua , 0 ; move ua , 4 ; move 3 , ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[17369] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 + v1 , 2  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[17370] c:0 is:( move 2 , 0 ; move ul , 4 ; move ua , ul )  decode:( move 2 , 0 ; move ua + ul , 5 ) 
[17371] c:0 is:loop 0 , 4 , move ul - ua + v0 , ua / 4  decode:loop 0 , 4 , move ua , ua /  2 
[17372] c:0 is:( move ua , 3 ; move ul , 2 ; move ua , 2 )  decode:( move ua , 3 ; move ua , 4 * 5 ) 
[17373] c:0 is:( move 3 , 2 ; move ua , ul ; move ua , 2 )  decode:loop 0 , 3 , move ul - ua , 3 - v0 
[17374] c:0 is:( move 4 , 0 ; move ua , ul ; move ua , 3 )  decode:loop 0 , 3 , move ua + v0 , ul - 3 
[17375] c:0 is:( move ua , 0 ; move ul , ul ; move 3 , 3 )  decode:( move ua , 0 ; move 3 , 4 * 3 ) 
[17376] c:0 is:( move ua , 0 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 4 , move 4 , 3 * v0 
[17377] c:0 is:( move ua , 0 ; move 3 , 4 ; move ua , ul )  decode:( move ua , 0 ; move ua + 3 , 5 ) 
[17378] c:0 is:( move 3 , 0 ; move ua , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 + v0 , 2 - 3 
[17379] c:0 is:( move ua , 3 ; move 2 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[17380] c:0 is:( move ua , 2 ; move ua , 3 ; move 2 , ul )  decode:loop 0 , 4 , move 4 , v0 * 2 
[17381] c:0 is:( move 3 , 0 ; move ua , ul ; move ua , 4 )  decode:( move 4 + 3 , ul ; move ua , 4 ) 
[17382] c:0 is:( move ua , 0 - move 3 , ul ; move ua , 2 )  decode:( move ua , 0 - 2 ; move 5 , 5 ) 
[17383] c:0 is:( move 2 , 2 ; move ua , ul ; move 2 , ul )  decode:( move : , ul ; move 8 , ul ) 
[17384] c:0 is:( move ua , 2 ; move 3 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 + v0 , 2 / 3 
[17385] c:0 is:( move ua , 2 ; move 3 , ul ; move ua , 2 )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[17386] c:0 is:( move ua , 0 ; move 3 , ul ; move 4 , ul )  decode:( move ua + ul , 0 ; move 5 , 5 ) 
[17387] c:0 is:( move 2 , 3 ; move ua , ul ; move 2 , ul )  decode:( move 2 , 3 ; move ua + ul , ul ) 
[17388] c:0 is:( move 2 , 3 ; move ua , ul ; move ua , 3 )  decode:( move ua , 4 ; move ua + ul , 3 ) 
[17389] c:0 is:( move 2 , 4 ; move ua , ul ; move ua , 2 )  decode:( move 8 , 5 ; move ua , 2 ) 
[17390] c:0 is:( move 2 , ul ; move ua , 2 ; move 3 , ul )  decode:( move 3 , ul ; move 8 , 2 ) 
[17391] c:0 is:( move ua , ul ; move 2 , 2 ; move 3 , ul )  decode:( move ua , ul ; move 4 , 2 ) 
[17392] c:0 is:( move ua , ul ; loop 0 , 2 , move 3 , ul )  decode:( move 4 , ul ; move 7 , 4 / 3 ) 
[17393] c:0 is:( move ua , 0 ; move ua , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 4 , ul * v0 
[17394] c:0 is:( move ul , 2 ; move ua , 2 ; move ua , 4 )  decode:loop 0 , 2 , move ua , 4 
[17395] c:0 is:loop 0 , 3 , loop 1 , 2 , move 2 , v1 - 2  decode:loop 0 , 3 , move 3 - ua , 4 - v0 
[17396] c:0 is:( move ua , ua ; loop 0 , 5 , move ua , 2 )  decode:loop 0 , 4 , move ua + ul , 0 - 5 
[17397] c:0 is:( move ua , 3 ; move ul , 2 ; move 2 , ul )  decode:( move ua , 3 ; move 3 , 2 ) 
[17398] c:0 is:( move 3 , 2 ; move ua , ul ; move ua , 3 )  decode:loop 0 , 4 , move 4 , 2 - v0 
[17399] c:0 is:( move ua , 0 ; move ul , ul ; move 4 , 3 )  decode:( move ua , ul ; move 3 , 0 - 4 ) 
[17400] c:0 is:( move ua , 0 ; move 4 , ul ; move 3 , ul )  decode:( move 4 + 3 , 0 ; move 7 , 5 ) 
[17401] c:0 is:loop 0 , 2 , loop 1 , 2 , move 4 , 2 - v0  decode:loop 0 , 3 , move 0 - 4 , 2 / v0 
[17402] c:0 is:( move 4 , 0 ; move 2 , ul ; move ul , ul )  decode:( move 5 , 0 ; move 2 , ul ) 
[17403] c:0 is:( move ua , ul ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua , 0 - 2 
[17404] c:0 is:( move 2 , 3 ; move 2 , ul ; move ua , ul )  decode:( move 3 , 3 ; move ua + ul , 2 ) 
[17405] c:0 is:loop 0 , 3 , ( move ua , ua ; move ul , 3 )  decode:loop 0 , 3 , move v0 - 8 , 3 
[17406] c:0 is:( move 3 , ul ; move ua , ul ; move 2 , 2 )  decode:loop 0 , 4 , move 0 - 3 , ul / v0 
[17407] c:0 is:( move 3 , 2 ; move 2 , ul ; move ua , ul )  decode:( move 4 , 2 ; move ua + ul , 5 ) 
[17408] c:0 is:( move ua , 2 ; move ua , 3 ; move 3 , ul )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[17409] c:0 is:( move ua , 0 ; move ul , 3 ; move 4 , ul )  decode:( move ua , 0 ; move 4 , 4 * 4 ) 
[17410] c:0 is:( move ua , ul ; loop 0 , 3 , move 2 , ul )  decode:( move ua + ul , ul ; move 4 , 2 ) 
[17411] c:0 is:loop 0 , 2 , ( move ul , ul ; move ua , 3 )  decode:( move ua , 4 ; move ua , 4 ) 
[17412] c:0 is:( move ua , 4 ; move ua , 2 ; move 2 , ul )  decode:( move ua + ul , 4 ; move 7 , 2 ) 
[17413] c:0 is:( move 3 , 0 ; move ul , ul ; move 3 , ul )  decode:( move 3 , 0 ; move 3 , 2 ) 
[17414] c:0 is:( move 4 , 0 ; move ua , ul ; move 3 , ul )  decode:loop 0 , 3 , move 4 , v0 / v4 
[17415] c:0 is:( loop 0 , 3 , move 2 , ul ; move ul , ua )  decode:( move 3 , ul ; move 4 , ul ) 
[17416] c:0 is:( move 5 , 0 ; move ua , ul ; move 2 , ul )  decode:( move 8 , 0 ; move ua + ul , ul ) 
[17417] c:0 is:( move ua , 3 ; move ul , 3 ; move ua , 2 )  decode:( move ua , ua / 2 ; move ua , 5 ) 
[17418] c:0 is:loop 0 , 2 , ( move ul , ua ; move 3 , ul )  decode:( move 2 , ul ; move 4 , ul ) 
[17419] c:0 is:loop 0 , 2 , ( move ua , ul + move ul , 2 )  decode:( move ua , 4 + 5 ; move 5 , 4 ) 
[17420] c:0 is:( move ul , 0 ; move ua , ul ; move 3 , 4 )  decode:( move ua , ul ; move 3 , 0 - 4 ) 
[17421] c:0 is:( move ua , 4 ; move 2 , ul ; move ua , 2 )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[17422] c:0 is:( move ua , 4 ; move 2 , 2 ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[17423] c:0 is:( move ua , 0 ; move ul , 4 ; move 3 , ul )  decode:( move ua , 0 ; move 4 , ua * ua ) 
[17424] c:0 is:( move ua , 2 ; move 4 , ul ; move ua , 2 )  decode:( move 8 , 2 ; move ua , 2 ) 
[17425] c:0 is:( move ua , ul ; loop 0 , 3 , move ua , 3 )  decode:loop 0 , 4 , move v0 - ua , 4 * 4 
[17426] c:0 is:( move ua , 2 ; move 3 , 3 ; move ua , ul )  decode:( move 5 , 2 ; move ua + ul , 4 ) 
[17427] c:0 is:loop 0 , 3 , ( move 2 , ul ; move ua , ul )  decode:loop 0 , 4 , move ul - ua , 2 / v0 
[17428] c:0 is:( move 3 , ul ; move ul , 2 ; move ua , 2 )  decode:( move 3 , ul ; move ua , 4 * 4 ) 
[17429] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + 2 , 3  decode:loop 0 , 3 , move 4 , 4 - v0 
[17430] c:0 is:( move ua , ul ; move 3 , 3 ; move ua , 2 )  decode:loop 0 , 3 , move ul - ua , 3 + v0 
[17431] c:0 is:( move ul , 0 ; move 4 , ul ; move 2 , ul )  decode:( move 2 , ul ; move 5 , 2 - 3 ) 
[17432] c:0 is:( move ua , 3 ; move 2 , ul ; move ua , 3 )  decode:( move ua + ul , 3 ; move 5 , 9 ) 
[17433] c:0 is:( loop 0 , 4 , move ul , ul ; move ul , 0 )  decode:loop 0 , 4 , move 2 / v0 , ua / 4 
[17434] c:0 is:( move 2 , ul ; move ul , ul ; move 2 , 2 )  decode:loop 0 , 3 , move 2 , 2 
[17435] c:0 is:( move ua , 0 ; move 2 , ul ; move 5 , ul )  decode:( move ua , 0 ; move 7 , 5 ) 
[17436] c:0 is:( move 2 , 2 ; move ua , ul ; move ua , 4 )  decode:( move ua + 2 , 3 ; move ua , 4 ) 
[17437] c:0 is:( loop 0 , 4 , move ua , 2 ; move ul , ua )  decode:loop 0 , 4 , move ua , 2 
[17438] c:0 is:( move 4 , 0 ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 4 , v0 / v0 
[17439] c:0 is:( move ua , 0 ; move ul , ul ; move 3 , 4 )  decode:( move ua , 0 ; move 3 , 3 * 4 ) 
[17440] c:0 is:( move 3 , 0 ; move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move v0 , v0 - v0 
[17441] c:0 is:( move 3 , 0 ; move ua , 4 ; move ul , ul )  decode:( move 3 , 0 ; move 7 , 4 ) 
[17442] c:0 is:( move ua , 3 ; move ul , ul ; move 2 , 2 )  decode:( move : , 3 ; move ul ; move move ua ) 
[17443] c:0 is:( move ua , ul ; move 3 , 2 ; move 2 , ul )  decode:( move ua , ul ; move 3 , ua / 3 ) 
[17444] c:0 is:( move 2 , 0 ; move 4 , ul ; move ul , ul )  decode:loop 0 , 4 , move v0 , v0 - v0 
[17445] c:0 is:( move ua , 2 ; move 2 , 2 - move ua , ul )  decode:( move ua , ul / 4 ; move ua , 5 ) 
[17446] c:0 is:( move ua , 2 ; move 2 , ul ; move 3 , ul )  decode:( move ua , 2 ; move 4 , 5 ) 
[17447] c:0 is:loop 0 , 3 , ( move ul , ul ; move ua , 2 )  decode:loop 0 , 4 , move ua , 3 / v0 
[17448] c:0 is:( move ua , 2 ; move ua , 4 ; move 2 , ul )  decode:( move ua , 2 ; move ul + ua , 4 ) 
[17449] c:0 is:loop 0 , 3 , ( move 2 , ua ; move ul , ul )  decode:loop 0 , 3 , move 3 , v0 / v0 
[17450] c:0 is:( move 3 , 2 ; move ul , ul ; move ua , 2 )  decode:( move 3 - ua , 5 ; move ua , ul ) 
[17451] c:0 is:( move ua , 3 ; move 3 , 2 ; move ua , ul )  decode:loop 0 , 3 , move ua - ul , 3 - v0 
[17452] c:0 is:( move ua , 0 ; move ul , 4 ; move ua , 4 )  decode:( move ua , 0 ; move ua , ua * ua ) 
[17453] c:0 is:( loop 0 , 3 , move 2 , ul ; move ua , ul )  decode:( move 4 , ul ; move ua + ul , 5 ) 
[17454] c:0 is:( move ua , 3 ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[17455] c:0 is:( move 3 , ul ; move ua , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 3 , v0 
[17456] c:0 is:loop 0 , 3 , ( move ua , ul ; move 2 , ul )  decode:loop 0 , 4 , move ua , v0 - 2 
[17457] c:0 is:( loop 0 , 4 , move ua , 2 ; move ua , ul )  decode:loop 0 , 4 , move ua + 2 , v0 * 2 
[17458] c:0 is:( move 4 , 2 ; move ua , ul ; move ua , 2 )  decode:( move ua + ul , 6 ; move ua , 2 ) 
[17459] c:0 is:( move 2 , ul ; move 2 , ul ; move ua , 3 )  decode:( move ua , ua * ua ; move 3 , 3 ) 
[17460] c:0 is:( move 2 , 0 ; move ul , ul ; move 4 , ul )  decode:( move 2 , 0 ; move 5 , 2 ) 
[17461] c:0 is:( move ua , 4 ; move ul , 2 ; move ua , 2 )  decode:( move ua , 4 ; move ua + ul , 4 ) 
[17462] c:0 is:( move 3 , 0 ; move ua , ul ; move 4 , ul )  decode:loop 0 , 4 , move 3 , ul - 4 * v0 
[17463] c:0 is:loop 0 , 3 , loop 1 , 2 , move 2 , 2 * v0  decode:loop 0 , 4 , move 3 , 0 - 4 
[17464] c:0 is:( move ua , 2 ; move 3 , ul ; move 2 , ul )  decode:( move ua , 2 ; move 4 , ua / 5 ) 
[17465] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 , 2 * v0  decode:( move ua , 0 ; move 4 , 4 * 5 ) 
[17466] c:0 is:( move ua , ul ; loop 0 , 2 , move ua , 4 )  decode:loop 0 , 3 , move ua , 4 
[17467] c:0 is:loop 0 , 2 , ( move ul , 3 ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , 4 ) 
[17468] c:0 is:loop 0 , 3 , ( move ul , 2 ; move ua , ul )  decode:loop 0 , 4 , move 4 + v0 , 3 
[17469] c:0 is:( move 3 , 3 ; move ua , ul ; move ua , 2 )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[17470] c:0 is:( move ua , 2 ; move 3 , ul ; move ua , 3 )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[17471] c:0 is:( move 3 , 0 ; move 2 , ul - move ua , ul )  decode:( move 3 , 0 ; move ua + 2 , ul ) 
[17472] c:0 is:( move ul , 2 ; move 2 , 4 ; move ua , ul )  decode:( move 2 , 6 ; move ua + ul , ul ) 
[17473] c:0 is:( move 2 , 3 ; move ua , ul ; move 3 , ul )  decode:( move 3 , 9 ; move ua , 2 / 3 ) 
[17474] c:0 is:( move ua , 0 ; move ul , ul ; move 4 , 4 )  decode:( move ua , 0 ; move 3 - ua , 5 ) 
[17475] c:0 is:( move ua , 3 ; move ua , 2 ; move 4 , ul )  decode:loop 0 , 3 , move ua - v0 , 3 - 3 
[17476] c:0 is:( move ul , ul ; loop 0 , 2 , move 3 , ul )  decode:( move 3 , ul ; move 4 , ul ) 
[17477] c:0 is:( move 3 , 0 ; move ul , ul ; move 4 , ul )  decode:( move 3 , ul / ua ; move 5 , 5 ) 
[17478] c:0 is:( move ul , 0 ; move ua , ul ; move 4 , 4 )  decode:( move 3 , ul ; move ua , 0 - 4 ) 
[17479] c:0 is:( move ua , 3 ; move ul , ul ; move 2 , 3 )  decode:( move ua , 3 ; move 0 - 2 , 4 ) 
[17480] c:0 is:( move ua , 2 ; loop 0 , 4 , move ul , ul )  decode:( move ua , 2 ; move 3 , 4 / 3 ) 
[17481] c:0 is:( move ua , 3 ; move ua , 3 ; move ua , 4 )  decode:( move ua + ul , 0 ; move 7 , 4 ) 
[17482] c:0 is:( move ul , 0 ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 4 , move 2 , 2 / v0 
[17483] c:0 is:( move ua , 4 ; move ua , 3 ; move 2 , ul )  decode:( move ua + ul , 4 ; move ua , 4 ) 
[17484] c:0 is:( move 2 , 4 ; move 2 , ul ; move ua , ul )  decode:( move ua , 9 ; move 3 , 5 ) 
[17485] c:0 is:( move ua , 4 ; move ul , 2 ; move ua , 3 )  decode:( move ua , 4 ; move 5 , 5 ) 
[17486] c:0 is:( move ul , 4 ; move ua , ul ; move 2 , 2 )  decode:( move ua , 5 ; move 2 , 2 ) 
[17487] c:0 is:( move ua , 3 ; loop 0 , 3 , move ul , ul )  decode:( move 2 , 2 ; move ua + ul , 2 ) 
[17488] c:0 is:( move ua , 3 ; move 2 , 4 ; move ua , ul )  decode:( move 5 , 3 ; move 8 , 5 ) 
[17489] c:0 is:( move 2 , ul ; move 2 , 4 ; move ua , ul )  decode:( move 3 , 9 ; move ua + ul , 5 ) 
[17490] c:0 is:( move 4 , 0 ; move ul , ul ; move ua , 4 )  decode:( move 5 , ul - 3 ; move 5 , 5 ) 
[17491] c:0 is:( move ul , 4 ; loop 0 , 2 , move ua , ul )  decode:( move ua , 5 ; move ua , ul ) 
[17492] c:0 is:( move ua , 4 ; move 3 , 2 ; move ua , ul )  decode:( move ua + ul , 4 ; move 8 , 2 ) 
[17493] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 , 4 + v0  decode:loop 0 , 4 , move 4 , 0 - 4 * v0 
[17494] c:0 is:( move ua , 3 ; move 3 , ul ; move ua , 3 )  decode:( move ua + 3 , 3 ; move 5 , 3 ) 
[17495] c:0 is:( loop 0 , 6 , move ul , ul ; move ua , 0 )  decode:( move ua , 9 ; move 4 , 0 - 4 ) 
[17496] c:0 is:( move ua , 0 ; move ul , 4 ; move 4 , ul )  decode:( move ua , ul 0 ; ; move 5 , 5 ) 
[17497] c:0 is:( move ua , ua ; loop 0 , 5 , move 2 , ul )  decode:loop 0 , 4 , move 4 , v0 * 4 
[17498] c:0 is:( move 3 , 2 ; move ua , ul ; move ua , 4 )  decode:( move ua + 3 , 3 ; move ua , 4 ) 
[17499] c:0 is:( move 4 , 2 ; move ua , ul ; move ua , 3 )  decode:loop 0 , 4 , move 4 , 2 + v0 
[17500] c:0 is:( move 2 , ul ; move ul , 4 ; move ua , 2 )  decode:( move 2 , ua / 5 ; move ua , 6 ) 
[17501] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 , 2 - v1  decode:loop 0 , 4 , move 4 , 3 + v0 
[17502] c:0 is:( move 4 , 2 ; move ua , 2 ; move ul , ul )  decode:( move 4 , 2 ; move ua , 2 ) 
[17503] c:0 is:loop 0 , 2 , ( move 4 , ua ; move ul , ul )  decode:( move ua - 2 , 0 ; move ua , ul ) 
[17504] c:0 is:( move ua , 2 ; move ua , 4 ; move 3 , ul )  decode:( move ua , 2 ; move 9 , 4 ) 
[17505] c:0 is:( move ua , 4 ; move 2 , ul ; move ua , 3 )  decode:( move ua , 4 ; move ua , 4 ) 
[17506] c:0 is:( move ua , ul ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 4 , move 3 , ul 
[17507] c:0 is:loop 0 , 3 , ( move ul , ul ; move ua , 3 )  decode:loop 0 , 3 , move ua , 4 
[17508] c:0 is:( move 3 , 2 ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 0 - 4 , ul 
[17509] c:0 is:( move ua , 2 ; move ul , 2 ; move 4 , ul )  decode:( move ua , 2 ; move 5 , 0 - 4 ) 
[17510] c:0 is:( move 2 , 3 ; move ua , ul ; move ua , 4 )  decode:( move 2 + ua , 4 ; move ua , 4 ) 
[17511] c:0 is:( move ua , 2 ; move 4 , 3 ; move ua , ul )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[17512] c:0 is:( move 3 , 0 ; move 4 , ul ; move ul , ul )  decode:loop 0 , 4 , move 2 , v0 - 6 
[17513] c:0 is:( move 3 , ul ; move ua , ul ; move 3 , 2 )  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[17514] c:0 is:( move ua , ul ; move 2 , ul ; move 2 , 4 )  decode:( move ua + ul , ul ; move 2 , 4 ) 
[17515] c:0 is:( move ua , 3 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 4 , move 3 , v0 - 4 
[17516] c:0 is:( move ua , 2 ; move ua , 3 ; move 4 , ul )  decode:loop 0 , 3 , move ua - v0 , 3 * 2 
[17517] c:0 is:( move 4 , ul ; move ul , 2 ; move ua , 2 )  decode:( move 4 , ul ; move ua , 4 / ua ) 
[17518] c:0 is:( move 5 , 0 ; move 3 , ul ; move ua , ul )  decode:( move ua , 0 ; move 9 , 5 ) 
[17519] c:0 is:( move 4 , 0 ; move ua , ul ; move 4 , ul )  decode:loop 0 , 3 , move 4 , v0 - 7 
[17520] c:0 is:loop 0 , 2 , loop 1 , 2 , move v0 + 4 , 4  decode:loop 0 , 4 , move ua - 2 , 0 - 4 
[17521] c:0 is:loop 0 , 2 , ( move ul , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , 4 + v0 
[17522] c:0 is:( move ua , 3 ; move 2 , ul ; move 3 , ul )  decode:( move 8 , 3 ; move 4 , 4 / 3 ) 
[17523] c:0 is:( move ua , ul ; loop 0 , 3 , move ua , 4 )  decode:loop 0 , 4 , move v0 - ua , 4 
[17524] c:0 is:( move 4 , 2 ; move ul , ul ; move ua , 2 )  decode:( move 4 , 2 ; move ua , 0 - 4 ) 
[17525] c:0 is:( move 3 , ul ; move ul , 2 ; move 2 , ul )  decode:( move 3 , ul ; move 3 , 2 ) 
[17526] c:0 is:( move 2 , 4 ; move ua , ul ; move 2 , ul )  decode:( move 3 , 9 ; move ua + ul , ul ) 
[17527] c:0 is:loop 0 , 2 , ( move ul , ua ; move 4 , ul )  decode:( move 5 , 2 / 6 ; move 4 , ul ) 
[17528] c:0 is:loop 0 , 3 , loop 1 , 2 , move 2 , v1 - 3  decode:loop 0 , 3 , move 3 , 3 0 * 9 
[17529] c:0 is:( move ul , ul ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 3 , move ua - 4 , v0 - 4 
[17530] c:0 is:( move ua , 2 ; move ul , ul ; move 2 , 4 )  decode:( move ua + ul , 2 ; move ul , 4 ) 
[17531] c:0 is:( move ua , ul ; move 4 , 2 ; move ua , 3 )  decode:( move ua + ul , ul ; move 5 , 2 ) 
[17532] c:0 is:loop 0 , 3 , ( move ua , ul ; move ul , 3 )  decode:loop 0 , 3 , move v0 - ua , 4 
[17533] c:0 is:( move 5 , 0 ; move ua , ul ; move 3 , ul )  decode:( move 9 , 0 ; move 5 , 2 - 3 ) 
[17534] c:0 is:( move ua , 3 ; move 4 , ul ; move ua , 2 )  decode:( move ua + 2 , 3 ; move 9 , 2 ) 
[17535] c:0 is:( move ua , 3 ; move 3 , 3 ; move ua , ul )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[17536] c:0 is:( move 4 , 3 ; move ua , ul ; move ua , 2 )  decode:( move ua + ul , 9 ; move 7 , 2 ) 
[17537] c:0 is:( move 5 , 0 ; move ul , 3 ; move ua , ul )  decode:( move 4 , 0 ; move ua , 4 ) 
[17538] c:0 is:( move ua , 3 ; move 2 , ul ; move ua , 4 )  decode:( move ua + 2 , 3 ; move 5 , 5 ) 
[17539] c:0 is:( move ul , 4 ; move ua , 2 ; move 2 , ul )  decode:( move ua + ul , 9 ; move 2 , 4 ) 
[17540] c:0 is:( move ua , 0 ; move ul , 5 ; move ua , 4 )  decode:loop 0 , 4 , move 3 , v0 + ua 
[17541] c:0 is:( move ua , 3 ; move 3 , 2 ; move ul , ul )  decode:( move ua , 3 ; move 3 , ua / 4 ) 
[17542] c:0 is:loop 0 , 3 , ( move ul , ul ; move 2 , ul )  decode:loop 0 , 3 , move 3 , ua / v0 / 2 
[17543] c:0 is:( move ua , ul ; move 2 , 4 ; move 2 , ul )  decode:( move ua , ul ; move 4 , 5 / 2 ) 
[17544] c:0 is:( move 2 , ul ; move ua , 4 ; move 2 , ul )  decode:( move 3 , 0 - 4 ; move 7 , 4 ) 
[17545] c:0 is:( move 3 , 3 ; move 2 , ul ; move ua , ul )  decode:( move 4 , 3 ; move ua + ul , 2 ) 
[17546] c:0 is:( move 2 , ul ; move ul , 2 ; move ua , 4 )  decode:( move 4 , 7 ; move ua , 2 / 3 ) 
[17547] c:0 is:( move 3 , ul ; move 3 , ul ; move ua , 2 )  decode:( move 4 , 2 ; move ua , 2 ) 
[17548] c:0 is:( move 3 , ul ; move 2 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 2 , ul 
[17549] c:0 is:( move ua , ul ; move 3 , 2 ; move 3 , ul )  decode:( move ua , ul ; move 4 , ua / 3 ) 
[17550] c:0 is:( loop 0 , 3 , move 3 , ul ; move ul , ua )  decode:loop 0 , 3 , move 3 - ua , ul 
[17551] c:0 is:( move ul , 0 ; move 4 , ul ; move ua , 4 )  decode:( move 5 , ul ; move ua , 4 ) 
[17552] c:0 is:( move ua , 2 ; move ul , 3 ; move ua , 4 )  decode:( move 5 , 2 ; move ua , 7 ) 
[17553] c:0 is:loop 0 , 2 , loop 1 , 2 , move 4 , v0 * 2  decode:loop 0 , 4 , move 4 , 0 - v0 * 4 
[17554] c:0 is:( move ua , 4 ; move ua , 2 ; move 3 , ul )  decode:( move ua , 4 ; move ua + ul , 2 ) 
[17555] c:0 is:loop 0 , 2 , loop 1 , 2 , move 3 , 4 + v1  decode:loop 0 , 3 , move 0 - 4 , 0 - 9 
[17556] c:0 is:( move ua , 4 ; move 2 , 3 ; move ua , ul )  decode:( move ul - ua , 4 ; move 8 , 4 ) 
[17557] c:0 is:( move 4 , 2 ; move 2 , ul ; move ua , ul )  decode:( move 5 , 2 ; move ua , 5 ) 
[17558] c:0 is:( move 3 , ul ; move ua , 2 ; move 3 , ul )  decode:0 0 loop 0 , 4 , move 3 , v0 
[17559] c:0 is:( move ua , 2 ; move ul , 4 ; move ua , 3 )  decode:( move ua , 2 ; move ua , 4 / 3 ) 
[17560] c:0 is:( move 3 , 2 ; move ul , ul ; move 2 , ul )  decode:( move 3 , 2 ; move 3 , 5 ) 
[17561] c:0 is:( move ua , 2 ; move 2 , ul ; move 4 , ul )  decode:( move ua , 2 ; move 4 , 5 ) 
[17562] c:0 is:( move ua , 2 ; move ua , ul ; move 3 , 4 )  decode:( move ua , 2 ; move 1 - + 4 / v) 0 
[17563] c:0 is:( move ua , 2 ; move ul , ul ; move 4 , 2 )  decode:( move ua , 2 ; move 4 , 0 - 4 ) 
[17564] c:0 is:( move ua , 2 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 3 , move ua - v0 , 3 * 3 
[17565] c:0 is:( move ua , 3 ; move 4 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 4 , 3 - v0 
[17566] c:0 is:( move 3 , 3 ; move ua , ul ; move 2 , ul )  decode:( move 4 , 9 ; move ua , 2 - 3 ) 
[17567] c:0 is:( move ua , 4 ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 3 , move 5 , 4 / v0 
[17568] c:0 is:( move 3 , 2 ; move ul , ul ; move ua , 3 )  decode:( move 3 , 2 ; move ua , 4 ) 
[17569] c:0 is:( move ua , 0 ; move 3 , ul ; move 5 , ul )  decode:( move ua , 0 ; move ua , 5 ) 
[17570] c:0 is:( move ua , ul ; move 2 , 2 ; move 4 , ul )  decode:( move ua , ul ; move 5 , 2 ) 
[17571] c:0 is:( move ua , 3 ; move ua , 3 ; move 3 , ul )  decode:( move ua + 2 , 9 ; move ua , 3 ) 
[17572] c:0 is:( move ua , 3 ; move ua , 4 ; move 2 , ul )  decode:( move ua , 3 ; move ua + 2 , 4 ) 
[17573] c:0 is:loop 0 , 3 , ( move 3 , ua ; move ul , ul )  decode:loop 0 , 4 , move 3 , v0 / vv0 
[17574] c:0 is:( move 3 , ul ; move 2 , 3 ; move ua , ul )  decode:( move 3 , 4 ; move ua , 0 - 4 ) 
[17575] c:0 is:( move 4 , ul ; move 2 , ul ; move ua , 2 )  decode:loop 0 , 3 , move 4 , ul + v0 
[17576] c:0 is:( move ua , 2 ; move 4 , ul ; move 2 , ul )  decode:( move ua , 2 ; move ul - ua , ul ) 
[17577] c:0 is:( move ua , ul ; move ul , 4 ; move 2 , 2 )  decode:( move ua , ul ; move 3 , 2 + 4 ) 
[17578] c:0 is:( loop 0 , 5 , move ul , ul ; move ul , 0 )  decode:loop 0 , 3 , move 2 , 2 
[17579] c:0 is:( move 2 , ul ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move 3 + v0 , 2 
[17580] c:0 is:( move 4 , ul ; move ua , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 3 , ul - v0 
[17581] c:0 is:( move 2 , 3 ; move 3 , ul ; move ua , ul )  decode:( move 3 , 9 ; move ua + 2 , 5 ) 
[17582] c:0 is:( move 3 , ul ; move ul , 3 ; move ua , 2 )  decode:( move 3 , 4 ; move ua , 5 ) 
[17583] c:0 is:( move 4 , 0 ; move ua , ul ; move ul , 4 )  decode:( move 4 , 0 ; move ua , 4 * 3 ) 
[17584] c:0 is:( move ua , ul ; move 3 , 3 ; move ua , 3 )  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[17585] c:0 is:( move 2 , ul ; move 2 , ul ; move ua , 4 )  decode:( move 3 , ul ; move ua , 4 ) 
[17586] c:0 is:( move 3 , 4 ; move ua , ul ; move ua , 2 )  decode:loop 0 , 4 , move 4 , 4 + 4 / v0 
[17587] c:0 is:( move ua , ul ; move 4 , 2 ; move 2 , ul )  decode:( move ua , ul ; move 5 , 2 ) 
[17588] c:0 is:( move ua , 2 ; move ua , 4 ; move ua , 4 )  decode:loop 0 , 3 , move v0 - ua , 4 
[17589] c:0 is:( move 4 , 0 ; move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move v0 , v0 / v0 
[17590] c:0 is:( move ua , ul ; loop 0 , 4 , move ua , 3 )  decode:loop 0 , 3 , move ul - ua , 4 * 4 
[17591] c:0 is:( move ua , 3 ; move 4 , ul ; move ua , 3 )  decode:( move 4 * 2 , 3 ; move ua , 3 ) 
[17592] c:0 is:( move 4 , 2 ; move 3 , ul ; move ua , ul )  decode:( move 5 , 2 ; move ua + ul , 5 ) 
[17593] c:0 is:( move ul , 4 ; move ua , 2 ; move 3 , ul )  decode:( move ua + ul , 6 ; move 3 , ul ) 
[17594] c:0 is:( move 2 , ul ; move ua , ul ; move 3 , 4 )  decode:( move ua + 2 , ua / move 9 , 4 ) 
[17595] c:0 is:loop 0 , 2 , ( move ul , ul ; move 4 , ul )  decode:( move 5 , 2 ; move 4 , 4 / 3 ) 
[17596] c:0 is:( move ul , ul ; loop 0 , 5 , move ua , 2 )  decode:loop 0 , 4 , move 0 - ua , 0 - v0 
[17597] c:0 is:( move 4 + 2 , move 2 , ul ; move ua , ul )  decode:( move 6 , 4 ; move ul - ua , 5 ) 
[17598] c:0 is:( move ua , 2 ; move ul , 4 ; move 3 , ul )  decode:( move ua , 2 ; move 3 , 5 ) 
[17599] c:0 is:( move 2 , 3 ; move ua , ul ; move 4 , ul )  decode:( move 9 , 9 / 2 ; move 4 , 4 ) 
[17600] c:0 is:( move 3 , ul ; move ua , 2 ; move 4 , ul )  decode:( move ua + 3 , 3 ; move 3 , ul ) 
[17601] c:0 is:( move ul , ul ; move 3 , 2 ; move ua , 4 )  decode:( move 3 , 3 ; move ua , 4 ) 
[17602] c:0 is:( move 3 , ul ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move 4 , 2 + v0 
[17603] c:0 is:( loop 0 , 4 , move 3 , ul ; move ua , ul )  decode:loop 0 , 4 , move 4 , ul 0 - 3 
[17604] c:0 is:( move 3 , ul ; move ul , 4 ; move ua , 2 )  decode:( move 3 , ul ; move ua + ul , 3 ) 
[17605] c:0 is:( move 4 , ul ; move ua , 2 ; move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 
[17606] c:0 is:( move 3 , 4 ; move ua , ul ; move ul , 2 )  decode:( move 3 , 4 ; move ua + ul , ul ) 
[17607] c:0 is:( move 2 , ul ; move ua , 4 ; move 3 , ul )  decode:( move 3 , 9 ; move ua + ul , 2 ) 
[17608] c:0 is:( move ua , ul ; move ul , 4 ; move 3 , 2 )  decode:( move ua , ul ; move 3 , 6 ) 
[17609] c:0 is:( move 3 , 4 ; move ua , ul ; move 2 , ul )  decode:( move 3 , 4 ; move ua + 2 , ul ) 
[17610] c:0 is:( move ua , 3 ; move ua , 3 ; move ul , 4 )  decode:loop 0 , 3 , move v0 - ua , 3 
[17611] c:0 is:( move ua , 2 ; move ul , ul ; move 3 , 4 )  decode:( move ua + ul , 2 ; move 3 , 5 ) 
[17612] c:0 is:( move ua , ul ; move 4 , ul ; move 3 , 2 )  decode:( move ua , ul ; move 5 , ua / 3 ) 
[17613] c:0 is:( move ua , 3 ; move ul , ul ; move 3 , 3 )  decode:( move ua , 3 ; move 3 , 4 ) 
[17614] c:0 is:( move ua , 2 ; move 4 , ul ; move 3 , ul )  decode:( move 4 , 2 ; move dmove 4 , 5 ) 
[17615] c:0 is:( move ua , 4 ; move 2 , ul - move ua , 2 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[17616] c:0 is:( move 3 , ul ; move 3 , ul ; move ua , 3 )  decode:( move 3 - ua , ul ; move ua , 3 ) 
[17617] c:0 is:( move 2 , ul ; move 4 , 2 ; move ul , ul )  decode:( move 5 , ul ; move 2 , 0 - 4 ) 
[17618] c:0 is:( move 3 , ul ; move ua , 4 ; move 2 , ul )  decode:( move 3 , 4 ; move ua + ul , 4 ) 
[17619] c:0 is:( move 4 , ul ; move 3 , 2 ; move ua , ul )  decode:loop 0 , 3 , move ua - ul , v0 + ul 
[17620] c:0 is:( move 3 , 3 ; move ua , ul ; move ua , 4 )  decode:( move 9 , 4 ; move ua , 4 ) 
[17621] c:0 is:( move ua , 3 ; move ul , ul ; move 4 , 2 )  decode:( move ua + ul , 3 ; move 4 , 2 ) 
[17622] c:0 is:( move ul , 2 ; move ul , ul ; move 2 , 4 )  decode:loop 0 , 2 , move 2 , 2 
[17623] c:0 is:( move 4 , 3 ; move ul , ul ; move ua , 2 )  decode:( move ua , 3 ; move 4 , 4 ) 
[17624] c:0 is:( move 5 , ul ; move ul , 2 ; move ua , 2 )  decode:( move ua , ul ; move ua , 4 3 * ) v0 
[17625] c:0 is:( move ua , ul ; move 2 , 4 ; move 3 , ul )  decode:( move 5 , ul ; move ua - ul , 5 ) 
[17626] c:0 is:( move 3 , ul ; move 2 , 4 ; move ua , ul )  decode:( move 3 , 9 ; move ua + ul , 5 ) 
[17627] c:0 is:( move ua , ua ; loop 0 , 5 , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - * 5 
[17628] c:0 is:( move ul , 2 ; move ua , ul ; move 3 , 4 )  decode:( move ua + ul , 3 ; move 3 , 4 ) 
[17629] c:0 is:( move 2 , ul ; move 2 , ul ; move 4 , ul )  decode:( move 3 , ul / 4 ; move 5 , 5 ) 
[17630] c:0 is:( move ua , 2 ; move ul , ul ; move 4 , 3 )  decode:( move ua , 2 ; move 4 , 4 ) 
[17631] c:0 is:( move ua , ul ; move 3 , ul ; move 2 , 4 )  decode:( move ua + 2 , ul ; move 3 , 4 ) 
[17632] c:0 is:( move 3 , ul ; move 2 , ul ; move ua , 4 )  decode:( move 5 , 9 ; move ua , 0 - 4 ) 
[17633] c:0 is:( move 4 , ul ; move ul , 3 ; move ua , 2 )  decode:( move 3 , ul ; move ua , 5 ) 
[17634] c:0 is:( move ua , 4 ; move 4 , 2 ; move ua , ul )  decode:( move ua + ul , 4 ; move 8 , 2 ) 
[17635] c:0 is:( move 4 , ul ; move 2 , ul ; move ua , 3 )  decode:( move ua , ul ; move 5 , 3 ) 
[17636] c:0 is:( move 2 , 4 ; move ul , 3 ; move ua , ul )  decode:( move 2 , 4 ; move ua , 4 + 4 ) 
[17637] c:0 is:( move 4 , 0 ; move 4 , ul ; move ul , ul )  decode:loop 0 , 2 , move 4 , v0 / 4 
[17638] c:0 is:( move ua , 4 ; move ul , 2 ; move ua , 4 )  decode:( move 9 , 4 ; move 4 , 2 + 4 ) 
[17639] c:0 is:( move ua , ul ; move 3 , 2 ; move 4 , ul )  decode:( move ua , ul ; move ua - 2 , 2 ) 
[17640] c:0 is:( move ua , ul ; move 3 , 4 ; move ul , 2 )  decode:( move ua , ul ; move 4 , 4 ) 
[17641] c:0 is:( move ua , 2 ; move 4 , 4 ; move ua , ul )  decode:( move 5 , 2 ; move ua + 5 , 4 ) 
[17642] c:0 is:( move 2 , 3 ; move ua , 4 ; move ul , ul )  decode:( move 4 - ua , 3 ; move ua , 4 ) 
[17643] c:0 is:( move ua , 3 ; move 2 , 4 ; move ul , ul )  decode:( move ua , 3 ; move 3 , 4 ) 
[17644] c:0 is:( move ua , ul ; loop 0 , 4 , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - 0 5 ua 4 * 
[17645] c:0 is:( move 3 , 3 ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[17646] c:0 is:( move ua , 3 ; move 4 , ul ; move 2 , ul )  decode:( move 4 + 4 , 3 ; move 4 , ul ) 
[17647] c:0 is:( move 3 , ul ; move ul , ul ; move 3 , 2 )  decode:( move 3 , ul ; move 4 , 3 / 2 ) 
[17648] c:0 is:( move ua , ul ; move 2 , ul ; move 3 , 4 )  decode:( move ua + 2 , ul ; move 3 , 5 ) 
[17649] c:0 is:( move ul , ul ; loop 0 , 4 , move 2 , ul )  decode:loop 0 , 4 , move 4 - ua , 4 / v0 
[17650] c:0 is:( move ua , ul ; move 2 , ul ; move 4 , 3 )  decode:( move 4 + 3 , 2 ; move 4 , 4 ) 
[17651] c:0 is:( move 3 , ul ; move 3 , 2 ; move ul , ul )  decode:loop 0 , 4 , move 2 , v0 0 
[17652] c:0 is:( move 3 , ul ; move ua , 4 ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[17653] c:0 is:( move ua , 3 ; move 4 , 3 ; move ua , ul )  decode:( move ua + 2 , 3 ; move ua , 4 ) 
[17654] c:0 is:( move ua , ul ; move 2 , 4 ; move ua , 4 )  decode:( move ua , ul ; move ua , 9 ) 
[17655] c:0 is:( move ua , ul ; move 3 , ul ; move 4 , 2 )  decode:( move ua , ul ; move 5 , ua / 3 ) 
[17656] c:0 is:( move 4 , 3 ; move 2 , ul ; move ua , ul )  decode:( move 2 - ua , 3 ; move ua , 2 ) 
[17657] c:0 is:( move 3 , 4 ; move ua , 2 ; move ul , ul )  decode:( move 3 - ua , ul ; move ua , 2 ) 
[17658] c:0 is:( move ua , 3 ; move ul , 2 ; move 4 , ul )  decode:( move ua , 3 ; move 5 , 4 ) 
[17659] c:0 is:( move ua , 0 ; move ul , 6 ; move ua , 4 )  decode:loop 0 , 4 , move 4 , 0 - 2 * v0 
[17660] c:0 is:( move 3 , 4 ; move 2 , ul ; move ua , ul )  decode:( move ua , 9 ; move 4 , 4 / 3 ) 
[17661] c:0 is:( move ua , ul ; move 3 , 4 ; move 2 , ul )  decode:( move ua , ul ; move 4 , 7 * 3 ) 
[17662] c:0 is:( move ua , ul ; move 3 , 4 ; move ua , 3 )  decode:( move ua + ul , ul ; move ua , 3 ) 
[17663] c:0 is:( move 4 , 3 ; move ua , ul ; move 2 , ul )  decode:( move 4 , 3 ; move ua + 2 , ul ) 
[17664] c:0 is:loop 0 , 3 , ( move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move 3 , 3 * ul - v0 
[17665] c:0 is:( move 3 , 4 ; move ua , ul ; move ua , 3 )  decode:( move 4 , 5 ; move ua + 2 , 4 ) 
[17666] c:0 is:( move ua , 4 ; move 3 , 3 ; move ua , ul )  decode:( move 5 , 4 ; move 9 , 0 - 3 ) 
[17667] c:0 is:( move 3 , 2 ; move ul , 4 ; move ua , ul )  decode:( move 3 , 2 ; move ua + ul , 5 ) 
[17668] c:0 is:( move ua , 2 ; move 2 , ul ; move 5 , ul )  decode:( move ua + ul , 2 ; move 5 , 5 ) 
[17669] c:0 is:( move 2 , 4 ; move ua , ul ; move 3 , ul )  decode:( move 3 , 9 ; move ua , 2 / 3 ) 
[17670] c:0 is:( move ua , 4 ; move 3 , ul ; move ua , 3 )  decode:( move ua , 4 ; move ua + ul , 3 ) 
[17671] c:0 is:( move ua , 2 ; move ul , 4 ; move ua , 4 )  decode:( move ua , 2 ; move ua , ua * ua ) 
[17672] c:0 is:( move ua , 6 ; move ua , 3 ; move ua , 2 )  decode:loop 0 , 3 , move ua , 3 - v0 
[17673] c:0 is:( move ua , ul ; move 4 , 2 ; move 3 , ul )  decode:loop 0 , 4 , move 3 , ul / v0 
[17674] c:0 is:( move ua , 2 ; move 3 , ul ; move 4 , ul )  decode:( move 4 , 3 ; move ua , 2 / 3 ) 
[17675] c:0 is:( move 4 , 2 ; move 2 , ul ; move ul , ul )  decode:( move 4 , 2 ; move 3 , ul ) 
[17676] c:0 is:( move ua , 4 ; move ua , 2 ; move ul , 4 )  decode:( move ua , 4 ; move ua + ul , 4 ) 
[17677] c:0 is:( move 3 , 3 ; move ua , ul ; move 3 , ul )  decode:( move 9 , 9 ; move 3 , 4 / 3 ) 
[17678] c:0 is:( move 2 , 4 ; move ua , 4 ; move ua , ul )  decode:( move ua + ul , 8 ; move ua , 4 ) 
[17679] c:0 is:( move 3 , 2 ; move ul , ul ; move ua , 4 )  decode:( move 4 , ua / 2 ; move ua , 5 ) 
[17680] c:0 is:( loop 0 , 3 , move ul , ul ; move 3 , ul )  decode:( move 3 , ul ; move 3 , 2 ) 
[17681] c:0 is:( move ua , 4 ; move ua , 4 ; move 2 , ul )  decode:loop 0 , 3 , move ua - v0 , 4 / 3 
[17682] c:0 is:( move ul , ul ; move ua , 4 ; move 3 , 2 )  decode:( move ua , 5 ; move 3 , 2 ) 
[17683] c:0 is:( move ul , 3 ; move 2 , ul ; move 3 , ul )  decode:loop 0 , 4 , move v0 - 2 , ul 
[17684] c:0 is:( move 4 , ul ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 3 , move 4 , ul + v0 
[17685] c:0 is:( move ul , 0 ; move 4 , ul ; move 4 , ul )  decode:( move 2 , 0 ; move ua , ul / 4 ) 
[17686] c:0 is:( move 3 , 2 ; move ul , ul ; move 3 , ul )  decode:( move 3 , 2 ; move 3 , 2 ) 
[17687] c:0 is:( move 2 , 3 ; move ul , 4 ; move ua , ul )  decode:( move 2 , 3 ; move ua + ul , 5 ) 
[17688] c:0 is:( move ua , 3 ; move ua , 4 ; move 3 , ul )  decode:( move ua , 9 ; move ua + 3 , 4 ) 
[17689] c:0 is:( move ua , ul ; move ul , 2 ; move 4 , 3 )  decode:( move ua , ul ; move 4 , 5 + 2 ) 
[17690] c:0 is:( move ua , ul ; loop 0 , 5 , move 2 , ul )  decode:loop 0 , 4 , move 4 , v0 + 9 
[17691] c:0 is:( move 4 , ul ; move ua , 2 ; move ua , 4 )  decode:loop 0 , 4 , move 4 , 3 + 4 / v0 
[17692] c:0 is:( loop 0 , 5 , move 2 , ul ; move ul , ua )  decode:loop 0 , 4 , move 4 - ua , 5 / 3 
[17693] c:0 is:( move 4 , 2 ; move ul , ul ; move ua , 3 )  decode:( move ua - ul , 2 ; move ua , 4 ) 
[17694] c:0 is:( move ua , 3 ; move 2 , ul ; move 4 , ul )  decode:( move 4 , 9 ; move ua , 4 / 3 ) 
[17695] c:0 is:loop 0 , 2 , ( move 4 , ul ; move ul , ul )  decode:- 0 loop 0 , 4 , move 2 , ul - 3 
[17696] c:0 is:( move ul , ul ; loop 0 , 2 , move 4 , ul )  decode:( move 5 - ua , 2 ; move 5 , ul ) 
[17697] c:0 is:( loop 0 , 3 , move ul , ul ; move ua , 4 )  decode:( move 3 , 8 ; move ua , 7 + 4 ) 
[17698] c:0 is:( move 2 , ul ; move 4 , ul ; move 2 , ul )  decode:loop 0 , 3 , move ua - 4 , ul 
[17699] c:0 is:( move 2 , 3 ; move ul , ul ; move 3 , ul )  decode:( move 2 , 3 ; move 4 , 5 ) 
[17700] c:0 is:( move ua , ul ; loop 0 , 5 , move ua , 3 )  decode:loop 0 , 3 , move = = 3 - 4 9 
[17701] c:0 is:( move ua , ua ; loop 0 , 5 , move 3 , ul )  decode:loop 0 , 4 , move 4 + v0 , v0 0 
[17702] c:0 is:( move 3 , 2 ; move ua , ul ; move ul , 4 )  decode:( move 3 , 2 ; move 7 , 4 + 3 ) 
[17703] c:0 is:( move ul , 3 ; move ua , ul ; move 2 , 4 )  decode:( move ua , 4 ; move 2 , 4 ) 
[17704] c:0 is:( move 4 , 2 ; move ul , 3 ; move ua , ul )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[17705] c:0 is:( move 2 , ul ; move 3 , 4 ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , 4 ) 
[17706] c:0 is:( move 4 , 3 ; move ua , ul ; move ua , 3 )  decode:( move ua + ul , 3 ; move 9 , 4 ) 
[17707] c:0 is:( move ua , 4 ; move ua , 3 ; move 3 , ul )  decode:( move ua + ul , 4 ; move ua , 4 ) 
[17708] c:0 is:( move 2 , 3 ; move ul , ul ; move ua , 4 )  decode:( move 3 , 3 ; move ua , 5 ) 
[17709] c:0 is:loop 1 , 3 , ( move 2 , ul ; move ul , ul )  decode:loop 0 , 3 , move 3 , ul + 4 / v0 
[17710] c:0 is:( move ul , ul ; move 2 , 4 ; move 2 , ul )  decode:( move 2 , 2 ; move 3 , 4 ) 
[17711] c:0 is:( move 3 , ul ; move ul , 2 ; move ua , 4 )  decode:( move 4 , 7 ; move ua , 2 / 3 ) 
[17712] c:0 is:( move 2 , 4 ; move ua , ul ; move ua , 4 )  decode:( move ua + 2 , 5 ; move ua , 4 ) 
[17713] c:0 is:( move 5 , ul ; move 2 , ul ; move ua , 2 )  decode:( move ua , ul ; move ua , 0 - 5 ) 
[17714] c:0 is:( move 4 , 2 ; move ul , ul ; move 2 , ul )  decode:( move 4 , 2 ; move 3 , 5 ) 
[17715] c:0 is:( move 4 , 2 ; move ua , ul ; move ua , 4 )  decode:( move 9 , 9 ; move ua , 0 - 4 ) 
[17716] c:0 is:( move ua , 4 ; move 2 , ul ; move 3 , ul )  decode:( move ua , 4 ; move 4 , 5 ) 
[17717] c:0 is:( move 2 , ul ; move 4 , ul ; move ul , 2 )  decode:( move 2 , ul ; move 5 , 2 ) 
[17718] c:0 is:( move ul , 4 ; move ua , 4 ; move ua , 2 )  decode:( move ua + ul , 8 ; move ua , 2 ) 
[17719] c:0 is:( move ua , 4 ; move ul , 3 ; move ua , 3 )  decode:loop 0 , 2 , move ua - ul , 2 / 4 
[17720] c:0 is:( move ua , 4 ; move ua , 3 ; move ua , 4 )  decode:loop 0 , 3 , move v0 - ua , 4 
[17721] c:0 is:( move 2 , 2 - move ua , 4 ; move ua , ul )  decode:loop 0 , 2 , move 0 - ua , 0 - 9 
[17722] c:0 is:( move 4 , ul ; move ua , 3 ; move 2 , ul )  decode:( move ua , 4 ; move 8 , 3 ) 
[17723] c:0 is:( move ul , 2 ; move 2 , ul ; move 4 , ul )  decode:( move 2 , 2 ; move 4 , 4 / 3 ) 
[17724] c:0 is:( move 2 , ul ; move 3 , ul ; move ua , 4 )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[17725] c:0 is:( move 5 , 2 ; move 2 , ul ; move ua , ul )  decode:( move ua , 2 ; move ua , 5 ) 
[17726] c:0 is:( loop 0 , 4 , move ua , 4 ; move ul , ua )  decode:loop 0 , 4 , move ua , 4 
[17727] c:0 is:( move ua , 4 ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move 5 , 4 / v0 
[17728] c:0 is:( loop 0 , 3 , move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move 3 / v0 , ul 
[17729] c:0 is:( move ul , 4 ; move ua , 2 ; move ua , 4 )  decode:( move ua + ul , 6 ; move ua , 4 ) 
[17730] c:0 is:( move ua , 3 ; move ul , ul ; move 2 , 4 )  decode:( move ua + ul , 3 ; move 2 , 8 ) 
[17731] c:0 is:( move ua , 3 ; move 3 , 2 - move ua , ul )  decode:( move ua , 3 ; move 5 , 3 / 2 ) 
[17732] c:0 is:( move ua , 6 ; move 2 , 2 ; move ua , ul )  decode:( move ua + ul , 6 ; move ua , ul ) 
[17733] c:0 is:( move 3 , ul ; move 2 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , ul 
[17734] c:0 is:( move 4 , 2 ; move ul , 4 ; move ua , ul )  decode:( move 4 , 2 ; move ua + ul , 5 ) 
[17735] c:0 is:( move ul , ul ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 4 , move 3 , ul 
[17736] c:0 is:( move ul , ul ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 3 , ul 
[17737] c:0 is:( move 3 , 3 ; move ua , ul ; move 4 , ul )  decode:( move 9 , ua / 2 ; move 4 , ul ) 
[17738] c:0 is:( move 4 , ul ; move 3 , 3 ; move ua , ul )  decode:( move 4 , ul ; move ua + 2 , 4 ) 
[17739] c:0 is:( move ua , 3 ; move ul , 4 ; move 3 , ul )  decode:( move ua , 3 ; move 4 , 5 ) 
[17740] c:0 is:( move 2 , 4 ; move ul , 4 ; move ua , ul )  decode:( move 2 , 4 ; move ua + ul , 4 ) 
[17741] c:0 is:( move ua , ul ; loop 0 , 5 , move ua , 4 )  decode:0 0 0 loop 0 , 4 , move 1 - - ua , : 0 , , 1 
[17742] c:0 is:( move 3 , 4 ; move ua , 4 ; move ua , ul )  decode:( move ua , 8 ; move ua , 4 + 4 ) 
[17743] c:0 is:( move ua + 2 , move 3 , ul ; move 4 , ul )  decode:( move 4 , 2 ; move ua - 5 , ul ) 
[17744] c:0 is:( move 2 , ul ; move 4 , ul ; move ua , 4 )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[17745] c:0 is:loop 0 , 3 , loop 1 , 2 , move 4 , 2 * v1  decode:loop 0 , 3 , move ua + 2 , v0 * 2 
[17746] c:0 is:( move ua , 3 ; move ul , 4 ; move ua , 4 )  decode:( move ua , 3 ; move ua , ua * ua ) 
[17747] c:0 is:( move ua , 3 ; move ua , 4 ; move 4 , ul )  decode:( move ua , 0 ; move ua + 3 , 4 ) 
[17748] c:0 is:( move ua , 6 ; move 3 , 2 ; move ua , ul )  decode:( move ua + ul , 6 ; move 7 , ul ) 
[17749] c:0 is:( move 4 , 3 ; move ua , ul ; move ua , 4 )  decode:( move ua + 3 , 3 ; move ua , 4 ) 
[17750] c:0 is:( move 3 , 5 ; move ul , ul ; move ua , 2 )  decode:( move ua , 5 ; move 3 , 0 - 4 ) 
[17751] c:0 is:( move ul , ul ; loop 0 , 4 , move ua , 4 )  decode:loop 0 , 4 , move ua , v0 + 5 
[17752] c:0 is:( move 2 , 4 ; move ua , 4 ; move ul , ul )  decode:( move 2 , 4 ; move ua + ul , 4 ) 
[17753] c:0 is:( move ua , ul ; move 4 , ul ; move 2 , 4 )  decode:( move 3 , ul ; move 9 , 4 ) 
[17754] c:0 is:loop 0 , 2 , loop 1 , 2 , move 3 , 4 * v1  decode:loop 0 , 4 , move 3 , 4 * v0 
[17755] c:0 is:( move 4 , 2 ; move ul , 2 - move ua , ul )  decode:( move 4 , 0 ; move ua - ul , 2 ) 
[17756] c:0 is:( move 3 , 4 ; move ul , 3 ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , 4 ) 
[17757] c:0 is:( move 3 , ul ; move 3 , ul ; move ua , 4 )  decode:( move 6 , 9 ; move ua , 0 - 4 ) 
[17758] c:0 is:( move 4 , 2 ; move ul , ul ; move 3 , ul )  decode:( move 5 , 2 ; move 3 , 5 ) 
[17759] c:0 is:( move 2 , 4 ; move ua , ul ; move 4 , ul )  decode:( move ua + 2 , 5 ; move 4 , ul ) 
[17760] c:0 is:( move 3 , ul ; move ua , 4 ; move 3 , ul )  decode:( move 3 , 4 ; move 8 , 4 + 4 ) 
[17761] c:0 is:( move ua , 4 ; move 3 , ul ; move ua , 4 )  decode:( move ua + 3 , 4 ; move 5 , 4 ) 
[17762] c:0 is:( move 2 , ul ; move 4 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , ul 
[17763] c:0 is:( move ua , ul ; move ul , 4 ; move 4 , 2 )  decode:loop 0 , 2 , move 2 - ua , 2 / 2 
[17764] c:0 is:( move ul , 3 ; move 3 , ul ; move ua , 4 )  decode:( move 4 , 5 ; move ua , 4 ) 
[17765] c:0 is:( move ua , 4 ; move ul , ul ; move 4 , 2 )  decode:( move ua + ul , 4 ; move 4 , 2 ) 
[17766] c:0 is:( move ua , 3 ; move 3 , ul ; move 4 , ul )  decode:( move 8 , 3 ; move 4 , 4 / 3 ) 
[17767] c:0 is:( move 4 , ul ; move ua , 4 ; move 2 , ul )  decode:( move 4 , ul ; move 3 + 4 3 , 4 ) 
[17768] c:0 is:( move ul , 4 ; move ua , 4 ; move 2 , ul )  decode:( move 2 , 9 ; move ua + ul , 2 ) 
[17769] c:0 is:( move ua , 3 ; move ul , 2 ; move 5 , ul )  decode:( move ua , 3 ; move ua , 5 + 4 ) 
[17770] c:0 is:( move ua , ul ; move 6 , 3 ; move ua , 2 )  decode:loop 0 , 3 , move 6 , 4 - v0 
[17771] c:0 is:( move ua , ul ; move 3 , 3 ; move 4 , ul )  decode:( move ua , ul ; move ua , 3 ) 
[17772] c:0 is:( move ul , 4 ; move ua , ul ; move 4 , 2 )  decode:( move ua + ul , 5 ; move 4 , 2 ) 
[17773] c:0 is:( move 4 , 4 ; move 2 , ul ; move ua , ul )  decode:( move ua , 4 ; move 5 , 5 ) 
[17774] c:0 is:( move 3 , ua ; move ul , 5 ; move ua , 3 )  decode:( move 3 , 0 ; move 5 , ua * ua ) 
[17775] c:0 is:( move 2 , 0 ; loop 0 , 4 , move 3 , v0 )  decode:loop 0 , 4 , move 3 , v0 * v0 
[17776] c:0 is:( move ua , 4 ; move ua , 3 ; move 4 , ul )  decode:( move ua + ul , 4 ; move 7 , 4 ) 
[17777] c:0 is:( move ul , 2 ; move 4 , ul ; move ua , 4 )  decode:( move 5 , 3 ; move ul - ua , 4 ) 
[17778] c:0 is:( move 4 , ul ; move ua , 4 ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 2 * 2 
[17779] c:0 is:( move 4 , 3 ; move ua , ul ; move 3 , ul )  decode:( move 9 , 9 ; move 4 , 2 - 3 ) 
[17780] c:0 is:( move 4 , ul ; move ul , 2 ; move 3 , ul )  decode:( move 2 - ua , 4 ; move 3 , ul ) 
[17781] c:0 is:loop 0 , 4 , move 3 + 2 , v0 * 2 / v0  decode:loop 0 , 4 , move ua - ul , 2 
[17782] c:0 is:( move ul , 2 ; move ua , ul ; move 4 , 4 )  decode:( move ua + ul , 3 ; move 4 , 4 ) 
[17783] c:0 is:( move ua , 4 ; move ua , 4 ; move 3 , ul )  decode:loop 0 , 3 , move ua - ul , 4 * v0 
[17784] c:0 is:( move ua , 2 ; move ul , 3 ; move 5 , ul )  decode:( move 6 , 2 ; move ua , 4 ) 
[17785] c:0 is:( move 4 , ul ; move 3 , ul ; move ua , 3 )  decode:( move ua , ul ; move ua , 3 ) 
[17786] c:0 is:( move 4 , 2 ; move ul , ul ; move ua , 4 )  decode:( move 5 , 2 ; move ul - ua , 5 ) 
[17787] c:0 is:( move 2 , 4 ; move ul , ul ; move ua , 4 )  decode:( move 3 , 4 ; move ua , 5 ) 
[17788] c:0 is:( move ua , ul ; move ul , 2 ; move 4 , 4 )  decode:( move ua , 4 ; move 4 , ul / 4 ) 
[17789] c:0 is:( move 3 , 3 ; move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move v0 , ul / 3 
[17790] c:0 is:( move ua , 3 ; move ul , ul ; move 4 , 3 )  decode:( move ua , 3 ; move 4 , 4 ) 
[17791] c:0 is:( move ua , 2 ; move ua , 4 + move ul , 4 )  decode:( move ua , 2 ; move ua + ul , 9 ) 
[17792] c:0 is:( move 2 , 0 ; loop 0 , 5 , move 2 , v0 )  decode:loop 0 , 3 , move 3 , v0 * v0 
[17793] c:0 is:( move 4 , ul ; move 2 , 4 ; move ua , ul )  decode:( move 0 - 4 , ul ; move 9 , 5 ) 
[17794] c:0 is:( move ua , ul ; move 2 , 4 ; move 4 , ul )  decode:( move 5 , ul ; move ua , ua * ua ) 
[17795] c:0 is:( move ua , 3 ; move 4 , ul ; move 3 , ul )  decode:( move ua + ul , 3 ; move 4 , ul ) 
[17796] c:0 is:( move ua , 3 ; move 3 , 4 ; move ul , ul )  decode:( move ua , 3 ; move 4 , 4 ) 
[17797] c:0 is:( move 3 , 4 ; move ul , ul ; move ua , 3 )  decode:( move 3 , 4 ; move ua , 4 ) 
[17798] c:0 is:( move ua , ul ; move 4 , 4 ; move ua , 3 )  decode:( move ua + ul , 4 ; move ua , 3 ) 
[17799] c:0 is:( move ua , 6 ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 + v0 , 3 / 3 
[17800] c:0 is:( move ua , ul ; move 3 , 5 ; move ua , 3 )  decode:( move 3 + 3 , ul ; move ua , 3 ) 
[17801] c:0 is:( move 4 , 3 ; move 3 , ul ; move ua , ul )  decode:( move 2 - ua , ul ; move ua , 5 ) 
[17802] c:0 is:( move ua , 4 ; move ul , 4 ; move 2 , ul )  decode:( move ua - ul , 4 ; move 3 , 5 ) 
[17803] c:0 is:( move 2 , 3 ; move ul , ul ; move 4 , ul )  decode:( move 2 , 3 ; move 5 , 2 ) 
[17804] c:0 is:( move ua , ul ; move 3 , 4 ; move 3 , ul )  decode:( move 5 , ul ; move ua + ul , 7 ) 
[17805] c:0 is:( move 3 , ul ; move ul , 4 ; move 2 , ul )  decode:( move 3 , ul ; move 3 , 4 ) 
[17806] c:0 is:( move 3 , ul ; move 3 , 4 ; move ua , ul )  decode:( move 4 , 9 ; move ua + ul , 5 ) 
[17807] c:0 is:( move 4 , 0 + move ul , ul ; move 4 , ul )  decode:( move 4 , 6 ; move 4 , 5 ) 
[17808] c:0 is:( move 2 , 4 ; move ul , ul ; move 3 , ul )  decode:( move 3 , 4 ; move 3 , 2 ) 
[17809] c:0 is:( move ul , 3 ; move 2 , ul ; move 4 , ul )  decode:( move 2 , 3 ; move 5 , 5 ) 
[17810] c:0 is:( move 4 , ul ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua - 2 , ua / v0 
[17811] c:0 is:( move ua , ul ; move ul , 3 ; move 3 , 4 )  decode:( move ua , ul ; move 3 , 7 ) 
[17812] c:0 is:( move 4 , ul ; move ul , 2 ; move ua , 4 )  decode:( move 4 , ua / 4 ; move ua , 9 ) 
[17813] c:0 is:( move 3 , 4 ; move 3 , ul ; move ua , ul )  decode:( move 4 , 9 ; move ua , 4 / 3 ) 
[17814] c:0 is:loop 0 , 2 , loop 1 , 3 , move 4 - v1 , 3  decode:loop 0 , 4 , move v0 + ul , 0 - 3 
[17815] c:0 is:( move ua , ul ; move 4 , 3 ; move 3 , ul )  decode:( move 0 - ua , 0 ; move ua , 3 ) 
[17816] c:0 is:( move 2 , 4 ; move 4 , ul ; move ua , ul )  decode:( move ua , 5 ; move ua + ul , ul ) 
[17817] c:0 is:( move ua , 2 ; move 4 , ul ; move ul , 4 )  decode:( move ua , 2 ; move 4 , ul ) 
[17818] c:0 is:( move ua , 4 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 4 , move 4 , 3 + 8 0 
[17819] c:0 is:( move ul , ul ; move 4 , ul ; move 3 , 2 )  decode:( move 4 , ua / 2 ; move 3 , 2 ) 
[17820] c:0 is:( move ua , 4 ; move 4 , 2 ; move ul , ul )  decode:( move ua , 4 ; move 5 , 2 ) 
[17821] c:0 is:( move ua , 2 ; move ul , ul ; move 4 , 4 )  decode:( move ua , ua ; move 3 , 5 ) 
[17822] c:0 is:( move 2 , ul ; move 4 , 4 ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , 4 ) 
[17823] c:0 is:( move ua , 6 ; move 2 , 3 ; move ua , ul )  decode:( move ua , 6 ; move ua + 2 , 6 ) 
[17824] c:0 is:( move ua , ua ; loop 0 , 5 , move 4 , ul )  decode:loop 0 , 4 , move 4 + v0 , ua / 3 
[17825] c:0 is:( move ua , ul ; move 4 , 4 ; move 2 , ul )  decode:( move 5 , ul ; move ua , 4 ) 
[17826] c:0 is:( move 3 , 4 ; move ua , ul ; move ua , 4 )  decode:( move 9 , 5 ; move ua , 4 ) 
[17827] c:0 is:( move ua , 4 ; move 2 , ul ; move 4 , ul )  decode:( move ua + ul , 4 ; move 5 , 5 ) 
[17828] c:0 is:( move 4 , 0 ; move ul , ul ; move 5 , ul )  decode:( move 4 , 0 ; move 5 , 5 ) 
[17829] c:0 is:( move ua , 4 ; move ul , ul ; move 2 , 4 )  decode:( move ua , 4 ; move 2 , ua * ua ) 
[17830] c:0 is:( move 3 , 2 ; move ul , ul ; move 4 , ul )  decode:( move 3 , 2 ; move 4 , 5 ) 
[17831] c:0 is:( move 3 , 2 ; move 4 , ul ; move ul , ul )  decode:loop 0 , 4 , move 2 , 2 - v0 
[17832] c:0 is:( move 4 , 4 ; move ul , ul ; move ua , 2 )  decode:( move 4 , 4 ; move ua , 0 - 2 ) 
[17833] c:0 is:( move 3 , ul ; move 4 , 2 ; move ul , ul )  decode:( move 3 , ul ; move 5 , ua / 3 ) 
[17834] c:0 is:( move ua , ul ; loop 0 , 5 , move 3 , ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[17835] c:0 is:( move 3 , ul ; loop 0 , 4 , move ul , ul )  decode:( move 4 , ua / 4 ; move 3 , 4 ) 
[17836] c:0 is:( move 3 , 3 ; move ul , ul ; move ua , 4 )  decode:( move 4 , 9 ; move ua , ua * ua ) 
[17837] c:0 is:( move 4 , 3 ; move ul , 3 ; move ua , ul )  decode:( move 4 , 3 ; move ua , 4 ) 
[17838] c:0 is:( move ua , ul ; move 4 , 2 ; move ul , 4 )  decode:( move ua , ul ; move 4 , 2 ) 
[17839] c:0 is:( move ul , 4 ; move 4 , ul ; move ua , 2 )  decode:( move 4 , 5 ; move ua , 2 ) 
[17840] c:0 is:( move ua , 4 ; move 3 , ul ; move 3 , ul )  decode:( move ua , 4 ; move 5 , 5 ) 
[17841] c:0 is:( move ua , ul ; move 4 , 2 ; move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , ul / v0 
[17842] c:0 is:( loop 0 , 4 , move ul , ul ; move 4 , ua )  decode:( move 5 , 4 ; move ua - 4 , 3 ) 
[17843] c:0 is:( move 3 , ul ; move 4 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 3 , ul 
[17844] c:0 is:( move ua , ul ; move 4 , 3 ; move ua , 4 )  decode:( move ua , ul ; move 9 , 4 + 3 ) 
[17845] c:0 is:( loop 0 , 6 , move ua , 3 ; move ul , ua )  decode:loop 0 , 4 , move v0 + 3 , 0 - 3 
[17846] c:0 is:( move 5 , 0 ; move 4 , ul ; move ul , ul )  decode:( move 5 , 0 ; move 5 , ul ) 
[17847] c:0 is:( move 4 , ul ; move 4 , 2 ; move ua , ul )  decode:( move ua , ul ; move ua + 2 , ul ) 
[17848] c:0 is:( move 4 , ul ; move ua , 2 ; move 4 , ul )  decode:( move ua , 3 ; move ua - 2 , 4 ) 
[17849] c:0 is:( move ua , ul ; move ua , 3 ; move 4 , 4 )  decode:loop 0 , 3 , move ua - v0 , 4 * 4 
[17850] c:0 is:( move 2 , ul ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 4 , move 2 , ua / v0 
[17851] c:0 is:( move ua , 2 ; move ul , 4 ; move 4 , ul )  decode:( move ua , 2 ; move 5 , 5 ) 
[17852] c:0 is:( move 4 , ul ; move 2 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , ul 
[17853] c:0 is:( move ua , ul ; move 3 , ul ; move 3 , 4 )  decode:( move ua + 3 , ul ; move 4 , 4 ) 
[17854] c:0 is:( move 4 , ul ; move 2 , ul ; move ua , 4 )  decode:( move 6 , 9 ; move ua , 4 / 3 ) 
[17855] c:0 is:( move ua , 4 ; move 4 , 3 ; move ua , ul )  decode:( move 5 , 4 ; move ua + 2 , 4 ) 
[17856] c:0 is:( move 2 , ul ; move ua , 4 ; move 4 , ul )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[17857] c:0 is:( move ua , 3 ; move ul , 3 ; move 5 , ul )  decode:( move 3 , 3 ; move ua , 4 ) 
[17858] c:0 is:( move 4 , ul ; move ul , 3 ; move 3 , ul )  decode:( move 4 , ul ; move 4 , 3 ) 
[17859] c:0 is:( move ua , 4 ; move 3 , ul ; move 4 , ul )  decode:( move ua , 4 ; move ua , 4 / 3 ) 
[17860] c:0 is:( move 3 , ul ; move ul , 3 ; move 4 , ul )  decode:( move 3 , ul ; move 4 , 4 ) 
[17861] c:0 is:( move ul , ul ; loop 0 , 5 , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[17862] c:0 is:( move ua , 4 ; move ul , ul ; move 4 , 3 )  decode:( move ua , 4 ; move 4 , 4 ) 
[17863] c:0 is:( move ul , 4 ; move 3 , 4 ; move ua , ul )  decode:( move 3 , 8 ; move ua + ul , 4 ) 
[17864] c:0 is:( move 2 , ul ; move ul , ul ; move 4 , 4 )  decode:( move 3 , ul ; move 4 , 5 v) 
[17865] c:0 is:( move ua , 4 ; move ul , 4 ; move ua , 4 )  decode:( move ua , 4 ; move ua , 9 + 4 ) 
[17866] c:0 is:( move 3 , ul ; move 4 , 4 ; move ua , ul )  decode:( move 4 , 4 ; move ua + 2 , 4 ) 
[17867] c:0 is:( move ua , 4 ; move 4 , ul ; move ua , 4 )  decode:( move ua , 4 ; move 5 , 4 ) 
[17868] c:0 is:( move 4 , 4 ; move 3 , ul ; move ua , ul )  decode:( move ua , 9 ; move ua , 0 - 5 ) 
[17869] c:0 is:( move ua , ul ; move 4 , ul ; move 3 , 4 )  decode:( move 4 , ul ; move 5 , 5 ) 
[17870] c:0 is:( move 3 , 3 ; move 3 , ul - move ua , ul )  decode:( move 3 , 9 ; move 9 , 3 / 3 ) 
[17871] c:0 is:( move 4 , 3 ; move ua , ul ; move 4 , ul )  decode:loop 0 , 3 , move 4 , v0 / 3 
[17872] c:0 is:( move 4 , ul ; move 4 , ul ; move ua , 3 )  decode:( move ua , ul ; move ua , 3 ) 
[17873] c:0 is:( move 4 , 4 ; move ul , 3 ; move ua , ul )  decode:( move 4 , 4 ; move ua + ul , 4 ) 
[17874] c:0 is:( move 5 , 2 ; move ul , ul ; move 3 , ul )  decode:( move ua - ul , 2 ; move 3 , 5 ) 
[17875] c:0 is:( move 4 , ul ; loop 0 , 4 , move ul , ul )  decode:( move 5 , ul ; move 3 , 0 - 4 ) 
[17876] c:0 is:( move 4 , 4 ; move ua , 3 ; move ul , ul )  decode:( move ua , 4 ; move ua , 3 ) 
[17877] c:0 is:( move 3 , ul ; move 3 , 4 ; move ul , ul )  decode:( move 3 , ul ; move 4 , 4 ) 
[17878] c:0 is:( move ul , ul ; move 2 , 4 ; move 4 , ul )  decode:( move 2 , 4 ; move ua - ul , 4 ) 
[17879] c:0 is:( move ua , 6 ; move 2 , ul ; move ua , 4 )  decode:( move 8 , 6 ; move ua , 5 ) 
[17880] c:0 is:( move 4 , 3 ; move ul , ul ; move ua , 4 )  decode:( move 5 , 3 ; move ua , 5 ) 
[17881] c:0 is:( move ul , 4 ; move ul , ul ; move 2 , 4 )  decode:0 0 loop 0 , 2 , move 2 , 4 
[17882] c:0 is:( move ul , ul ; move 3 , 4 ; move 3 , ul )  decode:loop 0 , 4 , move v0 , 2 - v0 
[17883] c:0 is:( move 3 , 4 ; move ua , 4 ; move ul , ul )  decode:( move 3 , 4 ; move ua + ul , 4 ) 
[17884] c:0 is:( move 4 , 4 + move ul , ul ; move ua , 2 )  decode:( move 4 , 0 ; move ua , 5 ) 
[17885] c:0 is:( move 2 , 3 ; move ul , ul ; move 5 , ul )  decode:( move 2 , 3 ; move ua , 2 ) 
[17886] c:0 is:loop 0 , 2 , ( move 2 , v0 ; move 3 , 3 )  decode:loop 0 , 3 , move 3 , 4 - v0 
[17887] c:0 is:( move ua , 4 ; move ul , 4 ; move 3 , ul )  decode:( move ua , 4 ; move 4 , 5 ) 
[17888] c:0 is:( move 4 , ul ; move 2 , ul ; move 4 , ul )  decode:( move 5 , ul ; move 4 , 4 / 3 ) 
[17889] c:0 is:( loop 0 , 6 , move 3 , ul ; move ul , ua )  decode:loop 0 , 4 , move 4 , 4 / 3 
[17890] c:0 is:( move ua , ul ; move 3 , ul ; move 4 , 4 )  decode:( move ua + 3 , ul ; move 4 , 4 ) 
[17891] c:0 is:( move ua , 3 ; move ul , 4 ; move 4 , ul )  decode:( move ul - ua , 3 ; move 5 , 5 ) 
[17892] c:0 is:( move ua , 3 ; move ul , ul ; move 4 , 4 )  decode:( move ua + ul , 3 ; move 4 , 5 ) 
[17893] c:0 is:( move 3 , 4 ; move ul , ul ; move ua , 4 )  decode:( move ua - ul , 4 ; move ua , 8 ) 
[17894] c:0 is:( move ua , ul ; loop 0 , 6 , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[17895] c:0 is:( move ul , 3 ; move 4 , ul ; move ua , 4 )  decode:( move 5 , 4 ; move ua , 4 ) 
[17896] c:0 is:( move 2 , ul ; move ul , 4 ; move 4 , ul )  decode:( move 2 , ul ; move 5 , 5 ) 
[17897] c:0 is:( move 4 , ul ; move 4 , 2 ; move ul , ul )  decode:( move 4 , ul ; move 5 , ua / 3 ) 
[17898] c:0 is:( move 5 , 2 ; move ul , 4 ; move ua , ul )  decode:( move 4 , 2 ; move ua , 5 ) 
[17899] c:0 is:( move 3 , ul ; move ul , ul ; move 3 , 4 )  decode:( move 3 , 9 ; move 4 , 4 / 3 ) 
[17900] c:0 is:( move ua , 3 ; move 3 , ul ; move 5 , ul )  decode:( move 8 , 3 ; move ua , 5 ) 
[17901] c:0 is:( move ua , ul ; move 4 , 4 ; move ua , 4 )  decode:( move ua , ul ; move ua + ul , 4 ) 
[17902] c:0 is:( move 3 , ul ; move ul , 4 ; move ua , 4 )  decode:( move 3 , ul ; move ua , 9 ) 
[17903] c:0 is:( move 4 , ul ; move ua , 4 ; move 3 , ul )  decode:( move 4 , 0 - move ua + 2 , 4 ) 
[17904] c:0 is:( move ua , 6 ; move 3 , 3 ; move ua , ul )  decode:( move ua , 6 ; move ua + 2 , 3 ) 
[17905] c:0 is:( move 4 , 4 ; move ul , ul ; move ua , 3 )  decode:( move 2 - ua , ul ; move ua , 7 ) 
[17906] c:0 is:( move ul , ul ; move 4 , ul ; move 4 , 2 )  decode:( move 4 , ul ; move 5 , 2 ) 
[17907] c:0 is:( move 3 , 4 ; move ul , ul ; move 3 , ul )  decode:( move 4 , 4 ; move 3 , 2 ) 
[17908] c:0 is:( move ua , 4 ; move 3 , 4 ; move ul , ul )  decode:( move ul - ua , ul ; move 4 , 7 ) 
[17909] c:0 is:( move 3 , 2 ; move ul , ua - move 4 , ul )  decode:( move 3 , 2 ; move 3 , 5 ) 
[17910] c:0 is:( move ua , ul ; move 3 , 4 ; move 4 , ul )  decode:( move 5 , ul ; move ua + ul , 4 ) 
[17911] c:0 is:( move 3 , ul ; move 4 , ul ; move ua , 4 )  decode:( move ua + ul , ul ; move ua , 4 ) 
[17912] c:0 is:( move 4 , 3 ; move ul , 4 ; move ua , ul )  decode:( move 4 , 3 ; move 7 , 5 ) 
[17913] c:0 is:( move ul , 3 ; move ul , ul ; move 3 , 4 )  decode:( move 2 , 3 ; move 3 , 4 ) 
[17914] c:0 is:( move ul , 4 ; move ua , 4 ; move 3 , ul )  decode:( move 3 , 8 ; move ua + ul , ul ) 
[17915] c:0 is:( move 3 , 4 ; move ul , 4 ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , 5 ) 
[17916] c:0 is:( move 5 , 2 ; move ul , ul ; move ua , 4 )  decode:( move ua , ua / 3 ; move 5 , 5 ) 
[17917] c:0 is:( loop 0 , 6 , move ul , ul ; move ua , 3 )  decode:loop 0 , 4 , move v0 * 2 , 3 * 4 
[17918] c:0 is:( move 3 , ul ; move ul , 4 ; move 3 , ul )  decode:( move 3 , ul ; move 4 , 4 - 3 ) 
[17919] c:0 is:( move ua , 6 ; move ua , 3 ; move 3 , ul )  decode:( move 9 , 6 ; move 3 + 3 , 4 ) 
[17920] c:0 is:( move ua , 4 ; move ua , 4 ; move 4 , ul )  decode:loop 0 , 3 , move ua - ul , 4 - v0 
[17921] c:0 is:( move 3 , ul ; move ua , 4 ; move 4 , ul )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[17922] c:0 is:( move ua , ul ; move 4 , 3 ; move 4 , ul )  decode:( move ua , ul ; move ua , 4 - 3 ) 
[17923] c:0 is:( move ua , 3 ; move ul , 5 ; move ua , 4 )  decode:( move ua , 9 ; move ua , ua * ua ) 
[17924] c:0 is:( move ua , ua ; loop 0 , 6 , move 4 , ul )  decode:loop 0 , 4 , move 4 + 3 , 0 - 4 ul 
[17925] c:0 is:( move ua , 6 ; move ul , 2 ; move 3 , ul )  decode:( move ua , 6 ; move 4 , 3 ) 
[17926] c:0 is:( move ua , ul ; move ul , 4 ; move 3 , 4 )  decode:( move ua , ul ; move 3 , 9 ) 
[17927] c:0 is:( move 3 , ul ; move ua , ul ; move 4 , 4 )  decode:( move 9 , ua / 3 ; move 4 , 4 ) 
[17928] c:0 is:loop 0 , 2 , loop 1 , 2 , move 4 , 4 * v1  decode:loop 0 , 3 , move 4 + v0 , 4 / 0 4 
[17929] c:0 is:( move 3 , 4 + move 3 , ul ; move ua , ul )  decode:( move ua , 7 ; move ua , 3 / 2 ) 
[17930] c:0 is:( move 4 , 2 ; move ul , ul ; move 4 , ul )  decode:( move 4 , 2 ; move 4 , 5 ) 
[17931] c:0 is:( move ul , 2 ; move 4 , ul ; move 4 , ul )  decode:( move 2 , 2 ; move ua - 2 , ul ) 
[17932] c:0 is:( loop 0 , 5 , move ul , ul ; move 4 , ua )  decode:( move 2 , 4 ; move ua , 0 - 4 ) 
[17933] c:0 is:( move ua , 4 ; move ul , ul ; move 3 , 4 )  decode:( move ua + ul , 4 ; move 3 , 5 ) 
[17934] c:0 is:( loop 0 , 4 , move 4 , 2 ; move v0 , 0 )  decode:loop 0 , 4 , move v0 - ua , 4 * 2 
[17935] c:0 is:( move 4 , 3 ; move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move v0 - 4 , ul / 4 
[17936] c:0 is:loop 0 , 2 , ( move v0 , 2 ; move 4 , 2 )  decode:( move 4 , 4 ; move 5 , 4 ) 
[17937] c:0 is:( move ua , ul ; move ua , 4 ; move 4 , 4 )  decode:loop 0 , 3 , move v0 - ua , 4 
[17938] c:0 is:( move ua , ul ; move 4 , 4 ; move 3 , ul )  decode:loop 0 , 3 , move ua - 2 , ua / v0 
[17939] c:0 is:loop 0 , 2 , ( move 2 , v0 ; move 2 , 4 )  decode:loop 0 , 3 , move 3 , v0 * 4 
[17940] c:0 is:( loop 0 , 6 , move ul , ul ; move 2 , ul )  decode:loop 0 , 4 , move 2 , 4 / v0 
[17941] c:0 is:( move 2 , 0 ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 4 , move 3 , v0 * 5 
[17942] c:0 is:( move 4 , ul ; move ul , 4 ; move 2 , ul )  decode:( move 3 , ul ; move 3 , 9 + 2 ) 
[17943] c:0 is:( move 4 , ul ; move ul , ul ; move 4 , 2 )  decode:( move 4 , ul ; move 5 , 4 ) 
[17944] c:0 is:( move 4 , ul ; move 2 , 4 ; move ul , ul )  decode:( move 3 , ul ; move 3 , 5 * 2 ) 
[17945] c:0 is:loop 0 , 7 , loop 1 , 0 , move 2 , 3 / v0  decode:loop 0 , 4 , move 3 , 3 + 4 / v0 
[17946] c:0 is:( move ul , 3 ; move ua , ul ; move 4 , 4 )  decode:( move ua , 4 ; move 4 , 4 ) 
[17947] c:0 is:( loop 0 , 4 , move ul , ul ; move 4 , ul )  decode:( move 2 , 4 ; move ua - ul , 4 ) 
[17948] c:0 is:( move 5 , ul ; move 2 , ul ; move 3 , ul )  decode:( move 3 - ua , ul ; move 4 , 5 ) 
[17949] c:0 is:( move 4 , 5 ; move 2 , ul ; move ua , ul )  decode:( move 5 , 5 ; move ua + ul , 4 ) 
[17950] c:0 is:( move 4 , 3 ; move ua , 4 ; move ul , ul )  decode:( move 4 , 3 ; move ua , 4 ) 
[17951] c:0 is:( move 4 , ul ; move ul , 3 ; move ua , 4 )  decode:( move 3 , ul ; move ua , 4 / ua ) 
[17952] c:0 is:( move 4 , ul ; move 3 , ul ; move ua , 4 )  decode:( move ua + ul , 9 ; move 5 , 4 ) 
[17953] c:0 is:( move 2 , ul ; move 4 , ul ; move 4 , ul )  decode:( move 2 - ua , ul ; move 5 , 2 ) 
[17954] c:0 is:loop 0 , 2 , ( move 3 , 3 ; move 3 , v0 )  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[17955] c:0 is:( loop 0 , 6 , move ul , ul ; move 3 , ul )  decode:loop 0 , 4 , move 2 , 4 * v0 
[17956] c:0 is:( move 2 , 0 ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move 5 , v0 * 3 
[17957] c:0 is:( move ua , 2 / move ul , 3 ; move ua , 4 )  decode:( move ua , 8 ; move ua , ua / 3 ) 
[17958] c:0 is:loop 0 , 2 , loop 1 , 3 , move 4 / 3 , v1  decode:loop 0 , 4 , move 2 , 4 / v0 
[17959] c:0 is:( move 4 , ul ; move ul , ul ; move 3 , 4 )  decode:( move 5 , ua / 4 ; move 3 , 9 ) 
[17960] c:0 is:( move 4 , 4 ; move 4 , ul ; move ua , ul )  decode:( move ua , 5 ; move ua + ul , 5 ) 
[17961] c:0 is:( move ul , 3 ; move 4 , ul ; move 4 , ul )  decode:( move 4 , 4 ; move 5 , ul ) 
[17962] c:0 is:( move ua , ul ; move 4 , ul ; move 4 , 4 )  decode:( move 4 , ul ; move ua + 3 , 4 ) 
[17963] c:0 is:( move 6 , ul ; move ua , 2 ; move 4 , ul )  decode:( move ua , ul ; move 9 , ua / 3 ) 
[17964] c:0 is:( move 4 , 4 ; move ul , ul ; move 3 , ul )  decode:( move 3 , 9 ; move 4 , 0 - 4 ) 
[17965] c:0 is:( move 3 , ul ; move ul , ul ; move 4 , 4 )  decode:( move 4 , ul ; move 4 , 5 ) 
[17966] c:0 is:( move 4 , ul ; move 4 , ul ; move ua , 4 )  decode:( move ua + 3 , ul ; move ua , 4 ) 
[17967] c:0 is:( move ua , 4 ; move ul , 4 ; move 4 , ul )  decode:( move 5 , 4 ; move 5 , 5 ) 
[17968] c:0 is:( move 4 , 0 ; move ul , ul ; move 7 , ul )  decode:( move 4 , 0 ; move 8 , 2 ) 
[17969] c:0 is:( move ua , 9 ; move 2 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 0 - 4 , 9 / v0 
[17970] c:0 is:( move ua , 6 ; move 4 , 3 ; move ua , ul )  decode:( move ua , 6 ; move ua , 0 - 4 ) 
[17971] c:0 is:( move ua , ul ; move 4 , 4 ; move 4 , ul )  decode:( move ua , ul ; move ua ; move 4 , 4 ) 
[17972] c:0 is:( move 4 , ul ; move ul , 4 ; move ua , 4 )  decode:( move 4 , ul ; move ua , ua * ua ) 
[17973] c:0 is:( move ul , 4 ; move ua , ul ; move 4 , 4 )  decode:( move ua + ul , 9 ; move 4 , 4 ) 
[17974] c:0 is:( move 3 , ul ; move 3 , ul ; move 5 , ul )  decode:loop 0 , 3 , move 3 - ua , ul 
[17975] c:0 is:( move 2 , 3 / move 3 , ul ; move ua , ul )  decode:( move ua , 3 ; move 4 , ua / 4 ) 
[17976] c:0 is:( loop 0 , 5 , move 2 , v0 ; move 4 , 0 )  decode:( move ua , 0 ; move ua , 4 * 2 ) 
[17977] c:0 is:( move ul , 3 ; move ul , ul ; move 4 , 4 )  decode:( move 2 , 3 ; move 4 , ua * ua ) 
[17978] c:0 is:( move 4 , 4 ; move ua , 4 ; move ul , ul )  decode:( move 4 , 4 ; move ua + ul , 4 ) 
[17979] c:0 is:( loop 0 , 6 , move ua , 4 ; move ul , ul )  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[17980] c:0 is:( move 4 , 2 ; move ul , ul ; move 5 , ul )  decode:( move 4 , 2 ; move ul - ua , 2 ) 
[17981] c:0 is:( move ul , ul ; move 4 , ul ; move 3 , 4 )  decode:( move 5 , 2 ; move 3 , 4 ) 
[17982] c:0 is:( move 4 , ul ; move ul , ul ; move 5 , 2 )  decode:( move 2 - ua , ul ; move 5 , ul ) 
[17983] c:0 is:( move 3 , 6 ; move ul , ul ; move ua , 3 )  decode:( move 4 , 3 * 6 ; move 5 , 3 ) 
[17984] c:0 is:( move 3 , 3 / move 2 , ul ; move ua , ul )  decode:( move 4 , 2 ; move ua , ua / 4 ) 
[17985] c:0 is:( move 3 , 2 ; loop 0 , 3 , move 3 , v0 )  decode:( move 6 , 2 ; move ua - ul , 2 ) 
[17986] c:0 is:( move 5 , ul ; move ul , ul ; move 2 , 4 )  decode:( move ua - ul , ul ; move 2 , 5 ) 
[17987] c:0 is:( move ul , 4 ; move 3 , ul ; move 4 , ul )  decode:( move 3 , 4 ; move ua - 3 , ul ) 
[17988] c:0 is:( move ua , ul ; move ul , 4 ; move 4 , 4 )  decode:( move ua , ul ; move 4 , ua * ua ) 
[17989] c:0 is:( move 3 , ul ; move 4 , 4 ; move ul , ul )  decode:( move 4 , 2 ; move ua - 3 , 4 ) 
[17990] c:0 is:( move ua , 9 ; move 2 , 2 ; move ua , ul )  decode:loop 0 , 3 , move v0 + 4 , 9 / 3 
[17991] c:0 is:( move 4 , ul ; move ul , 3 ; move 4 , ul )  decode:( move 4 , ul ; move 4 , 4 ) 
[17992] c:0 is:( move 3 , ul ; move 4 , ul + move ul , 3 )  decode:( move 3 , ul ; move 4 , 3 / 2 ) 
[17993] c:0 is:( move 4 , 0 ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 4 , move 3 - ua , 0 - 3 
[17994] c:0 is:( move 4 , ul ; move ul , 2 - move ua , 4 )  decode:( move 4 , ul ; move ua - ul , ul ) 
[17995] c:0 is:loop 0 , 2 , ( move v0 , 2 ; move 4 , 3 )  decode:loop 0 , 3 , move 3 , 4 + v0 
[17996] c:0 is:( move ua , 4 ; move 4 , 4 ; move ul , ul )  decode:( move ul - ua , 4 ; move 5 , 4 ) 
[17997] c:0 is:( move 5 , 3 ; move ul , 4 ; move ua , ul )  decode:( move 5 , 3 ; move 7 , 5 ) 
[17998] c:0 is:( move ua , 4 ; move ua , 4 + move ul , 4 )  decode:( move ua , 4 ; move ua , 4 * 4 ) 
[17999] c:0 is:( move ul , 4 ; move ua , 4 ; move 4 , ul )  decode:( move ua + ul , 8 ; move 4 , 4 ) 
[18000] c:0 is:( move ua , 4 ; move ul , ul ; move 4 , 4 )  decode:( move ua + ul , 4 ; move 3 , 5 ) 
[18001] c:0 is:( move ua , 9 ; move ul , 2 ; move ua , 2 )  decode:( move ua , 9 ; move ua , 4 * 4 ) 
[18002] c:0 is:( move 3 , 6 ; move ul , 3 ; move ua , ul )  decode:( move 3 , 9 ; move ua , 4 ) 
[18003] c:0 is:( move ua , 6 ; move ul , 3 ; move 3 , ul )  decode:( move ua , 6 ; move 4 , 4 ) 
[18004] c:0 is:( move 4 , 2 ; move ul , ua - move 4 , ul )  decode:( move 4 , 2 ; move 3 , 5 / 4 ) 
[18005] c:0 is:( move 4 , 4 ; move ul , 4 ; move ua , ul )  decode:( move 4 , 4 ; move 7 , 5 ) 
[18006] c:0 is:( move ul , 4 ; move 4 , ul ; move 3 , ul )  decode:( move 3 , 9 ; move ua , 2 - 3 ) 
[18007] c:0 is:( move ul , 4 ; move 4 , 4 ; move ua , ul )  decode:( move 3 , 8 ; move ua , ul ) 
[18008] c:0 is:( move 3 , ua / move ua , 4 ; move 2 , ul )  decode:( move 2 , 9 ; move 9 , 3 * 4 ) 
[18009] c:0 is:( move 3 , ul ; move ul , 4 ; move 4 , ul )  decode:( move 3 , ul ; move 5 , 5 ) 
[18010] c:0 is:( move 4 , 4 ; move ua , 2 - move ul , ul )  decode:( move 4 , 4 ; move ua , ua * ua ) 
[18011] c:0 is:( move 4 , ul ; move ua , 4 ; move 4 , ul )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[18012] c:0 is:( move ua , ul ; move ul , 3 ; move 4 , 5 )  decode:( move ua , ul ; move 4 , ua * ua ) 
[18013] c:0 is:( move 4 , ua * move ua , 2 ; move 4 , ul )  decode:( move 4 , 8 ; move ua , ua / 4 ) 
[18014] c:0 is:( move 7 , 2 ; move ul , ul ; move 2 , ul )  decode:( move 7 , 2 ; move 3 , 2 ) 
[18015] c:0 is:( move ua , 3 ; move ul , 4 ; move 5 , ul )  decode:( move ul - ua , 3 ; move ua , 5 ) 
[18016] c:0 is:( move ul , ul ; move 4 , 4 ; move 3 , ul )  decode:( move 3 , ul ; move ua - 2 , 4 ) 
[18017] c:0 is:loop 0 , 6 , loop 1 , 0 , move v1 - 4 , 4  decode:loop 0 , 4 , move ua - 2 - ua , 0 0 0 0 0 / 0 
[18018] c:0 is:( move 3 , 0 ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move v0 - ua , 9 
[18019] c:0 is:( move 4 , 0 ; loop 0 , 5 , move 2 , v0 )  decode:loop 0 , 4 , move 0 - 3 , v0 / 0 
[18020] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move 2 , 2 )  decode:loop 0 , 4 , move v0 + ul , 0 0 - 7 
[18021] c:0 is:( move 4 , ul ; move ul , ul ; move 4 , 3 )  decode:( move 5 , ul ; move 3 , 4 ) 
[18022] c:0 is:( move 4 , 3 ; move 4 , ul ; move ul , ul )  decode:( move 4 , 3 ; move 4 , ul ) 
[18023] c:0 is:( move 4 , 4 ; move ul , ul ; move ua , 4 )  decode:( move 5 , 4 ; move ua - ul , 5 ) 
[18024] c:0 is:( move 4 , ul ; move 3 , 4 ; move ul , ul )  decode:( move 4 , ul ; move 4 , 4 ) 
[18025] c:0 is:( loop 0 , 6 , move ul , 4 ; move ua , ul )  decode:( move ua + ul , 3 ; move ul , 4 ) 
[18026] c:0 is:( move ua , ul ; loop 0 , 3 , move ua , 8 )  decode:loop 0 , 4 , move 0 - ua , 0 - 8 
[18027] c:0 is:( move 4 , ul ; move 5 , 2 ; move ul , ul )  decode:( move 4 , ul ; move 5 , 2 ) 
[18028] c:0 is:( move 2 , 0 ; loop 0 , 6 , move 4 , v0 )  decode:loop 0 , 4 , move ua , 0 - 4 * v0 
[18029] c:0 is:( loop 0 , 4 , move 2 , 4 ; move v0 , 2 )  decode:loop 0 , 3 , move 0 - 4 , 0 - 9 
[18030] c:0 is:( move 4 , ul ; move ul , 4 ; move 4 , ul )  decode:( move 3 , ul ; move 5 , 5 ) 
[18031] c:0 is:( move ua , 4 * move ul , ul ; move 4 , 2 )  decode:( move 0 - ua , 2 ; move 4 , 5 ) 
[18032] c:0 is:( move 4 , 5 ; move ul , 4 ; move ua , ul )  decode:( move 4 , 5 ; move ua , 5 ) 
[18033] c:0 is:( move 4 , 4 ; move ul , ul ; move 4 , ul )  decode:( move 4 , 4 ; move 4 , 5 ) 
[18034] c:0 is:loop 0 , 3 , ( move 3 , 3 ; move 3 , v0 )  decode:loop 0 , 3 , move v0 - ua , 3 
[18035] c:0 is:( move ua , 9 ; move ua , 2 ; move 3 , ul )  decode:( move ua , 9 ; move 8 , 2 ) 
[18036] c:0 is:( move ua , 9 ; move 2 , 3 ; move ua , ul )  decode:( move ua , 9 ; move ua + ul , 9 ) 
[18037] c:0 is:( move 2 , 9 ; move 2 , ul ; move ua , ul )  decode:( move 3 , 9 ; move ua + ul , ul ) 
[18038] c:0 is:loop 0 , 2 , ( move 4 , 2 ; move v0 , 4 )  decode:( move ua + ul , 2 ; move 2 , 4 ) 
[18039] c:0 is:( move 2 , 2 ; loop 0 , 5 , move 3 , v0 )  decode:loop 0 , 3 , move ua - 2 , 2 - 3 2 
[18040] c:0 is:( move 4 , 3 / move 2 , ul ; move ua , ul )  decode:( move 4 , 2 ; move ua , 3 / 2 ) 
[18041] c:0 is:( move 4 , ul ; move 3 , ul ; move 5 , ul )  decode:loop 0 , 3 , move 3 + v0 , ul 
[18042] c:0 is:( move 3 , 6 ; move ul , ul ; move ua , 4 )  decode:( move 4 , 0 ; move ua , ua * ua ) 
[18043] c:0 is:( move 4 , 5 ; move ul , ul ; move ua , 4 )  decode:( move ul - ua , 9 ; move 5 , 5 ) 
[18044] c:0 is:( move ul , ul ; move 4 , ul ; move 4 , 4 )  decode:( move 5 , 2 ; move 4 , 4 ) 
[18045] c:0 is:( move ua , 3 / move 2 , ul ; move 4 , ul )  decode:( move 4 , 2 / ua ; move ua , 5 ) 
[18046] c:0 is:( move ua , 9 ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 0 - 4 , 9 + v0 
[18047] c:0 is:( move ua , 4 ; move 7 , 2 ; move ul , ul )  decode:( move ua + ul , 4 ; move 7 , 2 ) 
[18048] c:0 is:( move 5 , 4 ; move ul , ul ; move ua , 4 )  decode:( move ua , 4 ; move 5 , 5 ) 
[18049] c:0 is:( move 6 , ul ; move 3 , ul ; move ua , 4 )  decode:( move 9 , ua / 3 ; move 5 , ua , ) 2 
[18050] c:0 is:( move ua , 9 ; move 3 , 2 ; move ua , ul )  decode:( move ua + ul , 9 ; move ua , 2 ) 
[18051] c:0 is:( move ul , ul ; move 4 , 4 ; move 4 , ul )  decode:( move 3 , ul ; move ua - ul , 4 ) 
[18052] c:0 is:( move 4 , ul ; move ul , ul ; move 4 , 4 )  decode:( move 5 , ua / 4 ; move 4 , 5 ) 
[18053] c:0 is:( move 5 , ul ; move ul , ul ; move 3 , 4 )  decode:( move ua , ul ; move 3 , 4 + 5 ) 
[18054] c:0 is:( loop 0 , 5 , move 4 , v0 ; move 4 , 0 )  decode:loop 0 , 4 , move ua , 0 - v0 + 3 
[18055] c:0 is:( move ua , 6 ; move ul , ul ; move 4 , 4 )  decode:( move ua + ul , 6 ; move 4 , 5 ) 
[18056] c:0 is:( move ua , 9 ; move ua , 3 ; move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 - 3 
[18057] c:0 is:( move ua , 4 * move ul , 4 ; move ua , 4 )  decode:( move 6 , ua * ua ; move ua , 7 ) 
[18058] c:0 is:( move ua , 9 ; move ua , 4 ; move 2 , ul )  decode:( move 5 , 9 ; move 8 , 4 ) 
[18059] c:0 is:( move 0 , 4 ; loop 0 , 5 , move 4 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[18060] c:0 is:( move ua , 9 ; move ul , 2 ; move 3 , ul )  decode:( move ua , 9 ; move 4 , 0 - 3 ) 
[18061] c:0 is:( move ua , 9 ; move 4 , 2 ; move ua , ul )  decode:( move ua + ul , 9 ; move 8 , ul ) 
[18062] c:0 is:( move ua , 9 ; move ua , 3 ; move ua , 4 )  decode:loop 0 , 4 , move ua / v0 , 9 / 2 
[18063] c:0 is:( move ul , 6 ; move ua , 4 ; move 4 , ul )  decode:( move ua , 2 * 5 ; move 5 , 4 ) 
[18064] c:0 is:( move 6 , ul ; move 4 , ul ; move ua , 4 )  decode:( move 6 , ul ; move ua , 4 + 7 ) 
[18065] c:0 is:( move 8 , 3 ; move ul , 3 ; move ua , ul )  decode:( move 8 , 3 ; move ua + ul , 4 ) 
[18066] c:0 is:( move ua , 9 ; move 2 , ul ; move ua , 4 )  decode:( move 8 , 9 ; move ua , 5 + 4 ) 
[18067] c:0 is:( move ua , 6 ; move ul , 4 ; move 4 , ul )  decode:( move ul - ua , 9 ; move 5 , 5 ) 
[18068] c:0 is:( move 3 , 9 ; move 2 , ul ; move ua , ul )  decode:( move 4 , 9 ; move ua + ul , 5 ) 
[18069] c:0 is:( move ua , 8 ; move 3 , 4 ; move ua , ul )  decode:( move ua , 8 ; move 9 , ua * ua ) 
[18070] c:0 is:( move 4 , 2 / move ul , 4 ; move ua , ul )  decode:( move ua , 9 + 4 ; move 4 , 5 ) 
[18071] c:0 is:( move 2 , 9 ; move ua , ul ; move 3 , ul )  decode:( move ua + ul , 9 ; move 4 , ul ) 
[18072] c:0 is:( move 4 , 3 ; loop 0 , 4 , move v0 , 3 )  decode:loop 0 , 4 , move 2 , ua / 0 - v0 
[18073] c:0 is:( move 4 , 4 ; loop 0 , 4 , move 2 , v0 )  decode:( move ua , 4 ; move 3 , 4 ) 
[18074] c:0 is:( move ua , 9 ; move ua , 4 ; move 3 , ul )  decode:( move ua , 9 ; move ua + 3 , 4 ) 
[18075] c:0 is:( move 3 , ul ; move ul , ul ; move 3 , 8 )  decode:loop 0 , 4 , move v0 , v0 - 9 
[18076] c:0 is:( move ul , 9 ; move 3 , ul ; move 2 , ul )  decode:( move 3 , 9 + 2 ; move 3 , ul ) 
[18077] c:0 is:( loop 0 , 4 , move 4 , v0 ; move 4 , 2 )  decode:loop 0 , 4 , move 4 , v0 * 2 
[18078] c:0 is:( move 2 , 9 ; move ua , ul ; move 4 , ul )  decode:( move 4 , 9 ; move 8 , ul ) 
[18079] c:0 is:( move 2 , 9 ; move ul , ul ; move ua , 4 )  decode:( move 3 , 9 ; move ua , 4 / 3 ) 
[18080] c:0 is:( move 3 , 9 ; move ul , ul ; move ua , 3 )  decode:( move 4 , 9 ; move ua - ul , 9 ) 
[18081] c:0 is:( move 3 , 9 ; move ul , 3 ; move ua , ul )  decode:( move 3 , 9 + 2 ; move ua , 9 ) 
[18082] c:0 is:( move 2 , 9 ; move 4 , ul ; move ua , ul )  decode:loop 0 , 4 , move 3 , 4 * 9 
[18083] c:0 is:( move 4 , 9 ; move ul , 2 ; move ua , ul )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[18084] c:0 is:( move ua , 9 ; move ul , 4 ; move 2 , ul )  decode:( move ua , 9 ; move 3 , 9 - 4 ) 
[18085] c:0 is:( move 4 , 9 ; move 2 , ul ; move ua , ul )  decode:( move 4 , 9 ; move ua + ul , 2 ) 
[18086] c:0 is:( move 4 , ua ; move 3 , ul ; move ua , 9 )  decode:loop 0 , 4 , move 3 , 0 - 9 
[18087] c:0 is:( move ua , 9 ; move 2 , ul ; move 4 , ul )  decode:( move ua + ul , 9 ; move 5 , 2 ) 
[18088] c:0 is:( move ua , 9 ; move ul , ul ; move 4 , 2 )  decode:( move ua + ul , 9 ; move 4 , 9 ) 
[18089] c:0 is:( move 4 , 4 ; move ul , ul ; move ua , 7 )  decode:( move 4 , 4 ; move ua , ua / 4 ) 
[18090] c:0 is:( loop 0 , 5 , move 4 , v0 ; move 4 , 2 )  decode:loop 0 , 4 , move 4 + v0 , 0 - 9 
[18091] c:0 is:( move 3 , 4 ; loop 0 , 4 , move v0 , 4 )  decode:4 0 loop 0 , 3 , move 3 , 4 * 4 
[18092] c:0 is:( move ua , 8 ; move ul , 4 ; move 4 , ul )  decode:loop 0 , 2 , move v0 - ua , ua * ua 
[18093] c:0 is:( move 4 , 8 ; move ul , 4 ; move ua , ul )  decode:( move 4 , ua * ua ; move ua , 5 ) 
[18094] c:0 is:( loop 0 , 5 , move v0 , 3 ; move 3 , 4 )  decode:loop 0 , 4 , move 0 - 3 , v0 * 9 
[18095] c:0 is:( loop 0 , 5 , move v0 , 2 ; move 4 , 4 )  decode:loop 0 , 3 , move 5 , 2 / v0 
[18096] c:0 is:( loop 0 , 6 , move 3 , 2 ; move v0 , 4 )  decode:loop 0 , 4 , move ua - 2 , v0 + 4 
[18097] c:0 is:( move ua , 9 ; move ul , 4 ; move ua , 4 )  decode:( move ua , 9 ; move ua , ua * ua ) 
[18098] c:0 is:( move ua , 9 ; move ul , 4 + move ua , 3 )  decode:( move ua , 9 ; move ul - ua , 6 ) 
[18099] c:0 is:( move 4 , 9 ; move ua , ul ; move ua , 4 )  decode:( move ua + 3 , 2 ; move ua , 4 ) 
[18100] c:0 is:( move 4 , 9 ; move ul , 3 ; move ua , ul )  decode:( move 4 , 9 ; move ua , 4 * 3 ) 
[18101] c:0 is:( move 3 , 9 ; move 4 , ul ; move ua , ul )  decode:( move 5 , 9 ; move ua , 4 / 3 ) 
[18102] c:0 is:( move 4 , 9 ; move 3 , ul ; move ua , ul )  decode:( move 5 , 9 ; move ua , 2 / 3 ) 
[18103] c:0 is:( move ua , 9 ; move 3 , ul ; move 4 , ul )  decode:( move ua + 2 , 9 ; move 5 , 5 ) 
[18104] c:0 is:( move 3 , 9 ; move ul , 4 ; move ua , ul )  decode:( move 3 , 9 ; move ua + ul , 8 ) 
[18105] c:0 is:( move 3 , 9 ; move ul , ul ; move ua , 4 )  decode:( move 4 , 9 ; move ua , 5 ) 
[18106] c:0 is:( move 4 , 8 ; move ul , ul ; move ua , 4 )  decode:( move 5 , ua * 4 ; move 5 , 5 ) 
[18107] c:0 is:( move 4 , 9 ; move 4 , ul ; move ua , ul )  decode:( move ua , 9 ; move 5 , 5 ) 
[18108] c:0 is:( move 4 , 4 ; move ul , ul ; move ua , 9 )  decode:loop 0 , 3 , move 0 - 4 , 0 - 9 
[18109] c:0 is:( move ul , 9 ; move 4 , 4 ; move ua , ul )  decode:( move 4 , 9 + 4 ; move 7 , 4 ) 
[18110] c:0 is:( move 4 , 9 ; move ul , 4 ; move ua , ul )  decode:( move 3 - ua , 9 ; move 9 , 8 ) 
[18111] c:0 is:( move 4 , 9 ; move ul , ul ; move ua , 4 )  decode:( move 5 , 9 ; move ul - ua , 5 ) 
[18112] c:0 is:( move ua , 9 ; move ul , 4 ; move 4 , ul )  decode:( move ul - ua , 9 ; move 5 , 5 ) 
[18113] c:0 is:( move 3 , 9 ; move ul , ul ; move 4 , ul )  decode:( move 3 - ua , 9 ; move 4 , 2 ) 
[18114] c:0 is:( move 4 , 9 ; move ul , ul ; move 4 , ul )  decode:( move 5 , 9 ; move 4 , 2 ) 
[18115] c:0 is:( move 9 , ul ; move ul , 4 ; move 4 , ul )  decode:( move ua + 2 , ul ; move 5 , 5 ) 
[18116] c:0 is:( move 4 + 3 , 4 ; move 4 + ul , 4 + 2 )  decode:( move ua , 4 ; move 4 , 2 + 4 ) 
[18117] c:0 is:( move 3 * 2 , 2 / 4 ; move 4 + ul , 2 )  decode:( move ua , 3 / ua ; move 5 , 2 ) 
[18118] c:0 is:( move ua , 0 ; move 2 , ul ; move ua , ul )  decode:( move ua , ul / move ua + ul , 5 ) 
[18119] c:0 is:loop 0 , 2 , move 0 - ua + v0 , 4 - v0  decode:( move ua , ul ; move ua + ul , 3 ) 
[18120] c:0 is:( move 4 , 3 / 4 + 4 ; move 4 + ul , 2 )  decode:( move 4 , 2 / 4 ; move 5 , 2 ) 
[18121] c:0 is:( move ul , 0 ; move ua , ul ; move ua , 3 )  decode:( move ua , ul ; move ua + ul , 3 ) 
[18122] c:0 is:( move ua , 0 ; move ul , 3 ; move ua , ul )  decode:( move ul - ua , 0 ; move 7 , 4 ) 
[18123] c:0 is:loop 0 , 2 , loop 1 , 2 , move 2 + v0 , ul  decode:loop 0 , 4 , move ua - 4 , ul 
[18124] c:0 is:( move ua , 0 ; move 3 , ul ; move ua , ul )  decode:( move ua , 0 ; move 9 , ua * ua ) 
[18125] c:0 is:loop 0 , 2 , loop 1 , 2 , move ua , 2 + v1  decode:loop 0 , 4 , move ua , 4 * 0 - 4 
[18126] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua , v0 + 2  decode:loop 0 , 4 , move 0 - ua , 6 * 3 
[18127] c:0 is:loop 0 , 4 , move v0 * v0 , v0 * v0  decode:( move 4 , 0 - 2 ; move 8 , 9 ) 
[18128] c:0 is:loop 0 , 2 , loop 1 , 2 , move 2 , ul + v0  decode:loop 0 , 3 , move 4 - ua , ul / v0 
[18129] c:0 is:( move ua , 0 ; move ul , ul ; move ua , 3 )  decode:( move ua , 0 ; move ul - ua , 4 ) 
[18130] c:0 is:( move ul , 0 ; move ua , ul ; move 2 , ul )  decode:( move 2 , ul ; move ua + ul , ul ) 
[18131] c:0 is:( move ua , 0 ; move ul , ul ; move 2 , ul )  decode:( move ua , 0 ; move 3 , 5 ) 
[18132] c:0 is:( move 2 , 0 ; move ua , ul ; move ul , ul )  decode:( move 2 , ul ; move 7 , ul ) 
[18133] c:0 is:( move ua , 2 ; move ua , ul ; move ua , 2 )  decode:( move 9 , 2 ; move ua + ul , 2 ) 
[18134] c:0 is:( move 3 , 0 ; move ua , ul ; move ul , ul )  decode:( move 3 , ul ; move 7 , ul ) 
[18135] c:0 is:( move ua , 0 ; move ul , ul ; move ua , 4 )  decode:( move ua + ul , 0 ; move 5 , 5 ) 
[18136] c:0 is:( move ua , 0 ; move ul , 4 ; move ua , ul )  decode:( move ul - ua , 0 ; move 7 , 5 ) 
[18137] c:0 is:loop 0 , 2 , loop 1 , 2 , move ua + v1 , 3  decode:loop 0 , 4 , move ua + v0 , 0 - 3 
[18138] c:0 is:( move ul , 0 ; move ua , ul ; move 3 , ul )  decode:( move ua , ul ; move 3 , ul ) 
[18139] c:0 is:( move ul , 0 ; move ua , ul ; move ua , 4 )  decode:( move ua + ul , ul ; move ua , 4 ) 
[18140] c:0 is:( move ua , ul ; move ul , 2 ; move ua , 2 )  decode:( move ua , ul ; move ua , 4 ) 
[18141] c:0 is:loop 0 , 2 , loop 1 , 2 , move 3 + v0 , ul  decode:loop 0 , 4 , move 3 , ul 
[18142] c:0 is:( move ua , 2 ; move ua , 3 ; move ua , ul )  decode:( move 8 , 9 ; move ua , 0 - 4 ) 
[18143] c:0 is:( move ua , 2 ; move ul , 2 ; move ua , ul )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[18144] c:0 is:loop 0 , 2 , loop 1 , 2 , move ua - v0 , 3  decode:loop 0 , 4 , move ua , 3 
[18145] c:0 is:( move ua , ul ; move 2 , ul ; move ua , 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[18146] c:0 is:loop 0 , 2 , loop 1 , 2 , move ua , v0 - 3  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[18147] c:0 is:( move ua , ul ; move ua , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 3 , ul - v0 
[18148] c:0 is:( move ua , 0 ; move 3 , ul ; move ul , ul )  decode:( move ua + ul , 0 ; move 3 , ul ) 
[18149] c:0 is:loop 0 , 2 , loop 0 , 2 , move 4 , ul + v0  decode:loop 0 , 4 , move 0 - 4 , v0 + 4 
[18150] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua - v0 , 2  decode:loop 0 , 4 , move ua + ul , ua * 6 
[18151] c:0 is:( move ua , ul ; move 2 , 2 ; move ua , ul )  decode:( move ua , ul ; move 7 , 4 ) 
[18152] c:0 is:( move 2 , ul ; move ua , ul ; move ua , 2 )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[18153] c:0 is:( move ul , 2 ; move ua , ul ; move ua , 2 )  decode:( move ua , 8 ; move ua , 0 - 2 ) 
[18154] c:0 is:( move ua , 2 ; move 2 , ul ; move ua , ul )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[18155] c:0 is:loop 0 , 2 , loop 1 , 2 , move 3 , ua - v0  decode:loop 0 , 3 , move ua - 3 , 0 - v0 
[18156] c:0 is:loop 0 , 3 , loop 1 , 2 , move v1 + ua , 2  decode:loop 0 , 4 , move ua + ul , ua * 9 
[18157] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua + v0 , 3  decode:loop 0 , 4 , move 0 - ua , 0 - 3 
[18158] c:0 is:( move ua , 0 ; move ul , ul ; move 3 , ul )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[18159] c:0 is:( move ua , 2 ; move ua , ul ; move ua , 3 )  decode:( move 9 , ul / 3 ; move ua , 3 ) 
[18160] c:0 is:loop 0 , 3 , loop 1 , 2 , move 3 , v0 + ul  decode:loop 0 , 4 , move 4 , 2 * 0 - v0 
[18161] c:0 is:( move ul , 0 ; move ua , ul ; move 4 , ul )  decode:( move ua , ul ; move 4 , ul ) 
[18162] c:0 is:( move 2 , ul ; move 2 , ul ; move ua , ul )  decode:loop 0 , 4 , move ua - 4 , v0 + ul 
[18163] c:0 is:( move ua , ul ; move 2 , 3 ; move ua , ul )  decode:( move ua , ul ; move ua + ul , 6 ) 
[18164] c:0 is:loop 0 , 2 , loop 1 , 2 , move ua , 4 - v0  decode:loop 0 , 4 , move ua , 0 - v0 / 4 
[18165] c:0 is:( move ua , 0 ; move 4 , ul ; move ul , ul )  decode:( move ua , 0 ; move 5 , ul ) 
[18166] c:0 is:( move 2 , ul ; move ua , ul ; move ul , 2 )  decode:( move 2 , ul ; move 8 , ul ) 
[18167] c:0 is:loop 0 , 2 , ( move ul , ul ; move ua , ul )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[18168] c:0 is:( move ua , 2 ; move ul , ul ; move 2 , ul )  decode:( move ua , 2 ; move 3 , 5 ) 
[18169] c:0 is:( move ua , 2 ; move ua , ul + move 2 , ul )  decode:( move ua , 2 ; move 4 , 4 ) 
[18170] c:0 is:( move ua , ua ; move ua , 4 ; move ul , 2 )  decode:( move ua , 0 ; move 7 , 4 ) 
[18171] c:0 is:loop 0 , 2 , ( move ua , ul ; move ul , ul )  decode:( move ua + ul , ul ; move 8 , 2 ) 
[18172] c:0 is:loop 0 , 2 , loop 1 , 2 , move 3 , ua - v1  decode:loop 0 , 3 , move 2 + v0 , ul / 3 
[18173] c:0 is:( move ua , ul ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua / v0 , ua / 3 
[18174] c:0 is:( move ua , 3 ; move ul , 2 ; move ua , ul )  decode:( move ua , 3 ; move ua , 4 ) 
[18175] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + ua , 4  decode:loop 0 , 4 , move ua + 2 , 0 - 9 
[18176] c:0 is:( move ua , ul ; loop 0 , 2 , move ul , ul )  decode:( move ua , ul ; move 2 , 4 / 3 ) 
[18177] c:0 is:( move ul , 2 ; move ua , ul ; move 2 , ul )  decode:( move 4 + 3 , 3 ; move 2 , ul ) 
[18178] c:0 is:( move 4 , 0 ; move ul , ul ; move ua , ul )  decode:( move 4 , 0 ; move ua + ul , 2 ) 
[18179] c:0 is:( move ua , ul ; move ul , 2 ; move ua , 3 )  decode:( move 5 , 9 ; move ua , 4 / 3 ) 
[18180] c:0 is:( move ua , ua ; move ul , 3 ; move 2 , ul )  decode:( move ua , ua / 4 ; move 3 , 4 ) 
[18181] c:0 is:( move ua , 3 ; move ua , 2 ; move ul , ul )  decode:( move ua , 3 ; move 7 , 2 ) 
[18182] c:0 is:( move ua , 0 - move 3 , ul ; move ua , ul )  decode:( move 3 , 9 / 2 ; move ua , ul ) 
[18183] c:0 is:( move ul , ul ; loop 0 , 2 , move ua , ul )  decode:( move ua + ul , 2 ; move ua , ul ) 
[18184] c:0 is:( move ua , 2 ; move ul , ul ; move ua , 3 )  decode:( move ua + ul , 2 ; move 5 , 4 ) 
[18185] c:0 is:( move ua , ul ; move ua , 2 ; move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , ul / v0 
[18186] c:0 is:( move 2 , ul ; move ua , ul ; move 2 , ul )  decode:loop 0 , 4 , move ua - 4 , 2 / 3 
[18187] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 , ul - 2  decode:loop 0 , 3 , move 0 - 2 , v0 - 3 
[18188] c:0 is:loop 0 , 2 , loop 1 , 2 , move ua - v0 , 4  decode:loop 0 , 4 , move ua - v0 , 0 - 4 
[18189] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 + v0 , ul  decode:loop 0 , 4 , move 0 - 4 , 2 / 3 
[18190] c:0 is:loop 0 , 3 , loop 1 , 2 , move 2 , ul + v1  decode:loop 0 , 4 , move ul + v0 , 2 
[18191] c:0 is:( move ua , ul ; move ul , 3 ; move ua , 2 )  decode:( move 5 , ul ; move ua , 5 ) 
[18192] c:0 is:( move ua , 3 ; move 2 , ul ; move ua , ul )  decode:( move ua , 3 ; move 8 , 5 ) 
[18193] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 - v0 , ul  decode:loop 0 , 4 , move 4 - ua , ua / v0 
[18194] c:0 is:loop 0 , 2 , loop 1 , 2 , move ul - 3 , v0  decode:( move 2 - ua , 0 ; move 3 , 2 ) 
[18195] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 - ua , 3  decode:loop 0 , 4 , move 4 - ua , 3 
[18196] c:0 is:( move ua , 0 ; move ul , ul ; move 4 , ul )  decode:( move ua , 0 ; move 5 , 2 ) 
[18197] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 , ul + v0  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[18198] c:0 is:loop 0 , 2 , loop 1 , 2 , move 3 , ul + v1  decode:loop 0 , 4 , move 3 , 4 * v0 
[18199] c:0 is:( move ua , ul ; move ul , ul ; move 2 , 2 )  decode:( move ua , ul ; move ul , 2 ) 
[18200] c:0 is:( move 4 , 0 ; move ua , ul ; move ul , ul )  decode:( move 4 , 0 ; move ua + ul , ul ) 
[18201] c:0 is:loop 0 , 3 , loop 1 , 2 , move ua , v1 - 2  decode:loop 0 , 4 , move 9 , 0 - v0 - 3 
[18202] c:0 is:( move ua , 2 ; move ul , 3 ; move ua , ul )  decode:( move ul - ua , 2 ; move 7 , 4 ) 
[18203] c:0 is:( move ua , 3 ; move ul , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 , 3 + 4 / v0 
[18204] c:0 is:( move ul , 0 ; move 3 , ul ; move ul , ul )  decode:( move 2 , 0 ; move 3 , ul ) 
[18205] c:0 is:( move ul , 0 ; move ul , 4 ; move ua , ul )  decode:( move ul , 0 ; move ua + ul , 4 ) 
[18206] c:0 is:( move ua , ul ; move 2 , ul ; move ua , 3 )  decode:( move ua + ul , ul ; move 5 , 4 ) 
[18207] c:0 is:( move 5 , 0 ; move ua , ul ; move ul , ul )  decode:( move 5 , 0 ; move ua , ul ) 
[18208] c:0 is:( move ua , ul ; move ua , 4 ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 4 
[18209] c:0 is:( move 2 , ul ; move 3 , ul ; move ua , ul )  decode:( move 4 , ul ; move ua + ul , ul ) 
[18210] c:0 is:( move ua , 2 ; move ua , ul ; move ul , 4 )  decode:( move ua + ul , 2 ; move 9 , 4 ) 
[18211] c:0 is:( move ul , 2 ; move 3 , ul ; move ua , ul )  decode:( move 3 , 3 ; move ua + ul , ul ) 
[18212] c:0 is:( move ua , ul ; move ul , 2 ; move 3 , ul )  decode:( move ua , ul ; move 4 , 9 ) 
[18213] c:0 is:( move ua , 3 ; move 3 , ul ; move ua , ul )  decode:( move 8 , 3 ; move ua + 2 , ul ) 
[18214] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua - 4 , v0  decode:( move 9 , 0 ; move 4 , 2 ) 
[18215] c:0 is:( move 3 , 0 ; move ul , ul - move ua , ul )  decode:( move 3 , 0 ; move ua , ul ) 
[18216] c:0 is:( move ua , 3 ; move ul , 3 ; move ua , ul )  decode:( move ul - ua , 3 ; move 7 , 4 ) 
[18217] c:0 is:( move ua , 0 - move ul , ul ; move 3 , ul )  decode:( move ua , ul ; move 4 , 2 - 3 ) 
[18218] c:0 is:( move ul , ul ; move ua , 4 ; move ua , 2 )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[18219] c:0 is:( move ua , 0 ; move 4 , ul - move ua , ul )  decode:( move 4 , 0 ; move 9 , 4 / 3 ) 
[18220] c:0 is:( move ul , ul ; move ua , ul ; move 3 , 2 )  decode:( move ua + ul , 2 ; move 3 , 2 ) 
[18221] c:0 is:( move ua , ul ; move ua , 2 ; move ul , 4 )  decode:( move ua , ul ; move ua + ul , 2 ) 
[18222] c:0 is:( move ua , 4 ; move 2 , ul ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , 5 ) 
[18223] c:0 is:( move ua , ul ; move 3 , 3 ; move ua , ul )  decode:( move ua , ul ; move 5 + 4 , 4 ) 
[18224] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua - 3 , v1  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[18225] c:0 is:( move ua , 0 - move 4 , ul ; move ua , ul )  decode:( move 5 , 9 ; move 5 , 3 / 2 ) 
[18226] c:0 is:( move ua , ul + move ul , 3 ; move ua , 2 )  decode:( move ua , 4 + 3 ; move ua , ul ) 
[18227] c:0 is:loop 0 , 3 , loop 1 , 2 , move ua - v1 , 3  decode:loop 0 , 4 , move 4 , 0 - v0 0 
[18228] c:0 is:loop 0 , 3 , loop 1 , 2 , move ua + v1 , 4  decode:loop 0 , 4 , move v0 + ua , 0 * 4 
[18229] c:0 is:( move ua , ul ; move ua , 3 ; move 3 , ul )  decode:( move ua + ul , ul ; move 9 , 4 ) 
[18230] c:0 is:( move 2 , ul ; move ul , ul ; move 2 , ul )  decode:( move 3 , ul ; move 2 , 5 ) 
[18231] c:0 is:( move ua , 3 ; move ul , ul ; move 2 , ul )  decode:0 ( move : , 3 ; move ul - ua , ; ) 
[18232] c:0 is:( move 2 , ul ; move ua , ul ; move ua , 4 )  decode:( move 4 + 3 , 2 ; move ua , 4 ) 
[18233] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 , ua - v1  decode:loop 0 , 4 , move 4 , 0 - v0 
[18234] c:0 is:( move 4 , 0 + move ul , ul ; move ua , ul )  decode:( move 0 - ua , 3 ; move 5 , 2 ) 
[18235] c:0 is:( move ua , 2 ; move ul , ul ; move 3 , ul )  decode:( move ua , 2 ; move 3 , 5 ) 
[18236] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 - 3 , ul  decode:loop 0 , 4 , move 3 , ul 
[18237] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua , v0 - 4  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[18238] c:0 is:( move ul , 3 ; move 2 , ul ; move ua , ul )  decode:( move 2 , 3 ; move ua + ul , 5 ) 
[18239] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 , ul - v1  decode:( move 3 , ul ; move ua + 3 , ul ) 
[18240] c:0 is:( move ua , 4 ; move ul , 2 ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , 9 ) 
[18241] c:0 is:( move 2 , ul ; move ua , ul ; move 3 , ul )  decode:( move ua + ul , 2 ; move 4 , ul ) 
[18242] c:0 is:( move ua , 3 ; move 2 , ul ; move ul , ul )  decode:( move 4 + 3 , 3 ; move 2 , 5 ) 
[18243] c:0 is:loop 0 , 2 , loop 1 , 2 , move 4 - ua , v1  decode:loop 0 , 3 , move 0 - 3 , v0 - 9 
[18244] c:0 is:( move 2 , ul ; move ua , 4 ; move ua , ul )  decode:( move ua + 3 , 5 ; move ua , 4 ) 
[18245] c:0 is:( move ua , ul ; move 2 , ul ; move ua , 4 )  decode:( move 8 , ul ; move ua , ua * ua ) 
[18246] c:0 is:loop 0 , 3 , loop 1 , 2 , move 4 , v0 + ul  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[18247] c:0 is:( move 3 , ul ; move 2 , ul ; move ua , ul )  decode:( move 4 , ul ; move 4 + 3 , 2 ) 
[18248] c:0 is:( move ua , ul ; move 2 , ul ; move 3 , ul )  decode:( move ua + ul , ul ; move 4 , 5 ) 
[18249] c:0 is:( move 3 , ul ; move ua , ul ; move ua , 3 )  decode:( move 4 , 2 ; move 9 , 0 - 4 ) 
[18250] c:0 is:( move ul , 2 ; move ua , ul ; move ua , 4 )  decode:( move 7 , 3 ; move ua , 4 ) 
[18251] c:0 is:loop 0 , 2 , loop 1 , 2 , move v0 - 4 , ul  decode:loop 0 , 3 , move 4 , 4 * 0 - v0 
[18252] c:0 is:loop 0 , 3 , ( move ua , ul ; move ul , ul )  decode:loop 0 , 4 , move ua , 2 + v0 
[18253] c:0 is:( move ua , 2 ; move 3 , ul ; move ul , ul )  decode:( move 6 , 2 ; move 3 , ul ) 
[18254] c:0 is:loop 0 , 2 , loop 1 , 3 , move v0 - ua , 4  decode:0 loop 0 , 4 , move 0 - ua , 0 - 6 
[18255] c:0 is:( loop 0 , 4 , move ul , ul ; move ua , ua )  decode:( move 2 , 2 ; move ua + ul , 2 ) 
[18256] c:0 is:( move 2 , 3 ; move ua , ul ; move ul , ul )  decode:( move 2 , 3 ; move ua , ul ) 
[18257] c:0 is:( move ul , 3 ; move ua , ul ; move 2 , ul )  decode:( move 8 , 4 ; move 2 , ul ) 
[18258] c:0 is:( move ua , ul ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua - ul , ul / v0 
[18259] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 , v1 + ul  decode:loop 0 , 4 , move 0 - 4 , 0 - 3 
[18260] c:0 is:( move ua , ul ; move 4 , 2 ; move ua , ul )  decode:loop 0 , 3 , move v0 + 4 , ul / 3 
[18261] c:0 is:( move ua , ul ; move ua , 4 ; move 2 , ul )  decode:( move 5 , ul ; move 8 , 4 ) 
[18262] c:0 is:( move ua , ul ; move ul , 2 - move ua , 2 )  decode:( move ua , 0 ; move 6 , 0 - 4 ) 
[18263] c:0 is:( move 3 , 2 ; move ul , ul ; move ua , ul )  decode:( move 3 , 2 ; move ua , 5 ) 
[18264] c:0 is:( move ua , ul ; move ua , 2 ; move 4 , ul )  decode:( move ua , ul ; move 9 , 2 ) 
[18265] c:0 is:( move ua , 0 ; move ul , ul ; move 5 , ul )  decode:( move ua + ul , 0 ; move 5 , 2 ) 
[18266] c:0 is:loop 0 , 3 , ( move ul , ul ; move ua , ul )  decode:loop 0 , 4 , move ua - v0 , 2 / 3 
[18267] c:0 is:( move 3 , ul ; move ua , ul ; move 2 , ul )  decode:loop 0 , 4 , move ul + v0 , ul 
[18268] c:0 is:( move ua , ul ; move ul , 4 ; move ua , 2 )  decode:( move ul - ua , ul ; move ua , 3 ) 
[18269] c:0 is:( move 3 , ul ; move ua , ul ; move ul , 2 )  decode:( move 3 , ul ; move 7 , ul ) 
[18270] c:0 is:( move ua , 3 ; move ul , ul ; move ua , 3 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[18271] c:0 is:( move ua , 3 + move ul , ul ; move ua , 2 )  decode:( move ul - ua , 2 ; move ua , 5 ) 
[18272] c:0 is:( move ua , ul ; move ua , 3 ; move ua , 4 )  decode:( move ua , ul ; move ua + ul , 4 ) 
[18273] c:0 is:( move ua , ul ; move 3 , ul ; move ua , 3 )  decode:( move ua + 2 , ul ; move ua , 3 ) 
[18274] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 , 2 / ua  decode:( move 2 , ul ; move 4 , 4 / ua ) 
[18275] c:0 is:loop 0 , 3 , ( move ua , 0 ; move v0 , 2 )  decode:loop 0 , 3 , move ua + ul , v0 * 5 
[18276] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua + v1 , 4  decode:0 loop 0 , 4 , move ua + 2 , 0 - 0 4 0 
[18277] c:0 is:loop 0 , 2 , loop 1 , 2 , move ul - 4 , v0  decode:loop 0 , 3 , move 0 - 3 , v0 * 3 
[18278] c:0 is:( move 3 , ua ; move ua , ul - move ua , 2 )  decode:( move 3 , 9 ; move ua + 3 , 4 ) 
[18279] c:0 is:( move ul , 4 ; move ua , ul ; move ua , 2 )  decode:( move ua + ul , 5 ; move ua , 2 ) 
[18280] c:0 is:( move 4 , ul ; move ul , ul ; move ua , 2 )  decode:( move 4 , ul ; move ua , 0 - 2 ) 
[18281] c:0 is:loop 0 , 3 , loop 1 , 2 , move ua - 4 , v1  decode:loop 0 , 3 , move ua - 3 , v0 * 9 
[18282] c:0 is:loop 0 , 2 , loop 1 , 2 , move ul - 4 , v1  decode:loop 0 , 3 , move 0 - 3 , v0 - 2 
[18283] c:0 is:( move 4 , 2 ; move ul , ul ; move ua , ul )  decode:( move 4 , 2 ; move ua , 5 ) 
[18284] c:0 is:loop 0 , 3 , ( move 2 , 0 ; move v0 , ul )  decode:loop 0 , 3 , move 3 , v0 / v0 
[18285] c:0 is:( move 3 , ul ; move ul , 3 ; move ua , ul )  decode:( move 3 , ul ; move ua , 4 ) 
[18286] c:0 is:( move ua , 0 - move ul , ul ; move 4 , ul )  decode:( move 9 , ul ; move 4 , ul / 5 ) 
[18287] c:0 is:( move ua , ul ; move 4 , 2 ; move ul , ul )  decode:( move ua , ul ; move 4 , ua / 3 ) 
[18288] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , 3 - v1  decode:loop 0 , 2 , move 3 , v0 + 2 
[18289] c:0 is:loop 0 , 2 , loop 1 , 3 , move 4 , v1 + ul  decode:loop 0 , 4 , move ul - ua , 4 + v0 
[18290] c:0 is:( move ul , ul ; move ua , 4 ; move ua , 3 )  decode:( move ua , ua * ua ; move ua , 3 ) 
[18291] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , 4 + ul  decode:loop 0 , 4 , move 2 , 0 - 0 - 4 
[18292] c:0 is:( move 4 , 0 - move ul , ul ; move ua , ul )  decode:( move 4 , ul / 4 ; move ua , ul ) 
[18293] c:0 is:( move 2 , ul ; move 2 , ul - move ua , ul )  decode:( move 2 , 0 ; move ua + ul , 5 ) 
[18294] c:0 is:( move ul , ul ; move ua , 4 ; move 2 , ul )  decode:( move ua , 9 ; move 2 , 0 - 2 ) 
[18295] c:0 is:( move ul , 3 ; move ua , ul ; move ua , 4 )  decode:( move ua + ul , 4 ; move ua , 4 ) 
[18296] c:0 is:( move ua , ul ; move ua , 3 ; move 4 , ul )  decode:( move ua + 2 , ul ; move ua , 4 ) 
[18297] c:0 is:( move 4 , 0 ; move ul , ul - move ua , ul )  decode:( move 4 , ul ; move ua , 2 - 3 ) 
[18298] c:0 is:( loop 0 , 5 , move ul , ul ; move ua , ua )  decode:( move 2 , 4 ; move 8 , 2 ) 
[18299] c:0 is:( move 2 , 4 ; move ul , ul ; move ua , ul )  decode:( move 2 , 4 ; move ua , 5 ) 
[18300] c:0 is:( move ua , 4 ; move ul , ul ; move 2 , ul )  decode:( move ua , 4 ; move 3 , 5 ) 
[18301] c:0 is:( move ua , 4 ; move ul , 3 ; move ua , ul )  decode:( move ua , 4 ; move ua + ul , 4 ) 
[18302] c:0 is:( move ua , 5 ; move ul , ul ; move ua , 2 )  decode:( move ua , 5 ; move ua , 0 - 3 ) 
[18303] c:0 is:( move 3 , 3 ; move ua , ul ; move ul , ul )  decode:( move 3 , 3 ; move ua , ul ) 
[18304] c:0 is:( move 3 , ul ; move 3 , ul ; move ua , ul )  decode:( move ua , ul ; move 4 + 2 , 4 ) 
[18305] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua / 3 , v0  decode:0 loop 0 , 4 , move 3 , v0 
[18306] c:0 is:loop 0 , 3 , loop 1 , 2 , move 4 , ul + v1  decode:loop 0 , 4 , move ua - ul , 4 / 3 
[18307] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul + v1 , 4  decode:loop 0 , 4 , move 3 , ua / ua - v0 
[18308] c:0 is:( move ua , ul ; move ul , 3 ; move 3 , ul )  decode:( move ua , ul ; move 3 , 4 ) 
[18309] c:0 is:( move ua , ul ; move ul , 4 ; move 2 , ul )  decode:( move ua , ul ; move 3 , 5 ) 
[18310] c:0 is:( move ul , ul ; move ua , ul ; move 4 , 2 )  decode:( move ua , ul ; move 4 , 2 ) 
[18311] c:0 is:( move ua , ul ; move ul , ul ; move 2 , 4 )  decode:( move ua + ul , ul ; move 2 , 9 ) 
[18312] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , ua - 4  decode:loop 0 , 4 , move v0 , v0 - 4 
[18313] c:0 is:( move ua , 2 ; move 4 , ul ; move ul , ul )  decode:( move ua , 2 ; move 4 , ul ) 
[18314] c:0 is:( move 3 , 3 ; move ul , ul ; move ua , ul )  decode:( move 3 , 3 ; move ua + ul , 2 ) 
[18315] c:0 is:( move 4 , ul ; move 2 , ul ; move ua , ul )  decode:( move 5 , ul ; move ua , 4 / 3 ) 
[18316] c:0 is:( move ua , ul ; move 4 , ul ; move ua , 3 )  decode:( move ua , ul ; move ua - 3 , 4 ) 3 
[18317] c:0 is:( move ua , 3 ; move ua , 4 ; move ul , ul )  decode:( move ua , 3 ; move ua + ul , 4 ) 
[18318] c:0 is:( move ua , 2 ; move ul , ul ; move 4 , ul )  decode:( move ua , 2 ; move 4 , 2 ) 
[18319] c:0 is:( move 3 , ul ; move ua , ua - move ul , 2 )  decode:( move 3 , ul ; move ua , 5 * 4 ) 
[18320] c:0 is:loop 0 , 2 , loop 1 , 2 , move v1 - 4 , ul  decode:loop 0 , 3 , move 0 - 4 , ul 
[18321] c:0 is:( move ua , 3 ; move 3 , ul ; move ul , ul )  decode:( move 4 + 3 , 3 ; move 3 , ul ) 
[18322] c:0 is:( move ua , ul ; move ul , ul ; move 3 , 3 )  decode:( move ua , ul ; move 3 , 3 ) 
[18323] c:0 is:( move ul , 3 ; move ua , ul ; move 3 , ul )  decode:( move ua , 4 ; move 3 , ul ) 
[18324] c:0 is:( move ul , 4 ; move ua , ul ; move 2 , ul )  decode:( move 2 , 9 ; move ua , 2 - 3 ) 
[18325] c:0 is:( move ua , ul ; move 2 , ul ; move 4 , ul )  decode:( move ua + ul , ul ; move 5 , 5 ) 
[18326] c:0 is:( loop 0 , 4 , move ul , ul ; move ua , ul )  decode:( move ua + ul , 9 ; move 2 , 4 ) 
[18327] c:0 is:( move 0 , 2 ; loop 0 , 4 , move ua , v0 )  decode:( move 9 , ua / 3 ; move 9 , 2 ) 
[18328] c:0 is:( move 2 , ul ; move ua , 4 ; move ul , ul )  decode:( move 2 , ul ; move ua + ul , 4 ) 
[18329] c:0 is:( move ua , 3 ; move ul , ul ; move ua , 4 )  decode:( move ua + ul , 3 ; move 5 , 5 ) 
[18330] c:0 is:( move 4 , ul ; move ua , 2 ; move ul , ul )  decode:( move 4 , ul ; move ua + ul , 2 ) 
[18331] c:0 is:( move ua , ul ; move 3 , ul ; move ua , 4 )  decode:( move ua + 3 , ul ; move 5 , ua , ) 4 
[18332] c:0 is:( move 2 , ul ; move ul , ul ; move ua , 4 )  decode:( move 3 , ul ; move ua , 5 ) 
[18333] c:0 is:( move 4 , 2 ; move ua , ul ; move ul , ul )  decode:( move 4 , 2 ; move ua + ul , ul ) 
[18334] c:0 is:loop 0 , 3 , loop 1 , 2 , move ua - v1 , 4  decode:loop 0 , 4 , move ua , 4 * 5 
[18335] c:0 is:( move ul , 3 ; move 3 , ul ; move ua , ul )  decode:( move ua - 4 , 4 ; move ua , 5 ) 
[18336] c:0 is:( move 3 , ul ; move ua , ul ; move ua , 4 )  decode:( move ua + 3 , 2 ; move ua , 4 ) 
[18337] c:0 is:( move ua , ul ; move ua , 4 ; move 3 , ul )  decode:loop 0 , 3 , move v0 * 4 , 4 * 4 
[18338] c:0 is:( move ua , 3 ; move ul , 4 ; move ua , ul )  decode:( move ua , 3 ; move 8 , 5 ) 
[18339] c:0 is:( move 4 , ul ; move ul , 2 ; move ua , ul )  decode:( move ul - ua , ul ; move ua , ul ) 
[18340] c:0 is:( move 3 , ul ; move ua , ul ; move 3 , ul )  decode:loop 0 , 3 , move 0 - 4 , 2 / v0 
[18341] c:0 is:( move 2 , 4 ; move ua , ul ; move ul , ul )  decode:( move ua + ul , 4 ; move 2 , ul ) 
[18342] c:0 is:( move ua , 5 ; move ul , 3 ; move ua , ul )  decode:( move 5 , 5 ; move ua + ul , 4 ) 
[18343] c:0 is:loop 0 , 3 , ( move 2 , 2 ; move ua , v0 )  decode:loop 0 , 4 , move v0 - ua , 5 / 4 
[18344] c:0 is:( move ua , ul ; move 3 , ul ; move 4 , ul )  decode:( move 4 , ul ; move 4 , 4 / 3 ) 
[18345] c:0 is:( move ul , 4 ; move ua , 4 ; move ua , ul )  decode:( move ua , 8 ; move ua , 2 ) 
[18346] c:0 is:( move 3 , 4 ; move ul , ul ; move ua , ul )  decode:( move 3 , 4 ; move ua , 2 ) 
[18347] c:0 is:( move ua , ul ; move 3 , 4 ; move ul , ul )  decode:( move ua , ul ; move 4 , 4 ) 
[18348] c:0 is:( move ua + ul , move 2 , ul ; move 4 , ul )  decode:( move 4 , 7 ; move ua , 5 ) 
[18349] c:0 is:( move ua , 6 ; move 2 , ul ; move ua , ul )  decode:( move ua , 6 ; move ua + ul , 2 ) 
[18350] c:0 is:( move 4 , 3 ; move ua , ul ; move ul , ul )  decode:( move 5 , 3 ; move ua , ul ) 
[18351] c:0 is:( move 2 , ul ; move 4 , ul ; move ul , ul )  decode:( move 2 , ul ; move 5 , ul ) 
[18352] c:0 is:( move ua , ul ; move ul , 4 ; move ua , 4 )  decode:( move ua , ul ; move ua , ua * ua ) 
[18353] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 / v1 , ul  decode:loop 0 , 4 , move 4 - ua , 2 / v0 
[18354] c:0 is:( move ua , 3 + move ul , 4 ; move ua , ul )  decode:( move ua , ua * 2 ; move 5 , ul ) 
[18355] c:0 is:( move ul , 4 ; move ua , ul ; move ua , 4 )  decode:( move ua + ul , 5 ; move ua , 4 ) 
[18356] c:0 is:( move ul , ul ; move 3 , 4 ; move ua , ul )  decode:( move 3 , 5 ; move ua + ul , ul ) 
[18357] c:0 is:( move 4 , ul ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 4 , ul 
[18358] c:0 is:( move ua , 0 ; move ul , ul ; move 7 , ul )  decode:( move ua , 0 ; move 8 , 2 ) 
[18359] c:0 is:( move ul , ul ; move 4 , ul ; move 2 , ul )  decode:( move 5 , 2 ; move 2 , ul ) 
[18360] c:0 is:( move 3 , ul ; move ua , ul ; move 4 , ul )  decode:loop 0 , 3 , move 4 , ul 
[18361] c:0 is:( move ua , ul ; move ul , ul ; move 4 , 3 )  decode:( move ua , ul ; move 4 , 4 * 4 ) 
[18362] c:0 is:( move ua , ul ; move 4 , ul ; move ua , 4 )  decode:( move 4 , 9 ; move ua , 0 - 4 ) 
[18363] c:0 is:( move 2 , 5 ; move ul , ul ; move ua , ul )  decode:( move 3 , 5 ; move ua , 2 ) 
[18364] c:0 is:( move ua , 3 ; move 4 , ul ; move ul , ul )  decode:( move 4 + 3 , 3 ; move 5 , ul ) 
[18365] c:0 is:( move 3 , ul ; move ul , 4 ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , 5 ) 
[18366] c:0 is:loop 0 , 3 , ( move ua , 2 ; move 2 , v0 )  decode:loop 0 , 4 , move ua + ul , ua / v0 
[18367] c:0 is:( move 3 , 2 ; move ul , ul - move ua , ul )  decode:( move ua , 0 ; move 3 , ul ) 
[18368] c:0 is:( move ua , ul ; move ul , 4 ; move 3 , ul )  decode:( move 5 , ul ; move 4 , 5 ) 
[18369] c:0 is:( move ul , ul ; move ua , ul ; move 3 , 4 )  decode:( move ua + ul , 9 ; move 3 , 4 ) 
[18370] c:0 is:( move 0 , 2 ; loop 0 , 5 , move ua , v0 )  decode:loop 0 , 4 , move 3 + 4 , 2 
[18371] c:0 is:( move 3 , 4 ; move ua , ul ; move ul , ul )  decode:( move 3 , 4 ; move ua + ul , ul ) 
[18372] c:0 is:( move ul , ul ; move ua , ul ; move 4 , 3 )  decode:( move ua , ua / 3 ; move ua , 3 ) 
[18373] c:0 is:( move ua , 6 ; move ul , ul ; move ua , 2 )  decode:( move ua + ul , 6 ; move ua , 9 ) 
[18374] c:0 is:( move ua , ul ; move 4 , 2 - move ua , ul )  decode:( move ua , ul ; move ua - ul , 8 ) 
[18375] c:0 is:( move 4 , ul ; move ul , ul ; move ul , 2 )  decode:( move 5 , ul ; move ul , 9 / 2 ) 
[18376] c:0 is:( move 5 , ul ; move 2 , ul ; move ua , ul )  decode:loop 0 , 3 , move 2 - ua , v0 - 2 
[18377] c:0 is:( move 3 , ul ; move ul , ul ; move 3 , ul )  decode:( move 4 , ul ; move 3 - ua , 2 ) 
[18378] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , ul / 2  decode:loop 0 , 3 , move 2 , 3 / v0 
[18379] c:0 is:( move ua , ul ; move ul , ul ; move 3 , 4 )  decode:( move ua + ul , ul ; move 3 , 5 ) 
[18380] c:0 is:loop 0 , 3 , ( move ua , 2 ; move v0 , 2 )  decode:loop 0 , 4 , move v0 * 2 , 4 
[18381] c:0 is:( move ua , ua / move 3 , 2 ; move ua , ul )  decode:( move ua , 2 ; move 5 , 3 / 2 ) 
[18382] c:0 is:( move ul , ul ; move ua , 4 ; move 3 , ul )  decode:( move ua , 2 ; move 3 , 2 - 4 ) 
[18383] c:0 is:( move 4 , ul ; move ul , ul ; move 2 , ul )  decode:( move 5 , ul ; move 2 , 5 ) 
[18384] c:0 is:( move ua , 4 ; move ua , 4 ; move ul , ul )  decode:( move ul - ua , 4 ; move 7 , 4 ) 
[18385] c:0 is:( loop 0 , 5 , move ul , ul ; move ua , ul )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[18386] c:0 is:( loop 0 , 3 , move v0 , 2 ; move ua , 2 )  decode:( move 2 , 7 ; move ua , 0 - 2 ) 
[18387] c:0 is:( move 3 , ul ; move ul , ul ; move ua , 4 )  decode:( move 3 , ul ; move ua , 5 ) 
[18388] c:0 is:( loop 0 , 4 , move 2 , v0 ; move ul , 0 )  decode:loop 0 , 3 , move 3 , v0 0 
[18389] c:0 is:( move ua , ul ; move ul , 3 ; move 4 , ul )  decode:( move ua , ul ; move 4 , 4 ) 
[18390] c:0 is:( move ul , ul ; move 2 , ul ; move 4 , ul )  decode:( move 4 , ul / 4 ; move 4 , 3 ) 
[18391] c:0 is:( move 3 , ul ; move 4 , ul ; move ua , ul )  decode:loop 0 , 3 , move v0 + 2 , ul 
[18392] c:0 is:( move ua , 0 ; loop 0 , 3 , move v0 , 4 )  decode:( move ua , 0 ; move ua - 4 , 4 ) 
[18393] c:0 is:( move 2 , 5 ; move ua , ul ; move ul , ul )  decode:( move ua + ul , 5 ; move 2 , ul ) 
[18394] c:0 is:( move ul , 5 ; move ua , ul ; move 2 , ul )  decode:( move ua , 6 ; move 2 , ul ) 
[18395] c:0 is:( move ua , ua * move ua , ul ; move 4 , 2 )  decode:( move ua + ul , 2 ; move 4 , 9 ) 
[18396] c:0 is:( move ua , 4 + move ul , ul ; move ua , 3 )  decode:( move ua + ul , 6 ; move ua , 3 ) 
[18397] c:0 is:( move ua , 2 ; move ul , ul ; move 5 , ul )  decode:( move ua , 2 ; move 5 , 2 ) 
[18398] c:0 is:( move ul , 3 ; move ua , ul ; move 4 , ul )  decode:( move ua + ul , 4 ; move 4 , ul ) 
[18399] c:0 is:( move ul , 5 ; move ua , ul ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 3 
[18400] c:0 is:( move 3 , ua / move ua , ul ; move 2 , ul )  decode:( move 2 , 0 ; move ua + 2 , 5 ) 
[18401] c:0 is:( move 0 , ul ; loop 0 , 5 , move 2 , v0 )  decode:loop 0 , 4 , move 2 , 2 / v0 
[18402] c:0 is:loop 0 , 3 , ( move 2 , ul ; move 2 , v0 )  decode:( move 4 , ul ; move ua , ua * ua ) 
[18403] c:0 is:( move ul , 3 + move 4 , ul ; move ua , ul )  decode:( move 5 , ul ; move ua , 3 / 2 ) 
[18404] c:0 is:( move ul , 6 ; move 2 , ul ; move ua , ul )  decode:( move 2 , 6 ; move ua + ul , 5 ) 
[18405] c:0 is:( move ua , 6 ; move ul , 3 ; move ua , ul )  decode:( move ua , ul / 6 ; move ua , 6 ) 
[18406] c:0 is:( move ul , 3 ; move 3 , ul - move ua , ul )  decode:( move ul , 4 ; move ua + ul , 7 ) 
[18407] c:0 is:( move 4 , ul ; move ua , 4 ; move ul , ul )  decode:( move 4 , ul ; move ua + ul , 4 ) 
[18408] c:0 is:( loop 0 , 5 , move v0 , 2 ; move ul , 0 )  decode:loop 0 , 3 , move 3 + v0 , ua * ua 
[18409] c:0 is:( move ua , move ul - 3 , 4 ; move ua , ul )  decode:( move ua , 8 ; move ua + ul , 5 ) 
[18410] c:0 is:( move 4 , 4 ; move ul , ul ; move ua , ul )  decode:( move 4 , 4 ; move ua , 2 ) 
[18411] c:0 is:( move ua , 3 ; move ul , ul - move ua , 4 )  decode:( move ua , 4 ; move ua , ua / 3 ) 
[18412] c:0 is:( move 3 , ua / move ua , 3 ; move ua , ul )  decode:( move ua , 9 ; move ua , 3 / 2 ) 
[18413] c:0 is:( loop 0 , 5 , move 3 , v0 ; move ua , 0 )  decode:( move 9 , ul / 4 ; move ua , 9 ) 
[18414] c:0 is:( move ul , 4 ; move ua , ul ; move 4 , ul )  decode:( move 3 , 9 ; move ua , 2 - 3 ) 
[18415] c:0 is:( move ua , ul ; move ul , ul ; move 4 , 4 )  decode:( move ua , ul ; move 4 , 5 ) 
[18416] c:0 is:( move ua , 4 ; move ul , ul ; move 4 , ul )  decode:( move ua , 4 ; move 4 , 5 ) 
[18417] c:0 is:( move ua , ul ; move 4 , 4 ; move ul , ul )  decode:( move ua , ul ; move 5 , 4 ) 
[18418] c:0 is:( move ua , ul ; move ul , 4 ; move 4 , ul )  decode:( move 5 , ul ; move 5 , 5 ) 
[18419] c:0 is:( move 4 , ul ; move ul , 4 ; move ua , ul )  decode:( move 4 , ul ; move ua + ul , 5 ) 
[18420] c:0 is:( move ua , 2 ; loop 0 , 3 , move 3 , v0 )  decode:( move 3 + ua , 2 ; move 4 , ul ) 
[18421] c:0 is:( move 3 , 5 ; move ul , ul ; move ua , ul )  decode:( move 3 , 5 ; move ua + ul , 2 ) 
[18422] c:0 is:( move ua , ua / move 4 , ul ; move ua , 2 )  decode:( move ua + ul , 2 ; move ua , 9 ) 
[18423] c:0 is:( loop 0 , 5 , move 2 , ul ; move v0 , 0 )  decode:loop 0 , 4 , move 3 , 2 - v0 
[18424] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua / v1 , 4  decode:loop 0 , 4 , move 0 - ua , 9 
[18425] c:0 is:( move ua , 0 ; loop 0 , 5 , move v0 , 3 )  decode:( move 4 , ul ; move 4 , 0 - 4 ) 
[18426] c:0 is:( move 2 , ul - move ua , ul ; move 4 , ul )  decode:( move 4 , 0 - 5 ; move 4 , 8 ) 
[18427] c:0 is:( move 4 , ul ; move ul , ul ; move 3 , ul )  decode:( move 5 , ul ; move 3 , 2 ) 
[18428] c:0 is:( move ul , 0 ; loop 0 , 4 , move 3 , v0 )  decode:loop 0 , 3 , move ua - 3 , v0 
[18429] c:0 is:( move ul , 4 + move 3 , ul ; move ua , ul )  decode:( move ua , 4 * 3 ; move 4 , 8 ) 
[18430] c:0 is:( move ul , 6 ; move ua , ul ; move 2 , ul )  decode:( move ua , 7 ; move 3 , ul ) 
[18431] c:0 is:loop 0 , 3 , ( move 4 , 0 ; move v0 , ul )  decode:loop 0 , 4 , move 3 , v0 / v0 
[18432] c:0 is:( loop 0 , 6 , move ul , ul ; move ua , ul )  decode:( move 3 - ua , 5 ; move ua , ul ) 
[18433] c:0 is:( move ul , ul ; move ua , ul ; move 4 , 4 )  decode:( move 7 , 9 ; move 4 , 0 - 4 ) 
[18434] c:0 is:( move ul , ul ; move ua , 4 ; move 4 , ul )  decode:( move 4 + 3 , 5 ; move 4 , ul ) 
[18435] c:0 is:( move 8 , 0 ; move ul , ul ; move ua , ul )  decode:( move ua + 3 , 0 ; move ua , 2 ) 
[18436] c:0 is:( loop 0 , 6 , move ul , ul ; move ul , ua )  decode:loop 0 , 4 , move v0 , ua * ua 
[18437] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 2 , 2 )  decode:loop 0 , 3 , move 3 , 2 + 9 0 
[18438] c:0 is:( move 4 , ul ; move ul , ul ; move ua , 4 )  decode:( move 5 , ul ; move ua , 5 ) 
[18439] c:0 is:( move ua , 0 ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move 2 + 4 , 3 + v0 
[18440] c:0 is:( move 5 , ul ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 4 + v0 , ul 
[18441] c:0 is:( move ua , ua - move 3 , ul ; move 4 , ul )  decode:( move 3 , 0 - 2 ; move 4 , ul ) 
[18442] c:0 is:( move 4 , ul ; move 4 , ul ; move ua , ul )  decode:loop 0 , 3 , move 4 , ul 
[18443] c:0 is:( move 0 , 3 ; loop 0 , 4 , move v0 , ul )  decode:( move 4 , 4 / move 4 - ua , 5 ) 
[18444] c:0 is:( move ul , ul ; move 4 , 4 ; move ua , ul )  decode:( move 4 , 5 ; move ua + ul , 4 ) 
[18445] c:0 is:( move ua , 6 ; move 3 , ul ; move ua , ul )  decode:( move ua + 2 , 6 ; move ua , 2 ) 
[18446] c:0 is:( loop 0 , 5 , move ua , 3 ; move v0 , 0 )  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[18447] c:0 is:( move 3 , ua ; loop 0 , 3 , move 3 , v0 )  decode:loop 0 , 4 , move 3 , v0 - 4 
[18448] c:0 is:( move 2 , 0 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[18449] c:0 is:loop 0 , 2 , ( move v0 , ul ; move 2 , 4 )  decode:( move 2 , 4 ; move 3 , 4 ) 
[18450] c:0 is:( loop 0 , 4 , move 2 , 2 ; move v0 , ul )  decode:loop 0 , 3 , move 3 , 4 
[18451] c:0 is:( move ua , 6 ; move ul , ul ; move ua , 4 )  decode:( move ua + ul , 6 ; move ua , 5 ) 
[18452] c:0 is:( move ua , 2 ; loop 0 , 3 , move v0 , 4 )  decode:( move ua , 2 ; move 2 , 9 ) 
[18453] c:0 is:loop 0 , 4 , move ua / 3 , v0 - 4 - v0  decode:loop 0 , 4 , move v0 - v0 , 0 0 0 0 0 
[18454] c:0 is:( move 3 , ua ; loop 0 , 4 , move v0 , 2 )  decode:( move 5 , 0 ; move 4 , 7 ) 
[18455] c:0 is:( move ua , ul ; move ul , 4 ; move 5 , ul )  decode:( move 5 , ul ; move ua , 5 ) 
[18456] c:0 is:( loop 0 , 5 , move v0 , ul ; move 3 , 0 )  decode:loop 0 , 3 , move ua - 3 , v0 * 5 
[18457] c:0 is:( move ua , 6 ; move ul , 4 ; move ua , ul )  decode:( move 5 , 6 ; move 7 , 5 ) 
[18458] c:0 is:( move 4 , ul ; move ul , ul ; move ua , 5 )  decode:( move 5 , ul ; move ul - ua , 9 ) 
[18459] c:0 is:( move ul , 2 / move ua , ul ; move ua , 4 )  decode:loop 0 , 2 , move ua + v0 , ua / 3 
[18460] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , v1 / 4  decode:loop 0 , 4 , move 2 / 2 , 2 / 2 
[18461] c:0 is:( move ua , ul ; move 2 , ul ; move ua , 8 )  decode:( move ua + ul , ul ; move ua , 8 ) 
[18462] c:0 is:( move ua , 0 ; loop 0 , 6 , move v0 , 3 )  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[18463] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move v0 + 2 , 0 - 4 
[18464] c:0 is:( move 4 , ul ; move ul , ua + move ul , 4 )  decode:( move 4 , ul ; move 2 , 4 / 3 ) 
[18465] c:0 is:( move 4 , 5 ; move ul , ul ; move ua , ul )  decode:( move 4 , 5 ; move ua + ul , 2 ) 
[18466] c:0 is:( move ua , 4 * move ul , ua ; move ua , 4 )  decode:( move ul - ua , ul ; move ua , 7 ) 
[18467] c:0 is:( move 4 , 4 ; move ul , ul ; move ul , ul )  decode:( move 5 , 4 ; move 2 , 5 ) 
[18468] c:0 is:( move 0 , ul ; loop 0 , 4 , move v0 , 4 )  decode:loop 0 , 4 , move v0 , v0 - 4 
[18469] c:0 is:( move ul , 0 ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 4 , move 3 , 3 * ua 
[18470] c:0 is:( move 2 , 2 ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 3 , move 3 - v0 , ua * ua 
[18471] c:0 is:( move ua , 5 ; move ul , ul ; move 4 , ul )  decode:( move ua + ul , 5 ; move 4 , 2 ) 
[18472] c:0 is:( move 2 , ul ; loop 0 , 3 , move 3 , v0 )  decode:( move ua , ul ; move 4 , ua / 3 ) 
[18473] c:0 is:( loop 0 , 4 , move ul , v0 ; move 2 , 2 )  decode:loop 0 , 2 , move 3 , v0 + 8 
[18474] c:0 is:( loop 0 , 6 , move ua , 3 ; move v0 , 0 )  decode:loop 0 , 4 , move 3 + ua , 9 , 9 
[18475] c:0 is:( move ua , 2 ; loop 0 , 4 , move v0 , 3 )  decode:( move ua , 2 ; move 4 , 4 * 3 ) 
[18476] c:0 is:( move 0 , ul ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 4 , move 3 , 0 - 9 0 
[18477] c:0 is:( move ul , 3 ; loop 0 , 3 , move v0 , 2 )  decode:( move 2 , 4 / 2 ; move 3 , 4 ) 
[18478] c:0 is:loop 0 , 3 , ( move ul , 4 ; move 2 , v0 )  decode:( move 4 , 4 ; move 5 , ua * ua ) 
[18479] c:0 is:( loop 0 , 6 , move 2 , v0 ; move 2 , ua )  decode:loop 0 , 4 , move 3 , 3 * 4 - v0 
[18480] c:0 is:( move 3 , ua / move ua , ul ; move 4 , ul )  decode:( move 4 , 0 ; move 9 , 4 * 4 ) 
[18481] c:0 is:( move 4 , 2 ; loop 0 , 3 , move ul , v0 )  decode:( move ua - ul , 2 ; move ul , 4 ) 
[18482] c:0 is:( move 5 , ul ; move ul , ul ; move 4 , ul )  decode:( move 5 , ul ; move 4 , 5 ) 
[18483] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , 3 )  decode:loop 0 , 3 , move 0 - 4 , 0 - 3 
[18484] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 4 , 2 )  decode:loop 0 , 3 , move ul - ua , 2 + v0 
[18485] c:0 is:( loop 0 , 5 , move 2 , 2 ; move v0 , ul )  decode:loop 0 , 4 , move 3 , ua / 5 
[18486] c:0 is:( move ul , 2 ; loop 0 , 5 , move 2 , v0 )  decode:loop 0 , 4 , move 3 / v0 , 9 / 3 
[18487] c:0 is:( move ua , 9 ; move 2 , ul ; move ua , ul )  decode:( move 8 , 9 ; move ua , 2 ) 
[18488] c:0 is:( loop 0 , 4 , move 3 , v0 ; move 2 , ul )  decode:loop 0 , 4 , move 3 , v0 * v0 
[18489] c:0 is:( move 3 , ul ; loop 0 , 4 , move v0 , 2 )  decode:loop 0 , 3 , move 3 - ua , 4 
[18490] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 3 , 3 )  decode:loop 0 , 3 , move 4 , 0 - 9 
[18491] c:0 is:( loop 1 , 5 , move 2 , v1 ; move ul , 0 )  decode:loop 0 , 4 , move 4 - ua , v0 - 3 
[18492] c:0 is:( move ua , 4 ; loop 0 , 4 , move v0 , 2 )  decode:( move ua + ul , 4 ; move 4 , 8 ) 
[18493] c:0 is:( move ua , 2 ; move ul , 9 ; move ua , ul )  decode:( move ul - ua , 2 ; move ua , 9 ) 
[18494] c:0 is:loop 0 , 3 , ( move v0 , 2 ; move 4 , ul )  decode:loop 0 , 4 , move 3 + v0 , 3 * 4 
[18495] c:0 is:( move 4 , ua * move ua , ul ; move 4 , ul )  decode:( move 4 , 4 / ua ; move ua , 4 ) 
[18496] c:0 is:loop 0 , 3 , ( move 2 , v0 ; move 4 , ul )  decode:loop 0 , 4 , move ua - 2 , v0 + 2 
[18497] c:0 is:( move 2 , ul ; loop 0 , 3 , move 4 , v0 )  decode:loop 0 , 4 , move 3 - ua , 2 / v0 
[18498] c:0 is:( move ul , 6 ; move ua , ul ; move 4 , ul )  decode:( move ua , 4 / ua ; move 4 , ul ) 
[18499] c:0 is:( loop 0 , 4 , move 3 , 2 ; move v0 , ul )  decode:loop 0 , 4 , move ua - 3 , v0 * 2 
[18500] c:0 is:( move 8 , 2 ; move ul , ul ; move ua , ul )  decode:( move ua + 2 , 2 ; move ua , 2 ) 
[18501] c:0 is:( move ua , 3 ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[18502] c:0 is:( loop 0 , 4 , move 3 , 3 ; move v0 , ua )  decode:loop 0 , 4 , move 3 , 3 + 4 / v0 
[18503] c:0 is:( loop 0 , 4 , move 4 , 2 ; move ua , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 + 5 
[18504] c:0 is:loop 0 , 3 , ( move 3 , ua ; move v0 , 4 )  decode:loop 0 , 4 , move ua - 3 , ua / v0 
[18505] c:0 is:( loop 0 , 5 , move 2 , ul ; move 2 , v0 )  decode:loop 0 , 4 , move 3 , ul / v0 
[18506] c:0 is:( move 2 , ul ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 4 , move 3 - ua , 4 
[18507] c:0 is:( move 3 , ul ; loop 0 , 4 , move 2 , v0 )  decode:( move ua , ul ; move 3 , 2 ) 
[18508] c:0 is:( loop 0 , 3 , move 3 , v0 ; move 3 , ul )  decode:loop 0 , 4 , move 3 , v0 
[18509] c:0 is:loop 0 , 3 , ( move ul , 3 ; move 3 , v0 )  decode:0 loop 0 , 3 , move 4 , 0 - 3 
[18510] c:0 is:( move ua , 9 ; move ua , 2 ; move ul , ul )  decode:( move ua + ul , 9 ; move ua , 2 ) 
[18511] c:0 is:( move ua , 9 ; move ul , ul ; move ua , 2 )  decode:loop 0 , 3 , move v0 + 4 , 9 
[18512] c:0 is:( move ua , ul / move ul , 4 ; move ua , 4 )  decode:( move ua , 7 ; move ua , 3 * 4 ) 
[18513] c:0 is:( move ul , 2 ; loop 0 , 5 , move 3 , v0 )  decode:loop 0 , 3 , move ua - 2 , ua * ua 
[18514] c:0 is:( move ua , 9 ; move 3 , ul ; move ua , ul )  decode:( move 9 , 9 ; move ua , ul ) 
[18515] c:0 is:( move ua , 8 ; move ul , 4 ; move ua , ul )  decode:( move ua , 8 ; move ua + ul , 5 ) 
[18516] c:0 is:( move ua , 9 ; move ul , ul ; move ua , 3 )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[18517] c:0 is:( move ua , 9 ; move ul , 3 ; move ua , ul )  decode:( move ua , 9 ; move ua + ul , 4 ) 
[18518] c:0 is:( loop 0 , 3 , move 3 , v0 ; move 4 , ul )  decode:loop 0 , 4 , move 3 , v0 
[18519] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 4 , 3 )  decode:loop 0 , 3 , move v0 + 2 , 0 - 4 
[18520] c:0 is:( move ul , 2 ; loop 0 , 5 , move v0 , 3 )  decode:( move 4 , 3 / 4 ; move 4 , 3 ) 
[18521] c:0 is:( loop 0 , 6 , move 2 , v0 ; move 2 , ul )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[18522] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 4 , move 4 , 0 - 4 
[18523] c:0 is:( move 3 , ul ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 4 , move 3 - ua , 0 - 4 
[18524] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move ul , 3 )  decode:loop 0 , 3 , move 2 - ua , v0 * 4 
[18525] c:0 is:( move 0 , 4 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 3 , v0 - 5 
[18526] c:0 is:( move 2 , ua ; loop 0 , 5 , move 4 , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 * 4 
[18527] c:0 is:( move 3 , ua ; loop 0 , 4 , move v0 , 4 )  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[18528] c:0 is:loop 0 , 3 , ( move 4 , 3 ; move ul , v0 )  decode:loop 0 , 4 , move 0 - 4 , 6 / v0 
[18529] c:0 is:( loop 0 , 6 , move ua , 3 ; move 2 , v0 )  decode:loop 0 , 3 , move ua + 3 , 3 - 0 3 
[18530] c:0 is:( move ua , 4 ; loop 0 , 3 , move v0 , 4 )  decode:( move ua , 4 ; move ul , 2 / 4 ) 
[18531] c:0 is:( loop 0 , 4 , move v0 , 4 ; move 2 , ul )  decode:loop 0 , 3 , move 3 , v0 - 4 
[18532] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 4 , 3 )  decode:loop 0 , 3 , move 2 - ua , 3 + v0 
[18533] c:0 is:( move 4 , ua / move 4 , ul ; move ua , ul )  decode:loop 0 , 2 , move 4 + v0 , ua * ua 
[18534] c:0 is:( move 9 , 2 ; move ul , ul ; move ua , ul )  decode:( move 9 , 2 ; move ua , 2 ) 
[18535] c:0 is:( move ul , 9 ; move ua , ul ; move 2 , ul )  decode:( move 2 , 5 ; move ua , 5 ) 
[18536] c:0 is:( move ua , 2 ; loop 0 , 5 , move v0 , 4 )  decode:( move 4 4 / 4 4 ; move 8 , 4 ) 
[18537] c:0 is:( move ul , 2 ; loop 0 , 4 , move v0 , 4 )  decode:loop 0 , 4 , move 2 , 4 - 4 / v0 
[18538] c:0 is:( loop 0 , 6 , move 2 , 3 ; move ua , v0 )  decode:( move ua + ul , ul ; move 3 , 9 ) 
[18539] c:0 is:loop 0 , 3 , ( move 3 , v0 ; move 4 , ul )  decode:loop 0 , 4 , move 4 , v0 + v0 
[18540] c:0 is:( move ul , 0 ; loop 1 , 4 , move 4 , v1 )  decode:loop 0 , 4 , move ua - 2 , v0 
[18541] c:0 is:loop 0 , 3 , ( move 4 , ul ; move v0 , 3 )  decode:loop 0 , 3 , move 2 - ua , ua * ua 
[18542] c:0 is:( move 2 , 2 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 2 - ua , 2 - v0 
[18543] c:0 is:( loop 0 , 3 , move v0 , 4 ; move ua , 4 )  decode:( move 3 , 9 + 3 ; move ua , 8 ) 
[18544] c:0 is:( move 4 , ul ; loop 0 , 3 , move 3 , v0 )  decode:( move 9 , ul ; move 4 , 4 * 3 ) 
[18545] c:0 is:( loop 0 , 6 , move 4 , v0 ; move ul , 0 )  decode:loop 0 , 4 , move ua , 0 - 4 + v0 
[18546] c:0 is:( loop 0 , 4 , move 2 , ul ; move v0 , 4 )  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[18547] c:0 is:loop 0 , 3 , ( move 3 , 4 ; move v0 , ul )  decode:loop 0 , 3 , move 3 - ua , 3 - v0 
[18548] c:0 is:( move 3 , ua ; loop 0 , 5 , move v0 , 3 )  decode:loop 0 , 3 , move 3 + v0 , 0 - 3 
[18549] c:0 is:( loop 0 , 6 , move ul , v0 ; move 3 , 2 )  decode:( move 3 , 4 / 4 ; move 4 , 4 ) 
[18550] c:0 is:( loop 0 , 3 , move 4 , v0 ; move 4 , ul )  decode:loop 0 , 4 , move 4 , v0 
[18551] c:0 is:( move 4 , ua ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move 5 , 0 - 4 
[18552] c:0 is:( move 3 , 3 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move ua - 3 , v0 + 3 
[18553] c:0 is:( loop 0 , 6 , move ul , 2 ; move v0 , 3 )  decode:( move 4 , 4 + 3 ; move 5 , 4 ) 
[18554] c:0 is:( loop 0 , 4 , move 3 , ul ; move v0 , 4 )  decode:loop 0 , 4 , move 3 , 2 - v0 
[18555] c:0 is:( loop 0 , 5 , move 3 , ul ; move 3 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - 5 
[18556] c:0 is:( move 3 , ul ; loop 0 , 5 , move v0 , 3 )  decode:( move 5 , 0 - 4 ; move 4 , 3 ) 
[18557] c:0 is:( loop 0 , 5 , move 2 , v0 ; move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 * 8 
[18558] c:0 is:loop 0 , 3 , ( move v0 , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 4 , v0 + ua / 3 
[18559] c:0 is:( loop 0 , 5 , move ul , 2 ; move v0 , 4 )  decode:( move 2 , 9 ; move 5 , 0 - 9 ) 
[18560] c:0 is:( move 4 , 8 ; move ul , ul ; move ua , ul )  decode:( move 4 , 8 ; move ua , 2 ) 
[18561] c:0 is:( move ua , 8 ; move ul , ul ; move 4 , ul )  decode:( move ua + ul , 8 ; move 4 , 2 ) 
[18562] c:0 is:( move ul , 9 ; move ua , ul ; move ua , 4 )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[18563] c:0 is:( move ul , 9 ; move 3 , ul ; move ua , ul )  decode:( move 3 , 9 ; move ua + ul , ul ) 
[18564] c:0 is:( move ua , 9 ; move ul , ul ; move ua , 4 )  decode:( move ua + ul , 9 ; move ua , 5 ) 
[18565] c:0 is:( loop 0 , 6 , move 2 , 3 ; move ul , v0 )  decode:loop 0 , 4 , move v0 - 4 , 0 - 9 
[18566] c:0 is:( move 3 , 9 ; move ul , ul ; move ua , ul )  decode:( move 3 , 9 ; move ua + ul , 2 ) 
[18567] c:0 is:( move ua , 3 ; loop 0 , 6 , move v0 , 3 )  decode:( move ua + 2 , 3 ; move ua , 9 ) 
[18568] c:0 is:( loop 0 , 4 , move 4 , v0 ; move 3 , ul )  decode:loop 0 , 4 , move ua / v0 , v0 
[18569] c:0 is:( move ua , 4 ; loop 0 , 6 , move 2 , v0 )  decode:( move ua + 3 , 4 ; move ua , 9 ) 
[18570] c:0 is:( loop 0 , 4 , move 4 , v0 ; move ua , 4 )  decode:loop 0 , 4 , move ua - ul , 0 - v0 0 
[18571] c:0 is:( loop 0 , 4 , move 4 , 4 ; move v0 , ua )  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[18572] c:0 is:( loop 0 , 6 , move ua , 2 ; move v0 , 4 )  decode:loop 0 , 4 , move 0 - ua , 4 , 4 0 8 4 / 
[18573] c:0 is:( move ul , 2 ; loop 0 , 6 , move v0 , 3 )  decode:loop 0 , 3 , move 4 , 0 - 3 
[18574] c:0 is:( loop 0 , 3 , move 4 , ul ; move v0 , 4 )  decode:loop 0 , 3 , move 4 , ul / v0 
[18575] c:0 is:( loop 0 , 5 , move ul , v0 ; move 4 , 2 )  decode:loop 0 , 4 , move 2 , v0 + 9 
[18576] c:0 is:( move 0 , 4 ; loop 1 , 5 , move v1 , ul )  decode:loop 0 , 4 , move ua - 4 , 3 / v0 
[18577] c:0 is:( move 3 , ul ; loop 0 , 5 , move 3 , v0 )  decode:loop 0 , 4 , move ua - 3 , v0 + 9 
[18578] c:0 is:( loop 0 , 6 , move v0 , 3 ; move 2 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[18579] c:0 is:( move 4 , ul ; loop 0 , 4 , move v0 , 3 )  decode:loop 0 , 3 , move 3 - ua , 2 * 9 
[18580] c:0 is:( move 2 , ua ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[18581] c:0 is:( move 0 , ul ; loop 1 , 5 , move v1 , 4 )  decode:loop 0 , 3 , move 3 , 0 - 4 
[18582] c:0 is:( loop 0 , 5 , move 3 , v0 ; move ua , 4 )  decode:loop 0 , 4 , move 4 , v0 * 2 
[18583] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move 4 , ul )  decode:loop 0 , 4 , move ua - ul , v0 * 2 
[18584] c:0 is:( move ul , 2 ; loop 0 , 5 , move v0 , 4 )  decode:loop 0 , 4 , move 3 , 3 * 5 
[18585] c:0 is:( move 8 , 4 ; move ul , ul ; move ua , ul )  decode:( move 8 , 4 ; move ua , 2 ) 
[18586] c:0 is:( loop 0 , 6 , move ul , 4 ; move v0 , 2 )  decode:( move ul - ua , ul ; move 3 , 7 ) 
[18587] c:0 is:( loop 0 , 6 , move v0 , 3 ; move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[18588] c:0 is:( loop 0 , 6 , move v0 , 4 ; move 2 , ul )  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[18589] c:0 is:( move 3 , 3 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 2 - ua , 3 / v0 
[18590] c:0 is:( move 4 , ul ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move v0 - ua , 4 - 3 
[18591] c:0 is:( loop 0 , 5 , move ul , v0 ; move 4 , 3 )  decode:( move 3 , 4 ; move 4 , 3 ) 
[18592] c:0 is:( loop 0 , 6 , move ua , 3 ; move v0 , 4 )  decode:loop 0 , 4 , move v0 + 4 , 0 - 3 
[18593] c:0 is:( move ul , 4 ; loop 0 , 4 , move 4 , v0 )  decode:loop 0 , 3 , move 5 , 4 / v0 
[18594] c:0 is:( move 3 , ul ; loop 0 , 6 , move v0 , 3 )  decode:loop 0 , 4 , move 3 - ua , v0 * 3 
[18595] c:0 is:( loop 0 , 6 , move 3 , v0 ; move 4 , ua )  decode:loop 0 , 4 , move ua , 4 * 3 / v0 
[18596] c:0 is:( loop 0 , 6 , move 3 , 3 ; move ul , v0 )  decode:loop 0 , 4 , move 3 , 3 
[18597] c:0 is:( loop 0 , 5 , move v0 , 4 ; move ua , 4 )  decode:loop 0 , 4 , move ua / v0 , 9 
[18598] c:0 is:( move ua , 4 ; move ul , ul ; move 9 , ul )  decode:( move 9 , 9 ; move ua , 0 - 4 ) 
[18599] c:0 is:( move ul , ul ; move ua , ul ; move 9 , 4 )  decode:( move ua + ul , 9 ; move 9 , 4 ) 
[18600] c:0 is:( move 4 , ul ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 4 , move 3 + v0 , 0 - 9 
[18601] c:0 is:( loop 0 , 6 , move 4 , 3 ; move ua , v0 )  decode:0 move ua * 3 , ua / 3 move move move 0 0 0 0 0 / 0 move 4 
[18602] c:0 is:( move ul , 3 ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[18603] c:0 is:( move 4 , ua ; loop 0 , 5 , move v0 , 4 )  decode:loop 0 , 4 , move 3 , 0 - v0 0 
[18604] c:0 is:( loop 0 , 6 , move 4 , 2 ; move ul , v0 )  decode:loop 0 , 4 , move ua - ul , 9 
[18605] c:0 is:( move ul , 4 ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[18606] c:0 is:( move 4 , 9 ; move ul , ul ; move ua , ul )  decode:( move 5 , 9 ; move ua + ul , 2 ) 
[18607] c:0 is:( loop 0 , 5 , move v0 , ul ; move 4 , 4 )  decode:loop 0 , 4 , move 3 - ua , v0 + 4 
[18608] c:0 is:( loop 0 , 6 , move ua , 4 ; move 4 , v0 )  decode:loop 0 , 4 , move ua + 2 , 0 - 5 2 2 / 
[18609] c:0 is:( move ul , 3 ; loop 1 , 6 , move v1 , 2 )  decode:loop 0 , 4 , move 2 - ua , 9 4 * 3 
[18610] c:0 is:( move 4 , ul ; loop 0 , 5 , move v0 , 4 )  decode:loop 0 , 4 , move 3 , 5 * v0 
[18611] c:0 is:( move 4 , ul ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move 4 , 4 9 * v0 
[18612] c:0 is:( move ul , 4 ; loop 0 , 6 , move 4 , v0 )  decode:loop 0 , 4 , move ua , 0 - 4 * 4 
[18613] c:0 is:( move ua + 2 , ua - 2 ; move 4 * 2 , 4 )  decode:( move ua + 2 , 0 ; move 9 , 4 ) 
[18614] c:0 is:( move 4 , ul ; loop 0 , 6 , move v0 , 4 )  decode:( move ua , 0 - 9 ; move ua , 3 ) 
[18615] c:0 is:( move 4 , 4 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 4 , v0 - 5 
[18616] c:0 is:( move 0 - ua , 4 * 2 ; move 3 + 4 , ul )  decode:( move ua , 9 ; move ua , ua / 3 ) 
[18617] c:0 is:( move ua , 9 * move ul , ul ; move ua , 4 )  decode:( move 5 , 0 - 9 ; move ua , 4 ) 
[18618] c:0 is:( move ua , 2 ; loop 2 , 6 , move v2 , 4 )  decode:loop 0 , 4 , move v0 + 4 , ua / 3 
[18619] c:0 is:( move 3 , 3 / ua ; move ua - 2 , 3 + 3 )  decode:move 3 * 3 , 3 / 3 
[18620] c:0 is:( move 2 , ul / 2 ; move 3 + 3 , 4 + ul )  decode:( move 2 , 2 / 4 ; move ua , 5 ) 
[18621] c:0 is:( move 3 , 0 - 4 ; move ua + ul , 4 / 3 )  decode:( move 3 , 9 ; move ua + ul , 8 ) 
[18622] c:0 is:( move 4 , 0 - ul / 4 + 4 ; move ua , 2 )  decode:( move 4 , 0 ; move ua , 2 ) 
[18623] c:0 is:( move 3 , 2 + ul ; move 4 + ul , 4 * 3 )  decode:( move 3 , 3 ; move 4 , 4 * 3 ) 
[18624] c:0 is:( move 4 , 3 * 3 ; move 4 - ua , ua / 4 )  decode:( move 4 , 9 ; move 3 , 3 / 2 ) 
[18625] c:0 is:( move ua , 0 ; move ul , ul ; move ua , ul )  decode:( move ua , 0 ; move ua + ul , 2 ) 
[18626] c:0 is:loop 0 , 2 , loop 1 , 2 , move ul + v0 , ul  decode:loop 0 , 4 , move v0 , ul 
[18627] c:0 is:( move 4 , ul / 4 ; move 4 - ua , 3 / 2 )  decode:( move 4 - ua , 8 ; move 4 , 8 ) 
[18628] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul + v0 , ul  decode:loop 0 , 4 , move ua - 4 , 4 / v0 
[18629] c:0 is:( move ua , 2 ; move ul , ul ; move ua , ul )  decode:( move 7 , 2 ; move ua , 2 ) 
[18630] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + ul , ul  decode:loop 0 , 4 , move 3 , 3 / v0 
[18631] c:0 is:( move ua , ul ; move ul , ul ; move ua , 2 )  decode:( move ua , ul ; move ua , 0 - 9 ) 
[18632] c:0 is:( move ua , ul ; move ua , 2 ; move ul , ul )  decode:( move ua , ul ; move 7 , 2 ) 
[18633] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , v0 + ul  decode:loop 0 , 4 , move v0 , 2 / 2 / 3 
[18634] c:0 is:( move ul , ul ; move ua , ul ; move ua , 2 )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[18635] c:0 is:( move 2 , ul ; move ul , ul ; move ua , ul )  decode:( move 3 , ul ; move ua , 2 ) 
[18636] c:0 is:( move ua , ul ; move ul , ul ; move ua , 3 )  decode:( move ua , ul ; move ua , 4 * 4 ) 
[18637] c:0 is:( move ua , ul ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move ua , ul 
[18638] c:0 is:( move 2 , ul ; move ua , ul ; move ul , ul )  decode:( move ua + ul , 2 ; move 2 , ul ) 
[18639] c:0 is:( move ua , ul ; move ul , 3 ; move ua , ul )  decode:( move ua , ul ; move ua + ul , 4 ) 
[18640] c:0 is:( move ua , 3 ; move ul , ul ; move ua , ul )  decode:( move ua , 3 ; move 7 , 2 ) 
[18641] c:0 is:( move ua , ua - move ul , ua ; move 2 , ul )  decode:( move 2 , 2 - 9 ; move 7 , ul ) 
[18642] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , ul - v1  decode:( move ul , 0 ; move 4 , 4 * 4 ) 
[18643] c:0 is:( move ul , ul ; move ua , ul ; move 3 , ul )  decode:( move ua + ul , 2 ; move 3 , ul ) 
[18644] c:0 is:( move ul , ul ; move 3 , ul ; move ua , ul )  decode:( move 3 , ul ; move ua + ul , ul ) 
[18645] c:0 is:( move ua , 4 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[18646] c:0 is:( move 3 , ul ; move ul , ul ; move ua , ul )  decode:( move ua , ul ; move 3 , 4 / 3 ) 
[18647] c:0 is:( move ua , ul ; move ua , 4 ; move ul , ul )  decode:( move 6 , ul ; move ua + ul , 4 ) 
[18648] c:0 is:( move 3 , ul ; move ua , ul ; move ul , ul )  decode:( move 3 , ul ; move 7 , ul ) 
[18649] c:0 is:( move ul , ul ; move ua , 4 ; move ua , ul )  decode:( move ua + ul , 5 ; move ua , 4 ) 
[18650] c:0 is:( move ua , ul ; move ul , ul - move ua , 2 )  decode:( move ua , ul ; move 7 , ua / 3 ) 
[18651] c:0 is:( move 2 , ul - move ua , ul ; move ua , ul )  decode:( move ua , 0 - 5 ; move ua , 8 ) 
[18652] c:0 is:( move ua , 3 + move ul , ul ; move ua , ul )  decode:( move ul - ua , 2 ; move ua , 4 ) 
[18653] c:0 is:( move ua , ua * move ua , ul ; move 2 , ul )  decode:( move ua + ul , 2 ; move 2 , 2 ) 
[18654] c:0 is:( move ul , 3 ; move ua , ul ; move ul , ul )  decode:( move ua , 4 ; move 2 , 2 - 3 ) 
[18655] c:0 is:loop 0 , 2 , ( move ua , v0 ; move ul , 2 )  decode:( move ua + ul , 3 ; move ua , 2 ) 
[18656] c:0 is:( move ua , 0 ; loop 0 , 4 , move v0 , ul )  decode:( move ua , 0 ; move ua , 4 * 4 ) 
[18657] c:0 is:loop 0 , 2 , ( move ul , v0 ; move ua , 2 )  decode:loop 0 , 4 , move 3 , 2 - v0 
[18658] c:0 is:( move 4 , ul ; move ul , ul ; move ua , ul )  decode:( move 5 , ul ; move ua , 2 ) 
[18659] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , v1 / ua  decode:loop 0 , 3 , move 2 , 6 / v0 
[18660] c:0 is:( loop 0 , 4 , move v0 , ul ; move ua , 0 )  decode:( move 2 , 3 ; move 9 , ul ) 
[18661] c:0 is:( move ul , ul ; move ua , 4 ; move ul , ul )  decode:( move ul , 4 ; move ua + ul , 4 ) 
[18662] c:0 is:( move ua , ua * move ua , ua ; move 4 , ul )  decode:( move ua + ul , ul ; move 4 , 5 ) 
[18663] c:0 is:( move ul , ul ; move 4 , ul ; move ua , ul )  decode:( move 3 , ul / 3 ; move ua , ul ) 
[18664] c:0 is:( move ul , 4 ; move ua , ul ; move ul , ul )  decode:( move ua , 5 ; move ul , ul ) 
[18665] c:0 is:( move 3 , ul - move ua , ul ; move ua , ul )  decode:( move ua , 0 ; move 9 , 4 / 3 ) 
[18666] c:0 is:loop 0 , 3 , ( move ua , v0 ; move ua , 2 )  decode:loop 0 , 4 , move 4 + 4 , v0 * 2 
[18667] c:0 is:( move ul , ul ; move ua , ul ; move 4 , ul )  decode:( move ua + ul , 2 ; move 4 , ul ) 
[18668] c:0 is:( move ua + ul , move ul , ul ; move 3 , ul )  decode:( move ua + ul , 2 ; move 3 , ul ) 
[18669] c:0 is:( move ua , move ul , ul ; move ua + ul , 4 )  decode:( move 7 , ua * ua ; move ua , ul ) 
[18670] c:0 is:( move ul , ua * move ua , 3 ; move ua , ul )  decode:( move ua , 0 ; move ua , 9 ) 
[18671] c:0 is:( move ua , ua * move ua , 4 ; move ua , ul )  decode:( move 8 , ua / 2 ; move ua , 5 ) 
[18672] c:0 is:( move ua , ua * move ua , ul ; move 3 , ul )  decode:( move ua + 2 , 2 ; move 3 , 5 ) 
[18673] c:0 is:( move ua , 5 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , 5 ; move ua , 2 ) 
[18674] c:0 is:( move ua , 5 ; move ua , ul ; move ul , ul )  decode:( move ua , 5 ; move ua , ul ) 
[18675] c:0 is:( move ul , ul ; move 5 , ul ; move ua , ul )  decode:( move 3 , ul ; move ua + ul , ul ) 
[18676] c:0 is:( move ua + 2 , 0 - 2 ; move ua + ul , 2 )  decode:( move ua + ul , 0 ; move 8 , 2 ) 
[18677] c:0 is:( loop 0 , 3 , move ua , 2 ; move v0 , ul )  decode:loop 0 , 4 , move ua - v0 , 2 
[18678] c:0 is:loop 0 , 3 , ( move ua , 2 ; move v0 , ul )  decode:loop 0 , 4 , move v0 + 3 , 9 
[18679] c:0 is:( loop 0 , 3 , move 2 , v0 ; move ua , ul )  decode:( move ua , ul ; move ua , 0 - 4 ) 
[18680] c:0 is:loop 0 , 3 , ( move v0 , ua ; move ua , 3 )  decode:loop 0 , 3 , move v0 - 8 , 3 
[18681] c:0 is:( move ua , 5 ; move ul , ul ; move ul , ul )  decode:( move ua , 5 ; move 2 , ul ) 
[18682] c:0 is:loop 0 , 2 , ( move ul , 3 ; move ua , v0 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[18683] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , ul / v1  decode:loop 0 , 4 , move 0 - v0 , 4 / 3 
[18684] c:0 is:( move ua , 0 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 0 - 7 , v0 * 2 
[18685] c:0 is:( loop 0 , 3 , move 2 , ul ; move ua , v0 )  decode:( move 4 , ua / 3 ; move ua , 2 ) 
[18686] c:0 is:( move ua , 6 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , 6 ; move ua , 2 ) 
[18687] c:0 is:( move 5 , ul ; move ul , ul ; move ua , ul )  decode:( move 5 , ul ; move ua , 2 ) 
[18688] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 4 + v0 , 0 - 4 
[18689] c:0 is:( move ua , ua ; loop 0 , 4 , move v0 , 2 )  decode:( move 8 , 0 ; move 3 ; move 3 , 8 ) 
[18690] c:0 is:( loop 0 , 3 , move ua , 3 ; move v0 , ua )  decode:loop 0 , 4 , move v0 * 3 , 3 
[18691] c:0 is:( move ua , ua * move ua , ul ; move 4 , ul )  decode:( move ua + 2 , 5 ; move 4 , 5 ) 
[18692] c:0 is:( move ua , move ua / ua , 4 ; move ua , ul )  decode:( move ua , 9 ; move ua , ul ) 
[18693] c:0 is:( move ul , ul ; move 4 , ul ; move ul , ul )  decode:0 0 loop 0 , 4 , move v0 , ul 
[18694] c:0 is:( move ua , ul ; move ul , ul - move ua , 4 )  decode:( move ua , ul ; move ua + ul , ul ) 
[18695] c:0 is:( move ua + ul , 0 - 3 ; move 0 - 2 , ul )  decode:( move 2 , ul - 5 ; move 8 , 4 ) 
[18696] c:0 is:( move ua , 0 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 0 - ua , 0 - v0 
[18697] c:0 is:( move ul , ua ; loop 0 , 4 , move 2 , v0 )  decode:( move 2 - ua , 0 ; move 3 , 5 ) 
[18698] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 2 , ul )  decode:loop 0 , 4 , move ua - 4 , 2 / v0 
[18699] c:0 is:( loop 0 , 3 , move ul , 2 ; move v0 , ul )  decode:loop 0 , 3 , move 2 , 4 * 0 - v0 
[18700] c:0 is:loop 0 , 3 , ( move 2 , ul ; move ul , v0 )  decode:0 0 loop 0 , 4 , move 2 , ul - / ul 
[18701] c:0 is:loop 0 , 3 , ( move v0 , 3 ; move ua , ul )  decode:loop 0 , 3 , move ua + ul , 0 - 9 
[18702] c:0 is:loop 0 , 3 , ( move v0 , ua ; move ua , 4 )  decode:loop 0 , 3 , move ua + 2 , 4 
[18703] c:0 is:loop 0 , 3 , ( move 2 , v0 ; move ul , ul )  decode:loop 0 , 3 , move 3 , v0 * ua 
[18704] c:0 is:( loop 0 , 3 , move 3 , ul ; move ua , v0 )  decode:loop 0 , 4 , move ua - 3 , 2 
[18705] c:0 is:( move ua , ul ; loop 0 , 3 , move v0 , 3 )  decode:( move ua , ul ; move 2 , 6 ) 
[18706] c:0 is:( loop 0 , 5 , move v0 , ul ; move ul , 0 )  decode:loop 0 , 3 , move 3 , 2 / v0 
[18707] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 , 2 )  decode:( move ua + ul , ul ; move 4 , 8 ) 
[18708] c:0 is:( loop 0 , 3 , move ul , v0 ; move ua , 3 )  decode:( move 2 , 4 ; move ua , 2 ) 
[18709] c:0 is:loop 0 , 4 , move v0 * v0 , 4 + ul / ua  decode:( move 9 , ul ; move 4 , 2 ) 
[18710] c:0 is:( move ua + ul , 0 ; move 0 - ua , 3 * 2 )  decode:( move ua + ul , 0 ; move ua , 9 ) 
[18711] c:0 is:loop 0 , 3 , ( move v0 , 2 ; move ul , ul )  decode:loop 0 , 3 , move ua - 4 , 8 / v0 
[18712] c:0 is:( move ua , 2 ; loop 0 , 4 , move v0 , ul )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[18713] c:0 is:( loop 0 , 5 , move 2 , v0 ; move ua , ua )  decode:( move 4 , 6 ; move 9 , 9 ) 
[18714] c:0 is:( loop 0 , 4 , move 2 , ul ; move ua , v0 )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[18715] c:0 is:loop 0 , 3 , ( move ul , ul ; move 2 , v0 )  decode:loop 0 , 3 , move 3 , v0 + 9 
[18716] c:0 is:( loop 0 , 3 , move ua , 3 ; move v0 , ul )  decode:loop 0 , 4 , move v0 + 4 , 3 
[18717] c:0 is:( move 0 , ul ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move ua - 4 , 3 / v0 
[18718] c:0 is:( loop 0 , 4 , move v0 , 2 ; move ua , ul )  decode:( move 2 - ua , 8 ; move 7 , ul ) 
[18719] c:0 is:( move 6 , ul ; move ul , ul ; move ua , ul )  decode:( move 7 , ul ; move ua , 2 ) 
[18720] c:0 is:( move ua , 3 ; loop 0 , 4 , move v0 , ul )  decode:( move ua , 3 ; move ua , 0 - 3 ) 
[18721] c:0 is:loop 0 , 3 , ( move 3 , v0 ; move ul , ul )  decode:loop 0 , 3 , move ua - 3 , v0 * 2 
[18722] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua , 2 )  decode:( move 2 , 9 ; move ua + ul , 4 ) 
[18723] c:0 is:( move ua , 8 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , 8 ; move ua , 2 ) 
[18724] c:0 is:( loop 0 , 5 , move v0 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 4 , 4 / v0 
[18725] c:0 is:( loop 0 , 6 , move v0 , ul ; move ul , 0 )  decode:loop 0 , 4 , move 0 - 4 , 3 / 3 
[18726] c:0 is:( loop 0 , 4 , move 3 , v0 ; move ul , ua )  decode:loop 0 , 3 , move 4 , v0 
[18727] c:0 is:( loop 0 , 4 , move v0 , ul ; move 2 , ul )  decode:loop 0 , 4 , move 2 , v0 - 5 
[18728] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 4 , move 4 , 4 * v0 
[18729] c:0 is:( move ua , 2 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move v0 - ua , 4 
[18730] c:0 is:( move ua + 2 , 0 - 4 ; move ua + ul , 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 2 
[18731] c:0 is:( loop 0 , 5 , move ul , 2 ; move v0 , ua )  decode:( move 2 , 2 ; move ua - 2 , 4 ) 
[18732] c:0 is:( move ua , ul ; loop 0 , 3 , move v0 , 4 )  decode:( move ua , ul ; move 4 - ua , 4 ) 
[18733] c:0 is:( loop 0 , 3 , move ul , v0 ; move ua , 4 )  decode:( move 2 , 0 ; move ua + ul , 7 ) 
[18734] c:0 is:loop 0 , 2 , ( move 4 , v0 ; move ul , ul )  decode:loop 0 , 4 , move ua - 4 , v0 * ul 
[18735] c:0 is:( loop 0 , 3 , move ua , 4 ; move v0 , ul )  decode:loop 0 , 3 , move 4 + 3 , 4 
[18736] c:0 is:( loop 0 , 3 , move 4 , ul ; move v0 , ua )  decode:loop 0 , 4 , move 3 - ua , ul 
[18737] c:0 is:( loop 0 , 3 , move v0 , 4 ; move ua , ul )  decode:( move 2 , 9 ; move 8 , 4 + 4 ) 
[18738] c:0 is:loop 0 , 2 , ( move ul , v0 ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , ul / v0 
[18739] c:0 is:loop 0 , 3 , ( move ul , ul ; move 3 , v0 )  decode:( move 5 , ul ; move 5 , 2 / 3 ) 
[18740] c:0 is:( move ua , ul ; loop 0 , 5 , move 2 , v0 )  decode:( move ua + 3 , ul ; move 3 , 4 ) 
[18741] c:0 is:( move ua , 4 ; loop 0 , ua , move v0 , 4 )  decode:loop 0 , 4 , move 3 + 4 , 4 * 4 
[18742] c:0 is:( move ua , ua ; loop 0 , 4 , move v0 , 4 )  decode:loop 0 , 4 , move 3 , v0 * 4 
[18743] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , ul )  decode:( move ua + 2 , 9 ; move ua , 2 ) 
[18744] c:0 is:( loop 0 , 5 , move 4 , v0 ; move ua , ua )  decode:loop 0 , 4 , move 4 + 2 , 4 / v0 
[18745] c:0 is:( move ua , 4 ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 4 , move 3 , 4 * v0 
[18746] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua , 3 )  decode:( move 2 , 5 ; move ua , 4 * 5 ) 
[18747] c:0 is:loop 0 , 3 , ( move ul , ul ; move v0 , 4 )  decode:loop 0 , 4 , move v0 , 0 - 9 
[18748] c:0 is:( loop 0 , 5 , move v0 , ul ; move 2 , ul )  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[18749] c:0 is:( move ua + ul , 0 ; move 3 - ua , 2 - 3 )  decode:( move ua , 0 ; move 3 , 0 - 2 ) 
[18750] c:0 is:( loop 0 , 6 , move ul , v0 ; move 2 , ua )  decode:( move 2 , 4 * 4 ; move 4 , 8 ) 
[18751] c:0 is:( loop 0 , 5 , move 2 , v0 ; move ul , ul )  decode:loop 0 , 4 , move 3 - v0 , 4 
[18752] c:0 is:( loop 0 , 4 , move ul , ul ; move 3 , v0 )  decode:loop 0 , 4 , move v0 , 4 
[18753] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 4 , ul )  decode:loop 0 , 3 , move 5 , v0 + ul 
[18754] c:0 is:( move ua , 3 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move ua - v0 , ua * ua 
[18755] c:0 is:loop 0 , 3 , ( move ul , ul ; move 4 , v0 )  decode:loop 0 , 3 , move ua - 2 , ul + v0 
[18756] c:0 is:( loop 0 , 5 , move ul , v0 ; move 3 , ua )  decode:( move 3 , 2 ; move 4 , 9 ) 
[18757] c:0 is:( loop 0 , 6 , move v0 , ul ; move 2 , ua )  decode:( move ua , 9 ; move ua + 3 , 2 ) 
[18758] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , 4 )  decode:0 loop 0 , 4 , move 4 , v0 - 4 
[18759] c:0 is:( loop 0 , 4 , move v0 , 4 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 2 * 9 
[18760] c:0 is:( move ul , 4 / move ua , ul ; move ul , ul )  decode:( move ul , 0 ; move ua + ul , 4 ) 
[18761] c:0 is:( move ua , 9 ; move ul , ul ; move ua , ul )  decode:( move ua , 9 ; move ua + ul , 2 ) 
[18762] c:0 is:( move 0 - ua , ul ; move ua + 3 , 3 + 3 )  decode:( move 6 , 4 ; move 9 , 4 * 4 ) 
[18763] c:0 is:loop 0 , 3 , ( move ul , 4 ; move ul , v0 )  decode:loop 0 , 3 , move 0 - 2 , 4 / v0 
[18764] c:0 is:loop 0 , 3 , ( move ul , v0 ; move ul , 4 )  decode:loop 0 , 4 , move 2 , v0 + 4 
[18765] c:0 is:( loop 0 , 6 , move v0 , ul ; move ua , 2 )  decode:loop 0 , 4 , move ua - ul , 2 
[18766] c:0 is:( move ua , ul ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move 0 - ua , 9 - v0 
[18767] c:0 is:( move ul , 2 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move 4 - ua , v0 + 4 
[18768] c:0 is:( loop 0 , 6 , move ua , 2 ; move ul , v0 )  decode:loop 0 , 4 , move 0 - ua , 4 
[18769] c:0 is:( move ua + ul , 0 - 3 ; move ua - 3 , 2 )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[18770] c:0 is:( loop 0 , 5 , move 2 , ul ; move v0 , ul )  decode:0 loop 0 , 4 , move 3 - ua , 2 
[18771] c:0 is:( loop 0 , 5 , move 3 , ul ; move v0 , ua )  decode:loop 0 , 3 , move 5 , 2 / v0 
[18772] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 4 , ul )  decode:loop 0 , 4 , move ua - 3 , 2 / v0 
[18773] c:0 is:( loop 0 , 6 , move 2 , ul ; move v0 , ua )  decode:loop 0 , 4 , move 4 , 4 * v0 
[18774] c:0 is:( move ul , ua ; loop 0 , 5 , move 3 , v0 )  decode:loop 0 , 4 , move ua - 3 , v0 
[18775] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move ul , ul )  decode:loop 0 , 4 , move 3 , v0 * 8 
[18776] c:0 is:( loop 0 , 5 , move v0 , ul ; move ua , 3 )  decode:loop 0 , 3 , move 0 - 4 , 5 - v0 
[18777] c:0 is:( loop 0 , 6 , move v0 , 3 ; move ua , ua )  decode:( move 3 , 4 ; move 4 + ua , ul / ) 4 
[18778] c:0 is:( loop 0 , 6 , move ul , ul ; move 2 , v0 )  decode:( move 3 , ua / 4 ; move 5 , 4 ) 
[18779] c:0 is:( loop 0 , 4 , move ul , ul ; move v0 , 4 )  decode:( move 3 , 2 ; move 4 , 4 ) 
[18780] c:0 is:( loop 0 , 6 , move 3 , ul ; move v0 , ua )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[18781] c:0 is:( loop 0 , 5 , move ul , v0 ; move 3 , ul )  decode:( move 2 , 9 ; move 4 , 0 - 4 ) 
[18782] c:0 is:( loop 0 , 6 , move ul , 2 ; move v0 , ul )  decode:( move 2 , 9 ; move ua , 4 / ua ) 
[18783] c:0 is:( loop 0 , 4 , move 4 , v0 ; move ul , ul )  decode:loop 0 , 3 , move ua - ul , v0 
[18784] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua , 4 )  decode:( move 2 , 4 ; move ua + ul , 4 ) 
[18785] c:0 is:( loop 0 , 6 , move ul , v0 ; move 3 , ua )  decode:loop 0 , 4 , move v0 + ul , 4 / 3 
[18786] c:0 is:( move ul , ul ; loop 0 , 4 , move 4 , v0 )  decode:loop 0 , 3 , move 5 , ul / v0 
[18787] c:0 is:( loop 0 , 4 , move ul , 4 ; move v0 , ul )  decode:( move 2 , 9 ; move 4 , 9 ) 
[18788] c:0 is:( loop 0 , 4 , move v0 , 4 ; move ul , ul )  decode:loop 0 , 3 , move 2 , ua / v0 / ua 
[18789] c:0 is:( move ul , ua ; loop 0 , 5 , move 4 , v0 )  decode:loop 0 , 4 , move ua - ul , v0 * 4 
[18790] c:0 is:( move ua + 2 , 0 - 3 ; move ua - ul , 4 )  decode:loop 0 , 4 , move v0 + 2 , v0 0 
[18791] c:0 is:( move ul , 9 ; move ua , ul ; move ul , ul )  decode:( move 2 , 9 ; move ua , ul ) 
[18792] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 , 4 )  decode:( move 8 , ul ; move ua , 4 * 4 ) 
[18793] c:0 is:( move ua , ua ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 4 , move 2 + 4 , v0 - 3 
[18794] c:0 is:( loop 0 , 6 , move 2 , ul ; move v0 , ul )  decode:loop 0 , 4 , move 4 , 4 / v0 
[18795] c:0 is:( move ul , 4 ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 3 , move 3 / v0 , 4 / 3 
[18796] c:0 is:( loop 0 , 5 , move 3 , v0 ; move ul , ul )  decode:loop 0 , 4 , move 3 , v0 + 3 
[18797] c:0 is:( loop 0 , 6 , move v0 , 2 ; move ul , ul )  decode:loop 0 , 4 , move 4 , 9 / v0 
[18798] c:0 is:( move ua , 4 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move ua - v0 , 4 / 3 
[18799] c:0 is:( move ua , ul ; loop 0 , 6 , move v0 , 3 )  decode:( move 0 - ua , ul ; move 5 , ul / ) 3 
[18800] c:0 is:( move ua , 3 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move v0 + 4 , 4 + 3 
[18801] c:0 is:( loop 0 , 5 , move v0 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 4 , 3 / v0 
[18802] c:0 is:( move ua , ul ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 4 , move v0 + 4 , ua / 3 
[18803] c:0 is:( loop 0 , 6 , move ul , v0 ; move 4 , ua )  decode:( move 3 , 4 + 3 ; move 5 , 2 ) 
[18804] c:0 is:( loop 0 , 6 , move 3 , ul ; move ul , v0 )  decode:loop 0 , 4 , move 4 , 4 / 3 
[18805] c:0 is:( move ua + 4 , 4 ; move ua + ul , 0 - 3 )  decode:( move 4 + 4 , 4 ; move ua , 3 ) 
[18806] c:0 is:( loop 0 , 6 , move 3 , ul ; move v0 , ul )  decode:0 loop 0 , 4 , move 5 , 4 * 3 
[18807] c:0 is:( loop 0 , 5 , move ul , v0 ; move 4 , ul )  decode:( move 2 , 0 ; move ua - ul , 9 ) 
[18808] c:0 is:( loop 0 , 6 , move 3 , v0 ; move ul , ul )  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[18809] c:0 is:( loop 0 , 6 , move v0 , 3 ; move ul , ul )  decode:loop 0 , 4 , move 0 - 4 , 3 
[18810] c:0 is:( move 2 - ua , 0 ; move ua + 3 , 4 / ua )  decode:( move 4 , 0 ; move ua + 3 , 7 ) 
[18811] c:0 is:( loop 0 , 5 , move ul , ul ; move 4 , v0 )  decode:loop 0 , 4 , move 2 , v0 + 4 
[18812] c:0 is:( loop 0 , 6 , move ul , v0 ; move ua , 4 )  decode:( move 3 , 2 - move ua , 9 ) 
[18813] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , 3 )  decode:loop 0 , 4 , move 4 - ua , v0 + 4 
[18814] c:0 is:( move ua + ul , 3 ; move 3 + 3 , ua - 2 )  decode:( move ua , 9 ; move ua + ul , 2 ) 
[18815] c:0 is:( move ua + 2 , 3 / ua ; move ua + 2 , 3 )  decode:( move 9 , 3 / ua ; move 9 , 3 ) 
[18816] c:0 is:( loop 0 , 5 , move v0 , 4 ; move ul , ul )  decode:loop 0 , 4 , move 3 - ua , v0 * 2 
[18817] c:0 is:( move 2 , 2 * 2 ; move ua - 2 , ua - ul )  decode:( move 2 , 4 ; move ua , 2 - 3 ) 
[18818] c:0 is:( loop 0 , 6 , move ul , ul ; move 3 , v0 )  decode:loop 0 , 4 , move ua - 4 , 4 / v0 
[18819] c:0 is:( move ul , ul ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move 4 , v0 + 9 
[18820] c:0 is:( loop 0 , 6 , move ul , ul ; move 4 , v0 )  decode:( move 3 , ua / 4 ; move ua , 4 ) 
[18821] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , 4 )  decode:loop 0 , 3 , move 3 , v0 + 9 
[18822] c:0 is:( loop 0 , 6 , move 4 , v0 ; move ul , ul )  decode:loop 0 , 4 , move ua , 0 - 4 0 * 4 
[18823] c:0 is:( move ul , ul ; loop 0 , 6 , move 4 , v0 )  decode:loop 0 , 4 , move 4 + v0 , 8 / 4 
[18824] c:0 is:( loop 0 , 6 , move v0 , ul ; move 4 , ul )  decode:loop 0 , 4 , move 0 - 4 , 2 - 3 
[18825] c:0 is:( loop 0 , 6 , move 4 , ul ; move v0 , ul )  decode:loop 0 , 4 , move 4 + 2 , 0 - 4 0 
[18826] c:0 is:( move ua + ul , 4 ; move ua + 2 , 2 - 4 )  decode:( move 8 , 4 ; move ua , 0 - 2 ) 
[18827] c:0 is:( move ua + 4 , ul ; move 2 - ua , 4 + 3 )  decode:( move ua + 3 , ul ; move 4 , 4 ) 
[18828] c:0 is:( move 4 + 3 , 3 ; move 2 + ul , ua - ul )  decode:( move 2 , 2 ; move ua + ul , ul ) 
[18829] c:0 is:( move 0 - 3 , ul / 2 ; move ua + ul , 4 )  decode:( move 3 , 0 - 9 ; move ua , ul ) 
[18830] c:0 is:( move ul , ul ; loop 1 , 6 , move v1 , 3 )  decode:loop 0 , 4 , move 4 , 0 - 3 
[18831] c:0 is:( move ul - ua , 3 ; move ua + 3 , 4 + 3 )  decode:( move ua - ul , 3 ; move 9 , 7 ) 
[18832] c:0 is:( move ua + 2 , 3 ; move ua / 4 , 2 - ua )  decode:( move 2 , 2 ; move ua + 2 , 2 ) 
[18833] c:0 is:( move 4 , 0 - ua ; move ua / 2 , ul - 3 )  decode:( move 3 , 0 ; move 4 , 0 - 2 ) 
[18834] c:0 is:( move 0 - ua , 3 / ua ; move ua , 3 / 2 )  decode:loop 0 , 2 , move v0 - ua , 4 ) 
[18835] c:0 is:( move ua + 2 , ul / 2 - 4 ; move ua , 2 )  decode:( move ua + 2 , 3 + move ua , 2 ) 
[18836] c:0 is:( move 4 + 4 , 2 ; move ua - 2 , ua * ua )  decode:( move ua + 2 , 2 ; move 4 , 8 ) 
[18837] c:0 is:( move 0 - ua , 4 ; move ua + ul , 4 * 3 )  decode:loop 0 , 3 , move v0 - ua , 3 * 5 
[18838] c:0 is:( move ua + 4 , 4 + 3 ; move ua + ul , 3 )  decode:( move 4 + 3 , ul ; move 9 , 3 ) 
[18839] c:0 is:( move ua + 2 , ul / 4 ; move ua + 2 , 3 )  decode:( move ua + 2 , ul ; move 8 , 3 ) 
[18840] c:0 is:( move 0 - 7 , 0 ; move ua + ul , ua / 4 )  decode:( move ua + ul , 0 ; move ua , 8 ) 
[18841] c:0 is:( move 0 - ua , 4 / 3 ; move ua + 4 , ul )  decode:( move ua , 4 / 3 ; move 9 , 2 ) 
[18842] c:0 is:( move ua + 4 , 4 ; move ua + ul , 3 * 3 )  decode:( move 4 + 4 , 4 ; move ua , 9 ) 
[18843] c:0 is:( move ua , ua - 2 ; move 4 + 4 , ua / 3 )  decode:( move ua + 2 , 0 ; move ua , 2 ) 
[18844] c:0 is:( move ua + 2 , ul / 3 ; move ua , 4 * 2 )  decode:( move ua , 2 ; move ua , 3 / 2 ) 
[18845] c:0 is:( move 3 , ua / 3 ; move ua + 2 , 3 / ua )  decode:( move 3 , 2 ; move ua + ul , 7 ) 
[18846] c:0 is:( move ua + ul , ul / 2 ; move 3 , 4 + 3 )  decode:( move 3 , 2 ; move ua , 4 / ua ) 
[18847] c:0 is:( move ua + ul , 4 / 3 ; move ua + 3 , 3 )  decode:( move 9 , 4 / 3 ; move 9 , 3 ) 
[18848] c:0 is:( move 2 , ua / 3 ; move ua - ul , 4 + 4 )  decode:( move 2 , ua / 3 ; move 5 , 8 ) 
[18849] c:0 is:( move ua + ul , ul - 3 ; move 4 , 4 * 2 )  decode:( move 4 , 3 ; move 9 , 3 * 4 ) 
[18850] c:0 is:( move 4 , ua - 2 ; move ul + ul , 4 * 3 )  decode:loop 0 , 4 , move v0 , 2 / 4 
[18851] c:0 is:( move ua , 2 / ua ; move ua - 4 , 4 * 2 )  decode:( move 2 , 2 ; move ua , 3 / 2 ) 
[18852] c:0 is:( move ua , ul / 2 ; move 4 + 3 , ul - 3 )  decode:( move ua + ul , 3 + move ua , 2 ) 
[18853] c:0 is:( move 4 + 4 , ua / 4 ; move ua + ul , 2 )  decode:( move ua + ul , 3 ; move 8 , 2 ) 
[18854] c:0 is:( move ul - ua , 2 - 4 ; move 4 + 4 , ul )  decode:( move ua , 0 - 4 ; move 8 , 2 ) 
[18855] c:0 is:( move ua + 4 , 4 * 3 ; move ua + ul , 4 )  decode:( move ua + 3 , 3 ; move ua , 4 ) 
[18856] c:0 is:( move 4 , 2 / ua ; move ua + ul , 2 * 4 )  decode:( move 3 , ul / ua ; move 8 , 8 ) 
[18857] c:0 is:( move 4 * 2 , 3 / ua ; move ua , ul - 3 )  decode:( move ua , ua * 4 ; move 8 , 2 ) 
[18858] c:0 is:( move ul - 4 , ul ; move 4 + ul , 2 - 4 )  decode:( move 3 , 0 - 4 ; move 4 , 2 ) 
[18859] c:0 is:( move 4 - ul , ua * ua ; move 4 * 2 , 3 )  decode:( move ua , ua * ua ; move 8 , 3 ) 
[18860] c:0 is:( move 4 - ua , 2 / 3 ; move ua - ul , 4 )  decode:( move 2 , 4 ; move 5 , ul ) 
[18861] c:0 is:( move 4 , ul - 4 ; move ua / 2 , 3 + ul )  decode:( move 4 , 0 - 3 ; move 4 , 4 ) 
[18862] c:0 is:( move 3 , ua * 4 ; move ua / 2 , 4 + ul )  decode:( move 3 , 0 ; move 3 - ua , 5 ) 
[18863] c:0 is:( move ua + ul , 9 + 4 ; move 2 + ul , 2 )  decode:( move 3 , 2 / 4 ; move ua , 2 ) 
[18864] c:0 is:( move ua - 2 , ul - 4 ; move 4 , 4 / ua )  decode:loop 0 , 4 , move 0 - 2 , v0 / ua 
[18865] c:0 is:( move ua , ua / 4 ; move ua / 4 , 3 + 3 )  decode:( move ul , 4 ; move ua , ua * ua ) 
[18866] c:0 is:( move 4 , 4 + 4 ; move ua + ul , ua / 4 )  decode:( move 4 , ua / 4 ; move ua , 8 ) 
[18867] c:0 is:( move 4 , ua - 3 ; move ul - ua , 4 / 3 )  decode:( move 5 , 9 / 2 ; move 4 , 4 ) 
[18868] c:0 is:( move ua + ul , ul / 2 ; move 4 , 4 * 4 )  decode:( move 4 , 4 + 2 ; move 9 , 9 ) 
[18869] c:0 is:( move ua / 4 , 4 + ul ; move 3 , ua / 4 )  decode:( move 2 , 4 / 4 ; move 3 , ul ) 
[18870] c:0 is:( move ua + ul , ul / 4 ; move 4 , 4 / 3 )  decode:( move 4 , 4 + 3 ; move 7 , 5 ) 
[18871] c:0 is:loop 0 , 7 , ( move 4 + 3 , 2 ; v1 = 0 )  decode:loop 0 , 4 , move 8 , 0 - 8 0 
[18872] c:0 is:( move ua , ul ; move ul , ul ; move ua , ul )  decode:( move 7 , ul ; move ua , 2 ) 
[18873] c:0 is:( move ul , ul ; move ua , ul ; move ul , ul )  decode:( move ua , ua / 3 ; move ul , ul ) 
[18874] c:0 is:( move ua + ul , move ul , ul ; move ua , ul )  decode:( move ul - ua , 3 ; move ua , 2 ) 
[18875] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + v0 , 2  decode:loop 0 , 3 , move 4 , 9 + 3 0 
[18876] c:0 is:loop 0 , 2 , loop 1 , 2 , move v0 + 2 , v1  decode:loop 0 , 4 , move 4 - ua , v0 - 9 
[18877] c:0 is:loop 0 , 2 , loop 1 , 2 , move 3 , v0 + v0  decode:loop 0 , 4 , move 3 , 4 * v0 
[18878] c:0 is:loop 0 , 2 , loop 1 , 2 , move v0 - 2 , v0  decode:( move 4 , 0 ; move 2 , ul ) 
[18879] c:0 is:( move ul , ua * move ua , ul ; move ua , ul )  decode:( move ua , 4 / ua ; move ua , 9 ) 
[18880] c:0 is:( move ul , ul ; move ua , ul - move ua , ul )  decode:( move ul , ul ; move ua + 4 , 4 ) 
[18881] c:0 is:( move ua + 2 , 0 ; move ua + 2 , ua * ua )  decode:( move 8 , 0 ; move ua + 2 , 8 ) 
[18882] c:0 is:( move ua - ul , 0 ; move ua + ul , 0 - 2 )  decode:( move 5 , ua / 4 ; move 5 , 2 ) 
[18883] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 , v0 + 3  decode:( move 3 , 2 ; move 3 , 4 ) 
[18884] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + 3 , v0  decode:loop 0 , 4 , move 4 + 3 , 4 * v0 
[18885] c:0 is:loop 0 , 2 , ( move ul , ul ; move ua , v0 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[18886] c:0 is:loop 0 , 3 , loop 1 , 2 , move v1 + 2 , v0  decode:loop 0 , 4 , move ua - 3 , v0 * 4 
[18887] c:0 is:loop 0 , 3 , loop 1 , 2 , move 2 , v0 + v1  decode:loop 0 , 4 , move 3 , v0 * 9 
[18888] c:0 is:( move ua + ul , 2 ; move ua + ul , 0 - 2 )  decode:( move 7 , 2 ; move ua + ul , 2 ) 
[18889] c:0 is:( move ua + ul , 0 ; move ua + ul , 0 - 4 )  decode:( move ua + ul , 0 ; move ua , 4 / ) 3 
[18890] c:0 is:( move ua + ul , 0 - 2 ; move ua + ul , 2 )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[18891] c:0 is:loop 0 , 3 , ( move ul , v0 ; move ua , ul )  decode:loop 0 , 4 , move v0 + 4 , 2 
[18892] c:0 is:loop 0 , 3 , ( move ua , ul ; move v0 , ul )  decode:loop 0 , 3 , move ua + ul , v0 + ul 
[18893] c:0 is:loop 0 , 3 , loop 1 , 2 , move 3 , v0 + v1  decode:loop 0 , 4 , move v0 + ul , v0 
[18894] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 , v1 + v1  decode:( move ua , 9 ; move 5 , 0 - 4 ) 
[18895] c:0 is:loop 0 , 3 , loop 1 , 2 , move 2 - v1 , v0  decode:( move 2 - ua , 3 ; move 4 , 5 ) 
[18896] c:0 is:loop 0 , 3 , loop 1 , 2 , move 3 + v1 , v0  decode:loop 0 , 4 , move 4 + v0 , 2 / 3 
[18897] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + v1 , 2  decode:loop 0 , 4 , move 3 , v0 + 9 
[18898] c:0 is:loop 0 , 3 , ( move ul , ul ; move ua , v0 )  decode:loop 0 , 3 , move v0 + ua , 2 
[18899] c:0 is:loop 0 , 2 , loop 1 , 2 , move v1 - 2 , v1  decode:loop 0 , 4 , move v0 , ul / 3 
[18900] c:0 is:( move ua + 2 , 0 - ul ; move ua + ul , 2 )  decode:( move 8 , 2 - 3 ; move 8 , 2 ) 
[18901] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ua , ul )  decode:loop 0 , 4 , move 0 - 5 , 2 / v0 
[18902] c:0 is:loop 0 , 3 , ( move ua , v0 ; move ul , ul )  decode:loop 0 , 4 , move ua , v0 * v0 
[18903] c:0 is:loop 0 , 3 , ( move v0 , 0 ; move 2 , v0 )  decode:loop 0 , 4 , move 2 , v0 * v0 
[18904] c:0 is:loop 0 , 2 , loop 1 , 2 , move 4 , v1 + v1  decode:loop 0 , 3 , move ua - 2 , v0 * 2 
[18905] c:0 is:loop 0 , 3 , loop 1 , 2 , move 3 - v0 , v1  decode:loop 0 , 3 , move 4 , v0 - 9 
[18906] c:0 is:( loop 0 , 4 , move ul , v0 ; move ua , ul )  decode:( move 2 , 4 ; move ua + ul , 4 ) 
[18907] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 , 4 + v1  decode:loop 0 , 4 , move 2 , 4 + 4 - v0 
[18908] c:0 is:( move 0 - ua , 0 ; move ua + ul , ul / 2 )  decode:( move ua , 0 ; move ua + ul , 9 ) 
[18909] c:0 is:( loop 0 , 4 , move v0 , ul ; move ua , ul )  decode:( move 4 , ua / 2 ; move ua , 2 ) 
[18910] c:0 is:loop 0 , 3 , loop 1 , 2 , move v1 + v0 , 4  decode:loop 0 , 4 , move 2 , 0 - 9 
[18911] c:0 is:( loop 0 , 4 , move ul , ul ; move ua , v0 )  decode:( move 4 , 8 ; move 4 , 9 + 2 ) 
[18912] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 * 2 , v1  decode:( move ua + ul , 2 ; move 4 , ul ) 
[18913] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 , ul )  decode:( move ua , ul ; move ua , 4 * 4 ) 
[18914] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 - 3 , v0  decode:loop 0 , 4 , move 0 - 3 , v0 * 3 
[18915] c:0 is:loop 0 , 3 , loop 1 , 2 , move v1 - 3 , v0  decode:loop 0 , 4 , move 0 - 4 , 4 * v0 
[18916] c:0 is:( move ua + ul , 0 - 3 ; move ua + ul , 2 )  decode:( move ua , 0 - 3 ; move 7 , 2 ) 
[18917] c:0 is:loop 0 , 0 , loop 1 , 6 , move v0 - v1 , 2  decode:0 0 loop 0 , 3 , move ul - ua , 9 
[18918] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 , v1 - v0  decode:( move 7 , ul ; move ua + 4 , 2 ) 
[18919] c:0 is:( move 2 , ua + 2 ; move ua + 2 , ua - ul )  decode:( move ua , 4 ; move 3 , 2 - 3 ) 
[18920] c:0 is:loop 0 , 2 , loop 1 , 2 , move v1 - 3 , v1  decode:loop 0 , 3 , move 0 - 3 , v0 - ul 
[18921] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 , v0 - v1  decode:( move ua , ul / 4 ; move ua , 2 ) 
[18922] c:0 is:( move ua + ul , 3 ; move ua - ul , 0 - 2 )  decode:( move ua , ul ; move ua - ul , 2 ) 
[18923] c:0 is:( loop 0 , 4 , move 2 , v0 ; move v0 , 0 )  decode:loop 0 , 3 , move ua - ul , v0 * 4 
[18924] c:0 is:( move 2 , 0 ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 4 , move 2 , v0 * v0 
[18925] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua , ul )  decode:( move 2 , 9 ; move ua + 2 , 4 ) 
[18926] c:0 is:( loop 0 , 5 , move ul , ul ; move ua , v0 )  decode:( move 2 , 4 ; move ua + 2 , 8 ) 
[18927] c:0 is:( loop 0 , 3 , move 3 , v0 ; move v0 , 0 )  decode:loop 0 , 3 , move ua - 3 , v0 
[18928] c:0 is:( loop 0 , 6 , move ul , v0 ; move ua , ua )  decode:loop 0 , 4 , move 2 , 4 + 4 - v0 
[18929] c:0 is:( move ua + ul , 4 ; move ua + ul , 0 - 2 )  decode:( move 8 , 4 ; move ua , 0 - 2 ) 
[18930] c:0 is:( move ua + ul , 0 - 4 ; move ua + ul , 2 )  decode:loop 0 , 2 , move 0 - ua , 0 - 4 
[18931] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 * v1 , v0  decode:( move 9 , 0 ; move ua + 3 , 4 ) 
[18932] c:0 is:loop 0 , 7 , loop 1 , 0 , move v1 - v0 , 2  decode:loop 0 , 4 , move v0 + 4 , 0 - 4 
[18933] c:0 is:( loop 0 , 4 , move v0 , ul ; move ul , ul )  decode:loop 0 , 4 , move v0 , 2 + 2 
[18934] c:0 is:( move 2 - ua , 0 - 3 ; move ua + ul , ul )  decode:( move 4 , ul / 4 ; move 7 , ul ) 
[18935] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 , v1 * v1  decode:loop 0 , 4 , move v0 * 2 , 2 
[18936] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move v0 - 4 , 4 / 3 
[18937] c:0 is:loop 0 , 2 , loop 1 , 3 , move 4 - v0 , v1  decode:loop 0 , 4 , move ul - ua , 3 - v0 
[18938] c:0 is:( move ua + ul , 0 ; move ua + 2 , ua / 3 )  decode:( move ua + ul , 2 ; move 8 , 2 ) 
[18939] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 , 3 / v0  decode:loop 0 , 3 , move 2 , 4 / v0 
[18940] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , v1 - 3  decode:( move 2 , ul ; move 4 , 4 * 3 ) 
[18941] c:0 is:( loop 0 , 5 , move v0 , ul ; move ua , ul )  decode:( move ua + ul , 4 ; move 8 , 2 ) 
[18942] c:0 is:( move ua - ul , 0 ; move ua - ul , 0 - 4 )  decode:( move 5 , 0 ; move 5 , 0 - 4 ) 
[18943] c:0 is:( move ul - ua , 0 ; move ua - ul , 2 - 3 )  decode:( move ul - ua , 0 ; move 5 , ul ) 
[18944] c:0 is:( loop 0 , 5 , move v0 , v0 ; move 2 , 0 )  decode:( move 4 , 0 ; move ua , 5 * 2 ) 
[18945] c:0 is:( move ua , 0 - 2 ; move ua + ul , ua / 3 )  decode:loop 0 , 2 , move ua + ul , v0 - 3 
[18946] c:0 is:( move ua + ul , 2 ; move ua - ul , 0 - 4 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[18947] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 * 3 , v1  decode:loop 0 , 4 , move 0 - 4 , v0 + 4 
[18948] c:0 is:( move ua - 4 , 0 ; move ua - 2 , ua - ul )  decode:( move 3 , 0 ; move 4 , 2 - 3 ) 
[18949] c:0 is:( loop 0 , 5 , move v0 , ul ; move ul , ul )  decode:loop 0 , 3 , move 3 - ua , 2 * 9 
[18950] c:0 is:( move 0 , 2 ; loop 0 , 5 , move v0 , v0 )  decode:( move 4 , ua * ua ; move 5 , 4 ) 
[18951] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , v0 * 4  decode:( move 3 , 0 ; move 3 , 5 + 2 ) 
[18952] c:0 is:( loop 0 , 6 , move ul , v0 ; move ua , ul )  decode:( move 2 , 2 / move ua + 2 , 4 ) 
[18953] c:0 is:( loop 0 , 6 , move ul , ul ; move ua , v0 )  decode:loop 0 , 4 , move 3 , 0 - 9 - v0 
[18954] c:0 is:( loop 0 , 5 , move ul , ul ; move v0 , ul )  decode:loop 0 , 4 , move 2 , 3 + 4 / v0 
[18955] c:0 is:( move ul , ua ; loop 0 , 6 , move ul , v0 )  decode:loop 0 , 4 , move 2 , 4 0 * 8 
[18956] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 - 4 , v1  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[18957] c:0 is:( move ua + 2 , 2 ; move ua + ul , ua - 4 )  decode:( move ua + ul , 2 ; move 8 , 4 ) 
[18958] c:0 is:( move ua + ul , 0 - 3 ; move ua + ul , 4 )  decode:loop 0 , 3 , move ua - ul , v0 - 3 
[18959] c:0 is:( move ua - ul , 0 ; move ul - ua , 2 - 3 )  decode:( move 5 , ul - 4 ; move 5 , 2 ) 
[18960] c:0 is:( move ua - ul , ul ; move ua + 4 , 0 - 2 )  decode:( move 9 , 0 - 4 ; move ua , 2 ) 
[18961] c:0 is:( move 0 - ua , ul ; move 3 - ua , 4 + ul )  decode:( move 3 , 6 ; move ua , 4 / 3 ) 
[18962] c:0 is:( move 0 , 3 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move ul - ua , 4 * 5 
[18963] c:0 is:( move ua - ul , 0 - ul ; move ua , 4 + 3 )  decode:( move ul - ua , 2 ; move ua , 4 ) 
[18964] c:0 is:( loop 0 , 4 , move 4 , v0 ; move v0 , 0 )  decode:loop 0 , 4 , move ua , v0 + v0 
[18965] c:0 is:( loop 0 , 4 , move 2 , v0 ; move v0 , 2 )  decode:loop 0 , 4 , move v0 + ul , 4 / 3 
[18966] c:0 is:( loop 0 , 6 , move v0 , ul ; move ul , ul )  decode:loop 0 , 4 , move 3 - ua , 3 / 4 
[18967] c:0 is:( move ua + ul , 3 ; move ua - ul , 0 - 4 )  decode:loop 0 , 4 , move 3 - ua , v0 - 2 
[18968] c:0 is:( loop 0 , 5 , move 3 , v0 ; move v0 , 0 )  decode:loop 0 , 3 , move ua , 0 - v0 + 6 
[18969] c:0 is:( move 0 - 2 , ul / 2 ; move ua + ul , ul )  decode:( move 2 , 0 - 4 ; move ua , 2 ) 
[18970] c:0 is:( move 2 , 2 ; loop 0 , 4 , move v0 , v0 )  decode:( move 3 , 2 ; move 3 , 9 ) 
[18971] c:0 is:( move 0 - 4 , 3 ; move ua + ul , ua - ul )  decode:( move 4 + 3 , 2 ; move 4 , ul ) 
[18972] c:0 is:( loop 0 , 4 , move v0 , v0 ; move 2 , 2 )  decode:loop 0 , 3 , move 3 , 4 / v0 
[18973] c:0 is:( move ua + ul , 4 ; move ua + ul , 0 - 4 )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[18974] c:0 is:( move 3 , 0 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , 3 * 3 - v0 
[18975] c:0 is:( move 0 - ua , 2 ; move ua - ul , ul / 2 )  decode:( move ua , 2 ; move 5 , 9 ) 
[18976] c:0 is:loop 0 , 3 , ( move v0 , 2 ; move 3 , v0 )  decode:loop 0 , 4 , move 3 , 5 + v0 
[18977] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , ul )  decode:loop 0 , 4 , move 3 , 4 * v0 
[18978] c:0 is:( move 4 , 0 ; loop 0 , 4 , move v0 , v0 )  decode:( move 5 , 0 ; move 4 , 4 ) 
[18979] c:0 is:( loop 0 , 5 , move v0 , v0 ; move 3 , 0 )  decode:( move 4 , 6 ; move ua + ul , 4 ) 
[18980] c:0 is:( move 0 - 3 , ul - ua ; move 3 , ua * ua )  decode:( move 3 , 4 ; move 3 , 4 / 3 ) 
[18981] c:0 is:( move ul , ul ; loop 0 , 6 , move ul , v0 )  decode:( move 3 , ul ; move 3 , 4 ) 
[18982] c:0 is:( move ua - ul , 2 - 3 ; move ul - ua , 2 )  decode:( move 5 , ul ; move 5 , 5 / 4 ) 
[18983] c:0 is:( move ua + ul , 0 - 3 ; move ul - 4 , ul )  decode:( move ua , 0 - 3 ; move 2 , 4 ) 
[18984] c:0 is:( move 0 - ua , 3 ; move ua + ul , ua / 4 )  decode:loop 0 , 2 , move ua , 3 / 2 
[18985] c:0 is:( move 0 - 4 , 4 ; move ua + ul , ua * ua )  decode:( move 4 , 4 ; move ua + ul , 5 ) 
[18986] c:0 is:( move ua + 2 , ul / ua - 3 ; move ua , 2 )  decode:( move 9 , 2 / ua ; move ua , 2 ) 
[18987] c:0 is:( move ua - ul , 2 - 3 ; move ua - ul , 2 )  decode:( move 5 , 2 - 3 ; move 5 , 2 ) 
[18988] c:0 is:( move ul - ua , 2 - 3 ; move ua - ul , 2 )  decode:( move 4 , ua / 4 ; move 5 , 2 ) 
[18989] c:0 is:( move ua + ul , 3 ; move 3 + 3 , ua * ua )  decode:( move ua + ul , 3 ; move ua , 5 ) 
[18990] c:0 is:( move 2 - ua , ul / 2 ; move ua + 2 , ul )  decode:( move 4 , 9 + 4 ; move 9 , ul ) 
[18991] c:0 is:( move 3 + 3 , ua - 3 ; move ua + ul , ul )  decode:( move 5 , 0 - 3 ; move ua , ul ) 
[18992] c:0 is:( move 3 , 2 ; loop 0 , 4 , move v0 , v0 )  decode:( move 4 , 2 ; move 4 , 0 - 9 ) 
[18993] c:0 is:loop 0 , 3 , ( move v0 , 2 ; move 4 , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 + 7 
[18994] c:0 is:( loop 0 , 5 , move v0 , v0 ; move 4 , 0 )  decode:( move 4 , 6 ; move ua + 2 , 4 ) 
[18995] c:0 is:loop 0 , 2 , loop 1 , 3 , move 4 / v1 , v1  decode:loop 0 , 4 , move 2 - ua , 0 - v0 
[18996] c:0 is:( move 0 , 3 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[18997] c:0 is:( loop 0 , 5 , move v0 , 2 ; move v0 , 2 )  decode:loop 0 , 3 , move 5 , 9 / 3 
[18998] c:0 is:( loop 0 , 5 , move 2 , 2 ; move v0 , v0 )  decode:0 0 loop 0 , 4 , move 3 , 0 - 4 
[18999] c:0 is:( move 4 , 0 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 + 3 
[19000] c:0 is:( move ua - 4 , 0 ; move ul - ua , ua - 4 )  decode:( move 2 , 0 ; move ua - ul , ul ) 
[19001] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 4 , 2 )  decode:loop 0 , 4 , move 0 - 4 , v0 + 2 
[19002] c:0 is:( move 2 , ua - 4 ; move ua + 3 , ua * ua )  decode:( move 9 , ul ; move 3 , ua * ua ) 
[19003] c:0 is:( move 3 , ul / 2 ; move ua + ul , ua - 2 )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[19004] c:0 is:( move ua - ul , 2 - 3 ; move ua + ul , 4 )  decode:( move ul - ua , 2 ; move 7 , 4 ) 
[19005] c:0 is:( move ua + ul , ua / 4 ; move ua + 3 , 2 )  decode:( move ua + ul , 4 ; move 3 , 2 ) 
[19006] c:0 is:( move ua + 3 , 2 / ua ; move ua + ul , 4 )  decode:( move 9 , 2 / 4 ; move ua , 4 ) 
[19007] c:0 is:( move ua + ul , 3 ; move ua + ul , 3 / 2 )  decode:( move ua , 3 ; move 9 , ua / 4 ) 
[19008] c:0 is:( move 4 , 2 ; loop 0 , 4 , move v0 , v0 )  decode:( move ua - ul , 2 ; move 3 , 9 ) 
[19009] c:0 is:( loop 0 , 5 , move 2 , v0 ; move 3 , v0 )  decode:loop 0 , 4 , move v0 * 2 , 0 - 8 
[19010] c:0 is:( move 2 , 4 ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 3 , move 3 , 4 0 * 0 + 0 0 + 0 0 0 0 0 0 / / / - 0 
[19011] c:0 is:( move 0 - ua , 3 / ua ; move ul - ua , 4 )  decode:( move ua , 0 - 9 ; move 5 , 4 ) 
[19012] c:0 is:( move ua + ul , 3 ; move 3 + 4 , ua * ua )  decode:( move ua + ul , 3 ; move ua , 5 ) 
[19013] c:0 is:( move 3 , 2 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 0 - 4 , 0 - 4 
[19014] c:0 is:( move 4 + 3 , 3 ; move ua + ul , ua * ua )  decode:( move ua , 3 ; move ua + ul , 5 ) 
[19015] c:0 is:( move ul - ua , 4 / ua ; move ua , 0 - 3 )  decode:( move ua , 4 ; move 4 , 2 + 4 ) 
[19016] c:0 is:loop 0 , 3 , ( move 2 + ul , 2 ; move 0 , 3 )  decode:loop 0 , 3 , move 3 - ua , 2 * 9 
[19017] c:0 is:( loop 0 , 6 , move 2 , v0 ; move v0 , 2 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 5 
[19018] c:0 is:loop 0 , 3 , ( move 4 , 3 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 6 / v0 
[19019] c:0 is:( move ul - ua , 3 + 3 ; move ua , 2 / ua )  decode:( move ua , 0 - 3 ; move 5 , 4 ) 
[19020] c:0 is:( move 0 , 4 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[19021] c:0 is:( loop 0 , 3 , move 3 , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 2 
[19022] c:0 is:( loop 0 , 4 , move 3 , v0 ; move 3 , v0 )  decode:loop 0 , 4 , move ua - 4 , v0 
[19023] c:0 is:loop 0 , 3 , ( move 3 , 4 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , ua / v0 / 2 
[19024] c:0 is:( move ua + ul , ul - 2 ; move 3 , ul - 3 )  decode:( move 3 , ul / 4 ; move 8 , 2 ) 
[19025] c:0 is:( loop 0 , 5 , move v0 , 3 ; move v0 , 2 )  decode:loop 0 , 3 , move 4 , 0 - 5 - v0 
[19026] c:0 is:( loop 0 , 4 , move v0 , 4 ; move 2 , v0 )  decode:loop 0 , 3 , move 4 - ua , 9 
[19027] c:0 is:( move 3 , 3 ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 4 , move v0 , v0 * 3 
[19028] c:0 is:( loop 0 , 5 , move v0 , 2 ; move 3 , v0 )  decode:loop 0 , 3 , move 4 + v0 , 4 
[19029] c:0 is:loop 0 , 3 , ( move v0 , 4 ; move 3 , v0 )  decode:loop 0 , 4 , move 3 - ua , 4 - v0 
[19030] c:0 is:( loop 0 , 4 , move v0 , 4 ; move v0 , 2 )  decode:loop 0 , 3 , move 3 , 0 - 2 
[19031] c:0 is:( move 4 , 2 - 3 ; move ua + ul , ua * ua )  decode:( move 4 , 4 * 3 ; move 8 , 5 ) 
[19032] c:0 is:( move 0 - 3 , 0 ; loop 0 , 3 , move 3 , ul )  decode:( move ua , ul ; move ua , ua / 3 ) 
[19033] c:0 is:( move 3 - ua , ul ; move 2 - ua , ul / 2 )  decode:( move 3 , 4 ; move 4 , 2 / 4 ) 
[19034] c:0 is:( move 3 , 2 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 4 , 0 - 9 / v0 
[19035] c:0 is:loop 0 , 3 , ( move v0 , 4 ; move 4 , v0 )  decode:( move 4 , 4 ; move ua + 2 , 5 ) 
[19036] c:0 is:( move 2 - ua , ul / 3 ; move ua - 2 , ul )  decode:( move 4 , ul - 9 ; move 4 , 4 ) 
[19037] c:0 is:( move ua + 4 , 4 + 3 ; move ul , ul + ul )  decode:( move ua + 3 , 3 + move ul , 2 ) 
[19038] c:0 is:( move 2 + ua , ul / 2 ; move 4 , ua * ua )  decode:( move ua + 2 , 3 ; move 4 , 8 ) 
[19039] c:0 is:( move ua + ul , 2 / 3 ; move ua + ul , 4 )  decode:( move ua + ul , 7 ; move 7 , 4 ) 
[19040] c:0 is:( move 4 , 3 ; loop 0 , 4 , move v0 , v0 )  decode:( move ul - ua , 3 ; move 4 , 6 ) 
[19041] c:0 is:( move ua + ul , 3 ; move ul - ua , 3 / 2 )  decode:( move ua + ul , 3 ; move ua , 8 ) 
[19042] c:0 is:( move 3 , ua - ul ; move ul - ua , 4 + 3 )  decode:( move 3 , 2 - 3 ; move ua , 4 ) 
[19043] c:0 is:( loop 0 , 3 , move 4 , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move 4 , v0 * v0 
[19044] c:0 is:( move ua - 2 , ul ; move ua + ul , 4 * 3 )  decode:loop 0 , 3 , move 3 - ua , 2 / ua 
[19045] c:0 is:( move 2 , 4 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 - 9 
[19046] c:0 is:( move ua + ul , ua - ul ; move 4 + 3 , 4 )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[19047] c:0 is:loop 0 , 3 , ( move 4 , 4 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[19048] c:0 is:( move ua + ul , ua / 4 ; move ua + 2 , 4 )  decode:( move ua , 3 / 2 ; move 9 , 4 ) 
[19049] c:0 is:( move ua + ul , ul / 2 ; move 4 , ua - 2 )  decode:( move 4 , ua / 4 ; move 7 , 2 ) 
[19050] c:0 is:( move 4 , 2 - 3 ; move ua - ul , ua * ua )  decode:( move 4 , 2 - 3 ; move ua , 8 ) 
[19051] c:0 is:( loop 0 , 5 , move v0 , 4 ; move v0 , 2 )  decode:loop 0 , 4 , move 3 , 0 - v0 * 2 
[19052] c:0 is:( loop 0 , 6 , move 3 , 2 ; move v0 , v0 )  decode:loop 0 , 4 , move 5 , 0 - 4 / v0 
[19053] c:0 is:( move ua + ul , 3 / ua / 2 ; move ua , 2 )  decode:( move 7 , ul ; move ua , 2 ) 
[19054] c:0 is:( move 3 , 3 / ua ; move ua + 3 , ua * ua )  decode:( move 3 , 3 / 4 ; move 9 , 8 ) 
[19055] c:0 is:( move ua + ul , ul / ua + 4 ; move 3 , 2 )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[19056] c:0 is:( move ua + ul , 3 / ua ; move 4 + ul , 2 )  decode:( move ua + ul , 9 ; move 5 , 2 ) 
[19057] c:0 is:( move 4 + 3 , ul / ua ; move ua + ul , 2 )  decode:loop 0 , 3 , move  4 , 2 * 4 / 3 
[19058] c:0 is:( move ua - ul , ua - 2 ; move ul + 4 , 4 )  decode:( move 5 , 0 - 2 ; move 5 , 4 ) 
[19059] c:0 is:( move 4 * 2 , ua ; move ua + ul , ul - 3 )  decode:( move 8 , ua / 4 ; move ua , 2 ) 
[19060] c:0 is:( move 4 , 2 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 0 - 4 , 9 
[19061] c:0 is:( move 0 - ua , ul / 4 ; move ua - 3 , ul )  decode:( move ua , 4 * 4 ; move 3 , 4 ) 
[19062] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move v0 , 4 )  decode:loop 0 , 3 , move ua / v0 , 3 * 4 
[19063] c:0 is:( move ua + ul , 4 * 4 ; move ua + ul , 2 )  decode:( move 8 , 4 * 4 ; move ua , 2 ) 
[19064] c:0 is:( move 2 - 4 , 2 / ua ; move ul - ua , ul )  decode:( move 2 , 4 * 4 ; move 5 , ul ) 
[19065] c:0 is:( move 0 , ua + 2 ; loop 0 , 4 , move 4 , 3 )  decode:loop 0 , 4 , move 3 , v0 + 7 
[19066] c:0 is:( loop 0 , 4 , move v0 , 4 ; move v0 , 4 )  decode:loop 0 , 3 , move 3 , v0 + 7 
[19067] c:0 is:( loop 0 , 6 , move v0 , 4 ; move v0 , 2 )  decode:loop 0 , 4 , move 0 - 5 , 0 - v0 
[19068] c:0 is:( move 3 - ua , 2 ; move ul - ua , ua / 4 )  decode:( move 3 , 5 ; move ua - ul , 8 ) 
[19069] c:0 is:( move ua + ul , 2 / 3 ; move 4 - ua , ul )  decode:( move ua , 4 + 3 ; move 3 , 4 ) 
[19070] c:0 is:( loop 0 , 5 , move 3 , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move 5 , 0 - v0 / 4 
[19071] c:0 is:( move ua , ua - ul ; move 4 - ul , 3 * 2 )  decode:( move 3 , 8 ; move ua , ul / ua ) 
[19072] c:0 is:( loop 0 , 5 , move v0 , 3 ; move 4 , v0 )  decode:loop 0 , 4 , move 0 - 3 , v0 - 3 
[19073] c:0 is:( loop 0 , 6 , move v0 , 4 ; move 2 , v0 )  decode:loop 0 , 4 , move 4 , 0 - 9 
[19074] c:0 is:( loop 0 , 6 , move 3 , 3 ; move v0 , v0 )  decode:( move 9 , ul ; move 4 , 4 4 / ) v0 
[19075] c:0 is:( move ul , ua - 4 ; move ua + 3 , ua / 3 )  decode:( move 2 , ul ; move ua + 2 , ul ) 
[19076] c:0 is:( move 3 - ua , 2 ; move ua + ul , ul / 4 )  decode:( move 3 , 4 / 3 ; move ua , 4 ) 
[19077] c:0 is:( move ua - ul , 6 / ua ; move ua + 2 , 2 )  decode:( move 5 , ul ; move 8 , 2 ) 
[19078] c:0 is:( move 3 , 4 * 3 ; move ua + ul , ua * ua )  decode:( move 3 , 9 ; move ua + ul , 8 ) 
[19079] c:0 is:( move ua + ul , ua / 4 ; move ua - 4 , 2 )  decode:( move ua , 3 / 4 ; move 2 , 2 ) 
[19080] c:0 is:( move ua , 4 * 2 ; move ua - 4 , ua - ul )  decode:( move 2 , 4 ; move ua , ul ) 
[19081] c:0 is:( move 3 - ua , ul / 3 ; move 2 - ua , ul )  decode:( move 3 , 0 - 9 ; move 4 , ul ) 
[19082] c:0 is:( move ua , ul / 4 ; move ua + 2 , ul - 3 )  decode:( move ua + 2 , 9 ; move 5 , 2 ) 
[19083] c:0 is:( move ul - ua , 4 / 3 ; move ua + ul , 2 )  decode:( move ua , 2 / 9 ; move ua , ul ) 
[19084] c:0 is:( move ua + 4 , ul ; move 4 + ul , ua - 4 )  decode:( move ua , ul / 4 ; move ua , 4 ) 
[19085] c:0 is:( move ua - ul , 4 ; move ul - ua , 3 / 2 )  decode:( move 5 , 4 ; move 5 , 3 + 8 ) 
[19086] c:0 is:( move 3 , ua / 3 ; move ua + ul , 3 / ua )  decode:( move 3 , 2 ; move ua , 4 / ua ) 
[19087] c:0 is:( move 3 , ul / 3 ; move ul - ua , ul - 2 )  decode:( move 4 , 4 * 6 ; move 4 , 2 ) 
[19088] c:0 is:( loop 0 , 6 , move v0 , 3 ; move 4 , v0 )  decode:loop 0 , 3 , move 4 , 2 / 3 / v0 
[19089] c:0 is:( loop 0 , 6 , move v0 , 3 ; move v0 , 4 )  decode:loop 0 , 4 , move 4 , 0 - v0 0 
[19090] c:0 is:( loop 0 , 5 , move v0 , 4 ; move v0 , 4 )  decode:loop 0 , 4 , move 4 , 0 - 4 * 4 
[19091] c:0 is:( move ul - ua , 2 / 4 ; move ul - ua , 3 )  decode:( move 5 , 0 - 9 ; move 5 , 3 ) 
[19092] c:0 is:( loop 0 , 6 , move 4 , 3 ; move v0 , v0 )  decode:( move ua / 2 , 3 ; move 9 , 3 ) 
[19093] c:0 is:( move ul - 4 , 4 * 2 ; move ua , ua * ua )  decode:( move 3 - ua , 9 ; move ua , 8 ) 
[19094] c:0 is:( move ul - ua , ua ; move 4 - ua , 4 * 3 )  decode:( move ul - ua , 0 ; move 4 , 7 ) 
[19095] c:0 is:( move ua - ul , ua - ul ; move 3 , 4 * 3 )  decode:( move 3 , 8 ; move ua , 3 * 4 ) 
[19096] c:0 is:( move ul - ua , 2 / 3 ; move 4 , ua * ua )  decode:( move 5 , 4 + 5 ; move 4 , 8 ) 
[19097] c:0 is:( move ul - 4 , ul ; move ua + ul , 4 * 2 )  decode:( move 3 , 4 ; move ua + ul , 8 ) 
[19098] c:0 is:( move 4 , ua - 4 ; move ua - 4 , ua * ua )  decode:( move 2 , 4 ; move 4 , ua / 4 ) 
[19099] c:0 is:( move 4 - ua , 3 / 2 ; move ul - ua , ul )  decode:( move 2 , 9 / 2 ; move ua , ul ) 
[19100] c:0 is:( move ua + ul , 4 * 4 ; move 3 - ua , ul )  decode:( move ua , 4 * 4 ; move 3 , ul ) 
[19101] c:0 is:( move 3 , ul / 3 ; move ul + ul , ul - 2 )  decode:( move 3 , 2 ; move 3 , 2 / 4 ) 
[19102] c:0 is:( move 0 - 4 , ul / 4 ; move ul - ua , ul )  decode:( move 4 , 4 * 4 ; move 5 , ul ) 
[19103] c:0 is:( loop 0 , 6 , move v0 , 4 ; move 3 , v0 )  decode:loop 0 , 4 , move ua - 2 , 0 - 9 
[19104] c:0 is:( move 3 - ua , ua * ua ; move 3 , ul / 3 )  decode:( move 3 , 5 ; move 3 , 9 ) 
[19105] c:0 is:( move ul - ua , 3 ; move ul - 4 , 4 + ul )  decode:( move ul - ua , 3 ; move 3 , 4 ) 
[19106] c:0 is:( move ua + ul , 3 / ua ; move 4 , ua - 4 )  decode:( move 4 , 6 ; move ua + ul , 4 ) 
[19107] c:0 is:( move ua - ul , ua * ua ; move 3 , 4 * 3 )  decode:( move 3 , 4 + 3 ; move ua , 9 ) 
[19108] c:0 is:( move 4 - ua , ul / 2 ; move ua + ul , 4 )  decode:( move 2 , 9 + 2 ; move 9 , ul ) 
[19109] c:0 is:( move ua + ul , 3 / 4 ; move ua + ul , 4 )  decode:loop 0 , 2 , move 0 - ua , 4 
[19110] c:0 is:( move ua , ul / 3 ; move ua - 3 , 3 / ua )  decode:( move 3 , 4 ; move ua , 2 / 4 ) 
[19111] c:0 is:( move ul - ua , ua / 2 ; move ua , 3 / 4 )  decode:( move 5 , 0 ; move ua , 0 - 4 ) 
[19112] c:0 is:( move ua + ul , ul - 3 ; move ua / 4 , 4 )  decode:( move ul , 0 ; move ua + ul , ul ) 
[19113] c:0 is:( loop 1 , 5 , move 2 , v1 ; move v1 , 4 )  decode:loop 0 , 4 , move 3 , 5 * 3 
[19114] c:0 is:( move ua + ul , ul / ua ; move 3 * 3 , 4 )  decode:( move ua + ul , ul ; move 9 , 4 ) 
[19115] c:0 is:( move ul - ua , 4 / 3 ; move ua + 4 , ul )  decode:( move ua , 9 / 2 ; move 9 , 2 ) 
[19116] c:0 is:( move ul + ul , ul / 2 ; move 4 + 4 , ul )  decode:( move 2 , ua / 4 ; move ua , ul ) 
[19117] c:0 is:( move 4 , 4 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[19118] c:0 is:( move ul , ul / 2 ; move ua + 3 , ua / 4 )  decode:( move 3 / 2 , ul ; move 3 , 2 ) 
[19119] c:0 is:( move 4 + ul , 2 ; move 2 , 2 ; move 4 , 2 )  decode:( move 5 , 2 ; move 5 , 4 ) 
[19120] c:0 is:( move ua + ul , 9 + 4 ; move ua + ul , 2 )  decode:loop 0 , 3 , move 4 + v0 , 4 / 3 
[19121] c:0 is:( move 3 - ua , 3 / 4 ; move ul - ua , ul )  decode:( move 3 , 4 ; move 5 , ul ) 
[19122] c:0 is:( move 2 , 4 - 0 ; loop 0 , 3 , move 4 , ul )  decode:( move ua , 9 ; move ua , 4 / 3 ) 
[19123] c:0 is:( move ul - ua , ul ; move 4 + ul , 4 * 3 )  decode:loop 0 , 3 , move 3 - ua , v0 + 9 
[19124] c:0 is:( move 4 , 4 / 3 ; move ua + ul , ua * ua )  decode:( move ua , 0 ; move 4 , 4 / 3 ) 
[19125] c:0 is:( move ul - ua , 3 * 6 ; move 2 + ul , ul )  decode:( move 3 , 0 - 4 ; move 5 , 4 ) 
[19126] c:0 is:( move 3 - ua , ul ; move ua - ul , 4 / 3 )  decode:( move 3 , 4 ; move ua - ul , 8 ) 
[19127] c:0 is:( move 4 , ul / 4 ; move ul - ua , ua - 2 )  decode:( move 5 , 9 / 2 ; move 4 , ul ) 
[19128] c:0 is:( move ua + ul , ul / 4 ; move 4 , ua - 3 )  decode:( move ua , 2 / 6 ; move 9 , 3 ) 
[19129] c:0 is:( move 2 , ul / 3 ; move ul - ua , ua / 4 )  decode:( move 5 , 2 ; move 3 , 3 / 4 ) 
[19130] c:0 is:( move ul , ua - ul ; move 3 * 3 , ul / 3 )  decode:( move ua , 4 + move 4 , 2 / ua ) 
[19131] c:0 is:( move ua + ul , ul / 3 ; move ua , 4 * 4 )  decode:loop 0 , 3 , move v0 + 4 , 4 * 4 
[19132] c:0 is:( move 4 , ua / 2 ; move ul - ua , 4 / ua )  decode:( move 4 , 0 ; move ul - ua , 7 ) 
[19133] c:0 is:( move ua , 9 + ul ; move 2 - ua , 4 + ul )  decode:( move ua , 2 * 5 ; move 4 , 5 ) 
[19134] c:0 is:( move 4 , 4 + 3 ; move 4 , 0 ; move 3 , ul )  decode:( move ua + ul , 7 ; move 3 , ul ) 
[19135] c:0 is:( move 3 + 4 , 9 ; move ua + ul , ua * ua )  decode:loop 0 , 2 , move ua , 4 / 3 
[19136] c:0 is:( move ua + ul , ul - 9 ; move ua + 3 , 4 )  decode:loop 0 , 3 , move 4 + v0 , 0 - 9 
[19137] c:0 is:( move 3 , 4 / ua ; move ul - ua , 4 / ua )  decode:( move 3 , 4 / 3 ; move ua , 9 ) 
[19138] c:0 is:( move ua , 4 / 3 ; move ua - ul , ua / 4 )  decode:loop 0 , 2 , move ua - v0 , 3 / 2 
[19139] c:0 is:( move 3 + ul , 3 ; loop 0 , 6 , move 2 , 4 )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[19140] c:0 is:( move 4 , 4 / ua ; loop 0 , 3 , move 3 , 2 )  decode:loop 0 , 4 , move 3 - ua , 4 * 3 
[19141] c:0 is:( move ua , 3 ; loop 0 , 6 , move 4 + 3 , 3 )  decode:loop 0 , 4 , move loop loop , loop , loop - 3 
[19142] c:0 is:( move ul - 3 , 4 ; loop 0 , 4 , move 3 , 4 )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[19143] c:0 is:( move 3 , ul / 4 ; loop 0 , 6 , move 2 , 2 )  decode:0 loop 0 , 4 , move 3 , - ua - v0 
[19144] c:0 is:( move 3 , ul ; loop 0 , 4 , move 3 , 4 * 4 )  decode:loop 0 , 4 , move 4 , 4 * 4 
[19145] c:0 is:( loop 0 , 6 , move 4 / 2 , 3 ; move ua , 3 )  decode:( move 3 , 4 ; move ua , 0 - 4 ) 
[19146] c:0 is:( move 4 , ul ; ( move 2 , 2 ; move 4 , 3 ) )  decode:( move 4 , ul ; move 2 - ua , 5 ) 
[19147] c:0 is:( move ua + ul , 0 ; move 0 - ua , ua - ul )  decode:( move ua + ul , 0 ; move ua , ul ) 
[19148] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + ul , v0  decode:0 0 0 0 0 loop 0 , 4 , move 3 , v0 
[19149] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + v0 , ul  decode:loop 0 , 3 , move 4 , 3 - v0 
[19150] c:0 is:( move 0 - ua , 0 ; move ua + ul , ua * ua )  decode:( move ua , 5 ; move ua + ul , 5 ) 
[19151] c:0 is:( move ua + ul , 0 ; move 0 - ua , ua * ua )  decode:( move ua + ul , 0 ; move ua , 8 ) 
[19152] c:0 is:( move ul + ua , 0 ; move ua + ul , ua - 2 )  decode:( move ua + ul , v0 + 4 , 2 ) 
[19153] c:0 is:loop 0 , 2 , loop 1 , 2 , move ul , v1 - v0  decode:( move 3 , v; move 2 , 4 ) 
[19154] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + ul , v1  decode:loop 0 , 4 , move 3 , ul 
[19155] c:0 is:loop 0 , 2 , loop 1 , 3 , move v0 + ul , v1  decode:loop 0 , 4 , move ua - 4 , 3 / v0 
[19156] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + v1 , ul  decode:loop 0 , 3 , move 3 - ua , 4 * 3 
[19157] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , ul + v0  decode:( move ul , 4 ; move 4 , 4 ) 
[19158] c:0 is:loop 0 , 3 , loop 1 , 2 , move v1 + ul , v0  decode:loop 0 , 3 , move 3 , v0 / ua 
[19159] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul + v1 , v0  decode:loop 0 , 4 , move 3 , v0 0 
[19160] c:0 is:( move ua + ul , 0 ; move ua + 2 , ua * ua )  decode:( move ua + ul , 0 ; move 8 , 8 ) 
[19161] c:0 is:( move 0 - ul , 0 ; move ua + ul , ua * ua )  decode:( move ul , 3 ; move ua + ul , 2 ) 
[19162] c:0 is:( move ua + ul , ul ; move ua + ul , 0 - 2 )  decode:loop 0 , 2 , move ua + ul , ua / 3 
[19163] c:0 is:loop 0 , 0 , loop 1 , 5 , move v0 - v1 , ul  decode:loop 0 , 3 , move 3 , v0 * 6 
[19164] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 * v0 , ul  decode:( move 3 , 9 ; move ua , 0 - 2 ) 
[19165] c:0 is:( move ua + 2 , 0 - ul ; move ua , ua * ua )  decode:( move ua + 3 , : ; move ua , 8 ) 
[19166] c:0 is:loop 0 , 3 , loop 1 , 2 , move ul - v0 , v1  decode:( move 3 , 2 ; move ul , 3 ) 
[19167] c:0 is:loop 0 , 3 , loop 1 , 2 , move v1 + ul , v1  decode:loop 0 , 3 , move 3 , ul 
[19168] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + v1 , ul  decode:0 loop 0 , 4 , move 3 , 2 0 
[19169] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , v0 - v1  decode:( move 3 , 2 / 4 ; move 3 , 2 ) 
[19170] c:0 is:( move ua + ul , 0 ; move ua - 2 , ua * ua )  decode:( move ua + ul , 0 ; move 4 , 5 ) 
[19171] c:0 is:( move ua , 0 - 3 ; move ua + ul , ua * ua )  decode:( move ua , 0 - 3 ; move 8 , 8 ) 
[19172] c:0 is:( move 3 - ua , 0 ; move ua + ul , ua * ua )  decode:( move 3 , ua / 2 ; move 8 , 5 ) 
[19173] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , v1 - ul  decode:loop 0 , 4 , move v0 , 2 - v0 
[19174] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 , ul / v0  decode:loop 0 , 4 , move v0 , 3 / 2 
[19175] c:0 is:loop 0 , 6 , loop 1 , 0 , move v1 - v0 , ul  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[19176] c:0 is:( move ua + 2 , ul ; move ua + ul , ua - 2 )  decode:loop 0 , 2 , move ua + 2 , ua / 3 
[19177] c:0 is:( move 2 - ua , ua * ua ; move 0 - ua , ul )  decode:( move ua , 9 ; move 4 , 2 - 3 ) 
[19178] c:0 is:( move ua + ul , 3 ; move 0 - ua , ua * ua )  decode:( move ua + ul , 3 ; move ua , 5 ) 
[19179] c:0 is:( move 0 - 2 , ul ; move ua + ul , ua * ua )  decode:( move 2 , 4 ; move 2 + 4 , 5 ) 
[19180] c:0 is:( move 2 - ua , ua ; move ua + ul , ua - 2 )  decode:( move 4 , ua / 5 ; move 4 , 5 ) 
[19181] c:0 is:( move ua + ul , 0 - 3 ; move ul - ua , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[19182] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua , 2 )  decode:loop 0 , 3 , move ua + ul , 0 - 9 
[19183] c:0 is:( move 3 , 0 - ul ; move ua + ul , ua * ua )  decode:( move 3 , 2 ; move ua + ul , 8 ) 
[19184] c:0 is:loop 0 , 3 , ( move v0 , 2 ; move ua , v0 )  decode:loop 0 , 3 , move ua + ul , 2 + v0 
[19185] c:0 is:loop 0 , 3 , ( move ua , 2 ; move v0 , v0 )  decode:loop 0 , 3 , move ua + v0 , 2 
[19186] c:0 is:( move ua , 0 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , 2 + v0 - 3 
[19187] c:0 is:( move ua , 0 - 4 ; move ua + ul , ua * ua )  decode:( move ua + ul , 4 ; move ua , 9 ) 
[19188] c:0 is:( move ua + ul , ul ; move ua + ul , 0 - 4 )  decode:loop 0 , 3 , move ua - v0 , ua / 3 
[19189] c:0 is:( move ul - ua , 0 - ul ; move ul - ua , 2 )  decode:( move 5 , ul ; move ua , 0 - 2 ) 
[19190] c:0 is:( move ua + ul , 2 ; move ua - ul , ua - 2 )  decode:( move 5 , 2 ; move ua , 0 - 2 ) 
[19191] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul , v1 * v1  decode:( move 2 , ul ; move 3 , 4 ) 
[19192] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua , 0 )  decode:( move 4 , 3 ; move ua + 4 , 4 ) 
[19193] c:0 is:( move ua + ul , 0 - 4 ; move ua , ua * ua )  decode:( move ua , 4 ; move ua , 4 - 7 ) 
[19194] c:0 is:loop 0 , 5 , loop 1 , ul , move v1 - v0 , 2  decode:( move 5 , 9 ; move 4 , 0 - 4 ) 
[19195] c:0 is:( move ua + ul , 3 ; move ua + ul , ua - 2 )  decode:( move ua + ul , 9 ; move ua , 2 ) 
[19196] c:0 is:( move 0 - ua , 3 ; move ul - ua , ua * ua )  decode:( move ua , 6 ; move ua - ul , 5 ) 
[19197] c:0 is:( move ua + 2 , ua * ua ; move 2 - ua , ul )  decode:( move 4 , ua * ua ; move 4 , 2 ) 
[19198] c:0 is:( move ua + ul , 3 ; move 2 + ua , ua * ua )  decode:( move ua + ul , 3 ; move 9 , 5 ) 
[19199] c:0 is:( move ua + ul , 0 ; move ua + ul , ua / 3 )  decode:( move ua + ul , 0 ; move 8 , 2 ) 
[19200] c:0 is:( move 3 - ua , 0 ; move ul - ua , ua * ua )  decode:( move 3 , ua / 2 ; move 5 , ua ) 
[19201] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua , 3 )  decode:loop 0 , 3 , move ua + ul , v0 + 4 
[19202] c:0 is:( move ua + ul , 2 / ua ; move ua + ul , 2 )  decode:( move 8 , 2 / 9 ; move ua , 2 ) 
[19203] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ul , 0 )  decode:( move 4 , 3 ; move 5 , v0 + 2 ) 
[19204] c:0 is:( move ua + 3 , 2 ; move ul - ua , ua - ul )  decode:( move 9 , 2 ; move 4 , 0 - 2 ) 
[19205] c:0 is:( move ua , 2 - 3 ; move ua + ul , ua * ua )  decode:( move ua , 4 + 3 ; move 8 , 8 ) 
[19206] c:0 is:( move 4 + ul , ua * ua ; move 0 - ua , ul )  decode:( move 5 , 9 ; move ua , 0 - 4 ) 
[19207] c:0 is:( move 0 , ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 3 , v0 + 9 
[19208] c:0 is:( loop 0 , 4 , move 2 , v0 ; move ua , v0 )  decode:( move 4 , 0 ; move ua , 9 ) 
[19209] c:0 is:( loop 0 , 4 , move v0 , v0 ; move ua , 2 )  decode:( move 3 - ua , 3 ; move ua , 5 ) 
[19210] c:0 is:( move ua - ul , ua * ua ; move 2 - ua , 2 )  decode:( move 5 , ua * ua ; move 4 , 2 ) 
[19211] c:0 is:loop 0 , 3 , ( move ua , 3 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[19212] c:0 is:( move 0 - ua , ua - ul ; move ua , ul / 2 )  decode:( move ua , 9 ; move ua , 0 - 9 ) 
[19213] c:0 is:( move ua , 0 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua - v0 , 0 - 9 
[19214] c:0 is:( move ua , 0 - 4 ; move ua - ul , ua * ua )  decode:( move 5 , 4 ; move ua , 4 / 3 ) 
[19215] c:0 is:( move ua + ul , ul ; move ua + 2 , ul - 3 )  decode:( move 8 , ua / 3 ; move ua , 2 ) 
[19216] c:0 is:( move 3 , ua * ua ; move ua + 2 , ua * ua )  decode:( move 3 , 8 ; move ua + 2 , 8 ) 
[19217] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 2 , ul )  decode:loop 0 , 4 , move ua - 4 , 3 / 2 
[19218] c:0 is:( move ua + ul , 0 ; move ua - ul , ua / 3 )  decode:( move ua + ul , 0 ; move 5 , 2 ) 
[19219] c:0 is:loop 0 , 3 , ( move 3 , ua ; move v0 , v0 )  decode:( move ua , 0 ; move ua - 2 , ul ) 
[19220] c:0 is:loop 0 , 3 , ( move 2 , ul ; move v0 , v0 )  decode:loop 0 , 3 , move 3 , 2 
[19221] c:0 is:( move ua + 4 , 0 - ul ; move ul + ul , ul )  decode:loop 0 , 4 , move 4 - ua , ul / 3 
[19222] c:0 is:( move ua , ua / 2 ; move ua + 2 , ua * ua )  decode:( move 7 , ua / 2 ; move 9 , ua ) 
[19223] c:0 is:( move ua , ul - 2 ; move ua + ul , ua - 3 )  decode:( move ua , 2 - 9 ; move ua , 3 ) 
[19224] c:0 is:( move ua + ul , 2 ; move ua + ul , ua - 4 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[19225] c:0 is:( move ua + ul , ua - 2 ; move 3 , ua * ua )  decode:( move 3 , 9 ; move ua , 3 * 5 ) 
[19226] c:0 is:( loop 0 , 3 , move 3 , v0 ; move ua , v0 )  decode:loop 0 , 3 , move ua - v0 , 0 - 9 
[19227] c:0 is:( move ua , 2 ; loop 0 , 4 , move v0 , v0 )  decode:( move ua + ul , 2 ; move ua , 9 ) 
[19228] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 2 , v0 )  decode:/ loop 0 , 3 , move 3 , 2 0 / 2 
[19229] c:0 is:( loop 0 , 4 , move v0 , v0 ; move 2 , ul )  decode:( move 4 , 4 ; move 3 , 3 ) 
[19230] c:0 is:( move ua - ul , 0 ; move ua + ul , ua / 4 )  decode:loop 0 , 2 , move ua , v0 + 2 
[19231] c:0 is:( loop 0 , 4 , move 2 , ul ; move v0 , v0 )  decode:loop 0 , 4 , move ua - 4 , 4 / v0 
[19232] c:0 is:( move ua + ul , ul ; move 4 + 2 , ua * ua )  decode:( move 7 , ul ; move ua , ua * ua ) 
[19233] c:0 is:( move 4 , ua - 2 ; move ua + ul , ua * ua )  decode:( move ua , 9 ; move 4 , 4 / 3 ) 
[19234] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 3 , ul )  decode:loop 0 , 3 , move 4 , 3 / v0 
[19235] c:0 is:( move 3 , ua ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 3 , move 3 , v0 * 2 
[19236] c:0 is:( move ua + ul , ua / 3 ; move ua + ul , 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[19237] c:0 is:( loop 0 , 4 , move 3 , v0 ; move v0 , ua )  decode:loop 0 , 4 , move 4 , 3 + 4 / v0 
[19238] c:0 is:( move 0 - ua , ul / 3 ; move ua + ul , ul )  decode:( move ua , 0 - 9 ; move 7 , 4 ) 
[19239] c:0 is:( move ua + ul , 2 ; move ul - ua , 2 / ua )  decode:( move ua , 0 - 9 ; move 9 , 9 ) 
[19240] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , 0 )  decode:( move 3 , 4 + 9 ; move ua , 8 ) 
[19241] c:0 is:loop 0 , 3 , ( move 3 , v0 ; move v0 , ul )  decode:loop 0 , 3 , move 4 , v0 + 8 
[19242] c:0 is:( move ua + ul , ua / 2 ; move 2 - ua , ul )  decode:( move ua - ul , 0 ; move 4 , ua / ) 3 
[19243] c:0 is:( move ua , 2 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 4 , 0 - 2 / v0 
[19244] c:0 is:( move ua - ul , ul ; move ua + 3 , 3 - ua )  decode:( move 9 , ul ; move ua + 2 , 3 ) 
[19245] c:0 is:( move ul , 2 ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 3 , move 4 - ua , 9 
[19246] c:0 is:( loop 0 , 3 , move ua , 4 ; move v0 , v0 )  decode:loop 0 , 3 , move ua + v0 , 4 
[19247] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua - 2 , v0 + 9 
[19248] c:0 is:( move ua , ul - 3 ; move 2 - ua , ua * ua )  decode:( move 4 , 6 ; move ua , 4 / 3 ) 
[19249] c:0 is:( move ua + ul , 2 ; move ua + ul , ua / 3 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[19250] c:0 is:( move ua + ul , 3 ; move ua + ul , ua - 4 )  decode:loop 0 , 3 , move ua , 3 + v0 
[19251] c:0 is:( move ua + ul , 4 ; move ua - ul , ua - 2 )  decode:( move ul - ua , 2 ; move 8 , 2 ) 
[19252] c:0 is:( move ua , ua - 4 ; move ua - 2 , ua * ua )  decode:( move 4 , ul ; move ua , 4 / 3 ) 
[19253] c:0 is:( move ua + ul , 2 - 3 ; move ul - ua , ul )  decode:( move 5 , 0 ; move 8 , ua / 3 ) 
[19254] c:0 is:loop 0 , 3 , ( move 3 , ul ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , 2 / v0 
[19255] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 3 , v0 )  decode:loop 0 , 4 , move 3 , 3 + v0 
[19256] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ul , 0 )  decode:loop 0 , 4 , move 3 + v0 , ua * ua 
[19257] c:0 is:( loop 0 , 3 , move 4 , v0 ; move ua , v0 )  decode:loop 0 , 4 , move 4 , v0 + 9 
[19258] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 , 2 )  decode:loop 0 , 3 , move 3 , v0 + 2 
[19259] c:0 is:( move 0 - ua , ua * ua ; move ua , ua / 4 )  decode:loop 0 , 2 , move ua - v0 , ua / 8 
[19260] c:0 is:( loop 0 , 5 , move ua , 2 ; move v0 , v0 )  decode:loop 0 , 4 , move ua + ul , 4 + v0 
[19261] c:0 is:loop 0 , 3 , ( move v0 , ua ; move 4 , v0 )  decode:( move 4 + 3 , 0 ; move ua , 2 ) 
[19262] c:0 is:loop 0 , ul , loop 1 , 5 , move v0 - v1 , 4  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[19263] c:0 is:( move ua + 4 , ua - ul ; move 2 - ua , ul )  decode:( move 4 , 0 ; move ua + 4 , ul ) 
[19264] c:0 is:( move ul - ua , 0 - 4 ; move ul - ua , ul )  decode:( move 5 , 2 - 3 ; move 5 , ul ) 
[19265] c:0 is:loop 0 , 3 , ( move 3 , v0 ; move ul , v0 )  decode:loop 0 , 4 , move 3 , v0 v0 
[19266] c:0 is:( loop 0 , 5 , move v0 , 2 ; move v0 , ua )  decode:( move 5 , 8 ; move 8 , 2 ) 
[19267] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua , 2 )  decode:loop 0 , 3 , move 0 - 4 , 0 - v0 
[19268] c:0 is:( move 0 - ua , ul / 2 ; move ul - ua , ul )  decode:( move ua , 0 - 9 ; move 5 , ul ) 
[19269] c:0 is:( move ua , 3 ; loop 0 , 4 , move v0 , v0 )  decode:( move ua + ul , 3 ; move 3 , 4 ) 
[19270] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 3 , v0 )  decode:loop 0 , 4 , move 3 , ua / ua ua 
[19271] c:0 is:( move 2 , ul ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 4 , move 2 , 4 0 / 2 / 3 
[19272] c:0 is:( loop 0 , 3 , move v0 , v0 ; move ua , 4 )  decode:( move 2 , 9 ; move ua , 4 / 3 ) 
[19273] c:0 is:( move ua - ul , 2 - 3 ; move ua , ua * ua )  decode:loop 0 , 2 , move ul - ua , ua * ua 
[19274] c:0 is:( loop 0 , 4 , move v0 , v0 ; move ua , 3 )  decode:( move 3 , 6 ; move ua , 0 - 3 ) 
[19275] c:0 is:( loop 0 , 5 , move v0 , 2 ; move ua , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 - 5 
[19276] c:0 is:( move 2 - 3 , ul ; move ua + ul , ua * ua )  decode:( move ul , 4 ; move ua + ul , 5 ) 
[19277] c:0 is:( loop 0 , 3 , move ul , v0 ; move 3 , v0 )  decode:( move 3 , ul ; move 3 , 4 ) 
[19278] c:0 is:( move ul - ua , 2 ; move 3 - ua , ua * ua )  decode:( move ul - ua , 2 ; move 3 , 8 ) 
[19279] c:0 is:( move ua , 2 - 3 ; move ua - ul , ua * ua )  decode:( move ua , 2 - 3 ; move 5 , 8 ) 
[19280] c:0 is:( loop 0 , 5 , move v0 , 3 ; move ua , v0 )  decode:loop 0 , 4 , move 0 - 3 , v0 - 3 
[19281] c:0 is:loop 0 , 3 , ( move 4 , ul ; move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , 2 / v0 
[19282] c:0 is:( move ua , ua / 4 ; move ua + 2 , ua * ua )  decode:( move ua , ua / 4 ; move 9 , ua ) 
[19283] c:0 is:( move 3 - ua , ua - ul ; move ua , 4 + ul )  decode:( move 3 , 3 ; move ua , 5 / 4 ) 
[19284] c:0 is:loop 0 , 2 , ( move 0 - ua , ua ; move 4 , 2 )  decode:( move 4 + 4 , 2 ; move ua , ul ) 
[19285] c:0 is:( move ua + ul , ul / ua ; move ua + 2 , 4 )  decode:( move ua + ul , ul ; move 7 , 4 ) 
[19286] c:0 is:( move ua + ul , 4 / ua ; move ua + ul , 2 )  decode:( move ua + ul , 4 / move ua , 2 ) 
[19287] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ua , 2 )  decode:( move 9 , 4 / ua ; move ua , 4 ) 
[19288] c:0 is:( loop 0 , 5 , move 2 , ul ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[19289] c:0 is:( move ua + ul , ua * ua ; move ua , 3 * 3 )  decode:( move ua + ul , 3 + move ua , 9 ) 
[19290] c:0 is:( move ua , ua * ua ; move ua + 4 , ua - 4 )  decode:( move ua + 3 , ul ; move ua , 4 ) 
[19291] c:0 is:( move ua + ul , ua / 4 ; move ua + ul , 2 )  decode:( move ua + ul , 3 + 4 , 4 4 ) 
[19292] c:0 is:( move ul - ua , ua - 2 ; move ul - 3 , ul )  decode:( move ua , 4 * 5 ; move 2 , ul ) 
[19293] c:0 is:( loop 0 , 4 , move v0 , v0 ; move 3 , ul )  decode:loop 0 , 3 , move 0 - 3 , 7 - v0 
[19294] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ul , 2 )  decode:loop 0 , 3 , move 3 - ua , 4 / v0 
[19295] c:0 is:( move ul - ua , 0 ; move ua - ul , 4 / ua )  decode:( move 5 , 0 ; move ul - ua , 7 ) 
[19296] c:0 is:( move ua + ul , ua ; move ua - ul , 4 + 4 )  decode:( move ua + ul , 0 ; move 5 , 8 ) 
[19297] c:0 is:loop 0 , 3 , ( move ul , 4 ; move v0 , v0 )  decode:loop 0 , 3 , move 2 , 0 - 9 
[19298] c:0 is:( move 3 , ul ; loop 0 , 4 , move v0 , v0 )  decode:( move 4 , ul ; move 3 , 5 / 2 ) 
[19299] c:0 is:( loop 0 , 5 , move v0 , ul ; move v0 , 2 )  decode:loop 0 , 3 , move 0 - 4 , 5 / v0 
[19300] c:0 is:( loop 0 , 5 , move ul , v0 ; move 2 , v0 )  decode:loop 0 , 3 , move 2 , 4 
[19301] c:0 is:( move ua , ua * ua ; move ul - ua , 4 + 3 )  decode:( move ua , ua * ua ; move 5 , 4 ) 
[19302] c:0 is:loop 0 , 3 , ( move v0 , ul ; move v0 , 4 )  decode:( move 3 , 4 * 3 ; move 2 , 4 ) 
[19303] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 4 , v0 )  decode:loop 0 , 3 , move ua - 2 , 2 * v0 
[19304] c:0 is:( loop 0 , 6 , move v0 , v0 ; move 2 , ua )  decode:( move 5 , 9 ; move 8 , ua * ua ) 
[19305] c:0 is:( move ua , 3 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , 3 * v0 
[19306] c:0 is:( loop 0 , 5 , move v0 , v0 ; move 2 , ul )  decode:loop 0 , 4 , move 3 , ua / v0 - 4 
[19307] c:0 is:( move 2 , ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 + 9 
[19308] c:0 is:( move 4 + 3 , ua ; move ul - ua , ua - ul )  decode:( move ua , 0 ; move 5 , 0 - 2 ) 
[19309] c:0 is:( move 2 , ua - ul ; move ua + ul , 3 / ua )  decode:( move ua , 9 ; move 4 , 6 ) 
[19310] c:0 is:( loop 0 , 4 , move 3 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move ua - 2 , v0 * 4 
[19311] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ul , 4 )  decode:( move 3 , 0 - 2 ; move 3 , 3 ) 
[19312] c:0 is:loop 0 , 3 , ( move v0 , 4 ; move ul , v0 )  decode:loop 0 , 4 , move v0 , 4 
[19313] c:0 is:( loop 0 , 6 , move 2 , v0 ; move v0 , ua )  decode:loop 0 , 4 , move 4 , 4 * 3 - v0 
[19314] c:0 is:( move ua + ul , 2 ; move ua - ul , ul - 4 )  decode:( move ua , 0 - 3 ; move 9 , 3 ) 
[19315] c:0 is:( loop 0 , 5 , move v0 , ul ; move 2 , v0 )  decode:loop 0 , 4 , move 3 , v0 - 5 
[19316] c:0 is:loop 0 , 3 , ( move v0 , 4 ; move v0 , ul )  decode:( move 2 , 9 + 4 ; move 4 , 9 ) 
[19317] c:0 is:( loop 0 , 6 , move v0 , 2 ; move v0 , ua )  decode:( move 9 , 9 ; move ua + ul , 9 ) 
[19318] c:0 is:( move ul - ua , ua * ua ; move 3 + 3 , ul )  decode:( move ul - ua , 9 ; move ua , ul ) 
[19319] c:0 is:( move ua , 4 ; loop 0 , 4 , move v0 , v0 )  decode:( move ua + ul , 4 ; move 3 , 4 ) 
[19320] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 4 , ul )  decode:loop 0 , 3 , move 5 , v0 + ul 
[19321] c:0 is:( move ua - ul , 2 ; move ul - ua , 2 / ua )  decode:( move 5 , 0 - 2 ; move 5 , 9 ) 
[19322] c:0 is:( move ua + ul , ul ; move ua / 4 , 0 - ul )  decode:( move 0 - 4 , 0 ; move 2 , ul ) 
[19323] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 4 , v0 )  decode:loop 0 , 4 , move 4 , v0 + 3 
[19324] c:0 is:( loop 0 , 5 , move v0 , 2 ; move v0 , ul )  decode:loop 0 , 4 , move ua - 3 , 0 - v0 
[19325] c:0 is:( loop 0 , 4 , move v0 , 4 ; move ua , v0 )  decode:loop 0 , 4 , move 3 , 0 - 3 / v0 
[19326] c:0 is:( move 4 - ua , 3 ; move ua + ul , ua * ua )  decode:( move 2 , 5 ; move ua + ul , 5 ) 
[19327] c:0 is:( loop 0 , 5 , move v0 , 3 ; move v0 , ua )  decode:( move 3 , 2 - 9 ; move ua , 2 ) 
[19328] c:0 is:( loop 0 , 6 , move 2 , v0 ; move ua , v0 )  decode:( move 4 , 7 ; move ua + 2 , 7 ) 
[19329] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua , 3 )  decode:loop 0 , 3 , move ua - v0 , 4 * 4 
[19330] c:0 is:( move ua - ul , 3 ; move ua + ua - ul , 4 )  decode:( move 5 , 3 ; move ua + 5 , 4 ) 
[19331] c:0 is:( move ul , ua / 3 ; move ua + 2 , ua * ua )  decode:( move ul , 3 ; move ua + 2 , 4 ) 
[19332] c:0 is:( move ua , ul / ua ; move ua - ul , 0 - 4 )  decode:loop 0 , 3 , move 3 + v0 , 0 - 3 
[19333] c:0 is:( loop 0 , 5 , move 3 , v0 ; move v0 , ul )  decode:( move ua , ua / 4 ; move 7 , 4 ) 
[19334] c:0 is:( loop 0 , 6 , move ua , 3 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 9 , 0 - 0 4 0 2 + 
[19335] c:0 is:( move ua + ul , ul / 3 ; move 2 - ua , ul )  decode:loop 0 , 4 , move 3 , v0 - ua 0 
[19336] c:0 is:( move 4 - ua , 2 / ua ; move ua + ul , ul )  decode:( move 2 , 0 - 4 ; move 7 , 4 ) 
[19337] c:0 is:( move ua + 2 , ua / 4 ; move ul - ua , ul )  decode:( move 8 , 3 / 2 ; move ua , 4 ) 
[19338] c:0 is:( move ua , ul / 4 ; move ua + 2 , ua * ua )  decode:( move 9 , 2 ; move ua , 4 / 4 ) 
[19339] c:0 is:( move ua + ul , 3 ; move ua + ul , ua / 4 )  decode:( move ua + ul , 3 ; move ua , 8 ) 
[19340] c:0 is:( move 0 - ua , ul / 4 ; move ul - ua , ul )  decode:( move ua , 4 * 4 ; move 5 , ul ) 
[19341] c:0 is:( loop 0 , 5 , move v0 , 3 ; move v0 , ul )  decode:( move 4 , 4 / 3 ; move 5 , 7 ) 
[19342] c:0 is:( loop 0 , 6 , move ul , v0 ; move 2 , v0 )  decode:loop 0 , 4 , move 2 , 0 - v0 
[19343] c:0 is:( loop 0 , 5 , move 3 , ul ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , 3 * v0 
[19344] c:0 is:( move 3 - ua , ua * ua ; move ua - ul , 4 )  decode:( move 3 , 5 ; move ua - ul , 4 ) 
[19345] c:0 is:( move ua + ul , 2 / 4 ; move ua , ua * ua )  decode:( move ua , 9 + 4 ; move ua , 9 ) 
[19346] c:0 is:( move ua - ul , 4 / ua ; move ua + ul , 2 )  decode:( move 5 , 4 / ua ; move 7 , 2 ) 
[19347] c:0 is:( move 3 - ua , ua * ua ; move ul - 3 , ul )  decode:( move 3 , 5 ; move 2 , ul ) 
[19348] c:0 is:( loop 0 , 6 , move 3 , v0 ; move v0 , ua )  decode:loop 0 , 4 , move v0 * 3 , 0 - 9 
[19349] c:0 is:( move ua - 4 , ua - ul ; move ua + ul , 4 )  decode:( move 3 , 0 - 2 ; move ua , 4 ) 
[19350] c:0 is:( move ua + ul , 2 ; move ul - ua , 4 / ua )  decode:( move ua + ul , 2 ; move 5 , 7 ) 
[19351] c:0 is:( move ua + ul , 4 * 3 ; move ua , ua * ua )  decode:( move ua + ul , 3 ; move ua , 8 ) 
[19352] c:0 is:( loop 0 , 6 , move v0 , 2 ; move ul , v0 )  decode:loop 0 , 3 , move v0 - ua , 0 - 9 
[19353] c:0 is:loop 0 , ul , loop 1 , 7 , move v0 - v1 , 4  decode:loop 0 , 4 , move ua - v0 , 0 - 3 
[19354] c:0 is:( move ua + ul , ul / 3 ; move 2 , ua * ua )  decode:( move 2 , 2 ; move ua + ul , 2 ) 
[19355] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ul , 2 )  decode:loop 0 , 4 , move ua - 3 , v0 - 4 
[19356] c:0 is:( loop 0 , 6 , move 2 , v0 ; move ul , v0 )  decode:loop 0 , 4 , move 3 , 3 * 8 
[19357] c:0 is:( move ua , 4 * 3 ; move ua + ul , ua * ua )  decode:( move ua , 9 / 3 ; move ua , 8 ) 
[19358] c:0 is:( move ua , 0 ; move ua , 2 ; move 3 , 3 + 4 )  decode:loop 0 , 3 , move ua - ul , 0 - v0 
[19359] c:0 is:( loop 0 , 5 , move ul , 3 ; move v0 , v0 )  decode:( move 2 , 4 * 4 ; move 4 , 2 ) 
[19360] c:0 is:( move 4 , ul ; loop 0 , 4 , move v0 , v0 )  decode:( move 5 , ul ; move 4 , 9 ) 
[19361] c:0 is:( move ua + 2 , ul / 3 ; move ul - ua , ul )  decode:( move 5 , 2 / ua ; move ua , 4 ) 
[19362] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 , 4 )  decode:loop 0 , 4 , move 4 - ua , 4 
[19363] c:0 is:( loop 0 , 6 , move 2 , ul ; move v0 , v0 )  decode:( move 4 , 9 ; move 9 , 0 - 4 ) 
[19364] c:0 is:( move ua , 3 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 3 + v0 , 9 
[19365] c:0 is:loop 0 , 3 , ( move ua + 4 , ul ; move 0 , 2 )  decode:loop 0 , 3 , move ua + 3 , 4 * 4 
[19366] c:0 is:( move ul - ua , ul ; move ua + ul , 3 - 4 )  decode:( move ua + ul , 0 ; move 5 , ul ) 
[19367] c:0 is:( loop 0 , 5 , move 4 , v0 ; move ua , v0 )  decode:loop 0 , 4 , move ua , 0 + v0 * 2 
[19368] c:0 is:( move ua , 4 ; loop 0 , 5 , move v0 , v0 )  decode:( move ua + ul , 4 ; move ua , 7 ) 
[19369] c:0 is:( move ul , 2 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 4 , 0 - 5 / v0 
[19370] c:0 is:( loop 0 , 6 , move v0 , 3 ; move v0 , ua )  decode:( move 4 , 9 / 4 ; move ua , 3 ) 
[19371] c:0 is:( move 0 - ua , ul / 4 ; move ua - ul , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[19372] c:0 is:( loop 0 , 4 , move v0 , v0 ; move 4 , ul )  decode:( move 3 , 6 ; move 4 , ul ) 
[19373] c:0 is:( loop 0 , 5 , move v0 , v0 ; move 3 , ul )  decode:loop 0 , 4 , move 3 , 3 * 4 - v0 
[19374] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua , 4 )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[19375] c:0 is:( move 4 + 3 , ua - ul ; move ul , ua - ul )  decode:( move ul , 2 ; move ua , ul / ua ) 
[19376] c:0 is:( move ua - 3 , ua - ul ; move 4 , ua * ua )  decode:( move 3 , 2 - 3 ; move 4 , 5 ) 
[19377] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ua , 3 )  decode:loop 0 , 3 , move ua , v0 - 4 
[19378] c:0 is:( loop 0 , 6 , move 2 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[19379] c:0 is:( move ua + 2 , ul / 4 ; move ua , ua * ua )  decode:( move ua + ul , 2 ; move 8 , 8 ) 
[19380] c:0 is:( loop 0 , 6 , move 3 , v0 ; move ua , v0 )  decode:loop 0 , 4 , move v0 - ua , 5 / 4 
[19381] c:0 is:( loop 0 , 6 , move v0 , 2 ; move v0 , ul )  decode:loop 0 , 4 , move 0 - 5 , 4 
[19382] c:0 is:( move ua , ua - ul ; move ua + 4 , ul - 4 )  decode:( move 9 , ul - 9 ; move 9 , 3 ) 
[19383] c:0 is:( move ua - ul , 2 / ua ; move ul + ua , 4 )  decode:( move 5 , 2 / 6 ; move 8 , 4 ) 
[19384] c:0 is:( move ua + ul , 4 / ua ; move ua - ul , 2 )  decode:( move ua + ul , 4 / move 5 , 2 ) 
[19385] c:0 is:( loop 0 , 6 , move v0 , 3 ; move v0 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[19386] c:0 is:( move ul - ua , 4 ; move ul - ua , 2 / ua )  decode:( move 5 , ul + 2 ; move 4 , 7 ) 
[19387] c:0 is:( move ua , 0 - 4 ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 3 , move 0 - 4 , 0 - 4 0 0 0 4 + 
[19388] c:0 is:( move ul - ua , ua * ua ; move 4 + 4 , ul )  decode:( move ua + ul , 5 ; move ua , 2 ) 
[19389] c:0 is:( move ua - ul , 2 / ua ; move ul - ua , 4 )  decode:( move 5 , 2 / 6 ; move 5 , ul ) 
[19390] c:0 is:( loop 0 , 6 , move v0 , 4 ; move ua , v0 )  decode:loop 0 , 4 , move ua , 0 - v0 / ua 
[19391] c:0 is:( move ul - ua , 3 ; move ua + ul , ua / 4 )  decode:( move 5 , 6 ; move ua + ul , 8 ) 
[19392] c:0 is:( move ua , ua / 2 ; move ua + ul , ua / 4 )  decode:loop 0 , 2 , move ua + v0 , ua / 4 
[19393] c:0 is:( move ua / 2 , 4 ; move ul - ua , ul + ul )  decode:( move 3 , 4 ; move ua - ul , 2 ) 
[19394] c:0 is:( move 3 , ua / 4 ; move ua + ul , ua * ua )  decode:( move 3 , ua / 4 ; move 8 , 8 ) 
[19395] c:0 is:( move 4 , ua * ua ; move ul - ua + 4 , ul )  decode:( move 4 , 9 ; move ua + 3 , ul ) 
[19396] c:0 is:( move ua - ul , 2 / ua ; move 4 - ua , ul )  decode:( move 5 , ul / ua ; move 2 , 4 ) 
[19397] c:0 is:( move ul - ua , ua - ul ; move ua / 4 , 2 )  decode:( move ul , 0 - 2 ; move ua , 5 ) 
[19398] c:0 is:( move ua , 3 / 4 ; move ua + ul , ua * ua )  decode:( move ua , 7 ; move ua + ul , 5 ) 
[19399] c:0 is:( move ua - 3 , 0 ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 3 , move ua - 3 , v0 / 3 
[19400] c:0 is:( move ua + ul , 4 * 4 ; move ua , ua * ua )  decode:( move ua , 4 ; move ua , 4 / 3 ) 
[19401] c:0 is:( move 2 , ul / ua ; move ua - ul , ua - 4 )  decode:( move 2 , ul / 4 ; move ua , 4 ) 
[19402] c:0 is:( move ua , 4 * 3 ; move ul - ua , ua * ua )  decode:loop 0 , 2 , move ua - ul , 4 / 5 
[19403] c:0 is:( move ua , 4 / ua ; move ua + ul , ua - 4 )  decode:( move ua + ul , 6 ; move ua , 4 ) 
[19404] c:0 is:( move 4 + ul , ul / ua ; move ul - ua , 2 )  decode:( move 5 , ul / 4 ; move 5 , 2 ) 
[19405] c:0 is:( move ul - ua , 3 / ua + 4 ; move ua , ul )  decode:( move 5 , 4 * 4 ; move ua , 4 ) 
[19406] c:0 is:( move ua + ul , 3 ; move ul - ua , ua / 4 )  decode:( move ua + ul , 3 ; move 5 , 8 ) 
[19407] c:0 is:( move ul , 3 / ua ; move ua + ul , 4 + ul )  decode:( move ul , 2 / move ua , ul ) 
[19408] c:0 is:( move ua / 4 , ua * ua ; move ua , ul - 2 )  decode:( move ua , 4 ; move 2 , ul ) 
[19409] c:0 is:( move ua , 4 / 3 ; move ua + ul , ua * ua )  decode:( move ua , 0 ; move ua , 3 / 2 ) 
[19410] c:0 is:( loop 0 , 5 , move 4 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move 2 + 4 , v0 * 1 
[19411] c:0 is:( loop 0 , 5 , move v0 , v0 ; move 4 , ul )  decode:( move 5 , ua / 4 ; move ua , 4 ) 
[19412] c:0 is:( loop 0 , 6 , move v0 , ul ; move v0 , 3 )  decode:loop 0 , 4 , move 0 - 4 , 9 / v0 
[19413] c:0 is:( move ua + ul , 2 / 4 ; move ul - ua , ul )  decode:( move ua + ul , 3 + move ua , ul ) 
[19414] c:0 is:( loop 0 , 5 , move v0 , 4 ; move v0 , ul )  decode:( move 4 , 4 / 3 ; move 8 , 4 ) 
[19415] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , 3 )  decode:( move 3 , 0 - 4 ; move ua , 9 ) 
[19416] c:0 is:( move 4 , ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 4 , 0 - 9 
[19417] c:0 is:( move 3 , ua - ul ; move ua + ul , ul / 3 )  decode:( move 4 , ul / move ua , 2 / ua ) 
[19418] c:0 is:( loop 0 , 6 , move ul , v0 ; move 3 , v0 )  decode:loop 0 , 4 , move 2 , 0 - v0 / 2 
[19419] c:0 is:( loop 0 , 6 , move 4 , v0 ; move ua , v0 )  decode:loop 0 , 4 , move ua , 0 - 4 * v0 
[19420] c:0 is:( loop 0 , 5 , move ul , v0 ; move 4 , v0 )  decode:( move 2 , 4 + ua ; move 5 , 4 ) 
[19421] c:0 is:( move ua , ul / 3 ; move ua + ul , ua - 4 )  decode:( move ua + ul , 4 * move ua , 4 ) 
[19422] c:0 is:( move ua + ul , ul / 2 ; move 2 , ul / ua )  decode:( move 4 , 2 ; move ua , 4 + 3 ) 
[19423] c:0 is:( move 0 - 3 , ul ; loop 0 , 2 , move ua , 4 )  decode:( move 3 + ua , 5 ; move ua , 4 ) 
[19424] c:0 is:( move ua - ul , ul / 4 ; move ua + ul , 2 )  decode:( move 5 , ul / 4 ; move 7 , 2 ) 
[19425] c:0 is:( move ul - ua , 3 / ua ; move 3 , ua * ua )  decode:( move 5 , 0 - 9 ; move 3 , 5 ) 
[19426] c:0 is:( move ua + ul , ua / 2 ; move ua / 3 , ul )  decode:( move 8 , 0 ; move 2 , ul ) 
[19427] c:0 is:( move ua , 4 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua + v0 , ua * ua 
[19428] c:0 is:( loop 0 , 6 , move 3 , v0 ; move ul , v0 )  decode:loop 0 , 4 , move ua - 2 , 0 - 0 5 
[19429] c:0 is:( move 4 , ua * ua ; move 4 - ua , ua * ua )  decode:( move 4 , ua * ua ; move 2 , 5 ) 
[19430] c:0 is:( move ul - ua , 4 * 3 ; move ua + ul , ul )  decode:( move 5 , 9 * 5 ; move ua , ua ) 
[19431] c:0 is:( move 2 - ua , ul / 4 ; move ua + ul , ul )  decode:( move 4 , 4 * 4 ; move 7 , 4 ) 
[19432] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ua , 4 )  decode:loop 0 , 4 , move 4 + v0 , 0 - 4 
[19433] c:0 is:( move ul - ua , ua * ua ; move 4 + ul , 4 )  decode:( move 5 , ua * ua ; move 5 , 4 ) 
[19434] c:0 is:( move ul , 2 / ua * ua ; move ua + ul , 4 )  decode:( move ua , ul ; move ul , 4 ) 
[19435] c:0 is:( move 4 , ua - ul ; move ul - ua , ua / 3 )  decode:( move 4 , 2 / 5 ; move 4 , ul ) 
[19436] c:0 is:( loop 0 , 6 , move ul , 4 ; move v0 , v0 )  decode:( move 5 , 0 ; move 3 , 0 - 4 ) 
[19437] c:0 is:( move ua + ul , ul / ua ; move ua / 4 , 2 )  decode:( move ua , ul / 6 ; move ul , 2 ) 
[19438] c:0 is:( move ul - ua , ul ; move 4 + ul , ul - 4 )  decode:( move 3 , 4 / move ua , ul / 4 ) 
[19439] c:0 is:( loop 0 , 6 , move ul , v0 ; move 4 , v0 )  decode:( move 3 , ul ; move ua - ul , 9 ) 
[19440] c:0 is:( move ua + ul , ul / 4 ; move ua + ul , 4 )  decode:( move ua + ul , ul ; move 7 , 4 ) 
[19441] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , 4 )  decode:loop 0 , 4 , move 2 , v0 - 3 
[19442] c:0 is:( move ua + ul , ul / 3 ; move ul - ua , 4 )  decode:( move ua , 3 / 2 ; move 5 , ul ) 
[19443] c:0 is:( move 3 + 2 , ua ; loop 0 , 3 , move ua , 4 )  decode:loop 0 , 4 , move ua , 4 
[19444] c:0 is:( move ua - ul , 4 / ua ; move ua , 2 / ua )  decode:( move ua , 4 ; move ua - ul , 9 ) 
[19445] c:0 is:( move ua , 4 / 3 ; move ua - ul , ua - ul )  decode:( move ua , 0 - 4 ; move ua , ul ) 
[19446] c:0 is:( move 4 , ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua - v0 , 0 - 9 
[19447] c:0 is:( move ua + 3 , ul / 4 ; move ul - ua , ul )  decode:( move 9 , ul / 4 ; move 5 , 4 ) 
[19448] c:0 is:( move ul - ua , ul ; move ua - ul , 2 / 4 )  decode:( move 5 , ul - 9 ; move 5 , 9 ) 
[19449] c:0 is:( move ul , ua - 4 ; move ua - ul , ua / 3 )  decode:( move ul , 0 - 4 ; move 5 , 2 ) 
[19450] c:0 is:( loop 0 , 6 , move 4 , v0 ; move ul , v0 )  decode:loop 0 , 4 , move ua , 0 - v0 + 4 
[19451] c:0 is:( move 3 + 3 , 3 ; move ua , 3 ; move ua , 2 )  decode:loop 0 , 3 , move ua , v0 + 2 
[19452] c:0 is:( move ua + ul , 3 / 4 ; move ul - ua , ul )  decode:( move 0 - ua , 4 ; move 5 , ul ) 
[19453] c:0 is:( move ua + ul , ua / 4 ; move ua - ul , 4 )  decode:( move ua + ul , 3 / move 5 , 4 ) 
[19454] c:0 is:( move 3 , ua / 4 ; move ua - ul , ua * ua )  decode:( move 3 , ua / 4 ; move 5 , 8 ) 
[19455] c:0 is:( move 4 , 4 / ua ; move ua + ul , ua * ua )  decode:( move 4 , 3 / 2 ; move 7 , 8 ) 
[19456] c:0 is:( move ul - ua , ul / 3 ; move 3 - ua , ul )  decode:( move 5 , 0 - 4 ; move 3 , ul ) 
[19457] c:0 is:( move ua , ul / 2 ; move ua - ul , ua / 3 )  decode:( move ua , 4 / ua ; move 5 , 2 ) 
[19458] c:0 is:( move ul - ua , ul / 4 ; move ul - ua , 2 )  decode:( move 5 , 4 * 4 ; move 5 , 2 ) 
[19459] c:0 is:( loop 0 , 6 , move v0 , 4 ; move v0 , ul )  decode:loop 0 , 4 , move ua - 2 , v0 - 4 
[19460] c:0 is:( move 2 , 4 ; move ua - 3 , 2 ; move ua , 2 )  decode:( move 4 , 5 ; move ua , 0 - 4 ) 
[19461] c:0 is:( move ul , 0 ; move 3 , 2 ; move 3 , ua - 4 )  decode:loop 0 , 3 , move 4 - ua , 2 - v0 
[19462] c:0 is:( move ul - ua , ul / 2 ; move ua , ul / 2 )  decode:( move ua , 4 ; move 5 , 9 ) 
[19463] c:0 is:( move ua + 4 , 4 / ua ; move ul - ua , ul )  decode:( move ua + 4 , 3 + move 4 , 4 ) 
[19464] c:0 is:( move ua - 4 , ul / 2 ; move ul - ua , ul )  decode:( move 4 - ua , 4 ; move 5 , ul ) 
[19465] c:0 is:( move 4 + ul , ul / ua ; move ua - ul , 4 )  decode:( move 5 , ul ; move 5 , 0 - 4 ) 
[19466] c:0 is:( move 0 , ua * ua ; loop 0 , 5 , move 4 , 2 )  decode:loop 0 , 4 , move ua - 2 , 0 - 4 
[19467] c:0 is:( move 4 + ul , ua ; move ul - ua , ul / 4 )  decode:( move 5 , 4 / ua ; move 5 , 3 ) 
[19468] c:0 is:( loop 0 , 5 , move 2 , 4 ; move ul + ul , 0 )  decode:loop 0 , 4 , move 3 , 0 - v0 * 2 
[19469] c:0 is:( move ul , 2 + 2 ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , 4 / 3 
[19470] c:0 is:( move ua / 2 , ul / 4 ; move ua , ua - ul )  decode:( move 3 , 2 / 3 ; move ua , ul ) 
[19471] c:0 is:( move 0 , ul ; loop 0 , 4 , move 4 + ul , 3 )  decode:loop 0 , 4 , move 4 , 4 * 3 - 3 
[19472] c:0 is:( move ul , ul ; loop 0 , 2 , move 3 + 2 , 4 )  decode:( move 5 , 5 ; move 5 , 4 ) 
[19473] c:0 is:( move ua - ul , 4 * 4 ; move ul - ua , ul )  decode:( move 5 , 4 * 4 ; move 5 , 4 ) 
[19474] c:0 is:loop 0 , 3 , ( move ul - 4 , ua ; move 2 , 2 )  decode:loop 0 , 3 , move v0 + 2 , 4 * 4 
[19475] c:0 is:( move ul - ua , ul ; move 4 - ua , 4 / ua )  decode:( move ul - ua , ul ; move 2 , 7 ) 
[19476] c:0 is:( move ua , 4 / ua ; move ul - ua , ul - 4 )  decode:( move ul - ua , 4 ; move ua , 3 ) 
[19477] c:0 is:( move 4 , ua ; loop 0 , 2 , move 2 - ua , 4 )  decode:loop 0 , 4 , move 3 , v0 * v0 
[19478] c:0 is:( move 4 , 4 / ua ; move ua - ul , ua * ua )  decode:0 loop 0 , 3 , move 3 - ua , 4 / 4 
[19479] c:0 is:( move ul - ua , 4 * 4 ; move ul - ua , ul )  decode:( move 5 , 2 / ua ; move 5 , ul ) 
[19480] c:0 is:loop 0 , 2 , ( move 4 - ua , 3 ; move 2 , ul )  decode:loop 0 , 3 , move 3 , 3 + 4 / v0 
[19481] c:0 is:( move ua - ul , ul / 4 ; move ua + ul , 4 )  decode:( move 5 , ul / 4 ; move 7 , 4 ) 
[19482] c:0 is:( move ua + ul , ul / 4 ; move 4 - ua , ul )  decode:( move 2 , ul / 3 ; move ua , 2 ) 
[19483] c:0 is:( move ua , ul / 4 ; move ua + ul , ua / 3 )  decode:( move ua , ul / 4 ; move 8 , 2 ) 
[19484] c:0 is:( move ul - ua , ul / 4 ; move 3 - ua , ul )  decode:( move 5 , 4 * 4 ; move 3 , ul ) 
[19485] c:0 is:( move ul - ua , 4 / ua ; move ul - ua , 4 )  decode:( move 5 , 5 ; move 5 , 4 ) 
[19486] c:0 is:( move 4 , ua / 4 ; move ua - ul , ua * ua )  decode:( move 4 , 3 / 2 ; move 5 , 5 ) 
[19487] c:0 is:( move ua + ul , ul / ua ; move 3 , ua / 4 )  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[19488] c:0 is:( move ul - ua , ul / 4 ; move ua + ul , 4 )  decode:( move 4 , 4 * 4 ; move ua , ul ) 
[19489] c:0 is:( move ua , ua ; loop 0 , 5 , move 3 , 4 - 0 )  decode:loop 0 , 4 , move 2 - ua , 0 - v0 
[19490] c:0 is:( move ua , 4 + 2 ; loop 0 , 4 , move ua , 3 )  decode:loop 0 , 4 , move v0 - ua , 0 - 3 
[19491] c:0 is:loop 0 , 2 , ( move 4 , 3 + 3 ; move ul , ul )  decode:( move 2 - ua , 9 ; move 5 , 4 ) 
[19492] c:0 is:( move ul - 3 , ul / 4 ; move ul - ua , ul )  decode:( move 2 , 0 - 4 ; move 5 , ul ) 
[19493] c:0 is:( move 9 , ua - ua ; move ua + ul , ua - 4 )  decode:( move 9 , ua / 2 ; move 9 , 4 ) 
[19494] c:0 is:( move ua , 9 + 4 ; move ua + ul , ua * ua )  decode:( move ua , 3 / move ua + ul , 8 ) 
[19495] c:0 is:( move 0 - 3 , 4 ; move 3 , 4 ; move ua , ul )  decode:loop 0 , 3 , move 4 , 3 + 3 / v0 
[19496] c:0 is:( move ul , 0 ; move 3 , ua / 4 ; move 2 , 4 )  decode:loop 0 , 4 , move v0 , v0 * 4 
[19497] c:0 is:( move ul , ul ; loop 0 , 4 , move 3 + 2 , 4 )  decode:loop 0 , 4 , move 5 , 0 - 9 
[19498] c:0 is:( move 4 , ul ; move 3 , ul ; move 0 - 3 , 4 )  decode:loop 0 , 3 , move 3 , ul / v0 
[19499] c:0 is:( loop 0 , 6 , move ua , 4 * 2 ; move ul , 0 )  decode:loop 0 , 4 , move 4 + 3 , ua / 8 
[19500] c:0 is:( move 3 , 3 * 2 ; move 2 , 4 ; move ua , ul )  decode:( move 3 , 9 ; move 2 + ua , 2 ) 
[19501] c:0 is:( move 4 , ua - 2 ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 * 5 
[19502] c:0 is:( move ua , 3 ; loop 0 , 3 , move ul - 3 , 4 )  decode:( move ua + 2 , 3 ; move 2 , 9 ) 
[19503] c:0 is:( move ul - ua , ua / 4 ; move ua , ul / 4 )  decode:( move ua , 5 ; move 5 , 4 / 3 ) 
[19504] c:0 is:( move ua , 4 - 9 ; move ua + ul , ua * ua )  decode:( move ua + ul , 0 ; move 7 , 8 ) 
[19505] c:0 is:( move 9 , ua * ua ; move ua + ul , ua - 4 )  decode:loop 0 , 2 , move 3 + ua , v0 + 4 
[19506] c:0 is:loop 0 , 3 , ( move ul , ul ; move 3 , 2 / 3 )  decode:loop 0 , 3 , move 4 , 3 / 5 
[19507] c:0 is:( move 2 , ul ; move 4 , 4 ; move 2 , 4 + ul )  decode:( move 5 , ua / 2 ; move 3 , 4 ) 
[19508] c:0 is:( move ua , ua ; move 3 , 3 ; move 4 , 4 * 2 )  decode:loop 0 , 4 , move 3 , 0 - 0 * v0 
[19509] c:0 is:( move 4 , ua ; loop 0 , 4 , move 2 , ul / 2 )  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[19510] c:0 is:( move 2 , ul ; loop 1 , 4 , move ua , 3 * 3 )  decode:loop 0 , 4 , move ua , 0 - 9 
[19511] c:0 is:( move 3 , 2 - 4 ; move ul , 3 ; move 3 , ul )  decode:( move 3 , 0 - 4 ; move 3 , 4 ) 
[19512] c:0 is:( move 6 , ul / ua ; move ua + ul , ua / 4 )  decode:( move ua , ul / ua ; move 7 , 8 ) 
[19513] c:0 is:( move 3 , 3 ; move 2 - 4 , ul ; move ua , 4 )  decode:( move 3 , 3 ; move 8 , 5 ) 
[19514] c:0 is:( move 4 , 2 - 3 ; move ul , 4 ; move ua , 3 )  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[19515] c:0 is:( loop 1 , 5 , move ua , 4 ; move ua + 4 , 3 )  decode:loop 0 , 4 , move 4 + 4 , 4 - 4 9 
[19516] c:0 is:( move 4 + ul , ul ; loop 0 , 4 , move 4 , 3 )  decode:loop 0 , 4 , move 4 - v0 , 4 - 3 
[19517] c:0 is:( move ul , 4 + 3 ; loop 0 , 5 , move 3 , ul )  decode:0 0 loop 0 , 4 , move 4 , 2 / 3 
[19518] c:0 is:( move 3 , ua ; move 2 , 4 ; move ua , 4 / 3 )  decode:( move 3 , 0 ; move 9 , ua / 3 ) 
[19519] c:0 is:( move 4 , ua - 4 ; loop 0 , 5 , move 2 , ul )  decode:loop 0 , 4 , move 3 - ua , 0 - 8 
[19520] c:0 is:( move 4 + ul , ua ; loop 0 , 5 , move 3 , 4 )  decode:loop 0 , 4 , move 5 , 0 - 9 
[19521] c:0 is:( move 2 , ul - 4 ; loop 0 , 6 , move ua , 3 )  decode:loop 0 , 4 , move v0 - ua , 3 
[19522] c:0 is:( move 4 , 0 - 4 ; move ul , 4 ; move 4 , ul )  decode:( move 4 , 0 - 4 ; move 5 , 5 ) 
[19523] c:0 is:( move 4 / ua , 3 ; loop 0 , 6 , move ua , 2 )  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[19524] c:0 is:( move ul , ul ; loop 0 , 4 , move 4 * 2 , 4 )  decode:loop 0 , 4 , move 1 - 8 , 8 * 3 
[19525] c:0 is:( move 9 , 4 / ua ; move ua - ul , ua * ua )  decode:( move ua + 3 , 3 + move ua , 8 ) 
[19526] c:0 is:( move ul , ua / 4 ; loop 0 , 3 , move 4 , 3 )  decode:loop 0 , 4 , move 3 , 5 * 2 
[19527] c:0 is:( move ua , 4 / 3 ; loop 0 , 5 , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 5 / 3 
[19528] c:0 is:( ( move 4 , ul ; move 4 , 2 ) ; move ua , 2 )  decode:( move ua , 2 ; move ua , 0 - 2 ) 
[19529] c:0 is:( move 4 , 3 ; move ul , 4 ; move 4 , 4 + ul )  decode:( move 4 ,  ua - 4 ua , v0 ) 
[19530] c:0 is:( move 3 , ul ; loop 0 , 5 , move ul - 4 , 4 )  decode:loop 0 , 4 , move 4 , v0 * 9 
[19531] c:0 is:( move 4 + ul , 4 ; loop 0 , 5 , move ul , 4 )  decode:( move 5 , 4 ; move 3 , 0 - 4 ) 
[19532] c:0 is:( move 4 , ul ; ( move 2 , 2 - move ua , 2 ) )  decode:( move 5 , ul ; move 4 , 0 - 4 ) 
[19533] c:0 is:( move ua , 4 * 3 ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 3 , move 2 - ua , v0 - 4 
[19534] c:0 is:( move ua , ua / 4 ; loop 1 , 5 , move 4 , 4 )  decode:loop 0 , 4 , move 5 + v0 , 9 
[19535] c:0 is:( move ua + ul , 0 ; move ua + ul , ua * ua )  decode:( move ua + ul , 0 ; move 8 , 5 ) 
[19536] c:0 is:( move 0 - ua , ua ; move ul - ua , ua * ua )  decode:( move ul - ua , 0 ; move 5 , 8 ) 
[19537] c:0 is:( move 0 - ua , ul ; move ua + ul , ua - ul )  decode:( move ua + ul , 0 ; move ua , ul ) 
[19538] c:0 is:( move ua - ul , 0 ; move ua + ul , ua * ua )  decode:( move 5 , 0 ; move ua + ul , 8 ) 
[19539] c:0 is:( move 0 - ua , ua * ua ; move ua + ul , ul )  decode:( move ua + ul , 5 ; move 7 , ul ) 
[19540] c:0 is:( move ul - ua , 0 ; move ua + ul , ua * ua )  decode:( move ul - ua , 0 ; move 8 , 8 ) 
[19541] c:0 is:( move ua - ul , 0 ; move ul - ua , ua * ua )  decode:( move 5 , 0 ; move ul - ua , 8 ) 
[19542] c:0 is:( move ul - ua , 0 ; move ul - ua , ua * ua )  decode:( move ul - ua , 0 ; move 5 , 5 ) 
[19543] c:0 is:( move ul - ua , ua ; move ua + ul , ua - 2 )  decode:( move 5 , ua / 5 ; move ua , 5 ) 
[19544] c:0 is:loop 0 , 2 , ( move ul , v0 ; move ua , v0 )  decode:( move 8 , 0 ; move ua , 2 ) 
[19545] c:0 is:( move ua + ul , ul ; move ul - ua , 0 - ul )  decode:( move 8 , ul ; move 4 , 0 - 2 ) 
[19546] c:0 is:( move ua + ul , 2 ; move ua + ul , ua * ua )  decode:( move ua + ul , 2 ; move ua , ua ) 
[19547] c:0 is:( move ua , ua * ua ; move ua + 2 , ua * ua )  decode:( move ua , 8 ; move 9 , ua * ua ) 
[19548] c:0 is:( move ua - ul , 2 ; move ua + ul , ua * ua )  decode:( move 5 , 2 ; move ua + ul , 8 ) 
[19549] c:0 is:( move ul - ua , ua ; move ua - ul , ua - 2 )  decode:( move 5 , 0 - 4 ; move 5 , 2 ) 
[19550] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua , ul )  decode:( move ua + ul , ul ; move 7 , 2 ) 
[19551] c:0 is:( move ua - 2 , ua ; move ua - ul , ua * ua )  decode:( move 4 , 0 ; move ul - ua , 8 ) 
[19552] c:0 is:( move 2 - ua , ua * ua ; move ua + ul , ul )  decode:( move 4 , 5 ; move ua + ul , ul ) 
[19553] c:0 is:loop 0 , 3 , ( move ua , v0 ; move v0 , ul )  decode:loop 0 , 4 , move ua , v0 * v0 
[19554] c:0 is:( move ul - ua , ua ; move 2 - ua , ua * ua )  decode:( move ul - ua , 0 ; move 5 , 5 ) 
[19555] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ua , v0 )  decode:loop 0 , 4 , move ua - v0 , 2 
[19556] c:0 is:( move ua + ul , 3 ; move ua + ul , ua * ua )  decode:( move ua + ul , 3 ; move 8 , 5 ) 
[19557] c:0 is:( move 2 - ua , ua * ua ; move ua , ua * ua )  decode:( move 4 , 9 + 4 ; move ua , 8 ) 
[19558] c:0 is:( move ua - ul , ua * ua ; move ua + ul , 2 )  decode:( move 5 , ua * ua ; move 7 , 2 ) 
[19559] c:0 is:( move ua - ul , ua - ul ; move ua - 2 , ul )  decode:( move 4 , 3 ; move 5 , 2 - 3 ) 
[19560] c:0 is:( move ua , ua - ul ; move ul - ua , ul - 2 )  decode:loop 0 , 2 , move ua , 0 - 2 
[19561] c:0 is:( loop 0 , 4 , move v0 , v0 ; move ua , ul )  decode:( move 3 , 5 ; move 8 , 4 ) 
[19562] c:0 is:( move ua + ul , 2 / ua ; move ua , ua * ua )  decode:( move ua , 2 / ua ; move ua , 8 ) 
[19563] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 , v0 )  decode:( move ua + ul , ul ; move 2 , 4 ) 
[19564] c:0 is:( move ua + ul , ul / ua ; move ua + ul , 2 )  decode:loop 0 , 3 , move 3 + 2 , 2 / v0 
[19565] c:0 is:( move ul - ua , 3 ; move ua + ul , ua - ul )  decode:( move 8 , 2 ; move ul - ua , ul ) 
[19566] c:0 is:( move ua , ua / 2 ; move ua + ul , ua * ua )  decode:( move ul - ua , 0 ; move 8 , 5 ) 
[19567] c:0 is:( move ua , ul / ua ; move 2 + ua , ua * ua )  decode:( move ua , ul / ua ; move 9 , 8 ) 
[19568] c:0 is:( move 3 , ua * ua ; move ua + ul , ua * ua )  decode:( move 3 , 8 ; move 8 , ua * ua ) 
[19569] c:0 is:( move ua + 2 , ul / ua ; move ua , ua * ua )  decode:( move ua + 2 , ul ; move ua , 8 ) 
[19570] c:0 is:( move ul - ua , ua * ua ; move ua + 3 , ul )  decode:( move 9 , 6 ; move ua , ua / 3 ) 
[19571] c:0 is:( move ua , 2 / ua ; move ua + ul , ua * ua )  decode:( move ua , 2 / ua ; move 8 , 8 ) 
[19572] c:0 is:( move ua + ul , 3 ; move ul - ua , ua * ua )  decode:( move ua + ul , 3 ; move 5 , 5 ) 
[19573] c:0 is:( move ua + ul , ua * ua ; move ua + ul , 4 )  decode:( move ua + ul , 8 ; move 7 , 4 ) 
[19574] c:0 is:( move ua , ua * ua ; move ua + ul , ul - 3 )  decode:( move ua + ul , 3 ; move ua , 2 ) 
[19575] c:0 is:( move ua + ul , 3 ; move ua - ul , ua * ua )  decode:( move ua + ul , 3 ; move 5 , 5 ) 
[19576] c:0 is:( move 0 - 3 , 0 ; move 3 , ul ; move ua , ul )  decode:( move 3 , 0 ; move 9 , 2 ) 
[19577] c:0 is:( move ua + ul , 0 ; move 2 , 3 ; move 2 , ul )  decode:( move ua + ul , 0 ; move 4 , 3 ) 
[19578] c:0 is:( move ua , ua * ua ; move ua - ul , ul - 3 )  decode:( move 5 , 3 ; move ua , 2 ) 
[19579] c:0 is:( move 3 , ua - ul ; move ul - ua , ua - ul )  decode:( move 3 , 2 - 2 ; move 3 , 4 ) 
[19580] c:0 is:( move ul - ua , ua - 3 ; move ua - ul , ul )  decode:( move 5 , ul / 4 ; move 5 , ul ) 
[19581] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 , ul )  decode:loop 0 , 3 , move 3 , v0 - 2 
[19582] c:0 is:( move ua + ul , ua ; move ul - ua , ul / 2 )  decode:loop 0 , 4 , move 3 , 4 + v0 / 2 
[19583] c:0 is:( move ua + 4 , ul ; move ul - ua , ua - ul )  decode:( move 0 - ua , 0 ; move ua , ul ) 
[19584] c:0 is:( move 2 , ul / ua ; move ua + ul , ua - ul )  decode:( move 2 , 0 - 4 ; move 2 , ul ) 
[19585] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 , v0 )  decode:( move ua + ul , ul ; move ua , 7 ) 
[19586] c:0 is:( move 2 - ua , ua * ua ; move ua , ul / ua )  decode:( move ua , 5 ; move 4 , 3 ) 
[19587] c:0 is:( move ua + ul , ul ; move ua + ul , ua / 3 )  decode:( move ua + ul , ul ; move 7 , 2 ) 
[19588] c:0 is:( move ua - 4 , ua - ul ; move ua , ul - ua )  decode:( move 3 , 2 - 3 ; move ua , ul ) 
[19589] c:0 is:( loop 0 , 5 , move v0 , ul ; move ua , v0 )  decode:( move ua + 3 , 4 ; move 5 , 4 ) 
[19590] c:0 is:( move ua , ua / 3 ; move ua + ul , ua * ua )  decode:( move ua , 3 / 2 ; move ua , 8 ) 
[19591] c:0 is:( move ua + ul , ul / ua ; move 2 - ua , ul )  decode:loop 0 , 4 , move v0 + ul , 0 - 3 
[19592] c:0 is:( move ua + ul , 2 / ua ; move ul - ua , ul )  decode:loop 0 , 3 , move v0 * 4 , 0 - 2 
[19593] c:0 is:( loop 0 , 4 , move ul , v0 ; move v0 , ul )  decode:( move 2 , 0 ; move 4 , 4 ) 
[19594] c:0 is:( move ua + 2 , ul / ua ; move ul - ua , ul )  decode:( move ua + 2 , ul ; move 5 , 4 ) 
[19595] c:0 is:( move 4 - ua , ua * ua ; move ua , ua * ua )  decode:( move 3 , 2 / 4 ; move ua , 5 ) 
[19596] c:0 is:( move ua , 3 / ua ; move ua + ul , ua * ua )  decode:( move ua , 3 / ua ; move 7 , 8 ) 
[19597] c:0 is:( move ul - ua , 3 ; move ul - ua , ua * ua )  decode:( move ul - ua , 3 ; move 5 , 5 ) 
[19598] c:0 is:( move ua + ul , 2 ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 4 , move 2 + 4 , 2 
[19599] c:0 is:( move ua - ul , 2 / ua ; move ul - ua , ul )  decode:( move 5 , 2 / ua ; move 5 , 4 ) 
[19600] c:0 is:( move ua , ua / 3 ; move ul - ua , ua - ul )  decode:loop 0 , 2 , move ua - v0 , ua / 3 
[19601] c:0 is:( move ua , 4 / ua + ul ; move ua , ua * ua )  decode:( move ua , 3 / 4 ; move ua , 8 ) 
[19602] c:0 is:( move ua , 0 - 2 ; move ul , 2 ; move 3 , ul )  decode:( move 3 , 0 - 2 ; move ua , 4 ) 
[19603] c:0 is:( move ua - ul , ul / ua ; move ua - 2 , ul )  decode:loop 0 , 2 , move ua - 2 , v0 - 2 
[19604] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ul , ul )  decode:( move 4 , 9 ; move ua - ul , 4 ) 
[19605] c:0 is:( loop 0 , 6 , move ul , v0 ; move ua , v0 )  decode:( move 3 , 0 - 2 ; move ua , 4 ) 
[19606] c:0 is:( loop 0 , 5 , move v0 , ul ; move v0 , ul )  decode:loop 0 , 3 , move 4 , 3 / v0 
[19607] c:0 is:( move ua , ul / ua ; move 3 - ua , ua * ua )  decode:( move 3 , 0 ; move ua , 4 / 3 ) 
[19608] c:0 is:( move 4 , 0 ; move 0 - 3 , ul ; move ua , ul )  decode:( move ua , 0 ; move ua , 0 - 4 ) 
[19609] c:0 is:( move ua , ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua , v0 + ua / 3 
[19610] c:0 is:( move ul - ua , ul ; move ua - ul , 2 / ua )  decode:( move ul - ua , ul ; move ua , 4 ) 
[19611] c:0 is:( move ua + ul , ul / ua ; move ua , ua - 4 )  decode:7 7 , 7 , 7 7 ; move ua , 4 ) 
[19612] c:0 is:( move ul - ua , 4 ; move ua - ul , ua * ua )  decode:( move 5 , 4 ; move 5 , 4 + 5 ) 
[19613] c:0 is:( move ua , ua / 3 ; move ua - ul , ua * ua )  decode:( move ua , ua / 3 ; move 5 , 5 ) 
[19614] c:0 is:( move ul - ua , ua * ua ; move 4 , ua * ua )  decode:( move ua - ul , 5 ; move 4 , 8 ) 
[19615] c:0 is:( move 3 - ua , 0 ; move 2 , ul ; move 2 , ul )  decode:( move 3 , 0 ; move 4 , 2 ) 
[19616] c:0 is:( move ua , ul / ua ; move ua + ul , ua - 4 )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[19617] c:0 is:( move ul - ua , ua / 3 ; move ua + ul , ul )  decode:( move ua , 0 ; move ua + ul , ul ) 
[19618] c:0 is:( move ul - ua , ua / 3 ; move ua , ua * ua )  decode:( move 5 , 2 - 3 ; move ua , 5 ) 
[19619] c:0 is:( move 4 , ua * ua ; move ul - ua , ua * ua )  decode:( move 4 , ua * ua ; move 5 , 5 ) 
[19620] c:0 is:( move ul - ua , 4 ; move ul - ua , ua * ua )  decode:( move ul - ua , 4 ; move 5 , 5 ) 
[19621] c:0 is:( move ua , 4 / ua ; move ua + ul , ua * ua )  decode:( move ua , 3 / ua ; move ua , 8 ) 
[19622] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , v0 )  decode:( move 3 , ua / 4 ; move ua , 4 ) 
[19623] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , ul )  decode:( move 3 , 9 ; move ua , 0 - 9 ) 
[19624] c:0 is:( move ul - ua , 2 ; loop 0 , 2 , move 2 , ul )  decode:( move ua - ul , 2 ; move 3 , ul ) 
[19625] c:0 is:( move ul , ua ; loop 0 , 2 , move 4 , 0 - ul )  decode:loop 0 , 4 , move 2 , 2 - 3 
[19626] c:0 is:( move ul - ua , ul / ua ; move ua , ul - 3 )  decode:( move ua , 0 - 3 ; move ua , ul ) 
[19627] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ul , ul )  decode:loop 0 , 4 , move 3 + v0 , 0 - 9 
[19628] c:0 is:( move 4 , 0 - 2 ; move ua , ul ; move ua , 3 )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[19629] c:0 is:( move 2 , 0 ; loop 0 , 5 , move ul , ua + ul )  decode:loop 0 , 4 , move 2 , v0 + 2 
[19630] c:0 is:( loop 0 , 6 , move v0 , ul ; move ul , v0 )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[19631] c:0 is:( move ua - ul , ul / ua ; move ua + ul , 4 )  decode:( move ua , ul ; move ua , 0 - 4 ) 
[19632] c:0 is:( move ua , ul - 3 ; move 2 , 2 ; move ua , 2 )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[19633] c:0 is:( move 4 - ua , ul / ua ; move ua , ua * ua )  decode:( move ua , 0 - 3 ; move 5 , 5 ) 
[19634] c:0 is:( move ua - 4 , ul / ua ; move ua + ul , ul )  decode:( move 2 , ul / 4 ; move 8 , ul ) 
[19635] c:0 is:( move ua , ua / 4 ; move ua - ul , ua * ua )  decode:( move ua , 3 / 2 ; move 5 , 5 ) 
[19636] c:0 is:( move ul - ua , ul ; move ua + ul , ua / 4 )  decode:( move 5 , ul ; move ua + ul , 8 ) 
[19637] c:0 is:( move ul - ua , ul / 3 ; move ua + ul , ul )  decode:loop 0 , 3 , move 0 - 4 , 0 - v0 
[19638] c:0 is:( move ua , 4 / ua ; move ua - ul , ua * ua )  decode:( move ua , 4 / ua ; move 5 , 8 ) 
[19639] c:0 is:( move ua + ul , 3 ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 4 , move ua , 3 - v0 
[19640] c:0 is:( move ua + ul , 4 / ua ; move ul - ua , ul )  decode:( move ua , 7 ; move ua , ua / 3 ) 
[19641] c:0 is:( move ua , ul / ua ; move ua + ul , ua / 3 )  decode:( move ua , ul / 4 ; move 7 , 2 ) 
[19642] c:0 is:( move ua + ul , 2 ; loop 0 , 3 , move 2 , ul )  decode:( move 8 , 2 ; move 4 , 2 ) 
[19643] c:0 is:( move ua + ul , ul / 4 ; move ua , ua * ua )  decode:( move ua , ul / 4 ; move ua , 8 ) 
[19644] c:0 is:( move ua - ul , ul ; move ua + ul , ua / 4 )  decode:( move 5 , ul ; move ua + ul , 8 ) 
[19645] c:0 is:( move 4 , 0 - 2 ; move 2 , ul ; move ua , ul )  decode:( move ua , 0 - 2 ; move ua , 5 ) 
[19646] c:0 is:( move ul - ua , 0 ; loop 0 , 3 , move 4 , ul )  decode:( move 8 , 0 ; move 8 , 0 - 4 ) 
[19647] c:0 is:( move ua + ul , ul / 4 ; move ua - ul , ul )  decode:( move ua , 2 / 4 ; move ua , ul ) 
[19648] c:0 is:( move ua , ul / ua ; move ua + ul , ua / 4 )  decode:( move ua , ul / ua ; move 8 , 8 ) 
[19649] c:0 is:( move ua , 3 ; move 3 - ua , ul ; move 4 , 0 )  decode:( move 0 - ua , 0 ; move 4 , ul ) 
[19650] c:0 is:( move 2 - ua , ul ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move 4 + 3 , 4 * 0 4 
[19651] c:0 is:( move ul , ua * ua ; move ua - ul , 4 / ua )  decode:( move ul , 2 / 2 ; move 5 , ul ) 
[19652] c:0 is:( move ua + ul , 3 ; loop 0 , 2 , move ua , 4 )  decode:loop 0 , 4 , move 3 + v0 , 4 
[19653] c:0 is:( move 5 , ul / ua ; move ua + ul , ua * ua )  decode:( move 4 , ul / ua ; move 8 , 8 ) 
[19654] c:0 is:( move ua , ul - 2 ; move ul , 2 ; move 3 , 2 )  decode:( move 3 , 0 ; move ua , 0 - 4 ) 
[19655] c:0 is:( move 2 , ul ; move ua , 4 + ul ; move 2 , 2 )  decode:loop 0 , 3 , move 3 , 3 + v0 
[19656] c:0 is:( move ua - ul , 4 / ua ; move ul - ua , ul )  decode:( move 5 , 8 ; move 5 , 2 ) 
[19657] c:0 is:( move ul - ua , ul ; move ul - ua , ua / 4 )  decode:( move ul - ua , ul ; move 5 , 8 ) 
[19658] c:0 is:( move ul - ua , ul / ua ; move ua - ul , 4 )  decode:( move 5 , 0 - 3 ; move 5 , ul ) 
[19659] c:0 is:( move ul - ua , ul / 4 ; move ua + ul , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[19660] c:0 is:( move ua - ul , ua * ua ; move ua / 4 , ul )  decode:( move ua - ul , 5 ; move 2 , ul ) 
[19661] c:0 is:( move ua + ul , 3 ; move 3 , 3 ; move ua , 2 )  decode:( move ua , ua / 3 ; move ua , 2 ) 
[19662] c:0 is:( move ul - ua , ul ; move ua - ul , ua / 4 )  decode:( move ul - ua , ul ; move 5 , 8 ) 
[19663] c:0 is:( move ua + ul , ul / 4 ; move ul - ua , ul )  decode:loop 0 , 4 , move v0 * 2 , 0 - 3 
[19664] c:0 is:( move 2 , 3 ; move 3 , ua - 2 ; move ua , ul )  decode:( move 3 , ul ; move 9 , ua / 5 ) 
[19665] c:0 is:( move ul - ua , ul / 4 ; move ua , ua - ul )  decode:( move ua , 5 * 4 ; move 5 , 2 ) 
[19666] c:0 is:( move ul - ua , 4 / ua ; move ul - ua , ul )  decode:( move 5 , 8 ; move ua - ul , ul ) 
[19667] c:0 is:( move ua , ul / 4 ; move ua - ul , ua * ua )  decode:( move ul - ua , ul ; move 5 , 8 ) 
[19668] c:0 is:( move 2 , 3 ; move ua + 3 , ul ; move ua , 4 )  decode:( move ua + 3 ; move ua , 4 ) 
[19669] c:0 is:( move ul - 3 , ua ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua , 2 
[19670] c:0 is:( move ua , ua ; move ua , 4 ; move 3 , 4 + 2 )  decode:loop 0 , 3 , move 4 + v0 , 4 * 4 
[19671] c:0 is:( loop 0 , 6 , move 2 , ul - ua ; move ul , 0 )  decode:0 loop 0 , 4 , move ua - 3 , 5 
[19672] c:0 is:( move ua , ua ; move ua , 3 ; move 3 / 2 , 2 )  decode:( move ua , 0 ; move ua , ua / 3 ) 
[19673] c:0 is:loop 0 , 3 , ( move 3 - ua , ul ; move 2 , ul )  decode:loop 0 , 4 , move 4 , 4 * ul / v0 
[19674] c:0 is:( move ua , ul ; move 0 - 2 , 4 ; move 4 , ul )  decode:( move 2 + ua , ul ; move 4 , 5 ) 
[19675] c:0 is:( move 2 , ua + 3 ; move ua , 3 ; move ul , 4 )  decode:( move ul , ul ; move ua , 0 - 4 ) 
[19676] c:0 is:( move 0 , 3 ; move 3 , ul / 2 ; move ua , ul )  decode:loop 0 , 4 , move 0 - 2 , 7 - v0 
[19677] c:0 is:( move ua , 2 + ul ; loop 0 , 5 , move 2 , ul )  decode:loop 0 , 4 , move 4 , 3 * 9 
[19678] c:0 is:( loop 0 , 5 , move 3 , ul ; move ul + ul , 0 )  decode:loop 0 , 4 , move 4 , ul / / 0 2 0 0 2 , 
[19679] c:0 is:( loop 0 , 5 , move 2 , ul + ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 - ua , 3 * 4 
[19680] c:0 is:( move 3 , 2 - 3 ; move ul , ul ; move ua , 2 )  decode:( move 3 , 0 - 3 ; move ua , 4 ) 
[19681] c:0 is:( move ua + ul , 3 ; move 4 , 2 ; move 2 , ul )  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[19682] c:0 is:( move ul - ua , ul / ua ; move ua , ua / 4 )  decode:( move ul - ua , 8 ; move ua , 8 ) 
[19683] c:0 is:( move ul - 3 , 2 ; move 2 , ul ; move 2 , ul )  decode:( move 2 , 2 ; move 4 , 2 ) 
[19684] c:0 is:( move 4 - ua , 2 ; move ua , 3 ; move 2 , ul )  decode:( move ua + 2 , 5 ; move 2 , 4 ) 
[19685] c:0 is:( move ul - ua , 0 ; move 3 , 4 ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 + 4 
[19686] c:0 is:( move ul - ua , ul / 4 ; move ul - ua , ul )  decode:( move 5 , 4 * 4 ; move 5 , ul ) 
[19687] c:0 is:( move ua + ul , 4 ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua + ul , 4 
[19688] c:0 is:( move ua , 0 - 4 ; move ul , 4 ; move 3 , ul )  decode:( move 4 , 0 - 4 ; move 5 , 5 ) 
[19689] c:0 is:( move ua , 0 - 3 ; move 4 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 0 - 4 , 0 - 7 
[19690] c:0 is:( move 0 , 2 ; move 4 , ul / 3 ; move ua , ul )  decode:( move 4 , ul - 4 ; move ua , ul ) 
[19691] c:0 is:( move 3 , 4 ; move 2 , ul ; move ua , ul - 2 )  decode:( move ul - ua , 4 ; move 4 , ul ) 
[19692] c:0 is:( move 2 , ua ; move ul - 3 , 2 ; move 4 , ul )  decode:( move 4 , 0 ; move 4 , 0 - 4 ) 
[19693] c:0 is:( move 0 , ul ; loop 1 , 5 , move 3 , ua * ua )  decode:loop 0 , 4 , move 3 - ua , 0 - 8 
[19694] c:0 is:( move 4 , 0 - 4 ; move ul , ul ; move ua , 3 )  decode:( move 5 , 0 - 4 ; move ua , 4 ) 
[19695] c:0 is:( move 2 , 3 / 2 ; move ua , ul ; move ua , 3 )  decode:move 0 , , 3 / 2 ; move 3 , 3 0 0 0 4 0 3 , 2 
[19696] c:0 is:( move ua , ul + ul ; loop 0 , 5 , move 2 , 3 )  decode:( move ua , 2 ; move 3 , 4 * 4 ) 
[19697] c:0 is:( loop 0 , 4 , move 3 , 3 - ua ; move ua , ul )  decode:( move 4 , ua / 4 ; move ua , 3 ) 
[19698] c:0 is:loop 0 , 2 , ( move 3 , ul ; move ul , ua / 2 )  decode:( move 3 , ul ; move 3 , 4 ) 
[19699] c:0 is:( move 0 - 4 , ua ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 4 , move 0 - 2 , 0 - v0 
[19700] c:0 is:( move ua , ua * ua ; loop 0 , 5 , move 2 , 3 )  decode:( move ua , ua * ua ; move 3 , ua 0 0 0 0 / 0 2 2 
[19701] c:0 is:( move 3 , 3 ; move ua - 3 , 3 ; move ua , ul )  decode:( move 4 , 6 ; move dmove 8 , 4 ) 
[19702] c:0 is:( move ua + ul , 3 ; move 3 , 3 ; move 3 , ul )  decode:( move ua + ul , 3 ; move 5 , 3 ) 
[19703] c:0 is:( move 2 - 4 , ul ; move 2 , ul ; move ul , 2 )  decode:loop 0 , 3 , move 2 , 4 / v0 
[19704] c:0 is:( move 3 + 2 , 4 ; move ul , ul ; move ua , 3 )  decode:( move ua , 4 ; move 5 , 4 ) 
[19705] c:0 is:( move ua , 3 ; move 2 - 3 , ul ; move 3 , ul )  decode:( move ua , 3 ; move 3 , ua / 4 ) 
[19706] c:0 is:( move 0 - 3 , 4 ; move ul , 4 ; move ua , ul )  decode:( move 3 - ua , 4 ; move ua , 8 ) 
[19707] c:0 is:( move 4 , 0 ; move ul - ua , 4 ; move 3 , ul )  decode:( move ua + ul , 0 ; move 4 , 5 ) 
[19708] c:0 is:( move ul , 3 ; loop 0 , 4 , move ua + ul , 3 )  decode:loop 0 , 4 , move v0 * 3 , 4 * 3 
[19709] c:0 is:( move 3 , ua ; loop 1 , 5 , move ul , 0 - ul )  decode:loop 0 , 4 , move 2 , v0 * 4 
[19710] c:0 is:( move ua , ul / 4 ; move ul - ua , ul / ua )  decode:( move ul - ua , 0 ; move ua , 3 ) 
[19711] c:0 is:( move ua , 4 ; loop 0 , 3 , move 3 , ua * ua )  decode:0 loop 0 , 4 , move 3 - ua , 4 * 4 
[19712] c:0 is:( move ua + 2 , 2 ; loop 0 , 6 , move ul , ul )  decode:( move ua + 2 , 2 ; move 3 , 2 ) 
[19713] c:0 is:( move 4 , ua + ul ; loop 0 , 4 , move ua , 3 )  decode:loop 0 , 4 , move ua , 4 * 3 - 3 
[19714] c:0 is:( move 2 , ua - ul ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 3 , v0 - 2 
[19715] c:0 is:( move ua , 4 + 3 ; move ua , 4 ; move ua , 4 )  decode:loop 0 , 3 , move 0 - ua , 0 - 4 
[19716] c:0 is:( move ua , ul ; loop 0 , 4 , move 4 , 3 - ua )  decode:loop 0 , 4 , move 2 - ua , v0 - 3 
[19717] c:0 is:( move 2 , 0 ; move ua / 4 , ul ; move 4 , ul )  decode:( move 2 , 0 ; move 5 , 5 ) 
[19718] c:0 is:( move ua , ua ; move 4 , 4 ; move ua / 4 , 0 )  decode:( move ua , 0 ; move ul - ua , 4 ) 
[19719] c:0 is:( move ul - 3 , ua ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 4 , v0 + 2 
[19720] c:0 is:( move ua , 0 ; move 3 , ul ; move 4 , ul / 3 )  decode:( move ua , 0 ; move ua , 4 / 3 ) 
[19721] c:0 is:loop 0 , 3 , ( move 3 , ul ; move ul , ul - 3 )  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[19722] c:0 is:( loop 0 , 4 , move v0 - 3 , 2 ; move 2 , 0 )  decode:/ loop 0 , 3 , move ua - 4 , 2 
[19723] c:0 is:( move 4 + 3 , 4 ; move ul , ul ; move ua , 2 )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[19724] c:0 is:( move 4 + 3 , ua ; loop 0 , 4 , move ul , ul )  decode:( move ua + ul , 0 ; move 2 , 2 ) 
[19725] c:0 is:( move ul - ua , ul ; loop 0 , 3 , move 3 , 4 )  decode:loop 0 , 4 , move 3 , v0 + 9 
[19726] c:0 is:( move ua , 3 + ul ; loop 3 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua , 4 
[19727] c:0 is:( move 4 + 3 , ul ; move ua , 4 ; move ua , 3 )  decode:( move ua + ul , 3 ; move 7 , 3 ) 
[19728] c:0 is:( move 3 , ul ; loop 1 , 4 , move 2 , ua - ul )  decode:loop 0 , 4 , move 3 , v0 - 4 
[19729] c:0 is:( move ua , 3 + 4 ; move 4 , 3 ; move ua , ul )  decode:( move 5 , 5 ; move ua + 2 , 4 ) 
[19730] c:0 is:( move ua , ua ; loop 0 , 6 , move 2 , ul - 3 )  decode:( move ua , 0 ; move ua , 0 - 4 ) 
[19731] c:0 is:( move ua + ul , 3 ; move 3 , 3 ; move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 * 3 
[19732] c:0 is:( move ua + ul , 4 ; move 3 , 3 ; move 3 , ul )  decode:( move ua , 4 ; move 8 - 3 , 3 ) 
[19733] c:0 is:( move ua , ul ; move 3 + 4 , 3 ; move 3 , ul )  decode:( move ua + 3 , ul ; move 9 , 4 ) 
[19734] c:0 is:( move 2 , ul ; move 3 , 4 ; move 3 - ua , ul )  decode:loop 0 , 3 , move 3 , 4 / v0 
[19735] c:0 is:( move ua , 4 + ul ; move 4 , 3 ; move ua , 3 )  decode:loop 0 , 3 , move ua , 5 + v0 
[19736] c:0 is:( move ua , ul ; move 3 , 4 + 3 ; move ua , 4 )  decode:( move ua + 3 , ul ; move 5 , 8 ) 
[19737] c:0 is:( move 4 , 2 - 3 ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 4 , v0 + 2 
[19738] c:0 is:( move ul - 3 , 2 ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 4 , move 2 , v0 + 5 
[19739] c:0 is:( move 4 - ul , ua ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 / 2 
[19740] c:0 is:( move ua , 3 - ua ; loop 0 , 5 , move 4 , ul )  decode:loop 0 , 4 , move 4 + ul , 3 / v0 
[19741] c:0 is:( move 0 , 4 + 2 ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 3 , move 3 + v0 , 0 - 2 
[19742] c:0 is:( move 2 , 4 + 4 ; move ul , ul ; move ua , 4 )  decode:( move 3 , ua * 5 ; move ua , 8 ) 
[19743] c:0 is:( move 4 , 3 ; 4 - move ua , ul ; move 2 , ul )  decode:( move 5 , 2 ; move move 4 , 2 / 3 ) 
[19744] c:0 is:( move ua , ul + ul ; loop 0 , 6 , move 2 , 4 )  decode:( move 3 , ua / 3 ; move 7 , ua ) 
[19745] c:0 is:( move 3 , ul ; move 4 , ul ; move 4 , ua - 2 )  decode:( move 4 , ua / 2 ; move 7 , 2 ) 
[19746] c:0 is:( move 4 - ua , ul ; loop 0 , 4 , move ua , 4 )  decode:loop 0 , 4 , move 3 + 3 , 0 - 8 
[19747] c:0 is:( move 4 , ua * 2 ; loop 0 , 4 , move ul , ul )  decode:loop 0 , 4 , move 2 , v0 0 
[19748] c:0 is:( move 0 , ul / ua ; loop 0 , 6 , move 3 , ul )  decode:loop 0 , 4 , move 4 , 5 * 3 
[19749] c:0 is:( move 3 , 4 ; move 3 , ul ; move 3 - ua , ul )  decode:( move ua , 5 ; move 3 , 0 - 4 ) 
[19750] c:0 is:( move 4 , ul ; move ul , 3 ; move 4 + 2 , ul )  decode:( move 4 , ul ; move ua , 7 ) 
[19751] c:0 is:( loop 0 , 4 , move ul , ul ; move 3 , 4 + ul )  decode:( move 5 , 9 ; move 2 , ua * ua ) 
[19752] c:0 is:( move ua , 2 - 3 ; move ul , 4 ; move 4 , ul )  decode:( move ul - ua , 2 ; move 5 , 4 ) 
[19753] c:0 is:( move ua , 2 - 3 ; move ul , ul ; move 4 , 4 )  decode:( move 3 , 4 ; move ua , 4 / 7 ) 
[19754] c:0 is:( move ua , 4 ; move ul - 3 , 3 ; move 3 , ul )  decode:( move ua + 2 , 4 ; move 3 , 4 ) 
[19755] c:0 is:( move 2 , ul ; move ul , 3 ; move 4 + 4 , ul )  decode:( move 2 , ul ; move 8 , 4 ) 
[19756] c:0 is:( move ua , 4 + ul ; loop 0 , 6 , move 2 , ul )  decode:loop 0 , 4 , move 2 - ua , v0 + 4 
[19757] c:0 is:( move ul , 3 / ua ; move 3 , 2 ; move ua , 4 )  decode:( move 4 , 0 - 4 ; move ua , 4 ) 
[19758] c:0 is:( move ul , ul / ua ; loop 0 , 3 , move 4 , 2 )  decode:0 0 loop 0 , 3 , move 4 , ua / 3 
[19759] c:0 is:loop 0 , 2 , ( move ul - 4 , ul ; move 4 , ul )  decode:loop 0 , 3 , move ua - 2 , ua / v0 
[19760] c:0 is:( move ua , ul - ua ; loop 0 , 5 , move 3 , 4 )  decode:loop 0 , 4 , move ua - 2 , v0 + 9 
[19761] c:0 is:( move 3 , 3 ; move ul , ua / 2 ; move ua , 4 )  decode:( move 3 , 3 ; move ua , 4 / 3 ) 
[19762] c:0 is:( move 3 , 4 + 3 ; move ul , 4 ; move ua , ul )  decode:loop 0 , 4 , move ul + v0 , ua / 4 
[19763] c:0 is:( move ua - 3 , 3 ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[19764] c:0 is:( move 4 , 3 + 4 ; move 3 , ul ; move ua , ul )  decode:( move ul - ua , 9 ; move 8 , 2 ) 
[19765] c:0 is:( move ua , ua / 3 ; move 4 , 2 ; move 3 , ul )  decode:( move ua , ua / 3 ; move 5 , 2 ) 
[19766] c:0 is:( move 3 , 3 ; move 3 , ua - ul - move 2 , ul )  decode:( move 3 , 3 ; move 4 , 7 + 4 ) 
[19767] c:0 is:( move ul , 4 ; move 4 + 3 , ul ; move 2 , ul )  decode:( move ua + ul , 5 ; move 2 , ul ) 
[19768] c:0 is:( move 4 , ul ; loop 0 , 3 , move ua - 4 , ul )  decode:loop 0 , 4 , move 3 , ul 
[19769] c:0 is:( move 3 , 4 + 3 ; move ul , ul ; move 3 , ul )  decode:( move 3 , 4 / ua ; move 4 , 2 ) 
[19770] c:0 is:( move ua , 3 ; move ul , 4 ; move 3 + 4 , ul )  decode:( move ua , 3 ; move 8 , 5 ) 
[19771] c:0 is:( move ua + ul , 3 ; move 3 , 4 ; move 4 , ul )  decode:( move ua , 3 ; move ua + 2 , 4 ) 
[19772] c:0 is:( move ua - ul , 4 ; move 3 , ul ; move 2 , 4 )  decode:( move ua , 4 ; move 3 , 2 - 3 ) 
[19773] c:0 is:( move ua - 2 , ul ; move 4 , ul ; move 4 , 4 )  decode:( move 8 , ua / 4 ; move 4 , 4 ) 
[19774] c:0 is:( move 4 , 2 ; ul - move ua , ul ; move 4 , 4 )  decode:( move ua , 9 ; move 3 , 5 ) 
[19775] c:0 is:( move ua , 4 + ul ; move 4 , 4 ; move 3 , ul )  decode:( move ua , 5 ; move ua , 4 ) 
[19776] c:0 is:( move 4 , 3 + 4 ; move ul , ul ; move ua , 4 )  decode:( move 2 - ua , 4 ; move ua , 5 ) 
[19777] c:0 is:( move ua , ul / 3 ; move 2 , 3 ; move ul , 4 )  decode:( move ua , 2 / 4 ; move 3 , 3 ) 
[19778] c:0 is:( move 2 - ul , ul ; loop 0 , 5 , move 4 , ul )  decode:loop 0 , 4 , move ul - ua , 0 - 4 
[19779] c:0 is:( move ua , ua - 4 ; loop 0 , 6 , move 3 , ul )  decode:loop 0 , 4 , move 5 , 0 - v0 
[19780] c:0 is:( loop 0 , 6 , move ul , ul ; move 4 + ul , 2 )  decode:loop 0 , 4 , move ua - 4 v0 , 0 2 
[19781] c:0 is:( move 4 + 3 , ua ; move ul , ul ; move 4 , 4 )  decode:( move ua + ul , 0 ; move 4 , 5 ) 
[19782] c:0 is:( move 4 , ua ; loop 1 , 4 , move 4 - ua , ul )  decode:loop 0 , 4 , move v0 + ul , ul / 3 
[19783] c:0 is:( move ua , 4 + ul ; loop 0 , 6 , move ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[19784] c:0 is:( move ua , 4 + ul ; loop 0 , 5 , move 4 , ul )  decode:loop 0 , 4 , move 0 - ua , 2 
[19785] c:0 is:( move 4 , 3 ; move ul , 3 / 2 ; move ua , ul )  decode:( move 4 , 3 ; move ua , 0 - 4 ) 
[19786] c:0 is:( move 2 , ua * ua ; move 4 , 4 ; move 4 , ul )  decode:( move 4 , 2 ; move ua - 2 , 4 ) 
[19787] c:0 is:( move 4 , 4 ; move 4 + ul , ul ; move 2 , ul )  decode:( move 4 , 4 ; move 8 , 2 - 3 ) 
[19788] c:0 is:( move 3 , 4 / ua ; move 2 , 4 ; move ua , ul )  decode:( move 3 , 9 / 4 ; move 9 , 2 ) 
[19789] c:0 is:( move 4 , 4 ; move ul - ua , ul ; move 2 , 4 )  decode:( move 3 , 4 ; move ua ; move 4 , 4 ) 
[19790] c:0 is:( move 3 , 4 ; move 4 - ua , 4 ; move ua , ul )  decode:( move 4 , 4 ; move ua - ul , 4 ) 
[19791] c:0 is:( move 4 , 3 ; move ul , 4 ; move ul - 4 , ua )  decode:( move 4 , 3 ; move 3 , ul ) 
[19792] c:0 is:( move ul , 2 / ua ; loop 0 , 5 , move 4 , ul )  decode:loop 0 , 4 , move 4 , 0 - 4 * 3 
[19793] c:0 is:loop 0 , 2 , ( move 3 , 2 + 4 ; move v0 , 4 )  decode:( move 3 , ua / 2 ; move 4 , 9 ) 
[19794] c:0 is:( move ul - 4 , ul ; move 4 , 2 ; move 4 , ul )  decode:( move ua , 7 ; move 4 , 2 / 5 ) 
[19795] c:0 is:( move 4 , ua ; move 3 , ul / 4 ; move 2 , ul )  decode:( move ua , 0 ; move 2 , 2 - 3 ) 
[19796] c:0 is:( move 3 , ua * ua ; move 4 , ul ; move 4 , 4 )  decode:( move ua , ua * ua ; move 4 , 4 ) 
[19797] c:0 is:( move 4 , ul / 2 ; move ul , ul ; move 4 , 2 )  decode:0 loop 0 , 3 , move 3 - ua , 0 - 4 
[19798] c:0 is:( move ul - ua , 3 ; move 4 , 4 ; move 4 , ul )  decode:loop 0 , 4 , move 3 , v0 * 8 
[19799] c:0 is:( move 4 , 4 + ul ; move 4 , 4 ; move ua , ul )  decode:( move 4 , 9 ; move ua + 3 , 8 ) 
[19800] c:0 is:( move ua , 4 ; move ul , 2 ; move 4 , 4 / ua )  decode:( move ua , 4 ; move 5 , 9 ) 
[19801] c:0 is:( move 4 , 4 + 3 + move ul , ul ; move ua , 4 )  decode:( move ua , 0 - 9 ; move 4 , 2 ) 
[19802] c:0 is:( move 4 , 4 ; move 3 - 4 , ul ; move ua , ul )  decode:( move 4 , 4 ; move 5 , ua * ua ) 
[19803] c:0 is:( move 4 , ul - 4 ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 4 , move 0 - 2 , v0 - 4 
[19804] c:0 is:( move ua , 4 ; move ul / 4 , 2 ; move 4 , ul )  decode:( move ua , 4 ; move 5 , 0 - 4 ) 
[19805] c:0 is:( move 4 , 3 / ua ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 3 , move ua - 3 , 4 * 5 
[19806] c:0 is:( move 3 , 4 / ua ; move ul , 4 ; move 3 , ul )  decode:( move 3 , 2 / 4 ; move 4 , 8 ) 
[19807] c:0 is:( move 4 , 4 ; move ul - 4 , 4 ; move ua , ul )  decode:( move 4 + 3 , 4 ; move 5 , 4 ) 
[19808] c:0 is:( move 4 , ul ; move ul , ul ; move 4 , 4 * 3 )  decode:( move 3 , ul ; move 5 , 2 / 5 ) 
[19809] c:0 is:( move 4 , 4 / ua ; move 4 , 4 ; move ua , ul )  decode:( move 4 , 9 + 4 ; move ua , 4 ) 
[19810] c:0 is:( move 4 , ul / 3 ; move 4 , 4 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 4 * 4 / v0 
[19811] c:0 is:( move 4 , 4 ; move ul , ul / 3 ; move ua , 4 )  decode:( move 0 - ua , 2 ; move 5 , 2 ) 
[19812] c:0 is:( move 9 , 4 + 3 ; move ul , ul ; move ua , 2 )  decode:( move 9 , 4 + 3 ; move ua , 6 ) 
[19813] c:0 is:( move 4 , 3 / 4 ; move ul , ul ; move 3 , ul )  decode:( move 2 - ua , 4 ; move 3 , 2 ) 
[19814] c:0 is:( move 2 , 2 ; loop 0 , 5 , move 4 / 2 , v0 )  decode:loop 0 , 3 , move 4 , 2 / v0 
[19815] c:0 is:( move 3 , 3 * 2 ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move 2 - ua , 0 - 4 0 
[19816] c:0 is:( v0 = 3 ; loop 1 , 5 , move v0 + 3 , 4 )  decode:loop 0 , 4 , move ua , 4 5 * 4 
[19817] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + v0 , v0  decode:loop 0 , 3 , move 0 - 4 , 4 / v0 
[19818] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 , v0 + v0  decode:loop 0 , 4 , move 2 , 2 + v0 
[19819] c:0 is:loop 0 , 3 , loop 1 , 2 , move v1 + v0 , v0  decode:loop 0 , 3 , move 3 , 2 
[19820] c:0 is:( move ua + ul , ul ; move ua + ul , ua * ua )  decode:( move 8 , ul ; move ua + ul , 8 ) 
[19821] c:0 is:( move ua + ul , ua * ua ; move ua , ua * ua )  decode:loop 0 , 2 , move 4 + 3 , ua * ua 
[19822] c:0 is:( move ua , 0 ; move ul , 0 - 3 ; move ua , ul )  decode:( move 5 , 0 ; move 7 , ua / 3 ) 
[19823] c:0 is:( move ul , ua - ul ; move ua + ul , ua - ul )  decode:( move ul , ul ; move ua + ul , 5 ) 
[19824] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + v0 , v1  decode:loop 0 , 4 , move ua - 4 , 3 + v0 
[19825] c:0 is:( move ua + ul , ul ; move ul - ua , ua * ua )  decode:( move ua , 9 ; move ua , 4 / 3 ) 
[19826] c:0 is:( move ul - ua , ua * ua ; move ua + ul , ul )  decode:( move ua , 6 ; move ua + ul , ul ) 
[19827] c:0 is:loop 0 , 7 , ( v1 = 2 ; move 3 , v1 / 3 )  decode:loop 0 , 4 , move 7 ; move 7 - 4 - 3 
[19828] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + v1 , v0  decode:loop 0 , 4 , move 3 , 0 - v0 
[19829] c:0 is:( move ua + ul , ul ; move ua - ul , ua * ua )  decode:( move 7 , ul ; move 5 , ua * ua ) 
[19830] c:0 is:( move ul - ua , ua * ua ; move ua , ua * ua )  decode:loop 0 , 2 , move ua , ua / 8 
[19831] c:0 is:loop 0 , 5 , loop 1 , 0 , move v1 - v0 , v0  decode:loop 0 , 4 , move 3 - v0 , ua / 3 
[19832] c:0 is:( move ua , 0 ; move 2 , ul ; move 2 - ua , ua )  decode:( move ua , ul ; move ua , 0 - 3 ) 
[19833] c:0 is:loop 0 , 7 , ( move 4 + 4 , 4 ; v1 = v0 )  decode:loop 0 , 4 , move ua + ua , ua - 0 0 v0 
[19834] c:0 is:( move ua , ua ; move 0 - 2 , 2 ; move ua , ul )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[19835] c:0 is:( move 0 - ua , 0 ; move 3 , ul ; move ua , ul )  decode:( move ua , 0 ; move 9 , 2 ) 
[19836] c:0 is:( move ua - ul , ul ; move ul + ua , ua * ua )  decode:( move 5 , ul ; move ua + ul , 8 ) 
[19837] c:0 is:( move 0 - ua , 0 ; move ua , ul ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , ua * ua 
[19838] c:0 is:( move ua , 0 ; move 2 , ua - 2 ; move ua , ul )  decode:loop 0 , 3 , move 2 - ua , v0 - ul 
[19839] c:0 is:( move ul , 0 ; move ua + 2 , ul ; move 2 , ul )  decode:( move 2 , ul ; move ua + 2 , ul ) 
[19840] c:0 is:( move ua - 2 , 0 ; move 2 , ul ; move ua , ul )  decode:( move 4 , 0 ; move ua + ul , 5 ) 
[19841] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , v1 - v0  decode:( move ul , ul ; move 4 , 2 ) 
[19842] c:0 is:( move ua + ul , 2 ; move ua , 2 ; move ua , 2 )  decode:loop 0 , 3 , move ua + ul , 2 
[19843] c:0 is:( move ua - ul , ul ; move ua - ul , ua * ua )  decode:( move 5 , ul ; move 5 , ua * ua ) 
[19844] c:0 is:loop 0 , 6 , loop 1 , 0 , move v1 - v0 , v0  decode:loop 0 , 3 , move 4 + v0 , 0 - 4 
[19845] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 , v0 - v1  decode:( move 2 , 2 / 6 ; move 4 , 2 ) 
[19846] c:0 is:( move ua + ul , ul / ua ; move ua , ua * ua )  decode:( move ua + ul , ul ; move ua , 8 ) 
[19847] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + v1 , v1  decode:loop 0 , 4 , move 3 , 2 
[19848] c:0 is:( move ua - ul , ua * ua ; move ua - ul , ul )  decode:( move 5 , 8 ; move ul - ua , ul ) 
[19849] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 * v0 , v1  decode:( move 6 , 2 ; move 4 , ul ) 
[19850] c:0 is:( move ua , ul / ua ; move ua + ul , ua * ua )  decode:( move ua , ul / ua ; move 8 , 8 ) 
[19851] c:0 is:( move ua + ul , 0 ; move 2 , ul ; move 2 , ul )  decode:( move ua + ul , 0 ; move 3 , 2 ) 
[19852] c:0 is:( move ua + ul , 0 ; move 3 , ul ; move ua , 2 )  decode:( move 9 , 0 ; move ua + 2 , 2 ) 
[19853] c:0 is:( move ul - ua , ul ; move ul - ua , ua * ua )  decode:( move ul - ua , ul ; move 5 , 8 ) 
[19854] c:0 is:( move ua + ul , 0 ; move ua , 2 ; move 3 , ul )  decode:loop 0 , 3 , move ua + v0 , 2 / 3 
[19855] c:0 is:( move 0 - 3 , 0 ; move ul , ul ; move ua , ul )  decode:( move 3 , 0 ; move ua + ul , 2 ) 
[19856] c:0 is:( move ua , 0 ; move ua , ua - 4 ; move ua , 3 )  decode:loop 0 , 3 , move ua , 0 - 3 0 * 3 
[19857] c:0 is:( move ua , 0 - 2 ; move ul , ul ; move ua , 3 )  decode:( move ua , 0 - 2 ; move ua , 3 ) 
[19858] c:0 is:( move ua - ul , 0 ; move 2 , ul ; move 2 , ul )  decode:( move ua , 0 ; move 3 , 4 / 3 ) 
[19859] c:0 is:( move ua , 0 - 3 ; move 2 , ul ; move ua , ul )  decode:loop 0 , 3 , move 0 - 4 , 2 - 3 
[19860] c:0 is:( move ua , 2 + 2 ; loop 0 , ua , move ul , ul )  decode:( move ua , 4 ; move 4 , 0 - 4 ) 
[19861] c:0 is:( loop 0 , 2 , move ul - ua , 2 ; move ua , ua )  decode:( move ul - ua , ul ; move 5 , 2 ) 
[19862] c:0 is:( move ua , 0 - ul ; move 2 , ul ; move ua , 3 )  decode:( move ua , 2 - 3 ; move 5 , 4 ) 
[19863] c:0 is:( move ua , ua * ua ; loop 0 , 2 , move ua , 2 )  decode:loop 0 , 3 , move ua , 3 + 3 / v0 
[19864] c:0 is:( move ua + ul , ul / ua ; move ul - ua , ul )  decode:loop 0 , 4 , move 3 , v0 - ua 
[19865] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 * v1 , v0  decode:( move ul - ua , 3 ; move 5 , 7 ) 
[19866] c:0 is:( move ua + 2 , 0 ; move ul , ul ; move 3 , ul )  decode:( move ua + 3 , 0 ; move 3 , 2 ) 
[19867] c:0 is:( move ua + ul , 2 ; move 2 , 2 ; move ua , ul )  decode:( move ua + 2 , 2 ; move ua , 4 ) 
[19868] c:0 is:( move ua + ul , 0 ; move ul , 3 ; move 2 , ul )  decode:( move ua + ul , 0 ; move 2 , 4 ) 
[19869] c:0 is:( move ua + ul , 0 ; move 3 , ul ; move 2 , ul )  decode:( move ua + 3 , 0 ; move 4 , ul ) 
[19870] c:0 is:( move ua , 0 ; move ua - 3 , 3 ; move ua , ul )  decode:( move ua , 0 ; move ul - ua , ul ) 
[19871] c:0 is:( move ua , 0 - 2 ; move 3 , ul ; move ua , ul )  decode:( move 9 , 0 - 2 ; move ua , 2 ) 
[19872] c:0 is:( move 3 - ua , 0 ; move 3 , ul ; move ua , ul )  decode:( move 3 , 0 ; move 9 , 2 ) 
[19873] c:0 is:( move ua + ul , ul ; loop 0 , 3 , move ua , 2 )  decode:loop 0 , 4 , move 4 + v0 , 4 / 3 
[19874] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 2 , v0 )  decode:loop 0 , 3 , move 3 , 4 / v0 
[19875] c:0 is:( move ul - ua , ul / ua ; move ul - ua , ul )  decode:( move 5 , 0 - 3 ; move 5 , ul ) 
[19876] c:0 is:( move 2 , 0 ; move ul , 4 ; move ua + ul , ul )  decode:( move 2 , 0 ; move 8 , 2 ) 
[19877] c:0 is:( move ua , 0 ; move ul , 2 ; move 4 - ua , ul )  decode:( move ua , 0 ; move 4 - ua , 4 ) 
[19878] c:0 is:( move 4 - ua , 0 ; move 2 , ul ; move ua , ul )  decode:( move 2 , 0 - 9 ; move 8 , 2 ) 
[19879] c:0 is:loop 0 , 3 , ( move 2 , v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 3 , v0 * ua 
[19880] c:0 is:( move ul , ua ; move ua , 3 + 2 ; move ua , 3 )  decode:loop 0 , 4 , move 3 , v0 + 2 
[19881] c:0 is:( move ua + ul , 0 ; move 2 , ul ; move 4 , ul )  decode:( move ua + 2 , 0 ; move 5 , 2 ) 
[19882] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 * v1 , v1  decode:( move ua - ul , 3 ; move 5 , 2 ) 
[19883] c:0 is:( move 3 , 0 - 2 ; move ul , ul ; move ua , ul )  decode:( move ua , 0 ; move 3 , 0 - 2 ) 
[19884] c:0 is:( move ua , ua ; loop 0 , 3 , move ua - ul , 2 )  decode:loop 0 , 4 , move ul - ua , 2 
[19885] c:0 is:( move ul - ua , ul / ua ; move ua - ul , ul )  decode:( move 5 , 0 - 3 ; move 5 , 4 ) 
[19886] c:0 is:( move ua , 0 - ul ; move 3 , 3 ; move ua , ul )  decode:loop 0 , 4 , move 3 - ua , v0 + 2 
[19887] c:0 is:( move ua , ua ; loop 0 , 3 , move ua , ua - 3 )  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[19888] c:0 is:( move ua + ul , ul ; move 2 , 3 ; move ua , 2 )  decode:( move ua , ul ; move ua + ul , 5 ) 
[19889] c:0 is:( move ua , 0 ; move ul - 3 , 3 ; move ua , ul )  decode:( move ua + 2 , 0 ; move 7 , 4 ) 
[19890] c:0 is:( move ua , 0 ; move ua - 4 , 3 ; move ua , ul )  decode:( move 0 - ua , 0 ; move ua , ul ) 
[19891] c:0 is:( move 3 , 0 ; move ul - ua , ul ; move 2 , ul )  decode:( move ul - ua , ul ; move 5 , ul ) 
[19892] c:0 is:( move 0 - 3 , ul ; move 2 , ul ; move ua , ul )  decode:( move 3 - ua , ul ; move 8 , ul ) 
[19893] c:0 is:( move ua , 0 - 3 ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 - 2 
[19894] c:0 is:( move ua + ul , ua ; loop 0 , 3 , move ua , 3 )  decode:loop 0 , 4 , move 3 + 3 , 3 
[19895] c:0 is:( move ua , ua - 2 ; move 3 , 2 ; move ua , ul )  decode:loop 0 , 3 , move ua - v0 , ul - 3 
[19896] c:0 is:( move ua , 0 - 2 ; move ul , ul ; move ua , 4 )  decode:( move ua , 0 ; move 8 , 4 / 3 ) 
[19897] c:0 is:( loop 0 , 4 , move v0 , v0 ; move v0 , 2 )  decode:loop 0 , 4 , move 2 , 3 + 8 
[19898] c:0 is:loop 0 , 3 , ( move ul - ua , ua ; move ul , 2 )  decode:loop 0 , 3 , move ua , 0 - v0 
[19899] c:0 is:( move 4 , 0 ; move ul - 2 , ul ; move ua , ul )  decode:( move 4 , 0 ; move ua , ua * ua ) 
[19900] c:0 is:( loop 0 , 4 , move 2 , v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 3 , v0 0 
[19901] c:0 is:loop 0 , 7 , loop 1 , ul , move ua - 2 , ua * ua  decode:loop 0 , 4 , move 5 - ua , 0 - 8 
[19902] c:0 is:( move ua - ul , 0 ; move ul , 3 ; move 3 , ul )  decode:( move 5 , 0 ; move 3 - ua , 4 ) 
[19903] c:0 is:loop 0 , 3 , ( move ul , ul + ul ; move ua , 2 )  decode:loop 0 , 3 , move ua + v0 , 0 - 9 
[19904] c:0 is:( move ua , 2 - 3 ; move ul , ul ; move ua , 2 )  decode:( move ua , 2 - 3 ; move ua , 3 ) 
[19905] c:0 is:( move ua , 0 ; loop 0 , 2 , move 2 , 3 + v0 )  decode:( move ua , 0 ; move 3 , 4 * 3 ) 
[19906] c:0 is:( move 4 , ul ; move ua , 2 ; move ua + ul , 2 )  decode:( move 7 , 0 - ul ; move 7 , 2 ) 
[19907] c:0 is:loop 0 , 3 , ( move 3 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 0 
[19908] c:0 is:( move 4 , 0 - 2 ; move ul , ul ; move ua , ul )  decode:( move ua , 0 - 3 ; move 5 , 2 ) 
[19909] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 3 , v0 )  decode:loop 0 , 4 , move 3 , v0 * ua 
[19910] c:0 is:( move ua , 0 - 4 ; move ul , ul ; move ua , 3 )  decode:( move ua , 0 - 4 ; move 5 , 4 ) 
[19911] c:0 is:( move ua , 0 ; move ul , ul - 4 ; move 2 , ul )  decode:( move ua , 0 ; move 3 , 0 - 4 ) 
[19912] c:0 is:( move 0 - ua , ua ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[19913] c:0 is:loop 0 , 3 , ( move ua , 2 ; move ul + ul , ul )  decode:loop 0 , 4 , move ua , 2 / v0 
[19914] c:0 is:( move 4 , 0 ; move ua , ul ; move 3 - ua , ul )  decode:( move 4 , 0 ; move 9 , ul ) 
[19915] c:0 is:( move ua + ul , ua ; loop 0 , 3 , move ua , 4 )  decode:loop 0 , 4 , move ua , 0 - v0 * 4 
[19916] c:0 is:( move ua + ul , 3 ; move 3 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 4 , 3 + v0 
[19917] c:0 is:( move ua , 0 ; move 3 , ul - 4 ; move ua , ul )  decode:( move ua , 0 - 3 ; move ua , 2 ) 
[19918] c:0 is:( move 0 - ua , ul ; move 3 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 0 - 4 , ul + v0 
[19919] c:0 is:( move 3 + ua , 2 ; move ul , 3 ; move ua , ul )  decode:( move 9 , 2 ; move ua + ul , 4 ) 
[19920] c:0 is:( move ua + ul , ul ; loop 0 , 3 , move ua , 3 )  decode:loop 0 , 4 , move v0 - 7 , 4 * 4 
[19921] c:0 is:( move ua + 2 , ul ; move ua , 2 ; move 4 , ul )  decode:( move 9 , ul ; move 9 , 2 ) 
[19922] c:0 is:( move 4 - ua , 0 ; move 3 , ul ; move ua , ul )  decode:( move 3 , 0 ; move 9 , ul ) 
[19923] c:0 is:( move ua , 2 - 3 ; move ul , ul ; move ua , 3 )  decode:( move ua , 0 - 2 ; move 5 , 4 ) 
[19924] c:0 is:loop 0 , 2 , loop 1 , 2 , move ua - 3 , v0 - 4  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[19925] c:0 is:( move ua , 2 ; move ul , 3 ; move ua + ul , 4 )  decode:( move 5 , 2 ; move ua + ul , 7 ) 
[19926] c:0 is:( move ua , 4 ; move ul , 2 ; move ua - 2 , ul )  decode:( move ua , 4 ; move 5 , 2 ) 
[19927] c:0 is:( move 4 - ua , 0 ; move ul , ul ; move 3 , ul )  decode:( move 2 , 0 ; move 4 , 2 ) 
[19928] c:0 is:( move ua + ul , 3 ; move 2 , ul ; move 3 , ul )  decode:( move ua + 3 , 3 ; move 4 , 2 ) 
[19929] c:0 is:( move 0 - ua , ul ; move 3 , ul ; move 4 , ul )  decode:( move 5 , ul ; move ua + ul , 4 ) 
[19930] c:0 is:( loop 1 , 5 , move ul , 0 - ul ; move ua , ua )  decode:( move 2 , 4 + 9 ; move 8 , 2 ) 
[19931] c:0 is:( move ua + ul , 3 ; move 2 , 4 ; move ua , ul )  decode:( move ua , 3 ; move 8 , 5 ) 
[19932] c:0 is:( move 0 - ul , ua ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 4 , move 0 - v0 , ua / 4 
[19933] c:0 is:( move ua + ul , 4 ; move 2 , 3 ; move ua , ul )  decode:( move ua , 4 ; move 8 , 4 + 4 ) 
[19934] c:0 is:( move ul - ua , 3 ; move 2 , ul ; move 2 , ul )  decode:( move 4 , 3 ; move 4 , 2 ) 
[19935] c:0 is:( move ul , 0 ; move ul , ul - 2 ; move 4 , ul )  decode:( move 4 , 0 ; move ul , ul ) 
[19936] c:0 is:( move ul , ua * ua ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua , 4 / 4 / v0 
[19937] c:0 is:( move ua , ua ; move 3 - ua , ul ; move 2 , 4 )  decode:( move ua , 0 ; move ul - ua , ul ) 
[19938] c:0 is:loop 0 , 3 , ( move ua - 2 , ul ; move ul , ul )  decode:loop 0 , 4 , move 4 , 3 + 3 / v0 
[19939] c:0 is:( move ua , 0 - 4 ; move ul , ul ; move 3 , ul )  decode:loop 0 , 4 , move ua - 4 , 0 - 4 
[19940] c:0 is:( move 4 , 0 ; move ul - 3 , ul ; move ua , ul )  decode:( move 4 , 0 ; move ua , 4 * 4 ) 
[19941] c:0 is:( move ua + ul , ul ; loop 0 , 4 , move ua , 3 )  decode:loop 0 , 4 , move v0 - ua , 0 - 3 
[19942] c:0 is:( move 3 , ua ; move ua , 2 ; move ul , 4 + ul )  decode:( move 3 , 0 ; move 7 , 2 ) 
[19943] c:0 is:( move ua , 3 ; move ul , 3 ; move ua + 3 , ul )  decode:( move ul - ua , 3 ; move 7 , 4 ) 
[19944] c:0 is:( move ua , 0 ; move ul - 3 , ul ; move 4 , ul )  decode:( move ua , 0 ; move ; move 5 , 4 ) 
[19945] c:0 is:( move ua , 0 ; move 4 , ul - 4 ; move ua , ul )  decode:loop 0 , 3 , move 0 - ua , v0 - 3 
[19946] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , 2 )  decode:loop 0 , 4 , move 3 - ua , 9 / v0 
[19947] c:0 is:( move ua , 3 ; loop 0 , 4 , move ua , ua * ua )  decode:loop 0 , 4 , move 0 - ua , ua * 8 
[19948] c:0 is:( move ua - ul , 0 ; move ul , 4 ; move 3 , ul )  decode:( move 5 , 0 ; move 4 , ua * ua ) 
[19949] c:0 is:( move 2 - ua , 2 ; move ul , ul ; move 3 , ul )  decode:( move 4 , 4 ; move 3 , 2 / 3 ) 
[19950] c:0 is:( move 2 , ul ; move 2 + 4 , ul ; move ua , ul )  decode:( move ua + ul , ul ; move 9 , 2 ) 
[19951] c:0 is:( move ua , 3 ; move 3 , ul ; move ua , ua - 3 )  decode:( move ua , ul ; move 3 + 3 , 3 ) 
[19952] c:0 is:( move ua , ul ; loop 0 , 3 , move 3 , ua * ua )  decode:loop 0 , 4 , move 4 , 4 * v0 
[19953] c:0 is:( move 0 - ua , 4 ; move ul , ul ; move 3 , ul )  decode:( move ul - ua , 4 ; move 4 , 2 ) 
[19954] c:0 is:( move ua + ul , 4 ; move 3 , ul ; move ua , 2 )  decode:( move ua + 2 , 4 ; move ua , 2 ) 
[19955] c:0 is:( move ua , ua - 3 ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 4 , move v0 - ua , 0 - 3 
[19956] c:0 is:( move ua + ul , ul ; move 2 , 3 ; move 3 , ul )  decode:( move ua , ul ; move 4 , 4 * 4 ) 
[19957] c:0 is:( move ul , ul ; move 2 , 4 + ul ; move ua , 2 )  decode:( move ua , ul / 3 ; move ua , 2 ) 
[19958] c:0 is:( move 4 , ul ; move ul - ua , 4 ; move ua , 0 )  decode:( move 4 , ul ; move 5 , 4 / ua ) 
[19959] c:0 is:( move ua - ul , 3 ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[19960] c:0 is:( move 3 + 2 , ua ; move ua , ul ; move 4 , ul )  decode:loop 0 , 3 , move 4 , v0 - v0 
[19961] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move ua - 3 , v0 * 2 
[19962] c:0 is:( move ua + 3 , 4 ; move ul , 2 ; move ua , ul )  decode:( move 9 , 4 ; move ua , 4 * 4 ) 
[19963] c:0 is:( move 4 , 0 ; move ua , ul ; move ua - ul , 4 )  decode:( move ua + 2 , 0 ; move ua , 4 ) 
[19964] c:0 is:( move ua / 4 , 0 ; move ua , ul ; move 2 , ul )  decode:( move 2 , 0 ; move ua + ul , ul ) 
[19965] c:0 is:( move ua , ua ; loop 0 , 3 , move ua - 4 , ul )  decode:loop 0 , 4 , move 3 , v0 , ul 
[19966] c:0 is:( move ua , ua - 3 ; loop 0 , 3 , move ul , ul )  decode:( move 2 , ua / 4 ; move ua , 8 ) 
[19967] c:0 is:( move ua , 0 ; move ua - ul , 4 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , 0 - v0 * 4 
[19968] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 4 , v0 * 4 
[19969] c:0 is:loop 0 , 3 , ( move ul , ua ; move ua + ul , 4 )  decode:loop 0 , 3 , move ua + 2 , 4 
[19970] c:0 is:loop 0 , 3 , ( move v0 , 4 ; move v0 , v0 )  decode:loop 0 , 4 , move v0 , v0 - 4 
[19971] c:0 is:( move 3 , 0 - 4 ; move ul , ul ; move ua , ul )  decode:( move 3 , 0 - 4 ; move ua , 8 ) 
[19972] c:0 is:( loop 0 , 3 , move ua - 3 , ul ; move ul , ua )  decode:loop 0 , 3 , move 3 - ua , ul 
[19973] c:0 is:( move ua , 0 ; move ul , ul - 4 ; move 3 , ul )  decode:( move 3 , 0 ; move ua , 0 - 2 ) 
[19974] c:0 is:( move ua , ul ; move 3 , 2 ; move ul - 2 , ul )  decode:( move ua , ul ; move 3 , 2 ) 
[19975] c:0 is:( move ul , 0 ; move 4 + ul , ul ; move 3 , ul )  decode:( move 4 - ua , 2 ; move 4 , ul ) 
[19976] c:0 is:( move ul - ua , ul ; loop 0 , 3 , move 2 , ul )  decode:( move 0 - 4 , ul ; move ua , 5 ) 
[19977] c:0 is:( move ua + ul , 4 ; move 3 , 2 ; move ua , ul )  decode:( move ua + 2 , 4 ; move 8 , 2 ) 
[19978] c:0 is:( move ul , 2 - 3 ; move ua , ul ; move 3 , ul )  decode:( move ua + ul , 0 ; move 3 , ul ) 
[19979] c:0 is:( move ua + 3 , 4 ; move ul , ul ; move 2 , ul )  decode:( move ua + 3 , 4 ; move 2 , 5 ) 
[19980] c:0 is:( move 3 , ua - 3 ; move 3 , ul ; move ua , ul )  decode:loop 0 , 4 , move v0 - 4 , 2 / 3 
[19981] c:0 is:( move 4 , ul ; move 3 + 2 , ul ; move ua , ul )  decode:loop 0 , 3 , move 2 - ua , 2 - 3 
[19982] c:0 is:( move 2 + ul , 0 ; loop 0 , 4 , move 2 , v0 )  decode:( move ua , 0 ; move 3 , 4 ) 
[19983] c:0 is:( move ua - ul , 3 ; move 3 , ul ; move 2 , ul )  decode:loop 0 , 4 , move 4 - ua , 3 + v0 
[19984] c:0 is:( move 2 , ul ; 0 / move 4 , ul ; move ua , ul )  decode:( move 3 , ul ; move ua + ul , 5 ) 
[19985] c:0 is:( move ua + ul , ul ; loop 0 , 5 , move 2 , ul )  decode:( move ua + 3 , ul ; move ua , 2 ) 
[19986] c:0 is:( move ua , 4 + 4 ; move ua , ul ; move 2 , ul )  decode:( move 9 , 8 ; move ua , 2 - 3 ) 
[19987] c:0 is:( move ua , 3 ; move ul - ua , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 + v0 , 3 - 3 
[19988] c:0 is:( move ul , 2 ; move ul - ua , ul ; move 3 , 3 )  decode:( move ua + ul , 0 ; move ul , 2 ) 
[19989] c:0 is:( loop 0 , 4 , move ul , 4 ; move ua , ua + ul )  decode:( move 2 , 9 ; move ua + ul , 4 ) 
[19990] c:0 is:( move ul , ul ; move ua - 2 , 4 ; move 2 , ul )  decode:( move 4 , 9 ; move 4 , 0 - 2 ) 
[19991] c:0 is:( move ua - 3 , ul ; move ua , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 4 , 2 - v0 
[19992] c:0 is:( move 3 + ua , 2 ; move ul , ul ; move 4 , ul )  decode:( move ua + 3 , 2 ; move 4 , 2 ) 
[19993] c:0 is:( move 3 , 4 + ul ; move ua , 2 ; move ul , ul )  decode:( move 3 , 5 ; move ua , 2 ) 
[19994] c:0 is:( loop 0 , 5 , move 3 , ua + ul ; move ul , ua )  decode:loop 0 , 4 , move 4 , ul 
[19995] c:0 is:( move ua + ul , 3 ; move ul , 4 ; move 2 , ul )  decode:( move ua + ul , 3 ; move 3 , 5 ) 
[19996] c:0 is:( move 2 , ua / 3 ; move ua , 3 ; move ua , ul )  decode:( move ua , 3 ; move ua , 2 / 3 ) 
[19997] c:0 is:( move 3 , ul ; move ul , 2 ; move ua + ul , 4 )  decode:( move 3 , ua / 4 ; move ua , 9 ) 
[19998] c:0 is:( move ua , 3 / ua ; move 2 , 3 ; move ua , ul )  decode:( move 5 , ua / 4 ; move 9 , 4 ) 
[19999] c:0 is:( move 4 , 2 ; move ua + ul , ul ; move ua , 4 )  decode:loop 0 , 4 , move 4 , 3 + 3 / v0 
[20000] c:0 is:( move ua , ua - 3 ; move 3 , 4 ; move ua , ul )  decode:( move ua , 0 - 3 ; move 9 , ua ) 
[20001] c:0 is:( loop 0 , 6 , move 2 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , 0 - v0 * 2 
[20002] c:0 is:( move ua , ua / 3 ; loop 0 , 2 , move ul , ul )  decode:( move ua , 0 - 2 ; move ul , 5 ) 
[20003] c:0 is:( move ua , 3 / ua ; loop 0 , 2 , move ul , ul )  decode:( move ua , 2 / 4 ; move 2 , 2 ) 
[20004] c:0 is:( move 4 - ua , 0 ; move ul , ul ; move 4 , ul )  decode:( move 2 , 0 - 2 ; move 5 , 2 ) 
[20005] c:0 is:( move ua + 3 , ul ; loop 0 , 4 , move ul , ul )  decode:( move ua + 3 , ul ; move 2 , 2 ) 
[20006] c:0 is:( move 2 , ul ; move ua - 3 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 , 3 / v0 
[20007] c:0 is:( move 3 , 3 ; move ua - 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move ua - 3 , ul / v0 
[20008] c:0 is:( move ua , ul / ua ; loop 0 , 3 , move 2 , ul )  decode:loop 0 , 4 , move 3 , v0 - 3 
[20009] c:0 is:( move ua , ua - ul ; move 3 , 3 ; move 3 , ul )  decode:( move ua , 2 ; move 5 , 3 ) 
[20010] c:0 is:( move 2 , ua ; move ul , 4 ; move ua , ua - 4 )  decode:( move 0 - 4 , 0 ; move 3 , 3 ) 
[20011] c:0 is:( move ua + ul , 3 ; move 2 , ul ; move 4 , ul )  decode:( move ua + 2 , 3 ; move 5 , 2 ) 
[20012] c:0 is:( loop 0 , 6 , move v0 , v0 ; move v0 , 2 )  decode:loop 0 , 4 , move 4 , 4 + 4 / v0 
[20013] c:0 is:( move ua + 4 , 4 ; move ul , 2 ; move ua , ul )  decode:( move 4 + 4 , 4 ; move ua , 4 ) 
[20014] c:0 is:( move 4 + ua , 4 ; move ul , ul ; move ua , 2 )  decode:( move ua + 4 , 4 ; move ua , 6 ) 
[20015] c:0 is:( move ua , 2 ; move 3 , ul / ua ; move 2 , ul )  decode:( move 9 , 0 ; move 9 , 2 - 3 ) 
[20016] c:0 is:( move ua , 3 ; move ul , 2 / ua ; move 2 , ul )  decode:( move ua + ul , 3 ; move 5 , 5 ) 
[20017] c:0 is:( move 4 , 0 - 4 ; move ul , ul ; move ua , ul )  decode:( move 4 , 0 - 4 ; move ua , 5 ) 
[20018] c:0 is:( loop 0 , 6 , move v0 , v0 ; move 2 , v0 )  decode:loop 0 , 4 , move 4 , v0 + 4 
[20019] c:0 is:loop 0 , 5 , loop 1 , 0 , move 4 - ua , v1 - 2  decode:loop 0 , 4 , move 4 - ua , 0 - 9 
[20020] c:0 is:( move ul , 4 ; move 2 , ua * ua ; move 2 , ul )  decode:( move 2 , 4 ; move 3 , 4 ) 
[20021] c:0 is:( move 4 , 0 ; ul - move ua , ul ; move 4 , ul )  decode:( move 4 , 0 ; move ; move 8 , 2 ) 
[20022] c:0 is:( move 4 + 3 , 2 ; move ul , ul ; move ua , ul )  decode:loop 0 , 2 , move ua + v0 , 2 
[20023] c:0 is:( move ua , ua ; loop 0 , 5 , move ul , ul - 2 )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[20024] c:0 is:( move ua , 4 + 3 ; move ul , ul ; move ua , 3 )  decode:( move ua + ul , 4 + v0 , 4 ) 
[20025] c:0 is:( move ua + ul , 4 ; move 3 , 3 ; move ua , ul )  decode:( move ua , 4 ; move 9 , 4 * 4 ) 
[20026] c:0 is:( move ua , ul ; loop 0 , 3 , move ua - ul , 4 )  decode:loop 0 , 4 , move v0 - ua , 4 
[20027] c:0 is:( move 4 , 0 - ul ; move ul , ul ; move ua , 4 )  decode:( move 5 , ul - 7 ; move 5 , 7 ) 
[20028] c:0 is:( move 4 , ul - 2 ; move ul , ul ; move ua , 2 )  decode:( move ua , 2 - 3 ; move ua , 4 ) 
[20029] c:0 is:( move ua , ul - 2 ; move ua , 4 ; move 4 , ul )  decode:( move ua , 2 - 3 ; move ua , 4 ) 
[20030] c:0 is:( loop 1 , 5 , move 2 , ul ; move ua + ul , ul )  decode:loop 0 , 4 , move 4 , 4 * v0 
[20031] c:0 is:( move ua + ul , 4 ; move 2 , ul ; move 4 , ul )  decode:( move ua + 2 , 4 ; move 5 , 5 ) 
[20032] c:0 is:( loop 0 , 5 , move 4 , v0 ; move v0 , v0 )  decode:0 0 loop 0 , 4 , move 5 , v0 * 4 
[20033] c:0 is:( move ua , 3 ; move ul - 2 , ul ; move 4 , ul )  decode:( move ua , 3 ; move 4 , 0 - 4 ) 
[20034] c:0 is:( move ua , ul / ua ; loop 0 , 3 , move ua , 4 )  decode:loop 0 , 4 , move ul - ua , 0 - 2 
[20035] c:0 is:( move 4 , ul ; move 2 - ua , 4 ; move ua , ul )  decode:( move 2 - 7 , 9 ; move 5 , ul ) 
[20036] c:0 is:( loop 0 , 6 , move 3 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , v0 - 4 
[20037] c:0 is:( move ua + 3 , 4 ; move ul , ul ; move 3 , ul )  decode:( move ua + 3 , 4 ; move 3 , 2 ) 
[20038] c:0 is:( move ua , 4 ; move ul , ul ; move 4 + 2 , ul )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[20039] c:0 is:( move 2 , ul ; move ul + 4 , 4 ; move ua , ul )  decode:( move ua , 5 ; move 3 + 4 , ul ) 
[20040] c:0 is:( move ua - ul , ul ; move 3 , 2 ; move 4 , ul )  decode:loop 0 , 3 , move 4 , ul - v0 
[20041] c:0 is:( move ua - ul , 3 ; move 4 , ul ; move ua , 3 )  decode:( move ua + ul , 3 ; move 5 , 3 ) 
[20042] c:0 is:( move ua , 3 ; move ul - 3 , 4 ; move ua , ul )  decode:( move ua + 2 , 3 ; move 5 , 5 ) 
[20043] c:0 is:( move 4 , ul ; move 2 , ul ; move ua - ul , 3 )  decode:( move 5 , ul ; move 5 , 4 ) 
[20044] c:0 is:( move 4 , 4 ; move ul , ul ; move ua + ul , 2 )  decode:( move 4 , 4 ; move ua + ul , 2 ) 
[20045] c:0 is:( loop 0 , 3 , move ul + ul , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , ul 
[20046] c:0 is:( loop 0 , 6 , move v0 , v0 ; move 3 , v0 )  decode:loop 0 , 4 , move 4 , 2 - v0 0 
[20047] c:0 is:( move ua / 3 , ul ; move ua , 2 ; move ua , 4 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[20048] c:0 is:( move ua , 3 ; move ul , ul - 3 ; move ua , 4 )  decode:( move ua , 3 ; move ua , ua * ua ) 
[20049] c:0 is:( move ua - ul , 3 ; move 2 , ul ; move 4 , ul )  decode:( move ua , 3 ; move 4 , 5 ) 
[20050] c:0 is:( move ua + ul , 4 ; move 4 , 3 ; move ua , ul )  decode:loop 0 , 4 , move v0 * 3 , 4 / 4 
[20051] c:0 is:( move ua , 4 * 2 ; move 3 , ul ; move ua , ul )  decode:( move 4 + 3 , 8 ; move 8 , 2 ) 
[20052] c:0 is:( move ua - ul , 3 ; move 3 , ul ; move 3 , ul )  decode:( move 4 , 3 ; move ul - ua , 2 ) 
[20053] c:0 is:loop 0 , 3 , ( move 2 , 0 ; move ua , v0 - 4 )  decode:loop 0 , 3 , move ua + v0 , 9 ) 
[20054] c:0 is:( move 3 , ul ; move ul - ua , ul ; move 4 , 2 )  decode:loop 0 , 3 , move 4 , 2 / 3 
[20055] c:0 is:( loop 0 , 6 , move v0 , 3 ; move v0 , v0 )  decode:( move ua , ul ; move ua , 4 / 3 ) 
[20056] c:0 is:( move ul - ua , 4 ; loop 0 , 3 , move ul , ul )  decode:( move 4 , 7 ; move 4 , 0 - 2 ) 
[20057] c:0 is:loop 0 , 3 , ( move ua , ul ; move 3 / ua , ul )  decode:0 loop 0 , 3 , move ua + ul , 2 
[20058] c:0 is:( loop 0 , 5 , move v0 , v0 ; move 4 , v0 )  decode:loop 0 , 3 , move 2 - ua , 0 - 4 
[20059] c:0 is:( move 3 , 3 ; move ul , ul ; move ua + ul , 4 )  decode:( move 4 , 3 ; move ua + ul , 5 ) 
[20060] c:0 is:( move ua , ul ; move ul , 4 ; move ua , 4 + 3 )  decode:( move ua , ul ; move ua + ul , 9 ) 
[20061] c:0 is:( move ua , ul - 3 ; move ua , 3 ; move 4 , ul )  decode:( move 9 , ul ; move ua , 4 / 3 / ) 3 
[20062] c:0 is:( loop 0 , 5 , move ul - 2 , ul ; move ua , ul )  decode:( move ua + ul , 9 ; move ua , 9 ) 
[20063] c:0 is:( move 4 + 2 , ul ; move ul , ul ; move ua , 4 )  decode:( move ua , ul ; move ua , 5 ) 
[20064] c:0 is:( move ul , 4 ; move ul - ua , ul ; move 3 , 2 )  decode:( move ua , ua + 4 ; move 3 , 2 ) 
[20065] c:0 is:( move ua , 2 ; move 3 , ul ; move 3 , ul / ua )  decode:( move ua , 2 ; move ua , ul ) 
[20066] c:0 is:( move ua , ua - ul ; loop 0 , 6 , move ua , 3 )  decode:loop 0 , 4 , move ua , 0 - 3 
[20067] c:0 is:( move ua , 3 ; move 3 , 4 + ul ; move ul , ul )  decode:( move ua , 3 ; move 4 , 5 ) 
[20068] c:0 is:( move ul , ua * ua ; loop 0 , 5 , move 2 , ul )  decode:0 loop 0 , 4 , move 0 - 3 , 0 - 4 
[20069] c:0 is:( move 4 , ua ; move ul , ua * ua ; move 3 , 3 )  decode:loop 0 , 3 , move ua - 4 , v0 / 4 
[20070] c:0 is:( move ua , 2 / 4 ; move 2 , ul ; move ua , ul )  decode:( move ua , 3 / ua ; move ua , 2 ) 
[20071] c:0 is:( loop 0 , 6 , move v0 , v0 ; move v0 , 3 )  decode:loop 0 , 4 , move 2 - ua , v0 - 4 
[20072] c:0 is:( move ua , ul ; move ul , 4 + 4 ; move ua , 3 )  decode:( move ua , 9 ; move ua , 9 + 4 ) 
[20073] c:0 is:( move 3 , 2 ; loop 0 , 3 , move ua , 2 + v0 )  decode:loop 0 , 4 , move ua , v0 + 4 
[20074] c:0 is:( move ua , 4 / ua ; move ua , 2 ; move ua , 4 )  decode:loop 0 , 3 , move ua , 4 / v0 
[20075] c:0 is:( move ul - ua , 4 ; move 3 , ul ; move 2 , ul )  decode:( move 2 - ua , 4 ; move 5 , ul ) 
[20076] c:0 is:( move ua , 3 ; move ul , ul ; move 3 + 4 , ul )  decode:( move ua , 3 ; move 8 , 2 ) 
[20077] c:0 is:loop 0 , 3 , loop 1 , 2 , move 3 - ul , 4 - v0  decode:loop 0 , 4 , move ua - 4 , v0 + 9 
[20078] c:0 is:( move 4 , 4 ; move ua - ul , ul ; move ua , 2 )  decode:loop 0 , 4 , move 0 - 4 , 4 / v0 
[20079] c:0 is:loop 0 , 3 , ( move ul - 4 , ul ; move ua , ul )  decode:0 loop 0 , 4 , move v0 - 7 , 4 
[20080] c:0 is:( move ul , ul + ul ; loop 0 , 6 , move ua , 2 )  decode:loop 0 , 4 , move ua + ul , 0 - 2 
[20081] c:0 is:( move 4 , ul ; move ul , 2 ; move 3 - ua , ul )  decode:( move 3 , ul ; move 4 , 5 ) 
[20082] c:0 is:( move ul , ua * ua ; loop 0 , 3 , move 4 , ul )  decode:loop 0 , 3 , move 0 - 4 , 0 - 0 4 
[20083] c:0 is:( loop 0 , 5 , move ua , 4 ; move ua , ua - ul )  decode:loop 0 , 4 , move 0 - 8 , 0 - 0 4 4 * 
[20084] c:0 is:( move ua + 2 , ul ; loop 0 , 6 , move ul , ul )  decode:( move 9 , ul ; move 4 , 4 + 4 ) 
[20085] c:0 is:( move ua , 4 ; move ul , ul ; move 3 , ul - 2 )  decode:( move 4 , 4 ; move ul - ua , 3 ) 
[20086] c:0 is:( move ul , ul ; loop 0 , 2 , move ul - 4 , ul )  decode:( move 3 , 3 ; move 4 , 0 - 2 ) 
[20087] c:0 is:( move ua - ul , 4 ; move 3 , 3 ; move ua , ul )  decode:( move 2 - ua , 4 ; move ua , 3 ) 
[20088] c:0 is:( move 3 , ua * ua ; move 4 , 3 ; move ua , ul )  decode:( move ua , 9 + 2 ; move ua , 4 ) 
[20089] c:0 is:( move ua - 4 , 3 ; move ul , ul ; move 2 , ul )  decode:( move 3 , 3 ; move 2 , 5 ) 
[20090] c:0 is:( move 4 , 2 - 3 ; move ul , ul ; move ua , ul )  decode:( move 3 , 2 - 3 ; move ua , 2 ) 
[20091] c:0 is:( move 3 , ul ; 3 - move ua , ul ; move 4 , ul )  decode:( move ua , ua / 2 ; move 3 , ul ) 
[20092] c:0 is:( move 4 , ul ; move 4 , ul ; move 2 - ua , ul )  decode:( move 8 , ua / 4 ; move 4 , 2 ) 
[20093] c:0 is:( move ua , ua ; loop 0 , 6 , move 4 , ua - ul )  decode:loop 0 , 4 , move 4 + 4 , 0 - 0 4 4 4 / 
[20094] c:0 is:( loop 0 , 6 , move v0 , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move 2 - ua , 7 * 3 
[20095] c:0 is:( move 3 - ua , ul ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 3 , move v0 + ul , v0 0 4 + 
[20096] c:0 is:( move 3 - ua , ul ; move ul , ul ; move 4 , 3 )  decode:( move 3 , 4 ; move 4 , ul ) 
[20097] c:0 is:( move ua , ul / 3 ; move 3 , ul ; move ua , 3 )  decode:loop 0 , 4 , move 4 , v0 - 9 
[20098] c:0 is:( loop 0 , 6 , move 4 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - 4 * 4 
[20099] c:0 is:( move ul , ul ; loop 0 , 5 , move ua , ul - 3 )  decode:loop 0 , 4 , move 4 + 3 , 0 - 4 2 
[20100] c:0 is:( move 4 , 3 ; move ul , ua - ul ; move 3 , ul )  decode:( move 3 , 3 ; move 4 , 4 * 4 ) 
[20101] c:0 is:( move ua , ua - 3 ; move ul , 4 ; move 4 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 * 4 
[20102] c:0 is:( move 4 , ul ; move ua , 2 * 3 ; move ul , ul )  decode:( move 2 , ul ; move 4 + 4 , ul ) 
[20103] c:0 is:( move ua , ua * ua ; loop 0 , 5 , move ul , 4 )  decode:( move 2 , ua / 3 ; move ua , 3 ) 
[20104] c:0 is:( move ul , ua / 2 ; move 3 , 4 ; move ua , ul )  decode:( move 3 , 7 ; move ua + 2 , 4 ) 
[20105] c:0 is:( move 2 , ul ; move ua , ul / 4 ; move ua , 3 )  decode:( move ua + 2 , ul ; move ua , 3 ) 
[20106] c:0 is:( move ul - 4 , ua ; loop 0 , 4 , move ul , ul )  decode:loop 0 , 4 , move 0 - v0 , 0 - 7 
[20107] c:0 is:( move 4 - ua , 2 ; move ul , ul ; move 4 , ul )  decode:( move 2 , 2 ; move 5 , 2 ) 
[20108] c:0 is:( move 4 , ul ; move 3 , ul ; move ua - 3 , ul )  decode:loop 0 , 3 , move 3 , ul 
[20109] c:0 is:( move 4 , 3 + 4 ; move ul , ul ; move ua , ul )  decode:( move 4 , 4 / move ua , ua * ua ) 
[20110] c:0 is:( move ul + 4 , ul ; move 3 , ul ; move 3 , ul )  decode:loop 0 , 4 , move v0 - 4 , ul 
[20111] c:0 is:( loop 0 , 6 , move v0 , v0 ; move v0 , 4 )  decode:loop 0 , 4 , move 0 - 5 , 0 - v0 
[20112] c:0 is:( move ul - ua , 4 ; move 2 , ul ; move 4 , ul )  decode:( move 4 , ul ; move ua , 2 ) 
[20113] c:0 is:( move 3 - ua , ua ; loop 0 , 6 , move ul , ul )  decode:loop 0 , 4 , move 0 - 2 , 0 - v0 
[20114] c:0 is:( move ua , 4 ; move ul - 2 , ul ; move 4 , ul )  decode:( move ua , 4 ; move 5 , 2 ) 
[20115] c:0 is:( loop 0 , 6 , move v0 , 4 ; move v0 , v0 )  decode:0 loop 0 , 4 , move 5 , ua / 4 
[20116] c:0 is:( move ul , 3 ; 2 / move ua , ul ; move ua , 4 )  decode:( move 5 , 3 / 2 ; move 4 , 5 ) 
[20117] c:0 is:( move 3 , ua ; move ul , ul ; move 4 , ua / 2 )  decode:( move 3 , ul ; move 4 , 0 - 4 ) 
[20118] c:0 is:( move 2 , ul / 4 ; move ua , ul ; move 2 , ul )  decode:( move 2 , ul / 7 ; move 7 , ul ) 
[20119] c:0 is:( move ua , 3 ; move ul - 3 , ul ; move 4 , ul )  decode:( move ua , 3 ; move 5 , 0 - 4 ) 
[20120] c:0 is:( move 3 , 2 / ua ; move ul , ul ; move ua , 4 )  decode:( move 4 , ul / 4 ; move ua , 5 ) 
[20121] c:0 is:( move 3 , 4 ; move ul + 4 , ul ; move ua , ul )  decode:( move ua , 5 ; move 3 + 4 , ul ) 
[20122] c:0 is:( move ua , ua - 4 ; move ul , 3 ; move 4 , ul )  decode:( move ua , 0 - 4 ; move 4 , 4 ) 
[20123] c:0 is:( move ua , ul ; loop 0 , 6 , move ua , ul - 3 )  decode:loop 0 , 4 , move ua + ul , 0 - 2 
[20124] c:0 is:( move 3 - 4 , ul ; move 3 , ul ; move ua , ul )  decode:( move 3 , 2 ; move ua , ul ) 
[20125] c:0 is:( move ua , ul / 3 ; move 4 , ul ; move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[20126] c:0 is:( move ua , 3 + 4 ; move ul , ul ; move 4 , ul )  decode:( move ua , 4 / 3 ; move 5 , 2 ) 
[20127] c:0 is:( move 2 , 4 ; ul - move ua , ul ; move 4 , ul )  decode:( move ua , 4 ; move 3 ; move 3 , ul ) 
[20128] c:0 is:( move 2 , 4 / ua ; move 3 , ul ; move ua , ul )  decode:( move 4 , 8 ; move ua , ul ) 
[20129] c:0 is:( move 4 , 3 / ua ; move ul , 2 ; move ua , ul )  decode:loop 0 , 4 , move 4 - v0 , 0 - 9 
[20130] c:0 is:( move ua , 3 ; move ul , ul ; move 3 , ul / 2 )  decode:( move ua , 3 ; move 4 , 3 / 2 ) 
[20131] c:0 is:( move 4 , ua * ua ; move 3 , 4 ; move ua , ul )  decode:( move 4 , ua * ua ; move 9 , 2 ) 
[20132] c:0 is:( move 3 , ua * ua ; move 3 , ul ; move 4 , ul )  decode:( move 4 , ua * ua ; move 5 , 5 ) 
[20133] c:0 is:( move 3 , ua - 4 ; move ul , 4 ; move ua , ul )  decode:( move ua , 4 ; move 3 , 0 - 2 ) 
[20134] c:0 is:( move ua - 3 , 4 ; move ul , ul ; move ua , 4 )  decode:( move 4 , 4 ; move ua , 5 ) 
[20135] c:0 is:( move ua - ul , ul ; move 4 , 4 ; move 2 , ul )  decode:( move 4 , ul ; move ua , 4 ) 
[20136] c:0 is:( move ua - 4 , 3 ; move ul , 4 ; move ua , ul )  decode:( move 2 , 3 ; move ua + ul , 5 ) 
[20137] c:0 is:( move 4 + 3 , 4 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[20138] c:0 is:( move 3 , 3 / ua ; move 3 , ul ; move ua , ul )  decode:( move 4 , 3 / 2 ; move 8 , 2 ) 
[20139] c:0 is:( move ua , ul ; move 4 + ul , 4 ; move 3 , ul )  decode:loop 0 , 3 , move ua - 2 , v0 * 4 
[20140] c:0 is:( move ua , ua ; move ul , ua / 2 ; move 4 , 4 )  decode:( move 5 , 0 ; move 4 , 4 ) 
[20141] c:0 is:( move ua , ua ; loop 0 , 6 , move ul , 4 + ul )  decode:( move ua , 0 ; move 3 , ua * ua ) 
[20142] c:0 is:( move ul , ua ; move 4 , ul ; move 3 * 2 , ul )  decode:( move 4 , 2 ; move ua , 2 - 3 ) 
[20143] c:0 is:( move 3 , ua / 3 ; move ul , 4 ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , 5 ) 
[20144] c:0 is:( move 2 , ua / 4 ; move ul , 4 ; move ua , ul )  decode:( move 2 , 2 / 9 ; move 8 , 5 ) 
[20145] c:0 is:( move 3 , ua ; move ul , ul ; move ua , 4 / 3 )  decode:( move 4 , 0 ; move ua , 0 - 4 ) 
[20146] c:0 is:( move ua , 4 / ua ; loop 2 , 2 , move ul , ul )  decode:( move ua , 4 / ua ; move 2 , 8 ) 
[20147] c:0 is:( move ul , ua * ua ; loop 1 , 5 , move 3 , ul )  decode:loop 0 , 4 , move 4 , ua / / 5 
[20148] c:0 is:( move ua / 4 , 2 ; move ul , ul ; move ua , 4 )  decode:( move 3 , ua / 3 ; move ua , 5 ) 
[20149] c:0 is:( move ua + ul , 4 ; move ul , 4 ; move 4 , ul )  decode:( move ua , 4 ; move 5 , 5 ) 
[20150] c:0 is:( move 3 , ul ; move 4 , ul / ua ; move 2 , ul )  decode:( move 2 , ul ; move ua , ul / 4 ) 
[20151] c:0 is:( move 0 , ul ; loop 0 , 3 , move v0 + 4 , 4 )  decode:loop 0 , 3 , move 5 , 9 - v0 
[20152] c:0 is:( move ua , ul ; move ua / 4 , ul ; move 4 , 2 )  decode:( move 4 + 4 , ul ; move 4 , 2 ) 
[20153] c:0 is:( move 4 , ua * ua ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 3 , move 3 , v0 + 7 
[20154] c:0 is:( move ul , 4 ; move ul - ua , 4 ; move 3 , ul )  decode:( move 3 , 9 ; move ua , ua / 3 ) 
[20155] c:0 is:( move ul , ua ; move 4 , ul ; move 4 + ul , 4 )  decode:( move ul - ua , 4 ; move 5 , 4 ) 
[20156] c:0 is:( move 4 , ua / 3 ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 4 , 2 - v0 
[20157] c:0 is:( move ul , ul + ul ; loop 0 , 6 , move 3 , ul )  decode:loop 0 , 4 , move 4 , 3 / 2 
[20158] c:0 is:( move ua , ul - 4 ; move 3 , 4 ; move ul , ul )  decode:( move 4 , 0 - 3 ; move 5 , 4 ) 
[20159] c:0 is:( move 4 - ua , ul ; move 4 , ul ; move 3 , ul )  decode:( move 3 , ul ; move ua , 2 ) 
[20160] c:0 is:loop 0 , 3 , ( move 3 , 3 ; move 2 + v0 , ul )  decode:loop 0 , 3 , move v0 - ua , v0 0 4 * 
[20161] c:0 is:( move ul - 4 , ul ; move 4 , ul ; move 2 , ul )  decode:( move 3 , ul ; move ua - ul , ul ) 
[20162] c:0 is:( move ua , ul ; loop 0 , 4 , move ua / 4 , ul )  decode:( move ua + 2 , ul ; move 4 , 5 ) 
[20163] c:0 is:( move ua , 2 ; loop 0 , 6 , move ul , ul / ua )  decode:loop 0 , 3 , move 4 , 2 * 4 * v0 
[20164] c:0 is:( move 3 , 2 / 4 ; move ul , ul ; move ua , ul )  decode:( move 3 - ua , 3 ; move ua , 5 ) 
[20165] c:0 is:( move ua , ul ; move 4 - ua , 4 ; move 4 , ul )  decode:( move ua + 3 , ul ; move 4 , 5 ) 
[20166] c:0 is:( move ua / 3 , 0 ; loop 0 , 4 , move v0 , 2 )  decode:loop 0 , 3 , move 3 , 4 + 4 / v0 
[20167] c:0 is:( move 4 , 4 ; move ul - ua , 4 ; move ua , ul )  decode:( move 6 , 9 ; move ua , 0 - 2 ) 
[20168] c:0 is:( move ul - 3 , ul ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 4 , move v0 , 4 
[20169] c:0 is:( move ua , ul / ua ; loop 0 , 6 , move ua , 3 )  decode:loop 0 , 4 , move  , 0 - 3 
[20170] c:0 is:( move ua , ua / 2 ; loop 0 , 6 , move ul , ul )  decode:( move 2 + 4 , ul ; move ua , 2 ) 
[20171] c:0 is:( move ua , ul / 3 ; move 3 , ul ; move 3 , ul )  decode:( move ua , 3 / 2 ; move ua , 2 ) 
[20172] c:0 is:( move 4 , ua * ua ; move ul , ul ; move 3 , 4 )  decode:( move 5 , ua * ua ; move 3 , 5 ) 
[20173] c:0 is:( move ua - ul , ul ; loop 0 , 5 , move 4 , ul )  decode:0 loop 0 , 4 , move 4 , 3 * 3 
[20174] c:0 is:( move ua , 2 ; loop 0 , 2 , move 4 + v0 , 4 )  decode:loop 0 , 3 , move 2 - ua , v0 + 9 
[20175] c:0 is:( move 4 , ul ; move 3 , ua - ul ; move 4 , ul )  decode:loop 0 , 4 , move 3 , ul - 3 - v0 
[20176] c:0 is:( move ua , ua / 3 ; move 4 , ul ; move 3 , ul )  decode:( move 4 , 3 ; move ua , 4 / 3 ) 
[20177] c:0 is:( move 2 , 4 / ua ; move ul , 4 ; move ua , ul )  decode:( move 2 , 4 / 2 ; move 7 , 2 ) 
[20178] c:0 is:( move ua , ul / 3 ; move ul , 3 ; move 3 , ul )  decode:loop 0 , 2 , move v0 - ua , 0 - 3 
[20179] c:0 is:( move 3 , ul / ua ; move 4 , ul ; move 2 , ul )  decode:( move 3 , ul / 6 ; move 5 , ul ) 
[20180] c:0 is:( move 4 , ul / 3 ; move 3 , ua ; move ua , ul )  decode:( move ua , 9 + 9 ; move ua , ul ) 
[20181] c:0 is:( move ua , 4 / 3 ; move ul , 3 ; move ua , ul )  decode:( move ua , 4 / 3 ; move 7 , 4 ) 
[20182] c:0 is:( move 4 , ul ; move ul - ua , 3 ; move 4 , ul )  decode:( move ua + 3 , ul ; move 4 , 4 ) 
[20183] c:0 is:( move ua , 4 / 3 ; move ul , ul ; move ua , 3 )  decode:( move ua + ul , 4 / move ua , 4 ) 
[20184] c:0 is:( move ua + ul , 4 ; loop 0 , 6 , move ul , ul )  decode:( move ua + 2 , 4 ; move 3 , 8 ) 
[20185] c:0 is:( move ua , ua * ua ; move 4 , 4 ; move 4 , ul )  decode:( move ua , ua * ua ; move 8 , 4 ) 
[20186] c:0 is:loop 0 , 3 , ( move 2 - 4 , 2 ; move ua , v0 )  decode:loop 0 , 4 , move ua , 2 + 3 / v0 
[20187] c:0 is:( move ul - ua , 4 ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 3 , move ua - 2 , 4 * v0 
[20188] c:0 is:( move 3 , ul ; loop 0 , 6 , move ul + ul , ul )  decode:0 loop 0 , 4 , move 0 - 4 , 5 
[20189] c:0 is:( move ul - 3 , ul ; move 3 , ul ; move 4 , ul )  decode:( move 3 , ul ; move ua - ul , 2 ) 
[20190] c:0 is:( move 3 , ul ; ua - move 4 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , 3 - v0 
[20191] c:0 is:( move 4 , 3 / 2 ; move ul , ul ; move ua , ul )  decode:( move 5 , ua / 4 ; move 7 , 2 ) 
[20192] c:0 is:( move ua , ua - 4 ; move ul , 4 ; move 4 , ul )  decode:( move 5 , 0 - 4 ; move 5 , 5 ) 
[20193] c:0 is:( move 4 , ua / 4 ; move ul , 2 ; move ua , ul )  decode:( move 4 , 4 / move ua + ul , 4 ) 
[20194] c:0 is:( loop 0 , 2 , move 3 , 2 ; move ul - 3 , v0 )  decode:0 0 loop 0 , 2 , move 4 , 3 * 3 
[20195] c:0 is:loop 0 , 3 , ( move 0 , v0 ; move 3 , ul / 2 )  decode:loop 0 , 3 , move 3 - ua , 7 + v0 
[20196] c:0 is:loop 0 , 2 , ( move 2 , 2 ; move 4 , v0 - ul )  decode:( move ua , ul ; move 6 , 2 ) 
[20197] c:0 is:( move ua , 3 ; loop 0 , 4 , move 2 , v0 - 2 )  decode:loop 0 , 3 , move ua - ul , v0 * 3 
[20198] c:0 is:( move 3 , 4 * 4 ; move ul , ul ; move ua , ul )  decode:( move 3 , 4 * 4 ; move ua , 2 ) 
[20199] c:0 is:( move ul - ua , 4 ; move ul , 4 ; move 4 , ul )  decode:( move 5 , 4 ; move 4 , 4 / 3 ) 
[20200] c:0 is:( move 4 , ua / 4 ; move ul , 3 ; move ua , ul )  decode:( move 4 , 0 - 2 ; move ua , 4 ) 
[20201] c:0 is:( move ua - ul , 4 ; move ul , 4 ; move 4 , ul )  decode:( move 4 , 4 ; move 5 , 5 ) 
[20202] c:0 is:( move ua - ul , 4 ; move 4 , ul ; move 4 , ul )  decode:( move ua , 4 ; move ua , 4 / 3 ) 
[20203] c:0 is:( move 4 , 4 ; move ul , ul ; move 4 , ua * ua )  decode:( move 4 , 4 ; move 5 , 9 ) 
[20204] c:0 is:( move 4 , 4 ; move ul , ul ; move 4 - ua , ul )  decode:( move ul - ua , 4 ; move 2 , ul ) 
[20205] c:0 is:( move 3 , 7 ; move ul , ua - ul ; move 2 , ul )  decode:( move 3 , 7 ; move 2 , ul ) 
[20206] c:0 is:( move ua , 4 / ua ; move ul , 4 ; move ua , 4 )  decode:loop 0 , 3 , move ua - v0 , 9 / 4 
[20207] c:0 is:( move 2 , ul ; move 4 , ul / 3 ; move ul , ul )  decode:( move ul , ul ; move ua , 2 / 5 ) 
[20208] c:0 is:( move 4 , 4 / ua ; move ul , 3 ; move ua , ul )  decode:( move 3 , 4 / ua ; move ua , 4 ) 
[20209] c:0 is:( move 3 , ua ; move ul , ul ; move 4 , 4 / ua )  decode:( move 3 , ul / move 5 , 3 / 2 ) 
[20210] c:0 is:( move ua , 3 ; move ul / 4 , 4 ; move ua , ul )  decode:( move ua , 3 ; move ua , 5 ) 
[20211] c:0 is:( move 0 , ua - 4 ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 4 , move 3 , 0 - 9 0 
[20212] c:0 is:( move ul , ul ; move ua , ul ; move 3 , 4 / 3 )  decode:( move ua , 2 ; move 3 , 4 / 3 ) 
[20213] c:0 is:( move ua , ul / 3 ; move ul , 4 ; move ua , 4 )  decode:( move ua , 2 / 6 ; move 8 , 9 ) 
[20214] c:0 is:( move ua , ul / 4 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 4 , move 3 * v0 , 0 - 9 
[20215] c:0 is:( move 4 , ua * ua ; move ul , ul ; move 4 , 4 )  decode:( move 5 , ua * ua ; move 3 , 4 ) 
[20216] c:0 is:( move ua , 3 ; move ul / 4 , 4 ; move ua , ul )  decode:( move ua , 3 ; move ua , 5 ) 
[20217] c:0 is:( move ul , ul / ua ; loop 0 , 4 , move 4 , ul )  decode:loop 0 , 4 , move 4 , 2 - 4 / v0 
[20218] c:0 is:( move 4 , ua - ul ; loop 0 , 6 , move ul , ul )  decode:loop 0 , 4 , move ua - 4 , ua / v0 
[20219] c:0 is:( move ul , 0 - 4 ; loop 0 , 4 , move 3 , v0 )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[20220] c:0 is:( move ul , ul / ua ; loop 0 , 5 , move 3 , ul )  decode:loop 0 , 4 , move 2 - ua , 0 - v0 
[20221] c:0 is:( move ua , ul / 4 ; move ul , 4 ; move 3 , ul )  decode:( move 4 , ul / 4 ; move 4 , 5 ) 
[20222] c:0 is:( move 4 , 4 / ua ; move ul , ul ; move 3 , ul )  decode:( move 4 , 4 / ua ; move 4 , 2 ) 
[20223] c:0 is:( move 4 , ul / ua ; move ul , 4 ; move 3 , ul )  decode:( move 4 , 2 ; move 4 , 0 - 7 ) 
[20224] c:0 is:( loop 0 , 4 , move v0 , 2 - 3 ; move 3 , ul )  decode:( move 2 , ul ; move ua + ul , 2 ) 
[20225] c:0 is:( move ul , 4 ; loop 0 , 3 , move 2 , 4 + v0 )  decode:loop 0 , 3 , move 0 - 2 , v0 / 4 
[20226] c:0 is:( move ua , 3 * 2 ; loop 0 , 4 , move v0 , 3 )  decode:( move 3 , 2 ; move ua , 4 + 4 ) 
[20227] c:0 is:( move 3 + 3 , 2 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 0 - ua , 2 / v0 
[20228] c:0 is:( loop 0 , 5 , move v0 , 3 ; move ua - 3 , 2 )  decode:loop 0 , 3 , move 3 - ua , 0 - 4 
[20229] c:0 is:( move 4 , ul ; loop 0 , 4 , move v0 - 2 , 2 )  decode:( move 5 , ul ; move 3 , ua / 3 ) 
[20230] c:0 is:( move ul - 4 , 3 ; loop 0 , 3 , move v0 , 2 )  decode:( move 3 , 0 ; move 3 , 4 ) 
[20231] c:0 is:( move ua , ul ; loop 1 , 6 , move ua , ua / 4 )  decode:loop 0 , 4 , move 4 - v0 , 0 - 8 
[20232] c:0 is:( move 3 , 2 - ua ; loop 0 , 5 , move v0 , 3 )  decode:loop 0 , 4 , move 0 - 3 , v0 * 9 
[20233] c:0 is:( loop 0 , 5 , move v0 , 3 + 2 ; move 3 , ul )  decode:loop 0 , 4 , move 3 , ul + v0 
[20234] c:0 is:( move 4 , ul ; move ul - 4 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 0 - 4 , 4 * 4 
[20235] c:0 is:( move 4 , 4 / ua ; move ul , 4 ; move ua , ul )  decode:( move 4 , ua / 4 ; move 9 , 8 ) 
[20236] c:0 is:( move ua , ul / 4 ; move ul , 4 ; move 4 , ul )  decode:( move 5 , 2 / 4 ; move 5 , 5 ) 
[20237] c:0 is:( move 4 , ua / 4 ; move ul , ul ; move 4 , ul )  decode:( move 4 , ua / 4 ; move 5 , 2 ) 
[20238] c:0 is:( move ua , ul / 4 ; move 4 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 4 , v0 - 3 
[20239] c:0 is:( move 3 , 3 ; loop 0 , 3 , move ua / 3 , v0 )  decode:( move ua , 3 ; move 3 , 4 ) 
[20240] c:0 is:( move 2 , 4 - ua ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 3 , move 2 - ua , 4 * 5 
[20241] c:0 is:( move 4 , 0 ; loop 0 , 6 , move v0 , ul - 3 )  decode:loop 0 , 4 , move ua - ul , 0 - 4 
[20242] c:0 is:( move 3 , 0 - ul ; loop 0 , 6 , move 4 , v0 )  decode:loop 0 , 4 , move 4 + 3 , ua * ua 
[20243] c:0 is:( loop 0 , 6 , move v0 - 3 , 3 ; move 2 , ua )  decode:loop 0 , 4 , move 2 , v0 * 4 
[20244] c:0 is:loop 0 , 3 , ( move 3 , 4 - 3 ; move ul , v0 )  decode:loop 0 , 3 , move 3 - ua , ul 
[20245] c:0 is:( move ul , 0 ; loop 0 , 4 , move 4 , 4 * v0 )  decode:loop 0 , 4 , move 4 , 4 * v0 
[20246] c:0 is:( move ua / 4 , 0 ; loop 0 , 5 , move 3 , v0 )  decode:loop 0 , 4 , move 3 , v0 0 
[20247] c:0 is:( move ua , ul / 6 ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 4 , move 4 , v0 - 6 
[20248] c:0 is:( loop 0 , 6 , move v0 - 4 , ul ; move 3 , 0 )  decode:( move ul - ua , ul ; move 9 , 5 ) 
[20249] c:0 is:( move ul , 0 ; loop 0 , 5 , move 2 , 4 / v0 )  decode:loop 0 , 4 , move ua - 4 , 4 / v0 
[20250] c:0 is:( loop 0 , 5 , move v0 , 4 ; move 2 , 2 - ul )  decode:loop 0 , 3 , move 4 , v0 + 9 
[20251] c:0 is:( loop 0 , 6 , move 4 , 2 ; move v0 , ua + 3 )  decode:loop 0 , 4 , move 5 , 0 - 4 
[20252] c:0 is:( move 4 , ul / 4 ; move ul , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , ua / v0 + 4 
[20253] c:0 is:( move 4 , ua ; loop 0 , 4 , move 2 , v0 / 3 )  decode:( move 4 + 3 , 0 ; move 4 , 5 ) 
[20254] c:0 is:( loop 0 , 2 , move ul , 4 ; move 4 / v0 , 2 )  decode:( move 2 , 9 ; move 4 , 2 ) 
[20255] c:0 is:( move 3 , ua - 3 ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[20256] c:0 is:( move 4 , 3 - ul ; loop 0 , 3 , move 4 , v0 )  decode:( move 8 , 2 ; move ua , 2 ) 
[20257] c:0 is:( move 3 , 4 - ua ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[20258] c:0 is:( move ul , 3 + 3 ; loop 0 , 5 , move v0 , 4 )  decode:loop 0 , 4 , move v0 - 4 , 4 * 4 
[20259] c:0 is:( move ua , 9 ; move ul , 4 ; move 4 - ua , ul )  decode:( move ua , 9 ; move 3 , 5 + 2 ) 
[20260] c:0 is:( move 4 , ua / 2 ; loop 0 , 4 , move v0 , 4 )  decode:loop 0 , 4 , move 4 - ua , 7 + v0 
[20261] c:0 is:( move 4 + ul , 4 ; loop 0 , 5 , move v0 , 3 )  decode:loop 0 , 4 , move 3 , 4 * v0 
[20262] c:0 is:( move ua / 2 , 2 ; loop 1 , 5 , move 3 , v1 )  decode:loop 0 , 3 , move ua - 2 , 2 - 2 3 
[20263] c:0 is:( move 3 - ul , 3 ; loop 0 , 6 , move v0 , 3 )  decode:loop 0 , 4 , move 4 , 9 
[20264] c:0 is:( move 4 , ua ; loop 0 , 5 , move 3 / 2 , v0 )  decode:( move ua , 0 ; move 3 , 4 ) 
[20265] c:0 is:( move ua / 3 , 3 ; loop 0 , 5 , move v0 , 3 )  decode:loop 0 , 3 , move 3 + v0 , 9 
[20266] c:0 is:( move ua , 9 * 4 ; move ul , 4 ; move ua , ul )  decode:( move ua , ul / 4 ; move 7 , 5 ) 
[20267] c:0 is:( move ul - ua , 9 ; move 4 , ul ; move 4 , ul )  decode:( move 5 , 9 ; move 9 , ua * ua ) 
[20268] c:0 is:( move 4 , ua / 3 ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move v0 + 3 , 0 - 9 
[20269] c:0 is:( loop 0 , 4 , move ua , 4 ; move 3 , 4 / v0 )  decode:loop 0 , 4 , move 3 + 4 , 4 
[20270] c:0 is:( move ul , 3 / 2 ; loop 0 , 6 , move v0 , 3 )  decode:loop 0 , 3 , move 4 , 0 - 3 
[20271] c:0 is:( move 4 , ul ; loop 0 , 6 , move 3 , v0 - 4 )  decode:( move 4 + 3 , 2 + 7 , 4 + v) 0 
[20272] c:0 is:( v0 = 3 / 2 ; loop 1 , 7 , move ua , v0 )  decode:loop 0 , 4 , move 4 + 4 , 0 - 8 
[20273] c:0 is:( move ua , ua ; move 0 - ua , 2 ; move ua , ul )  decode:( move 9 , 0 ; move ua + 3 , ul ) 
[20274] c:0 is:( move ua , 0 ; move 0 - ul , ul ; move ua , ul )  decode:( move ua , 0 ; move ua , ua / 3 ) 
[20275] c:0 is:( move ua , 0 ; move ua , ua - 3 ; move ua , ul )  decode:loop 0 , 3 , move 0 - ua , v0 - 3 
[20276] c:0 is:loop 0 , 2 , loop 1 , 2 , move v0 + ua , 2 + ul  decode:loop 0 , 4 , move 4 + v0 , 3 
[20277] c:0 is:( move ua , 0 ; move ul , 2 ; move ul - ua , ua )  decode:( move ua , 0 ; move 4 , ua / 3 ) 
[20278] c:0 is:( move ua + ul , 0 ; move 2 , ul ; move ua , ul )  decode:( move ua + 2 , 0 ; move 7 , 5 ) 
[20279] c:0 is:( move ua + ul , 0 ; move ul , 3 ; move ua , ul )  decode:( move ua + ul , 0 ; move 8 , 4 ) 
[20280] c:0 is:( move ua - ul , 0 ; move 2 , ul ; move ua , ul )  decode:( move ua , 0 ; move ua + 2 , ul ) 
[20281] c:0 is:( move ua - ul , 0 ; move ul , ul ; move ua , 2 )  decode:( move ua , ul / 3 ; move ua , 2 ) 
[20282] c:0 is:( move ul - ua , 0 ; move 2 , ul ; move ua , ul )  decode:( move ua , 0 - 2 ; move 9 , 2 ) 
[20283] c:0 is:( move ua - 2 , 0 ; move ul , ul ; move ua , ul )  decode:( move 5 , 0 ; move ua + ul , 2 ) 
[20284] c:0 is:( move ua , 0 - 2 ; move ul , ul ; move ua , ul )  decode:( move ua , 0 - 2 ; move 9 , 2 ) 
[20285] c:0 is:( move ua , 0 ; move 3 - ua , ul ; move ua , ul )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[20286] c:0 is:( move ua , ua ; move ua - 2 , 2 ; move ua , ul )  decode:loop 0 , 3 , move ul - ua , 2 * v0 
[20287] c:0 is:( move ua , 0 ; move ul , ua - ul ; move 2 , ul )  decode:( move 3 , 0 ; move  ul - 9 , ) 
[20288] c:0 is:( move ua , 0 ; move ua - 3 , ul ; move ua , ul )  decode:( move ua + 3 , 0 ; move 3 , ua / ) 3 
[20289] c:0 is:( move ua + ul , 0 ; move 3 , ul ; move ua , ul )  decode:( move 9 , 0 ; move 9 , ua * ua ) 
[20290] c:0 is:( move ua + ul , 0 ; move 2 , ul ; move ul , ul )  decode:( move ua + 2 , 0 ; move 2 , 7 ) 
[20291] c:0 is:( move ua , 0 ; move ul , 3 ; move ua + ul , ul )  decode:( move ua , 0 ; move 7 , 4 ) 
[20292] c:0 is:loop 0 , 2 , loop 1 , 2 , move 2 - ua , ul + v0  decode:loop 0 , 4 , move 4 , 2 / v0 
[20293] c:0 is:( move ua + ul , 0 ; move ul , ul ; move ua , 3 )  decode:( move ua + 2 , 0 ; move 5 , 4 ) 
[20294] c:0 is:( move ua , 0 - ul ; move ua , 2 ; move ul , ul )  decode:loop 0 , 2 , move 0 - ua , v0 - 3 
[20295] c:0 is:( move ua + ul , ua ; move ua , 3 ; move ua , 2 )  decode:loop 0 , 3 , move ul - ua , v0 * 5 
[20296] c:0 is:( move ua , ua ; move ul - 2 , 2 ; move ua , ua )  decode:( move 6 , 0 ; move ua - ul , 2 ) 
[20297] c:0 is:( move 2 , 0 ; move ul , ul ; move ul - ua , ul )  decode:( move 4 , 2 ; move 4 , 0 - 2 ) 
[20298] c:0 is:( move 0 - 2 , ul ; move ua , ul ; move ul , ul )  decode:( move 2 , ul ; move ua - ua , ul ) 
[20299] c:0 is:( move ua , 0 ; move ul , ul ; move ua + ul , 4 )  decode:( move ua + ul , 0 ; move ua , 5 ) 
[20300] c:0 is:( move ua , 0 ; move ul , 4 ; move ua + ul , ul )  decode:( move ua , 0 ; move 8 , 5 ) 
[20301] c:0 is:( move ua , 0 - 3 ; move ul , ul ; move ua , ul )  decode:( move ua , 0 - 3 ; move 7 , 2 ) 
[20302] c:0 is:( move ua - ul , 0 ; move 3 , ul ; move ua , ul )  decode:( move ua , 0 ; move 9 , 5 ) 
[20303] c:0 is:( move 3 , 0 ; move ul , ua * ua ; move ua , ul )  decode:( move 3 , 0 ; move ua , 9 ) 
[20304] c:0 is:( move 2 , ul ; move ua , 2 ; move ua , ua - ul )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[20305] c:0 is:( move ua , ul ; move ul , ul ; move ua , 0 - 3 )  decode:( move ua , 0 - ul ; move ua , 2 ) 
[20306] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua , v0 )  decode:loop 0 , 4 , move v0 + 3 , 2 
[20307] c:0 is:( move ua , ua ; move ua + ul , 3 ; move ua , 3 )  decode:loop 0 , 3 , move 2 + 3 , 3 
[20308] c:0 is:( move 2 - ua , ua ; move ua , ul ; move 2 , ul )  decode:( move 4 , 0 ; move 8 , ua / 3 ) 
[20309] c:0 is:( move ua + ul , ul ; move 2 , 2 ; move ua , ul )  decode:( move ua + ul , ul ; move 7 , 2 ) 
[20310] c:0 is:( move ua , 0 ; move ul , ul ; move 3 - ua , ul )  decode:( move 3 , 2 ; move ua , ul / 3 ) 
[20311] c:0 is:( move ua , 2 ; move ul , 2 ; move ua + ul , ul )  decode:( move ua + 2 , 2 ; move 8 , 4 ) 
[20312] c:0 is:( move ua - 3 , 0 ; move ul , ul ; move ua , ul )  decode:( move 4 , 0 ; move ua + ul , 2 ) 
[20313] c:0 is:( move 0 - ua , 3 ; move ul , ul ; move ua , ul )  decode:( move 5 , 0 ; move 8 , 2 ) 
[20314] c:0 is:( move 0 - ua , ul ; move 2 , ul ; move ul , ul )  decode:( move 0 - ua , ul ; move 2 , ul ) 
[20315] c:0 is:( move ua , 0 ; move ul - 3 , ul ; move ua , ul )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[20316] c:0 is:( move ua + 2 , ul ; move ul , 2 ; move ua , ul )  decode:( move 9 , ul ; move ua , ua / 3 ) 
[20317] c:0 is:( move ua , 0 ; move ul , ul ; move ua - 3 , ul )  decode:( move ua , 0 ; move 4 , 2 ) 
[20318] c:0 is:( move ua + ul , 0 ; move ul , ul ; move 3 , ul )  decode:( move ua + ul , 0 ; move 4 , 2 ) 
[20319] c:0 is:( move ul , 0 ; move ua + ul , ul ; move 3 , ul )  decode:( move 3 , ul ; move ua , ul ) 
[20320] c:0 is:( move ua + ul , 2 ; move ul , 3 ; move ua , ul )  decode:( move ua , 2 ; move ua + ul , 4 ) 
[20321] c:0 is:( move ul - ua , ul ; move ul , 0 ; move 3 , ul )  decode:( move ul - ua , ul ; move 3 , ul ) 
[20322] c:0 is:( move ua + 3 , 2 ; move ul , ul ; move ua , ul )  decode:( move ua + 3 , 2 ; move 7 , 2 ) 
[20323] c:0 is:( move ua + ul , 3 ; move 2 , ul ; move ua , ul )  decode:( move 8 , 3 ; move ua , 2 ) 
[20324] c:0 is:loop 0 , 2 , loop 1 , 2 , move v0 - 3 , ul + ul  decode:loop 0 , 3 , move 3 - ua , 2 
[20325] c:0 is:( move ua , ua ; move ua + 2 , 4 ; move ul , ul )  decode:( move ua , 0 ; move ua + 3 , 4 ) 
[20326] c:0 is:( move ua - 4 , 0 ; move ul , ul ; move ua , ul )  decode:( move ua , 0 ; move 3 + 2 , 2 ) 
[20327] c:0 is:( move ua - ul , 0 ; move ul , ul ; move 3 , ul )  decode:( move ua - ul , 0 ; move 4 , 2 ) 
[20328] c:0 is:( move ua , ua ; move ul , ul ; move 0 - 4 , ul )  decode:( move ua + ul , 0 ; move 3 , ul ) 
[20329] c:0 is:( move ua , 3 ; move ul , 2 ; move ua + ul , ul )  decode:( move ua + 2 , 3 ; move 7 , 4 ) 
[20330] c:0 is:( move ul , ul ; move ua + ul , 2 ; move 2 , ul )  decode:( move ua + 2 , 3 ; move 2 , 2 ) 
[20331] c:0 is:( move 4 , 0 ; move ul - ua , ul ; move ua , ul )  decode:loop 0 , 3 , move ua - ul , v0 * 2 
[20332] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 , v0 )  decode:( move 3 , 0 ; move 3 , 0 - 4 ) 
[20333] c:0 is:loop 0 , 3 , ( move ul , ua ; move ua , ul + ul )  decode:loop 0 , 3 , move ua + 2 , 2 
[20334] c:0 is:( move ua , ul ; move ul , 2 ; move ua - 2 , ul )  decode:( move ua , ul ; move 5 , 2 ) 
[20335] c:0 is:( move 2 , ua * ua ; move 2 , ul ; move ua , ul )  decode:( move 3 , 8 ; move ua + ul , 5 ) 
[20336] c:0 is:loop 0 , 2 , ( move ul - ua , ul ; move ul , ua )  decode:( move 2 - ua , ul ; move 5 , 4 ) 
[20337] c:0 is:loop 0 , 2 , ( move ul - ua , ul ; move ua , ul )  decode:loop 0 , 4 , move ul - ua , 0 - 2 
[20338] c:0 is:( move ul , 0 ; move ul , ul ; move 3 , ua - ul )  decode:( move 3 , 0 ; move 2 , 7 ) 
[20339] c:0 is:( move ua , ul ; move ul , ul ; move ua , 0 - 4 )  decode:( move ua , 0 ; move ua , 0 - 3 ) 
[20340] c:0 is:( move ua - ul , 2 ; move 2 , ul ; move ua , ul )  decode:( move ua , 2 ; move ua , 5 ) 
[20341] c:0 is:( move ua , 0 ; move ul - ua , ul ; move 4 , ul )  decode:loop 0 , 3 , move ul - ua , ua / v0 
[20342] c:0 is:( move ua + 2 , 3 ; move ul , ul ; move ua , ul )  decode:( move 2 + ua , 3 ; move 7 , 2 ) 
[20343] c:0 is:( move ua , ua ; move 4 , 2 ; move ul - ua , ua )  decode:( move ua , 0 ; move 4 , ua / ua ) 
[20344] c:0 is:( move ua , 2 ; move ul , ul ; move ua + ul , 3 )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[20345] c:0 is:( move ul , 0 ; move ul , 4 + ul ; move ua , ul )  decode:( move ua , 9 ; move 2 , 2 - 3 ) 
[20346] c:0 is:( move ua , 0 - 4 ; move ul , ul ; move ua , ul )  decode:loop 0 , 4 , move v0 - ua , 0 - 2 
[20347] c:0 is:( move ua - ul , ua ; move ul , 2 ; move ua , 3 )  decode:( move ua , 0 ; move ul - ua , 5 ) 
[20348] c:0 is:( move 2 , ul ; move ul , ua - ul ; move ua , 2 )  decode:( move ua , ul ; move 3 , 3 / 2 ) 
[20349] c:0 is:( move 2 , 2 ; move ua + ul , ul ; move ul , ul )  decode:( move ua + ul , 3 ; move 2 , ul ) 
[20350] c:0 is:( move ua , 0 ; move ul - 4 , ul ; move ua , ul )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[20351] c:0 is:( move 4 - ua , 0 ; move ul , ul ; move ua , ul )  decode:( move 2 , 0 ; move ua + ul , 2 ) 
[20352] c:0 is:( move ua + ul , 3 ; move ua , 2 ; move ul , ul )  decode:( move 7 , 3 ; move ua + ul , 2 ) 
[20353] c:0 is:( move 0 - 3 , ul ; move ul , ul ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , ul ) 
[20354] c:0 is:( move ul - ua , 0 ; move ul , 4 ; move ua , ul )  decode:( move ul - ua , 0 ; move 8 , 5 ) 
[20355] c:0 is:( move ua + ul , ul ; move 2 , ul ; move 2 , ul )  decode:( move ua + 2 , ul ; move 3 , 5 ) 
[20356] c:0 is:loop 0 , 2 , loop 1 , 2 , move ul - 3 , ul + v0  decode:loop 0 , 3 , move 0 - 3 , ul + v0 
[20357] c:0 is:( move ua - ul , ul ; move 2 , 2 ; move ua , ul )  decode:( move ua , ul ; move ua + ul , 2 ) 
[20358] c:0 is:( move ua - ul , 0 ; move 3 , ul ; move ul , ul )  decode:( move ua , 0 ; move 3 , ul ) 
[20359] c:0 is:( move ua , ua - ul ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua , 3 + 3 - v0 
[20360] c:0 is:( move ua - ul , 0 ; move ul , ul ; move ua , 4 )  decode:( move ua , 0 ; move 5 , 5 ) 
[20361] c:0 is:( move ua , 2 ; move ul - 2 , ul ; move ua , ul )  decode:( move ua , 2 ; move ua , ua / 3 ) 
[20362] c:0 is:( move ua + ul , 0 ; move ul , ul ; move 4 , ul )  decode:( move ua + ul , 0 ; move 5 , 2 ) 
[20363] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + ul , 3 + ul  decode:loop 0 , 3 , move 4 , 0 - 4 * 4 
[20364] c:0 is:( move ul , 2 ; move ua , ul ; move ua - ul , 2 )  decode:( move ua + ul , 3 ; move 5 , 2 ) 
[20365] c:0 is:( move ua + ul , 3 ; move ul , ul ; move ua , 2 )  decode:( move ua + 2 , 3 ; move ua , 4 ) 
[20366] c:0 is:( move ua , ua - move ul - ua , 3 ; move ua , 2 )  decode:( move ua , ul / 5 ; move ua , 6 ) 
[20367] c:0 is:( move ua , 3 ; move ul - 3 , ua ; move ua , ul )  decode:( move ua , 3 ; move ua , ul ) 
[20368] c:0 is:( move ua , ul ; move 3 - ua , 3 ; move ua , ul )  decode:( move 9 , ul ; move ua , 4 ) 
[20369] c:0 is:( move ul - ua , ul ; move ul , 2 ; move 2 , ul )  decode:( move 3 , ul ; move 3 , ul + 4 ) 
[20370] c:0 is:( move 4 - ua , ua ; move ul , 2 ; move ua , ul )  decode:( move 3 , 0 ; move ua , ul / 4 ) 
[20371] c:0 is:( move 0 - 4 , ul ; move ul , ul ; move ua , ul )  decode:( move 0 - 3 , ul ; move ua , 2 ) 
[20372] c:0 is:( move 3 - ua , ul ; move ul , 2 ; move ua , ul )  decode:( move 4 , ul ; move ua , ul + 2 ) 
[20373] c:0 is:( move 4 , 0 ; move ul , ul ; move ul - ua , ul )  decode:( move 5 , 0 ; move ua - ul , 2 ) 
[20374] c:0 is:( move ua , 2 ; move ul , ua - 4 ; move ua , ul )  decode:( move ua , 0 - 3 ; move ua , 3 ) 
[20375] c:0 is:( move 0 - ua , ul ; move ul , ul ; move 4 , ul )  decode:( move ul - ua , ul ; move 5 , 2 ) 
[20376] c:0 is:( move ua , ua ; move ua , 3 ; move 4 - ua , ul )  decode:0 loop 0 , 4 , move 3 - ua , v0 
[20377] c:0 is:( move ua - ul , 3 ; move 2 , ul ; move ua , ul )  decode:( move 5 , 3 ; move ua + ul , 2 ) 
[20378] c:0 is:( move ua , ua ; move 4 - ua , ul ; move ua , 3 )  decode:( move ua , 0 ; move 9 , 4 ) 
[20379] c:0 is:( move ul - ua , 0 ; move ul , ul ; move 4 , ul )  decode:( move 2 - ua , 0 ; move 5 , 2 ) 
[20380] c:0 is:( move ua , ua - ul ; move 3 , ul ; move ua , 3 )  decode:( move ua , 2 - 3 ; move ua , 4 ) 
[20381] c:0 is:( move ul , ul ; loop 0 , 2 , move ua - ul , ul )  decode:( move ua , ul / ua ; move 5 , ul ) 
[20382] c:0 is:( move ua , ua ; move 3 , ua - 3 ; move ul , ul )  decode:( move ul - ua , 0 ; move 4 , 6 ) 
[20383] c:0 is:( move ua , 4 + ul ; move 2 , ul ; move ua , ul )  decode:( move ua + ul , 5 ; move ua , 5 ) 
[20384] c:0 is:loop 0 , 3 , ( move ul - ua , ul ; move ua , ul )  decode:loop 0 , 4 , move ua , 0 - 2 0 
[20385] c:0 is:( move 2 - ua , ul ; move ul , ul ; move ua , 3 )  decode:( move 5 , 0 - 2 ; move 5 , 4 ) 
[20386] c:0 is:( move ua , ua ; move 3 , ua * ua ; move 3 , ul )  decode:loop 0 , 3 , move 4 , : 3 - 4 - 3 
[20387] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 - ua , ua + 4  decode:loop 0 , 4 , move ua + ul , 0 - 0 4 
[20388] c:0 is:( move ua , 3 ; move ul , 3 ; move ua + ul , ul )  decode:( move 6 , 3 ; move 7 , 4 ) 
[20389] c:0 is:( move ul , ul ; move ua , 2 ; move ua + ul , 4 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[20390] c:0 is:loop 0 , 2 , loop 1 , 3 , move 4 - ua , v0 + ul  decode:loop 0 , 4 , move 3 - ua , 9 * v0 
[20391] c:0 is:( move 3 , ul ; move ua - 2 , ul ; move ua , ul )  decode:loop 0 , 4 , move v0 * 2 , 2 - 3 
[20392] c:0 is:loop 0 , 2 , loop 1 , 2 , move v1 + 4 , ul + ul  decode:loop 0 , 4 , move ua - 2 , 2 
[20393] c:0 is:( move ua , ul ; move ul , 3 ; move 2 - ua , ul )  decode:( move ua , ul ; move 5 , ul / 4 ) 
[20394] c:0 is:( move 3 , 2 ; move ul , ul ; move ua , ua * ua )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[20395] c:0 is:( move ua - ul , 0 ; move ul , ul ; move 4 , ul )  decode:( move 5 , 0 ; move 5 , 2 ) 
[20396] c:0 is:( move ua , 3 ; move 3 - ua , ul ; move ua , ul )  decode:( move ua , 9 ; move ua + ul , 4 ) 
[20397] c:0 is:( move 3 , ua * ua ; move ul , 2 ; move ua , ul )  decode:( move 2 , ua * 4 ; move 7 , 4 ) 
[20398] c:0 is:loop 0 , 3 , loop 1 , 2 , move 3 - v0 , ul - ua  decode:loop 0 , 4 , move 3 , ul 
[20399] c:0 is:( move ua , ua ; move ua - 3 , 4 ; move ua , ul )  decode:( move ua , 0 ; move ua + 3 , 2 ) 
[20400] c:0 is:( move ua , 2 ; move ul - 3 , ul ; move ua , ul )  decode:( move ua + ul , 2 ; move ua , ul ) 
[20401] c:0 is:( move ua + ul , ul ; move 3 , 3 ; move ua , ul )  decode:( move ua , ul ; move ua + 2 , 4 ) 
[20402] c:0 is:( move ua , 2 / ua ; move ul , ul ; move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[20403] c:0 is:( move ua - 2 , 3 ; move ul , ul ; move ua , ul )  decode:( move 4 , 3 ; move ua + ul , 2 ) 
[20404] c:0 is:( move ua , 2 / ua ; move ua , ul ; move ua , 3 )  decode:loop 0 , 3 , move 2 + 4 , v0 - 3 
[20405] c:0 is:( move ua , 2 ; move ul , ul ; move 3 - ua , ul )  decode:( move ua + ul , 4 ; move 2 , ul ) 
[20406] c:0 is:( move ua - ul , ul ; move ul , 3 ; move ua , 2 )  decode:( move 4 , ul ; move ua , 5 ) 
[20407] c:0 is:( move ua + ul , 3 ; move ul , ul ; move 2 , ul )  decode:( move 8 , 3 ; move 3 , 2 ) 
[20408] c:0 is:( move ua , ua ; move 3 , ua - 4 ; move ua , ul )  decode:( move ua + 2 , 0 ; move 9 , 0 ) 
[20409] c:0 is:( move ua , ul ; move 2 - 3 , ul ; move ua , ul )  decode:( move 0 - ua , ul ; move ua , ul ) 
[20410] c:0 is:( move ua , ua ; move ul - ua , ul ; move 2 , 4 )  decode:( move ua , 0 ; move 7 , 4 - 3 ) 
[20411] c:0 is:( move ul - ua , ul ; move 3 , ul ; move ua , 2 )  decode:loop 0 , 3 , move ua - 2 , 2 / v0 
[20412] c:0 is:( move 2 , ul ; move ua - 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move v0 - ua , 0 - ul 
[20413] c:0 is:( move ua , 2 - 3 ; move ul , ul ; move ua , ul )  decode:( move ua , 2 - 3 ; move ua , 2 ) 
[20414] c:0 is:( move ua / 4 , 0 ; move ul , ua ; move ua , ul )  decode:( move 3 , 0 ; move ua , ul ) 
[20415] c:0 is:( move ua , 2 / ua ; move 2 , ul ; move ua , ul )  decode:loop 0 , 3 , move 4 , 4 * 4 / v0 
[20416] c:0 is:( move ua - 2 , ul ; move ul , 4 ; move ua , ul )  decode:( move 4 , 9 ; move ua + ul , 5 ) 
[20417] c:0 is:( move ua , ul ; move 3 , ul ; move 3 - ua , ul )  decode:( move ua , ul ; move 3 - ua , ul ) 
[20418] c:0 is:( move ul , ua - 3 ; move ua , ul ; move 3 , ul )  decode:( move 3 , 0 - 4 ; move ua , ul ) 
[20419] c:0 is:( move 0 - ua , 2 ; loop 0 , 3 , move v0 , ul )  decode:( move 3 , ul ; move ua , ul / 4 ) 
[20420] c:0 is:( move ua , ul ; move ua , 3 ; move ua , ua / 3 )  decode:loop 0 , 3 , move v0 - ua , 4 * 3 
[20421] c:0 is:( move 0 - ua , ua ; loop 0 , 4 , move v0 , 2 )  decode:( move ua + ul , 2 ; move 3 , 9 ) 
[20422] c:0 is:( move ul , 3 ; move 2 , ul ; move ua - ul , ul )  decode:( move 2 , 4 ; move ua , 2 ) 
[20423] c:0 is:( move ua , ua ; move ul - 4 , 4 ; move ua , ua )  decode:( move ua + ul , 4 ; move 4 , 3 ) 
[20424] c:0 is:( loop 0 , 5 , move ua , ua * ua ; move ul , ua )  decode:loop 0 , 4 , move 4 + 2 , ua * 5 
[20425] c:0 is:( move ua - 2 , ul ; move ul , ul ; move ua , 4 )  decode:( move 5 , ul ; move ua , 5 ) 
[20426] c:0 is:loop 0 , 2 , ( move ua , 0 ; move v0 , 4 + ul )  decode:( move ua , 0 ; move ua + ul , 5 ) 
[20427] c:0 is:( move 3 , ul ; move ua , ul ; move ua + ul , 4 )  decode:( move 9 , 2 ; move ua + ul , 4 ) 
[20428] c:0 is:( move 3 , ul ; move ua - 3 , ul ; move ua , ul )  decode:loop 0 , 4 , move 3 , ul 
[20429] c:0 is:( move 2 , ua ; move 4 , ul ; move ul - ua , ul )  decode:( move ul - ua , ul ; move 5 , ul ) 
[20430] c:0 is:loop 0 , 2 , ( move ua , ul ; move ul / ua , ul )  decode:( move 7 , ul ; move ua , 2 ) 
[20431] c:0 is:( move ua , ul ; loop 0 , 5 , move ua , ua * ua )  decode:loop 0 , 4 , move 0 - ua , 4 , 4 2 4 , 
[20432] c:0 is:( move ua , ul ; move ul , ul ; move 3 , ul - 2 )  decode:( move 4 , ul ; move ua , ul / 4 ) 
[20433] c:0 is:( move ua - ul , 3 ; move 3 , ul ; move ua , ul )  decode:( move ua , 3 ; move 7 , 5 ) 
[20434] c:0 is:( move 4 + ua , ul ; move ul , 3 ; move ua , ul )  decode:( move 9 , ul ; move ua , 4 ) 
[20435] c:0 is:( move ua , 3 ; move ul , ul - 3 ; move ua , ul )  decode:( move ua , 3 ; move ua , 2 - 3 ) 
[20436] c:0 is:( move 2 , ul ; move 4 , ua - ul ; move ua , ul )  decode:loop 0 , 2 , move ua - v0 , ua / ua 
[20437] c:0 is:( move 2 , ul ; move ua + ul , ul ; move 4 , ul )  decode:( move 3 + 4 , 2 ; move 4 , ul ) 
[20438] c:0 is:( move ul - ua , 2 ; move ul , ul ; move 3 , ul )  decode:( move ul - ua , 2 ; move 4 , 2 ) 
[20439] c:0 is:( move ua , ul ; move ul , 3 ; move ua , 4 + ul )  decode:( move ua , ul ; move ua + ul , 8 ) 
[20440] c:0 is:( move ua , ua ; move ul , ua / 3 ; move 2 , ul )  decode:( move ua , 0 ; move 2 , 0 - 4 ) 
[20441] c:0 is:loop 0 , 5 , loop 1 , 0 , move v1 - ua , ul - 3  decode:0 0 loop 0 , 4 , move ua , 0 - 4 
[20442] c:0 is:( move 3 , ua ; move ul , ul ; move 3 , ua * ua )  decode:( move 3 , 0 ; move 3 , 4 ) 
[20443] c:0 is:( move ua , 4 ; move ul , 2 ; move ul - ua , ul )  decode:loop 0 , 4 , move 4 ; move 4 , 4 / 4 
[20444] c:0 is:( move 4 , 2 ; move ul , ul ; move ua + ul , ul )  decode:( move 4 , ua / 3 ; move 8 , 2 ) 
[20445] c:0 is:( move 4 , ua ; move ul , ua - ul ; move ua , 3 )  decode:( move 4 , 0 ; move ul - ua , 2 ) 
[20446] c:0 is:( move ua , ul / ua ; move ul , 2 ; move ua , 3 )  decode:( move ua , ul / 4 ; move 5 , 7 ) 
[20447] c:0 is:( move ul , ul ; move ua - ul , ul ; move 3 , 2 )  decode:( move ua - ul , 2 ; move 3 , 2 ) 
[20448] c:0 is:( move ua , ul ; move ul , 4 + ul ; move ua , 3 )  decode:( move ua + ul , ul ; move ua , 9 ) 
[20449] c:0 is:( move ua - ul , 4 ; move ul , 2 ; move ua , ul )  decode:( move 6 , 4 ; move ua , 0 - 9 ) 
[20450] c:0 is:( move ua , ua - ul ; move 2 , ul ; move ul , 4 )  decode:( move ua , 2 - 3 ; move 2 , 4 ) 
[20451] c:0 is:( move ua , 3 / ua ; move ua , 3 ; move ua , ul )  decode:( move ua + ul , 0 ; move 9 , 4 ) 
[20452] c:0 is:( move ua , ua * ua ; move ul , 3 ; move ua , 4 )  decode:4 0 loop 0 , 2 , move ua , 4 + 3 
[20453] c:0 is:( move ua , ul ; move 3 , ua - ul ; move 3 , ul )  decode:( move ul - ua , ul ; move 5 , 3 ) 
[20454] c:0 is:( move 3 , ul ; move ul - ua , 3 ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , ul ) 
[20455] c:0 is:( move ua , 4 ; move 3 , ul ; move ul - ua , ua )  decode:( move ua , 4 ; move 4 , ul ) 
[20456] c:0 is:( move ua , ua * ua ; move 4 , ul ; move ua , 3 )  decode:( move 8 , ua * ua ; move 5 , 4 ) 
[20457] c:0 is:( move 2 , ul / ua ; move 2 , ul ; move ua , ul )  decode:( move 3 , ul / 7 ; move 7 , 5 ) 
[20458] c:0 is:( move ua - ul , ul ; move ul , 2 ; move ua , 4 )  decode:( move ua , ul ; move ul - ua , 6 ) 
[20459] c:0 is:( move ua + ul , 3 ; move ul , ul ; move ua , 4 )  decode:( move 9 , 3 ; move ua , 5 ) 
[20460] c:0 is:( move ua , 2 ; move ul - 4 , ul ; move ua , ul )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[20461] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ua , v0 )  decode:0 loop 0 , 4 , move 4 , 4 + v0 
[20462] c:0 is:( move ua , ul / 3 ; move ua , ul ; move ua , 2 )  decode:loop 0 , 3 , move v0 + 4 , 0 - 3 
[20463] c:0 is:( move 3 , ul ; move ul , ul ; move ul - ua , 2 )  decode:( move 4 , 4 ; move 4 , ul + 4 ) 
[20464] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 * 3 , ua * ua  decode:loop 0 , 4 , move v0 * 4 , 0 - 4 
[20465] c:0 is:( move ua , ua / 3 ; move ul , ul ; move ua , 2 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[20466] c:0 is:( move ua - 2 , ul ; move 4 , ul ; move ua , ul )  decode:loop 0 , 3 , move 2 - ua , ul 
[20467] c:0 is:( move ua , ul ; move ua , 2 - 4 ; move ul , ul )  decode:loop 0 , 2 , move ua , ua / ua - 3 
[20468] c:0 is:( move 3 - ua , ul ; move ul , ul ; move 2 , ul )  decode:( move 0 - 2 , ul ; move 4 , 2 ) 
[20469] c:0 is:( move ua , ua * ua ; move ul , 3 ; move 3 , ul )  decode:( move ua , ua * ua ; move 3 , 4 ) 
[20470] c:0 is:( move ua - ul , 4 ; move 2 , ul ; move ua , ul )  decode:( move ua , 4 ; move ua + ul , 2 ) 
[20471] c:0 is:( move ua - ul , ua ; loop 0 , 4 , move ul , ul )  decode:( move ua , 0 ; move 3 , 4 ) 
[20472] c:0 is:( move ua , ul - 4 ; move ul , 2 ; move ua , ul )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[20473] c:0 is:( move 2 , ul ; move 4 + ul , ul ; move ua , ul )  decode:( move 7 , 6 ; move ua , 2 / 3 ) 
[20474] c:0 is:( move ul - ua , ua ; loop 0 , 4 , move ul , ul )  decode:( move 0 - 4 , 0 ; move 3 , ul ) 
[20475] c:0 is:( move ua , ul ; move ul - ua , 2 ; move 4 , ul )  decode:( move 9 , ul ; move ua , ua / 3 ) 
[20476] c:0 is:( move ua , ua ; move ua , 4 * 2 ; move ul , ul )  decode:( move ua , 0 ; move ua , 8 ) 
[20477] c:0 is:( move ua , 3 ; move ua - 4 , ul ; move ua , ul )  decode:( move ua , 3 ; move 8 , 5 ) 
[20478] c:0 is:( move ua , ua ; move ul , 4 ; move ua - 4 , ul )  decode:( move ua , 0 ; move 3 , 5 ) 
[20479] c:0 is:( move ua + ul , ul ; move ul , 3 ; move 4 , ul )  decode:( move ua + ul , ul ; move 4 , 4 ) 
[20480] c:0 is:( move ul - ua , 3 ; move ul , 4 ; move ua , ul )  decode:( move ul - ua , 3 ; move ua , 5 ) 
[20481] c:0 is:( move ua + ul , 0 ; loop 0 , 3 , move v0 , 4 )  decode:( move ua + ul , 0 ; move 3 , 7 ) 
[20482] c:0 is:( move ua , ua / 3 ; move ul , ul ; move 2 , ul )  decode:( move ua , ua / 3 ; move 2 , 2 ) 
[20483] c:0 is:( move 3 , ua * ua ; move ul , ul ; move ua , 4 )  decode:( move 4 , 9 + 2 ; move ua , 5 ) 
[20484] c:0 is:( move ua - ul , ul ; move ua , 4 ; move 3 , ul )  decode:( move 4 , ul ; move 8 , 4 ) 
[20485] c:0 is:( move ua / 2 , ua ; move ul , 4 ; move ua , ul )  decode:( move 3 , 0 ; move 8 , 5 ) 
[20486] c:0 is:( move ua - ul , 2 ; move ul , ul ; move 4 , ul )  decode:( move 6 , 2 ; move 4 , 2 ) 
[20487] c:0 is:( move 3 , 4 ; move ul , ul ; move ua + ul , ul )  decode:( move 4 , 4 ; move ua + 2 , 2 ) 
[20488] c:0 is:( move ua , 3 ; move ua , ul - 4 ; move ul , ul )  decode:loop 0 , 4 , move 3 , 3 
[20489] c:0 is:( move ul , ul ; move 4 + ul , ul ; move 2 , ul )  decode:( move ua - ul , 2 ; move 2 , ul ) 
[20490] c:0 is:( move 3 , ul / ua ; move ul , 2 ; move ua , ul )  decode:( move ua , 0 ; move ua , 0 - 4 ) 
[20491] c:0 is:( move ua , ul ; move 2 , ua / 4 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 0 - v0 / ua 
[20492] c:0 is:( move ul , 2 / ua ; move 3 , ul ; move ua , ul )  decode:( move 3 , 0 - 6 ; move 8 , 5 ) 
[20493] c:0 is:( move 4 , ul ; move 3 , ua - ul ; move ua , ul )  decode:( move ul - ua , ul ; move 5 , 4 ) 
[20494] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ul , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[20495] c:0 is:loop 0 , 3 , ( move ul - v0 , 3 ; move ua , 0 )  decode:loop 0 , 3 , move 3 + 3 , 3 
[20496] c:0 is:( move ua , 2 / ua ; move ul , ul ; move 3 , ul )  decode:( move ua , 2 / 5 ; move 4 , 2 ) 
[20497] c:0 is:( move 4 , ul ; move 2 , ul ; move ul - ua , ul )  decode:( move 4 , 3 ; move ua , 0 - 2 ) 
[20498] c:0 is:( move 3 + 4 , ul ; move ul , ul ; move ua , ul )  decode:( move 8 , ul ; move ua , 2 ) 
[20499] c:0 is:( move ul , ua - ul ; move 3 , ul ; move ua , 4 )  decode:( move 4 , 0 ; move ua - ul , 4 ) 
[20500] c:0 is:( move ua - ul , ul ; move ul , ul ; move 3 , 3 )  decode:( move ua - ul , ul ; move 3 , 4 ) 
[20501] c:0 is:( move ua + ul , ul ; loop 0 , 5 , move ul , ul )  decode:( move 4 + 3 , ul ; move 4 , 4 ) 
[20502] c:0 is:( move ua - 3 , ul ; move ul , ul ; move ua , 4 )  decode:( move 4 , ul ; move ua , 5 ) 
[20503] c:0 is:( move ul - ua , ul ; move 3 , ul ; move ua , 4 )  decode:0 loop 0 , 4 , move 0 - 4 , 4 * 4 
[20504] c:0 is:( move ua - 4 , ul ; move ua , ul ; move ua , 4 )  decode:( move 8 , 2 ; move ua , 4 ) 
[20505] c:0 is:( move ua , ul ; move ul / 2 , ua ; move ua , 4 )  decode:( move ua + ul , ul ; move 5 , 4 ) 
[20506] c:0 is:( move ul , ul ; move ua - 4 , ul ; move 2 , ul )  decode:( move 3 , ua / 2 ; move 3 , ul ) 
[20507] c:0 is:( move 4 , ul ; move ua - 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 2 - ua , 3 - v0 
[20508] c:0 is:loop 0 , 2 , ( move ul , v0 ; move 0 - 4 , ua )  decode:( move 0 - 4 , 0 ; move 3 , ul ) 
[20509] c:0 is:( move ul , 2 ; move ua , ul ; move ua , ua / 4 )  decode:( move ua , 3 ; move ua , ua / 4 ) 
[20510] c:0 is:( move ua , 0 ; loop 0 , 4 , move ul + v0 , 3 )  decode:loop 0 , 4 , move 3 , ua / v0 * 2 
[20511] c:0 is:( move ua + ul , 3 ; move ul , ul ; move 4 , ul )  decode:( move 4 * 2 , 3 ; move 4 , 2 ) 
[20512] c:0 is:( move ua , ul ; move 4 , ua * ua ; move 3 , ul )  decode:loop 0 , 4 , move 3 , ul / v0 
[20513] c:0 is:( move ua , ul / ua ; move 3 , 3 ; move ua , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[20514] c:0 is:( move ua , ua / 4 ; move ul , ul ; move ua , 2 )  decode:loop 0 , 4 , move v0 * 3 , 0 - 9 
[20515] c:0 is:( move ua - ul , ul ; move 4 , ul ; move ua , 3 )  decode:loop 0 , 3 , move 4 + v0 , 9 9 
[20516] c:0 is:( move 3 , ul ; move ua , 4 ; move ua - ul , ul )  decode:( move 4 , 5 ; move 4 + 4 , 4 ) 
[20517] c:0 is:( move ua , ul / 3 ; move ul , 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 2 * 0 - v0 
[20518] c:0 is:( move ua , 4 / ua ; move 2 , ul ; move ua , ul )  decode:( move ua , 4 / 3 ; move 7 , 2 ) 
[20519] c:0 is:( loop 0 , 5 , move ul + ul , ul ; move ua , ul )  decode:loop 0 , 4 , move 4 , 2 + 4 / v0 
[20520] c:0 is:( move ua - 4 , ua ; move ul , 4 ; move ua , ul )  decode:( move 2 , 0 ; move 8 , ua * ua ) 
[20521] c:0 is:( move ul , ua * ua ; move 3 , ul ; move ua , 4 )  decode:( move 2 - ua , ul ; move ua , 7 ) 
[20522] c:0 is:( move 3 - ua , 0 ; loop 0 , 3 , move v0 , ul )  decode:( move 3 , 3 ; move 3 , 2 / 5 ) 
[20523] c:0 is:( move 4 , 2 ; move ul , ul ; move ul - ua , ul )  decode:( move 4 , 2 ; move 5 , 5 ) 
[20524] c:0 is:( move ul - ua , ul ; move 3 , ul ; move 3 , ul )  decode:loop 0 , 3 , move 4 , ul + 4 / v0 
[20525] c:0 is:( move 4 , ul ; move ul - ua , 3 ; move ua , ul )  decode:( move ua + 3 , ul ; move ua , 4 ) 
[20526] c:0 is:( move 3 , 2 / ua ; move ul , ul ; move ua , ul )  decode:( move 4 , 2 / 6 ; move ua , 2 ) 
[20527] c:0 is:( move ul , ul ; loop 0 , 5 , move ua , ua * ua )  decode:loop 0 , 4 , move 0 - ua , v0 - 8 
[20528] c:0 is:( move ua , ul ; move 3 , ul ; move ua - ul , 4 )  decode:( move 9 , ua / 4 ; move 5 , 5 ) 
[20529] c:0 is:( move ua , ua - 3 ; move 4 , ul ; move ul , ul )  decode:( move ua , 0 - 3 ; move 5 , ul ) 
[20530] c:0 is:( move ul , 3 ; move ua , ul / 2 ; move ua , ul )  decode:loop 0 , 2 , move v0 - ua , 2 / 4 
[20531] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , v0 )  decode:( move 2 , 0 - 2 ; move ua , 4 ) 
[20532] c:0 is:( move ua , 3 / 2 ; move ul , ul ; move ua , ul )  decode:( move ua , 3 / 2 ; move 7 , 2 ) 
[20533] c:0 is:( move ul - 4 , ua ; move ul , 3 ; move ua , ul )  decode:( move 0 - 4 , 0 ; move ua , 4 ) 
[20534] c:0 is:( move ua - ul , 3 ; move ul , 4 ; move ua , ul )  decode:( move 5 , 3 ; move 7 , 5 ) 
[20535] c:0 is:( move ua , ul / ua ; loop 0 , 3 , move ul , ul )  decode:loop 0 , 4 , move ua - 4 , v0 / ua 
[20536] c:0 is:( move ua , ul ; move ua - ul , 3 ; move 4 , ul )  decode:loop 0 , 3 , move 2 - ua , v0 - 9 
[20537] c:0 is:( move 3 , ua * ua ; move ul , 4 ; move ua , ul )  decode:( move 3 , ua * ua ; move 7 , 5 ) 
[20538] c:0 is:( move 2 - ua , ul ; move ul , ul ; move 4 , ul )  decode:( move 3 , ul ; move ul - ua , 2 ) 
[20539] c:0 is:( move ul - ua , 3 ; move ul , ul ; move ua , 4 )  decode:( move ul - ua , 3 ; move ua , 7 ) 
[20540] c:0 is:( move 2 , ul ; ul / move ua , 4 ; move ua , ul )  decode:( move ua , 9 ; move move 4 , 2 / 3 ) 
[20541] c:0 is:( move ul - ua , ul ; move 3 , ul ; move 4 , ul )  decode:loop 0 , 3 , move 4 , ul - v0 
[20542] c:0 is:loop 0 , 2 , ( move v0 + ua , ul ; move 4 , 2 )  decode:loop 0 , 3 , move ua + 2 , v0 + ul 
[20543] c:0 is:( move ua , ua / 3 ; move ul , ul ; move 3 , ul )  decode:( move ua , ua / 3 ; move 3 , 2 ) 
[20544] c:0 is:( move 4 - ua , ul ; move ul , ul ; move ua , 4 )  decode:( move 3 , 9 ; move ua , 0 - 7 ) 
[20545] c:0 is:( move ua , ul ; 2 / move ua , 4 ; move ul , ul )  decode:( move 4 , ul ; move 3 , 2 - 3 ) 
[20546] c:0 is:( move 4 , ua ; move ul , 4 ; move ua - ul , ul )  decode:( move 4 , 0 ; move ua , 5 ) 
[20547] c:0 is:( move ua , ul / ua ; move ul , 4 ; move 2 , ul )  decode:( move 3 , ul / ul ; move 3 , 5 ) 
[20548] c:0 is:( move ua , ua ; move ul , ul - 4 ; move 4 , ul )  decode:( move 5 , 0 ; move 5 , 0 - 4 ) 
[20549] c:0 is:( move 4 , ul ; move ul - 3 , ul ; move ua , ul )  decode:( move 4 , ul ; move ua , 0 - 4 ) 
[20550] c:0 is:( move 0 , 3 ; loop 0 , 4 , move ua - ul , v0 )  decode:loop 0 , 4 , move 0 - 5 , v0 
[20551] c:0 is:loop 0 , 3 , ( move ul , 2 ; move 2 , ua - v0 )  decode:loop 0 , 3 , move 3 , v0 + 2 
[20552] c:0 is:( move ul - ua , ul ; move ul , ul ; move 3 , 4 )  decode:( move ua - ul , 0 ; move 3 , 4 ) 
[20553] c:0 is:( move ua , ua ; move ua , 4 * 4 ; move ul , ul )  decode:loop 0 , 4 , move 0 - 4 , v0 * 4 
[20554] c:0 is:( loop 0 , 3 , move 4 , v0 ; move ul - ua , 0 )  decode:loop 0 , 4 , move ua - v0 , v0 
[20555] c:0 is:( move 4 , 2 ; move ua , ul / ua ; move ul , ul )  decode:( move ua , 2 ; move 4 , ul / 4 ) 
[20556] c:0 is:( move ua - 3 , ul ; move ul , ul ; move 4 , ul )  decode:( move 4 , ul ; move 4 , 2 ) 
[20557] c:0 is:( move ua + ul , 0 ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move ua - v0 , 0 - 9 
[20558] c:0 is:( move 3 , ul ; move ua - ul , 4 ; move ul , ul )  decode:( move 3 , ul ; move ua , 4 ) 
[20559] c:0 is:( move 0 , ua * ua ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 3 , move 3 - ua , 0 - 4 
[20560] c:0 is:( move 0 - ua , ua ; loop 0 , 5 , move 3 , v0 )  decode:loop 0 , 4 , move 4 , 7 * 3 
[20561] c:0 is:( loop 0 , 4 , move v0 , 3 + ul ; move ul , 0 )  decode:loop 0 , 4 , move 2 , v0 - 4 
[20562] c:0 is:( move ul - ua , 4 ; move ul , 4 ; move ua , ul )  decode:( move ua , 4 ; move ua , ua * ua ) 
[20563] c:0 is:( move ua , ul / 4 ; move ul , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 , v0 - 6 
[20564] c:0 is:( move ua , ua / 4 ; move ul , ul ; move ua , 3 )  decode:( move ua + ul , ua / move 5 , 4 ) 
[20565] c:0 is:( move ua + ul , 4 ; move ul , ul ; move 4 , ul )  decode:( move ua + 2 , 4 ; move 5 , 2 ) 
[20566] c:0 is:( move 3 , ul / ua ; move 3 , ul ; move ua , ul )  decode:loop 0 , 4 , move 3 , 2 / v0 
[20567] c:0 is:( move ua , 4 ; move ul - 4 , ul ; move ua , ul )  decode:loop 0 , 4 , move v0 - ua , 4 
[20568] c:0 is:( move ua , ua * ua ; move ul , 4 ; move 4 , ul )  decode:( move ua , 8 ; move 5 , 5 ) 
[20569] c:0 is:( move 3 , ul ; move ul , ua * ua ; move 4 , ul )  decode:( move 3 , ul ; move 5 , 9 ) 
[20570] c:0 is:( move 2 , ul ; loop 0 , 2 , move v0 - ua , 3 )  decode:( move ua + ul , 4 ; move 4 , 3 ) 
[20571] c:0 is:( move ul - ua , 4 ; move ul , ul ; move ua , 4 )  decode:( move ul - ua , 4 ; move ua , 7 ) 
[20572] c:0 is:( move ua , 2 / 4 ; move ul , ul ; move ua , ul )  decode:( move ua , 9 + 4 ; move ua , 2 ) 
[20573] c:0 is:loop 0 , 7 , loop 1 , 0 , move v1 - 3 , ua * ua  decode:loop 0 , 4 , move 0 - 4 , 0 - 8 
[20574] c:0 is:( move ua , ua ; move ul , ul / 2 ; move 4 , ul )  decode:( move ua , ua / 4 ; move 4 , 7 ) 
[20575] c:0 is:( move 0 - ul , 2 ; loop 0 , 4 , move v0 , ul )  decode:( move 3 , 4 ; move 3 - ua , 2 ) 
[20576] c:0 is:( move ua , 4 ; move ul , ul ; move 4 - ua , ul )  decode:( move ua + ul , 4 ; move 2 , 5 ) 
[20577] c:0 is:( move 4 , 3 ; move ua , ul + move ul , ua * ua )  decode:( move 5 , 0 - 4 ; move ua , 9 ) 
[20578] c:0 is:( move 4 , ul ; move ul , ul ; move ua + ul , 4 )  decode:( move 5 , ua / 5 ; move ua , 5 ) 
[20579] c:0 is:( move 3 , ul ; move 3 / ua , ul ; move ua , ul )  decode:( move 3 , ul ; move ua , 2 ) 
[20580] c:0 is:( move 4 , 2 ; move ul , ul ; move ua , ul / ua )  decode:( move ua , 0 ; move 4 , 4 / 3 ) 
[20581] c:0 is:( loop 0 , 3 , move 3 , ul + v0 ; move ua , 2 )  decode:loop 0 , 4 , move 3 - ua , 5 * v0 
[20582] c:0 is:( move ua , 3 * 4 ; move ul , ul ; move ua , ul )  decode:( move ua , 3 * ua ; move ua , 2 ) 
[20583] c:0 is:( move ul , ul ; move ua , 2 / 3 ; move ul , ul )  decode:( move ul , ul ; move ua + ul , ul ) 
[20584] c:0 is:( move 3 , 4 ; move ua - ul , ul ; move ul , ul )  decode:loop 0 , 4 , move ua - 4 , v0 * 9 
[20585] c:0 is:( move ua , 4 ; move ua / 2 , ul ; move ul , ul )  decode:( move ua + ul , 4 ; move 3 , 5 ) 
[20586] c:0 is:( move ul - 4 , ul ; move ua , 3 ; move ul , ul )  decode:( move ul , 4 ; move ua + 3 , ul ) 
[20587] c:0 is:( move ua , 4 / ua ; move ul , ul ; move 3 , ul )  decode:( move ua , 4 / ua ; move 4 , 2 ) 
[20588] c:0 is:( move 4 , ua / 3 ; move ul , ul ; move ua , ul )  decode:( move ua , ul ; move 4 , 0 - 2 ) 
[20589] c:0 is:( move 3 , 4 / ua ; move ul , ul ; move ua , ul )  decode:( move 3 , 3 / 4 ; move 7 , 2 ) 
[20590] c:0 is:( move ua , 3 / ua ; move ul , ul ; move 4 , ul )  decode:( move ua , 9 + 4 ; move 5 , 2 ) 
[20591] c:0 is:( move ua - ul , 4 ; move ul , ul ; move 4 , ul )  decode:( move 5 , 9 ; move ua , 0 - 4 ) 
[20592] c:0 is:( loop 1 , 6 , move ul + ul , ul ; move ua , ul )  decode:loop 0 , 4 , move 4 , 4 * 0 - v0 
[20593] c:0 is:loop 0 , 3 , ( move ul , ua ; move v0 + 4 , 2 )  decode:loop 0 , 3 , move ua , 2 
[20594] c:0 is:( move 0 , ua + ul ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move 4 , 0 - 9 
[20595] c:0 is:loop 0 , 3 , ( move v0 , 2 + ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , 4 
[20596] c:0 is:( move ul , ul ; move 3 , ul / 3 ; move ua , ul )  decode:( move 4 , 4 * 3 ; move ua , ul ) 
[20597] c:0 is:( move 4 , ul ; move ul + 4 , ul ; move ul , ul )  decode:loop 0 , 4 , move 2 , ul / 4 
[20598] c:0 is:loop 0 , 3 , ( move 3 , ul ; move ul + v0 , 2 )  decode:loop 0 , 4 , move 4 , v0 + 2 
[20599] c:0 is:( move 4 , ul ; move ul - ua , ul ; move 4 , ul )  decode:loop 0 , 3 , move 5 , 2 * v0 
[20600] c:0 is:( move ul - 4 , ul ; move ul , 4 ; move ua , ul )  decode:( move 3 , ul ; move ua + ul , 5 ) 
[20601] c:0 is:( move 4 , ul ; move 4 , ul ; move ul - ua , ul )  decode:( move 4 + 3 , 3 ; move 5 , 2 ) 
[20602] c:0 is:( loop 0 , 6 , move 2 , ul ; move 0 - ua , v0 )  decode:loop 0 , 4 , move 2 - ua , 2 * 5 
[20603] c:0 is:loop 0 , 3 , ( move 3 , ua - 2 ; move v0 , ul )  decode:( move ua , ul / 4 ; move 5 , ul ) 
[20604] c:0 is:( move 2 , 3 ; loop 0 , 3 , move v0 , ul + ul )  decode:loop 0 , 2 , move 3 , 3 
[20605] c:0 is:( move 4 , ul / ua ; move ul , ul ; move ua , 3 )  decode:( move 4 , ul ; move ua , 0 - 4 ) 
[20606] c:0 is:( move ua , 3 ; loop 0 , 3 , move 3 - ua , v0 )  decode:loop 0 , 3 , move 5 , 3 / v0 
[20607] c:0 is:( move ua - 4 , ul ; move ul , ul ; move 4 , ul )  decode:( move 3 , ul ; move 5 , 2 ) 
[20608] c:0 is:( move ul , ul ; move ul , ul ; move 4 , 4 + ul )  decode:( move 2 , ua / 4 ; move 4 , 5 ) 
[20609] c:0 is:( move 2 , ua - ul ; loop 0 , 4 , move v0 , 2 )  decode:loop 0 , 3 , move 3 , 4 - v0 
[20610] c:0 is:( move ua , ua / 4 ; move ul , ul ; move ua , 4 )  decode:( move ua + 2 , 0 ; move 5 , 5 ) 
[20611] c:0 is:( move ua , 4 / 3 ; move ul , ul ; move ua , ul )  decode:loop 0 , 2 , move ua , 0 - 8 
[20612] c:0 is:( move 4 , ul ; move ul , ul ; move ul - ua , 4 )  decode:( move 5 , ul ; move 5 , ua * ua ) 
[20613] c:0 is:( move ul - ua , 4 ; move ul , ul ; move 4 , ul )  decode:( move 4 , 9 ; move ua , 0 - 2 ) 
[20614] c:0 is:( move 4 , 4 ; move ua - ul , ul ; move ul , ul )  decode:( move 3 , 4 ; move 8 , ul ) 
[20615] c:0 is:( move ua , 3 / 4 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , 5 ; move ua , 2 ) 
[20616] c:0 is:( move 4 , ul - 4 ; move ua , ul ; move ul , ul )  decode:( move 4 , 0 - 3 ; move 7 , ul ) 
[20617] c:0 is:( move ul , 4 ; move ua , ul ; move ua , ua / 4 )  decode:( move ua , 5 ; move ua , ua / 4 ) 
[20618] c:0 is:( move 3 , ua + ul ; loop 0 , 3 , move 3 , v0 )  decode:( move ua + ul , 2 ; move 4 , 2 ) 
[20619] c:0 is:( move 4 - ua , ul ; move ul , ul ; move 4 , ul )  decode:( move 2 , ul ; move 5 , 2 ) 
[20620] c:0 is:( move 3 , ua / 4 ; move ul , ul ; move ua , ul )  decode:( move 4 , 2 / 4 ; move 7 , 2 ) 
[20621] c:0 is:( move ua , 3 ; move ul / 4 , ul ; move ua , ul )  decode:( move ua , 3 ; move ua , 2 ) 
[20622] c:0 is:( move 4 , ul / ua ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move 4 , 2 + 3 / v0 
[20623] c:0 is:( move ua , 0 ; loop 0 , 6 , move v0 - 2 , ul )  decode:loop 0 , 3 , move 2 - ua , v0 * 4 
[20624] c:0 is:( move ua , 2 ; loop 0 , 5 , move v0 , 2 + ul )  decode:( move ua , 2 ; move ua , 0 - 9 ) 
[20625] c:0 is:( move ua , ua / move 4 , ul ; move ua - ul , 3 )  decode:( move ua + ul , 2 ; move ua , 9 ) 
[20626] c:0 is:( move 2 + ul , ul ; loop 0 , 4 , move v0 , 3 )  decode:loop 0 , 3 , move ua - 4 , v0 - 3 
[20627] c:0 is:( move ua , ul / ua ; move 4 , ul ; move 4 , ul )  decode:loop 0 , 4 , move 4 , v0 - 3 
[20628] c:0 is:( move 4 , 4 / ua ; move ul , ul ; move ua , ul )  decode:( move 4 , 4 / ua ; move ua , 2 ) 
[20629] c:0 is:( move 4 , ua / 4 ; move ul , ul ; move ua , ul )  decode:( move 5 , ua / 4 ; move 7 , 2 ) 
[20630] c:0 is:( move 2 , ua + ul ; loop 0 , 5 , move 3 , v0 )  decode:loop 0 , 4 , move ua - 3 , 2 / v0 
[20631] c:0 is:( move ua , ul ; move ul , 4 / ua ; move 4 , ul )  decode:( move 7 , ul ; move 4 , ua / 4 ) 
[20632] c:0 is:loop 0 , 2 , ( move ul , v0 ; move ua , 4 + 4 )  decode:loop 0 , 4 , move ua - 3 , v0 - 9 
[20633] c:0 is:loop 0 , 3 , ( move ul , 2 - v0 ; move 3 , ul )  decode:loop 0 , 3 , move 4 , 3 - v0 
[20634] c:0 is:loop 0 , 3 , ( move 2 , ul ; move ul , 4 + v0 )  decode:loop 0 , 4 , move 4 - ua , v0 + 4 
[20635] c:0 is:loop 0 , 3 , ( move ul , 4 ; move 2 , v0 + ul )  decode:loop 0 , 4 , move 2 , 4 * v0 
[20636] c:0 is:( move ua , 3 ; loop 0 , 4 , move ul , 2 - v0 )  decode:( move 4 , 2 ; move ua , 4 ) 
[20637] c:0 is:( move 0 , ul + ul ; loop 0 , 5 , move 4 , v0 )  decode:loop 0 , 4 , move ua - ul , 2 * v0 
[20638] c:0 is:loop 0 , 3 , ( move 0 , ul ; move 3 , ul / v0 )  decode:loop 0 , 3 , move 3 , 2 + v0 
[20639] c:0 is:( move ua / 4 , ul ; move 4 , ul ; move ua , ul )  decode:( move 3 , ul ; move ua + ul , ul ) 
[20640] c:0 is:( move ul , ul / 4 ; move ul , 3 ; move ua , ul )  decode:( move ul , ua / 4 ; move ua , ul ) 
[20641] c:0 is:( move ua , 4 + 2 ; loop 0 , 4 , move v0 , ul )  decode:( move ua + ul , 6 ; move ua , 3 ) 
[20642] c:0 is:( move 3 - ua , ul ; loop 0 , 3 , move 3 , v0 )  decode:0 0 0 0 0 0 0 0 loop 0 , 3 , move 3 , ul 
[20643] c:0 is:( move 2 , 0 ; loop 0 , 6 , move ul , v0 - ul )  decode:( move 4 , 0 ; move 3 , 0 - 4 ) 
[20644] c:0 is:( move ua , 3 ; loop 0 , 3 , move v0 + ul , 4 )  decode:( move : ua , 3 move 3 ; move 3 , 0 ; 0 0 0 0 ; ; ; 
[20645] c:0 is:( move ua , 0 ; loop 0 , 6 , move ul , 4 + v0 )  decode:loop 0 , 4 , move 3 , 0 - v0 
[20646] c:0 is:( loop 0 , 6 , move 3 - v0 , ul ; move ua , 0 )  decode:loop 0 , 3 , move ua - v0 , 4 / 3 
[20647] c:0 is:( move 4 / 3 , ul ; move ul , ul ; move ua , ul )  decode:( move ua , 0 ; move 4 , 0 - 2 ) 
[20648] c:0 is:( move ua , ua + 3 ; loop 0 , 4 , move v0 , 4 )  decode:( move ua + ul , 3 ; move 4 , 9 ) 
[20649] c:0 is:loop 0 , ul , loop 1 , 5 , move v1 + ul , 4 * 2  decode:loop 0 , 4 , move 4 , 7 * v0 
[20650] c:0 is:loop 0 , 3 , ( move v0 , ua - ul ; move 3 , 3 )  decode:loop 0 , 3 , move 4 , 3 - v0 
[20651] c:0 is:( move ua , 2 ; loop 0 , 6 , move 2 + ul , v0 )  decode:( move 9 , 2 ; move 9 , 9 ) 
[20652] c:0 is:( move 3 - ua , ua ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 3 , move 4 , 4 * 4 
[20653] c:0 is:( move 0 , ul ; loop 0 , 6 , move ul , 2 * v0 )  decode:loop 0 , 3 , move ua - 4 , 4 
[20654] c:0 is:( move ua - 3 , 2 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 + 2 
[20655] c:0 is:( move 3 , 0 ; loop 0 , 6 , move ul , v0 - ul )  decode:( move 4 , 0 ; move 3 , 0 - 4 ) 
[20656] c:0 is:( move ua , 4 - ua ; loop 0 , 4 , move v0 , 3 )  decode:( move 3 , 4 ; move ua + ul , ul ) 
[20657] c:0 is:loop 0 , 3 , ( move 3 , ul ; move v0 , ul - 3 )  decode:loop 0 , 3 , move 4 , 0 - v0 
[20658] c:0 is:( move 4 , ul / ua ; move ul , ul ; move 4 , ul )  decode:loop 0 , 3 , move 3 , ua / v0 0 
[20659] c:0 is:( move 4 , ul / 4 ; move ul , ul ; move ua , ul )  decode:( move 4 , ul / 4 ; move 7 , 2 ) 
[20660] c:0 is:( loop 0 , 5 , move ua - 4 , 2 ; move v0 , ua )  decode:( move ul - ua , 8 ; move ua , 7 ) 
[20661] c:0 is:loop 0 , 2 , ( move ua , 4 ; move 3 / ua , v0 )  decode:( move ua , 7 ; move ua + ul , 4 ) 
[20662] c:0 is:( move 5 , ul / ua ; move ul , ul ; move ua , 4 )  decode:( move 5 , 2 ; move ua , 5 / 4 ) 
[20663] c:0 is:loop 0 , 3 , ( move ul , 2 / ua ; move 3 , v0 )  decode:loop 0 , 3 , move 4 , v0 + ua / 3 
[20664] c:0 is:loop 0 , 2 , ( move v0 , 2 ; move 4 , ul / ua )  decode:loop 0 , 2 , move 4 , 0 - 2 
[20665] c:0 is:( move ua , ul / 4 ; move ul , ul ; move 4 , ul )  decode:loop 0 , 4 , move 3 , v0 - 4 
[20666] c:0 is:( loop 0 , 3 , move 4 , v0 ; move ua , ua - 4 )  decode:loop 0 , 4 , move ua - 2 , ua / 3 
[20667] c:0 is:( move ua , 2 - 3 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move ua / v0 , 9 / 3 
[20668] c:0 is:( move ua , ul / 6 ; move ul , ul ; move 2 , ul )  decode:( move ua , ul / 6 ; move 3 , 5 ) 
[20669] c:0 is:( move ua , 3 ; loop 0 , 4 , move ua / v0 , 2 )  decode:loop 0 , 4 , move ua , 3 * 3 - v0 
[20670] c:0 is:( move ul / 2 , ua ; loop 0 , 3 , move 3 , v0 )  decode:loop 0 , 3 , move 3 , v0 
[20671] c:0 is:( loop 0 , 4 , move 2 + ul , ul ; move 4 , v0 )  decode:loop 0 , 4 , move 3 - ua , ul 
[20672] c:0 is:( loop 0 , 5 , move ul , v0 ; move 2 - ua , 3 )  decode:( move ul , 6 ; move ua - ul , 4 ) 
[20673] c:0 is:( move 0 - ua , 4 ; loop 0 , 6 , move ul , v0 )  decode:( move 3 , ul ; move ua , 0 - 4 ) 
[20674] c:0 is:( move ul , 0 ; loop 0 , 6 , move 3 , ul - v0 )  decode:( move ua + 2 , ul ; move ua , 9 ) 
[20675] c:0 is:( move ua + 2 , 3 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move ua , 3 + v0 
[20676] c:0 is:( move ua + 4 , ua + 4 ; move 0 - 3 , 0 - ul )  decode:( move 3 , 3 ; move ua + 4 , 2 ) 
[20677] c:0 is:( move ua - ul , 2 ; loop 0 , 5 , move 3 , v0 )  decode:( move 9 , 2 ; move ua , 7 + 4 ) 
[20678] c:0 is:( loop 0 , 4 , move 2 , v0 / 2 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 4 * 0 - v0 
[20679] c:0 is:( move ua , 4 + 2 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 4 , v0 + 8 
[20680] c:0 is:( move ua , ul ; loop 0 , 5 , move 2 , 3 - v0 )  decode:( move 2 - ua , ul ; move 9 , 2 ) 
[20681] c:0 is:loop 0 , 7 , loop 1 , ul , move ua / 2 , 3 - v0  decode:loop 0 , 3 , move ua - ul , v0 - ul 
[20682] c:0 is:( move ul , ua / 2 ; loop 0 , 4 , move 2 , v0 )  decode:loop 0 , 4 , move 0 - 2 , v0 * 3 
[20683] c:0 is:( move ul , 3 ; loop 0 , 3 , move v0 - 3 , ul )  decode:( move 2 , 3 ; move 4 , 0 - 2 ) 
[20684] c:0 is:( move 4 - ua , 0 ; loop 0 , 6 , move ul , v0 )  decode:loop 0 , 4 , move 2 - 4 , 0 - 9 
[20685] c:0 is:( move ul , ul ; loop 0 , 5 , move 2 , 2 - v0 )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[20686] c:0 is:loop 0 , 2 , ( move v0 , 3 / ua ; move ua , 4 )  decode:( move ua , 4 * 3 ; move ua , 8 ) 
[20687] c:0 is:( move ua , ul / 6 ; move ul , ul ; move 3 , ul )  decode:( move ua , ul / 4 ; move 4 , 2 ) 
[20688] c:0 is:( loop 0 , 5 , move 4 , 3 ; move ul + v0 , ua )  decode:loop 0 , 4 , move 4 , 4 - 4 / v0 
[20689] c:0 is:( loop 0 , 4 , move 4 - ua , v0 ; move ul , 3 )  decode:0 loop 0 , 4 , move ul - ua , v0 
[20690] c:0 is:( move 3 * 2 , ua ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 0 - 5 , 5 * v0 
[20691] c:0 is:( move 3 , 3 ; loop 0 , 5 , move ul + v0 , ul )  decode:loop 0 , 4 , move 2 - ua , v0 * 9 
[20692] c:0 is:( move ua , ua ; loop 0 , 5 , move 3 , 4 - v0 )  decode:loop 0 , 4 , move 2 - ua , 0 - 4 0 
[20693] c:0 is:( move 3 , ul / 6 ; move ul , ul ; move ua , ul )  decode:( move 3 , ul / 4 ; move ua , 2 ) 
[20694] c:0 is:( move ul , 2 ; loop 0 , 5 , move ua - v0 , 4 )  decode:loop 0 , 4 , move ua - v0 , 0 - 4 
[20695] c:0 is:( move ua - 2 , 4 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move ua - 3 , 4 / v0 
[20696] c:0 is:( loop 0 , 6 , move ul , ua - v0 ; move 3 , 2 )  decode:( move 3 , 9 ; move 4 , 0 - 9 ) 
[20697] c:0 is:loop 0 , 3 , ( move ul , 4 ; move v0 , ua - 4 )  decode:loop 0 , 3 , move ua - 4 , 0 - v0 
[20698] c:0 is:( move ua , 3 ; loop 0 , 5 , move v0 - ul , 3 )  decode:( move : , 0 ; move ua + ul , 4 ) 
[20699] c:0 is:( move 4 , ua - ul ; loop 0 , 5 , move 2 , v0 )  decode:0 loop 0 , 4 , move 3 , ua / v0 
[20700] c:0 is:( move ul , ul ; loop 0 , 4 , move 3 , v0 + 4 )  decode:( move 4 , 6 ; move ua + 3 , 8 ) 
[20701] c:0 is:( loop 0 , 6 , move v0 - ua , 3 ; move ua , 3 )  decode:loop 0 , 4 , move ua , v0 - ul 
[20702] c:0 is:( move ua - ul , 2 ; loop 0 , 5 , move v0 , 4 )  decode:loop 0 , 4 , move ua - 2 , 3 * v0 
[20703] c:0 is:( loop 0 , 6 , move ul , 2 ; move 2 - v0 , ul )  decode:( move 3 , 4 / ua ; move 4 , 9 ) 
[20704] c:0 is:( move 3 , ua - 3 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 4 , v0 + ua / 3 
[20705] c:0 is:( move ua , 3 + ul ; loop 0 , 6 , move v0 , 3 )  decode:( move 7 , 4 ; move ua , 0 - 4 ) 
[20706] c:0 is:( loop 0 , 5 , move 3 , ul ; move v0 + 3 , ul )  decode:0 loop 0 , 4 , move 4 , 2 0 * 0 0 0 * 0 
[20707] c:0 is:( loop 0 , 5 , move v0 + ul , 4 ; move ua , 3 )  decode:loop 0 , 4 , move ua - ul , 0 - 3 
[20708] c:0 is:( move ua , 4 ; loop 0 , 4 , move ul , 3 - v0 )  decode:loop 0 , 3 , move 3 , v0 + ul 
[20709] c:0 is:( move ua , ul / 2 ; loop 0 , 4 , move 3 , v0 )  decode:( move 9 , 2 / 4 ; move ua , 4 ) 
[20710] c:0 is:( loop 0 , 3 , move v0 , 4 ; move 4 + ul , ul )  decode:( move 2 , 4 * 3 ; move ua , 5 ) 
[20711] c:0 is:( move ul - 2 , 4 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move 3 , 3 / 3 / v0 
[20712] c:0 is:( move ua , ul / 6 ; move ul , ul ; move 4 , ul )  decode:loop 0 , 4 , move 3 , v0 - 4 
[20713] c:0 is:( loop 0 , 5 , move ua - v0 , 4 ; move 3 , ul )  decode:loop 0 , 4 , move ua , 4 - v0 0 0 
[20714] c:0 is:( loop 0 , 5 , move 4 , ul - 3 ; move ua , v0 )  decode:loop 0 , 4 - 4 0 - ua , 0 - 0 4 
[20715] c:0 is:( move ul , 3 / ua ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 3 , move 3 - ua , 0 - 2 
[20716] c:0 is:( move ul , ul - 2 ; loop 0 , 5 , move 4 , v0 )  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[20717] c:0 is:( move ua , 9 ; move ul - 4 , ul ; move ua , ul )  decode:loop 0 , 4 , move v0 * 3 , 9 
[20718] c:0 is:( move ua , 9 ; move ul - ua , ul ; move 4 , ul )  decode:loop 0 , 3 , move ua - v0 , 4 / 3 
[20719] c:0 is:( loop 0 , 5 , move ul , 4 + 4 ; move ua , v0 )  decode:( move ul - ua , 0 ; move 3 , ul ) 
[20720] c:0 is:( loop 0 , 5 , move ua , 3 ; move 4 - ul , v0 )  decode:loop 0 , 4 , move 0 - 5 , 3 
[20721] c:0 is:( move ua - 3 , ua ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 4 , move ua - ul , 0 - 3 
[20722] c:0 is:( move ul , 3 + ul ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move v0 - ua , 7 / 3 
[20723] c:0 is:( move ua , 9 / ua ; move ul , 3 ; move ua , ul )  decode:( move ua , ul / 4 ; move ua , 4 ) 
[20724] c:0 is:( loop 0 , 4 , move 4 , ua / 3 ; move ua , v0 )  decode:loop 0 , 4 , move ua - 2 , ua / v0 
[20725] c:0 is:( move 4 + ul , 4 ; loop 0 , 4 , move v0 , ul )  decode:( move 5 , 4 ; move 2 - ua , ul ) 
[20726] c:0 is:( move 3 * 2 , ua ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 5 , 0 - v0 
[20727] c:0 is:( move 2 - 4 , ul ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 0 - 4 , 5 
[20728] c:0 is:( move ul , 4 + ul ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 
[20729] c:0 is:( move 4 , ua ; loop 0 , 5 , move v0 , ua - 4 )  decode:loop 0 , 4 , move ua - 3 , 0 - v0 
[20730] c:0 is:( move ul , 3 ; loop 0 , 6 , move 3 , ul + v0 )  decode:loop 0 , 4 , move 4 , 9 / v0 
[20731] c:0 is:( move ul , ul - 4 ; loop 0 , 5 , move 2 , v0 )  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[20732] c:0 is:( loop 0 , 5 , move ul , 4 + v0 ; move 3 , ul )  decode:( move 3 , 9 ; move 4 , 4 ) 
[20733] c:0 is:( move ua , ul / 3 ; loop 0 , 4 , move v0 , 3 )  decode:( move 3 , 2 / move ua , 4 * 4 ) 
[20734] c:0 is:( loop 0 , 4 , move v0 , 3 ; move 4 - ul , ul )  decode:( move 3 , 4 * 3 ; move 4 , 4 ) 
[20735] c:0 is:( move 4 - ua , 4 ; loop 0 , 4 , move v0 , ul )  decode:( move 4 , ua / 4 ; move 4 , ul ) 
[20736] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move 4 / ua , ua )  decode:loop 0 , 3 , move ua - ul , v0 
[20737] c:0 is:( move 3 , ul + ul ; loop 0 , 5 , move 4 , v0 )  decode:( move 8 , 2 ; move ua + ul , 4 ) 
[20738] c:0 is:( move ua , 3 ; loop 0 , 6 , move ul - 4 , v0 )  decode:loop 0 , 4 , move ul - ua , 3 * 4 
[20739] c:0 is:( move 4 , ul ; loop 0 , 6 , move ul , v0 - 2 )  decode:loop 0 , 3 , move 3 , 0 - v0 * 2 
[20740] c:0 is:( move 4 , ul ; loop 0 , 5 , move ul , 3 - v0 )  decode:( move 3 , ul ; move 4 , 5 ) 
[20741] c:0 is:( move 4 , ul / ua ; loop 0 , 3 , move v0 , 4 )  decode:loop 0 , 4 , move 2 , v0 - 9 
[20742] c:0 is:( move ul , 4 - ua ; loop 0 , 6 , move v0 , 3 )  decode:loop 0 , 3 , move 4 , 0 - 3 
[20743] c:0 is:( move ul - 4 , 2 ; loop 0 , 6 , move ul , v0 )  decode:( move 3 , 0 - 2 ; move 4 , 3 ) 
[20744] c:0 is:( move ua , 3 / 2 ; loop 0 , 6 , move ul , v0 )  decode:( move ua + 2 , 3 / move 2 , 4 ) 
[20745] c:0 is:( move ul , 3 ; loop 0 , 6 , move ul , 2 * v0 )  decode:loop 0 , 4 , move v0 , 4 * 4 
[20746] c:0 is:( move 3 , ul ; loop 0 , 6 , move v0 - 3 , ul )  decode:loop 0 , 4 , move 3 - ua , 4 + v0 
[20747] c:0 is:( move ul , 4 + ul ; loop 0 , 5 , move 4 , v0 )  decode:loop 0 , 3 , move ua , 3 + 2 - v0 
[20748] c:0 is:( move ul , ua / 4 ; loop 0 , 3 , move 4 , v0 )  decode:( move 5 , ua / 2 ; move 5 , 4 ) 
[20749] c:0 is:( move ua , 4 * 3 ; loop 0 , 6 , move ul , v0 )  decode:loop 0 , 4 , move 4 - ua , v0 + 9 
[20750] c:0 is:( move ul , ul / 2 ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 + 9 
[20751] c:0 is:( move ul , 2 / 4 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move v0 - 4 , 2 / 3 
[20752] c:0 is:( move ul / 2 , ul ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move ua - 2 , 5 * v0 
[20753] c:0 is:( move 3 , ul ; loop 0 , 6 , move ul , 2 / v0 )  decode:loop 0 , 3 , move 3 - ua , v0 - 9 
[20754] c:0 is:( move ua , 4 / ua ; loop 0 , 6 , move 3 , v0 )  decode:( move ua + 2 , = ua + 2 , 7 ) 
[20755] c:0 is:( move ul / 2 , ul ; loop 0 , 5 , move 4 , v0 )  decode:0 0 loop 0 , 4 , move 4 , ua / 5 
[20756] c:0 is:( loop 0 , 5 , move ul , ul / 2 ; move 4 , v0 )  decode:( move 4 , 0 - 4 ; move 5 , 4 ) 
[20757] c:0 is:( move 3 , ul ; loop 0 , 5 , move v0 , ua / 4 )  decode:loop 0 , 3 , move ua - 2 , ua / 4 
[20758] c:0 is:( move ul , 3 ; loop 0 , 6 , move 2 / v0 , ul )  decode:loop 0 , 3 , move 4 - ua , 2 / v0 
[20759] c:0 is:( loop 0 , 5 , move 4 , ul ; move 3 , v0 / ua )  decode:loop 0 , 4 , move ua - ul , 0 - 0 4 
[20760] c:0 is:( loop 0 , 5 , move ul , ul / 3 ; move 4 , v0 )  decode:( move 5 , 3 * 4 ; move ua , 4 ) 
[20761] c:0 is:( move ua + 3 , 4 + 3 ; move 3 + ul , ul - 3 )  decode:( move 4 , 8 ; move ua + 3 , 2 ) 
[20762] c:0 is:( move ul / 4 , ul ; loop 0 , 5 , move 3 , v0 )  decode:loop 0 , 4 , move 3 / 2 , v0 + 9 
[20763] c:0 is:( move 4 , ua ; loop 0 , 6 , move ul , v0 * 4 )  decode:( move ua - ul , 0 ; move 3 , 7 ) 
[20764] c:0 is:( move 4 , 4 / ua ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 3 , 4 / v0 
[20765] c:0 is:( move 4 , ua * ua ; loop 1 , 6 , move v1 , 4 )  decode:loop 0 , 4 , move v0 - 7 , 9 
[20766] c:0 is:( move ul - ua , 3 - 2 ; move ul - 3 , 3 / 2 )  decode:( move 5 , 9 / 4 ; move 9 , ua / ) 4 
[20767] c:0 is:( move 3 / ua , 2 / 4 ; move ua + 2 , 3 - ul )  decode:( move ul , 4 ; move ua + ul , 7 ) 
[20768] c:0 is:( move ul , ul / 4 ; loop 1 , 5 , move 4 , v1 )  decode:loop 0 , 4 , move ua - v0 , 0 - 7 
[20769] c:0 is:( move ua , ua ; move ul - ua , ul ; move ua , 0 )  decode:( move ua , ul ; move 7 , ua / 3 ) 
[20770] c:0 is:( move ua , 0 ; move ul - ua , ul ; move ua , ul )  decode:loop 0 , 4 , move ua - ul , ua / v0 
[20771] c:0 is:( move ua , 0 ; move ul , ul ; move ua + ul , ul )  decode:( move ua , 0 ; move ua + 2 , 5 ) 
[20772] c:0 is:( move ua , ua ; move 2 - ua , ua ; move ua , ul )  decode:( move ul - ua , ul ; move ua , ul ) 
[20773] c:0 is:( move ua , ul ; move ul - ua , 0 ; move ua , ul )  decode:( move 0 - ua , ul ; move ua , ul ) 
[20774] c:0 is:( move ul - 4 , ua * 3 ; move ul - 4 , 3 / 2 )  decode:( move 3 , 3 ; move 3 , 3 / 4 ) 
[20775] c:0 is:( move ua , ul ; move ul , ul ; move 0 - ua , ua )  decode:( move ua + ul , 2 ; move 5 , ul ) 
[20776] c:0 is:( move ua , 0 ; move ul , ul ; move ua - ul , ul )  decode:( move ua , 0 ; move ua , 5 ) 
[20777] c:0 is:( move ua - ul , 0 ; move ul , ul ; move ua , ul )  decode:( move 8 , 0 ; move ua , 2 ) 
[20778] c:0 is:( move ul - ua , 0 ; move ul , ul ; move ua , ul )  decode:( move ul - ua , 0 ; move ua , 2 ) 
[20779] c:0 is:( move ul , 0 ; move ua , ul ; move ul - ua , ul )  decode:( move ua + ul , ul ; move 5 , ul ) 
[20780] c:0 is:( move ua , ul ; move 2 - ua , ul ; move ua , ua )  decode:( move ua + ul , 2 ; move 5 , ul ) 
[20781] c:0 is:( move ua , 2 ; move ua , ul ; move ua , ua * ua )  decode:( move 9 , ul / ua ; move 7 , 5 ) 
[20782] c:0 is:( move ul , 0 ; move ua + ul , ul ; move ul , ul )  decode:( move ul , 0 ; move 8 , ul ) 
[20783] c:0 is:( move ua + ul , ua ; move ul , ul ; move ua , 2 )  decode:( move ua + 2 , 3 ; move ua , 3 ) 
[20784] c:0 is:( move 4 * 2 , 4 ; loop 0 , 2 , move 2 , 4 * 2 )  decode:( move 3 , 9 ; move 2 + ua , 2 ) 
[20785] c:0 is:( move ua , ua ; move ua - ul , 2 ; move ua , ul )  decode:( move ua + 3 , 2 ; move ua , ul ) 
[20786] c:0 is:( move ua - ul , 0 ; move ua , ul ; move ul , ul )  decode:( move 5 , 0 ; move 7 , ul ) 
[20787] c:0 is:( move ul - ua , 2 ; move ul , ua ; move ua , ul )  decode:( move 4 , 5 ; move ua , 0 - 4 ) 
[20788] c:0 is:( move ua , ul ; move 2 , ul ; move ua , ua * ua )  decode:( move ua + ul , ul ; move ua , 5 ) 
[20789] c:0 is:( move ua , ua - ul ; move 2 , ul ; move ua , ul )  decode:( move 0 - ua , 2 ; move ua , 5 ) 
[20790] c:0 is:( move ua + 2 , ul ; move ul , ul ; move ua , ul )  decode:( move 7 , ul ; move 7 , 2 ) 
[20791] c:0 is:( move ua , ua ; move ul , ul ; move ua + ul , 3 )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[20792] c:0 is:( move ua + ul , ul ; move ul , 2 ; move ua , ul )  decode:( move ua + ul , ul ; move ua , 2 ) 
[20793] c:0 is:( move ua , 2 ; move ul , ul ; move ua + ul , ul )  decode:( move ua + ul , 2 ; move 7 , 2 ) 
[20794] c:0 is:( move ua , ua ; move ul , ul ; move ua , ua - 3 )  decode:( move ua , 0 ; move ua , 0 - 4 ) 
[20795] c:0 is:( move 2 , ul ; move ua , ul ; move ua , ua * ua )  decode:( move 4 + 4 , 2 ; move ua , 8 ) 
[20796] c:0 is:( move ua , ul ; move 2 - ua , ul ; move ua , ul )  decode:loop 0 , 4 , move ua / v0 , ua / 3 
[20797] c:0 is:( move ua , ul ; move 2 , ul ; move ul - ua , ua )  decode:( move ua + ul , ul ; move 4 , 4 ) 
[20798] c:0 is:( move ua , 2 ; move ul - ua , ul ; move ua , ul )  decode:loop 0 , 3 , move ul - ua , 4 / v0 
[20799] c:0 is:( move ua , ua - ul ; move ua , 3 ; move ua , ul )  decode:( move ua + ul , 2 ; move ua , ul ) 
[20800] c:0 is:( move ua + ul , ul ; move 2 , ul ; move ua , ul )  decode:( move 8 , ul ; move ua , 2 ) 
[20801] c:0 is:( move ua , ua * ua ; move ul , ul ; move ua , 2 )  decode:( move ua + ul , 8 ; move ua , 4 ) 
[20802] c:0 is:( move ua + ul , 2 ; move ul , ul ; move ua , ul )  decode:loop 0 , 3 , move ua - v0 , 2 * 0 
[20803] c:0 is:( move 2 , ul ; move ua , ul ; move ul - ua , ul )  decode:( move 5 , 2 ; move 8 , ua / 3 ) 
[20804] c:0 is:( move 2 , ul ; move ua - ul , ul ; move ua , ul )  decode:( move ua + ul , ul ; move 7 , ul ) 
[20805] c:0 is:( move ua + ul , 3 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , 3 ; move ua , 2 ) 
[20806] c:0 is:( move 2 - ua , ul ; move ul , ul ; move ua , ul )  decode:( move 4 , 0 - 4 ; move ua , 2 ) 
[20807] c:0 is:( move ua , ul ; move ul , ul ; move ua - 2 , ul )  decode:( move ua + ul , ul ; move 5 , 2 ) 
[20808] c:0 is:( move ua - ul , ul ; move 2 , ul ; move ua , ul )  decode:( move ua , ul ; move 7 , 5 ) 
[20809] c:0 is:( move ua , ul ; move 2 , ul ; move ul - ua , ul )  decode:( move 8 , ua / 4 ; move 5 , 2 ) 
[20810] c:0 is:( move ua + ul , ul ; move ul , ul ; move ua , 3 )  decode:( move ua + 2 , ul ; move 5 , 4 ) 
[20811] c:0 is:( move 2 , ul ; move ua + ul , ul ; move ul , ul )  decode:( move 3 , ul ; move 8 , ul ) 
[20812] c:0 is:( move ua , ul ; move ul , ua - 3 ; move ua , ul )  decode:( move ua , ua / 3 ; move ua , 2 ) 
[20813] c:0 is:( move ua , ul ; move ul , 2 ; move ua - ul , ul )  decode:( move ua , ul ; move ua , 3 + 4 ) 
[20814] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + ul , ul + ul  decode:0 0 loop 0 , 4 , move 3 , 9 
[20815] c:0 is:( move ua , ul ; move 3 , ul ; move ua , ua * ua )  decode:0 loop 0 , 3 , move 4 , ua * ua 
[20816] c:0 is:loop 0 , 0 , loop 1 , 5 , move ua - ul , ua - v1  decode:loop 0 , 4 , move ua , 0 - v0 - 2 
[20817] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua * v0 , ul + ul  decode:loop 0 , 3 , move ua , 4 0 / / 0 0 0 + 0 0 + 0 0 * 
[20818] c:0 is:( move ua - ul , 2 ; move ul , ul ; move ua , ul )  decode:( move ua , 2 ; move ua , 2 ) 
[20819] c:0 is:( move ua , ua ; move 2 / ua , ul ; move ua , ul )  decode:( move ua , 0 ; move ua , 2 ) 
[20820] c:0 is:( move ua , ul ; move 3 - ua , ul ; move ua , ul )  decode:( move ua , ul ; move ua + ul , ul ) 
[20821] c:0 is:( move ua , ul ; move ua , ua * ua ; move 3 , ul )  decode:( move 8 , 4 * 3 ; move ua , ua / ) 4 
[20822] c:0 is:loop 0 , 2 , ( move v0 - ua , 0 ; move ua , ul )  decode:( move 9 , 0 - 0 ; move 7 , ul ) 
[20823] c:0 is:( move ul , ul ; move ua + ul , ul ; move 2 , ul )  decode:( move ua + 2 , 2 ; move 2 , ul ) 
[20824] c:0 is:( move ul , ul ; move ua + 2 , ul ; move ul , ul )  decode:( move ul , ul ; move 3 + ua , ul ) 
[20825] c:0 is:loop 0 , 3 , loop 1 , 2 , move v1 + ul , ua - ul  decode:loop 0 , 3 , move 3 , 3 * 9 
[20826] c:0 is:( move ul , ul ; 4 + move ua , ul ; move ua , ul )  decode:( move ua , ua / 2 ; move ua , 2 ) 
[20827] c:0 is:( move ua - ul , ul ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move v0 + 2 , ul 
[20828] c:0 is:( move ua , 4 ; move ul , ul ; move ua , ua * ua )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[20829] c:0 is:( move ua , ul ; move ul - 3 , ul ; move ua , ul )  decode:( move ua , ul ; move ua + ul , ul ) 
[20830] c:0 is:( move 3 , ul ; move ua - ul , ul ; move ua , ul )  decode:loop 0 , 4 , move v0 + 2 , ul 
[20831] c:0 is:( move ua - 3 , ul ; move ul , ul ; move ua , ul )  decode:( move 5 , ul ; move ua , 5 ) 
[20832] c:0 is:( move ua , 2 / ua ; move ul , ul ; move ua , ul )  decode:loop 0 , 3 , move 4 + v0 , 0 - 2 
[20833] c:0 is:( move ua , ul ; move 3 , ul ; move ul - ua , ul )  decode:( move 4 + 3 , ul ; move 5 , 2 ) 
[20834] c:0 is:( move ul , 3 ; move ua , ul ; move ul - ua , ul )  decode:( move ua + ul , 4 ; move 5 , ul ) 
[20835] c:0 is:( move ul - ua , ul ; move ua , ul ; move 3 , ul )  decode:( move ua , ul ; move 9 , 4 * 3 ) 
[20836] c:0 is:( move ua - ul , ul ; move ul , 3 ; move ua , ul )  decode:( move 5 , ul ; move ua + ul , 4 ) 
[20837] c:0 is:( move 3 - ua , ul ; move ul , ul ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , ul ) 
[20838] c:0 is:( move ua , 4 ; move ul , ul ; move ua + ul , ul )  decode:( move ua + ul , 9 ; move 7 , 5 ) 
[20839] c:0 is:( move ua , ul ; move ul , ua - ul ; move 3 , ul )  decode:( move ul - ua , ul ; move ua , 6 ) 
[20840] c:0 is:( move 2 , ul ; move ul , ul ; move ua - ul , ul )  decode:( move 3 , ul ; move ul - ua , 2 ) 
[20841] c:0 is:( move ua , ua * ua ; move ul , ul ; move 3 , ul )  decode:( move ua , ua * ua ; move 3 , 2 ) 
[20842] c:0 is:( move ua , ul ; move ua , 4 ; move ul - ua , ul )  decode:loop 0 , 3 , move v0 - ua , 4 * 0 
[20843] c:0 is:( move ul , ul ; move ua , ul ; move 3 - ua , ul )  decode:( move 7 , ua / 2 ; move 3 , ul ) 
[20844] c:0 is:( move ul , ul ; move 3 , ul ; move ua + ul , ul )  decode:( move 3 , ul ; move ua + ul , ul ) 
[20845] c:0 is:( move ul , ul ; move 3 , ua - ul ; move ua , ul )  decode:( move 3 , 0 ; move ua , ul ) 
[20846] c:0 is:( move 3 , ul ; move ua , ul ; move ua - ul , ul )  decode:( move 3 + 4 , 2 ; move ua , 5 ) 
[20847] c:0 is:( move ul , ul ; move ua + ul , ul ; move 3 , ul )  decode:( move ua + 2 , 2 ; move 3 , ul ) 
[20848] c:0 is:( move ua , ua / 2 ; move ul , ul ; move ua , ul )  decode:( move 7 , 2 ; move ua , 0 - 2 ) 
[20849] c:0 is:( move ul , ul ; move ua + ul , 4 ; move ua , ul )  decode:( move ua + 2 , 5 ; move ua , ul ) 
[20850] c:0 is:( move ua , ul ; move ua , ua * ua ; move ul , 4 )  decode:( move ua , ul ; move ua , 4 / 3 ) 
[20851] c:0 is:( move 3 , ua * ua ; move ua , ul ; move ul , ul )  decode:( move 3 , 8 ; move ua + ul , ul ) 
[20852] c:0 is:( move ua + ul , ul ; move ul , ul ; move 3 , ul )  decode:( move ua + 2 , ul ; move 4 , 2 ) 
[20853] c:0 is:( move ua , ua - ul ; move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move 2 , v0 - ul 
[20854] c:0 is:( move ua , ul / ua ; move 2 , ul ; move ua , ul )  decode:( move ua , ul / ua ; move 8 , 5 ) 
[20855] c:0 is:( move ua + ul , 4 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[20856] c:0 is:( move ua , ul ; move 4 - ua , ul ; move ua , ul )  decode:( move ua , ul ; move ua + ul , 4 ) 
[20857] c:0 is:( move ua , ul / ua ; move ua , ul ; move 2 , ul )  decode:( move ua , ul / 4 ; move 8 , ul ) 
[20858] c:0 is:( move ua , ul / ua ; move ul , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 , 0 - v0 / 3 
[20859] c:0 is:( move ul - ua , ul ; move ul , ul ; move 2 , ul )  decode:( move ul - ua , ul ; move 3 , 5 ) 
[20860] c:0 is:( move ua - 4 , ul ; move ua , ul ; move ua , ul )  decode:loop 0 , 3 , move v0 + ua , 2 - 3 
[20861] c:0 is:( move 3 , ua * ua ; move ul , ul ; move ua , ul )  decode:( move 4 , ua * ua ; move ua , 2 ) 
[20862] c:0 is:( move ua , ua / 3 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , ua ; move ua , 2 ) 
[20863] c:0 is:( move ua - ul , ul ; move 4 , ul ; move ua , ul )  decode:loop 0 , 3 , move ua - 2 , 2 - 3 
[20864] c:0 is:( move 3 , ul ; move ul , ul ; move ua - ul , ul )  decode:( move 3 - ua , ul ; move 5 , 2 ) 
[20865] c:0 is:( move 4 - ua , ul ; move ul , ul ; move ua , ul )  decode:( move 2 , ul ; move ua + ul , ul ) 
[20866] c:0 is:( move ua , ul ; move ul - 4 , ul ; move ua , ul )  decode:loop 0 , 3 , move v0 + 4 , 4 / 3 
[20867] c:0 is:( move ul - ua , ul ; move ul , ul ; move ua , 4 )  decode:( move ul - ua , ul ; move ua , 7 ) 
[20868] c:0 is:loop 0 , 2 , ( move 2 , ul + ul ; move ua , v0 )  decode:( move ua + 2 , 2 ; move ua , 4 ) 
[20869] c:0 is:loop 0 , 3 , ( move ul , 0 ; move ul - ua , v0 )  decode:loop 0 , 3 , move ul - ua , v0 
[20870] c:0 is:loop 0 , 2 , ( move ul , ul ; move ua , 2 + v0 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[20871] c:0 is:( move ua , ul / ua ; move 2 , ul ; move ul , ul )  decode:( move 3 , ul / 6 ; move ua , ul ) 
[20872] c:0 is:( move ua , ul ; move ua / 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move ua , ul 
[20873] c:0 is:( move ua , ul ; loop 0 , 3 , move ua + v0 , 2 )  decode:loop 0 , 4 , move 3 + 4 , 4 / v0 
[20874] c:0 is:( move ua , ul ; move 4 , ul ; move ul - ua , ul )  decode:( move ua , ua / 4 ; move ua , 2 ) 
[20875] c:0 is:( move ua - ul , 4 ; move ul , ul ; move ua , ul )  decode:( move ua , 4 ; move ua , 2 ) 
[20876] c:0 is:( move ul , ul ; move ua , ul ; move ua , ua / 3 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[20877] c:0 is:( move ul , ul ; ua - move ua , ul ; move 4 , ul )  decode:( move ua , ua / ua ; move move 4 / 3 ) 
[20878] c:0 is:( move ua , ul ; move ul , ul ; move ua - ul , 4 )  decode:( move ua + ul , ul ; move 5 , 5 ) 
[20879] c:0 is:( move ua , ul / ua ; move 3 , ul ; move ua , ul )  decode:loop 0 , 3 , move ua / 2 , v0 - 2 
[20880] c:0 is:( move 3 / ua , ul ; move ua , ul ; move ua , ul )  decode:( move ua , 2 ; move ua , ul ) 
[20881] c:0 is:( move ua , ul ; move ul , ua / 3 ; move ua , ul )  decode:( move ua , ul ; move ua + ul , 3 ) 
[20882] c:0 is:loop 0 , 2 , ( move ul , 2 ; move ua , ul + v0 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[20883] c:0 is:( move ua , ua ; move ul , ua / 4 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 3 * 0 - v0 
[20884] c:0 is:loop 0 , 2 , ( move ua - ul , v0 ; move ua , 2 )  decode:loop 0 , 3 , move ua + ul , 2 
[20885] c:0 is:( move ul , ua * ua ; move ul , ul ; move ua , 4 )  decode:( move 2 , ua / 4 ; move ua , 8 ) 
[20886] c:0 is:( move ua , ul ; move ul / 2 , ul ; move ua , ul )  decode:( move 7 , ul ; move ua , 2 ) 
[20887] c:0 is:( move 3 , ul ; move ua - ul , ul ; move ul , ul )  decode:loop 0 , 4 , move 2 , ul / 3 
[20888] c:0 is:( move ua + ul , ul ; move ul , ul ; move 4 , ul )  decode:( move ua + 2 , ul ; move 4 , 2 ) 
[20889] c:0 is:( move ua + ul , 0 ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 4 , move 3 , 0 - v0 / 4 
[20890] c:0 is:( move ul , 4 ; move ua , ul ; move ul - ua , ul )  decode:( move ua + ul , 5 ; move 5 , 4 ) 
[20891] c:0 is:( move ua , ul ; move ul , ua * ua ; move 4 , ul )  decode:( move ua , ul ; move 5 , 9 ) 
[20892] c:0 is:( move ua , ua - ul ; move ul , ul ; move 4 , ul )  decode:( move ua , 2 - 3 ; move 5 , 2 ) 
[20893] c:0 is:( move 4 , ua * ua ; move ul , ul ; move ua , ul )  decode:( move 4 , ua * ua ; move ua , 2 ) 
[20894] c:0 is:( loop 0 , 2 , move ua - ul , v0 ; move ua , 2 )  decode:loop 0 , 3 , move ua - ul , v0 
[20895] c:0 is:( move 4 , ul ; move ul , ua - ul ; move ua , ul )  decode:( move 4 , ul ; move ua , ul + 4 ) 
[20896] c:0 is:( move ua , ul ; move ul - ua , ul ; move 4 , ul )  decode:loop 0 , 3 , move v0 - ua , ul / 3 
[20897] c:0 is:( move ul - ua , ua ; loop 0 , 2 , move 2 , v0 )  decode:( move 3 , 0 ; move 4 , 0 - 4 ) 
[20898] c:0 is:( move ul - ua , ul ; move ul , ul ; move 3 , ul )  decode:( move 0 - 4 , ul ; move 4 , 2 ) 
[20899] c:0 is:( move ua , ua / 4 ; move ul , ul ; move ua , ul )  decode:( move ua + ul , 3 / ; move ua , 4 ) 
[20900] c:0 is:( move ua , 4 / ua ; move ul , ul ; move ua , ul )  decode:( move ua , 4 / ua ; move ua , 2 ) 
[20901] c:0 is:( move 4 , ul ; move ul , ul ; move ul - ua , ul )  decode:( move 4 , ul ; move 5 , 5 ) 
[20902] c:0 is:( move 0 , ua * ua ; loop 0 , 5 , move ua , v0 )  decode:loop 0 , 4 , move 0 - 9 , 0 - v0 
[20903] c:0 is:( move ua , ul / ua ; move ul , 4 ; move ua , ul )  decode:( move ua , 2 ; move ua , 5 / 4 ) 
[20904] c:0 is:loop 0 , 3 , ( move v0 , 2 ; move ua + ul , ul )  decode:loop 0 , 4 , move v0 + ua , 4 
[20905] c:0 is:( move ua , 0 ; loop 0 , 4 , move ul , ul - v0 )  decode:( move ua + 2 , 0 ; move 3 , 4 ) 
[20906] c:0 is:loop 0 , 2 , loop 1 , 3 , move v0 + 3 , v1 + 2  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[20907] c:0 is:( move ul , ul / ua ; move ua , ul ; move ua , 4 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[20908] c:0 is:( loop 0 , 4 , move v0 , 0 - ul ; move ul , ua )  decode:loop 0 , 4 , move v0 , v0 - v0 
[20909] c:0 is:( move ua , ua * ua ; loop 0 , 3 , move v0 , 2 )  decode:( move 2 , ua / 2 ; move ua , ul ) 
[20910] c:0 is:( move ul - ua , ul ; move 4 , ul ; move ul , ul )  decode:( move 0 - 4 , ul ; move 5 , ul ) 
[20911] c:0 is:( loop 0 , 2 , move ua , ua - 3 ; move v0 , ul )  decode:loop 0 , 4 , move 4 , 0 - v0 0 
[20912] c:0 is:loop 0 , 3 , ( move ua - ul , 2 ; move v0 , ua )  decode:loop 0 , 3 , move ua + v0 , 2 
[20913] c:0 is:( move ua , ul ; move ul , ul ; move 3 , ul / ua )  decode:( move 4 , ul ; move 5 , 5 / 4 ) 
[20914] c:0 is:( move ua + ul , 0 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move v0 * v0 , 4 
[20915] c:0 is:( move ua , ul ; loop 0 , 3 , move 2 , v0 + ul )  decode:( move ua + ul , ul ; move 3 , 4 ) 
[20916] c:0 is:( move 2 - ua , ua ; loop 0 , 3 , move v0 , ul )  decode:( move 0 - 4 , 0 ; move 3 , 4 ) 
[20917] c:0 is:loop 0 , 2 , ( move ua + ul , 3 ; move v0 , ul )  decode:( move ua , 3 ; move ua + 2 , 4 ) 
[20918] c:0 is:( move ul , 4 / ua ; move ul , ul ; move ua , ul )  decode:( move 2 , 3 / 2 ; move ua , 5 ) 
[20919] c:0 is:( move ua , ul / 4 ; move ul , ul ; move ua , ul )  decode:( move ua , 2 / 4 ; move 7 , 2 ) 
[20920] c:0 is:loop 0 , 2 , ( move ua , v0 + ul ; move 4 , ul )  decode:loop 0 , 3 , move ua , 2 / v0 
[20921] c:0 is:( loop 0 , 4 , move ul , 3 + v0 ; move ua , ua )  decode:( move 2 , 4 / move ua - ua , ul ) 
[20922] c:0 is:( move 0 , ul / ua ; loop 0 , 4 , move ua , v0 )  decode:0 loop 0 , 4 , move v0 + 3 , 2 
[20923] c:0 is:( move 4 , ul / ua ; move ul , ul ; move ua , ul )  decode:( move 4 , ul / 6 ; move ua , 2 ) 
[20924] c:0 is:loop 0 , 2 , loop 1 , 3 , move 4 + v1 , 2 + v0  decode:loop 0 , 4 , move ua , 0 - 4 * 4 
[20925] c:0 is:( move ua , ua ; loop 0 , 3 , move 4 , v0 + ul )  decode:loop 0 , 4 , move ua - 2 , v0 
[20926] c:0 is:( loop 0 , 2 , move ua - 4 , v0 ; move ua , ul )  decode:( move 3 , 0 ; move ua + ul , 7 ) 
[20927] c:0 is:loop 0 , 3 , ( move 2 - ua , v0 ; move ul , ul )  decode:loop 0 , 4 , move 2 - ua , v0 * 2 
[20928] c:0 is:loop 0 , 3 , ( move 2 - ua , ul ; move ul , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[20929] c:0 is:loop 0 , 3 , ( move ul , ul ; move ua , 2 - v0 )  decode:( move 9 , 3 ; move ua + 3 , 2 ) 
[20930] c:0 is:( move ua , ua ; loop 0 , 5 , move ul + v0 , 2 )  decode:loop 0 , 4 , move ua , 0 - v0 * 4 
[20931] c:0 is:( move ua + ul , 0 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move v0 * v0 0 
[20932] c:0 is:loop 0 , 3 , ( move ul , ul ; move v0 + ul , 2 )  decode:loop 0 , 3 , move 3 , 4 
[20933] c:0 is:( move ua , 0 ; loop 0 , 6 , move v0 , ua * ua )  decode:loop 0 , 4 , move ua - 2 , 0 - 9 
[20934] c:0 is:loop 0 , 2 , ( move ua , 3 ; move ul , v0 - ul )  decode:( move 7 , 3 ; move ua , 2 ) 
[20935] c:0 is:loop 0 , 2 , ( move 3 , ul ; move v0 - ua , ul )  decode:loop 0 , 4 , move 4 , 4 * v0 
[20936] c:0 is:( move ua + ul , ua ; loop 0 , 5 , move v0 , 2 )  decode:loop 0 , 4 , move 3 + v0 , 4 / ua 
[20937] c:0 is:loop 0 , 3 , ( move ua / 2 , ul ; move v0 , ua )  decode:loop 0 , 3 , move ua - 2 , ul 
[20938] c:0 is:( loop 0 , 3 , move ua , ul - 3 ; move v0 , ul )  decode:loop 0 , 3 , move 0 - ua , 0 - 4 
[20939] c:0 is:( loop 0 , 6 , move 2 , v0 ; move ua + ul , ua )  decode:( move 4 , 4 ; move ua + 3 , 4 ) 
[20940] c:0 is:( move ua , ul - 2 ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 4 , move 3 , 2 * 0 - v0 
[20941] c:0 is:( move ul - ua , 0 ; loop 0 , 6 , move ul , v0 )  decode:loop 0 , 4 , move 2 , v0 * 7 
[20942] c:0 is:loop 0 , 3 , ( move ua , ua - v0 ; move ul , 4 )  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[20943] c:0 is:( loop 0 , 4 , move 2 , ul ; move ua - ul , v0 )  decode:loop 0 , 3 , move 4 , ua / v0 * 2 
[20944] c:0 is:( loop 0 , 4 , move 2 , v0 + v0 ; move 2 , 0 )  decode:( move 5 , 0 ; move 5 , 5 * 2 ) 
[20945] c:0 is:loop 0 , 3 , ( move ul , ul ; move 3 , v0 + ul )  decode:loop 0 , 3 , move 0 - 3 , v0 + 8 
[20946] c:0 is:( move ul , ul ; loop 0 , 3 , move 3 + v0 , ul )  decode:loop 0 , 4 , move 3 , v0 - ul 
[20947] c:0 is:( move ua , ua - ul ; loop 0 , 4 , move v0 , 3 )  decode:( move 3 , 4 - move ua , 4 / ua ) 
[20948] c:0 is:( loop 0 , 2 , move 4 + ul , ul ; move v0 , ul )  decode:( move 5 , ul ; move 5 , ul ) 
[20949] c:0 is:( move 2 , ul ; loop 0 , 4 , move v0 , ua * ua )  decode:loop 0 , 3 , move 3 , 0 - v0 0 
[20950] c:0 is:loop 0 , 3 , ( move 2 , ul ; move ul - v0 , ul )  decode:loop 0 , 4 , move v0 - 4 , ua / 3 
[20951] c:0 is:( loop 1 , 4 , move ul , ul ; move 0 - ua , v1 )  decode:( move 0 - 2 , 0 ; move 8 , 5 ) 
[20952] c:0 is:loop 0 , 3 , ( move ul , v0 ; move ua , ua / 2 )  decode:( move ua + 2 , 2 ; move 8 , ul ) 
[20953] c:0 is:( loop 0 , 5 , move 2 , v0 ; move ua + ul , ul )  decode:( move 9 , ua / 4 ; move 4 , 8 ) 
[20954] c:0 is:( move ul , ul ; loop 0 , 4 , move 2 , ul + v0 )  decode:loop 0 , 3 , move 3 , 2 / v0 
[20955] c:0 is:( move ua , ul ; loop 0 , 3 , move ul - 3 , v0 )  decode:( move ua , ul ; move 5 , 2 * 5 ) 
[20956] c:0 is:( loop 0 , 4 , move 3 , v0 ; move ua , ua * ua )  decode:loop 0 , 4 , move ua - 2 , v0 - 4 
[20957] c:0 is:( loop 0 , 4 , move 2 , v0 + ul ; move ul , ul )  decode:loop 0 , 4 , move ua - 4 , v0 + 9 
[20958] c:0 is:( move ua , ul ; loop 0 , 3 , move ua - v0 , 4 )  decode:loop 0 , 4 , move v0 - ua , 4 
[20959] c:0 is:( move ul - ua , 2 ; loop 0 , 4 , move v0 , ul )  decode:( move ua + 3 , ul ; move 3 , ul ) 
[20960] c:0 is:loop 0 , 2 , ( move 4 - ua , ul ; move v0 , ul )  decode:loop 0 , 2 , move 3 , ul - v0 
[20961] c:0 is:( move 3 , ul ; loop 0 , 4 , move ua , ul + v0 )  decode:loop 0 , 4 , move ua , 2 / v0 
[20962] c:0 is:( move ua - ul , ua ; loop 0 , 3 , move v0 , 4 )  decode:( move ua , 0 ; move ua - 4 , 4 ) 
[20963] c:0 is:( loop 0 , 5 , move v0 + ua , 3 ; move ul , ua )  decode:0 loop 0 , 3 , move v0 * 3 v0 0 0 0 
[20964] c:0 is:loop 0 , 2 , loop 1 , 2 , move v1 - 3 , v0 - 3  decode:loop 0 , 4 , move ul + v0 , 0 - 9 
[20965] c:0 is:( loop 0 , 3 , move 2 , ul / ua ; move ua , v0 )  decode:( move ua , 9 + 3 ; move 5 , 2 ) 
[20966] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , ul - 2 )  decode:loop 0 , 4 , move 4 , v0 - 4 
[20967] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , ua * ua )  decode:loop 0 , 4 , move 4 , 0 - 9 
[20968] c:0 is:( loop 0 , 5 , move ul + ul , v0 ; move 2 , ua )  decode:loop 0 , 4 , move 3 , 0 - v0 - 4 
[20969] c:0 is:loop 0 , 2 , ( move ul , 4 - v0 ; move ua , ul )  decode:( move ua , 5 ; move ua + ul , 4 ) 
[20970] c:0 is:( loop 0 , 5 , move v0 - ua , 3 ; move ua , ua )  decode:loop 0 , 4 , move 4 + v0 , 0 - 9 
[20971] c:0 is:( loop 0 , 5 , move v0 , 3 ; move ua + ul , ua )  decode:( move 3 , 4 ; move ua + 4 , 4 ) 
[20972] c:0 is:( loop 0 , 6 , move ul , ul ; move ua , 0 - v0 )  decode:( move ua , ul ; move 4 , 0 - 2 ) 
[20973] c:0 is:( move ul , ul ; loop 0 , 3 , move ua , v0 - 4 )  decode:loop 0 , 4 , move v0 - ua , 0 - 2 
[20974] c:0 is:loop 0 , 3 , ( move ul , ul ; move 4 - v0 , ua )  decode:loop 0 , 4 , move 3 , ul 
[20975] c:0 is:( move ul , ul ; loop 0 , 3 , move ul + v0 , 4 )  decode:( move 3 , 9 ; move 3 , 0 - 3 ) 
[20976] c:0 is:( move ua , ul / 6 ; move ul , ul ; move ua , ul )  decode:( move ua , ul / 4 ; move 7 , 2 ) 
[20977] c:0 is:( move ul - 3 , ul ; loop 0 , 3 , move v0 , ul )  decode:( move 2 , 4 ; move 3 , 4 / ua ) 
[20978] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move ul - ua , ul )  decode:loop 0 , 4 , move 0 - ua , 0 - 8 
[20979] c:0 is:( move ul , ul ; loop 0 , 5 , move 2 + ul , v0 )  decode:loop 0 , 4 , move 3 + v0 , ul / 3 
[20980] c:0 is:( move ua , ul ; loop 0 , 6 , move 2 , v0 + ul )  decode:loop 0 , 4 , move ua - 2 , v0 * 8 
[20981] c:0 is:( move ul - ua , ul ; loop 0 , 3 , move 4 , v0 )  decode:loop 0 , 3 , move 5 - ua , 2 - 3 
[20982] c:0 is:( loop 0 , 5 , move v0 + ul , ul ; move 2 , ul )  decode:loop 0 , 3 , move 5 , 3 * 5 
[20983] c:0 is:( move ua , ul / 2 ; loop 0 , 3 , move v0 , ul )  decode:( move 3 , 6 ; move ua , 4 ) 
[20984] c:0 is:( loop 0 , 5 , move v0 , ul + ul ; move 3 , ua )  decode:( move 4 , 8 ; move ua + ul , 2 ) 
[20985] c:0 is:( move ua + 3 , ul ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move ul - ua , v0 + 4 
[20986] c:0 is:loop 0 , 3 , ( move ul / v0 , 2 ; move ua , ul )  decode:loop 0 , 4 , move ua , 3 
[20987] c:0 is:loop 0 , 3 , ( move ul / 2 , ul ; move ua , v0 )  decode:loop 0 , 3 , move ua + v0 , ul / 3 
[20988] c:0 is:( loop 0 , 6 , move ul , 0 - ul ; move v0 , ul )  decode:( move 3 , 0 - 2 ; move 8 , 4 ) 
[20989] c:0 is:( move ua + ul , ul ; loop 0 , 5 , move v0 , 3 )  decode:( move ua , ul ; move 9 , 9 ) 
[20990] c:0 is:( move ua , 3 ; loop 0 , 5 , move v0 , ua - ul )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[20991] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 - 3 , ul )  decode:( move ua , 0 ; move 7 , 2 ) 
[20992] c:0 is:( move ul , ua ; loop 0 , 5 , move v0 - ua , 3 )  decode:loop 0 , 3 , move v3 + 3 , 3 
[20993] c:0 is:( loop 0 , 5 , move ua - v0 , 3 ; move ul , ua )  decode:loop 0 , 4 , move 0 - 4 , 3 
[20994] c:0 is:( move ua + ul , ul ; loop 0 , 6 , move v0 , 2 )  decode:( move ua + 3 , 9 ; move 9 , 9 ) 
[20995] c:0 is:loop 0 , 2 , ( move ul , ul ; move 4 - v0 , ul )  decode:loop 0 , 3 , move ua - 4 , 2 - 3 
[20996] c:0 is:( loop 0 , 4 , move ul - 2 , ul ; move v0 , ul )  decode:( move 3 , 2 ; move 4 , 0 - 4 ) 
[20997] c:0 is:( move ul - ua , ua ; loop 0 , 6 , move v0 , 2 )  decode:loop 0 , 4 , move 2 - ua , v0 * 4 
[20998] c:0 is:( loop 0 , 6 , move ua , ua - 3 ; move v0 , ua )  decode:loop 0 , 4 , move 4 + v0 , 4 / 4 
[20999] c:0 is:( move ul , ul ; loop 0 , 5 , move v0 - 2 , ul )  decode:( move 2 , 4 ; move ua - 3 , 4 ) 
[21000] c:0 is:( move ua , ul ; loop 0 , 3 , move v0 , ua / 4 )  decode:( move ua - ul , ul ; move 2 , 8 ) 
[21001] c:0 is:( move ua , 4 + ul ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move v0 + 4 , 4 
[21002] c:0 is:( move 3 - ua , ul ; loop 0 , 5 , move ul , v0 )  decode:( move 3 , 4 ; move 3 , 4 * 4 ) 
[21003] c:0 is:( move ul - ua , ul ; move ul , 5 / move ua , ul )  decode:( move ua , 2 - 3 ; move 5 , 2 ) 
[21004] c:0 is:( loop 0 , 4 , move ul - v0 , ul ; move ua , 4 )  decode:( move 4 - ua , 4 ; move 7 , 5 ) 
[21005] c:0 is:( move ul , ul ; loop 0 , 6 , move 2 , ul + v0 )  decode:loop 0 , 4 , move 3 , v0 * 8 
[21006] c:0 is:( move ul , ua * ua ; loop 0 , 5 , move 3 , v0 )  decode:loop 0 , 4 , move ua - 2 , ua / v0 
[21007] c:0 is:( move 4 , ul ; loop 0 , 4 , move v0 + ul , ul )  decode:loop 0 , 4 , move 3 - ua , ul 
[21008] c:0 is:( move ul , ul / ua ; loop 0 , 4 , move 2 , v0 )  decode:loop 0 , 4 , move 2 , 3 * 3 / v0 
[21009] c:0 is:( move 3 - ua , ul ; loop 0 , 5 , move v0 , ul )  decode:( move ua + ul , 4 ; move 5 , 5 ) 
[21010] c:0 is:( loop 0 , 6 , move ul , ul + v0 ; move 3 , ua )  decode:( move 2 , 0 - 2 ; move ua , 4 ) 
[21011] c:0 is:( loop 0 , 6 , move ua + v0 , 3 ; move ul , ul )  decode:loop 0 , 4 , move 3 + 3 , 3 
[21012] c:0 is:( move ul - 3 , ua ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 * 4 
[21013] c:0 is:( move 0 , ul / ua ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 3 , move 0 - 4 , 3 * 4 
[21014] c:0 is:( move ul - ua , ul ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 4 , move 3 , 0 - v0 / 4 
[21015] c:0 is:( move ul , ua * ua ; loop 0 , 5 , move v0 , 3 )  decode:( move 3 , ul ; move 4 , 3 ) 
[21016] c:0 is:loop 0 , 3 , ( move ul , ul ; move ua , 3 / v0 )  decode:loop 0 , 4 , move 4 * v0 , 4 * 4 
[21017] c:0 is:( move ul , ul / ua ; loop 0 , 3 , move 3 , v0 )  decode:( move 5 , ul / 4 ; move 4 , 4 ) 
[21018] c:0 is:( loop 0 , 4 , move ul , ul ; move v0 , 2 / ua )  decode:( move 3 , 0 - 4 ; move 3 , 3 ) 
[21019] c:0 is:( move ul , ua * ua ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 4 , move 3 , v0 + 9 
[21020] c:0 is:( loop 0 , 4 , move v0 , ul / ua ; move 2 , ul )  decode:( move 5 , 2 / 4 ; move 3 , ul ) 
[21021] c:0 is:( loop 0 , 3 , move 3 , v0 / ua ; move ul , ul )  decode:loop 0 , 4 , move 3 / v0 , 2 / 4 
[21022] c:0 is:( move ul - ua , ua ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move ua - 2 , 3 * 5 
[21023] c:0 is:( move ua + ul , 4 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move ua , 4 + 3 / v0 
[21024] c:0 is:( move 3 , ua ; loop 0 , 4 , move v0 , ul / ua )  decode:loop 0 , 3 , move 3 / v0 , 2 / 4 
[21025] c:0 is:( move ul , 2 / ua ; loop 0 , 5 , move ua , v0 )  decode:loop 0 , 4 , move 4 + 3 , 0 - 8 
[21026] c:0 is:( loop 0 , 6 , move ul - 2 , v0 ; move ua , ul )  decode:( move 3 , ul / 4 ; move ua , 3 ) 
[21027] c:0 is:( loop 0 , 5 , move 4 , ul + ul ; move v0 , ua )  decode:loop 0 , 4 , move v0 * 3 , ua / 4 
[21028] c:0 is:( move ul - ua , 4 ; loop 0 , 4 , move v0 , ul )  decode:( move ua + 2 , 4 ; move 3 , 7 ) 
[21029] c:0 is:( move ul , 9 ; move ua , ul ; move ua - ul , ul )  decode:loop 0 , 3 , move v0 - 4 , 4 / ua 
[21030] c:0 is:loop 0 , 3 , ( move 2 * v0 , v0 ; move 2 , 2 )  decode:loop 0 , 4 , move 3 , 4 + v0 
[21031] c:0 is:( move ua + 3 , ua + ul ; move 3 + 2 , ua - 4 )  decode:( move 9 , ul / 4 ; move 9 , 4 ) 
[21032] c:0 is:( move ua , ul / ua ; loop 0 , 6 , move 2 , v0 )  decode:( move ua , ul / 4 ; move 9 , 4 ) 
[21033] c:0 is:( move ul , ua - 4 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 2 , v0 
[21034] c:0 is:( move 3 - ua , ul ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 4 , 4 / v0 
[21035] c:0 is:( move ua , ua - 4 ; loop 0 , 6 , move ul , v0 )  decode:( move 2 , 3 ; move ua , 0 - 2 ) 
[21036] c:0 is:( move 3 , 0 ; loop 0 , 4 , move 3 - v0 , v0 )  decode:( move ua , ul ; move ua - 4 , 0 - ) 2 
[21037] c:0 is:( move 4 , ua ; loop 0 , 6 , move ul , ul + v0 )  decode:loop 0 , 4 , move 2 , v0 * v0 
[21038] c:0 is:( loop 0 , 6 , move v0 - ul , 2 ; move ul , ul )  decode:loop 0 , 4 , move 3 , 9 + v0 
[21039] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , ua - 3 )  decode:loop 0 , 4 , move ua - 4 , 3 - v0 
[21040] c:0 is:loop 0 , 2 , ( move 2 - v0 , v0 ; move 3 , 3 )  decode:0 loop 0 , 2 , move 3 , 4 0 * / / 0 / 0 
[21041] c:0 is:( move ua , 9 / ua ; move ul , ul ; move ua , ul )  decode:( move ua , 9 / ua ; move ua , 2 ) 
[21042] c:0 is:( loop 0 , 6 , move v0 , ul + ul ; move 4 , ua )  decode:loop 0 , 4 , move v0 * 3 , 9 
[21043] c:0 is:( move 4 , ul ; loop 0 , 5 , move ul + v0 , ul )  decode:loop 0 , 4 , move ua - v0 , 4 / 3 
[21044] c:0 is:loop 0 , 3 , ( move 3 , ul / v0 ; move ul , ul )  decode:loop 0 , 4 , move 3 , 3 / v0 
[21045] c:0 is:( loop 0 , 6 , move ul , 4 + ul ; move v0 , ua )  decode:( move 3 , ua / 2 ; move ua , 4 ) 
[21046] c:0 is:( move ul , ul ; loop 0 , 5 , move ul , 2 * v0 )  decode:loop 0 , 4 , move v0 , 4 / v0 
[21047] c:0 is:( loop 0 , 5 , move v0 , ua * ua ; move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , 4 / v0 
[21048] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua - 4 , ul )  decode:( move 3 , 4 / move 3 , 9 ) 
[21049] c:0 is:( loop 0 , 6 , move ul , v0 - ul ; move ua , 3 )  decode:( move 3 , 9 ; move ua , 7 ) 
[21050] c:0 is:( loop 0 , 5 , move v0 , ul ; move 4 , ua * ua )  decode:loop 0 , 4 , move 3 - ua , v0 - 5 
[21051] c:0 is:( move ul , ul ; loop 0 , 5 , move 4 , v0 + ul )  decode:loop 0 , 4 , move v0 - ua , 0 - 8 
[21052] c:0 is:( move ul - ua , 4 ; loop 0 , 5 , move ul , v0 )  decode:( move 2 , ul ; move ua - 3 , 4 ) 
[21053] c:0 is:( move ul , 3 / ua ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 3 , move 4 - ua , v0 - 2 
[21054] c:0 is:( loop 0 , 6 , move ul , ul + v0 ; move ua , 4 )  decode:( move 3 , 3 ; move ua , 0 - 9 ) 
[21055] c:0 is:( move ua , ua ; loop 0 , 6 , move v0 / 2 , ul )  decode:loop 0 , 3 , move v0 + 4 , 2 * 3 
[21056] c:0 is:( move ul , ul / 3 ; loop 0 , 4 , move ua , v0 )  decode:loop 0 , 4 , move v0 + 2 , 9 - 3 
[21057] c:0 is:( loop 0 , 4 , move v0 , 3 ; move v0 + 2 , 2 )  decode:( move 3 - ua , 9 ; move 5 , 4 ) 
[21058] c:0 is:( loop 0 , 5 , move v0 , ul - 3 ; move ul , ul )  decode:loop 0 , 4 , move v0 + ul , 4 
[21059] c:0 is:( move ua , ul ; loop 1 , 3 , move v1 * 3 , ul )  decode:loop 0 , 3 , move ul - ua , ul + v0 
[21060] c:0 is:( loop 0 , 6 , move v0 , ua + 4 ; move ul , ul )  decode:loop 0 , 3 , move 5 , 0 - 9 
[21061] c:0 is:( move ua , 3 ; loop 0 , 6 , move ul , v0 - ul )  decode:( move 3 , 2 ; move ua + ul , 4 ) 
[21062] c:0 is:( loop 0 , 6 , move ul , ua ; move ua , v0 * 3 )  decode:( move ua , 0 ; move 5 , 5 * 2 ) 
[21063] c:0 is:( move ul , ul ; loop 0 , 6 , move ua / v0 , 2 )  decode:loop 0 , 4 , move 0 - ua , v0 * 2 
[21064] c:0 is:( move ul , ul ; loop 0 , 6 , move ul , 4 + v0 )  decode:( move 4 , 4 ; move 3 , 4 ) 
[21065] c:0 is:( move 0 , 4 + 2 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 + 4 
[21066] c:0 is:( loop 0 , 5 , move ul , ul / ua ; move 3 , v0 )  decode:( move 3 , 8 ; move ua - ul , 4 ) 
[21067] c:0 is:( move ua , 4 ; loop 0 , 6 , move ul , v0 - ul )  decode:( move ua , 4 ; move 3 , 3 / 2 ) 
[21068] c:0 is:( move ul , ul ; loop 0 , 6 , move v0 - ul , 3 )  decode:0 0 loop 0 , 3 , move 3 , 4 * 4 
[21069] c:0 is:( move ua , ul ; loop 0 , 6 , move ul - 4 , v0 )  decode:loop 0 , 4 , move ua - v0 , 2 * 5 
[21070] c:0 is:loop 0 , 2 , ( move 2 - v0 , 3 ; move 4 , v0 )  decode:( move 3 , 3 ; move ua - ul , 4 ) 
[21071] c:0 is:( move ul , ul ; loop 0 , 5 , move v0 - ul , 4 )  decode:0 0 loop 0 , 4 , move 4 - ua , 9 
[21072] c:0 is:( move ua , ul ; loop 0 , 5 , move 3 / v0 , ul )  decode:( move ua + 3 , ul ; move 5 , 2 ) 
[21073] c:0 is:( move ul , ul ; loop 0 , 4 , move 3 / v0 , ul )  decode:loop 0 , 3 , move 3 , 2 - v0 
[21074] c:0 is:( move ul - ua , ul ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 4 , move 3 + v0 , 0 - 9 
[21075] c:0 is:( move ul , ul / 3 ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 4 , move v0 - 4 , 2 - 3 
[21076] c:0 is:( move ua , ul / ua ; loop 0 , 6 , move v0 , 3 )  decode:loop 0 , 4 , move 3 + v0 , 3 
[21077] c:0 is:( loop 0 , 4 , move v0 , ul ; move ua / 4 , ul )  decode:loop 0 , 3 , move ua - 4 , v0 / 2 
[21078] c:0 is:( loop 0 , 5 , move ul , ul ; move 3 , v0 / ua )  decode:loop 0 , 3 , move 4 - ua , v0 + 9 
[21079] c:0 is:loop 0 , 3 , ( move 4 , v0 + v0 ; move 2 , 3 )  decode:loop 0 , 4 , move ua - 3 , v0 * 2 
[21080] c:0 is:( move ul , ua ; loop 1 , 4 , move v1 , 3 / ua )  decode:( move 2 , ul / 4 ; move 5 , ul ) 
[21081] c:0 is:( move ul , 2 ; loop 0 , 5 , move ul , ul / v0 )  decode:loop 0 , 3 , move 2 , v0 - 4 
[21082] c:0 is:loop 0 , 2 , ( move 3 , v0 - 4 ; move v0 , 2 )  decode:( move 2 , 0 - 2 ; move 4 , 4 ) 
[21083] c:0 is:( move ul , 2 / ua ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 4 , v0 - 3 
[21084] c:0 is:( move ul , 4 / ua ; loop 0 , 4 , move v0 , ul )  decode:( move 3 , 9 ; move 3 , 2 ) 
[21085] c:0 is:( loop 0 , 2 , move 3 , 2 ; move v0 , v0 / 2 )  decode:( move 3 , 2 ; move 3 , 2 ) 
[21086] c:0 is:( move 3 , 0 - 3 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , 4 / v0 
[21087] c:0 is:( move ul , 2 ; loop 0 , 6 , move ul , v0 / ua )  decode:( move 3 , 0 ; move 4 , 4 * 3 ) 
[21088] c:0 is:( loop 0 , 4 , move ul , ul / ua ; move v0 , 4 )  decode:( move 3 , 3 / 2 ; move 4 , 2 ) 
[21089] c:0 is:( move ul , ul / 3 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 0 - 3 , 2 - 3 
[21090] c:0 is:( loop 0 , 6 , move 3 , 2 + 2 ; move v0 , v0 )  decode:loop 0 , 4 , move ua , 7 / v0 
[21091] c:0 is:( move ul , ul / ua ; loop 0 , 6 , move v0 , 3 )  decode:loop 0 , 4 , move 4 , 3 
[21092] c:0 is:( move ul , ul / 2 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 3 - ua , 4 * 5 
[21093] c:0 is:loop 0 , 2 , ( move v0 , 4 * 2 ; move 3 , v0 )  decode:( move 3 , 2 / 7 ; move 3 , 8 ) 
[21094] c:0 is:loop 0 , 3 , ( move 2 , 4 ; move 3 - v0 , v0 )  decode:loop 0 , 3 , move 3 - ua , 4 / v0 
[21095] c:0 is:( move 0 , 2 ; loop 0 , 6 , move v0 , v0 * 3 )  decode:loop 0 , 3 , move 2 - ua , 4 * v0 
[21096] c:0 is:( move ua - ul , 4 ; loop 1 , 5 , move v1 , ul )  decode:loop 0 , 4 , move ua - 2 , 4 / v0 
[21097] c:0 is:( move ua , ul / ua ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[21098] c:0 is:( move 3 , 3 * 2 ; loop 0 , 3 , move v0 , v0 )  decode:( move 3 , 6 ; move 3 , 4 ) 
[21099] c:0 is:( move ul , ul / ua ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move 0 - 5 , v0 + 3 
[21100] c:0 is:loop 0 , 3 , loop 1 , 2 , move 4 / 2 , v1 / v0  decode:loop 0 , 3 , move 4 , v0 - 9 
[21101] c:0 is:( move ul , ua / 3 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 4 , 2 - v0 
[21102] c:0 is:( move 3 + 2 , 2 / 3 ; move ua - ul , ua + ul )  decode:( move 4 , 7 ; move ua , ul ) 
[21103] c:0 is:( move 4 , ul ; loop 0 , 6 , move ul , ul - v0 )  decode:( move 3 , ul ; move 4 , 4 ) 
[21104] c:0 is:loop 0 , 3 , ( move 3 , 3 ; move v0 - 3 , v0 )  decode:loop 0 , 3 , move 4 , 3 + v0 
[21105] c:0 is:( move ul , ul / ua ; loop 0 , 6 , move 4 , v0 )  decode:loop 0 , 4 , move ua , 0 - v0 * 4 
[21106] c:0 is:loop 0 , 3 , ( move v0 * 2 , 3 ; move v0 , 4 )  decode:loop 0 , 4 , move 2 , v0 + 8 
[21107] c:0 is:( move ul , ua / 4 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[21108] c:0 is:loop 0 , 2 , ( move v0 , 2 / 4 ; move 3 , v0 )  decode:loop 0 , 3 , move 2 , 2 / 4 
[21109] c:0 is:( move 0 , 4 ; loop 0 , 5 , move v0 - 4 , v0 )  decode:( move 4 , ul - 4 ; move 4 , ul ) 
[21110] c:0 is:loop 0 , 3 , loop 1 , 2 , move 4 / v0 , 4 * v1  decode:loop 0 , 3 , move 4 + 2 , 4 * 4 0 0 0 0 / 
[21111] c:0 is:loop 0 , 0 , loop 1 , 6 , move v1 - 4 , 3 / v1  decode:loop 0 , 4 , move 0 - 3 , 3 / v0 
[21112] c:0 is:( move ua - 2 , ul - 2 ; move ua - ul , 3 / 2 )  decode:( move 5 , 0 - 2 ; move 4 , 8 ) 
[21113] c:0 is:loop 0 , 2 , ( move 3 , v0 ; move 4 , v0 / 2 )  decode:( move 9 , 0 ; move ua , 3 / 2 ) 
[21114] c:0 is:( move ua + 3 , 4 + ul ; move 4 + 3 , ua * ua )  decode:( move ua 9 * 3 3 ; move ua , 8 ) 
[21115] c:0 is:( move 3 , 0 ; loop 0 , 5 , move 3 / v0 , v0 )  decode:( move ua + ul , 0 ; move 3 , 4 ) 
[21116] c:0 is:( move ul , ul / ua ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 3 , move 5 , 0 - 4 
[21117] c:0 is:( move 2 , 2 ; loop 0 , 4 , move 4 , v0 * v0 )  decode:( move 9 , 2 ; move ua , 4 3 * 4 ) 
[21118] c:0 is:( loop 0 , 6 , move 2 , v0 ; move 2 , 4 - v0 )  decode:loop 0 , 4 , move 3 , 0 - 9 - v0 
[21119] c:0 is:( loop 0 , 5 , move 4 - v0 , 3 ; move v0 , 2 )  decode:( move 4 , ua / 4 ; move ua , 7 ) 
[21120] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move v0 , 4 * 2 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[21121] c:0 is:( loop 0 , 6 , move 3 , 2 ; move v0 , v0 * 2 )  decode:loop 0 , 4 , move 5 , 4 * v0 
[21122] c:0 is:( loop 0 , 5 , move 4 - v0 , 3 ; move v0 , 3 )  decode:loop 0 , 4 , move 3 , 0 - v0 * 3 
[21123] c:0 is:( move 0 , 4 ; loop 0 , 5 , move v0 , v0 / 4 )  decode:loop 0 , 4 , move 0 - 4 , 5 - v0 
[21124] c:0 is:( move 4 + 4 , 4 ; loop 0 , 4 , move v0 , v0 )  decode:( move 9 , 4 ; move 3 , 4 + 4 ) 
[21125] c:0 is:( move 3 , 3 ; loop 0 , 5 , move v0 , v0 - 4 )  decode:loop 0 , 4 , move ul - ua , 4 * 3 
[21126] c:0 is:( loop 1 , 2 , move 4 , 3 ; move v1 - 3 , v1 )  decode:loop 0 , 4 , move 4 - ua , 3 / v0 
[21127] c:0 is:( move ul - ua , ul ; loop 3 , 5 , move v3 , 4 )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[21128] c:0 is:( move 0 - ua , 3 ; loop 0 , 3 , move 4 , 3 * 2 )  decode:loop 0 , 3 , move ua - 2 , v0 - 9 
[21129] c:0 is:( move 4 + ul , 3 * 3 ; move ul + ul , ul - 3 )  decode:( move 5 , 9 ; move 4 , 0 - 2 ) 
[21130] c:0 is:loop 0 , 3 , ( move v0 , 4 ; move 4 / v0 , 3 )  decode:loop 0 , 4 , move 3 , 7 + v0 
[21131] c:0 is:( move 3 , 3 ; loop 0 , 5 , move v0 , v0 / 4 )  decode:loop 0 , 4 , move 0 - 3 , 3 / 4 
[21132] c:0 is:( loop 0 , 6 , move v0 , 4 ; move 4 + v0 , 4 )  decode:loop 0 , 4 , move ua , 3 * 3 / v0 
[21133] c:0 is:( loop 0 , 6 , move 4 , 3 * v0 ; move 3 , v0 )  decode:0 loop 0 , 4 , move 4 + 3 , 0 - 0 4 0 
[21134] c:0 is:( move ua + ul , 4 * 2 ; move ul - 4 , ua / 4 )  decode:( move ua , ua / 4 ; move 8 , 8 ) 
[21135] c:0 is:( loop 0 , 6 , move v0 / 3 , v0 ; move 3 , 4 )  decode:loop 0 , 3 , move 3 , 0 - 4 
[21136] c:0 is:loop 0 , 5 , ( v1 = 2 ; move 4 + v1 , v1 )  decode:loop 0 , 4 , move ua , 2 
[21137] c:0 is:( move ua / 4 , 4 * 2 ; move 2 , 2 ; move 4 , 2 )  decode:( move 3 , 9 + 2 ; move 3 , 4 ) 
[21138] c:0 is:( move ua , ua ; move ul , ul ; move ul - ua , ua )  decode:( move ua + ul , 0 ; move 5 , ul ) 
[21139] c:0 is:( move ua , ua * ua ; move ul , ul ; move ua , ul )  decode:( move ua + ul , ua ; move ua , 2 ) 
[21140] c:0 is:( move ua , ul ; move ul - ua , ul ; move ua , ul )  decode:loop 0 , 3 , move v0 - ua , ul / 3 
[21141] c:0 is:( move ua , ul ; move ul , ul ; move ua + ul , ul )  decode:( move ua + ul , ul ; move 8 , 2 ) 
[21142] c:0 is:( move ua , ul ; move ul , ul ; move ul - ua , ul )  decode:( move ua + ul , ul ; move 5 , 2 ) 
[21143] c:0 is:( move ul - ua , ul ; move ua , ul ; move ul , ul )  decode:( move 0 - 0 , ul ; move ua , ul ) 
[21144] c:0 is:( move ua , ul ; move ul , ul ; move ua - ul , ul )  decode:( move 7 , ul ; move ua , 2 ) 
[21145] c:0 is:( move ul , ul ; move ua + ul , ul ; move ul , ul )  decode:( move 8 , 2 ; move 2 , ul ) 
[21146] c:0 is:( move ua - ul , ul ; move ul , ul ; move ua , ul )  decode:( move ua , ul ; move ua , 2 ) 
[21147] c:0 is:( move ul , ua * ua ; move ua , ul ; move ul , ul )  decode:( move 2 , ul ; move ua , ul / 4 ) 
[21148] c:0 is:loop 0 , 2 , loop 1 , 3 , move 3 + v0 , v0 + ul  decode:loop 0 , 4 , move ua - 2 , 9 / v0 
[21149] c:0 is:loop 0 , 2 , ( move ul - ua , v0 ; move ua , ul )  decode:loop 0 , 3 , move ua + v0 , 0 - 3 
[21150] c:0 is:loop 0 , 2 , loop 1 , 3 , move 2 - ua , v1 + v0  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[21151] c:0 is:loop 0 , 2 , ( move ul , v0 ; move ul - ua , ua )  decode:( move ul - ua , 0 ; move 4 , ul ) 
[21152] c:0 is:loop 0 , 3 , ( move ua , ul ; move v0 - ua , ul )  decode:loop 0 , 4 , move ua + ul , 2 
[21153] c:0 is:loop 0 , 3 , ( move ua , v0 ; move ul + ul , ul )  decode:loop 0 , 4 , move ua , v0 * 9 
[21154] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul + v1 , v0 + 3  decode:loop 0 , 3 , move 3 - ua , v0 + 2 
[21155] c:0 is:loop 0 , 3 , ( move v0 + ua , ul ; move ul , ul )  decode:loop 0 , 4 , move 4 , 2 - v0 
[21156] c:0 is:( loop 0 , 4 , move ul - ua , v0 ; move ua , ua )  decode:loop 0 , 4 , move ul - ua , v0 
[21157] c:0 is:loop 0 , 3 , ( move ua + ul , v0 ; move ul , ul )  decode:loop 0 , 4 , move ua , 2 + v0 
[21158] c:0 is:( move ua , ul ; loop 0 , 3 , move ul + v0 , ul )  decode:( move ua + ul , ul ; move 4 , 2 ) 
[21159] c:0 is:loop 0 , 2 , loop 1 , 3 , move ul + v0 , 3 + v1  decode:loop 0 , 4 , move 2 , 2 * 4 - v0 
[21160] c:0 is:loop 0 , 3 , ( move v0 , ul + ul ; move ua , ul )  decode:loop 0 , 4 , move v0 + 4 , 4 
[21161] c:0 is:loop 0 , 3 , ( move ul - v0 , ul ; move ua , ul )  decode:loop 0 , 4 , move ua , 2 
[21162] c:0 is:( loop 0 , 3 , move ul , ul ; move ua , ul - v0 )  decode:( move 0 - 4 , ul ; move ua , ul ) 
[21163] c:0 is:( move ua + ul , ul ; loop 0 , 4 , move v0 , ul )  decode:( move ua + ul , ul ; move 4 , 4 ) 
[21164] c:0 is:loop 0 , 3 , loop 1 , 2 , move ul - 2 , v0 - v1  decode:( move 3 , 0 ; move 2 , 4 ) 
[21165] c:0 is:loop 0 , 3 , ( move ul , ul ; move ul , ua - v0 )  decode:( move ul , ul ; move 5 , 4 / 3 ) 
[21166] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , ua * ua )  decode:loop 0 , 4 , move 3 , 3 * v0 
[21167] c:0 is:loop 0 , 3 , ( move v0 + ul , ul ; move ul , ul )  decode:loop 0 , 4 , move 4 - ua , 5 
[21168] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ul - ua , ul )  decode:loop 0 , 4 , move v0 - ua , 4 
[21169] c:0 is:loop 0 , 3 , ( move v0 - ua , v0 ; move 2 , 0 )  decode:loop 0 , 3 , move ul - ua , ua / v0 
[21170] c:0 is:( loop 0 , 3 , move ul - ua , v0 ; move ul , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 
[21171] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + v0 , ul / 2  decode:loop 0 , 4 , move 3 , 6 * v0 
[21172] c:0 is:( move ua , ua * ua ; loop 0 , 4 , move v0 , ul )  decode:( move ua , ua / 3 ; move ua , 3 ) 
[21173] c:0 is:loop 0 , 3 , loop 1 , 2 , move ul + v0 , v0 / 2  decode:loop 0 , 4 , move 3 , v0 - v0 
[21174] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ul , ul + ul )  decode:loop 0 , 3 , move 2 , v0 + 4 
[21175] c:0 is:loop 0 , 0 , loop 1 , 5 , move v0 - v1 , ul - 2  decode:loop 0 , 3 , move 4 - v0 , 5 / 4 
[21176] c:0 is:loop 0 , 3 , ( move ua , 0 ; move v0 + v0 , 4 )  decode:loop 0 , 4 , move 0 - ua , 3 + v0 
[21177] c:0 is:( loop 0 , 4 , move ul + v0 , ul ; move ul , ul )  decode:loop 0 , 4 , move v0 - 4 , v0 0 
[21178] c:0 is:( move 0 , 2 ; loop 0 , 4 , move v0 - ua , v0 )  decode:( move 8 , 6 ; move ua + ul , 2 ) 
[21179] c:0 is:( move ua - ul , ul ; loop 0 , 4 , move v0 , ul )  decode:( move ul - ua , 0 ; move 5 , ul ) 
[21180] c:0 is:( move ua , 0 ; loop 0 , 3 , move v0 , v0 + 4 )  decode:( move ua , ul - 2 ; move 9 , 9 ) 
[21181] c:0 is:( loop 0 , 6 , move ul , v0 ; move ua + ul , ua )  decode:loop 0 , 4 , move 4 - ua , 3 + v0 
[21182] c:0 is:( move 0 - ua , 3 ; loop 0 , 3 , move v0 , v0 )  decode:( move ua , 3 ; move 3 , ul + 4 ) 
[21183] c:0 is:( loop 0 , 4 , move v0 , ul ; move ul - ua , ul )  decode:( move ul - ua , ul ; move 5 , ul ) 
[21184] c:0 is:( loop 0 , 6 , move ul , ul + v0 ; move ua , ua )  decode:( move ul , 4 ; move ua + ul , 4 ) 
[21185] c:0 is:( loop 0 , 6 , move v0 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , 4 * v0 
[21186] c:0 is:loop 0 , 2 , ( move ua , v0 ; move 0 - 4 , v0 )  decode:loop 0 , 4 , move 4 , v0 * 4 
[21187] c:0 is:( loop 0 , 3 , move ua , 0 - 3 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 5 , 0 - 3 
[21188] c:0 is:loop 0 , 3 , loop 1 , 2 , move 4 + v1 , v1 + ul  decode:loop 0 , 4 , move 5 , 4 - 3 / v0 
[21189] c:0 is:( move ul , ul ; loop 0 , 3 , move ul , v0 - ul )  decode:move 4 , 3 / 3 
[21190] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + v1 , 3 / ua  decode:loop 0 , 4 , move 2 , 3 * 6 
[21191] c:0 is:( loop 0 , 5 , move v0 , ua * ua ; move ul , ul )  decode:loop 0 , 4 , move 3 , 4 + v0 
[21192] c:0 is:( loop 0 , 5 , move ul , ul - v0 ; move ua , ul )  decode:( move 3 , 4 ; move ua , 0 - 4 ) 
[21193] c:0 is:( move ul , ua ; loop 0 , 5 , move ul , ul - v0 )  decode:( move 2 , 0 ; move 4 - ua , ul ) 
[21194] c:0 is:( move ua - ul , ul ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move ua - ul , 4 * 4 0 3 / 
[21195] c:0 is:loop 0 , 3 , ( move v0 , 0 ; move 4 , v0 + ul )  decode:loop 0 , 3 , move ua - ul , v0 + ul 
[21196] c:0 is:loop 0 , 3 , loop 1 , 2 , move ul - 2 , v1 / v0  decode:loop 0 , 4 , move v0 - 2 , ul 
[21197] c:0 is:( move ua , ua ; loop 0 , 6 , move v0 - ul , ul )  decode:loop 0 , 3 , move 4 + v0 , 4 * 4 
[21198] c:0 is:( loop 0 , 2 , move ua , 2 ; move v0 , 4 + v0 )  decode:( move ua + ul , 2 ; move 7 , 2 ) 
[21199] c:0 is:( move ua + 2 , 3 ; loop 0 , 3 , move v0 , v0 )  decode:( move : , 0 ; move : ; move move ; ) 
[21200] c:0 is:( loop 0 , 3 , move 3 , v0 ; move ua + 2 , v0 )  decode:( move ua , 0 ; move 8 , 3 ) 
[21201] c:0 is:( loop 0 , 6 , move ul , v0 - ul ; move ua , ua )  decode:( move 3 , 0 ; move 8 , 4 ) 
[21202] c:0 is:loop 0 , 2 , ( move v0 , ul - 2 ; move 2 , v0 )  decode:( move 2 , 2 ; move 3 , ul ) 
[21203] c:0 is:( move ua , 0 ; loop 0 , 5 , move v0 , v0 - 2 )  decode:loop 0 , 3 , move v0 + 4 , 0 - 2 
[21204] c:0 is:( loop 0 , 5 , move ul , ul ; move ul - ua , v0 )  decode:( move 2 - ua , ul ; move ua , 7 ) 
[21205] c:0 is:( move ua , ul / ua ; loop 0 , 4 , move v0 , ul )  decode:( move ua , 0 - 4 ; move ua , 3 ) 
[21206] c:0 is:( loop 0 , 2 , move 2 , v0 ; move v0 + ua , 4 )  decode:( move 4 , ul - move ua , 4 ) 
[21207] c:0 is:( loop 0 , 6 , move ul , ul ; move ua , v0 + ul )  decode:( move 3 , 3 ; move 8 , 9 ) 
[21208] c:0 is:( loop 0 , 5 , move ul , v0 / ua ; move ua , ua )  decode:loop 0 , 4 , move v0 + 2 , 2 / 3 
[21209] c:0 is:( loop 0 , 6 , move ul , v0 ; move ua , ul + ul )  decode:( move 3 , 0 - 4 ; move ua , 4 ) 
[21210] c:0 is:( loop 0 , 5 , move ul , ul ; move ua , ul - v0 )  decode:( move ua , 0 - 4 ; move ua , 4 ) 
[21211] c:0 is:( loop 0 , 5 , move ul , v0 - ul ; move ul , ua )  decode:( move 2 , 2 - 3 ; move 3 , 4 ) 
[21212] c:0 is:( loop 0 , 6 , move ul , ua * ua ; move ua , v0 )  decode:( move ua + ul , 0 ; move 2 , 4 ) 
[21213] c:0 is:( loop 0 , 6 , move v0 , ul ; move ul + ul , ul )  decode:loop 0 , 4 , move 3 - ua , 3 * 4 
[21214] c:0 is:( move ua , ul / ua ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 0 - ua , v0 * 4 
[21215] c:0 is:( loop 0 , 6 , move ul , ua ; move ul - v0 , ul )  decode:( move ua , 0 ; move 4 , ua / 3 ) 
[21216] c:0 is:( move ua , 3 + 2 ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , 5 ; move 3 , 9 ) 
[21217] c:0 is:( move ua - ul , ua + ua ; move ua - 4 , 3 + 2 )  decode:( move 5 , 0 ; move 3 , 5 ) 
[21218] c:0 is:( loop 0 , 6 , move v0 , ua * ua ; move ul , ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - 0 4 0 2 / 
[21219] c:0 is:( loop 0 , 3 , move v0 , ua + 2 ; move 4 , v0 )  decode:( move 4 - ua , 3 ; move 4 , ul ) 
[21220] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 + 2 , v0 )  decode:loop 0 , 4 , move ua , 2 + v0 
[21221] c:0 is:( move ua , ua ; loop 0 , 6 , move ul , ua / v0 )  decode:( move ua + 3 , 0 ; move 2 , 2 ) 
[21222] c:0 is:loop 0 , 3 , ( move 3 , v0 ; move 2 , ul + v0 )  decode:loop 0 , 4 , move 4 , v0 - 4 
[21223] c:0 is:loop 0 , 3 , ( move 2 * v0 , ua ; move v0 , 2 )  decode:( move ul - ua , 4 ; move 4 , 2 ) 
[21224] c:0 is:( move ua , 0 - 4 ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , 4 / 3 ; move 3 , 4 ) 
[21225] c:0 is:( move 2 , 2 ; loop 0 , 4 , move ul , v0 + v0 )  decode:( move 3 , 2 ; move 2 , 4 ) 
[21226] c:0 is:( loop 0 , 4 , move v0 , 4 + ul ; move v0 , 0 )  decode:( move 3 , 0 - 2 ; move ua , 8 ) 
[21227] c:0 is:loop 0 , 2 , ( move 4 + v0 , v0 ; move 2 , ul )  decode:loop 0 , 3 , move 4 , ul / v0 
[21228] c:0 is:( move ul , ul ; loop 0 , 6 , move ul + ul , v0 )  decode:loop 0 , 4 , move 3 , 0 - 9 
[21229] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 - 4 , 0 )  decode:( move ul - ua , 0 ; move 3 , 6 ) 
[21230] c:0 is:( move ua , ul ; loop 0 , 6 , move ul , ul - v0 )  decode:( move ua + 2 , ul ; move 3 , 4 ) 
[21231] c:0 is:loop 0 , 3 , ( move v0 - ua , 3 ; move v0 , 2 )  decode:loop 0 , 4 , move ua - 2 , ua / 4 
[21232] c:0 is:( loop 0 , 5 , move 2 , v0 ; move 2 , v0 + ua )  decode:loop 0 , 4 , move 3 , 3 / v0 
[21233] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 + 4 , 0 )  decode:( move ua + 3 , ul ; move 2 , 5 ) 
[21234] c:0 is:( loop 0 , 5 , move ul , 3 + v0 ; move v0 , 0 )  decode:( move ua , 6 ; move 2 , 7 + 4 ) 
[21235] c:0 is:( loop 0 , 6 , move ul , ul ; move ul - v0 , ua )  decode:loop 0 , 4 , move 2 , v0 + 2 
[21236] c:0 is:( move ul , ua * ua ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 4 , v0 - 8 
[21237] c:0 is:( loop 0 , 4 , move ul , ul ; move ua , ul / v0 )  decode:( move 2 , 4 ; move ua + ul , ul ) 
[21238] c:0 is:( loop 0 , 5 , move 2 - v0 , ul ; move v0 , 0 )  decode:( move 3 , ul ; move 4 , 3 ) 
[21239] c:0 is:( loop 0 , 6 , move ul , ul ; move ua , ul - v0 )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[21240] c:0 is:loop 0 , 2 , loop 1 , 3 , move ua * v0 , 4 / v1  decode:loop 0 , 3 , move 4 + 3 , 0 - 4 
[21241] c:0 is:loop 0 , 2 , ( move ua , 4 + 4 ; move v0 , v0 )  decode:loop 0 , 2 , move ua , v0 + 9 
[21242] c:0 is:( move ua , ul / ua ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 9 , 0 - v0 
[21243] c:0 is:( loop 0 , 2 , move 4 , 3 ; move v0 , ua - v0 )  decode:loop 0 , 2 , move 4 , 3 
[21244] c:0 is:loop 0 , 3 , ( move 4 - v0 , v0 ; move ua , 2 )  decode:loop 0 , 4 , move 0 - ua , v0 + 2 
[21245] c:0 is:loop 0 , 3 , ( move v0 , 4 ; move v0 + 3 , ua )  decode:( move ua , 8 ; move ua + ul , 4 ) 
[21246] c:0 is:( loop 0 , 4 , move v0 - 3 , 2 ; move ua , v0 )  decode:( move 3 - ua , 0 ; move 8 , 7 ) 
[21247] c:0 is:( move ul , 3 ; loop 0 , 4 , move v0 + v0 , 2 )  decode:( move 5 , 8 / 3 ; move ua , 4 ) 
[21248] c:0 is:( move ua , ul / ua ; loop 0 , 6 , move ul , v0 )  decode:( move 3 , ul / 4 ; move ua , 4 ) 
[21249] c:0 is:( loop 0 , 3 , move 2 , 4 + ul ; move v0 , v0 )  decode:loop 0 , 2 , move 3 - ua , ua * ua 
[21250] c:0 is:( move ua , 2 ; loop 0 , 4 , move 2 * v0 , v0 )  decode:loop 0 , 3 , move ua , 2 + v0 
[21251] c:0 is:loop 0 , 3 , ( move ua - 3 , v0 ; move v0 , 3 )  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[21252] c:0 is:( loop 0 , 5 , move v0 , 2 + v0 ; move ua , 3 )  decode:( move ua , 0 - 9 ; move 9 , 9 ) 
[21253] c:0 is:loop 0 , 3 , ( move v0 , ul ; move v0 , 2 - 3 )  decode:( move 3 , 0 ; move 3 , ul ) 
[21254] c:0 is:( move ul , ua ; loop 0 , 6 , move ul , ua / v0 )  decode:( move 3 , 0 ; move 3 , ua * ua ) 
[21255] c:0 is:( move 3 , ul ; loop 0 , 3 , move v0 , v0 + 3 )  decode:( move 4 , ul ; move 2 , 3 * 4 ) 
[21256] c:0 is:( move 2 , ul ; loop 0 , 4 , move 3 , v0 + v0 )  decode:loop 0 , 4 , move 3 - ua , v0 + 9 
[21257] c:0 is:( move 0 , ul ; loop 0 , 5 , move v0 , 2 * v0 )  decode:( move 5 , 4 + 9 ; move 4 , 8 ) 
[21258] c:0 is:( loop 0 , 6 , move ul / v0 , ul ; move ua , ua )  decode:( move ua , 9 ; move 3 , 0 - 4 ) 
[21259] c:0 is:( loop 0 , 4 , move v0 , ul ; move 2 + v0 , 3 )  decode:loop 0 , 3 , move 4 , 4 - v0 
[21260] c:0 is:( loop 0 , 4 , move ul , v0 ; move 3 + v0 , 2 )  decode:( move 2 , ul ; move ua + ul , 4 ) 
[21261] c:0 is:loop 0 , 3 , ( move v0 , 4 + 2 ; move ul , v0 )  decode:( move 2 , 5 ; move 4 , 3 + 4 ) 
[21262] c:0 is:( loop 0 , 3 , move 3 * v0 , 2 ; move v0 , ul )  decode:loop 0 , 4 , move 0 - 3 , 4 - v0 
[21263] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 4 - v0 , 2 )  decode:loop 0 , 4 , move 3 , 9 + v0 
[21264] c:0 is:( move ua + ul , ua - 4 ; move ul + ul , 2 - 3 )  decode:( move 2 , 9 / 2 ; move ua , ul ) 
[21265] c:0 is:( move ul , 2 ; loop 0 , 4 , move v0 , 2 * v0 )  decode:( move 2 , ua / 4 ; move 4 , 3 ) 
[21266] c:0 is:loop 0 , 3 , ( move 3 - ul , 3 ; move v0 , v0 )  decode:( move 3 , 2 / 4 ; move 4 , 3 ) 
[21267] c:0 is:( loop 0 , 6 , move ul , v0 * 2 ; move v0 , 0 )  decode:( move 3 , ul / ua ; move ua , 2 ) 
[21268] c:0 is:( loop 0 , 5 , move v0 , 4 ; move ua + 2 , v0 )  decode:( move 8 , ua / 4 ; move 8 , 4 ) 
[21269] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 4 / v0 , 0 )  decode:loop 0 , 3 , move ua - 2 , v0 
[21270] c:0 is:( move ul , 4 ; loop 0 , 3 , move 3 , v0 + v0 )  decode:loop 0 , 3 , move 0 - 3 , 4 * - 3 
[21271] c:0 is:( loop 0 , 4 , move v0 , 2 ; move 4 , ul + v0 )  decode:loop 0 , 4 , move ua - 4 , 3 + v0 
[21272] c:0 is:( loop 0 , 4 , move v0 , 4 ; move v0 + 2 , ul )  decode:( move 3 , 9 ; move ua , 4 + 7 ) 
[21273] c:0 is:( move 4 + ul , 2 / ua ; move ua + 2 , ua * ua )  decode:( move 3 , ul / ua ; move 9 , 8 ) 
[21274] c:0 is:( move ul , 0 ; loop 0 , 6 , move v0 , v0 - 3 )  decode:loop 0 , 3 , move v0 + 4 , 0 - 3 
[21275] c:0 is:( move 3 , ul ; loop 0 , 4 , move v0 + v0 , 3 )  decode:loop 0 , 4 , move 3 - ua , v0 - 3 
[21276] c:0 is:loop 0 , 3 , ( move v0 , ua ; move v0 , 3 / 2 )  decode:( move 3 , 3 ; move 3 , 2 ) 
[21277] c:0 is:( loop 0 , 3 , move v0 , ul ; move 4 , 3 + v0 )  decode:( move 3 , 3 ; move 4 , 4 / 3 ) 
[21278] c:0 is:loop 0 , 6 , loop 1 , ul , move v0 - 3 , v0 * 3  decode:loop 0 , 4 , move 2 , v0 + 2 
[21279] c:0 is:( move 4 , 3 ; loop 0 , 3 , move ul + v0 , v0 )  decode:( move ua , 3 ; move 3 , 4 ) 
[21280] c:0 is:loop 0 , 3 , ( move v0 , 3 ; move 4 , v0 + ul )  decode:loop 0 , 3 , move 0 - 4 , v0 - 4 
[21281] c:0 is:loop 0 , 2 , ( move 4 , ul - 3 ; move v0 , v0 )  decode:loop 0 , 2 , move 4 + v0 , 0 - 2 
[21282] c:0 is:( loop 0 , 5 , move v0 , 4 ; move v0 - ul , 0 )  decode:( move 4 , 0 - 2 ; move ua , 4 ) 
[21283] c:0 is:( move ua , 2 - 4 ; loop 0 , 4 , move v0 , v0 )  decode:( move 3 , 9 ; move ua + ul , 9 ) 
[21284] c:0 is:( move 0 , 3 / ua ; loop 0 , 5 , move v0 , v0 )  decode:0 0 loop 0 , 3 , move 3 , 3 * ua 
[21285] c:0 is:( loop 0 , 3 , move 3 , v0 * 2 ; move v0 , ul )  decode:( move ul - ua , 0 ; move 5 , 4 ) 
[21286] c:0 is:loop 0 , 3 , ( move 3 - v0 , ul ; move 3 , v0 )  decode:loop 0 , 4 , move 4 , 4 / v0 
[21287] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ul - 2 , 2 )  decode:loop 0 , 4 , move 3 , v0 + 4 
[21288] c:0 is:( move 3 , 2 + ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , 7 * 3 
[21289] c:0 is:( loop 0 , 4 , move 2 , ul ; move v0 , 4 + v0 )  decode:loop 0 , 4 , move 3 - ua , ua / 8 
[21290] c:0 is:( loop 0 , 5 , move v0 , 2 / v0 ; move ua , 2 )  decode:loop 0 , 4 , move 3 - ua , 3 - v0 
[21291] c:0 is:loop 0 , 3 , ( move 2 , v0 ; move ul , 4 * v0 )  decode:loop 0 , 4 , move 2 , v0 * 4 
[21292] c:0 is:( move 0 , 4 ; loop 0 , 6 , move v0 , ul - v0 )  decode:0 0 loop 0 , 4 , move 4 , 0 - 4 
[21293] c:0 is:( loop 0 , 5 , move 2 * v0 , v0 ; move ua , 3 )  decode:loop 0 , 4 , move ua , v0 + ul 
[21294] c:0 is:( move 3 - ua , 3 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move v0 - ua , 9 0 0 0 0 
[21295] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 2 / v0 , 3 )  decode:( move 3 , 6 ; move 3 , 4 ) 
[21296] c:0 is:( move 4 , ua ; loop 0 , 3 , move v0 * 3 , v0 )  decode:( move 5 , 0 ; move ul - ua , 2 ) 
[21297] c:0 is:( loop 0 , 3 , move v0 , v0 ; move 4 + ul , 4 )  decode:( move 3 , 2 ; move 5 , 4 ) 
[21298] c:0 is:( loop 0 , 4 , move v0 / 2 , ul ; move v0 , 2 )  decode:( move 3 , 9 ; move 3 , 0 - 4 ) 
[21299] c:0 is:( loop 0 , 6 , move 2 , ul ; move v0 , v0 + 3 )  decode:loop 0 , 4 , move 4 , v0 + 2 
[21300] c:0 is:( loop 0 , 5 , move ul , v0 * v0 ; move 4 , 0 )  decode:( move 5 , 2 / 4 ; move 3 , 8 ) 
[21301] c:0 is:( move 3 , 3 ; loop 0 , 5 , move v0 , ul + v0 )  decode:loop 0 , 4 , move 3 , 0 - 3 - v0 
[21302] c:0 is:( loop 0 , 5 , move v0 , 3 ; move ul , v0 + 3 )  decode:( move 4 , 4 * 3 ; move 4 , 3 ) 
[21303] c:0 is:( loop 0 , 3 , move 3 - 4 , ul ; move v0 , v0 )  decode:( move ul , ul ; move 3 , ul ) 
[21304] c:0 is:( move 2 , 4 ; loop 0 , 5 , move ul + v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 5 / v0 
[21305] c:0 is:( move 3 , ul ; loop 0 , 4 , move 2 , v0 * v0 )  decode:( move ua + ul , 9 ; move 3 , 4 ) 
[21306] c:0 is:( loop 0 , 6 , move ul , v0 + 3 ; move 2 , v0 )  decode:( move 5 , 9 + 2 ; move 4 , 2 ) 
[21307] c:0 is:( move 0 , ul / 2 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move 2 - ua , v0 + 3 
[21308] c:0 is:loop 0 , 3 , ( move 2 , v0 * 4 ; move ul , v0 )  decode:loop 0 , 3 , move ua - 4 , ua / v0 
[21309] c:0 is:loop 0 , 3 , ( move ul , 4 ; move v0 - 3 , v0 )  decode:( move 4 , 3 ; move 3 , 4 / 3 ) 
[21310] c:0 is:( loop 0 , 3 , move 2 , v0 * 4 ; move v0 , ul )  decode:( move 4 , 4 * 3 ; move 4 , 2 ) 
[21311] c:0 is:( move 2 , 2 ; move 2 + ul , ul / 2 ; move 2 , 0 )  decode:( move 2 , 2 ; move 4 , 2 / 4 ) 
[21312] c:0 is:( move 3 + ul , 3 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , 7 / 3 
[21313] c:0 is:( move 4 , 0 - ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 4 , 9 * v0 
[21314] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move v0 , 2 / ua )  decode:loop 0 , 4 , move ua - 2 , v0 - 8 
[21315] c:0 is:( move 0 - 4 , ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua , 3 / 4 / v0 
[21316] c:0 is:( loop 0 , 3 , move v0 + 4 , v0 ; move ul , 4 )  decode:loop 0 , 3 , move ua - 2 , v0 
[21317] c:0 is:( move 2 , ul - 4 ; loop 0 , 4 , move v0 , v0 )  decode:( move 3 , 0 - 3 ; move 3 , 3 ) 
[21318] c:0 is:( loop 0 , 5 , move v0 , 2 - 4 ; move ua , v0 )  decode:loop 0 , 4 , move 4 , 0 - 4 
[21319] c:0 is:( loop 1 , 4 , move 3 , v1 ; move v1 - ul , 0 )  decode:loop 0 , 3 , move ua - 2 , v0 * 3 
[21320] c:0 is:loop 0 , 3 , ( move 3 , 4 - ul ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 + 9 
[21321] c:0 is:( move 3 , ul ; loop 0 , 5 , move v0 , 2 - v0 )  decode:loop 0 , 4 , move v0 - 4 , v0 
[21322] c:0 is:loop 0 , 3 , ( move 2 , v0 ; move ul / v0 , 3 )  decode:( move 3 , ul ; move 4 , 9 ) 
[21323] c:0 is:( loop 0 , 3 , move 4 , 4 - v0 ; move ua , v0 )  decode:loop 0 , 4 , move 0 - 5 , 0 - 4 
[21324] c:0 is:( loop 0 , 4 , move 4 , 3 - v0 ; move ua , v0 )  decode:loop 0 , 4 , move v0 - ua , 3 - 3 
[21325] c:0 is:( loop 0 , 3 , move v0 , 3 * v0 ; move 3 , ul )  decode:( move 3 , 9 ; move 3 , ul ) 
[21326] c:0 is:( move ul - ua , ua * ua ; move 2 + ul , 4 * 2 )  decode:( move ua - ul , 5 ; move 3 , 8 ) 
[21327] c:0 is:( move 3 , ua ; loop 0 , 3 , move v0 * 4 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 
[21328] c:0 is:( move 3 , ul ; loop 0 , 4 , move v0 , 2 / v0 )  decode:( move 3 , 4 ; move ua - ul , 8 ) 
[21329] c:0 is:loop 0 , 0 , loop 1 , 7 , move 2 / v1 , ul / v1  decode:loop 0 , 4 , move 2 , ul / v0 
[21330] c:0 is:( loop 0 , 6 , move 3 , 2 ; move v0 , ul - v0 )  decode:loop 0 , 4 , move 4 , 0 - 4 * 4 
[21331] c:0 is:loop 0 , 3 , ( move 4 , v0 * ua ; move v0 , 4 )  decode:loop 0 , 4 , move 4 , 0 - v0 * 2 
[21332] c:0 is:( move 3 , 4 + ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , 9 / v0 
[21333] c:0 is:( move 3 , ul ; loop 0 , 5 , move v0 + v0 , 4 )  decode:loop 0 , 3 , move ua + ul , 0 - 4 
[21334] c:0 is:( move 4 , ua ; loop 0 , 4 , move v0 * v0 , 3 )  decode:loop 0 , 3 , move ua - 2 , v0 * 2 
[21335] c:0 is:( move 4 , 3 ; loop 0 , 5 , move v0 , ua - v0 )  decode:0 loop 0 , 3 , move 4 , 0 - 9 
[21336] c:0 is:( move 2 - ua , ul ; move 3 + 2 , 2 ; move 3 , 2 )  decode:( move 4 , 4 ; move ua , 0 - 2 ) 
[21337] c:0 is:( move ua , 4 * 2 ; loop 0 , 5 , move v0 , v0 )  decode:( move ua + 2 , 8 ; move 5 , 9 ) 
[21338] c:0 is:( loop 0 , 4 , move v0 , ua - 4 ; move 4 , v0 )  decode:loop 0 , 3 , move 3 , 3 
[21339] c:0 is:( loop 0 , 6 , move v0 - 4 , 2 ; move v0 , ua )  decode:loop 0 , 4 , move v0 - ua , 6 - 3 
[21340] c:0 is:( loop 1 , 6 , move ul , ul ; move ua , ul / v1 )  decode:( move ua + ul , 0 ; move 3 , 4 ) 
[21341] c:0 is:( move ul , 3 * 2 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , 3 * 4 / v0 
[21342] c:0 is:( move ua / 3 , ua * ua ; move 2 + ul , 4 + ul )  decode:( move 2 , ua * ua ; move 3 , 5 ) 
[21343] c:0 is:( move 4 , ul ; loop 0 , 3 , move v0 * v0 , 3 )  decode:( move 5 , ul ; move 4 , 9 ) 
[21344] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , v0 * 4 )  decode:loop 0 , 3 , move 0 - 4 , v0 - 5 
[21345] c:0 is:( move 4 , 2 ; loop 0 , 4 , move v0 , ua / v0 )  decode:( move 4 , 2 ; move 4 , 0 - 4 ) 
[21346] c:0 is:( move ul , 3 ; loop 0 , 3 , move 3 / v0 , v0 )  decode:( move 5 , 3 ; move 3 , ul ) 
[21347] c:0 is:( loop 0 , 6 , move v0 , 2 ; move 4 , ul + v0 )  decode:loop 0 , 4 , move v0 + 3 , 0 - 4 
[21348] c:0 is:( move ul - 3 , 3 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[21349] c:0 is:( loop 0 , 3 , move 4 , 3 ; move v0 * v0 , ul )  decode:loop 0 , 4 , move 3 - ua , 6 - v0 
[21350] c:0 is:( move 0 , ul ; loop 0 , 6 , move 4 , v0 * v0 )  decode:loop 0 , 4 , move 4 + 3 , ua - v0 
[21351] c:0 is:( loop 0 , 5 , move 4 - ul , 2 ; move v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , 9 
[21352] c:0 is:( move 4 , ul - 2 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 4 , 9 - v0 
[21353] c:0 is:( move 2 , ul ; loop 0 , 5 , move v0 , v0 - 4 )  decode:( move 3 + 4 , ul ; move 3 , 4 ) 
[21354] c:0 is:loop 0 , ul , loop 1 , 5 , move v1 - 3 , v1 * 4  decode:loop 0 , 4 , move v0 - 4 , 4 * 3 
[21355] c:0 is:( loop 0 , 4 , move v0 , v0 + 4 ; move ul , 4 )  decode:( move 2 , 0 ; move 5 , 9 - 4 ) 
[21356] c:0 is:( move 2 , ul ; loop 0 , 4 , move v0 * v0 , 4 )  decode:( move 4 , 4 / ua ; move 9 , 4 ) 
[21357] c:0 is:( loop 0 , 5 , move 2 , ul ; move v0 , v0 / 3 )  decode:loop 0 , 4 , move ua - 3 , v0 / 8 
[21358] c:0 is:( loop 0 , 5 , move v0 - ua , 4 ; move 4 , v0 )  decode:loop 0 , 4 , move ua , 4 - 3 / 4 
[21359] c:0 is:( move ua , 4 / 3 ; loop 0 , 4 , move v0 , v0 )  decode:( move 3 , 4 / ua ; move ua , 9 ) 
[21360] c:0 is:( loop 0 , 6 , move v0 , v0 ; move 4 - ul , 2 )  decode:loop 0 , 4 , move 4 , 0 - 4 - v0 
[21361] c:0 is:( move ua , 4 * 3 ; loop 0 , 5 , move v0 , v0 )  decode:( move ua , 0 ; move ua , 3 / 9 ) 
[21362] c:0 is:( v0 = ua - 2 ; loop 1 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , 0 - 2 
[21363] c:0 is:( move ul , 2 ; v0 = 4 * 2 ; move v0 , v0 )  decode:( move ul , 8 ; move 8 , ua * ua ) 
[21364] c:0 is:( move ul - 3 , 3 + ul ; move ua + ul , 4 / ua )  decode:( move 2 , 4 / 3 ; move 8 , 4 ) 
[21365] c:0 is:( move 3 , ua - 4 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 + 9 
[21366] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , v0 / 4 )  decode:loop 0 , 3 , move 4 , 8 
[21367] c:0 is:( move ul , 3 * 3 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 0 - 3 , v0 * 5 
[21368] c:0 is:( loop 0 , 5 , move ul , 3 / v0 ; move v0 , 2 )  decode:( move 3 , ua / 2 ; move 5 , 4 ) 
[21369] c:0 is:loop 0 , 2 , ( move v0 , ul / 4 ; move 4 , v0 )  decode:( move 4 , 9 + 2 ; move 5 , ul ) 
[21370] c:0 is:( loop 0 , 5 , move v0 , 4 - v0 ; move ua , 4 )  decode:( move 9 , ul - 9 ; move ua , 4 ) 
[21371] c:0 is:( move 4 + ul , 4 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move v0 - ua , 4 ) 
[21372] c:0 is:( move 3 , ua / 4 ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 3 , move 0 - 3 , v0 + 9 
[21373] c:0 is:( move ul , 3 ; loop 0 , 5 , move v0 , 4 - v0 )  decode:( move 3 , 9 ; move 8 , 4 ) 
[21374] c:0 is:( loop 0 , 5 , move v0 , ua - 4 ; move v0 , 4 )  decode:loop 0 , 3 , move ua - 2 , 2 + v0 
[21375] c:0 is:( move 4 , ul ; loop 0 , 6 , move v0 , 2 - v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 3 
[21376] c:0 is:( move 3 , 4 + ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 4 , 2 * 5 
[21377] c:0 is:( move ul , 3 ; loop 0 , 6 , move v0 , 2 * v0 )  decode:loop 0 , 3 , move 2 - ua , v0 - 4 
[21378] c:0 is:( loop 0 , 5 , move 3 , 4 ; move v0 , v0 * ua )  decode:loop 0 , 4 , move 4 , 0 - v0 - 9 
[21379] c:0 is:( move ul + ul , 4 + ul ; move 3 * 3 , ua - ul )  decode:( move 9 , ul ; move 4 , ul ) 
[21380] c:0 is:loop 0 , 3 , ( move v0 , 4 / 3 ; move v0 , ul )  decode:( move 3 , 4 ; move 4 , 2 ) 
[21381] c:0 is:( move ua - 2 , ua - 4 ; move ul - ua , ua / 4 )  decode:( move 5 , 4 ; move 4 , 3 / 2 ) 
[21382] c:0 is:( loop 0 , 4 , move ul , v0 / 4 ; move 3 , v0 )  decode:( move 4 , 0 ; move 2 , 3 * 4 ) 
[21383] c:0 is:( move 3 , ua ; move ua / 2 , 0 - 4 ; move 2 , 3 )  decode:( move 3 , 0 ; move 4 , 0 - 4 ) 
[21384] c:0 is:( move 3 , ul / 4 ; loop 0 , 4 , move v0 , v0 )  decode:0 loop 0 , 3 , move 3 , 0 - 9 
[21385] c:0 is:( v0 = ua - 2 ; loop 1 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , 0 - 9 
[21386] c:0 is:( loop 0 , 6 , move v0 , 4 ; move v0 - ua , 4 )  decode:loop 0 , 3 , move 5 , 0 - 9 
[21387] c:0 is:( move 4 , ul - 4 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[21388] c:0 is:( loop 0 , 5 , move v0 / 2 , 4 ; move v0 , ul )  decode:( move ua , 2 - 3 ; move 3 , 4 ) 
[21389] c:0 is:( loop 0 , 6 , move v0 , v0 ; move 4 , 3 - ul )  decode:loop 0 , 4 , move 4 , 0 - 4 - v0 
[21390] c:0 is:( move 4 * 2 , ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua + 2 , 4 * 4 
[21391] c:0 is:( move ul + ul , 4 / 2 ; move ua - ul , ua - 4 )  decode:( move ul , 2 ; move ua , 0 - 2 ) 
[21392] c:0 is:( move ua , 2 ; loop 0 , 6 , move v0 , v0 / 4 )  decode:loop 0 , 4 , move ul - ua , 9 * 3 
[21393] c:0 is:( move ul - 3 , ua * 4 ; move ul - ua , 4 + ul )  decode:( move 2 , ua / 2 ; move 5 , 5 ) 
[21394] c:0 is:( loop 0 , 5 , move ul , v0 / 2 ; move 4 , v0 )  decode:loop 0 , 3 , move 3 , v0 + 9 
[21395] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , 4 / 2 )  decode:( move 3 , 0 - 4 ; move 4 , 7 ) 
[21396] c:0 is:( move ua , 4 / 3 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - 9 
[21397] c:0 is:( loop 0 , 6 , move ua / 4 , v0 ; move v0 , 3 )  decode:loop 0 , 3 , move 4 , 0 - 4 - v0 
[21398] c:0 is:( move ua - ul , ua - 4 ; move ul + ul , 4 / 3 )  decode:( move 2 , 4 / 4 ; move 5 , 4 ) 
[21399] c:0 is:( move 3 , 4 ; loop 0 , 6 , move v0 , ua / v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - 8 
[21400] c:0 is:( move 4 , 3 / ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 2 - ua , 4 - v0 
[21401] c:0 is:( move 2 - 3 , 3 ; loop 0 , 5 , move ua , ua - 2 )  decode:0 loop 0 , 4 , move ua + ul , 0 - 0 
[21402] c:0 is:( loop 0 , 6 , move 4 , 4 ; move ul - v0 , v0 )  decode:loop 0 , 4 , move ua , 4 * 0 - 4 
[21403] c:0 is:( move ul , 3 / 4 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move v0 - 3 , 0 - 7 
[21404] c:0 is:( move 2 , ul / 4 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 + 3 
[21405] c:0 is:( move ul , 3 ; loop 0 , 5 , move v0 , v0 / 4 )  decode:loop 0 , 4 , move 0 - 3 , 2 / v0 
[21406] c:0 is:( move ua - 4 , 4 - ul ; move ua - ul , ua / 4 )  decode:( move 2 , 3 ; move 5 , ua / 4 ) 
[21407] c:0 is:( loop 0 , 6 , move ul , v0 / 4 ; move v0 , 3 )  decode:( move 3 , 0 ; move 6 , 0 - 9 ) 
[21408] c:0 is:( move 4 , ul ; loop 0 , 6 , move v0 , v0 / 3 )  decode:loop 0 , 4 , move 4 , 0 - 8 
[21409] c:0 is:( loop 0 , 6 , move 4 , ul ; move v0 , 4 * v0 )  decode:loop 0 , 4 , move 4 + 2 , 0 - 0 4 4 2 / 
[21410] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , 4 / 3 )  decode:( move 3 , 8 ; move ua , 0 - 4 ) 
[21411] c:0 is:( move 2 , 3 ; move 4 , 2 / 3 ; move ul + ul , 2 )  decode:loop 0 , 4 , move 2 , v0 + 6 
[21412] c:0 is:( move ua + 2 , 3 / 4 ; loop 0 , 4 , move 2 , ul )  decode:loop 0 , 4 , move 4 , 4 / v0 
[21413] c:0 is:( move 3 , ul ; move 2 , 3 + 2 ; move 3 , ul / 3 )  decode:( move 3 , ul ; move 4 , ul ) 
[21414] c:0 is:( move ua , 2 ; move 4 , 4 / 2 ; move 3 + ul , 2 )  decode:( move ua , 2 ; move ua , 4 + 3 ) 
[21415] c:0 is:( move ua , 3 ; ( move 3 , 3 + ul ; move 2 , 2 ) )  decode:( move ua , 3 ; move 5 , ua / 3 ) 
[21416] c:0 is:( move 3 , ul ; move 3 , 3 / 2 ; move ua - 4 , 2 )  decode:( move 4 , 9 / 4 ; move 4 , 2 ) 
[21417] c:0 is:( move 2 , 3 - ul ; loop 0 , 5 , move ul - 4 , 2 )  decode:loop 0 , 4 , move 0 - 4 , 0 - 9 
[21418] c:0 is:( ( move ua , 0 ; move 3 , 4 ) ; move 2 , 2 / ua )  decode:( move ua , 0 ; move 5 , 4 * 3 ) 
[21419] c:0 is:( move 4 , ul - 3 ; move 3 , 2 / 4 ; move 2 , ua )  decode:( move 4 , 0 - 4 ; move 5 , 7 ) 
[21420] c:0 is:( ( move 4 , 3 ; move ua , ul ) ; move 3 + 2 , 4 )  decode:( move 0 - 9 , ul ; move ua , 4 ) 
[21421] c:0 is:( move ul , ul / 2 ; loop 0 , 5 , move 4 + 3 , 4 )  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[21422] c:0 is:( ( move 4 , 2 ; move 0 , ul ) ; move 3 , ua / 4 )  decode:( move 3 , 2 ; move 3 , 0 - 4 ) 
[21423] c:0 is:( ( move 3 , 3 - ul ; move 3 , ul ) ; move 2 , 4 )  decode:( move 4 , 2 ; move 3 , 4 ) 
[21424] c:0 is:( move ua , 4 ; ( move 4 , 3 / 2 ; move ua , 2 ) )  decode:loop 0 , 4 , move 4 , 0 - 4 / v0 
[21425] c:0 is:( ( move 3 , 4 + 4 ; move ul , 3 ) ; move ua , 3 )  decode:( move 3 , 9 / 2 ; move ua , 7 ) 
[21426] c:0 is:( move 3 + ul , 4 - ul ; loop 0 , 6 , move 4 , 4 )  decode:loop 0 , 4 , move ua - 2 - ua , 0 0 0 0 0 0 * 0 
[21427] c:0 is:loop 0 , 3 , loop 1 , 2 , move ul + v1 , ua - v0  decode:loop 0 , 3 , move ua - 4 , 0 - v0 
[21428] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + ul , v0 + ul  decode:loop 0 , 4 , move 3 , 3 / v0 
[21429] c:0 is:loop 0 , 5 , loop 1 , 0 , move v1 - v0 , ua * ua  decode:loop 0 , 3 , move 3 - ua , 9 / v0 
[21430] c:0 is:( move ua + ul , 0 ; loop 0 , 3 , move v0 , v0 )  decode:( move ua + 2 , 0 ; move 2 , 4 ) 
[21431] c:0 is:loop 0 , 2 , ( move ua , v0 ; move ua , 2 + v0 )  decode:( move 9 , 0 ; move ua + 3 , ul ) 
[21432] c:0 is:loop 0 , 2 , loop 1 , 3 , move v0 + ul , ul - v1  decode:( move 2 , 3 ; move ua , ul / 4 ) 
[21433] c:0 is:loop 0 , 2 , ( move ul , 2 ; move v0 + ua , v0 )  decode:( move 8 , 2 ; move ua + 2 , 4 ) 
[21434] c:0 is:loop 0 , 2 , ( move ua , v0 + v0 ; move ua , 3 )  decode:loop 0 , 4 , move ul - ua , 0 - v0 
[21435] c:0 is:loop 0 , 2 , ( move ua , v0 ; move 2 + v0 , ul )  decode:loop 0 , 4 , move ua - 2 , v0 * 2 
[21436] c:0 is:( loop 0 , 2 , move ua , 2 ; move v0 - ua , v0 )  decode:( move ua + 3 , 2 ; move 9 , 2 ) 
[21437] c:0 is:loop 0 , 3 , ( move v0 - ua , v0 ; move ul , 0 )  decode:loop 0 , 3 , move v0 - ua , v0 
[21438] c:0 is:loop 0 , 2 , ( move v0 - ua , v0 ; move ua , 2 )  decode:loop 0 , 4 , move ua - 7 , 3 - v0 
[21439] c:0 is:loop 0 , 3 , ( move v0 , ua ; move v0 + ua , 3 )  decode:loop 0 , 3 , move ua + v0 , 3 
[21440] c:0 is:( loop 0 , 3 , move v0 , ul ; move ua + v0 , 2 )  decode:( move 2 , 9 ; move 8 , 0 - 2 ) 
[21441] c:0 is:loop 0 , 3 , ( move v0 - 2 , ua ; move ua , v0 )  decode:loop 0 , 3 , move 4 + v0 , v0 
[21442] c:0 is:loop 0 , 3 , ( move ua - v0 , ua ; move v0 , 2 )  decode:loop 0 , 3 , move ua , v0 + 2 
[21443] c:0 is:loop 0 , 3 , ( move ua + v0 , v0 ; move ul , 2 )  decode:loop 0 , 4 , move v0 - ua , 4 4 4 
[21444] c:0 is:loop 0 , 3 , ( move 0 , v0 / ua ; move ua , v0 )  decode:loop 0 , 3 , move ua , v0 - 3 
[21445] c:0 is:( move ua , 0 ; loop 0 , 4 , move v0 , ul - v0 )  decode:( move 9 , 0 ; move 3 , 0 - 4 ) 
[21446] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua - 2 , ua )  decode:loop 0 , 3 , move v0 + 4 , v0 
[21447] c:0 is:loop 0 , 2 , ( move v0 - ua , ul ; move v0 , 2 )  decode:( move 0 - ua , ul ; move ua , 6 ) 
[21448] c:0 is:( move ua , 2 ; loop 0 , 3 , move v0 + ul , v0 )  decode:( move 8 , 2 ; move 3 , 2 ) 
[21449] c:0 is:loop 0 , 2 , ( move ul + v0 , 3 ; move ua , v0 )  decode:( move ua , 3 ; move 8 , 4 ) 
[21450] c:0 is:( loop 0 , 2 , move ua - 2 , v0 ; move ul , v0 )  decode:( move 4 , 0 ; move 5 , ul ) 
[21451] c:0 is:loop 0 , 2 , ( move v0 , v0 ; move 2 - ua , ul )  decode:( move ul - ua , ul ; move 4 , ul ) 
[21452] c:0 is:loop 0 , 3 , ( move v0 , ua ; move ul + v0 , 2 )  decode:loop 0 , 3 , move 3 , 4 / v0 
[21453] c:0 is:( move ua - ul , 0 - 2 ; move ua - ul , ua * ua )  decode:( move 5 , 2 - 2 ; move 5 , 4 ) 
[21454] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 * v1 , ua - ul  decode:loop 0 , 4 , move 4 - ua , v0 - 3 
[21455] c:0 is:loop 0 , 3 , ( move ua + v0 , ua ; move v0 , 3 )  decode:loop 0 , 4 , move v0 - 8 , 3 
[21456] c:0 is:loop 0 , 3 , ( move 2 , v0 ; move ua , v0 + ul )  decode:loop 0 , 4 , move 0 - ua , 4 * 3 
[21457] c:0 is:( loop 0 , 2 , move 2 , v0 ; move ul - ua , v0 )  decode:( move 4 , 2 ; move 5 , 0 - 2 ) 
[21458] c:0 is:loop 0 , 3 , ( move ua , v0 ; move v0 + ul , 2 )  decode:loop 0 , 4 , move ua , v0 * 5 
[21459] c:0 is:( move ua + ul , 0 ; loop 0 , 5 , move v0 , v0 )  decode:( move 9 , 0 ; move ua - 2 , 9 ) 
[21460] c:0 is:( move 0 , ul ; loop 0 , 5 , move v0 , v0 + ul )  decode:loop 0 , 3 , move 3 , v0 + 9 
[21461] c:0 is:( loop 0 , 5 , move 2 , ua + v0 ; move ua , v0 )  decode:loop 0 , 4 , move 3 - ua , 9 * v0 
[21462] c:0 is:( move ua , ul ; loop 0 , 3 , move v0 + v0 , 3 )  decode:( move ua + ul , ul ; move 9 , 9 ) 
[21463] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 + v0 , 2 )  decode:( move ua + 3 , 4 ; move ua , 4 ) 
[21464] c:0 is:( move 0 , ul ; loop 0 , 5 , move ul + v0 , v0 )  decode:loop 0 , 3 , move ua - 2 , v0 + 4 
[21465] c:0 is:loop 0 , 2 , ( move ul , v0 ; move ua - v0 , 3 )  decode:( move ua + ul , 3 ; move 5 , 4 ) 
[21466] c:0 is:loop 0 , 3 , ( move ua , v0 ; move v0 - 3 , ua )  decode:loop 0 , 3 , move ua + v0 , 3 / 3 
[21467] c:0 is:( move ua , 0 ; loop 0 , 5 , move ul - v0 , v0 )  decode:( move ua + 2 , 0 ; move 3 , 7 ) 
[21468] c:0 is:( loop 0 , 3 , move ua , 2 ; move v0 , ua * v0 )  decode:loop 0 , 3 , move ua + ul , 2 
[21469] c:0 is:( loop 0 , 4 , move 2 + v0 , v0 ; move ul , ua )  decode:loop 0 , 4 , move 4 , 4 * v0 
[21470] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 2 , ua - v0 )  decode:( move ua , 0 ; move 4 - ua , 4 ) 
[21471] c:0 is:loop 0 , 2 , ( move v0 + ul , v0 ; move 3 , ul )  decode:- 0 loop 0 , 3 , move 3 , ul - v0 
[21472] c:0 is:( loop 0 , 5 , move 2 , v0 + v0 ; move ua , ua )  decode:loop 0 , 3 , move 2 - ua , v0 - 9 
[21473] c:0 is:( loop 0 , 4 , move v0 , v0 ; move ua + ul , 2 )  decode:( move 4 , 0 - 3 ; move ua , 2 ) 
[21474] c:0 is:loop 0 , 3 , ( move ul , 2 ; move ul + v0 , v0 )  decode:loop 0 , 3 , move 3 , v0 + 7 
[21475] c:0 is:( loop 0 , 3 , move v0 , 2 ; move v0 - ua , ul )  decode:( move 3 , 6 ; move 4 , 2 ) 
[21476] c:0 is:loop 0 , 3 , ( move v0 , ul ; move v0 + ua , 3 )  decode:loop 0 , 3 , move ua + v0 , 0 - 4 
[21477] c:0 is:( move ul , ul ; loop 0 , 3 , move v0 + v0 , 2 )  decode:( move 2 , 5 ; move 4 , 0 - 4 ) 
[21478] c:0 is:loop 0 , 2 , ( move v0 - ua , ul ; move 3 , v0 )  decode:( move 3 - ua , 0 ; move 5 , ul ) 
[21479] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ul , ua - 2 )  decode:( move 3 , 0 - 4 ; move 4 , 4 ) 
[21480] c:0 is:loop 0 , 3 , ( move v0 / ua , v0 ; move ua , 2 )  decode:loop 0 , 3 , move ua , 2 * 3 / v0 
[21481] c:0 is:( loop 0 , 3 , move v0 , 4 ; move ua , v0 - ua )  decode:( move 2 , 3 * 4 ; move ua , 4 ) 
[21482] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 + v0 , 2 )  decode:loop 0 , 4 , move 4 + 3 , 4 / 9 
[21483] c:0 is:loop 0 , 3 , ( move v0 - ua , v0 ; move 3 , ul )  decode:loop 0 , 4 , move 0 - ua , 0 - v0 
[21484] c:0 is:( move ul , ul ; loop 0 , 3 , move v0 + 3 , v0 )  decode:loop 0 , 3 , move 4 , ul / v0 
[21485] c:0 is:( move 2 - ua , ul ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , 0 - 2 ; move 3 , 6 ) 
[21486] c:0 is:( move 2 , ua ; loop 0 , 4 , move v0 , v0 - ul )  decode:( move 3 , 0 - 2 ; move 5 , ul ) 
[21487] c:0 is:( loop 0 , 3 , move ua - v0 , 4 ; move v0 , ua )  decode:0 loop 0 , 3 , move ua , 4 
[21488] c:0 is:loop 0 , 3 , ( move ul , 0 ; move v0 , ul / v0 )  decode:( move 2 , 0 ; move 4 , 4 / 3 ) 
[21489] c:0 is:loop 0 , 3 , ( move ul , ul ; move v0 + 3 , v0 )  decode:loop 0 , 3 , move ua - 2 , v0 + ul 
[21490] c:0 is:( loop 0 , 2 , move 3 , v0 ; move ua , v0 / ua )  decode:( move 3 , 0 ; move 9 , ul ) 
[21491] c:0 is:loop 0 , 3 , ( move ul , 3 ; move v0 - ua , v0 )  decode:loop 0 , 4 , move 4 , 3 - v0 
[21492] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 4 - ua , ua )  decode:( move 2 , 0 ; move 4 , 3 ) 
[21493] c:0 is:loop 0 , 3 , ( move v0 - 2 , ul ; move v0 , ul )  decode:( move 3 , 2 ; move 3 , 5 ) 
[21494] c:0 is:loop 0 , 3 , ( move ul , v0 ; move ua , 3 - v0 )  decode:loop 0 , 4 , move v0 - ua , 3 
[21495] c:0 is:loop 0 , 3 , ( move 4 , v0 ; move v0 , ul + ua )  decode:loop 0 , 3 , move 5 , v0 + v0 
[21496] c:0 is:( move 0 , ul ; loop 0 , 5 , move v0 , ul - v0 )  decode:( move 4 , 2 - 9 ; move 4 , 4 ) 
[21497] c:0 is:( move ul , ua ; loop 0 , 4 , move v0 , v0 + 3 )  decode:loop 0 , 3 , move ua - 4 , 3 / 4 
[21498] c:0 is:( move 2 , ua ; loop 0 , 4 , move v0 , ul - v0 )  decode:( move 4 , ul ; move 3 , 0 - 4 ) 
[21499] c:0 is:( move ua , ul ; loop 0 , 3 , move v0 + v0 , 4 )  decode:loop 0 , 4 , move 3 , v0 * 9 
[21500] c:0 is:( move ul - 3 , ua * ua ; move ua + 2 , ua - ul )  decode:( move 2 , 4 ; move ua + 2 , 4 ) 
[21501] c:0 is:( loop 0 , 4 , move v0 , 2 ; move ua , v0 - ul )  decode:( move ul - ua , 4 ; move ua , ul ) 
[21502] c:0 is:( move 3 , ua ; loop 0 , 4 , move ul + v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 * 2 
[21503] c:0 is:( move ua , 0 - ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[21504] c:0 is:( loop 0 , 4 , move v0 , 3 + v0 ; move ul , ua )  decode:( move ul , 2 / 4 ; move ua , 8 ) 
[21505] c:0 is:( loop 0 , 3 , move v0 , ua - v0 ; move 3 , ul )  decode:( move 2 , 0 - 4 ; move 4 , ul ) 
[21506] c:0 is:( loop 0 , 5 , move ul , v0 * v0 ; move ua , 0 )  decode:( move 3 , 0 ; move ua + ul , 2 ) 
[21507] c:0 is:loop 0 , 2 , ( move ul - 3 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move v0 - 2 , v0 
[21508] c:0 is:( loop 0 , 5 , move v0 - ul , ul ; move v0 , 0 )  decode:( move ua - 4 , ul ; move 8 , ul ) 
[21509] c:0 is:( loop 0 , 3 , move ua + v0 , 4 ; move v0 , ul )  decode:loop 0 , 4 , move 4 + v0 , 4 
[21510] c:0 is:loop 0 , 3 , ( move ul , v0 + ul ; move 3 , v0 )  decode:( move ul - ua , ul ; move ua , 7 ) 
[21511] c:0 is:( loop 0 , 6 , move 0 - ul , v0 ; move ua , v0 )  decode:( move 3 , 2 - move ua , 2 + 5 ) 
[21512] c:0 is:loop 0 , 3 , ( move 3 , ul ; move v0 + v0 , ul )  decode:loop 0 , 4 , move 3 + v0 , 4 / 3 
[21513] c:0 is:( loop 0 , 5 , move 3 , v0 ; move ul + v0 , ua )  decode:loop 0 , 4 , move 2 - ua , 4 * v0 
[21514] c:0 is:( loop 0 , 5 , move v0 , 3 ; move ua , v0 + ul )  decode:( move 4 , 0 - 2 ; move 9 , 8 ) 
[21515] c:0 is:loop 0 , 3 , ( move 3 , ul - v0 ; move v0 , ul )  decode:( move 4 , ul ; move 9 , 2 - 3 ) 
[21516] c:0 is:( loop 0 , 3 , move ul + v0 , ul ; move v0 , 4 )  decode:( move 3 , ul ; move 5 , 2 ) 
[21517] c:0 is:loop 0 , 3 , ( move ul - ua , 4 ; move v0 , v0 )  decode:0 0 loop 0 , 3 , move 4 + v0 , 4 
[21518] c:0 is:( loop 0 , 3 , move v0 , ul ; move ua , v0 - 4 )  decode:( move ua , ul ; move 3 , ua * ua ) 
[21519] c:0 is:loop 0 , 3 , ( move v0 , ua / 3 ; move ua , v0 )  decode:loop 0 , 4 , move ua , 0 - 3 + v0 
[21520] c:0 is:loop 0 , 3 , ( move ul - 3 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move 2 - 3 , v0 - 4 
[21521] c:0 is:( loop 0 , 4 , move 3 , ua - v0 ; move v0 , ul )  decode:loop 0 , 3 , move ua - 2 , 0 - v0 
[21522] c:0 is:loop 0 , 3 , ( move ul - 4 , v0 ; move v0 , ua )  decode:loop 0 , 3 , move 0 - 3 , v0 
[21523] c:0 is:( loop 0 , 3 , move ul , v0 ; move ua , 3 * v0 )  decode:( move 2 , ul ; move ua + ul , 8 ) 
[21524] c:0 is:loop 0 , 3 , ( move ul , v0 + v0 ; move 4 , ul )  decode:loop 0 , 3 , move ua - ul , 4 - v0 
[21525] c:0 is:( move ua - 2 , ul / ua ; move ua + ul , ua + 4 )  decode:( move 4 , ul ; move ua + ul , 4 ) 
[21526] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , ul - v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 
[21527] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 + v0 , 3 )  decode:loop 0 , 4 , move 3 + 4 , v0 - 3 
[21528] c:0 is:( move ul , ul ; loop 0 , 4 , move 3 , v0 + v0 )  decode:loop 0 , 3 , move 4 , v0 * 9 
[21529] c:0 is:loop 0 , 3 , ( move v0 + ul , v0 ; move 4 , ul )  decode:loop 0 , 4 , move ua - 2 , v0 + 2 
[21530] c:0 is:( loop 0 , 4 , move 2 , v0 * v0 ; move ua , ul )  decode:loop 0 , 4 , move 4 , 2 - v0 / 2 
[21531] c:0 is:( loop 0 , 4 , move 3 - v0 , ul ; move ua , v0 )  decode:( move ua , ua / 4 ; move 5 , 7 ) 
[21532] c:0 is:( move ua - ul , 2 ; loop 0 , 5 , move v0 , v0 )  decode:( move ua , 2 ; move ua , 0 - 4 ) 
[21533] c:0 is:loop 0 , 3 , ( move 4 , ul ; move v0 , ul + v0 )  decode:loop 0 , 3 , move ua - 2 , v0 + 9 
[21534] c:0 is:( loop 0 , 6 , move 2 , ua - v0 ; move ua , v0 )  decode:( move 9 , 4 * 3 ; move ua , 9 ) 
[21535] c:0 is:( loop 0 , 3 , move v0 + ul , 4 ; move v0 , ul )  decode:loop 0 , 4 , move 2 , 4 * v0 
[21536] c:0 is:loop 0 , 3 , ( move 3 - v0 , v0 ; move ul , ul )  decode:loop 0 , 3 , move 3 , v0 - 6 
[21537] c:0 is:( move ul - ua , 3 ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , 6 ; move 4 , 0 - 3 ) 
[21538] c:0 is:( move 0 , ul ; loop 0 , 6 , move ul - v0 , v0 )  decode:( move 2 - ua , 0 ; move 5 , 4 ) 
[21539] c:0 is:( loop 0 , 5 , move ul , ul ; move v0 + v0 , 2 )  decode:( move ua , 4 ; move 3 , 2 ) 
[21540] c:0 is:( move ua , ua ; loop 0 , 3 , move v0 , 4 * v0 )  decode:( move ua , 0 ; move 3 , 4 * 3 ) 
[21541] c:0 is:( loop 0 , 3 , move ul , v0 ; move v0 - ua , 4 )  decode:( move 3 , 4 ; move 4 , 0 - 4 ) 
[21542] c:0 is:( loop 0 , 6 , move ul , v0 + 2 ; move v0 , ua )  decode:( move 2 , ua / 3 ; move ua , 4 ) 
[21543] c:0 is:( move 2 , ua ; loop 0 , 6 , move ul , v0 + v0 )  decode:( move 5 , 0 ; move 3 , 4 ) 
[21544] c:0 is:( loop 0 , 6 , move ua - v0 , 2 ; move v0 , ua )  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[21545] c:0 is:( move ua , 4 ; loop 0 , 4 , move v0 + v0 , ul )  decode:loop 0 , 4 , move 4 , 4 - v0 
[21546] c:0 is:( loop 0 , 4 , move v0 + ul , 4 ; move ua , v0 )  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[21547] c:0 is:( loop 0 , 4 , move v0 , ua - 4 ; move ua , v0 )  decode:( move 4 , 9 ; move ua , 0 - 3 ) 
[21548] c:0 is:loop 0 , 3 , ( move v0 - ul , v0 ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[21549] c:0 is:( move 3 , ul ; loop 0 , 4 , move v0 , ua - v0 )  decode:( move 4 , ul ; move 4 , 4 * 4 ) 
[21550] c:0 is:( loop 0 , 5 , move v0 - 2 , v0 ; move ua , ul )  decode:( move 4 , 9 / 2 ; move ua , 5 ) 
[21551] c:0 is:loop 0 , 3 , ( move 2 , v0 / ua ; move ul , v0 )  decode:loop 0 , 4 , move 2 , v0 - 3 
[21552] c:0 is:( move ua , ua / 2 ; loop 0 , 4 , move v0 , v0 )  decode:( move 3 , 3 ; move ua , 0 - 4 ) 
[21553] c:0 is:( move ua , ul ; loop 0 , 4 , move 2 * v0 , v0 )  decode:( move ua + 3 , ul ; move ua , 9 ) 
[21554] c:0 is:( move ua + ul , 3 ; loop 0 , 5 , move v0 , v0 )  decode:( move ua + 3 , 3 ; move 5 , 9 ) 
[21555] c:0 is:( loop 0 , 3 , move 4 , v0 ; move v0 - ua , ul )  decode:loop 0 , 4 , move 4 , 4 * v0 
[21556] c:0 is:( move ua , 4 ; loop 0 , 4 , move v0 , ua - v0 )  decode:( move ua + ul , 4 ; move ua , 8 ) 
[21557] c:0 is:( loop 0 , 5 , move ul + v0 , v0 ; move ul , 2 )  decode:loop 0 , 4 , move 4 , 0 - 9 
[21558] c:0 is:( move 2 , ua * ua ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 3 - ua , 0 - 4 
[21559] c:0 is:( move 2 , ul ; loop 0 , 6 , move ul , v0 + v0 )  decode:( move 2 , ul ; move ua - 2 , 9 ) 
[21560] c:0 is:( move ua , 2 ; loop 0 , 4 , move v0 , ul / v0 )  decode:( move ua , 2 ; move 5 , 4 ) 
[21561] c:0 is:( loop 0 , 6 , move ua , 3 ; move ua - v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - 3 
[21562] c:0 is:( loop 0 , 6 , move ul , 2 - v0 ; move v0 , ua )  decode:( move 3 , 0 - 4 ; move ua , ul ) 
[21563] c:0 is:( move 2 , ua * ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - 9 
[21564] c:0 is:( loop 0 , 5 , move v0 , ul - v0 ; move 2 , ul )  decode:loop 0 , 4 , move 3 , 0 - v0 - 2 
[21565] c:0 is:( move 3 , ul ; loop 0 , 5 , move ul , v0 + v0 )  decode:( move 5 , ul ; move 3 , 9 ) 
[21566] c:0 is:( move ua , ua ; loop 0 , 4 , move v0 , v0 * 4 )  decode:( move ua , 0 ; move 5 , 4 / 3 ) 
[21567] c:0 is:( move ua , 4 + 2 ; move 0 - 3 , ul ; move ua , 2 )  decode:( move ua + ul , 9 ; move ua , 2 ) 
[21568] c:0 is:( loop 0 , 6 , move v0 , v0 + ul ; move ul , 2 )  decode:( move 9 , 9 ; move ua , ua / 4 ) 
[21569] c:0 is:( move 3 , ul ; loop 0 , 5 , move v0 + ul , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 + 8 
[21570] c:0 is:( loop 0 , 5 , move ul - v0 , 3 ; move ua , v0 )  decode:( move 3 , 3 * 6 ; move 8 , 4 ) 
[21571] c:0 is:( loop 0 , 4 , move v0 , v0 + ul ; move 4 , ul )  decode:( move 3 , 9 ; move ua , 0 - 2 ) 
[21572] c:0 is:( move ua , ua ; loop 0 , 6 , move v0 - 3 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 3 
[21573] c:0 is:( move ua + ul , 4 ; loop 0 , 5 , move v0 , v0 )  decode:( move 9 , 4 ; move ua , 5 * 2 ) 
[21574] c:0 is:( loop 0 , 5 , move v0 , ul ; move 3 - ua , v0 )  decode:loop 0 , 3 , move 4 , 3 / v0 
[21575] c:0 is:( move 3 - ua , ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move 5 , 3 + 0 - v0 
[21576] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 2 , ul / v0 )  decode:0 0 loop 0 , 3 , move 3 , 3 / 4 
[21577] c:0 is:( move 2 , ul / ua ; loop 0 , 4 , move v0 , v0 )  decode:( move 3 , 0 ; move 3 , 4 ) 
[21578] c:0 is:( move ua , 4 + ul ; loop 0 , 5 , move v0 , v0 )  decode:( move ua + 2 , 5 ; move ua , 9 ) 
[21579] c:0 is:( loop 0 , 6 , move 2 , v0 ; move ul - ua , v0 )  decode:loop 0 , 3 , move v0 + 4 , 0 - 2 
[21580] c:0 is:( loop 0 , 6 , move v0 , ul ; move v0 - 2 , ua )  decode:( move 0 - 9 , ul ; move ua , ua ) 
[21581] c:0 is:( move ua + ul , ua - ul ; move ul + ul , 3 / 2 )  decode:( move 2 , 9 + 9 ; move ua , 8 ) 
[21582] c:0 is:( loop 0 , 5 , move v0 , 4 ; move ua - v0 , ua )  decode:loop 0 , 3 , move 0 - 4 , 0 - 9 
[21583] c:0 is:( loop 0 , 6 , move ul , ua - v0 ; move v0 , 2 )  decode:( move ua , 9 ; move 4 , 0 - 4 ) 
[21584] c:0 is:( loop 0 , 6 , move 3 - v0 , ua ; move ua , v0 )  decode:( move 5 , 0 ; move 8 , 2 ) 
[21585] c:0 is:( move 2 , ua ; loop 0 , 5 , move v0 , v0 / ua )  decode:loop 0 , 3 , move ua - 3 , 7 / v0 
[21586] c:0 is:loop 0 , 3 , ( move ua / v0 , ul ; move v0 , 3 )  decode:loop 0 , 3 , move v0 - ua , 4 
[21587] c:0 is:( loop 0 , 4 , move v0 , 4 ; move ua , v0 - ul )  decode:( move ua , 0 - 4 ; move ua , 2 ) 
[21588] c:0 is:( move ul , ua ; loop 0 , 5 , move v0 , v0 - 3 )  decode:( move ua , 2 / 5 ; move 4 , ul ) 
[21589] c:0 is:( move ul , ua - 2 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua - v0 , ua / 4 
[21590] c:0 is:( move ul - 4 , ul ; loop 0 , 3 , move v0 , v0 )  decode:( move 3 , 4 ; move 3 , 0 - 4 ) 
[21591] c:0 is:( loop 0 , 4 , move ul , v0 - ul ; move 3 , v0 )  decode:( move 3 , 2 - 4 ; move 4 , 9 ) 
[21592] c:0 is:( move ul , ul ; loop 0 , 4 , move v0 * 2 , v0 )  decode:loop 0 , 2 , move v0 - ua , 4 * 4 
[21593] c:0 is:( loop 0 , 5 , move 4 , v0 ; move ua , ua - v0 )  decode:loop 0 , 4 , move ua , 9 / v0 
[21594] c:0 is:( move ul , ul ; loop 0 , 5 , move 3 + v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - v0 / 2 
[21595] c:0 is:( move ul , ua ; loop 0 , 5 , move 4 + v0 , v0 )  decode:loop 0 , 4 , move ua + ul , v0 + 3 
[21596] c:0 is:loop 0 , 3 , ( move v0 , v0 / 2 ; move ul , ul )  decode:loop 0 , 4 , move v0 , v0 - 2 
[21597] c:0 is:( move 0 , ul / ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move 4 , v0 + 3 
[21598] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 , 3 / ua )  decode:loop 0 , 4 , move v0 , v0 * 9 
[21599] c:0 is:( move 4 , ul ; loop 0 , 3 , move v0 , ul - v0 )  decode:( move 3 , ul ; move 3 , ul ) 
[21600] c:0 is:( loop 0 , 6 , move v0 , v0 + 3 ; move ua , ul )  decode:( move 9 , 9 ; move ua + 2 , 2 ) 
[21601] c:0 is:( move ul , 2 ; loop 0 , 5 , move v0 , v0 - ul )  decode:0 loop 0 , 3 , move 3 - ua , ua / v0 
[21602] c:0 is:( move 2 , ul ; loop 0 , 6 , move v0 , ul + v0 )  decode:( move ua + 3 , 0 ; move ua , 4 ) 
[21603] c:0 is:( move 4 + ul , ul ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , ul ; move 3 , 9 ) 
[21604] c:0 is:( loop 0 , 5 , move v0 + ul , ul ; move 3 , v0 )  decode:loop 0 , 3 , move ua - 2 , v0 * 2 
[21605] c:0 is:( move ul - 3 , ua ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 + 6 
[21606] c:0 is:loop 0 , 2 , ( move ua / v0 , 4 ; move ul , v0 )  decode:( move ua , 7 ; move 7 , 4 ) 
[21607] c:0 is:( move ul - ua , ua - 3 ; move ua - ul , 4 + ul )  decode:( move ul - ua , ul ; move 5 , 5 ) 
[21608] c:0 is:( move ua , ua - 3 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 3 + v0 , 4 / 3 
[21609] c:0 is:( move 3 , ua ; loop 0 , 6 , move ul , v0 + v0 )  decode:( move ua , ul ; move 3 , 0 - 4 ) 
[21610] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 + ua , 3 )  decode:( move 4 + 3 , 4 ; move ul , 4 0 0 0 0 0 + 0 0 ul 2 
[21611] c:0 is:( loop 0 , 5 , move 2 , v0 * v0 ; move ul , ul )  decode:loop 0 , 3 , move 3 - ua , 0 - 9 
[21612] c:0 is:( loop 0 , 5 , move ul , 2 * v0 ; move v0 , ul )  decode:0 loop 0 , 4 , move 2 , 3 * ua 
[21613] c:0 is:( loop 0 , 5 , move v0 , 2 * v0 ; move ul , ul )  decode:loop 0 , 4 , move 4 - ua , v0 - 4 
[21614] c:0 is:( move ul , ul ; loop 0 , 3 , move 4 , v0 * v0 )  decode:( move ua + 3 , ul ; move 4 , 4 ) 
[21615] c:0 is:( move ua + ul , 4 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 3 + v0 , 4 * 4 
[21616] c:0 is:( move ua , 0 ; move 2 - 4 , 2 ; move ua , ua * 3 )  decode:( move ua + ul , 0 ; move 5 , 2 ) 
[21617] c:0 is:( move 0 - 3 , 0 ; move ul , 2 ; move ul , ul / 2 )  decode:( move 3 , 0 ; move 2 , ul ) 
[21618] c:0 is:( loop 0 , 6 , move ua , 2 ; move ua / v0 , v0 )  decode:loop 0 , 4 , move 0 - ua , 4 / 4 
[21619] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , v0 / 3 )  decode:loop 0 , 4 , move 4 , v0 * v0 
[21620] c:0 is:loop 0 , 3 , ( move ul / v0 , v0 ; move 3 , ul )  decode:loop 0 , 3 , move ua - 3 , v0 + ul 
[21621] c:0 is:( move ul , ul ; loop 0 , 6 , move v0 , 3 + v0 )  decode:loop 0 , 4 , move 3 - ua , v0 - 7 
[21622] c:0 is:( loop 0 , 5 , move v0 , v0 * 3 ; move ul , ua )  decode:( move 3 , 8 ; move ua + ul , 4 ) 
[21623] c:0 is:( move 4 , ua ; loop 0 , 5 , move v0 - ul , v0 )  decode:loop 0 , 3 , move 3 , 3 / v0 
[21624] c:0 is:( move ul - ua , 2 / ua ; move 4 + ul , ua - ul )  decode:( move 5 , ul - 9 ; move 5 , 2 ) 
[21625] c:0 is:( loop 0 , 4 , move ua / v0 , 4 ; move v0 , ua )  decode:loop 0 , 4 , move 0 - 5 , 5 * 3 
[21626] c:0 is:( move ua + ul , ul - 4 ; move ua / 2 , ua * ua )  decode:( move 3 - ua , 0 ; move 4 , 5 ) 
[21627] c:0 is:( loop 0 , 6 , move v0 , 3 ; move ul , v0 - ua )  decode:loop 0 , 4 , move 4 / v0 , 0 - 6 
[21628] c:0 is:( loop 0 , 5 , move ul , 4 - v0 ; move ua , v0 )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[21629] c:0 is:( move ul + ul , ua - 4 ; move 4 + ul , ua * ua )  decode:( move 5 , ul ; move 2 , 4 / 3 ) 
[21630] c:0 is:loop 1 , 3 , ( move v1 , ua ; move ua - v1 , 4 )  decode:loop 0 , 3 , move ua + v0 , 4 
[21631] c:0 is:( loop 0 , 6 , move v0 , 3 ; move v0 , ua - ul )  decode:loop 0 , 4 , move 3 / 2 , 3 3 / 4 
[21632] c:0 is:( move ul - 4 , ua ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 + 4 
[21633] c:0 is:( loop 0 , 6 , move v0 + ul , v0 ; move ua , 4 )  decode:loop 0 , 4 , move ua , 0 - 4 
[21634] c:0 is:( move ul - 3 , ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , 4 0 - 9 
[21635] c:0 is:( loop 0 , 5 , move 4 , v0 ; move ua , v0 - ul )  decode:loop 0 , 4 , move ua , 0 + v0 + 4 
[21636] c:0 is:( move ul , ua ; loop 0 , 4 , move v0 , 3 / v0 )  decode:loop 0 , 2 , move 3 , v0 - 4 
[21637] c:0 is:( move ul , ul ; loop 0 , 4 , move 3 * v0 , v0 )  decode:loop 0 , 3 , move ua + v0 , 0 - 9 
[21638] c:0 is:( loop 0 , 5 , move v0 , 4 ; move v0 + ul , ul )  decode:( move 4 , ua / 3 ; move 9 , 4 ) 
[21639] c:0 is:( move 4 , ul ; loop 0 , 4 , move v0 , v0 - ul )  decode:( move ua , ul ; move 3 , 2 ) 
[21640] c:0 is:( move ul , ul ; loop 0 , 5 , move v0 , 4 + v0 )  decode:loop 0 , 3 , move v0 - 4 , 3 / 2 
[21641] c:0 is:( move 3 , ua ; loop 1 , 4 , move ul , v1 + v1 )  decode:( move 4 , 0 ; move 2 , 4 + 7 ) 
[21642] c:0 is:loop 0 , 3 , ( move 4 / v0 , ua ; move v0 , ul )  decode:loop 0 , 3 , move 4 , v0 / v0 
[21643] c:0 is:( move ua - 2 , 0 ; move ul , 4 / 3 ; move ua , 0 )  decode:( move 4 , 0 ; move ua + 2 , 7 ) 
[21644] c:0 is:( loop 0 , 6 , move v0 , 3 ; move v0 , ul + ul )  decode:loop 0 , 3 , move 0 - 4 , 0 - 3 
[21645] c:0 is:( loop 0 , 5 , move ua - ul , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move 4 + v0 , 7 * 2 
[21646] c:0 is:( move ua , ul - 3 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua + v0 , 0 - 9 
[21647] c:0 is:( move ua , ua ; move 3 , 3 - ul ; move 3 , 0 - 2 )  decode:loop 0 , 3 , move 4 , 0 - v0 0 
[21648] c:0 is:( loop 0 , 3 , move 4 * v0 , v0 ; move ul , ul )  decode:( move 4 , ul ; move 5 , 2 ) 
[21649] c:0 is:( loop 0 , 6 , move ul , v0 - 3 ; move v0 , ua )  decode:( move 4 , ul / 4 ; move ua , 9 ) 
[21650] c:0 is:( move 4 , ul ; loop 0 , 5 , move v0 , ua - v0 )  decode:0 0 loop 0 , 3 , move 4 , 0 - 9 
[21651] c:0 is:( loop 0 , 6 , move v0 , 4 + v0 ; move ul , ua )  decode:loop 0 , 4 , move 4 , 0 - v0 - 4 
[21652] c:0 is:( move ul , 2 ; loop 1 , 4 , move ul + v1 , v1 )  decode:loop 0 , 3 , move 3 - ua , 2 * 5 
[21653] c:0 is:( loop 0 , 6 , move v0 , 2 * v0 ; move ul , ua )  decode:( move ua , 4 + 3 ; move 8 , 4 ) 
[21654] c:0 is:( loop 0 , 4 , move v0 , ul / v0 ; move 4 , ua )  decode:( move ua , 6 ; move 4 , 7 + 4 ) 
[21655] c:0 is:( move 4 * 2 , ua ; move ua + 2 , 2 ; move ul , 2 )  decode:( move 8 , 0 ; move 8 , 2 ) 
[21656] c:0 is:( move 4 + 2 , 0 ; move ul + ul , ul ; move 4 , 2 )  decode:loop 0 , 4 , move ua - 4 , v0 
[21657] c:0 is:( loop 0 , 6 , move v0 , ul ; move ul , 2 * v0 )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[21658] c:0 is:( move ul , ua ; loop 0 , 6 , move 4 - v0 , v0 )  decode:loop 0 , 4 , move ua - 4 , v0 0 
[21659] c:0 is:( move ul , ul ; loop 0 , 4 , move v0 , 3 / v0 )  decode:loop 0 , 4 , move 2 , 4 * ul / v0 
[21660] c:0 is:( loop 0 , 6 , move 3 , v0 ; move v0 - ul , ul )  decode:loop 0 , 4 , move ua - v0 , 0 - 9 
[21661] c:0 is:( move ul , ul ; loop 0 , 5 , move v0 , v0 * 3 )  decode:( move ua , 9 ; move 3 , 0 - 4 ) 
[21662] c:0 is:loop 0 , ul , loop 1 , 6 , move v1 - ul , v1 * 4  decode:loop 0 , 4 , move 3 , v0 - 3 
[21663] c:0 is:( move ul - ua , 4 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move v0 * 4 , 4 * 4 
[21664] c:0 is:( loop 0 , 6 , move v0 , v0 ; move 4 - ua , ul )  decode:loop 0 , 4 , move v0 + 2 , 0 - 4 
[21665] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 , 3 / v0 )  decode:loop 0 , 4 , move 4 , ul + v0 
[21666] c:0 is:( move ul , ua ; loop 0 , 5 , move v0 , 4 * v0 )  decode:( move 5 , 9 / 3 ; move 5 , 9 ) 
[21667] c:0 is:( loop 0 , 6 , move v0 , 4 + ul ; move ul , v0 )  decode:loop 0 , 4 , move 3 - ua , 3 / v0 
[21668] c:0 is:loop 0 , 3 , ( move 4 / v0 , ul ; move v0 , ul )  decode:loop 0 , 4 , move 3 , 3 + 3 / v0 
[21669] c:0 is:( move ul , 3 ; loop 0 , 6 , move ul - v0 , v0 )  decode:loop 0 , 4 , move 3 , ua / v0 + 4 
[21670] c:0 is:( loop 0 , 4 , move ul , v0 * 4 ; move v0 , ul )  decode:( move 4 , 3 ; move 3 , 4 ) 
[21671] c:0 is:( loop 0 , 5 , move v0 , v0 - ul ; move 4 , ul )  decode:loop 0 , 4 , move v0 - 4 , v0 0 
[21672] c:0 is:( move ul , 2 ; loop 0 , 6 , move ul , v0 * v0 )  decode:( move 4 , 3 / 2 ; move 3 , 4 ) 
[21673] c:0 is:( move ul , ul ; loop 0 , 5 , move 3 , v0 * v0 )  decode:loop 0 , 4 , move 3 , 4 * ul - v0 
[21674] c:0 is:( loop 0 , 4 , move ua / 4 , ul ; move v0 , v0 )  decode:loop 0 , 3 , move 3 , 3 / 4 
[21675] c:0 is:( move ua + ul , ua / 4 ; move ua - 4 , ua - ul )  decode:( move 2 , 9 + 4 ; move ua , ul ) 
[21676] c:0 is:( loop 0 , 6 , move v0 , ul ; move v0 / 2 , ua )  decode:( move ua , 9 ; move 9 , 0 - 2 ) 
[21677] c:0 is:( move ul , 4 ; loop 0 , 5 , move v0 , v0 - ul )  decode:loop 0 , 3 , move 0 - 4 , 0 - v0 
[21678] c:0 is:( move 4 , ul ; loop 0 , 6 , move v0 , ua - v0 )  decode:loop 0 , 4 , move v0 - ua , ua * ua 
[21679] c:0 is:( loop 0 , 6 , move ul , ul - v0 ; move 3 , v0 )  decode:( move 3 , 4 * 3 ; move 4 , 9 ) 
[21680] c:0 is:( move ua - ul , ua - 4 ; move 4 - ul , ua - ul )  decode:( move 3 , 9 / 2 ; move ua , ul ) 
[21681] c:0 is:( move ul , ua ; loop 0 , 4 , move 4 / v0 , v0 )  decode:( move ua , 0 ; move ua - 2 , ul ) 
[21682] c:0 is:( loop 0 , 5 , move ul , v0 / 2 ; move v0 , ul )  decode:( move 4 , 9 ; move 5 , 0 - 9 ) 
[21683] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , 2 * v0 )  decode:loop 0 , 4 , move 3 , v0 + 2 
[21684] c:0 is:( loop 0 , 6 , move v0 , ul ; move 4 , ua - v0 )  decode:loop 0 , 4 , move 4 , 4 * 3 - v0 
[21685] c:0 is:( move ua , ul ; loop 0 , 6 , move v0 / 2 , v0 )  decode:( move ua + ul , ul ; move 4 , 6 ) 
[21686] c:0 is:( loop 0 , 4 , move ua , 4 ; move v0 , ul / v0 )  decode:loop 0 , 4 , move 4 + 3 , 4 
[21687] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , v0 * 3 )  decode:loop 0 , 3 , move 3 - ua , ua * ua 
[21688] c:0 is:( move ua , 3 ; loop 1 , 5 , move v1 , ul - v1 )  decode:( move 9 , 3 ; move 4 , 9 ) 
[21689] c:0 is:( move ua , 4 / ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua + ul , 0 - 9 
[21690] c:0 is:( move 3 , ua ; move 3 , 2 ; move 3 + ul , 3 + ul )  decode:loop 0 , 3 , move 3 - ua , v0 + 2 
[21691] c:0 is:( move 4 , 0 ; move ua , 4 + ul ; move ua / 2 , 2 )  decode:( move 5 , 0 ; move 7 , 2 ) 
[21692] c:0 is:( move ua , ul / 3 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua - v0 , 0 - 4 
[21693] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ul , ua / 4 )  decode:( move 4 , 9 ; move ua - ul , 4 ) 
[21694] c:0 is:( move 2 , 3 ; move ua , 3 / ua ; move 2 , 2 + ul )  decode:( move 2 , 3 ; move ua , 2 / 4 ) 
[21695] c:0 is:( move 4 , ul ; loop 0 , 5 , move v0 , ua / v0 )  decode:( move ua , ul ; move ua , 5 * 2 ) 
[21696] c:0 is:( move ul , ul ; loop 0 , 4 , move 4 / v0 , v0 )  decode:( move ua , 2 ; move 4 , 4 / 3 ) 
[21697] c:0 is:( move ul + ul , 2 ; move 2 , 2 ; move 3 - ua , 4 )  decode:loop 0 , 3 , move 4 - ua , 2 / v0 
[21698] c:0 is:( move ul , ua / 4 ; loop 0 , 5 , move v0 , v0 )  decode:0 loop 0 , 4 , move 3 , 0 - 9 0 
[21699] c:0 is:( loop 0 , 5 , move ua / 4 , ul ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , 4 - v0 
[21700] c:0 is:( move ul , ul / 3 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 3 , 4 * 0 - v0 
[21701] c:0 is:( move 3 , ul ; loop 0 , 6 , move ul , v0 * v0 )  decode:( move ua , ul ; move 3 , 4 ) 
[21702] c:0 is:( loop 0 , 5 , move v0 , ul ; move 3 , ul / v0 )  decode:loop 0 , 4 , move 3 , 2 * v0 
[21703] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , ul / 2 )  decode:( move ua , 0 ; move 3 , 0 - 4 ) 
[21704] c:0 is:( move ul , 3 ; loop 0 , 5 , move v0 , ul / v0 )  decode:loop 0 , 4 , move 4 - ua , v0 - 4 
[21705] c:0 is:( move 3 , ul ; loop 0 , 5 , move v0 , ul / v0 )  decode:loop 0 , 4 , move v0 * 2 , 2 / 3 
[21706] c:0 is:( move 4 , ul / ua ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 + 3 
[21707] c:0 is:( loop 0 , 6 , move v0 - ul , ul ; move v0 , 4 )  decode:( move ua + 2 , 5 ; move ua , ua / ) 4 
[21708] c:0 is:( loop 0 , 4 , move v0 , ul ; move 4 , ul / v0 )  decode:( move ua , ua / 4 ; move 3 , 5 ) 
[21709] c:0 is:( move 3 + ul , ua - ul ; move ua - ul , ul / 4 )  decode:( move 4 , 4 / move 4 , 2 / ua ) 
[21710] c:0 is:( move ua , ul - 4 ; loop 1 , 4 , move v1 , v1 )  decode:( move 3 , 4 ; move ua + ul , 9 ) 
[21711] c:0 is:( loop 0 , 5 , move ul , 4 ; move v0 , v0 / ua )  decode:( move ul , 4 ; move ua - ul , 4 ) 
[21712] c:0 is:( move ul - ua , ua - 4 ; move ua - ul , 4 / ua )  decode:loop 0 , 3 , move 3 - ua , v0 - 9 
[21713] c:0 is:( loop 0 , 6 , move v0 / 2 , v0 ; move ul , ul )  decode:loop 0 , 4 , move 2 , v0 - 4 
[21714] c:0 is:( move ul , 3 ; loop 0 , 6 , move v0 , ua / v0 )  decode:loop 0 , 4 , move 0 - 4 , 4 / v0 
[21715] c:0 is:( loop 0 , 6 , move ul , v0 ; move 4 , ul - v0 )  decode:( move 4 , ua / 4 ; move 4 , 4 ) 
[21716] c:0 is:( v0 = ua / 4 ; move v0 , ua ; move 4 , v0 )  decode:( move 2 , 0 ; move 4 , ua * ua ) 
[21717] c:0 is:( move 3 , 0 ; move ul / 3 , ua + ul ; move 4 , 2 )  decode:( move 4 , 0 ; move 4 , 3 ) 
[21718] c:0 is:( move 3 + 2 , 4 ; move 3 , 3 ; move ua , ua * ua )  decode:loop 0 , 3 , move ua / v0 , 0 - 9 
[21719] c:0 is:( move ul - ua , 4 / ua ; move ul - ua , ua / 3 )  decode:( move 5 , 9 ; move ul - ua , ul ) 
[21720] c:0 is:( v0 = 4 / 3 ; move v0 , v0 ; move ua , ul )  decode:( move ul , 2 / 3 ; move ua , ul ) 
[21721] c:0 is:( move ua , ua / 3 ; loop 0 , 2 , move ua , 4 - 2 )  decode:loop 0 , 3 , move ua , 2 
[21722] c:0 is:( loop 0 , 6 , move ul , v0 ; move 3 , ul / v0 )  decode:( move 2 , 4 + 3 ; move 5 , 9 ) 
[21723] c:0 is:( move ua , 3 ; move 4 + ul , 2 ; move 2 + ul , 4 )  decode:loop 0 , 3 , move ul - ua , 3 - v0 
[21724] c:0 is:( ( move ua , 0 ; move ua , 2 ) ; move 3 + 3 , ul )  decode:( move 9 , ul ; move ua + 3 , ul ) 
[21725] c:0 is:( move ua , ua ; loop 1 , 6 , move v1 / 2 , v1 )  decode:loop 0 , 4 , move 3 , 3 - v0 
[21726] c:0 is:( loop 1 , 5 , move v1 , 4 ; move ua , ul - v1 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[21727] c:0 is:( move ua - 4 , 2 ; move 2 , 3 / 2 ; move ua , ua )  decode:( move 2 , 2 ; move ua + 3 , 2 ) 
[21728] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , 4 / ua )  decode:( move ua , 0 ; move 3 , 3 / 2 ) 
[21729] c:0 is:( loop 0 , 6 , move ul , 3 / v0 ; move ul , v0 )  decode:( move 3 , ul - 7 ; move 3 , 2 ) 
[21730] c:0 is:( loop 1 , 4 , move ua / 4 , v1 ; move ua , v1 )  decode:( move 3 , ul - 4 ; move ua , 9 ) 
[21731] c:0 is:( move ua , ua ; move 2 , 3 / 4 ; move 3 + ul , 2 )  decode:( move ua + ul , 0 ; move 4 , 7 ) 
[21732] c:0 is:( move ul , ul ; loop 0 , 6 , move v0 , 4 / v0 )  decode:loop 0 , 4 , move 2 - ua , 2 / v0 
[21733] c:0 is:( move 2 - 4 , ua ; move 4 , 2 ; move 3 , ul - ua )  decode:( move 3 , 2 ; move ua , 0 - 4 ) 
[21734] c:0 is:( move ul - 3 , ul - 3 ; move 2 , 2 ; move 3 , ul )  decode:( move 3 , 0 ; move 3 , 2 / 4 ) 
[21735] c:0 is:( move 2 , 4 * 3 ; move ul , ul ; move ua - 4 , 0 )  decode:( move 3 , 0 ; move 2 , 4 / 3 ) 
[21736] c:0 is:( move ua , 3 + 3 ; move ul , 4 ; move ua , 4 + 3 )  decode:( move ul - ua , 9 ; move ua , 8 ) 
[21737] c:0 is:( move 3 , 4 / ua ; move ua , 4 ; move 2 + ul , 2 )  decode:loop 0 , 4 , move 0 - 3 , v0 / 5 
[21738] c:0 is:( move 3 , 2 ; ( move ul - 2 , 2 ; move ua , ua ) )  decode:( move 3 , 2 ; move ua , 2 ) 
[21739] c:0 is:( move 2 , ul ; move 3 , ua - 2 ; move 3 , 4 / ua )  decode:( move 2 , 2 - 9 ; move ua , 4 ) 
[21740] c:0 is:( move ul , 4 * 2 ; move 4 + 3 , ul ; move ua , 2 )  decode:( move ua + ul , 9 ; move ua , 2 ) 
[21741] c:0 is:( move ua , ua ; ( move 4 , 4 ; move 2 - ua , 0 ) )  decode:( move ua , 0 ; move 4 , 4 ) 
[21742] c:0 is:( move 4 , ua ; move ul - 3 , 4 ; move 3 , 2 + ul )  decode:( move 4 , 0 ; move ua - ul , 7 ) 
[21743] c:0 is:( move ua , ul ; move 0 - 3 , 3 / 2 ; v0 = ul )  decode:( move ua , ul ; move 3 , 3 / 2 ) 
[21744] c:0 is:( move 3 , 2 - ul ; move 2 - 4 , ul ; move 3 , ul )  decode:( move 3 , 0 ; move 4 , 0 - 4 ) 
[21745] c:0 is:( move 4 , ul ; move ul , 3 + 2 ; move 4 , ua / 2 )  decode:( move 5 , ul ; move 4 , 2 ) 
[21746] c:0 is:( move ul - 3 , ul / 3 ; loop 0 , 2 , move ua , 4 )  decode:( move ua , 0 - 4 ; move 7 , 7 ) 
[21747] c:0 is:( ( move ua , 2 ; move ua , 4 + 4 ) ; move ua , 2 )  decode:loop 0 , 3 , move 4 + 2 , ua * ua 
[21748] c:0 is:( move 3 , 3 + 3 ; move ul , 4 ; move ua , 3 / ua )  decode:( move ua + ul , v; move 2 , 8 ) 
[21749] c:0 is:( move ua , 4 ; ( move ua , 3 ; move 3 , ua - 2 ) )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[21750] c:0 is:( move 4 , ua ; ( move 3 + 2 , ul ; move 2 , ul ) )  decode:loop 0 , 3 , move 4 / v0 , v0 0 ua * 
[21751] c:0 is:( move 4 , 4 * 3 ; move ul , 3 ; move 2 + ul , ul )  decode:( move 4 , 2 * 5 ; move 4 , 4 ) 
[21752] c:0 is:( move ul , 4 + 2 ; loop 0 , 6 , move 4 , ua - ul )  decode:loop 0 , 4 , move 0 - 5 , 0 - v0 
[21753] c:0 is:( move ua / 2 , 3 / 2 ; move ua , 2 ; v0 = ul )  decode:( move 3 , 3 / 2 ; move ua , 2 ) 
[21754] c:0 is:( move ua / 2 , ua / 2 ; loop 1 , 6 , move ua , 2 )  decode:loop 0 , 4 , move ua + ul , 0 - 2 
[21755] c:0 is:( move ul / 4 , 2 / ua ; loop 0 , 2 , move 3 , ul )  decode:( move 3 , 4 / 3 ; move 3 , ul ) 
[21756] c:0 is:( move ua + 3 , 4 ; loop 0 , 4 , move ua / 4 , ul )  decode:( move ua + 3 , 4 ; move 4 , 2 ) 
[21757] c:0 is:( move ua / 3 , 2 ; move ul , ul ; move 4 * 2 , 4 )  decode:( move 3 , ua / 2 ; move ua , 5 ) 
[21758] c:0 is:( ( move 2 , 2 ; move ul , ul ) ; move 3 , 4 + ul )  decode:( move 2 , 2 ; move 3 , 2 / 5 ) 
[21759] c:0 is:loop 0 , 6 , ( move ua - 2 , ul - 2 ; v1 = ul )  decode:loop 0 , 4 , move 5 , 0 - 2 
[21760] c:0 is:( move ul + ul , 4 ; move ua , 3 / 4 ; move 2 , 4 )  decode:loop 0 , 4 , move 2 , 2 + 4 / v0 
[21761] c:0 is:( move 3 / ua , ua ; move ua , 4 * 3 ; move 3 , 4 )  decode:( move ua , 4 * 3 ; move 4 , 4 ) 
[21762] c:0 is:( move ua - ul , ua - 4 ; loop 0 , 5 , move 4 , 4 )  decode:loop 0 , 4 , move 5 , 0 - 4 * 4 
[21763] c:0 is:( move ua , ua ; ( move ua , 4 ; move 3 , 3 - 4 ) )  decode:loop 0 , 3 , move ua - v0 , 4 ) 
[21764] c:0 is:( loop 0 , 6 , move 4 , 3 * 3 ; move ul - ua , ul )  decode:loop 0 , 4 , move ul - ua , 0 - 0 4 
[21765] c:0 is:( move 4 , ua - ul ; move ul , 4 * 3 ; move 3 , 4 )  decode:( move 3 , 0 - 4 ; move 5 , 9 ) 
[21766] c:0 is:( move 4 + 2 , ua / 4 ; loop 0 , 6 , move ul , ul )  decode:( move 4 , ua / 4 ; move ua , 4 ) 
[21767] c:0 is:( move ua + ul , ul ; ( move 2 , 4 ; move 4 , 3 ) )  decode:( move ua + ul , ul ; move 4 , 4 ) 
[21768] c:0 is:( ( move ul - ua , ua ; move 2 , 4 ) ; move 4 , 3 )  decode:loop 0 , 4 , move ul - ua , v0 - 4 
[21769] c:0 is:( move 2 , ul ; ( move 4 , 3 * 2 ; move ul , ul ) )  decode:( move ul , ul ; move ua , 2 / ua ) 
[21770] c:0 is:( loop 0 , 2 , loop 1 , 2 , move 3 , 4 ; move 4 , 4 )  decode:loop 0 , 4 , move 4 , 4 * ul - v0 
[21771] c:0 is:( move 4 , ul ; ( move ul , 4 ; move ua , 2 - 4 ) )  decode:( move 4 , ul ; move ua , ua / 3 ) 
[21772] c:0 is:( ( move 4 , ua ; move ul - 4 , ul ) ; move 4 , 2 )  decode:loop 0 , 3 , move ua - 2 , v0 
[21773] c:0 is:( move 4 , 3 ; ( move 2 , ul ; move ua , ua / 4 ) )  decode:loop 0 , 4 , move 3 , 3 + v0 
[21774] c:0 is:( move 4 , 4 + ul ; ( move ua , 4 ; move ua , 4 ) )  decode:loop 0 , 3 , move v0 - ua , ua * ua 
[21775] c:0 is:( move 3 + 3 , 3 ; loop 1 , 3 , move v1 , 4 / 3 )  decode:( move ua , 3 ; move 3 , 4 ) 
[21776] c:0 is:( move ua , ua ; loop 0 , 3 , move ul + v0 , v0 )  decode:( move ua + 2 , 0 ; move 3 , 4 ) 
[21777] c:0 is:( move 2 - ua , ua - ul ; move ua + ul , ua + ul )  decode:loop 0 , 4 , move 0 - 3 , 0 - v0 
[21778] c:0 is:loop 0 , 2 , ( move v0 , ul ; move ua + ul , v0 )  decode:loop 0 , 2 , move ua + 2 , v0 - ul 
[21779] c:0 is:loop 0 , 2 , ( move v0 , v0 ; move ua - ul , ul )  decode:( move ua , ul ; move 5 , 2 ) 
[21780] c:0 is:( move ua , ul ; loop 0 , 3 , move v0 + ul , v0 )  decode:( move ua + 3 , ul ; move 4 , 2 ) 
[21781] c:0 is:( loop 0 , 3 , move v0 , v0 ; move ua , ua - ul )  decode:( move ua , 2 ; move 4 - ua , 4 ) 
[21782] c:0 is:( loop 0 , 2 , move ua - ul , v0 ; move ul , v0 )  decode:( move ua , 0 ; move ua - 2 , ul ) 
[21783] c:0 is:( loop 0 , 3 , move ul + v0 , ul ; move ua , v0 )  decode:( move 4 , 5 ; move ua , 2 ) 
[21784] c:0 is:( move ua , ua ; loop 0 , 4 , move v0 , v0 + ul )  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[21785] c:0 is:( move ul , 0 ; move 0 - ua , 2 ; move ua - 2 , ul )  decode:( move 0 - ua , 2 ; move 5 , ul ) 
[21786] c:0 is:loop 0 , 3 , ( move ua , ul + v0 ; move v0 , ul )  decode:loop 0 , 4 , move ua - v0 , 4 
[21787] c:0 is:( loop 0 , 3 , move v0 , ul ; move v0 + ua , ul )  decode:( move 2 , 3 ; move ua + 2 , ul ) 
[21788] c:0 is:loop 0 , 2 , ( move v0 , ul ; move v0 - ua , ul )  decode:( move ua , 4 ; move ua , 0 - 7 ) 
[21789] c:0 is:loop 0 , 3 , ( move ul , ul ; move v0 + ua , v0 )  decode:loop 0 , 3 , move ua + 2 , v0 + ul 
[21790] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua , ua * ua )  decode:loop 0 , 4 , move v0 - ua , : 0 0 
[21791] c:0 is:( loop 0 , 3 , move v0 , ul ; move ua + ul , v0 )  decode:loop 0 , 4 , move 4 - ua , 9 * v0 
[21792] c:0 is:( move ua + ul , ua - ul ; move 0 - ua , ul / ua )  decode:( move ua , 2 - 3 ; move ua , 3 ) 
[21793] c:0 is:loop 0 , 3 , ( move v0 - ua , ul ; move ua , v0 )  decode:loop 0 , 4 , move ua * ul , 2 
[21794] c:0 is:( loop 0 , 3 , move v0 , ua - ul ; move ua , v0 )  decode:( move 3 , 4 ; move ua , 0 - 2 ) 
[21795] c:0 is:loop 0 , 3 , ( move ua , v0 ; move ul - v0 , ul )  decode:loop 0 , 3 , move ua + ul , v0 * 2 
[21796] c:0 is:( move ul - ua , ua * ua ; move ua + 3 , ua - ul )  decode:( move 9 , 4 ; move 4 , 4 ) 
[21797] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + v0 , v1 - 3  decode:( move 5 , 9 ; move 5 , 0 - 2 ) 
[21798] c:0 is:loop 0 , 3 , ( move ul - ua , v0 ; move ul , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 3 
[21799] c:0 is:loop 0 , 3 , ( move ul , ul ; move v0 + v0 , ul )  decode:loop 0 , 4 , move ua - 4 , 4 / v0 
[21800] c:0 is:( loop 0 , 3 , move ul - ua , v0 ; move ul , v0 )  decode:loop 0 , 3 , move 0 - 4 , v0 
[21801] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 , ul + v0 )  decode:( move ua , ul ; move 4 , 5 * 2 ) 
[21802] c:0 is:( move ua , ua - ul ; loop 0 , 4 , move v0 , v0 )  decode:( move 3 , ul - 4 ; move ua , 9 ) 
[21803] c:0 is:( move ua + ul , ul ; loop 0 , 4 , move v0 , v0 )  decode:( move ua + 3 , ul ; move 3 , 4 ) 
[21804] c:0 is:( loop 0 , 3 , move ul , ua - ul ; move v0 , v0 )  decode:( move 2 , 0 - 2 ; move 3 , 4 ) 
[21805] c:0 is:( move ua + ul , 2 / ua ; move ua + ul , ua * ua )  decode:loop 0 , 3 , move 3 + 4 , ua / 8 
[21806] c:0 is:loop 0 , 3 , loop 1 , 2 , move 3 + v1 , v0 + v1  decode:loop 0 , 4 , move v0 + 4 , v0 
[21807] c:0 is:loop 0 , 3 , ( move ul , ul ; move v0 + ul , v0 )  decode:loop 0 , 4 , move 2 , ul / v0 
[21808] c:0 is:( loop 0 , 4 , move ul , v0 ; move ua + v0 , ul )  decode:( move 2 , 6 ; move ua + 3 , 4 ) 
[21809] c:0 is:( loop 0 , 4 , move v0 + ul , ul ; move ua , v0 )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[21810] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ua - ul , v0 )  decode:loop 0 , 4 , move 4 , v0 + ul 
[21811] c:0 is:loop 0 , 3 , ( move ul , v0 ; move ul - ua , v0 )  decode:loop 0 , 4 , move ua - 2 , 2 * v0 
[21812] c:0 is:( loop 0 , 3 , move v0 , ul ; move ua , ul - v0 )  decode:( move ua , 2 ; move 3 , ul ) 
[21813] c:0 is:( loop 0 , 3 , move v0 + ul , v0 ; move ul , ul )  decode:loop 0 , 3 , move 4 - ua , v0 / 3 
[21814] c:0 is:loop 0 , 3 , ( move v0 - ua , ul ; move v0 , ul )  decode:loop 0 , 4 , move v0 + 2 , ua * ua 
[21815] c:0 is:loop 0 , 3 , ( move ul , ul ; move v0 , ua - v0 )  decode:loop 0 , 3 , move 2 , v0 - 9 
[21816] c:0 is:( loop 0 , 3 , move ul + v0 , ul ; move v0 , ul )  decode:loop 0 , 3 , move ua - 4 , 2 - v0 
[21817] c:0 is:loop 0 , 3 , ( move ua , v0 ; move v0 - ul , ul )  decode:loop 0 , 4 , move ua , 3 + 8 
[21818] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ul - ua , v0 )  decode:loop 0 , 4 , move 0 - 5 , 4 * 3 
[21819] c:0 is:( move ua + ul , ul ; loop 0 , 5 , move v0 , v0 )  decode:( move ua + 3 , ul ; move ua , 9 ) 
[21820] c:0 is:( move ua , ua ; loop 0 , 6 , move v0 , v0 + ul )  decode:loop 0 , 4 , move v0 + 4 , 4 / 4 
[21821] c:0 is:loop 0 , 3 , ( move v0 + v0 , v0 ; move 3 , 0 )  decode:loop 0 , 3 , move v0 + 4 , 0 - 3 
[21822] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 - ul , v0 )  decode:( move ua , 0 ; move 4 , 5 * 2 ) 
[21823] c:0 is:loop 0 , 2 , loop 1 , 2 , move v1 - 3 , v1 + v1  decode:loop 0 , 3 , move 3 - ua , v0 * 2 
[21824] c:0 is:( loop 0 , 4 , move v0 , v0 / ua ; move ua , ua )  decode:( move ua , 4 ; move 4 , 2 / 4 ) 
[21825] c:0 is:( loop 0 , 5 , move v0 , ua - v0 ; move ul , ua )  decode:( move 5 , 4 * 3 ; move 4 , 4 ) 
[21826] c:0 is:( move ul , ua - ul ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 4 , move v0 , 9 
[21827] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua , ua - v0 )  decode:( move ua , 9 ; move 4 + 2 , 4 ) 
[21828] c:0 is:( move ua + ul , 4 - ua ; move ua - ul , ua * ua )  decode:( move 8 , 4 ; move 5 , ua * ua ) 
[21829] c:0 is:( loop 0 , 4 , move ul + ul , v0 ; move v0 , ul )  decode:loop 0 , 4 , move 0 - 2 , 4 * 4 
[21830] c:0 is:( move ul , ul ; loop 0 , 4 , move v0 + v0 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 * 5 
[21831] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua , ua * ua )  decode:loop 0 , 4 , move 3 - ua , ua / v0 
[21832] c:0 is:( move ua + ul , ua - ul ; move 4 + ul , ul + ul )  decode:( move ua , 2 - 3 ; move 5 , 2 ) 
[21833] c:0 is:( move ua - ul , ua * ua ; move ua + ul , 4 + ul )  decode:( move 5 , 8 ; move ua + ul , 5 ) 
[21834] c:0 is:( move 3 - ua , ua * ua ; move ul - ua , ua - ul )  decode:( move 5 , 4 / 5 ; move 4 , ul ) 
[21835] c:0 is:( move ua , ua - ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , 0 - v0 * 2 
[21836] c:0 is:( loop 0 , 4 , move ul , v0 - ul ; move ua , v0 )  decode:( move 3 , 2 ; move ua , 4 / ua ) 
[21837] c:0 is:loop 0 , 3 , ( move v0 , ul - v0 ; move ul , ul )  decode:( move 4 , 2 ; move ul , ua * ua ) 
[21838] c:0 is:( move ul , ua ; loop 0 , 5 , move ul , v0 + v0 )  decode:( move 3 , 0 ; move 2 , 9 ) 
[21839] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua + ul , v0 )  decode:( move 3 , ua / 4 ; move 8 , 4 ) 
[21840] c:0 is:( move ua - ul , ua ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 / 3 
[21841] c:0 is:loop 0 , 0 , loop 1 , 6 , move v0 - v1 , 3 + v0  decode:( move 4 , 0 - 9 ; move 5 , 3 ) 
[21842] c:0 is:( move ua + ul , ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua - v0 , 9 * 3 
[21843] c:0 is:( loop 0 , 4 , move ul , ul ; move v0 + ul , v0 )  decode:loop 0 , 2 , move 3 - ua , 2 / v0 
[21844] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 - ua , ul )  decode:loop 0 , 3 , move 3 , v0 - 4 
[21845] c:0 is:( move ua , ua * ua ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 0 - 3 , 9 
[21846] c:0 is:( move ua + ul , ua * ua ; move 4 + ul , ul - ua )  decode:( move ua + ul , 8 ; move 5 , ul ) 
[21847] c:0 is:loop 0 , 3 , ( move v0 / ua , v0 ; move ua , ul )  decode:loop 0 , 3 , move ua + v0 , ul + ul 
[21848] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , v0 - ul )  decode:( move 9 , 0 ; move 4 , 0 - 4 ) 
[21849] c:0 is:( loop 0 , 5 , move ul - v0 , ul ; move ua , v0 )  decode:loop 0 , 3 , move v0 + 3 , 3 / 3 
[21850] c:0 is:( move ua , ul ; loop 0 , 6 , move ul , v0 + v0 )  decode:( move 9 , ul ; move 3 , 4 + 4 ) 
[21851] c:0 is:loop 0 , 3 , ( move ul , v0 ; move ua , ul / v0 )  decode:loop 0 , 4 , move 4 + v0 , 4 - 2 
[21852] c:0 is:( move ul , ua ; loop 0 , 5 , move v0 , v0 - ul )  decode:loop 0 , 3 , move ua - 3 , v0 + 8 
[21853] c:0 is:loop 0 , 3 , ( move v0 + 2 , v0 ; move v0 , 2 )  decode:loop 0 , 4 , move 3 , 4 * v0 
[21854] c:0 is:( move 0 , ua * ua ; move 3 , ul + ul ; move 2 , 2 )  decode:( move 2 , 9 ; move 3 , 0 - 2 ) 
[21855] c:0 is:( move ul - ua , ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move v0 - v0 , 4 - 0 
[21856] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua - ul , v0 )  decode:( move 2 , 4 / ua ; move ua , 4 ) 
[21857] c:0 is:( move ua + ul , ul ; move 2 , ul ; move 2 , 2 + 2 )  decode:( move ua + 3 , ul ; move 2 , 5 ) 
[21858] c:0 is:( loop 0 , 5 , move ul , v0 ; move ul - ua , v0 )  decode:( move 2 , 9 / 2 ; move ua , 4 ) 
[21859] c:0 is:( loop 0 , 5 , move ul , v0 + v0 ; move ul , ul )  decode:loop 0 , 4 , move v0 - 2 , ul - 3 
[21860] c:0 is:( loop 0 , 5 , move v0 + ul , ul ; move v0 , ul )  decode:loop 0 , 4 , move 3 - ua , 3 * 5 
[21861] c:0 is:( loop 0 , 5 , move ul , ul ; move ul + v0 , v0 )  decode:( move 3 , 4 ; move ua , ua * ua ) 
[21862] c:0 is:( move ua , ul / ua ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , ul / 4 ; move 4 , 3 ) 
[21863] c:0 is:( move ua , ua ; loop 0 , 6 , move v0 , v0 - ul )  decode:( move 9 , 0 ; move ua , 0 - 4 ) 
[21864] c:0 is:( loop 0 , 5 , move v0 , v0 - ul ; move ua , ul )  decode:( move ua , 9 ; move 4 , 0 - 4 ) 
[21865] c:0 is:( loop 0 , 6 , move v0 , ul + v0 ; move ul , ua )  decode:( move ua , ul / 4 ; move 4 , 8 ) 
[21866] c:0 is:( move ua , ua ; 3 ; loop 0 , ua , move ua , 4 - 2 )  decode:loop 0 , 4 , move 0 - ua , 0 - 0 5 
[21867] c:0 is:( loop 0 , 5 , move v0 - ul , ul ; move ua , v0 )  decode:( move ua + ul , 4 ; move 5 , 4 ) 
[21868] c:0 is:( move ua , ua * ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 2 + 3 , 0 - v0 
[21869] c:0 is:( move ua , ul + ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 5 , 0 - 4 / v0 
[21870] c:0 is:loop 0 , 3 , ( move ul , ul ; move ul , v0 * v0 )  decode:loop 0 , 4 , move ul , ul / v0 
[21871] c:0 is:( loop 0 , 5 , move v0 + ul , v0 ; move ul , ul )  decode:0 loop 0 , 4 , move 4 , 4 * 9 
[21872] c:0 is:( loop 0 , 5 , move ul , v0 + ul ; move v0 , ul )  decode:( move 2 , 2 ; move ua - ul , 9 ) 
[21873] c:0 is:( move ua , ul ; loop 0 , 5 , move ul - v0 , v0 )  decode:( move ua , ul ; move 4 , 4 / ua ) 
[21874] c:0 is:loop 0 , 3 , loop 1 , 2 , move 3 * v0 , v0 - v1  decode:( move 8 , 0 ; move ua + ul , ul ) 
[21875] c:0 is:( loop 0 , 5 , move ul , ul ; move v0 , v0 + ul )  decode:( move 3 , 6 ; move ua , 4 / ua ) 
[21876] c:0 is:( loop 0 , 5 , move v0 , v0 + ul ; move ul , ul )  decode:( move 4 , 4 + 3 ; move ua , 5 ) 
[21877] c:0 is:loop 0 , 3 , ( move ua / v0 , ul ; move v0 , ul )  decode:loop 0 , 3 , move ua , 3 + ul / v0 
[21878] c:0 is:( move ua + ul , ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 3 , move ua + ul , v0 + 4 
[21879] c:0 is:( move ua , ua ; loop 0 , 6 , move v0 , ul - v0 )  decode:loop 0 , 4 , move 4 , 4 * v0 
[21880] c:0 is:( move ua - ul , ul ; loop 0 , 5 , move v0 , v0 )  decode:( move ua , ul ; move ua , 5 * 2 ) 
[21881] c:0 is:( move ua - ul , 0 ; loop 0 , 2 , move 4 , ua - ul )  decode:loop 0 , 3 , move 4 , 2 / v0 
[21882] c:0 is:( loop 0 , 4 , move ul , v0 ; move ua , ul / v0 )  decode:( move ul , ul ; move ua , 2 / 3 ) 
[21883] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , ua - v0 )  decode:( move ul - ua , ul ; move 5 , 6 ) 
[21884] c:0 is:( loop 0 , 5 , move ul , ul ; move v0 , ul - v0 )  decode:loop 0 , 3 , move 3 - ua , 2 - v0 
[21885] c:0 is:( move ua , ua ; loop 0 , 6 , move ul , v0 * v0 )  decode:( move 2 , 0 ; move 8 , 0 - 2 ) 
[21886] c:0 is:( loop 0 , 5 , move v0 , ul ; move ul - v0 , ul )  decode:loop 0 , 4 , move 3 , v0 * 7 
[21887] c:0 is:( loop 0 , 6 , move ul , v0 + ul ; move v0 , ul )  decode:( move ua , 0 ; move 3 , 4 * 3 ) 
[21888] c:0 is:( loop 0 , 6 , move ul , v0 * v0 ; move ua , ua )  decode:( move 3 , 2 / 4 ; move 9 , 8 ) 
[21889] c:0 is:( move ua , 0 ; move ua + ul , 3 ; move ua + 4 , 4 )  decode:( move ua , 0 ; move ua + 4 , ul ) 
[21890] c:0 is:( loop 0 , 5 , move ul , ul ; move ul - v0 , v0 )  decode:loop 0 , 3 , move 3 , 9 / v0 
[21891] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , v0 + ul )  decode:( move ua , 9 + 2 ; move 4 , 9 ) 
[21892] c:0 is:( move ul + ul , ua - 3 ; loop 0 , 2 , move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , ul / 3 
[21893] c:0 is:( move ul , ua ; loop 0 , 5 , move v0 , v0 / ua )  decode:loop 0 , 4 , move ul + v0 , 7 
[21894] c:0 is:( loop 0 , 4 , move v0 , 2 + v0 ; move v0 , 2 )  decode:( move 4 , 2 / 4 ; move 4 , 4 ) 
[21895] c:0 is:( loop 0 , 6 , move ul , v0 + ul ; move ul , v0 )  decode:loop 0 , 4 , move 2 , 4 - 4 / v0 
[21896] c:0 is:( move ul + ul , ua * ua ; move ua - ul , ul / 2 )  decode:( move 2 , 2 - 9 ; move ua , 7 ) 
[21897] c:0 is:( move ua , ua + 2 ; loop 1 , 4 , move ua + ul , 2 )  decode:loop 0 , 4 , move ua + 2 , 2 
[21898] c:0 is:( move ul - ua , ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move v0 + ua , : 0 0 0 0 0 0 , 
[21899] c:0 is:( loop 0 , 6 , move v0 , ul ; move ul , ul + v0 )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[21900] c:0 is:( loop 0 , 5 , move ul - v0 , ul ; move v0 , ul )  decode:( move ua , ul ; move 4 , 0 - 4 ) 
[21901] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , ul / v0 )  decode:( move 9 , 0 ; move ua , 3 + 4 ) 
[21902] c:0 is:( loop 0 , 6 , move v0 , ul - v0 ; move ul , ua )  decode:loop 0 , 4 , move 0 - 4 , v0 - 3 
[21903] c:0 is:( loop 0 , 5 , move ul , v0 * v0 ; move ua , ul )  decode:( move 3 , 9 ; move ua + ul , ua ) 
[21904] c:0 is:( loop 0 , 6 , move v0 , ua * ua ; move v0 , ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 0 
[21905] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 + v0 , ul )  decode:( move 3 , 6 ; move ua + 4 , ul ) 
[21906] c:0 is:( loop 0 , 6 , move ul , ua * ua ; move v0 , v0 )  decode:( move ua , 0 ; move ua , 4 ) 
[21907] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 , ul / v0 )  decode:loop 0 , 3 , move 4 , v0 + 9 
[21908] c:0 is:loop 0 , 3 , ( move ul , ul / v0 ; move v0 , ul )  decode:loop 0 , 2 , move 0 - 3 , 2 - 3 
[21909] c:0 is:( loop 0 , 4 , move ul , v0 / ua ; move v0 , ul )  decode:loop 0 , 3 , move ua - 4 , v0 / 3 
[21910] c:0 is:( move ua , ul ; loop 0 , 6 , move v0 , v0 - ul )  decode:loop 0 , 4 , move 2 - ua , v0 + ul 
[21911] c:0 is:loop 0 , 2 , loop 1 , 3 , move v0 + v1 , v1 * 4  decode:loop 0 , 3 , move 3 , 2 + v0 
[21912] c:0 is:loop 0 , 3 , ( move v0 , 3 + 2 ; move v0 , v0 )  decode:( move 2 , 0 - 2 ; move 4 , 4 ) 
[21913] c:0 is:( move ua + ul , ua - ul ; move ua / 4 , ul - ua )  decode:( move 2 , 0 - 3 ; move ua , ul ) 
[21914] c:0 is:( loop 0 , 6 , move ul , v0 ; move ul - v0 , ua )  decode:loop 0 , 4 , move = 4 , 2 - 4 - 3 
[21915] c:0 is:( loop 0 , 6 , move ul , ua - v0 ; move ul , v0 )  decode:loop 0 , 4 , move v0 , v0 - 4 
[21916] c:0 is:( loop 0 , 6 , move ul - v0 , ul ; move ua , v0 )  decode:loop 0 , 4 , move 0 - 4 , 5 - v0 
[21917] c:0 is:( loop 0 , 5 , move v0 , v0 / ua ; move ul , ua )  decode:loop 0 , 3 , move 4 / v0 , 7 
[21918] c:0 is:loop 0 , 3 , ( move 3 , v0 + v0 ; move v0 , 2 )  decode:loop 0 , 4 , move 0 - 3 , 4 * v0 
[21919] c:0 is:( loop 0 , 6 , move ul - v0 , v0 ; move ua , ul )  decode:loop 0 , 4 , move 4 , 0 - 4 
[21920] c:0 is:loop 0 , 2 , loop 1 , 2 , move v0 - 4 , v1 * v1  decode:( move ua , ua / 2 ; move 9 , ul ) 
[21921] c:0 is:( loop 0 , 6 , move v0 , v0 - ul ; move ul , ul )  decode:loop 0 , 4 , move 3 + v0 , 4 / 3 
[21922] c:0 is:loop 0 , 3 , ( move 4 , 2 + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 + v0 , 9 / 3 
[21923] c:0 is:( move ua , 0 - ul ; loop 0 , 6 , move 2 , ua + ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[21924] c:0 is:( move 2 , ul - ua ; move 2 , 4 + ul ; move ua , 2 )  decode:( move 3 , 8 ; move ua , 0 - 4 ) 
[21925] c:0 is:( loop 0 , 5 , move v0 , v0 / ua ; move ul , ul )  decode:loop 0 , 4 , move 4 - ua , 2 - 7 
[21926] c:0 is:( loop 0 , 6 , move ul , v0 ; move ua , v0 / ua )  decode:( move 2 , 2 ; move ua - 7 , 4 ) 
[21927] c:0 is:loop 0 , 3 , ( move 2 , v0 - 3 ; move v0 , v0 )  decode:loop 0 , 4 , move ul + v0 , 4 * 5 
[21928] c:0 is:( move ul , ua ; loop 0 , 6 , move ul , v0 * v0 )  decode:( move 4 , 4 / move 3 , 9 ) 
[21929] c:0 is:( move ua , 2 / ua ; move 0 , 2 ; move ua , ul / 2 )  decode:( move ua , 6 ; move ua , 5 + 4 ) 
[21930] c:0 is:( move ua , ul + ul ; move ua , 4 ; move 0 - 4 , 2 )  decode:( move 7 , 2 ; move 7 , 4 ) 
[21931] c:0 is:( move ua + ul , ua ; move 3 , 0 - 4 ; move 3 , ul )  decode:loop 0 , 4 , move 0 - 3 , 0 - v0 
[21932] c:0 is:( loop 0 , 4 , move v0 , 0 ; move v0 , 3 * v0 )  decode:( move ua , 0 ; move 3 - ua , 9 ) 
[21933] c:0 is:( move ul , 0 - ua ; loop 0 , 3 , move ul - ua , 4 )  decode:loop 0 , 3 , move ul - ua , 4 
[21934] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , ul - v0 )  decode:loop 0 , 3 , move 3 , 0 - v0 - 4 
[21935] c:0 is:( move ua + ul , ua * ua ; loop 0 , 3 , move 2 , 3 )  decode:( move ua + ul , ua ; move 2 , 9 ) 
[21936] c:0 is:( move 3 , 0 ; move ua + ul , 2 ; move ul - 4 , ul )  decode:( move 4 , 0 ; move 8 , ua / ul ) 
[21937] c:0 is:( move ua , ua + 2 ; move 3 , 3 ; move ua + ul , 4 )  decode:( move 4 , ul / 4 ; move 8 , 7 ) 
[21938] c:0 is:( move ua , ul / ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua - v0 , 7 * 3 
[21939] c:0 is:( loop 0 , 3 , move 2 , v0 ; move v0 * 2 , v0 )  decode:( move 3 - ua , 5 ; move 5 , 5 ) 
[21940] c:0 is:( move ul - ua , ul / ua ; move 3 - ul , ua * ua )  decode:( move 2 , 5 ; move ua , 4 / 3 ) 
[21941] c:0 is:( loop 0 , 6 , move ul , v0 * v0 ; move ul , ua )  decode:loop 0 , 4 , move 2 , 0 - v0 / 2 
[21942] c:0 is:loop 0 , 3 , ( move v0 + 2 , v0 ; move v0 , 4 )  decode:loop 0 , 4 , move 3 , ua / v0 * 5 
[21943] c:0 is:loop 0 , 3 , ( move 2 + v0 , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 * 4 
[21944] c:0 is:( loop 0 , 5 , move ul , ua / v0 ; move v0 , ul )  decode:( move 3 , 2 / 3 ; move 4 , 8 ) 
[21945] c:0 is:( move ul , ua - 3 ; move 2 , ul ; move ua , 3 + 2 )  decode:( move 3 , 0 - 2 ; move ua , 5 ) 
[21946] c:0 is:( move ua + ul , 4 ; loop 0 , 3 , move ua + ul , 2 )  decode:loop 0 , 4 , move ua + ul , v0 * 2 
[21947] c:0 is:( loop 0 , 5 , move ul , ul ; move ua / v0 , v0 )  decode:loop 0 , 3 , move 2 , v0 0 - v0 
[21948] c:0 is:( move ul , ul ; loop 0 , 6 , move ul - v0 , v0 )  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[21949] c:0 is:( loop 0 , 6 , move ul , v0 / ua ; move v0 , ua )  decode:loop 0 , 3 , move 4 / v0 , 4 - 3 
[21950] c:0 is:( move 3 - ua , ua ; loop 0 , 4 , move 0 - ul , ul )  decode:( move 0 - 4 , 0 ; move 3 , ul ) 
[21951] c:0 is:( loop 0 , 4 , move 4 - v0 , v0 ; move v0 , 0 )  decode:( move 3 - ua , 0 ; move 5 , 3 ) 
[21952] c:0 is:( move 2 , 2 ; loop 0 , 4 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 2 , 3 + 4 / v0 
[21953] c:0 is:( loop 0 , 3 , move v0 , 4 + v0 ; move 3 , v0 )  decode:( move 3 , 4 / 2 ; move 3 , 2 ) 
[21954] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 3 * v0 , 2 )  decode:loop 0 , 4 , move 3 , 6 - v0 
[21955] c:0 is:loop 0 , 3 , ( move 3 + v0 , 4 ; move v0 , v0 )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[21956] c:0 is:( loop 0 , 3 , move 3 - v0 , v0 ; move 3 , v0 )  decode:( move 2 - ua , 3 ; move 4 , 7 ) 
[21957] c:0 is:( loop 0 , 5 , move 2 , v0 ; move 3 , v0 + v0 )  decode:loop 0 , 4 , move v0 - 4 , 2 * 4 
[21958] c:0 is:( move 3 , ul ; move 0 - 4 , ul - 3 ; move ua , ua )  decode:( move ua , ul ; move 4 , 0 - 2 ) 
[21959] c:0 is:( move ul , 2 - ul ; move ul , 4 ; move ua + 2 , 2 )  decode:( move ua , 4 ; move 2 , 2 / 3 ) 
[21960] c:0 is:loop 0 , 2 , ( move 4 , v0 ; move v0 , 4 + v0 )  decode:( move 4 , 0 ; move 5 , 5 ) 
[21961] c:0 is:loop 0 , 3 , ( move v0 , 3 * v0 ; move v0 , 2 )  decode:( move 3 , 4 / ua ; move 3 , 2 ) 
[21962] c:0 is:( move ua , ua ; move 2 , 3 + ul ; move 4 + ul , 3 )  decode:loop 0 , 3 , move 4 , 4 + v0 / 4 
[21963] c:0 is:( move ua , 2 - ua ; move 2 , ul ; move 3 , ul - 3 )  decode:( move 0 - 3 , 3 ; move 9 , ul ) 
[21964] c:0 is:( loop 0 , 5 , move 2 , v0 - 2 ; move v0 , v0 )  decode:loop 0 , 3 , move 0 - 4 , v0 - 3 
[21965] c:0 is:( move 3 , ul ; move ul - ua , 3 * 3 ; move ua , 0 )  decode:( move 3 , ul ; move ua , 4 * 3 ) 
[21966] c:0 is:( move 3 , ua ; move ul - 2 , ua * ua ; move 3 , 2 )  decode:loop 0 , 4 , move 2 , 2 / 0 / v0 
[21967] c:0 is:( move ua , 3 ; move 2 , ua + ul ; move ua , 3 * 3 )  decode:( move ua + 2 , 0 ; move ua , 9 ) 
[21968] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 2 - v0 , 4 )  decode:( move 3 , 4 ; move 3 , 4 ) 
[21969] c:0 is:( move 4 , 2 ; move 4 , ua + 2 ; move ua , ua * ua )  decode:loop 0 , 4 , move ua - 3 , 2 + v0 
[21970] c:0 is:loop 0 , 3 , ( move 4 - v0 , v0 ; move 2 , v0 )  decode:loop 0 , 4 , move ua - 3 , v0 * 2 
[21971] c:0 is:loop 0 , 3 , ( move 3 * v0 , v0 ; move v0 , 2 )  decode:loop 0 , 3 , move 4 , 4 * v0 
[21972] c:0 is:( loop 0 , 3 , move ua , 2 + ul ; move ul - 3 , ul )  decode:loop 0 , 4 , move 0 - 5 , 0 - v0 
[21973] c:0 is:( loop 0 , 6 , move ul , ul / v0 ; move ua , v0 )  decode:( move 9 , 2 ; move 4 , ul - 4 ) 
[21974] c:0 is:( loop 0 , 6 , move ul , v0 * v0 ; move ul , ul )  decode:loop 0 , 3 , move 4 - ua , v0 + 8 
[21975] c:0 is:( move 3 , 0 ; loop 0 , 5 , move v0 , v0 * v0 )  decode:( move ua , ul / 4 ; move 5 , 3 ) 
[21976] c:0 is:( move ua , 3 + ul ; move ua , 4 ; move ua + 2 , 4 )  decode:0 0 0 loop 0 , 3 , move 2 + 4 , 4 
[21977] c:0 is:( move 3 , ul ; move 4 + 2 , ul ; move ua + ul , 2 )  decode:loop 0 , 4 , move ua - 2 , 2 / v0 
[21978] c:0 is:( loop 0 , 4 , move v0 , 4 ; move 3 , v0 + v0 )  decode:loop 0 , 3 , move 3 , v0 + 8 
[21979] c:0 is:( move ua , 3 / ua ; move 2 , ua - 2 ; move ua , 4 )  decode:loop 0 , 3 , move v0 + 4 , 0 - 9 
[21980] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , ul / v0 )  decode:( move 0 - ua , 0 ; move 4 , 7 ) 
[21981] c:0 is:( loop 0 , 4 , move 2 / v0 , 2 ; move v0 , v0 )  decode:loop 0 , 3 , move 0 - 3 , v0 + 8 
[21982] c:0 is:( move ua + 3 , ul ; loop 0 , 4 , move ua + ul , 4 )  decode:0 0 loop 0 , 4 , move 0 - ua , 9 
[21983] c:0 is:( loop 1 , 5 , move v1 , ul ; move ua / v1 , ua )  decode:loop 0 , 3 , move 3 , 2 - v0 
[21984] c:0 is:( loop 0 , 6 , move v0 , v0 * 3 ; move v0 , 0 )  decode:( move ua + 4 , 2 ; move 7 , 4 ) 
[21985] c:0 is:( move 2 , ua ; move ul - 4 , 4 + 2 ; move ua , ul )  decode:( move 3 , 9 ; move ua , 0 - 8 ) 
[21986] c:0 is:( move 3 , ua + 2 ; move 3 , 4 ; move ul , ua - ul )  decode:( move 3 , 2 ; move 4 , 4 ) 
[21987] c:0 is:( loop 0 , 5 , move v0 + v0 , 2 ; move v0 , 4 )  decode:loop 0 , 4 , move v0 - 7 , 0 - 4 
[21988] c:0 is:( move ul , ul ; move ua + ul , 4 ; move 2 , 4 + 2 )  decode:( move ul , ul ; move ua + 3 , 4 ) 
[21989] c:0 is:( move 4 , 4 ; loop 0 , 3 , move v0 , v0 + v0 )  decode:( move 5 , 4 ; move 3 , 8 ) 
[21990] c:0 is:( loop 0 , 6 , move v0 , 2 ; move 2 - v0 , v0 )  decode:loop 0 , 4 , move 4 , 4 
[21991] c:0 is:( move 2 - ua , ul ; move 4 , 4 ; move ua , 2 + ul )  decode:loop 0 , 4 , move 3 - ua , v0 - 8 
[21992] c:0 is:( loop 0 , 6 , move 2 , v0 ; move v0 , 2 - v0 )  decode:loop 0 , 4 , move 2 - ua , 9 9 
[21993] c:0 is:( move ul - ua , 0 ; loop 0 , 5 , move ul , 2 / ua )  decode:( move 4 , 0 ; move ul - ua , 7 ) 
[21994] c:0 is:( ( move ua , ul ; move 0 - 2 , ul ) ; move ua , 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[21995] c:0 is:( loop 0 , 6 , move ul / v0 , ul ; move v0 , ul )  decode:( move 3 , ul ; move 5 , 2 ) 
[21996] c:0 is:( move ua , ua - ul ; move ul , 3 + 2 ; move 4 , 3 )  decode:( move 3 , 7 ; move ua , 3 * 5 ) 
[21997] c:0 is:loop 0 , 3 , ( move 4 + v0 , 0 / move v0 , v0 )  decode:loop 0 , 3 , move ua , v0 
[21998] c:0 is:( move 0 , 4 ; move ua , 4 / ua ; move 3 , ul - ua )  decode:( move ua , ul - 9 ; move 3 , ul ) 
[21999] c:0 is:( loop 0 , 5 , move 3 , v0 ; move v0 , 3 - v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[22000] c:0 is:( move 4 , 3 ; move ul , ua / 3 ; move ua , 0 - ul )  decode:( move ua , ul ; move 4 , 3 / 2 ) 
[22001] c:0 is:( move ua , 0 ; ( move 0 , 4 / ua ; move ua , ul ) )  decode:( move ua , 0 ; move ua , 8 ) 
[22002] c:0 is:( loop 0 , 4 , move v0 * 2 , v0 ; move v0 , 4 )  decode:loop 0 , 4 , move ua - 3 , 0 - v0 
[22003] c:0 is:( move 2 , ua ; ( move ul , ul ; move ua + 2 , 2 ) )  decode:( move 2 , ul ; move ua + 2 , 4 ) 
[22004] c:0 is:( move 4 + ul , ul / 2 ; move 2 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 , v0 - 4 
[22005] c:0 is:( move ua - ul , 2 ; loop 0 , 5 , move 3 + ul , ul )  decode:loop 0 , 4 , move ul - ua , ua / 4 
[22006] c:0 is:( move ul , ua ; move ua + 3 , 4 / ua ; v0 = 0 )  decode:( move ul , 4 ; move ua + 3 , ul ) 
[22007] c:0 is:( move ua , ua ; move ul - 2 , ul ; move 3 , 3 * 3 )  decode:( move ua , 0 ; move 4 , 3 / 4 ) 
[22008] c:0 is:( loop 0 , 5 , move 2 + ul , 4 + ul ; move ul , ua )  decode:loop 0 , 4 , move ua - 3 , 0 - 5 
[22009] c:0 is:( loop 0 , 6 , move 3 , v0 ; move v0 , v0 + 3 )  decode:loop 0 , 4 , move ua , 0 - 9 
[22010] c:0 is:( move 3 , ua + ul ; move ul , 4 ; move ua , 3 * 2 )  decode:( move 3 , ul ; move ua + ul , 7 ) 
[22011] c:0 is:( move 2 , ul / 3 ; move ua , 4 ; move 2 , ua + ul )  decode:( move 2 , 9 ; move 8 , 4 * 3 ) 
[22012] c:0 is:( move ul , ul ; move ua , 3 * 4 ; move 2 + ul , 2 )  decode:( move 3 , 2 / 4 ; move ua , 2 ) 
[22013] c:0 is:( loop 0 , 5 , move v0 , v0 ; move 2 * v0 , 4 )  decode:loop 0 , 4 , move ua - v0 , 9 / 3 
[22014] c:0 is:( move 3 , ua ; move 4 + ul , ul ; move 3 , ul - 3 )  decode:( move 4 , 0 ; move ua , ua / 3 ) 
[22015] c:0 is:( move ua , 3 ; move ul , ul - ua ; move 4 , 4 + 3 )  decode:( move ua , 3 ; move 4 , 7 ) 
[22016] c:0 is:( move ul , 2 ; move ua , ul / 4 ; move 4 - ul , 0 )  decode:( move 3 , 4 / move ua , ul / 2 ) 
[22017] c:0 is:( loop 0 , 6 , move v0 , v0 / 2 ; move v0 , 2 )  decode:loop 0 , 4 , move 5 , v0 + 2 
[22018] c:0 is:( move 3 , ul ; move 4 , 3 + ul ; move ua + ul , 4 )  decode:loop 0 , 3 , move v0 + 4 , ua * ua 
[22019] c:0 is:( move 3 , 4 ; loop 0 , 4 , move v0 * v0 , v0 )  decode:loop 0 , 3 , move ua , 0 - v0 + 2 
[22020] c:0 is:( move ua + ul , ul / 2 ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 2 - ua , v0 - 3 
[22021] c:0 is:( ( move 2 , 0 - 3 ; move ua , ul ) ; move ul , ul )  decode:( move 4 - ua , 0 ; move 7 , 4 ) 
[22022] c:0 is:( ( move ua - ul , ua ; move 2 , 2 ) ; move ua , 3 )  decode:( move ua , 0 ; move ua - ul , 4 ) 
[22023] c:0 is:( move ul - 4 , 0 - 4 ; move ul , ul ; move 4 , ua )  decode:( move 5 , ul - 9 ; move 5 , 2 ) 
[22024] c:0 is:( loop 0 , 5 , move 2 , v0 ; move v0 , v0 * 4 )  decode:loop 0 , 4 , move 3 , 0 - v0 
[22025] c:0 is:( move ua , ua ; ( move 3 , 2 ; move ul - ua , 2 ) )  decode:( move ua , 0 ; move ua + 2 , 4 ) 
[22026] c:0 is:( move ul - 3 , ul - ua ; loop 0 , 5 , move 2 , ul )  decode:loop 0 , 4 , move 3 , v0 + 2 
[22027] c:0 is:( move ul , 2 / ua ; loop 0 , 4 , move ua - ul , 3 )  decode:loop 0 , 3 , move ua - v0 , 3 
[22028] c:0 is:loop 0 , 3 , ( move v0 * v0 , v0 ; move 4 , 4 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[22029] c:0 is:( move ua , ul - 4 ; move ul , 4 + 3 ; move ua , 3 )  decode:( move ua , 4 ; move ua , 9 / 4 ) 
[22030] c:0 is:( loop 0 , 4 , move v0 , v0 - 4 ; move v0 , 4 )  decode:loop 0 , 4 , move 2 , 0 - v0 0 0 
[22031] c:0 is:( move ul , 3 / 2 ; move 3 , ul - ua ; move 3 , ul )  decode:( move 2 , 3 / 2 ; move 4 , 5 ) 
[22032] c:0 is:( move ua , ul - 4 ; move 3 , 3 - ua ; move ul , 4 )  decode:( move 3 , 0 - 3 ; move ua , 3 ) 
[22033] c:0 is:( move ua , 3 ; move 2 , ul - 4 ; move ua / 3 , ul )  decode:( move 0 - 4 , ul ; move ua , ul ) 
[22034] c:0 is:( move 3 + ul , ua ; move ul , 4 - ul ; move 4 , 3 )  decode:( move 3 , 9 ; move 4 , 4 / 4 ) 
[22035] c:0 is:( move 4 , 3 ; move 4 + ul , 3 + ul ; move ul , ul )  decode:( move 4 , 3 ; move ua , 4 ) 
[22036] c:0 is:( loop 0 , 6 , move 4 - v0 , v0 ; move v0 , 3 )  decode:loop 0 , 3 , move 4 + v0 , 3 - 3 
[22037] c:0 is:( ( move 2 , 2 ; move ua , ul ) ; move ua , 4 + ul )  decode:( move ua + ul , 3 ; move 5 , 7 ) 
[22038] c:0 is:( loop 0 , 4 , move 3 / v0 , 4 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , 0 - 4 
[22039] c:0 is:( move ul , ua / 4 ; loop 0 , 2 , move ua - 4 , ul )  decode:( move 2 , ua / 4 ; move 4 , ul ) 
[22040] c:0 is:( loop 0 , 6 , move v0 / 2 , v0 ; move v0 , 3 )  decode:loop 0 , 4 , move v0 - 4 , 0 - 9 
[22041] c:0 is:( loop 0 , 5 , move v0 - 4 , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 3 
[22042] c:0 is:( ( move 3 , ul ; move 3 , ul ) ; move ul - ua , 0 )  decode:( move 4 , ul ; move 5 , ua / 3 ) 
[22043] c:0 is:( move 4 + ul , ul ; loop 0 , 5 , move 3 , ul + ul )  decode:loop 0 , 4 , move 0 - 4 , 5 * v0 
[22044] c:0 is:( move ul , ua ; ( move ua + 2 , ul ; move 4 , 2 ) )  decode:( move 6 , ul ; move ua , 2 ) 
[22045] c:0 is:( move 4 + 4 , ua ; move ua , ua - 4 ; v0 = ua )  decode:( move ua + ul , 0 ; move 7 , 4 ) 
[22046] c:0 is:( move ua , 4 - 4 ; move ul , 3 ; move ua + 4 , ul )  decode:( move ul - ua , 0 ; move ua , 4 ) 
[22047] c:0 is:( move ua / 2 , 4 ; move 4 - ua , ul ; move ua , 3 )  decode:( move 3 , 9 ; move ua + 2 , 4 ) 
[22048] c:0 is:( loop 0 , 5 , move ua - 4 , ua / 3 ; move ua , ua )  decode:( move 3 , ua / 4 ; move 9 , ul ) 
[22049] c:0 is:( move ua , ul ; move ua , 4 ; move 4 * 2 , ul - 3 )  decode:loop 0 , 3 , move ua + v0 , 4 * 3 
[22050] c:0 is:( move 3 + 2 , ua ; loop 0 , 4 , move v0 , 2 - 3 )  decode:loop 0 , 4 , move ua - 4 , v0 * 3 
[22051] c:0 is:( move 4 , 0 - 3 ; move ul , ul / 3 ; move ul , ul )  decode:loop 0 , 4 , move v0 , v0 - 4 
[22052] c:0 is:( loop 0 , 6 , move v0 , 2 ; move 4 , v0 * v0 )  decode:loop 0 , 4 , move v0 - ua , 9 0 0 0 2 / 
[22053] c:0 is:( loop 0 , 3 , move 2 , 3 + 2 ; move 2 , ul / v0 )  decode:( move 2 , 5 ; move 5 , ua * ua ) 
[22054] c:0 is:( v0 = 4 ; loop 1 , 5 , move v0 , v0 + v0 )  decode:loop 0 , 4 , move ua - 2 , 8 
[22055] c:0 is:( loop 0 , 6 , move 3 / v0 , 3 ; move v0 , v0 )  decode:( move ua , ul ; move 3 , ua * ua ) 
[22056] c:0 is:( move ua , 4 - ul ; move ua , 4 + ul ; move 4 , 4 )  decode:( move ua + ul , 8 ; move 8 , 5 ) 
[22057] c:0 is:( move 0 - ul , 3 + 2 ; loop 0 , 5 , move v0 , 4 )  decode:loop 0 , 3 , move 0 - 4 , v0 - 4 
[22058] c:0 is:( move ua , ul - 4 ; move 4 , 3 ; move ua - 4 , ul )  decode:loop 0 , 3 , move 4 , 0 - v0 
[22059] c:0 is:( loop 0 , 6 , move 3 , 4 ; move v0 , v0 * v0 )  decode:loop 0 , 4 , move v0 * 4 , 9 
[22060] c:0 is:( move ua , ul / 3 ; move ul , 4 + 4 ; move ua , 3 )  decode:( move ul - ua , 5 ; move ua , 8 ) 
[22061] c:0 is:( loop 0 , 6 , move 3 / v0 , v0 ; move v0 , 3 )  decode:loop 0 , 4 , move 4 , 0 - v0 * 2 
[22062] c:0 is:( move 3 , ua ; ( move ua + ul , 4 ; move ul , 2 ) )  decode:( move 3 , 0 ; move 7 , 4 ) 
[22063] c:0 is:( move 2 - ul , 4 * 3 ; move ua , ul ; move 4 , ul )  decode:( move ua , 3 / ua ; move 4 , ul ) 
[22064] c:0 is:( ( move 2 , 3 ; move ul , 2 ) ; move ul - ua , ul )  decode:( move 2 , 4 ; move ua - ul , ul ) 
[22065] c:0 is:( loop 0 , 6 , move v0 , v0 / 3 ; move v0 , 3 )  decode:loop 0 , 4 , move 0 - 4 , v0 / 5 
[22066] c:0 is:( move 4 + ul , 4 - ul ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 4 , move 4 - ua , 3 - v0 
[22067] c:0 is:( move ul , 3 ; move 4 , ua / 4 ; move ua + ul , 4 )  decode:loop 0 , 3 , move v0 + 4 , 0 - 2 
[22068] c:0 is:( move 3 + 2 , 4 + ul ; loop 0 , 4 , move v0 , 3 )  decode:( move 3 , ul - move ua , 7 / 4 ) 
[22069] c:0 is:( ( move ul - ua , ul ; move 2 , 2 ) ; move 4 , ul )  decode:( move 4 , ul ; move ua , 2 + 4 ) 
[22070] c:0 is:( move 4 + ul , ua ; ( move 2 , 4 ; move ua , ul ) )  decode:( move 5 , 0 ; move 8 , 5 ) 
[22071] c:0 is:( ( move ul , 2 ; move ua , ua - ul ) ; move 3 , 4 )  decode:( move ua , ul ; move 3 - ua , 4 ) 
[22072] c:0 is:( move ua , 4 ; ( move ul , ua - ul ; move 4 , 2 ) )  decode:( move 3 , 3 ; move ua + ul , ul ) 
[22073] c:0 is:( move 4 - ul , ul ; loop 0 , 6 , move ul - ua , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - 0 0 0 
[22074] c:0 is:( move ul - 4 , 0 ; ( move ul , ul ; move 4 , ul ) )  decode:( move 3 , 0 - 3 ; move 5 , 2 ) 
[22075] c:0 is:( ( move 4 , 3 ; move ua , ul ) ; move ua , ua - 4 )  decode:( move ua + 2 , 3 ; move 8 , 4 ) 
[22076] c:0 is:( move 4 , 2 - ul ; loop 0 , 5 , move 3 , 2 + v0 )  decode:loop 0 , 4 , move ua - v0 , 0 - 2 
[22077] c:0 is:( move ua - ul , 3 ; ( move ul , 2 ; move 4 , ul ) )  decode:( move ul - ua , 3 ; move 5 , ul ) 
[22078] c:0 is:( v0 = 3 ; loop 1 , 6 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 4 , 0 - 9 
[22079] c:0 is:( move 2 / ua , 2 + 2 ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move 4 - v0 , 5 * 3 
[22080] c:0 is:( move 4 , 4 / 3 ; move ul , ul / 2 ; move ua , ul )  decode:( move ua , 6 ; move 4 , 3 / 2 ) 
[22081] c:0 is:( loop 0 , 3 , move 2 + ul , 4 ; move 3 , 4 * v0 )  decode:loop 0 , 3 , move 4 , 0 - v0 * 4 
[22082] c:0 is:( move 2 , ul / ua ; ( move 3 , 4 ; move ua , ul ) )  decode:( move ua + 2 , 0 ; move 8 , 5 ) 
[22083] c:0 is:( v0 = ul ; loop 1 , 5 , move 4 , 2 ; move 2 , 0 )  decode:loop 0 , 4 , move 2 - ua , v0 + 4 
[22084] c:0 is:( move 2 , 4 / ua ; loop 0 , 4 , move 3 + v0 , 4 )  decode:loop 0 , 4 , move ua - 2 , 0 - 9 
[22085] c:0 is:( ( move ul , ua ; move 2 , 4 / ua ) ; move 4 , ul )  decode:( move 2 , 2 / 4 ; move 5 , 5 ) 
[22086] c:0 is:( move ul , ul / 3 ; ( move ul , 4 ; move ua , 2 ) )  decode:( move 0 - 4 , 0 ; move ua , 3 ) 
[22087] c:0 is:( move 4 / ua , 4 ; ( move ua , ul ; move 3 , ul ) )  decode:( move ua , 5 ; move 3 , ul ) 
[22088] c:0 is:( move 4 , 4 / ua ; move ul , ul ; move ul , 3 / 4 )  decode:( move 4 , 2 / 4 ; move 2 , ul ) 
[22089] c:0 is:( move 3 , ul / 3 ; ( move ul , ul ; move 3 , ul ) )  decode:( move 3 , 2 / 6 ; move 4 , 2 ) 
[22090] c:0 is:( v0 = 2 ; loop 1 , 5 , move v1 - ul , 3 + 2 )  decode:loop 0 , 3 , move ua - 4 , ua / v0 
[22091] c:0 is:( move 4 , ul ; ( move ul , 4 / ua ; move ua , 4 ) )  decode:( move 4 , ul ; move ua , 9 + 4 ) 
[22092] c:0 is:loop 0 , 7 , ( v1 = 3 / v0 ; move v1 , v1 )  decode:loop 0 , 4 , move ua - 4 , 3 / v0 
[22093] c:0 is:( move 3 , ua ; loop 0 , 6 , move 4 - 3 , 3 * v0 )  decode:( move 3 , 0 ; move 4 , 0 - 4 ) 
[22094] c:0 is:( v0 = 2 / 4 ; loop 1 , 5 , move ua , v0 - 2 )  decode:loop 0 , 4 , move 4 + 3 , ua * 9 
[22095] c:0 is:( move 3 , 3 ; v0 = 3 / 2 ; move ul - 4 , v0 )  decode:loop 0 , 2 , move 0 - 3 , 3 / 4 
[22096] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + v0 , v0 + ul  decode:loop 0 , 3 , move 3 , 9 
[22097] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + v0 , ua - v1  decode:loop 0 , 3 , move 4 / v0 , ul / 3 
[22098] c:0 is:( move 0 - ua , ua ; move 0 - ua , 3 ; move ul , ul )  decode:0 - loop 0 , 4 , move 4 , 3 0 
[22099] c:0 is:loop 0 , 3 , loop 1 , 2 , move v0 + v1 , ul - v0  decode:loop 0 , 3 , move 0 - 3 , v0 * 2 
[22100] c:0 is:loop 0 , 7 , ( v1 = ua - 4 ; move 3 * 2 , v1 )  decode:loop 0 , 4 , move ua + ul , 0 - 5 0 2 2 / 
[22101] c:0 is:loop 0 , 3 , ( move v0 , 0 ; move v0 - ua , v0 )  decode:loop 0 , 3 , move ua - 2 , v0 
[22102] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + ul , v1 - v0  decode:( move 4 , ul ; move 7 , 0 - 4 ) 
[22103] c:0 is:( v0 = 4 - ul ; loop 1 , 7 , move 4 + v0 , 4 )  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[22104] c:0 is:( move ul , 0 ; move ua - 2 , 2 ; move ua + ul , ul )  decode:( move 3 - ua , ul ; move 9 , ul ) 
[22105] c:0 is:loop 0 , 2 , ( move v0 , v0 ; move 2 - ua , v0 )  decode:loop 0 , 4 , move 2 , v0 * v0 
[22106] c:0 is:( move ua , ua ; move 2 , 2 ; move ua - ul , ua + 3 )  decode:loop 0 , 4 , move 3 , v0 + v0 
[22107] c:0 is:loop 0 , 3 , ( move v0 + v0 , 2 ; move ua , v0 )  decode:loop 0 , 4 , move ua , 2 / v0 
[22108] c:0 is:( move ua + 2 , ua + ua ; loop 0 , 3 , move ul , ul )  decode:( move ua + 3 , 0 ; move 2 , 2 ) 
[22109] c:0 is:( move ul - ua , 0 ; move ul , 0 - ua ; move 4 , ul )  decode:( move 2 - ua , 0 ; move 5 , ul ) 
[22110] c:0 is:( move 4 + ul , 0 ; move ua , 2 ; move ua , ul + ul )  decode:loop 0 , 3 , move ua , v0 + 2 
[22111] c:0 is:( loop 0 , 4 , move v0 + v0 , v0 ; move ul , 0 )  decode:loop 0 , 4 , move 3 , 3 * v0 
[22112] c:0 is:( loop 0 , 4 , move ul + v0 , v0 ; move v0 , 0 )  decode:loop 0 , 4 , move 3 , v0 * 3 
[22113] c:0 is:loop 0 , 2 , loop 1 , 3 , move v0 + ul , v0 / v1  decode:loop 0 , 3 , move 3 , v0 - 3 
[22114] c:0 is:( move ua , 4 ; move ua , 2 ; move 0 - ua , ua - ul )  decode:loop 0 , 3 , move ua , 4 - v0 
[22115] c:0 is:( move ua , 0 - ul ; move ua , 2 ; move 3 , ua * ua )  decode:loop 0 , 3 , move 4 + v0 , 8 
[22116] c:0 is:loop 0 , 2 , ( move ul , ua ; move ua + ul , 2 - ua )  decode:( move ua + 2 , 2 ; move 7 , 2 ) 
[22117] c:0 is:( move ul - ua , ua ; move ul , ul ; move 3 , 0 - 2 )  decode:( move 0 - ua , 0 ; move ua , ul ) 
[22118] c:0 is:loop 0 , 3 , ( move ua + ul , 2 ; move ua , ul + ul )  decode:loop 0 , 4 , move 4 + 3 , 2 
[22119] c:0 is:( loop 0 , 3 , move 2 , v0 ; move v0 + ul , v0 )  decode:( move 4 , 0 ; move 4 , ua * ua ) 
[22120] c:0 is:loop 0 , 3 , ( move v0 + ul , 2 ; move v0 , v0 )  decode:0 loop 0 , 3 , move 3 , 4 
[22121] c:0 is:( move ul , ua ; move 2 , ua - 4 ; move ua , 0 - ul )  decode:( move 2 , 0 - 2 ; move 8 , ul ) 
[22122] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ul + v0 , 0 )  decode:( move 3 , 6 ; move 9 , 4 ) 
[22123] c:0 is:( move ul , ua + ul ; loop 0 , 3 , move ua + ul , 2 )  decode:loop 0 , 3 , move ua + ul , 3 - v0 
[22124] c:0 is:( loop 0 , 4 , move 2 , v0 ; move ua + v0 , v0 )  decode:( move 4 , 0 ; move 3 + ua , 4 ) 
[22125] c:0 is:( move ul , ua + ul ; move ua + 2 , 4 ; move ua , 2 )  decode:( move 9 , ul / 4 ; move ua , 2 ) 
[22126] c:0 is:( move 2 , ua - 3 ; move ua , ua * ua ; move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[22127] c:0 is:( move ua , 2 ; move ul , 2 ; move ua - 2 , ul + ul )  decode:( move ua , 2 ; move 4 , 4 ) 
[22128] c:0 is:( loop 0 , 2 , move ua + v0 , 4 ; move v0 , v0 )  decode:( move 5 , 4 ; move ua + 2 , 4 ) 
[22129] c:0 is:( move ua , ua ; move ul - ua , 2 ; move 3 + 3 , ua )  decode:( move ua , 0 ; move ul - ua , 2 ) 
[22130] c:0 is:( move ua , 2 / ua ; move ul , ua ; move ua + 2 , 2 )  decode:( move ua , 4 / ua ; move 9 , 2 ) 
[22131] c:0 is:loop 0 , 3 , ( move ua - v0 , 3 ; move v0 , v0 )  decode:loop 0 , 4 , move ua - v0 , 3 / 2 
[22132] c:0 is:( loop 0 , 4 , move v0 + v0 , ul ; move v0 , 2 )  decode:loop 0 , 4 , move 3 , v0 + v4 
[22133] c:0 is:( move ua , ul ; move 0 - 4 , ua * 2 ; move ua , ul )  decode:( move ul - ua , ul ; move ua , ul ) 
[22134] c:0 is:( move ua , ul - 2 ; move ua , ua - 4 ; move ua , 2 )  decode:loop 0 , 3 , move v0 - ua , 0 - 2 
[22135] c:0 is:loop 0 , 3 , ( move v0 + v0 , 3 ; move v0 , ul )  decode:( move 4 , 8 ; move 3 , 0 - 4 ) 
[22136] c:0 is:( move ua + ul , ua - ul ; loop 0 , 2 , move 3 , ul )  decode:( move ua + ul , 9 ; move 5 , 5 ) 
[22137] c:0 is:( move ua , 0 ; move ul - ua , ua ; move 3 , 3 / ua )  decode:( move ul - ua , 0 ; move 4 , 7 ) 
[22138] c:0 is:( loop 0 , 4 , move v0 , v0 ; move ul + v0 , 2 )  decode:loop 0 , 3 , move 3 , 3 + 4 / v0 
[22139] c:0 is:( loop 0 , 4 , move v0 , v0 ; move v0 , ua - 2 )  decode:( move 3 , 4 ; move 3 , 2 ) 
[22140] c:0 is:( loop 0 , 5 , move ul - v0 , v0 ; move v0 , 0 )  decode:loop 0 , 2 , move 3 - ua , 4 * 4 
[22141] c:0 is:loop 0 , 3 , ( move v0 , ua ; move 4 + v0 , v0 )  decode:loop 0 , 3 , move v0 - ua , v0 
[22142] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 + 3 , v0 )  decode:loop 0 , 4 , move ua - 3 , v0 * 2 
[22143] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 3 , v0 + ul )  decode:loop 0 , 4 , move 0 - 3 , 0 - 9 
[22144] c:0 is:( loop 0 , 4 , move v0 , v0 ; move v0 - ua , 2 )  decode:( move 3 , 8 ; move 4 , 0 - 2 ) 
[22145] c:0 is:loop 0 , 3 , ( move ua - v0 , v0 ; move v0 , 3 )  decode:loop 0 , 4 , move 4 , 0 - v0 * 3 
[22146] c:0 is:( move ua , 0 ; move ul / 2 , ul + ul ; move ua , 3 )  decode:( move ua , 0 ; move 6 , 5 ) 
[22147] c:0 is:loop 0 , 3 , ( move v0 + 3 , ul ; move v0 , v0 )  decode:loop 0 , 4 , move 3 + v0 , ul 
[22148] c:0 is:( move ul - ua , ua ; move ul , 0 - 4 ; move 2 , ul )  decode:( move 0 - 4 , 0 ; move ua , ul ) 
[22149] c:0 is:( loop 0 , 4 , move v0 , v0 / ua ; move v0 , 0 )  decode:loop 0 , 4 , move 2 , 2 / ua 
[22150] c:0 is:loop 0 , 3 , ( move ul , v0 + v0 ; move 3 , v0 )  decode:( move ua , 0 ; move 5 , 9 ) 
[22151] c:0 is:( move 0 , ul ; loop 0 , 6 , move v0 , v0 + v0 )  decode:( move ua , 9 ; move ua + 2 , 9 ) 
[22152] c:0 is:( move ua - ul , ua + ua ; loop 0 , 4 , move 2 , ul )  decode:loop 0 , 4 , move 3 , v0 
[22153] c:0 is:( move ua , ul ; move 2 + ul , 4 ; move ua , ua - 2 )  decode:( move ua + ul , ul ; move ua , 2 ) 
[22154] c:0 is:loop 0 , 3 , ( move v0 , 3 ; move ul + v0 , v0 )  decode:loop 0 , 3 , move 3 , v0 + 4 
[22155] c:0 is:( move 2 , ul ; loop 0 , 4 , move v0 + v0 , v0 )  decode:loop 0 , 3 , move 2 - ua , v0 - 4 
[22156] c:0 is:loop 0 , 3 , ( move v0 - 2 , v0 ; move v0 , ul )  decode:loop 0 , 3 , move 2 , v0 * 9 
[22157] c:0 is:( move 3 , ua ; move ua , 2 / ua ; move ul , ua + 2 )  decode:( move 9 , 0 ; move 2 , ul / 4 ) 
[22158] c:0 is:loop 0 , 3 , ( move 3 , v0 ; move v0 + ul , v0 )  decode:loop 0 , 4 , move ua - 3 , v0 * 4 
[22159] c:0 is:( loop 0 , 5 , move ua , 2 ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move ua + ul , 4 * / 4 
[22160] c:0 is:( loop 0 , 4 , move v0 , v0 + 2 ; move v0 , ul )  decode:( move 3 , 4 / 3 ; move ua , 4 ) 
[22161] c:0 is:( loop 0 , 3 , move v0 , 2 ; move v0 * v0 , ul )  decode:( move 2 , 4 ; move 5 , 4 / 3 ) 
[22162] c:0 is:( move 0 , ul / ua ; loop 0 , 4 , move ua , ul + ul )  decode:loop 0 , 4 , move ua , 2 
[22163] c:0 is:( move ul , 2 ; loop 0 , 5 , move v0 , v0 + v0 )  decode:( move 4 , 0 ; move ua , ua * ua ) 
[22164] c:0 is:loop 0 , 3 , ( move v0 , ul - v0 ; move 3 , v0 )  decode:loop 0 , 4 , move 3 / v0 , ul 
[22165] c:0 is:loop 0 , 3 , ( move v0 , v0 * 2 ; move v0 , ul )  decode:( move 4 , 4 + 3 ; move 4 , 4 ) 
[22166] c:0 is:( loop 0 , 5 , move v0 , 2 ; move v0 + ul , v0 )  decode:loop 0 , 3 , move ua - v0 , 2 ) 
[22167] c:0 is:( move ua + 2 , ua ; move 4 , 3 + ul ; move ul , ul )  decode:( move ua + 2 , 0 ; move 5 , 4 ) 
[22168] c:0 is:( loop 0 , 3 , move ul , v0 - 3 ; move v0 , v0 )  decode:loop 0 , 2 , move 2 , 0 - 3 
[22169] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 + v0 , 4 )  decode:( move 4 , 9 * 3 ; move 5 , 3 ) 
[22170] c:0 is:( loop 0 , 3 , move v0 - 4 , v0 ; move ua , v0 )  decode:loop 0 , 4 , move 3 - ua , 5 * v0 
[22171] c:0 is:loop 0 , 2 , ( move v0 , v0 ; move 3 , v0 / ua )  decode:loop 0 , 2 , move 3 , v0 - 2 
[22172] c:0 is:( move ua , ul ; move 3 + ul , 3 ; move ua , ua - 3 )  decode:( move 8 , 4 * 5 ; move ua , 3 ) 
[22173] c:0 is:( loop 0 , 4 , move v0 , v0 - 3 ; move ua , v0 )  decode:( move 5 , 0 - 4 ; move ua , 3 ) 
[22174] c:0 is:( loop 0 , 3 , move 4 , v0 ; move ul , v0 + v0 )  decode:loop 0 , 3 , move 4 , v0 
[22175] c:0 is:( loop 0 , 5 , move ul , v0 ; move v0 + v0 , 2 )  decode:( move 2 , 4 ; move 3 + 3 , 2 ) 
[22176] c:0 is:loop 0 , 3 , ( move v0 * v0 , ul ; move 2 , v0 )  decode:loop 0 , 4 , move v0 - 4 , ul / 3 
[22177] c:0 is:loop 0 , 3 , ( move ul , v0 * 2 ; move v0 , v0 )  decode:loop 0 , 3 , move 2 , 6 - v0 
[22178] c:0 is:loop 0 , 2 , ( move v0 , v0 ; move ua , v0 / 3 )  decode:( move ua , 0 ; move 7 , 4 / 3 ) 
[22179] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua / v0 , 2 )  decode:loop 0 , 4 , move ua - v0 , 2 
[22180] c:0 is:( move ua , ul - ua ; loop 0 , 5 , move ul , 0 - ul )  decode:( move ua , ul ; move 4 , 5 + 7 ) 
[22181] c:0 is:( loop 0 , 3 , move v0 + v0 , ul ; move v0 , 4 )  decode:( move 3 , 2 ; move 5 , 4 ) 
[22182] c:0 is:loop 0 , 3 , ( move 4 + ul , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 * 2 
[22183] c:0 is:( move ul , ua + 3 ; move ua , ul / 2 ; move ua , 2 )  decode:( move 8 , 0 - 9 ; move ua , 2 ) 
[22184] c:0 is:loop 0 , 3 , ( move v0 , v0 - ul ; move 3 , v0 )  decode:loop 0 , 4 , move 3 , 3 - v0 
[22185] c:0 is:( move ul , 3 ; move ua , 3 + 2 ; move ua - ul , ul )  decode:( move ua , 8 ; move ua - ul , ul ) 
[22186] c:0 is:loop 0 , 3 , ( move 4 + v0 , ul ; move v0 , v0 )  decode:loop 0 , 3 , move ua - 2 , v0 + 7 
[22187] c:0 is:( loop 0 , 5 , move v0 , 2 - v0 ; move ua , v0 )  decode:loop 0 , 3 , move ul - ua , 4 * 4 
[22188] c:0 is:( move 2 , ul ; loop 0 , 5 , move v0 , v0 + v0 )  decode:( move 4 , 5 ; move ua + ul , 8 ) 
[22189] c:0 is:loop 0 , 3 , ( move 2 , v0 ; move v0 * v0 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 + 2 
[22190] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua - v0 , 2 )  decode:loop 0 , 4 , move 0 - 3 , 0 - v0 
[22191] c:0 is:loop 0 , 3 , ( move 2 * v0 , ul ; move v0 , v0 )  decode:loop 0 , 3 , move 3 , v0 + 2 
[22192] c:0 is:loop 0 , 3 , ( move v0 * v0 , ul ; move v0 , 2 )  decode:( move 4 , 2 / 3 ; move 4 , 2 ) 
[22193] c:0 is:( loop 0 , 5 , move ua , 3 ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move ua , 0 - 3 
[22194] c:0 is:( loop 0 , 6 , move 2 , v0 ; move ua , v0 + v0 )  decode:loop 0 , 4 , move 4 , 0 - v0 * 4 
[22195] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua , 2 - v0 )  decode:( move ua , 4 * 5 ; move ua , 3 ) 
[22196] c:0 is:loop 0 , 3 , ( move ul , 4 ; move v0 + v0 , v0 )  decode:( move 3 , 2 + 6 ; move ua , 9 ) 
[22197] c:0 is:( move ua + ul , 3 ; move ul - 3 , ua ; move 2 , ul )  decode:( move ua , 3 ; move 2 , 4 - 3 ) 
[22198] c:0 is:( move ul , ua ; move ua , 4 + 2 ; move ua , 4 + ul )  decode:( move ua + ul , 6 ; move ua , 5 ) 
[22199] c:0 is:( move 4 , ua ; move ua , ua + 3 ; move ul - 2 , ul )  decode:( move 2 - ua , 0 ; move 4 , 6 ) 
[22200] c:0 is:( move ul , 3 ; loop 0 , 4 , move v0 + v0 , v0 )  decode:0 loop 0 , 3 , move v0 - ua , 3 
[22201] c:0 is:( move ul , 3 - 2 ; move ua , ul ; move 2 , ua * ua )  decode:( move ua + ul , 2 ; move 2 , 2 ) 
[22202] c:0 is:( move ul , ua - 3 ; move ul , 0 - 4 ; move ua , ul )  decode:( move ua , 0 - 4 ; move ul , 2 ) 
[22203] c:0 is:( loop 0 , 5 , move ul , 2 ; move v0 , v0 + v0 )  decode:( move 4 , 0 - 4 ; move 3 , 4 ) 
[22204] c:0 is:( loop 0 , 4 , move v0 - 3 , v0 ; move v0 , ua )  decode:loop 0 , 4 , move 2 , 3 + 4 / v0 
[22205] c:0 is:( move ua , 2 ; loop 0 , 4 , move v0 , v0 * v0 )  decode:( move 8 , 2 ; move 3 , ua * ua ) 
[22206] c:0 is:( loop 0 , 3 , move 4 - v0 , v0 ; move ua , v0 )  decode:( move ua , 8 ; move 7 , 0 - 4 ) 
[22207] c:0 is:( move 0 , ul ; loop 0 , 5 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 3 , v0 + 9 
[22208] c:0 is:( loop 0 , 5 , move 3 , v0 ; move ua , v0 + v0 )  decode:loop 0 , 4 , move 4 , 4 - v0 / 4 
[22209] c:0 is:( loop 0 , 3 , move 3 , ua + ul ; move ua - ul , ul )  decode:loop 0 , 4 , move 3 - ua , ul 
[22210] c:0 is:( move ua + 2 , ua ; move ul , 3 ; move ul - ua , 4 )  decode:( move ua + 2 , 0 ; move ua , 9 ) 
[22211] c:0 is:( loop 0 , 4 , move 2 - v0 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move 0 - v0 , 0 - 4 
[22212] c:0 is:( move ua , 2 - ua ; move ua - 4 , ul ; move ua , 3 )  decode:( move ua + ul , 2 ; move 5 , 4 ) 
[22213] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 + 4 , ul )  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[22214] c:0 is:( move ua , 0 ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move 9 , 0 ; move ua + 2 , 8 ) 
[22215] c:0 is:loop 0 , 3 , ( move v0 , v0 / ua ; move 2 , v0 )  decode:loop 0 , 3 , move 3 , v0 / 2 
[22216] c:0 is:( move ul , 2 ; move ua , 2 ; move ua + ul , ul - 4 )  decode:( move ua + ul , 4 ; move ua , 3 ) 
[22217] c:0 is:loop 0 , 3 , ( move v0 , ul ; move v0 , v0 * 2 )  decode:loop 0 , 3 , move 2 , 4 
[22218] c:0 is:( move ua , ul - 2 ; move 2 , 3 ; move ul - ua , ul )  decode:loop 0 , 3 , move 4 , 2 - v0 
[22219] c:0 is:loop 0 , 3 , ( move ul , 3 * v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 0 - 2 , v0 * 3 
[22220] c:0 is:( move 2 , ua ; move 4 , ul ; move ua + ul , ul - 3 )  decode:( move ua , ua / 3 ; move ua , 2 ) 
[22221] c:0 is:( move ua , ua ; move 4 , 2 + ul ; move ul , 4 + ul )  decode:loop 0 , 3 , move 4 , 4 * v0 
[22222] c:0 is:( loop 0 , 4 , move 3 , ul - v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , ul - v0 
[22223] c:0 is:( loop 0 , 5 , move ul , 2 - v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 3 , 3 * 0 - v0 
[22224] c:0 is:( v0 = ua - 2 ; move v0 , v0 ; move 3 , v0 )  decode:loop 0 , 2 , move 3 , 0 - 2 
[22225] c:0 is:( loop 0 , 6 , move v0 , v0 ; move 2 , ua - v0 )  decode:( move 5 , 6 ; move ua + 2 , 2 ) 
[22226] c:0 is:( loop 0 , 5 , move v0 , ul - v0 ; move v0 , 2 )  decode:loop 0 , 4 , move v0 + 2 , 3 / 3 
[22227] c:0 is:( loop 0 , 5 , move 2 - v0 , v0 ; move v0 , ul )  decode:loop 0 , 3 , move 3 , 4 + 4 / 2 
[22228] c:0 is:( loop 0 , 3 , move 3 , v0 / ua ; move v0 , v0 )  decode:( move 3 , 0 ; move ua , 7 + 4 ) 
[22229] c:0 is:( loop 0 , 6 , move v0 , ul + v0 ; move 2 , v0 )  decode:( move ua , 9 + 4 ; move 3 , 8 ) 
[22230] c:0 is:( loop 0 , 4 , move v0 , ua - v0 ; move 4 , v0 )  decode:loop 0 , 3 , move 3 - ua , 4 3 
[22231] c:0 is:( move 3 , ul + ul ; move ua , 4 ; move ua - ul , 2 )  decode:( move ua , 6 ; move ul - ua , 2 ) 
[22232] c:0 is:( loop 0 , 5 , move v0 , v0 + 3 ; move ul , v0 )  decode:( move 2 , 4 ; move ua + 2 , 4 ) 
[22233] c:0 is:( move ua , ua + 4 ; move 2 , ua / 3 ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[22234] c:0 is:( loop 0 , 3 , move v0 * v0 , ul ; move 3 , v0 )  decode:( move 5 , 3 ; move 3 , 2 ) 
[22235] c:0 is:( loop 0 , 4 , move 3 , v0 * v0 ; move ua , v0 )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[22236] c:0 is:loop 0 , 3 , ( move v0 , ua ; move v0 , 4 * v0 )  decode:( move 3 , 9 ; move 3 , 0 - 2 ) 
[22237] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ul + v0 , 2 )  decode:loop 0 , 4 , move v0 * 3 , 0 - 9 
[22238] c:0 is:( loop 0 , 5 , move v0 , ul + v0 ; move v0 , 3 )  decode:loop 0 , 3 , move 0 - 4 , v0 - 4 
[22239] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , ul - 2 )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[22240] c:0 is:loop 0 , 3 , ( move 3 , v0 ; move v0 * v0 , ul )  decode:loop 0 , 3 , move 2 - ua , v0 * 2 
[22241] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 + v0 , 4 )  decode:( move ua , ul / 4 ; move 5 , 4 ) 
[22242] c:0 is:( loop 0 , 5 , move 2 , v0 ; move ua , v0 * v0 )  decode:( move 4 , 0 ; move ua , 0 - 3 ) 
[22243] c:0 is:( move ul , 2 ; move ua + ul , ul / 2 ; move 3 , ua )  decode:( move 4 , 4 / move ua , 2 / ua ) 
[22244] c:0 is:( loop 0 , 5 , move v0 , 3 ; move v0 , v0 + ul )  decode:loop 0 , 4 , move v0 - v0 , 0 9 0 2 / 
[22245] c:0 is:( move 2 , ul ; move ul , ul - 2 ; move ua , 2 / ua )  decode:( move 2 , 4 ; move ua , 4 / ua ) 
[22246] c:0 is:( loop 0 , 5 , move v0 - 2 , ul ; move v0 , v0 )  decode:loop 0 , 3 , move 3 + v0 , 9 / 3 
[22247] c:0 is:( loop 0 , 5 , move v0 , 2 ; move v0 , ul - v0 )  decode:0 loop 0 , 4 , move 4 , 4 
[22248] c:0 is:( move ul , ul + ul ; move 4 , 4 ; move ua , 0 - ul )  decode:( move 4 , 6 ; move ua , 0 - 2 ) 
[22249] c:0 is:( move 2 , ua + ul ; move ul , ul / 3 ; move ua , 2 )  decode:( move 3 , ul / 4 ; move 3 , 4 ) 
[22250] c:0 is:loop 0 , 3 , ( move v0 , ul ; move v0 - 4 , v0 )  decode:loop 0 , 4 , move 3 - ua , 4 - v0 
[22251] c:0 is:( move 4 , ul ; loop 0 , 4 , move v0 + v0 , v0 )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[22252] c:0 is:( loop 0 , 5 , move ua , 4 ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move v0 + ua , 0 - 4 
[22253] c:0 is:( move ua , 3 ; move ul , ul - 3 ; move 2 , ua * ua )  decode:( move ua , 3 ; move 0 - 3 , 4 ) 
[22254] c:0 is:( loop 0 , 5 , move 3 , v0 ; move ul , v0 + v0 )  decode:loop 0 , 4 , move 3 , 3 * 3 / v0 
[22255] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 4 , ul - v0 )  decode:0 0 loop 0 , 4 , move 3 , ul 
[22256] c:0 is:( move ua , 2 ; move ul - ua , ul ; move ua , 4 + 4 )  decode:loop 0 , 3 , move ua - ul , v0 + 2 
[22257] c:0 is:( loop 0 , 5 , move 3 - ua , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 2 - ua , v0 * 8 
[22258] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ul + v0 , 3 )  decode:loop 0 , 4 , move 4 , 0 - 9 
[22259] c:0 is:( move ul - ua , 3 ; loop 0 , 4 , move ul , ua + ul )  decode:( move ua , 3 ; move 3 , 4 ) 
[22260] c:0 is:( loop 0 , 5 , move 3 , v0 ; move v0 - ua , v0 )  decode:loop 0 , 4 , move 5 , 0 - v0 + 9 
[22261] c:0 is:( loop 0 , 4 , move v0 , 2 ; move v0 , v0 / ua )  decode:loop 0 , 3 , move ua - 4 , 9 - v0 
[22262] c:0 is:loop 0 , 3 , ( move v0 - ul , v0 ; move 4 , v0 )  decode:loop 0 , 3 , move ua - 2 , 2 * v0 
[22263] c:0 is:( loop 0 , 6 , move 2 , v0 + ul ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , ua / ua - v0 
[22264] c:0 is:( move ul , 3 ; loop 0 , 5 , move v0 + v0 , v0 )  decode:loop 0 , 4 , move 0 - ua , 9 * v0 
[22265] c:0 is:( move 3 - 2 , ua * ua ; move 3 , ul ; move ua , ul )  decode:( move 3 , 8 ; move ua + 2 , 5 ) 
[22266] c:0 is:( move ua , ua ; move 3 , ua + ul ; move 3 / 2 , ul )  decode:( move ua , 0 ; move 4 , 4 / 3 ) 
[22267] c:0 is:( move ua + 4 , ua - ul ; loop 0 , 3 , move ul , ul )  decode:( move 2 , 0 ; move 4 + 4 , ul ) 
[22268] c:0 is:( move ul , 2 ; loop 0 , 6 , move v0 , v0 + v0 )  decode:loop 0 , 4 , move ua - 3 , 0 - 8 
[22269] c:0 is:( move ua + 2 , 4 ; move ul , ul ; move 4 , ua + ul )  decode:( move ua + 3 , 4 ; move 4 , 2 ) 
[22270] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 , 2 * v0 )  decode:( move 2 , 2 ; move ua + ul , 5 ) 
[22271] c:0 is:( move 4 , ul ; move 0 - ul , ul ; move 3 + ul , ul )  decode:( move 4 , ul ; move 5 , 2 ) 
[22272] c:0 is:( move ua , ua ; move ul + ul , 4 ; move 3 , 3 + ul )  decode:( move ua , 0 ; move 4 , 4 ) 
[22273] c:0 is:loop 0 , 3 , ( move 3 , ua / v0 ; move v0 , v0 )  decode:( move ua , 0 ; move 3 , 0 - 4 ) 
[22274] c:0 is:( move ul - ua , ul ; loop 0 , 3 , move 4 , ul + ul )  decode:loop 0 , 4 , move 4 , ul + v0 
[22275] c:0 is:( move ua + ul , ua - ul ; loop 0 , 5 , move 3 , ul )  decode:loop 0 , 4 , move 4 , ua / v0 
[22276] c:0 is:loop 0 , 3 , ( move ul , 4 ; move v0 * v0 , v0 )  decode:( move 3 , 2 / 3 ; move 4 , 8 ) 
[22277] c:0 is:( move 3 , ua ; move ul / 2 , ua ; move 3 - ua , ul )  decode:( move 3 , 0 ; move 3 , ua / 3 ) 
[22278] c:0 is:( loop 0 , 6 , move 3 , ul ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move 2 - ua , 2 / v0 
[22279] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ua , 4 + v0 )  decode:loop 0 , 3 , move v0 + 4 , 4 * ua 
[22280] c:0 is:( move ua , ul ; move ua + ul , ua - 4 ; move 4 , 3 )  decode:loop 0 , 4 , move ua - v0 , ua / 3 
[22281] c:0 is:( move ul , 4 ; move 3 + 2 , ul ; move ua - ul , ul )  decode:( move ua , 9 ; move ua , 2 - 3 ) 
[22282] c:0 is:loop 0 , 3 , ( move ua / v0 , v0 ; move v0 , 4 )  decode:loop 0 , 3 , move ua , 0 - 4 * 4 
[22283] c:0 is:( move 2 , ul ; move 3 , ul ; move ua - ul , 2 / ua )  decode:( move 3 , 8 ; move ua , 4 / 3 ) 
[22284] c:0 is:( move 2 , ul ; move ua , ua / 4 ; move 2 + ul , ul )  decode:( move 4 , 4 ; move ua , 7 * 4 ) 
[22285] c:0 is:( loop 0 , 5 , move ul , v0 ; move v0 * 2 , v0 )  decode:( move 2 , 9 / ua ; move 9 , 4 ) 
[22286] c:0 is:( loop 0 , 6 , move 3 , ul + v0 ; move v0 , v0 )  decode:0 loop 0 , 4 , move v0 - ua , ul * 4 
[22287] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ua , v0 * 2 )  decode:loop 0 , 4 , move ua - ul , 0 - 9 
[22288] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , 4 + ul )  decode:loop 0 , 3 , move ua - 2 , v0 - 4 
[22289] c:0 is:( move ua + ul , ua ; move ul , ul ; move 4 + 4 , 3 )  decode:( move ua + ul , 0 ; move 7 , 4 ) 
[22290] c:0 is:( move 0 , ua + 2 ; loop 0 , 4 , move 4 , v0 + ul )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[22291] c:0 is:( move ua , ul ; move ul , 2 / 3 ; move ul - ua , 2 )  decode:loop 0 , 3 , move 0 - 4 , 2 * ua 
[22292] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 3 , ul / v0 )  decode:loop 0 , 4 , move 3 , 3 / v0 
[22293] c:0 is:( loop 0 , 5 , move ul - v0 , 3 ; move v0 , v0 )  decode:( move 3 , 3 * 4 ; move ua , 4 ) 
[22294] c:0 is:( loop 0 , 5 , move v0 , 2 * v0 ; move v0 , ul )  decode:loop 0 , 3 , move 2 - ua , v0 - 8 
[22295] c:0 is:( move ul , 3 ; move 2 , ul ; move ul - ua , 4 + ul )  decode:( move 3 , 9 ; move ua - ul , 5 ) 
[22296] c:0 is:( move ul + ul , ua - 4 ; move 3 , ul ; move ua , 3 )  decode:( move ua , 0 - 4 ; move ua , 3 ) 
[22297] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 4 , v0 * v0 )  decode:( move ua , 0 ; move 9 , 2 ) 
[22298] c:0 is:( move ua , 2 ; move ul / 3 , ua ; move ua , 3 - ul )  decode:( move ua , 2 ; move ua , 2 ) 
[22299] c:0 is:( move 4 , ua ; move ua - 4 , ul ; move ua , ua - 3 )  decode:( move ua , 0 ; move ua , 0 - 4 ) 
[22300] c:0 is:( loop 0 , 6 , move v0 + ul , 3 ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , 3 / 4 / v0 
[22301] c:0 is:( loop 0 , 6 , move 3 , v0 ; move ul + v0 , v0 )  decode:loop 0 , 4 , move ua - v0 , ua / 5 
[22302] c:0 is:loop 0 , 3 , ( move v0 * 4 , v0 ; move ul , v0 )  decode:( move 8 , ul ; move ua + 2 , 9 ) 
[22303] c:0 is:( loop 0 , 5 , move 2 / v0 , v0 ; move ua , v0 )  decode:( move 3 , 7 ; move ua + 2 , 4 ) 
[22304] c:0 is:( move 2 , ul ; move ua , ua / 3 ; move ua , ul - 3 )  decode:( move ua , 0 - 2 ; move 8 , 2 ) 
[22305] c:0 is:( loop 0 , 6 , move ul , v0 - 2 ; move v0 , v0 )  decode:loop 0 , 3 , move 3 - ua , v0 + 8 
[22306] c:0 is:( move 2 , 4 ; move ul + ul , 2 / ua ; move ua , ul )  decode:loop 0 , 4 , move v0 - 4 , 5 / 2 
[22307] c:0 is:( move 4 - ul , 3 ; move ua , ul ; move ua + ul , 3 )  decode:( move ua , ul ; move 2 + 4 , 6 ) 
[22308] c:0 is:( loop 0 , 5 , move v0 , v0 - 4 ; move ua , v0 )  decode:loop 0 , 3 , move ua - v0 , 0 - 9 
[22309] c:0 is:( loop 0 , 4 , move 4 , v0 ; move v0 , v0 - ul )  decode:loop 0 , 4 , move 4 , v0 * 2 
[22310] c:0 is:( loop 0 , 5 , move ul , 4 + v0 ; move v0 , v0 )  decode:( move 4 , 9 ; move 4 , 6 ) 
[22311] c:0 is:( move ul , ua ; move ua + ul , ul / 4 ; move 2 , 2 )  decode:( move 9 , ul / 4 ; move 4 , 2 ) 
[22312] c:0 is:( loop 0 , 6 , move v0 , v0 - ul ; move 2 , v0 )  decode:loop 0 , 4 , move 5 , ua / 4 
[22313] c:0 is:( loop 0 , 5 , move v0 , v0 * v0 ; move 2 , ul )  decode:loop 0 , 4 , move 3 , 4 * v0 
[22314] c:0 is:( move 2 - ua , ua ; move 4 + ul , ul ; move 4 , ul )  decode:( move 4 , 0 ; move 9 , ua * ua ) 
[22315] c:0 is:loop 0 , 3 , ( move v0 , 4 ; move v0 * v0 , ul )  decode:( move 2 , 4 / ua ; move 5 , 8 ) 
[22316] c:0 is:( move ua , 3 * 3 ; move ul - 2 , ul ; move ua , ul )  decode:( move ua , 9 ; move ua , 4 ) 
[22317] c:0 is:( loop 0 , 6 , move v0 - ul , v0 ; move v0 , 2 )  decode:loop 0 , 4 , move 4 , 0 - 4 - v0 
[22318] c:0 is:( move ul , ul ; move ua , ul ; move 3 * 2 , 3 + ul )  decode:( move 7 , 9 ; move ua , 0 - 4 ) 
[22319] c:0 is:( move 3 - ua , ua ; move 4 , 3 ; move ul , ua - ul )  decode:( move ua , 0 ; move ul , ul ) 
[22320] c:0 is:( loop 0 , 5 , move v0 , v0 / 2 ; move v0 , ua )  decode:( move ua + 2 , 2 ; move ua , 2 ) 
[22321] c:0 is:( loop 0 , 6 , move v0 - ul , v0 ; move 2 , v0 )  decode:loop 0 , 4 , move 3 - ua , 4 / 3 
[22322] c:0 is:( move ul + ul , ua ; move ul , 4 ; move 2 - ua , 4 )  decode:( move 2 , 0 ; move ua - ul , 8 ) 
[22323] c:0 is:( loop 0 , 5 , move v0 - ul , v0 ; move v0 , 3 )  decode:loop 0 , 4 , move 3 , 0 - 9 
[22324] c:0 is:( move ua , 2 ; move ul / ua , 4 ; move 2 - ua , ul )  decode:( move ua , 2 ; move 4 , 5 ) 
[22325] c:0 is:( loop 0 , 6 , move v0 , ua - 3 ; move v0 , v0 )  decode:( move 6 , 9 ; move ul - ua , 7 ) 
[22326] c:0 is:( loop 0 , 5 , move v0 , 2 * v0 ; move ul , v0 )  decode:loop 0 , 4 , move 4 - ua , v0 - 4 
[22327] c:0 is:( move ua , ul ; move 3 , ul ; move 4 + 3 , ua * ua )  decode:loop 0 , 3 , move ua - v0 , ua * ua 
[22328] c:0 is:( move 2 , ul ; move ul - ua , 4 ; move ul + ul , 3 )  decode:( move 2 , ul ; move ua + ul , 4 ) 
[22329] c:0 is:( move 0 , 3 / ua ; move ua , ul ; move ul - 4 , ul )  decode:( move ua , 9 / ua ; move 3 , 4 ) 
[22330] c:0 is:( loop 0 , 6 , move ul , v0 + 3 ; move v0 , v0 )  decode:loop 0 , 4 , move v0 - 4 , 0 - 3 
[22331] c:0 is:( loop 0 , 6 , move 3 - v0 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move 3 , v0 - 3 
[22332] c:0 is:( loop 0 , 4 , move v0 , v0 / ua ; move v0 , 4 )  decode:loop 0 , 3 , move 3 , v0 * v0 
[22333] c:0 is:( v0 = 4 + 3 ; move ul , v0 ; move v0 , v0 )  decode:( move 2 , ul / 4 ; move ua , 7 ) 
[22334] c:0 is:( move ul , 2 ; move ua / 2 , ul ; move ua / 2 , ul )  decode:( move 4 , 3 ; move 3 , ul ) 
[22335] c:0 is:( move ua , ua - ul ; move ua , ul - 3 ; move 4 , 4 )  decode:0 0 loop 0 , 3 , move ua , 0 - 3 
[22336] c:0 is:( move 3 , ul ; move ua - ul , ul ; move ul , 3 * 2 )  decode:( move 3 , ul ; move ua , ul ) 
[22337] c:0 is:( loop 0 , 6 , move v0 , ul + v0 ; move v0 , 4 )  decode:loop 0 , 4 , move v0 + 4 , ua / 3 
[22338] c:0 is:( loop 0 , 4 , move 2 , ul ; loop 1 , 0 , move 3 , ua )  decode:loop 0 , 4 , move v0 + ul , ul 
[22339] c:0 is:( ( move ua , 0 ; move 3 , ul ) ; move ua - ul , ul )  decode:( move ua , ul ; move ua + ul , 5 ) 
[22340] c:0 is:( move ul / 4 , ul ; move ua , ua * ua ; move 2 , 2 )  decode:( move ua , 9 ; move 2 , ua * ua ) 
[22341] c:0 is:( move ua - ul , 2 ; move 3 , ul ; move ua , ua / 4 )  decode:loop 0 , 3 , move ua - 2 , 0 - 8 
[22342] c:0 is:( move 3 , 3 ; move ua , 4 + ul ; move ul / ua , ua )  decode:( move 3 , 3 ; move ua , 5 ) 
[22343] c:0 is:( loop 0 , 6 , move v0 , 2 ; move ul , v0 * v0 )  decode:loop 0 , 4 , move v0 - ua , 9 / 3 
[22344] c:0 is:( move 2 , ua - 2 ; loop 0 , 3 , move v0 , ul - 2 )  decode:loop 0 , 4 , move ul , 4 * 4 - v0 
[22345] c:0 is:( loop 0 , 5 , move v0 , 3 / v0 ; move ua , v0 )  decode:loop 0 , 4 , move ua - 4 , 4 * * 3 
[22346] c:0 is:loop 0 , 3 , ( move v0 , ul / 4 ; move v0 , v0 )  decode:loop 0 , 3 , move 2 , ua / v0 / 2 
[22347] c:0 is:( move ul , ua - 3 ; move 4 , ul ; move ul - ua , 3 )  decode:( move 4 , 4 ; move ua + 4 , ul ) 
[22348] c:0 is:( move ul , 3 + 2 ; move ua , 4 / ua ; move ul , ul )  decode:( move 2 , 9 ; move ua , 2 / 3 ) 
[22349] c:0 is:( loop 0 , 5 , move 4 , v0 ; move ul - v0 , v0 )  decode:loop 0 , 4 , move 2 - ua , v0 + 8 
[22350] c:0 is:( loop 0 , 6 , move v0 , v0 - ul ; move 3 , v0 )  decode:loop 0 , 4 , move ua - 2 , 0 - 2 
[22351] c:0 is:( move ua - ul , 4 + ul ; move 4 , ul ; move 2 , ul )  decode:( move ua , 9 ; move ua , 2 - 3 ) 
[22352] c:0 is:( move ua , ua + ul ; move 4 / ua , ul ; move 4 , 2 )  decode:( move ua , ul ; move 4 , 4 * 4 ) 
[22353] c:0 is:( move ul , 2 + ul ; move ul , 4 ; move ua - ul , 4 )  decode:( move 2 , ua / 4 ; move ua , 4 ) 
[22354] c:0 is:( move 2 , ul ; loop 0 , 6 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 4 , 4 + v0 / 2 
[22355] c:0 is:( move ul , 3 ; move ul - ua , ul / 2 ; move 2 , ul )  decode:( move 2 , 2 / 5 ; move ua , 4 ) 
[22356] c:0 is:( move ua , 2 ; ( move ua , 3 ; move ua + ul , ul ) )  decode:( move ua + 3 , 2 ; move 9 , 4 ) 
[22357] c:0 is:( move 4 , ua ; loop 0 , 5 , move v0 , v0 * v0 )  decode:( move ua , 0 ; move ua , 4 * 4 ) 
[22358] c:0 is:( loop 0 , 6 , move ul , v0 * 2 ; move v0 , v0 )  decode:loop 0 , 4 , move v0 + ul , 0 - 9 
[22359] c:0 is:( move ua + ul , 4 - ul ; loop 0 , 4 , move ul , ul )  decode:( move 4 + 3 , 3 ; move 2 , 4 ) 
[22360] c:0 is:( move 4 , ua - 2 ; loop 0 , 2 , move 2 + ul , v0 )  decode:( move ua , 0 - 2 ; move 3 , ul ) 
[22361] c:0 is:( move ua , ua - ul ; move 2 , 4 ; move ua , 4 / ua )  decode:loop 0 , 4 , move 3 + v0 , ua / 4 
[22362] c:0 is:( loop 0 , 4 , move v0 , v0 / 4 ; move v0 , ua )  decode:( move 2 , 2 / 7 ; move ua , ul ) 
[22363] c:0 is:( loop 0 , 6 , move ul , v0 + 4 ; move v0 , v0 )  decode:( move ua , 0 - 3 ; move 4 , 9 ) 
[22364] c:0 is:( move ua , ul ; move 2 / ua , ul ; move 3 * 2 , ul )  decode:( move ua , ul ; move 7 , 2 ) 
[22365] c:0 is:( move 3 , ua + ua ; move ua , ua / 4 ; move 4 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[22366] c:0 is:( loop 0 , 6 , move 2 , v0 ; move ul , v0 * v0 )  decode:- - loop 0 , 4 , move 3 , 4 / v0 
[22367] c:0 is:( move 4 + ul , ua + ul ; loop 0 , 5 , move ul , ul )  decode:( move ua - ul , ul ; move ua , 2 ) 
[22368] c:0 is:( loop 0 , 5 , move v0 , v0 - 4 ; move ul , v0 )  decode:( move 3 , 0 ; move ua + ul , 2 ) 
[22369] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ul , 4 / v0 )  decode:loop 0 , 4 , move v0 - 2 , 0 - 2 
[22370] c:0 is:( move ul , 3 + 3 ; move 3 , ul ; move ua , ul / ua )  decode:( move 9 , 4 ; move 4 - ua , 8 ) 
[22371] c:0 is:( loop 0 , 6 , move v0 , 2 ; move v0 , ua / v0 )  decode:loop 0 , 4 , move 0 - 4 , 4 
[22372] c:0 is:( move ul , ua / 2 ; move 3 , ua + ul ; move 4 , ul )  decode:loop 0 , 4 , move 2 , v0 - 9 
[22373] c:0 is:( loop 0 , 5 , move v0 + ul , 2 ; move ua , 2 + 2 )  decode:0 loop 0 , 3 , move ua , 0 - 4 
[22374] c:0 is:( move 2 , ul / 3 ; move ul , ul ; move 3 - ua , ua )  decode:( move 2 , 2 / 6 ; move 3 , 4 ) 
[22375] c:0 is:( loop 0 , 6 , move 3 , v0 ; move v0 , v0 - ul )  decode:loop 0 , 4 , move 5 , 0 - 4 
[22376] c:0 is:( move ul , ul ; move ua , ua + 4 ; move 2 , ul / 3 )  decode:( move 2 , 4 ; move 8 , 4 ) 
[22377] c:0 is:( move ua , 4 ; loop 0 , 5 , move v0 , v0 * v0 )  decode:( move ua + 3 , 4 ; move 4 , 8 ) 
[22378] c:0 is:( move 2 , 4 / ua ; move ua - ul , ul ; move ua , 3 )  decode:( move ua , 0 - 4 ; move ua , 3 ) 
[22379] c:0 is:( move ul - 4 , ul ; move ul , ua + 3 ; move ua , 4 )  decode:( move 4 , ul ; move ua , 7 ) 
[22380] c:0 is:( move 2 , 4 ; move ua , ul / ua ; move 3 - ul , ul )  decode:( move ua , 4 ; move 3 , 2 - 3 ) 
[22381] c:0 is:( move 4 , ul ; move 3 , ul - 4 ; move ua + ul , ul )  decode:( move 4 , 0 - 4 ; move 3 , 4 + 0 0 0 0 4 3 + 3 
[22382] c:0 is:( move 3 - ul , ul ; move 2 , ul ; move ua , ua / 4 )  decode:( move 3 , ul ; move ua + ul , 8 ) 
[22383] c:0 is:( loop 0 , 6 , move v0 - ul , v0 ; move v0 , 4 )  decode:loop 0 , 4 , move 4 , v0 + 3 
[22384] c:0 is:( move 4 + ul , ua - 4 ; move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move 2 , 4 + 4 / 4 
[22385] c:0 is:( move ua , ul ; move 3 , ul / 4 ; move ua - ul , 2 )  decode:( move 5 , ul / 4 ; move 9 , ul ) 
[22386] c:0 is:( loop 0 , 5 , move ul , 4 * v0 ; move v0 , v0 )  decode:( move ul - ua , 0 ; move 3 , 6 ) 
[22387] c:0 is:( move 4 + ul , 0 - ua ; loop 0 , 4 , move v0 , 3 )  decode:( move ua , 0 ; move 4 , 4 * 4 ) 
[22388] c:0 is:( move 4 , ua ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move ua + ul , 0 ; move 7 , 9 ) 
[22389] c:0 is:( move 3 , ul + ul ; loop 0 , 4 , move ul , ul / ua )  decode:( move 4 , 2 ; move 2 , 2 / 4 ) 
[22390] c:0 is:( loop 0 , 6 , move v0 , 3 * v0 ; move ul , v0 )  decode:( move ua , ul ; move ua + ul , 4 ) 
[22391] c:0 is:( move 4 , ul ; move ua , ul - 3 ; move ua - 4 , ul )  decode:( move ua + 3 , 3 ; move 4 , ul ) 
[22392] c:0 is:( move ua , ul / 2 ; move ul / 2 , ul ; move 2 , ul )  decode:( move 3 , 2 / 4 ; move ua , 2 ) 
[22393] c:0 is:( move 3 , ul ; move 4 , ul / ua ; move 2 - ua , ul )  decode:( move 3 , 9 / 4 ; move ua , 2 ) 
[22394] c:0 is:( loop 0 , 6 , move 2 / v0 , v0 ; move ul , v0 )  decode:loop 0 , 3 , move 3 , v0 + 4 
[22395] c:0 is:( loop 0 , 6 , move ul - v0 , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[22396] c:0 is:( move ul , 4 + 4 ; move 3 , ul + ul ; move ul , ul )  decode:loop 0 , 3 , move v0 - 3 , 3 / 4 
[22397] c:0 is:( ( move 2 , ua ; move ua , ul ) ; move ua - ul , 3 )  decode:( move 3 , 0 ; move ua + ul , 4 ) 
[22398] c:0 is:( move 4 , ul ; loop 0 , 5 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 3 , v0 * 9 
[22399] c:0 is:( loop 0 , 6 , move ul - v0 , 4 ; move v0 , v0 )  decode:loop 0 , 3 , move v0 - ua , 0 - 9 
[22400] c:0 is:( move ul , 3 ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move 4 , 9 ; move 9 , 7 + 4 ) 
[22401] c:0 is:( move 4 , 4 ; move ul / 2 , ul + ul ; move ua , ua )  decode:( move 4 , 4 ; move ua , 2 ) 
[22402] c:0 is:( move 4 , ul ; move 3 - ua , ul ; move ua , ua / 3 )  decode:( move ua + 2 , ul ; move ua , 4 ) 
[22403] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ul - 4 , v0 )  decode:loop 0 , 4 , move 4 , 0 - 4 - v0 
[22404] c:0 is:( loop 0 , 5 , move ul , v0 ; move v0 , 3 / v0 )  decode:( move ul , 4 ; move ua - ul , 4 ) 
[22405] c:0 is:( loop 0 , 5 , move v0 , v0 * 4 ; move v0 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 - 4 
[22406] c:0 is:( move 4 , 3 - ul ; move ul , ul ; move 3 , ua - ul )  decode:( move 3 , 2 ; move 4 , 2 / ua ) 
[22407] c:0 is:( loop 0 , 5 , move v0 , ul ; move 4 , v0 * v0 )  decode:loop 0 , 4 , move 3 - ua , v0 + 5 
[22408] c:0 is:( move ua , ul / ua ; move ua , 4 ; move 4 , 3 + ul )  decode:loop 0 , 3 , move ul - ua , v0 + 9 
[22409] c:0 is:( loop 0 , 5 , move ul , 4 ; move v0 , v0 * v0 )  decode:( move 2 , 9 ; move ua - 2 , 4 ) 
[22410] c:0 is:( ( move ul , ul ; move 2 , ua * ua ) ; move ua , 2 )  decode:( move 2 , 9 ; move ua , 0 - 2 ) 
[22411] c:0 is:( move 3 + ul , ul ; move 4 , ua * ua ; move ul , 4 )  decode:( move 4 , ul ; move 4 , ua * ua ) 
[22412] c:0 is:( move 2 , ul / 3 ; move ul - 4 , ul ; move ua , ua )  decode:( move 3 , 2 / 5 ; move 5 , 3 ) 
[22413] c:0 is:( move ua , 4 ; move ul , ua ; move ul + ul , 4 * 3 )  decode:( move ua , 4 ; move 3 , 4 * 3 ) 
[22414] c:0 is:( loop 0 , 6 , move 4 , v0 ; move ua / v0 , v0 )  decode:loop 0 , 4 , move ua - ul , 3 * 4 
[22415] c:0 is:( loop 0 , 6 , move v0 , v0 * 4 ; move v0 , ul )  decode:0 loop 0 , 4 , move 0 - 4 , 0 - 7 
[22416] c:0 is:( loop 0 , 5 , move 2 + ul , ul - 4 ; move v0 , 0 )  decode:loop 0 , 4 , move 3 , 4 + 4 4 * 4 
[22417] c:0 is:( move ua , ul ; ( move ua , 2 ; move 2 , ul / ua ) )  decode:( move ua + ul , ul ; move 8 , 2 ) 
[22418] c:0 is:( loop 0 , 2 , loop 1 , 2 , move ul , ul ; move 2 , 4 )  decode:( move 2 , 2 ; move 3 , 4 ) 
[22419] c:0 is:( move ua , ua ; ( move ul , 2 ; move 4 + ul , ul ) )  decode:( move ua , 0 ; move ul - ua , ul ) 
[22420] c:0 is:( move ul , 2 / ua ; move ua , ul ; move 4 , ua / 3 )  decode:( move 4 , 4 / 3 ; move ua , 2 ) 
[22421] c:0 is:( move ua , ul ; ( move ua , 3 ; move 3 - ua , ul ) )  decode:( move ua + ul , ul ; move ua , 3 ) 
[22422] c:0 is:( loop 0 , 5 , move v0 , ul / 4 ; move v0 , v0 )  decode:( move 3 , ul ; move ua + 4 , 2 ) 
[22423] c:0 is:( loop 0 , 6 , move v0 , v0 / 3 ; move v0 , ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - 8 
[22424] c:0 is:( move ua , ul / ua ; loop 0 , 5 , move 4 , ul - ua )  decode:loop 0 , 4 , move 4 + v0 , 2 ) 
[22425] c:0 is:( loop 0 , 5 , move v0 , v0 / 4 ; move v0 , ul )  decode:loop 0 , 4 , move 3 , 3 + 4 - v0 
[22426] c:0 is:( move ua , 4 * 3 ; move ul , ul ; move 4 , ua * ua )  decode:( move ua , 4 * 3 ; move 4 , 9 ) 
[22427] c:0 is:( loop 0 , 6 , move v0 / 3 , v0 ; move v0 , ul )  decode:( move 3 , ua / 4 ; move 7 , 8 ) 
[22428] c:0 is:( move ul , 2 / ua ; move ua , ua / 3 ; v0 = ua )  decode:( move ul , 2 / 6 ; move ua , 2 ) 
[22429] c:0 is:( move 3 , ul ; ( move ua , ua - ul ; move ua , 3 ) )  decode:loop 0 , 4 , move 4 , 0 - v0 
[22430] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , ul / 4 )  decode:( move 3 , ul - 4 ; move 8 , 2 ) 
[22431] c:0 is:( loop 0 , 6 , move v0 , 4 ; move v0 , v0 / ua )  decode:loop 0 , 4 , move 4 , v0 + 2 
[22432] c:0 is:( move ul , 3 + ul ; move ul , ul ; move 4 , 3 / ua )  decode:( move 2 , 0 - 4 ; move 4 , 5 ) 
[22433] c:0 is:( loop 0 , 5 , move v0 , ul / v0 ; move 4 , v0 )  decode:( move 4 , 4 ; move  2 , 4 + v) 0 
[22434] c:0 is:( loop 0 , 6 , loop 1 , 0 , move 3 , 2 ; move ua , ul )  decode:loop 0 , 4 , move 2 - ua , 4 - v0 
[22435] c:0 is:( move ul , 3 + 3 ; loop 0 , 2 , move 4 , ul + v0 )  decode:( move 4 , 4 + 3 ; move 5 , 2 ) 
[22436] c:0 is:( ( move ua , 4 + ul ; move ua , ul ) ; move ua , 3 )  decode:( move 8 , 9 ; move ua + ul , ua ) 
[22437] c:0 is:( loop 0 , 3 , move ua , 4 ; loop 1 , 2 , move 3 , ul )  decode:loop 0 , 3 , move 4 + 3 , 4 
[22438] c:0 is:( move ua , ul + ul ; move 4 , ul ; move 4 , ua / 4 )  decode:( move 8 , 3 ; move ua , ua / 4 ) 
[22439] c:0 is:( move ua + ul , 0 ; loop 0 , 5 , move 4 / v0 , 2 )  decode:loop 0 , 4 , move 4 , 0 - v0 
[22440] c:0 is:( loop 1 , 5 , move 4 , v1 ; move v1 - ua , v1 )  decode:loop 0 , 4 , move ua - ul , 0 - 9 
[22441] c:0 is:( v0 = ul ; loop 1 , 5 , move ul - ua , ua * ua )  decode:loop 0 , 4 , move 0 - ua , ua * ua 
[22442] c:0 is:( loop 0 , 4 , move v0 - 2 , 2 - ul ; move 3 , ul )  decode:( move 2 , 4 ; move 5 , ul ) 
[22443] c:0 is:( move ul - ua , ul ; ( move 3 , 2 ; move ul , ul ) )  decode:( move 2 - ua , ul ; move 4 , ul ) 
[22444] c:0 is:( move 3 , ul / ua ; move ua , 4 ; move ul , ul / 2 )  decode:( move 3 , ul ; move ua + ul , 4 ) 
[22445] c:0 is:( move ua , ul / ua ; move ul , 4 ; move ua / 4 , 2 )  decode:( move 2 , 2 ; move ua , 4 / ua ) 
[22446] c:0 is:( move 3 , ua * 3 ; move ul , ul ; move ua , ul / 4 )  decode:( move 3 , 0 ; move 8 , ul ) 
[22447] c:0 is:( move ul , ul ; move ua , 2 / 4 ; move ul - 4 , ul )  decode:( move ua , 3 / 2 ; move 3 , 4 ) 
[22448] c:0 is:( ( move ua , ua ; move 4 , 2 ) ; move ua , ul / ua )  decode:( move ua , 0 ; move 3 + ua , 2 ) 
[22449] c:0 is:( move 4 , ua * ua ; move ua , 3 / ua ; v0 = ul )  decode:( move 4 , 8 ; move ua , 4 / ua ) 
[22450] c:0 is:( move ul , ul ; move ua , 4 / 3 ; move 4 , ul + ul )  decode:( move ua , 0 - 4 ; move 4 , 2 ) 
[22451] c:0 is:( move 4 - ul , ul / ua ; loop 0 , 5 , move ul , ul )  decode:loop 0 , 4 , move 2 , 4 * v0 
[22452] c:0 is:( move ua , ul ; ( move ul , 3 ; move ul - ua , 4 ) )  decode:( move ua , ul ; move 5 , 9 ) 
[22453] c:0 is:( move 4 + ul , 0 ; loop 0 , 5 , move v0 , 3 / ua )  decode:loop 0 , 3 , move 4 , v0 * 9 
[22454] c:0 is:( ( move ua - ul , ua ; move ul , ul ) ; move 4 , 3 )  decode:( move ul - ua , 3 ; move 3 , 4 ) 
[22455] c:0 is:( move ua , ul ; ( move ul , ul ; move 3 , ul - 3 ) )  decode:( move 3 , 0 ; move ua + ul , ul ) 
[22456] c:0 is:( ( move ua , ua ; move 3 , ul ) ; move ua , 4 / ua )  decode:( move 8 , 0 ; move ua + 2 , 8 ) 
[22457] c:0 is:( move ul , 3 / ua ; loop 0 , 4 , move v0 , 2 - 3 )  decode:loop 0 , 4 , move 2 , v0 + 4 
[22458] c:0 is:( move ua , ul / 3 ; loop 0 , 3 , move 2 , 4 - v0 )  decode:( move 3 , 4 / ua ; move ua , 4 ) 
[22459] c:0 is:( ( move 4 , ua ; move ul , ul ) ; move ua , ua / 3 )  decode:( move ua , 0 ; move ua , 4 * 4 ) 
[22460] c:0 is:( loop 0 , 6 , move 2 , 4 - ul ; move 2 , ua - v0 )  decode:loop 0 , 4 , move 4 - ua , v0 + 4 
[22461] c:0 is:( move ua , 3 ; loop 0 , 5 , move 4 - ua , 2 * v0 )  decode:loop 0 , 3 , move ul - ua , 3 + v0 
[22462] c:0 is:( ( move ul - ua , ul ; move 4 , ul ) ; move 3 , ul )  decode:loop 0 , 4 , move 3 , ul - v0 
[22463] c:0 is:( move 2 + ul , 4 ; loop 0 , 5 , move v0 - 3 , ul )  decode:loop 0 , 3 , move 3 , v0 - 4 
[22464] c:0 is:( ( move ul , ua * ua ; move ua , ul ) ; move 4 , 4 )  decode:( move ua , 9 ; move 4 , 4 ) 
[22465] c:0 is:( move ul - 4 , ua ; ( move ul , 4 ; move ua , ul ) )  decode:( move 3 , 2 ; move ua + ul , 5 ) 
[22466] c:0 is:( ( move ua , ua ; move ul / 3 , ul ) ; move 4 , ul )  decode:( move ua , 0 ; move 4 , 2 ) 
[22467] c:0 is:( move ua , 3 - ua ; loop 0 , 5 , move v0 / 2 , 4 )  decode:( move 3 , ua / 4 ; move ua , 3 ) 
[22468] c:0 is:( move 4 + ul , ul - 4 ; loop 0 , 5 , move 2 , v0 )  decode:( move 3 , 5 ; move ua , 0 - 4 ) 
[22469] c:0 is:( move 4 , ua + 2 ; loop 0 , 6 , move ul , v0 / 2 )  decode:( move ua , 2 ; move 3 , 9 ) 
[22470] c:0 is:( move 3 , ul - 3 ; loop 0 , 3 , move ul , 4 * v0 )  decode:( move 2 , ul - 3 ; move 4 , 4 ) 
[22471] c:0 is:( ( move 3 , ul ; move ul , ul ) ; move ua , ul / 3 )  decode:( move 3 , ul ; move ua , 4 / 3 ) 
[22472] c:0 is:( move 3 + ul , ua - 4 ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move v0 * 2 , 0 - 9 
[22473] c:0 is:( move 2 , ul ; loop 2 , 6 , move v2 , v2 + v2 )  decode:loop 0 , 4 , move 4 , 4 + v0 + 4 
[22474] c:0 is:( move ul , 2 - 4 ; loop 0 , 6 , move 3 , ul + v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[22475] c:0 is:( move ul , 4 + 2 ; loop 0 , 6 , move v0 - 3 , ul )  decode:loop 0 , 4 , move 4 - ua , 9 - v0 
[22476] c:0 is:( move 4 , 3 ; loop 0 , 6 , move ua - v0 , 3 + ul )  decode:loop 0 , 4 , move ua , 4 * 4 
[22477] c:0 is:( move 3 - ul , ul ; loop 0 , 5 , move 3 - v0 , 4 )  decode:loop 0 , 3 , move 3 - ua , 2 + v0 
[22478] c:0 is:( move ua + 3 , 4 ; loop 0 , 6 , move ul , v0 - 4 )  decode:( move ua + 3 , 4 ; move 3 , 4 ) 
[22479] c:0 is:( move ul / 4 , 3 + ul ; loop 0 , 5 , move 2 , v0 )  decode:loop 0 , 4 , move 3 - v0 , 0 - 2 
[22480] c:0 is:( loop 0 , 6 , move 4 - v0 , ul ; move 2 , 3 - ul )  decode:( move 5 , ul ; move ua , 5 / 4 ) 
[22481] c:0 is:( loop 0 , 3 , move 4 , 4 ; move 2 , ua ; v1 = ul )  decode:loop 0 , 3 , move 2 + 3 , 4 * 3 
[22482] c:0 is:( v0 = ul - 3 ; loop 1 , 3 , move v0 - ua , 4 )  decode:loop 0 , 3 , move 0 - 8 , 4 
[22483] c:0 is:( move ul , 4 ; v0 = 2 ; loop 1 , 4 , move 2 , ul )  decode:loop 0 , 3 , move 3 - ua , 4 / 5 
[22484] c:0 is:( ( move ua , ua ; move ul , ul ) ; move 4 , ul / 4 )  decode:( move ua , 0 ; move 5 , 4 / 3 ) 
[22485] c:0 is:( move ua , ul ; ( move ul , ua / 4 ; move 4 , ul ) )  decode:( move ua , ul ; move 5 , 9 ) 
[22486] c:0 is:( move ul , 2 ; loop 0 , 5 , move v0 - ua , 4 / 3 )  decode:loop 0 , 4 , move 4 + v0 , 0 - 9 
[22487] c:0 is:( v0 = 4 + ul ; loop 1 , 6 , move ua - 2 , v0 )  decode:loop 0 , 4 , move 4 + v0 , ua / 5 
[22488] c:0 is:( move ul , 4 * 3 ; loop 0 , 5 , move ul , 4 + v0 )  decode:( move 3 , ul - 4 ; move 3 , 2 ) 
[22489] c:0 is:( move 3 , 4 + 3 ; loop 0 , 5 , move ul / v0 , ul )  decode:( move 3 , 4 + 3 ; move 3 , 4 ) 
[22490] c:0 is:( move ul - 4 , 4 + ul ; loop 0 , 5 , move 4 , v0 )  decode:loop 0 , 3 , move 5 , v0 - 5 
[22491] c:0 is:( v1 = 0 ; loop 2 , 6 , move 2 - ua , ua - v2 )  decode:loop 0 , 4 , move 0 - ua , 0 - v0 
[22492] c:0 is:loop 0 , 5 , ( move v0 + ul , ua / 4 ; v1 = 2 )  decode:loop 0 , 4 , move 4 , 0 - v0 * 2 
[22493] c:0 is:( v0 = 4 / ua ; loop 1 , 3 , move ua - v0 , 4 )  decode:loop 0 , 3 , move ua - v0 , 4 
[22494] c:0 is:( v0 = ua * 3 ; loop 1 , 6 , move 3 , ua * v0 )  decode:loop 0 , 4 , move 4 , 4 * 9 
[22495] c:0 is:( v0 = 4 + ul ; loop 1 , 6 , move ua , v0 / 2 )  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[22496] c:0 is:( v0 = ul / 2 ; loop 1 , 5 , move ua , v0 * 3 )  decode:loop 0 , 4 , move ua + ul , 0 - 8 
[22497] c:0 is:( v0 = ul / 3 ; loop 1 , 5 , move 4 , ul + v0 )  decode:loop 0 , 4 , move 5 , 4 / 3 
[22498] c:0 is:( loop 0 , 4 , move 4 , 4 ; move 4 , ul ; v1 = ul )  decode:loop 0 , 4 , move 2 - ua , v0 - 4 
[22499] c:0 is:( v0 = ul / 4 ; loop 1 , 6 , move ua , v0 - 3 )  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[22500] c:0 is:( move ua , ul ; move 0 - 3 , ul ; move ua , ua + ua )  decode:( move ua + ul , ul ; move 4 , ul ) 
[22501] c:0 is:( move ul - ua , ua ; move ul , 0 - ul ; move ua , 2 )  decode:( move ua , 0 ; move 5 , 0 - 4 ) 
[22502] c:0 is:( move ua + 2 , ua ; move ul , ul ; move ua + 2 , ul )  decode:( move 9 , 0 ; move ua + 3 , 2 ) 
[22503] c:0 is:( move ua , ua + ul ; loop 0 , 2 , move ua , ua * ua )  decode:loop 0 , 3 , move 0 - ua , 0 - 8 
[22504] c:0 is:( move 0 - ua , ua ; move ua , ul ; move 2 / ua , ua )  decode:( move ua , 0 - 3 ; move 7 , ul ) 
[22505] c:0 is:loop 0 , 2 , ( move ul , v0 ; move ua + v0 , v0 )  decode:( move 8 , 0 ; move ua + 2 , 2 ) 
[22506] c:0 is:( move 2 , ua - 2 ; move ul , ua * ua ; move ua , ua )  decode:( move 2 , 2 - 3 ; move 8 , 5 ) 
[22507] c:0 is:( move ua , ua ; move ua , ua * ua ; move 2 , ua + 4 )  decode:( move ua , 0 ; move ua , ua * ua ) 
[22508] c:0 is:loop 0 , 2 , ( move ul , v0 ; move v0 - ua , v0 )  decode:( move ua , ua / 2 ; move 5 , ua ) 
[22509] c:0 is:( move ua , ua * ua ; move 2 , ua + 3 ; move ua , ul )  decode:( move ua , 9 + 5 ; move 7 , 4 ) 
[22510] c:0 is:( move 2 + ul , ul ; move ul , ul ; move 0 - ua , ul )  decode:( move 5 , 3 ; move 4 , 4 / 3 ) 
[22511] c:0 is:( move ua , ua ; move 0 - ua , ul - ua ; move 4 , ul )  decode:loop 0 , 3 , move ul - ua , ul - v0 
[22512] c:0 is:loop 0 , 3 , ( move v0 , ul ; move v0 + ua , v0 )  decode:( move ua + 3 , 3 ; move 9 , 2 ) 
[22513] c:0 is:loop 0 , 2 , ( move ul , v0 ; move ua - v0 , v0 )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[22514] c:0 is:( move ua , ul ; move ul , 0 ; move 3 - ua , ua * ua )  decode:( move ua , ul ; move 3 , 7 ) 
[22515] c:0 is:( loop 0 , 3 , move ua , v0 + ul ; move v0 , v0 )  decode:loop 0 , 3 , move ua , ul + v0 
[22516] c:0 is:( move ua , 3 ; move ua - ul , ua + 2 ; move ua , ul )  decode:loop 0 , 3 , move ua - v0 , 3 - 3 
[22517] c:0 is:( move ul - ua , ua ; move 0 , ul ; move 3 , ua * ua )  decode:( move ul - ua , 0 ; move 3 , 7 ) 
[22518] c:0 is:loop 0 , 3 , ( move ua + v0 , v0 ; move v0 , ul )  decode:loop 0 , 3 , move ua + v0 , 2 * 3 
[22519] c:0 is:( move 3 - ua , ua * ua ; move ua , ul ; move ul , 0 )  decode:( move 3 , 5 ; move ua + ul , ul ) 
[22520] c:0 is:( move ua , 2 ; move 2 + ul , ul ; move ua , ua * ua )  decode:( move 7 , 2 ; move ua , ua * ua ) 
[22521] c:0 is:loop 0 , 2 , ( move ul - ua , v0 ; move v0 , v0 )  decode:( move 5 , 0 ; move ul - ua , ul ) 
[22522] c:0 is:loop 0 , 3 , ( move ua , v0 ; move v0 - ul , v0 )  decode:loop 0 , 3 , move ua , v0 * v0 
[22523] c:0 is:( move 2 , ua * ua ; move ul , 2 ; move ua + ul , ul )  decode:( move 2 , 4 ; move ua + 2 , 4 ) 
[22524] c:0 is:( move 4 , 0 ; move ua , ua - ul ; move ul , ua * ua )  decode:( move 3 + 4 , 0 ; move 4 , ul ) 
[22525] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 + ul , v0 )  decode:loop 0 , 4 , move 2 , v0 + v0 
[22526] c:0 is:( move 0 , ul ; move ua , ua * ua ; move ul , 4 + ul )  decode:( move ua , 9 ; move ua , 2 ) 
[22527] c:0 is:( loop 0 , 4 , move ul , v0 ; move ua + v0 , v0 )  decode:( move 2 , 0 ; move ua + 3 , 4 ) 
[22528] c:0 is:( move ua + ul , ul ; move ua , 2 ; move 3 + ul , ul )  decode:( move 9 , ul ; move ua , 2 ) 
[22529] c:0 is:( loop 0 , 4 , move ul + v0 , v0 ; move ua , v0 )  decode:0 loop 0 , 3 , move v0 - ua , 3 
[22530] c:0 is:loop 0 , 3 , ( move ul - ua , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 2 - ua , v0 / 2 
[22531] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 + ua , v0 )  decode:( move 4 , 4 ; move 9 , 3 ) 
[22532] c:0 is:loop 0 , 3 , ( move v0 , v0 + v0 ; move ul , ul )  decode:loop 0 , 3 , move ua - 4 , v0 * 4 
[22533] c:0 is:loop 0 , 3 , ( move v0 , ua - ul ; move v0 , v0 )  decode:( move 2 , 0 ; move 4 , 0 - 2 ) 
[22534] c:0 is:( move ul , 0 + ul ; move ua , ul ; move ua - ul , 4 )  decode:( move 7 , 2 ; move ua - ul , 4 ) 
[22535] c:0 is:( move ua , ua + ua ; move ua / 3 , ul ; move ua , 2 )  decode:loop 0 , 4 , move 3 , v0 
[22536] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 - ua , ul )  decode:loop 0 , 3 , move ua + v0 , 4 * 4 
[22537] c:0 is:( move ua , ua * ua ; move ua , ul ; move 2 , 2 - ul )  decode:( move 9 , 8 ; move ua + 2 , ul ) 
[22538] c:0 is:( move ua , 4 - ua ; move ua , ua * ua ; move ua , 2 )  decode:0 loop 0 , 3 , move ua , 4 / v0 
[22539] c:0 is:( move ua , ua + 4 ; move 2 , ua * ua ; move ua , ul )  decode:( move ua + ul , 4 ; move ua , 5 ) 
[22540] c:0 is:( move ua , ul - ua ; move ul , 3 ; move ua + 2 , ul )  decode:( move ua , ul ; move ua + 2 , 4 ) 
[22541] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ul + v0 , v0 )  decode:loop 0 , 4 , move 2 , 4 + v0 
[22542] c:0 is:loop 0 , 3 , ( move v0 , ul ; move v0 - ua , v0 )  decode:loop 0 , 4 , move 0 - 5 , 4 * 3 
[22543] c:0 is:loop 0 , 3 , ( move v0 + v0 , ul ; move v0 , ul )  decode:loop 0 , 3 , move 3 , 3 / v0 
[22544] c:0 is:( move ua , ua - ul ; move ua , 2 ; move ua + ul , 4 )  decode:( move 9 , ul ; move ua + 3 , 4 ) 
[22545] c:0 is:loop 0 , 3 , ( move v0 - ua , v0 ; move ul , v0 )  decode:loop 0 , 4 , move 5 , v0 - v0 
[22546] c:0 is:( loop 0 , 4 , move v0 + v0 , ul ; move ua , v0 )  decode:loop 0 , 4 , move 2 - ua , v0 + ul 
[22547] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 , ua - ul )  decode:loop 0 , 4 , move 0 - v0 , 0 - 7 
[22548] c:0 is:( move ua , 0 ; move ul , ua + ul ; move ua , ua / 4 )  decode:loop 0 , 4 , move 3 , 2 * 7 
[22549] c:0 is:( loop 0 , 5 , move v0 , ua - v0 ; move ua , v0 )  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[22550] c:0 is:( move ua , 0 - ul ; move ul , ul - 4 ; move ua , ul )  decode:( move ua , ul / 6 ; move ua , 2 ) 
[22551] c:0 is:( move ul - ua , ul - 3 ; move ua , ul ; move ua , 2 )  decode:( move 9 , 0 - 4 ; move ua , ul ) 
[22552] c:0 is:( move 3 , ua ; move ul , 2 - ul ; move ua + ul , ul )  decode:( move 3 , 0 ; move ua + 2 , 4 ) 
[22553] c:0 is:( move 2 , ua + 2 ; move ua , ul / ua ; move ul , ul )  decode:( move 9 , 0 - 4 ; move ul , ul ) 
[22554] c:0 is:( loop 0 , 4 , move v0 , v0 - ul ; move ua , v0 )  decode:( move ua , 8 ; move 5 , 3 ) 
[22555] c:0 is:( loop 0 , 4 , move v0 , v0 ; move ua , ul - v0 )  decode:( move 3 , 9 ; move ua , 0 - 2 ) 
[22556] c:0 is:( move ul - ua , 0 ; move ul , ul ; move ua / 2 , ul )  decode:( move ul - ua , 0 ; move 4 , 2 ) 
[22557] c:0 is:( loop 0 , 5 , move v0 + ul , v0 ; move ua , v0 )  decode:loop 0 , 4 , move ua , 0 - 9 
[22558] c:0 is:( move ua , 4 / ua ; move 0 - ua , ul ; move ua , ul )  decode:loop 0 , 3 , move v0 - ua , ua / 3 
[22559] c:0 is:( move ua , ua ; move ua - 2 , ul + ul ; move 4 , ul )  decode:loop 0 , 3 , move ua - 2 , v0 * 2 
[22560] c:0 is:( loop 0 , 5 , move v0 , v0 + v0 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 3 * 4 / v0 
[22561] c:0 is:( loop 0 , 4 , move v0 , ua - v0 ; move v0 , ul )  decode:loop 0 , 3 , move 4 - ua , v0 - 3 
[22562] c:0 is:( move 4 , ua ; move 2 , ua * ua ; move ua + ul , ul )  decode:( move 5 , ua * ua ; move 8 , 4 ) 
[22563] c:0 is:( move ul , 4 ; move ua , ul ; move 2 - ua , ua + ul )  decode:( move 4 , 6 ; move ua , ua / 3 ) 
[22564] c:0 is:( move 2 , ua ; move ua , 3 / ua ; move ua , ul + ul )  decode:loop 0 , 3 , move v0 + 2 , ua / 4 
[22565] c:0 is:( move ua , ua ; move ul , ua * ua ; move 4 + ul , 2 )  decode:loop 0 , 4 , move 3 , 0 - v0 * 2 
[22566] c:0 is:( loop 0 , 5 , move ul , v0 + v0 ; move ua , v0 )  decode:( move ua , 2 ; move 4 , 7 * 3 ) 
[22567] c:0 is:( loop 0 , 4 , move ul , v0 ; move v0 - ua , v0 )  decode:( move 3 , 9 ; move 4 , 0 - 3 ) 
[22568] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua , v0 + v0 )  decode:( move 2 , 0 - 4 ; move ua , 2 ) 
[22569] c:0 is:( loop 0 , 5 , move ul + v0 , v0 ; move v0 , ua )  decode:( move 4 - ua , 3 ; move 9 , 7 ) 
[22570] c:0 is:( move ua - ul , ul ; move 3 , 2 ; move ul - ua , ua )  decode:( move 6 , ul ; move 4 , 2 ) 
[22571] c:0 is:( loop 0 , 4 , move v0 , ul ; move ul + v0 , v0 )  decode:loop 0 , 4 , move 4 - ua , 4 * 3 
[22572] c:0 is:( loop 0 , 5 , move v0 , v0 + ul ; move v0 , ua )  decode:( move 4 , 0 - 9 ; move 9 , 2 ) 
[22573] c:0 is:( move ua - 2 , ua ; move ul + ul , 4 ; move ua , ul )  decode:( move 4 , 0 ; move 8 , 5 ) 
[22574] c:0 is:( loop 0 , 5 , move v0 , v0 + v0 ; move ul , ua )  decode:loop 0 , 4 , move v0 - 4 , 0 - 8 
[22575] c:0 is:( move ul , ul + ul ; move ua , ua - 2 ; move 3 , ul )  decode:( move 2 + 3 , ul ; move 3 , ul ) 
[22576] c:0 is:( loop 0 , 4 , move v0 + v0 , ul ; move v0 , ul )  decode:loop 0 , 3 , move 4 , 3 / v0 
[22577] c:0 is:( move 2 + ul , ua ; move ul , ua * ua ; move 3 , ul )  decode:( move 3 , 0 ; move 4 , 9 ) 
[22578] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 - ua , v0 )  decode:( move 2 , 3 ; move ua , ul ) 
[22579] c:0 is:( move 2 , ua ; move ul - ua , ua - ul ; move 3 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 - 3 
[22580] c:0 is:( move ua , ul + ul ; move ua , ul ; move ua , 4 + 4 )  decode:( move 9 , ul / ua ; move ua , 8 ) 
[22581] c:0 is:( loop 0 , 4 , move v0 , v0 * v0 ; move ua , ul )  decode:( move 4 , 8 ; move ua + ul , 4 ) 
[22582] c:0 is:( move ua + ul , ua ; move 4 - ul , 3 ; move ua , ul )  decode:( move 0 - ua , 0 ; move ua , 4 ) 
[22583] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua , ul / v0 )  decode:loop 0 , 4 , move 4 + v0 , ua / 4 
[22584] c:0 is:( loop 0 , 3 , move v0 , ul / v0 ; move ua , v0 )  decode:( move 3 , 0 - 9 ; move ua , 2 ) 
[22585] c:0 is:( move ul , ul ; loop 0 , 5 , move v0 , v0 + v0 )  decode:( move 4 , 2 ; move ua , 7 + 4 ) 
[22586] c:0 is:( move ua + 3 , ul ; move 3 , ua * ua ; move ul , ul )  decode:( move ua + 3 , ul ; move 3 , 8 ) 
[22587] c:0 is:( move 4 , ul ; move 2 , ul ; move ua - ul , ua + ul )  decode:loop 0 , 3 , move 3 - ua , ul 
[22588] c:0 is:( move ua - 3 , ua ; move ul - 4 , ul ; move ua , ua )  decode:( move 5 , 0 ; move 4 , 3 ) 
[22589] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 , v0 * v0 )  decode:( move ua + 2 , ul ; move 3 , 8 ) 
[22590] c:0 is:( loop 0 , 5 , move v0 + ul , ul ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 * ua 
[22591] c:0 is:( move 3 , ul ; move 3 , ul ; move ua + ul , ua * ua )  decode:( move 4 , 2 ; move 8 , ua * ua ) 
[22592] c:0 is:( loop 0 , 5 , move v0 , ul ; move ul + v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 + 9 
[22593] c:0 is:loop 0 , 3 , ( move ua / v0 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move ua - v0 , v0 5 * 
[22594] c:0 is:( move ul , ua ; loop 0 , 6 , move v0 , v0 + v0 )  decode:loop 0 , 3 , move 4 + v0 , 4 + 3 
[22595] c:0 is:( move ul , ua * 2 ; move ua + ul , ul ; move ua , 4 )  decode:( move 9 , ul ; move ua , 4 ) 
[22596] c:0 is:( move 3 , ul - ua ; move ul , 3 ; move ua , ua * ua )  decode:( move 3 , ul ; move ua , ua / 4 ) 
[22597] c:0 is:( move 2 , ua ; move 4 , ua - ul ; move ul , ua * ua )  decode:( move 2 , 0 ; move ua - 3 , 4 ) 
[22598] c:0 is:( move ul , 3 ; move 3 , ua + ul ; move ul - ua , ul )  decode:( move 4 , 5 ; move 5 , 0 - 2 ) 
[22599] c:0 is:( loop 0 , 5 , move ul - v0 , v0 ; move ua , v0 )  decode:( move 3 , ua / 4 ; move 9 , 4 ) 
[22600] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 + ul , ul )  decode:( move 5 , 9 ; move ua + 2 , 4 ) 
[22601] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , v0 * v0 )  decode:( move 2 + ua , 0 ; move 4 , 8 ) 
[22602] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua - ul , v0 )  decode:loop 0 , 4 , move ua - 2 , 0 - v0 
[22603] c:0 is:( move 2 , ua * ua ; move ua , ul ; move ul , 2 / ua )  decode:( move 2 , ua * ua ; move ua , ul ) 
[22604] c:0 is:( loop 0 , 5 , move ul - ua , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 4 + 3 , 4 * 4 
[22605] c:0 is:( move ul , ua + ul ; move ua , 4 + ul ; move 3 , ul )  decode:( move ua + 2 , 6 ; move 3 , 4 ) 
[22606] c:0 is:( move 3 , ul ; move ul , ua * ua ; move 2 , ua - ul )  decode:( move 3 , ul ; move 3 , 4 / ua ) 
[22607] c:0 is:( move ul , ul ; loop 0 , 5 , move v0 + v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - v0 / 4 
[22608] c:0 is:( loop 0 , 5 , move v0 , ua - v0 ; move ul , v0 )  decode:loop 0 , 4 , move 4 - ua , 0 - v0 
[22609] c:0 is:( loop 0 , 5 , move ul , v0 ; move v0 + v0 , ul )  decode:( move 9 , 4 / move 3 , ul ) 
[22610] c:0 is:( move ua , ua * ua ; move ul , 3 + 4 ; move ua , ul )  decode:( move ua , 8 ; move ua + ul , 8 ) 
[22611] c:0 is:( loop 0 , 4 , move v0 , v0 * v0 ; move ul , ua )  decode:( move 3 , 4 ; move 4 , 3 * 4 ) 
[22612] c:0 is:( move ul , 4 ; move ua + 2 , ul ; move ul , ua * ua )  decode:( move 2 , 4 ; move 9 , ul ) 
[22613] c:0 is:loop 0 , 3 , ( move ua , v0 ; move v0 , ul / v0 )  decode:loop 0 , 4 , move ua , v0 + v0 
[22614] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua - v0 , ul )  decode:loop 0 , 4 , move 3 , 0 - v0 / 2 
[22615] c:0 is:( move ul , ua - ul ; move 4 , 2 ; move ua , ua - ul )  decode:( move 0 - ua , 0 ; move 4 , 4 ) 
[22616] c:0 is:loop 0 , 3 , ( move v0 , ul ; move v0 * v0 , ul )  decode:( move 4 , 9 ; move 3 , 0 - 2 ) 
[22617] c:0 is:( move ul , ua - ul ; move 3 , 3 + ul ; move ua , ul )  decode:( move 3 , 3 ; move ua + ul , ul ) 
[22618] c:0 is:( move 4 , ua ; move ul , ua + ul ; move ua + ul , 4 )  decode:( move ua , ul / move ua , 4 / 3 ) 
[22619] c:0 is:( loop 0 , 5 , move v0 + ul , v0 ; move v0 , ul )  decode:loop 0 , 4 , move 4 , 5 + v0 
[22620] c:0 is:( move ua , ul ; move ua - ul , ua - 3 ; move ua , 4 )  decode:loop 0 , 3 , move ua , 0 - v0 / 2 
[22621] c:0 is:( loop 0 , 5 , move v0 - ul , v0 ; move ua , v0 )  decode:loop 0 , 4 , move 0 - 3 , v0 - 9 
[22622] c:0 is:( move 3 , ul ; move ua + ul , 4 ; move ul , ua + ul )  decode:( move 3 , ul ; move 8 , 4 ) 
[22623] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , v0 / v0 )  decode:loop 0 , 4 , move 4 , v0 + 7 
[22624] c:0 is:( move ul , ul ; move 4 , ua + 4 ; move ua , ua * ua )  decode:( move 2 - ua , 5 ; move ua , 5 ) 
[22625] c:0 is:( move ul , 4 ; move 2 - ul , ul ; move ua , ua - ul )  decode:( move ua , 4 ; move ul , ul ) 
[22626] c:0 is:( loop 0 , 6 , move ul + v0 , v0 ; move ul , v0 )  decode:loop 0 , 4 , move ua - ul , 0 - 5 
[22627] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 , ul / v0 )  decode:loop 0 , 4 , move v0 , v0 - 4 
[22628] c:0 is:( loop 0 , 5 , move v0 , ul ; move v0 , ul - v0 )  decode:loop 0 , 4 , move 3 - ua , 2 / v0 
[22629] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ua , ul - v0 )  decode:loop 0 , 4 , move v0 * 4 , 0 - 9 
[22630] c:0 is:( loop 0 , 5 , move v0 , ul ; move v0 - ul , v0 )  decode:loop 0 , 4 , move 3 , v0 * 9 
[22631] c:0 is:( move ua - ul , ul ; move ul , 4 ; move 2 , ul + ul )  decode:( move 5 , ul ; move 3 , 4 ) 
[22632] c:0 is:( loop 0 , 5 , move v0 , ul - v0 ; move v0 , ul )  decode:loop 0 , 4 , move 3 - ua , 0 - 9 
[22633] c:0 is:( move ua , ul / 2 ; move 3 , ul + ul ; move ua , ul )  decode:0 loop 0 , 4 , move 4 , v0 - 4 
[22634] c:0 is:( move 4 , ul + ul ; move 3 , ul ; move ul - ua , ua )  decode:( move 4 , 2 ; move 5 , ua / 3 ) 
[22635] c:0 is:( move ul , ua ; loop 0 , 5 , move v0 , v0 * v0 )  decode:loop 0 , 3 , move 4 , 0 - 4 * 4 
[22636] c:0 is:( loop 0 , 6 , move ua - ul , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move ua , 3 * 4 
[22637] c:0 is:( move ua , ul - 3 ; move ua + ul , 4 ; move ul , ul )  decode:( move ua , 0 - 4 ; move 8 , 7 ) 
[22638] c:0 is:( move ul , 3 - ul ; move 3 , ul ; move ua + ul , ul )  decode:( move 3 , 3 ; move ua + 2 , ul ) 
[22639] c:0 is:( loop 0 , 6 , move v0 , v0 + ul ; move ul , v0 )  decode:( move ua , 9 + 4 ; move 4 , 8 ) 
[22640] c:0 is:( move 4 , ul ; move ul , ul - ua ; move ua + ul , 3 )  decode:( move 4 , ul ; move ua , 4 ) 
[22641] c:0 is:( move 2 , ul / 2 ; move ul , ul ; move ua + ul , ul )  decode:( move 2 , 3 / 2 ; move 6 , 5 ) 
[22642] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ua - ul , v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[22643] c:0 is:loop 0 , 3 , ( move ua , ua + ua ; move 2 , v0 - 3 )  decode:loop 0 , 3 , move 5 + v0 , ua / 4 
[22644] c:0 is:( move ul - ua , ul ; loop 0 , 3 , move 0 + 3 , v0 )  decode:loop 0 , 3 , move 3 , ul / v0 
[22645] c:0 is:loop 0 , 2 , ( move ua , 3 + ul ; move ua + v0 , 3 )  decode:0 0 loop 0 , 4 , move ua , 0 - 3 0 
[22646] c:0 is:( move 3 , ul + ul ; move ua , ul ; move ua - 4 , ul )  decode:( move 4 , ul ; move ua + 3 , ul ) 
[22647] c:0 is:( loop 0 , 6 , move v0 , v0 - ul ; move ua , v0 )  decode:loop 0 , 4 , move 0 - ua , 0 - 8 
[22648] c:0 is:( loop 0 , 6 , move ul , v0 + v0 ; move v0 , ul )  decode:( move ua , 9 ; move 4 , 2 - 3 ) 
[22649] c:0 is:( move 2 , ul ; move ul - ua , ul ; move ul , 4 + ul )  decode:( move 2 , ul ; move ua , 4 ) 
[22650] c:0 is:( loop 0 , 4 , move v0 , v0 ; move v0 , ul / ua )  decode:( move ua , 3 ; move 0 - 3 , 3 ) 
[22651] c:0 is:( move ua , ua + ua ; move ul , ul ; move 4 , ul / 2 )  decode:( move ua , ul ; move 4 , 4 / 4 ) 
[22652] c:0 is:( move 0 - ul , ul ; move 4 , ul ; move ua , ul / ua )  decode:( move 3 , ul ; move ua , ul / ua ) 
[22653] c:0 is:( move 2 , ua ; move 4 , ua - ul ; move ua , ul / ua )  decode:loop 0 , 4 , move ul - v0 , ua / ua 
[22654] c:0 is:( move 4 + 4 , ua ; move ul - ua , ul ; move ua , ul )  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[22655] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ul , ul + v0 )  decode:loop 0 , 3 , move v0 - ua , ua * ua 
[22656] c:0 is:( loop 0 , 4 , move ul , ul ; move v0 , v0 * v0 )  decode:loop 0 , 4 , move 2 , 0 - v0 0 
[22657] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ul - v0 , ul )  decode:loop 0 , 4 , move 3 , 6 - v0 
[22658] c:0 is:( move ul , ul ; loop 0 , 6 , move v0 , v0 + v0 )  decode:loop 0 , 4 , move 4 , 9 + v0 
[22659] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua , ua / v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 9 
[22660] c:0 is:( loop 0 , 5 , move v0 , v0 * v0 ; move ua , ul )  decode:( move 5 , 9 ; move ua + ul , 4 ) 
[22661] c:0 is:( move ul , ul ; loop 0 , 4 , move v0 , v0 * v0 )  decode:( move 3 , 9 ; move 3 , 3 + 9 ) 
[22662] c:0 is:( loop 0 , 6 , move ul - v0 , v0 ; move v0 , ua )  decode:loop 0 , 4 , move 3 - ua , v0 - 3 
[22663] c:0 is:( loop 0 , 3 , move v0 , ul / v0 ; move v0 , ul )  decode:loop 0 , 3 , move 3 - ua , 4 / 4 
[22664] c:0 is:( move ua / 3 , ul ; move ul , 2 ; move ua , ua - ul )  decode:( move ua , 9 + 3 ; move ua , ul ) 
[22665] c:0 is:( loop 0 , 4 , move v0 , ul / v0 ; move v0 , ua )  decode:( move ua , 6 ; move 3 , 4 * 3 ) 
[22666] c:0 is:( loop 0 , 6 , move v0 , v0 ; move v0 , ua - ul )  decode:loop 0 , 4 , move 4 , 4 + 4 2 - 3 
[22667] c:0 is:( loop 0 , 6 , move ul , ul + v0 ; move v0 , v0 )  decode:( move ua - ul , 4 ; move 3 , 8 ) 
[22668] c:0 is:( move ua , 4 / ua ; move ul , ul + ul ; move ua , 2 )  decode:( move ua , 3 / 2 ; move 7 , 4 ) 
[22669] c:0 is:( loop 0 , 6 , move v0 , v0 + v0 ; move ul , ul )  decode:loop 0 , 4 , move ua - ul , v0 + 9 
[22670] c:0 is:( move ul , ua ; move ul - ua , ul / 2 ; move 2 , ul )  decode:( move 2 , 4 + 9 ; move ua , 4 ) 
[22671] c:0 is:( move ul , ul ; move ul - ua , ua - 2 ; move 4 , ul )  decode:( move 3 - ua , 0 ; move 4 , ul ) 
[22672] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 , v0 * v0 )  decode:( move 9 , ul ; move 4 , 7 + 4 ) 
[22673] c:0 is:( move ul , ul - 2 ; move ua , ul + ul ; move 4 , ul )  decode:( move ua + ul , ul ; move 4 , ul ) 
[22674] c:0 is:( loop 0 , 5 , move v0 - ul , ul ; move v0 , v0 )  decode:( move ua , 4 ; move 4 , 4 ) 
[22675] c:0 is:( loop 0 , 6 , move v0 , ua - ul ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , 0 - 4 / 4 
[22676] c:0 is:( move ua , 2 ; move ul , ul ; move 4 - ul , ua - ul )  decode:( move ul - ua , 2 ; move 4 , 3 ) 
[22677] c:0 is:( loop 0 , 5 , move v0 , v0 * v0 ; move ul , ua )  decode:loop 0 , 3 , move 2 - ua , 9 
[22678] c:0 is:( move ua - ul , 0 ; loop 0 , 5 , move v0 , ua + 2 )  decode:loop 0 , 4 , move 3 - ua , 3 / v0 
[22679] c:0 is:( loop 0 , 5 , move ul , ul - v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 0 - 2 , ua / 3 
[22680] c:0 is:( move 0 , ul ; loop 0 , 4 , move 2 - ua , v0 - ua )  decode:loop 0 , 3 , move ul - ua , 2 / v0 
[22681] c:0 is:( move 3 - ua , ul - 4 ; move ua , ul ; move ul , ua )  decode:( move 3 , 0 - 4 ; move 7 , ul ) 
[22682] c:0 is:( move ul , ua ; loop 0 , 6 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 4 , v0 + 2 
[22683] c:0 is:( loop 0 , 6 , move v0 / ua , ua ; move v0 , v0 )  decode:( move 4 - ua , 0 ; move 5 , 5 ) 
[22684] c:0 is:( move ul , ul ; move 4 , ul + ul ; move ua , ul - 3 )  decode:( move 0 - ua , ul ; move 5 , 5 ) 
[22685] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua , ul / v0 )  decode:( move 3 , 3 ; move ua + 2 , 4 ) 
[22686] c:0 is:( move 2 , ul ; move ua , ul / ua ; move 4 , ua - ul )  decode:( move 3 , 4 * 4 ; move 8 , ul ) 
[22687] c:0 is:( move 4 , 4 ; move ul - ua , ul ; move ua , ua - ul )  decode:loop 0 , 3 , move ua - ul , 4 / v0 
[22688] c:0 is:( move ua , 4 * 2 ; move ul , ul ; move ua - ul , ul )  decode:( move ua + ul , 8 ; move 5 , 2 ) 
[22689] c:0 is:( loop 0 , 5 , move ul , ul ; move v0 , v0 * v0 )  decode:loop 0 , 3 , move 3 - ua , 4 0 - 4 
[22690] c:0 is:( loop 0 , 5 , move ul , v0 ; move v0 , ua / v0 )  decode:( move ua - 4 , 0 ; move ua , 3 ) 
[22691] c:0 is:( move ua , ul ; move ul , 4 / ua ; move 2 + ul , ul )  decode:( move ua , ul ; move 3 , ua / 4 ) 
[22692] c:0 is:( loop 0 , 5 , move v0 , ul ; move ua / v0 , v0 )  decode:loop 0 , 3 , move 3 - ua , 2 / v0 
[22693] c:0 is:( move ul , ul ; move ua - ul , ul ; move ua , 2 / 3 )  decode:( move ua , 2 ; move ua , 5 - 3 ) 
[22694] c:0 is:( move ua , ul ; loop 0 , 0 , loop 1 , 5 , move ua , 2 )  decode:loop 0 , 4 , move ua + ul , 0 - 2 
[22695] c:0 is:( move 4 , ua ; move ul , ua - ul ; move 3 - ul , ul )  decode:( move 2 , 0 ; move ul - ua , 4 ) 
[22696] c:0 is:( loop 0 , 4 , move ul , v0 ; move v0 , ul / v0 )  decode:( move 3 , 3 ; move 4 , 0 - 4 ) 
[22697] c:0 is:( loop 0 , 5 , move v0 , ul / v0 ; move ua , v0 )  decode:( move 4 , 4 ; move ua , 4 + 4 ) 
[22698] c:0 is:( loop 0 , 6 , move ul , v0 - ul ; move v0 , v0 )  decode:( move 3 , 2 * 5 ; move ua , 9 ) 
[22699] c:0 is:( move 4 + ul , 4 ; move ul , ua * ua ; move ua , ul )  decode:( move 5 , 4 ; move ua , 9 + 2 ) 
[22700] c:0 is:( move ul , ua * ua ; move 4 + ul , ul ; move ua , 4 )  decode:( move ua , 9 ; move 5 , 4 ) 
[22701] c:0 is:( move ul , ua ; move ua , 2 / ua ; move ua , ua / 4 )  decode:loop 0 , 3 , move 4 , v0 / 9 
[22702] c:0 is:( loop 0 , 5 , move v0 , ul ; move v0 , v0 / ua )  decode:loop 0 , 3 , move 4 , 2 * 3 / v0 
[22703] c:0 is:( move ua + ul , 2 / 3 ; move ul , ul ; move ul , ul )  decode:( move ua + ul , 4 ; move 2 , 2 ) 
[22704] c:0 is:( loop 0 , 6 , move ul , ul - v0 ; move v0 , v0 )  decode:( move 3 , 4 * 3 ; move 3 , 9 ) 
[22705] c:0 is:( loop 0 , 6 , move v0 , ul - v0 ; move ul , v0 )  decode:loop 0 , 4 , move v0 + 2 , 0 - 9 
[22706] c:0 is:( loop 0 , 6 , move ul , v0 ; move ua , v0 * v0 )  decode:( move 2 , 6 + 4 ; move ua , 9 ) 
[22707] c:0 is:( loop 0 , 4 , move v0 , ul / v0 ; move v0 , ul )  decode:( move 3 , 9 ; move ua , 5 ) 
[22708] c:0 is:( move ul , ul ; loop 0 , 5 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 3 , 4 0 * 4 
[22709] c:0 is:( loop 0 , 5 , move ul , v0 / ua ; move v0 , v0 )  decode:loop 0 , 3 , move 3 , 0 - 9 
[22710] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua / v0 , ul )  decode:( move 4 , ua / 4 ; move 9 , 4 ) 
[22711] c:0 is:( move ua , ul / ua ; move ul , 3 + 4 ; move ua , ul )  decode:( move ua , ul / 4 ; move 7 , 8 ) 
[22712] c:0 is:( move ul , ua / 3 ; move ua , 3 ; move ul - ua , ul )  decode:( move ua , 0 - 3 ; move 5 , ul ) 
[22713] c:0 is:( move ul , ua ; move 4 + ul , ul ; move 4 + ul , ul )  decode:( move 5 , ul ; move 5 , ul ) 
[22714] c:0 is:( loop 0 , 6 , move ul - v0 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move 4 , 0 - v0 / 4 
[22715] c:0 is:( move 4 , ua ; move ua , ua + ul ; move ua / 4 , ul )  decode:( move 4 , 0 ; move 8 , ul ) 
[22716] c:0 is:loop 0 , 3 , ( move ul - ua , ua - 4 ; move v0 , 0 )  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[22717] c:0 is:( loop 0 , 5 , move v0 , v0 * v0 ; move ul , ul )  decode:loop 0 , 4 , move 2 - 3 , 2 * 2 
[22718] c:0 is:( loop 0 , 6 , move ul / v0 , v0 ; move ua , v0 )  decode:( move 2 , 0 ; move ua + ul , 7 ) 
[22719] c:0 is:( move 0 , ul ; loop 0 , 5 , move ua - 3 , v0 + ul )  decode:loop 0 , 4 , move 3 - ua , 0 - 8 
[22720] c:0 is:( move 3 , ua * ua ; move ua , 4 ; move ul , ul / ua )  decode:( move 3 , 5 ; move ua + ul , 4 ) 
[22721] c:0 is:( move ul - ua , ua ; move 4 , ul ; move ua , ua / 4 )  decode:( move ua , ul ; move 9 , 4 * 4 ) 
[22722] c:0 is:( move ul , ul ; move 4 , ul - 3 ; move ul + ul , ul )  decode:( move 2 , 4 ; move 4 , 0 - 4 ) 
[22723] c:0 is:( move ua , ul / ua ; move ul , 4 + ul ; move ua , 4 )  decode:loop 0 , 4 , move 3 , 3 + v0 
[22724] c:0 is:( move ul , ul - ua ; move ul - ua , ul ; move 4 , 4 )  decode:( move ul - ua , 2 ; move 4 , 4 ) 
[22725] c:0 is:( move ul , ul ; loop 0 , 6 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 3 - ua , v0 / 4 
[22726] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ua / v0 , ul )  decode:loop 0 , 4 , move 3 + v0 , 0 - 4 
[22727] c:0 is:( ( move ua , ua ; move 3 , ua * ua ) ; move ua , ul )  decode:loop 0 , 3 , move v0 + 4 , 0 - 9 
[22728] c:0 is:( loop 0 , 6 , move ul , v0 * v0 ; move v0 , ul )  decode:loop 0 , 4 , move 4 - ua , 9 4 * 3 
[22729] c:0 is:( move 4 , ul ; move ua / 2 , ul ; move ul - ua , ul )  decode:( move 4 , 3 ; move ua , 0 - 2 ) 
[22730] c:0 is:( move ua + 2 , ua + ul ; loop 0 , 4 , move v0 , 4 )  decode:( move ua + 3 , ul ; move 3 , 4 ) 
[22731] c:0 is:( move ua - ul , ua ; move ua / 4 , ul ; move ua , 4 )  decode:( move ua , 0 ; move ua - ul , 8 ) 
[22732] c:0 is:( move ul - ua , ua ; ( move ua , ul ; move 2 , ul ) )  decode:( move ul - ua , 0 ; move 9 , ul ) 
[22733] c:0 is:( move ua , ul ; ( move ul , ua * ua ; move ua , 2 ) )  decode:( move ua + ul , ul ; move ua , 9 ) 
[22734] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , v0 / ua )  decode:( move 2 , ua / 4 ; move ua , 2 ) 
[22735] c:0 is:( move ul , ul ; move ua , ul - ua ; move ua , 4 * 4 )  decode:( move ua , 0 - 9 ; move ua , 9 ) 
[22736] c:0 is:( move ul / 4 , ua ; move ua + 3 , ul ; move ul , ul )  decode:( move 9 , ul ; move ul , ul ) 
[22737] c:0 is:( move ua - ul , 0 - ul ; loop 0 , 4 , move 3 , v0 )  decode:loop 0 , 3 , move 4 , v0 - ul 
[22738] c:0 is:( move ul , 4 + 4 ; move ua - ul , ul ; move ul , ul )  decode:( move ua , 9 ; move 2 , 4 / 3 ) 
[22739] c:0 is:( move ua , 0 - ul ; loop 0 , 6 , move 2 + ul , v0 )  decode:( move ua + 4 , 2 ; move ua , + 4 ) 
[22740] c:0 is:( move 0 , ua + ul ; loop 0 , 6 , move 3 , ua - v0 )  decode:loop 0 , 4 , move 4 , = 3 * 5 
[22741] c:0 is:( loop 0 , 6 , move v0 , ul ; move v0 , ua / v0 )  decode:loop 0 , 4 , move ua - 2 , 4 * 3 
[22742] c:0 is:( loop 0 , 6 , move ul , ul ; move v0 , v0 * v0 )  decode:( move ua , 9 ; move 5 , 0 - 4 ) 
[22743] c:0 is:( move ua , ul ; ( move ul , ul ; move ua + ul , 2 ) )  decode:( move ua + ul , ul ; move 7 , 9 ) 
[22744] c:0 is:( move ul , ul / 4 ; move ul , ul ; move ua + 2 , ul )  decode:( move ul , 0 ; move 3 + ua , 2 ) 
[22745] c:0 is:( move ul / 2 , ul ; move ua , ul ; move ua , ua / 4 )  decode:( move ua , 2 ; move ua , 3 / 4 ) 
[22746] c:0 is:( move 3 , ul / ua ; move ul , ua - ul ; move 4 , ul )  decode:loop 0 , 4 , move 2 , 4 / 4 / 4 
[22747] c:0 is:( move 0 , ul + ul ; loop 0 , 6 , move v0 + ul , 3 )  decode:loop 0 , 4 , move 4 , 0 - 3 
[22748] c:0 is:( move ua + 2 , ua - 4 ; loop 0 , 4 , move v0 , ul )  decode:( move ua , 7 ; move ua , 4 * 4 ) 
[22749] c:0 is:( move 4 , ua + ul ; loop 0 , 4 , move v0 - ua , 2 )  decode:loop 0 , 4 , move ua , ua + 3 , 0 0 ua ua , 
[22750] c:0 is:( move ua , 0 - ul ; loop 0 , 5 , move v0 , ua - 4 )  decode:loop 0 , 4 , move 4 , 4 - 4 / v0 
[22751] c:0 is:( move ul , ul ; ( move ua + ul , ul ; move ua , 3 ) )  decode:( move ua + ul , 2 ; move ua , 3 ) 
[22752] c:0 is:( move 3 + ul , ua + ul ; loop 0 , 3 , move v0 , 4 )  decode:( move 4 , ul ; move 3 , 3 / 4 ) 
[22753] c:0 is:( ( move ua + ul , ua ; move 3 , ul ) ; move ul , ul )  decode:( move ua + 2 , 0 ; move 3 , 2 ) 
[22754] c:0 is:( move ua + ul , ul - 2 ; loop 0 , 4 , move 3 , v0 )  decode:loop 0 , 4 , move v0 + ul , ul / 3 
[22755] c:0 is:( move ua , ul / ua ; ( move ua , ul ; move ua , 2 ) )  decode:loop 0 , 3 , move v0 + 4 , 2 - 3 
[22756] c:0 is:( move ua , ul ; move ul / 3 , 4 ; move ul - ua , ul )  decode:( move ua , ul ; move 5 , ua * ua ) 
[22757] c:0 is:( move ul , ua - ul ; loop 0 , 4 , move 0 - 4 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[22758] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , ul / v0 )  decode:( move 2 , 4 ; move ua , 3 / 2 ) 
[22759] c:0 is:( move ul , ul / ua ; move ul , ul ; move ua , 4 * 2 )  decode:( move ua , ul / 4 ; move ua , 2 ) 
[22760] c:0 is:( move ua + 3 , 3 / ua ; loop 0 , 3 , move v0 , ul )  decode:( move 2 , 4 + 3 ; move ua , 4 ) 
[22761] c:0 is:loop 0 , 3 , ( move 3 , 3 - ul ; move ua - v0 , ul )  decode:loop 0 , 4 , move ua - v0 , 0 - 4 
[22762] c:0 is:( ( move ua , ul ; move ua , 4 ) ; move ul , ua - ul )  decode:( move ua , ul ; move ua + ul , 4 ) 
[22763] c:0 is:( move ua , ua ; ( move ul , ul ; move 4 , ua * ua ) )  decode:( move ua + ul , 0 ; move 4 , 7 ) 
[22764] c:0 is:( move 3 - ul , ua ; loop 0 , 3 , move 3 , v0 - ul )  decode:loop 0 , 4 , move 4 - ua , v0 - ul 
[22765] c:0 is:( loop 0 , 3 , move ul , ul / v0 ; move 2 , ua - 2 )  decode:( move 2 , 0 - 4 ; move 3 , 4 ) 
[22766] c:0 is:( move ul , 4 - ua ; loop 0 , 3 , move ua + v0 , 4 )  decode:loop 0 , 4 , move v0 + 4 , 4 
[22767] c:0 is:( move ua + ul , 4 ; loop 0 , 3 , move ul + v0 , 4 )  decode:( move 9 , 4 ; move 4 , 7 + 4 ) 
[22768] c:0 is:loop 0 , 3 , ( move ul , v0 - 4 ; move 2 , ul + ul )  decode:( move 4 , 0 ; move 4 , 0 - 9 ) 
[22769] c:0 is:( loop 0 , 5 , move v0 + ul , ul ; move 4 , ua + 2 )  decode:loop 0 , 4 , move 0 - 4 , 5 / v0 
[22770] c:0 is:( move ua + 3 , ua / 3 ; loop 0 , 3 , move v0 , ul )  decode:( move 9 , 3 / move 4 , 0 - 4 ) 
[22771] c:0 is:( loop 0 , 6 , move ul , 4 + ul ; move ua - v0 , 0 )  decode:loop 0 , 3 , move 2 , 8 8 
[22772] c:0 is:( move 2 + ul , ul ; loop 0 , 4 , move v0 + ul , 4 )  decode:loop 0 , 4 , move 3 , 0 - 9 
[22773] c:0 is:( move 3 - ul , 0 ; loop 0 , 5 , move ul , ul - v0 )  decode:( move 4 , 0 ; move 2 , 0 - 4 ) 
[22774] c:0 is:( move ul + ul , 3 / ua ; loop 0 , 3 , move 2 , v0 )  decode:( move 4 , 2 / 4 ; move 4 , 2 ) 
[22775] c:0 is:( move ul - ua , 3 + 2 ; loop 0 , 5 , move v0 , ul )  decode:( move 9 , 8 ; move ua - ul , 5 ) 
[22776] c:0 is:( ( move ua , ul ; move ul - ua , ua ) ; move 4 , ul )  decode:( move ul - ua , ul ; move 4 , ul ) 
[22777] c:0 is:( move ua - 3 , ul ; loop 0 , 5 , move v0 + ul , 2 )  decode:loop 0 , 4 , move v0 + 2 , 4 
[22778] c:0 is:( loop 0 , 3 , move 4 - ua , ul ; move 2 , v0 - ul )  decode:loop 0 , 4 , move 2 , 4 * 3 - v0 
[22779] c:0 is:( loop 0 , 4 , move 2 , ua / v0 ; move 4 , ua + ul )  decode:( move ua , 0 ; move 4 , 4 * 4 ) 
[22780] c:0 is:( move ua , ul ; loop 0 , 5 , move 3 + v0 , ul - 3 )  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[22781] c:0 is:( move ua , 2 ; move ua , 3 ; loop 0 , 5 , move 4 , ul )  decode:loop 0 , 4 , move 0 - ua , 2 
[22782] c:0 is:( move ul + ul , ua + 4 ; loop 0 , 4 , move v0 , 4 )  decode:( move 4 , 0 - 2 ; move 4 , 9 ) 
[22783] c:0 is:( loop 0 , 6 , move ua , ua - 4 ; move 2 + ul , v0 )  decode:loop 0 , 4 , move 0 - 7 , 4 * 4 
[22784] c:0 is:( move ua / 3 , ua + ul ; loop 0 , 5 , move 2 , v0 )  decode:( move 5 , ul ; move 4 , 3 / 2 ) 
[22785] c:0 is:( move ua + ul , ua - 4 ; loop 0 , 4 , move v0 , 4 )  decode:( move 3 , 9 ; move 9 , 9 ) 
[22786] c:0 is:( move ua , 3 + ul ; loop 0 , 5 , move v0 , 4 + ul )  decode:loop 0 , 3 , move v0 - ua , ua / ua 
[22787] c:0 is:( move ua , 4 - ua ; loop 0 , 6 , move ua - v0 , 2 )  decode:loop 0 , 4 , move ua + ul , 4 
[22788] c:0 is:( move 4 - ua , 2 - ua ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 0 - 4 , 2 - 3 
[22789] c:0 is:( move ua , ul - ua ; loop 0 , 3 , move 4 , v0 - 4 )  decode:loop 0 , 4 , move 4 , 4 * v0 
[22790] c:0 is:( move 3 + 2 , ua * ua ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move ul - ua , 8 
[22791] c:0 is:( move ua , ul - ua ; loop 0 , 6 , move v0 - 2 , 3 )  decode:( move 3 , 0 ; move 9 , 3 * 5 ) 
[22792] c:0 is:( move ua , ul / 2 ; loop 0 , 3 , move ul + v0 , 4 )  decode:loop 0 , 4 , move 3 , 0 - 9 / v0 
[22793] c:0 is:( loop 0 , 6 , move v0 - ul , 2 ; move ua - 2 , ul )  decode:loop 0 , 4 , move 4 , 4 * v0 0 
[22794] c:0 is:( move ul - 4 , ul / ua ; loop 0 , 3 , move 2 , v0 )  decode:loop 0 , 3 , move 2 , 3 * ua 
[22795] c:0 is:( move ul - ua , 4 + ul ; loop 0 , 4 , move v0 , 4 )  decode:( move 3 , ua / 3 ; move ua , 4 ) 
[22796] c:0 is:( move ua + ul , 3 * 3 ; loop 0 , 5 , move ul , v0 )  decode:( move 2 , 9 ; move ua + 2 , 4 ) 
[22797] c:0 is:( move 0 - 3 , ul / ua ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 4 , 4 * 0 3 
[22798] c:0 is:( ( move ua , ul ; move ua , ua / 4 ) ; move ul , ul )  decode:( move ua , ul ; move ua , ua / 4 ) 
[22799] c:0 is:( move 3 - ua , ul + ul ; loop 0 , 6 , move 3 , v0 )  decode:loop 0 , 4 , move 2 - ua , 5 / 4 
[22800] c:0 is:( move ul , 4 - ul ; loop 0 , 4 , move 3 + ul , v0 )  decode:loop 0 , 4 , move 0 - 4 , 3 0 0 
[22801] c:0 is:( move ua + ul , 3 / 4 ; loop 0 , 3 , move v0 , ul )  decode:( move ua , 7 ; move 3 , 0 - 2 ) 
[22802] c:0 is:( loop 0 , 0 , move 3 , 2 ; loop 1 , 4 , move v1 , 2 )  decode:loop 0 , 4 , move 2 , 2 + v0 
[22803] c:0 is:( v0 = ua ; loop 1 , 5 , move 2 , 2 ; move ul , ua )  decode:loop 0 , 4 , move 0 - 4 , v0 - 8 
[22804] c:0 is:( loop 0 , 4 , move ul + v0 , ul ; move 3 , ul / 2 )  decode:loop 0 , 3 , move 4 , v0 - 2 
[22805] c:0 is:( move ul , 3 - ul ; loop 0 , 5 , move 2 , ul - v0 )  decode:( move 3 , 3 ; move ua , 0 - 4 ) 
[22806] c:0 is:( move ua + 4 , 4 / ua ; loop 0 , 4 , move v0 , ul )  decode:( move ua + 4 , 3 + move ua , 3 ) 
[22807] c:0 is:( loop 0 , 5 , move ua - v0 , ua / 4 ; move 3 , ua )  decode:loop 0 , 4 , move ua , v0 + 8 
[22808] c:0 is:( move ul + ul , 4 + 4 ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 0 - 4 , v0 - 4 
[22809] c:0 is:( move ua , ul - 3 ; v0 = 2 ; move 3 , v0 / ua )  decode:( move 3 , 0 - 4 ; move ua , 7 ) 
[22810] c:0 is:( ( move ul , ul ; move ua , ua / 4 ) ; move ul , ul )  decode:( move ul , 0 ; move ua , ua / 4 ) 
[22811] c:0 is:( move ul + ul , 3 ; loop 0 , 6 , move ua / v0 , 2 )  decode:loop 0 , 4 , move ua , ua / v0 - 2 
[22812] c:0 is:loop 0 , 2 , ( move ua / 3 , v0 ; move 4 , ul / ua )  decode:( move ua , ul / 9 ; move 5 , ul ) 
[22813] c:0 is:( v0 = ua + ul ; loop 1 , 4 , move ua , v0 / 2 )  decode:loop 0 , 4 , move ua , 0 - 9 
[22814] c:0 is:( loop 0 , 6 , move 3 , ua - ul ; move ul + v0 , 4 )  decode:loop 0 , 4 , move ul - ua , 0 - 8 
[22815] c:0 is:( loop 0 , 4 , move 2 , 4 ; loop 1 , 0 , move 3 , v0 )  decode:loop 0 , 3 , move 3 , 0 - 3 
[22816] c:0 is:( move ua + ul , 4 / ua ; loop 0 , 6 , move 2 , v0 )  decode:( move 9 , ul / 4 ; move ua , 3 + ) 4 
[22817] c:0 is:( move 3 , ua + 4 ; loop 0 , 4 , move ul , ul / v0 )  decode:loop 0 , 3 , move 0 - 2 , v0 - 2 
[22818] c:0 is:( move ul , ul ; loop 0 , 4 , move 3 , 2 ; v1 = ua )  decode:loop 0 , 4 , move 3 - ua , v0 - 2 
[22819] c:0 is:( move 4 - ua , 4 ; loop 0 , 6 , move ul , ua - v0 )  decode:loop 0 , 3 , move 4 - ua , 4 
[22820] c:0 is:( v0 = 3 - ua ; loop 1 , 5 , move ua , v0 * ua )  decode:loop 0 , 4 , move ua , 9 / 2 
[22821] c:0 is:( move ua , ul / 3 ; loop 0 , 4 , move ul , 2 / v0 )  decode:loop 0 , 4 , move 3 / v0 , 3 / 2 
[22822] c:0 is:loop 0 , 3 , ( move ua / 4 , ul ; move ul , v0 / 2 )  decode:loop 0 , 3 , move 4 - ua , ua / 4 
[22823] c:0 is:( move ua , ul / 2 ; loop 0 , 6 , move ul - v0 , 3 )  decode:( move 4 , 6 ; move ua , 0 - 9 ) 
[22824] c:0 is:( v0 = ua * ua ; loop 1 , 6 , move ua , v0 + 3 )  decode:loop 0 , 4 , move 4 + 3 , 0 - 8 
[22825] c:0 is:( move ul , 3 / ua ; loop 0 , 5 , move v0 - ua , 4 )  decode:loop 0 , 4 , move v0 - ua , 0 - 4 
[22826] c:0 is:( move 3 , ul ; move ul , ul ; loop 0 , 5 , move 4 , 3 )  decode:loop 0 , 4 , move 3 + v0 , 0 - 3 
[22827] c:0 is:( move 2 , ul / ua ; loop 0 , 6 , move ul , v0 - 3 )  decode:loop 0 , 4 , move ul + v0 , 0 - 3 
[22828] c:0 is:( move ul - 4 , ul + ul ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 4 , move 4 , 0 - v0 * 4 
[22829] c:0 is:( v0 = ul - ua ; loop 1 , 5 , move ua , v0 / 2 )  decode:loop 0 , 4 , move ua , 0 - 9 
[22830] c:0 is:loop 0 , 7 , ( v1 = ua ; move ua + ul , v1 - 2 )  decode:loop 0 , 4 , move ua + 2 , 0 - 8 
[22831] c:0 is:( move ul / 3 , ul ; loop 0 , 5 , move 2 , v0 / ua )  decode:loop 0 , 4 , move v0 + ul , 4 * 3 
[22832] c:0 is:( loop 0 , 6 , move ua , 4 ; v1 = ua ; move 2 , ul )  decode:loop 0 , 4 , move ua + 2 , 0 - 9 
[22833] c:0 is:( move ua , 4 ; loop 0 , 5 , move ul - v0 , ua / 4 )  decode:loop 0 , 4 , move 0 - 3 , 4 * 5 
[22834] c:0 is:( loop 0 , 3 , move 4 , 2 / v0 ; move 2 , 4 + v0 )  decode:loop 0 , 3 , move ua - 2 , 2 / v0 
[22835] c:0 is:( v0 = ul ; move ul , 2 ; loop 1 , 5 , move 4 , ul )  decode:loop 0 , 4 , move 0 - 4 , 3 * 4 
[22836] c:0 is:( move 4 , 3 ; loop 0 , 0 , loop 1 , 6 , move 2 , v1 )  decode:loop 0 , 4 , move 0 - 4 , v0 + 4 
[22837] c:0 is:loop 0 , 6 , ( v1 = ul ; move v0 + ul , 4 + ul )  decode:loop 0 , 4 , move 4 + v0 , 3 * 5 
[22838] c:0 is:( loop 0 , 7 , move 4 + ul , ua * ua ; v1 = v0 )  decode:0 0 loop 0 , 4 , move ua , 0 - 4 
[22839] c:0 is:( loop 0 , 6 , move 3 , ul ; move ul , 4 ; v1 = ua )  decode:loop 0 , 4 , move 4 , ua / ul / 4 
[22840] c:0 is:( move ua , ul / 4 ; loop 0 , 6 , move ul , 2 / v0 )  decode:loop 0 , 4 , move 3 , 3 * 3 - v0 
[22841] c:0 is:( v0 = ul ; loop 1 , 7 , move 3 - ua , ul - v1 )  decode:loop 0 , 4 , move 3 + 3 , 0 - 0 v0 
[22842] c:0 is:( move ul , ul ; v0 = ul ; loop 1 , 6 , move 3 , 4 )  decode:loop 0 , 4 - 3 3 ; - ua , 0 - 4 
[22843] c:0 is:( move 4 , 2 ; v0 = 0 ; loop 1 , 6 , move 3 , v1 )  decode:loop 0 , 4 , move 4 + v0 , 0 - 9 
[22844] c:0 is:( move 3 , 2 / 4 ; loop 0 , 6 , move v0 + v0 , 4 )  decode:loop 0 , 4 , move v0 + 4 , 0 - 4 
[22845] c:0 is:( move 4 - 3 , 4 ; loop 0 , 6 , move 3 - v0 , v0 )  decode:( move 5 , 4 ; move 4 , 4 * 3 ) 
[22846] c:0 is:( loop 0 , 6 , move ua / 4 , ul / v0 ; v1 = ua )  decode:loop 0 , 4 , move 2 , 3 + 4 / v0 
[22847] c:0 is:( move ua , ua + ul ; move ua , 2 ; move ua , ua * ua )  decode:loop 0 , 3 , move ua , ua / v0 + ul 
[22848] c:0 is:( move ua , ua - ul ; move 2 - ua , ul ; move ua , ul )  decode:loop 0 , 4 , move 4 , 4 * 0 - v0 
[22849] c:0 is:( move ua + 2 , ua ; move ul , ul ; move ul + ul , ul )  decode:( move 9 , 0 ; move 3 , 5 ) 
[22850] c:0 is:( move ua + ul , ua ; move ua , 4 ; move ua , ua * ua )  decode:loop 0 , 3 , move 4 + 3 , ua * v0 
[22851] c:0 is:loop 0 , 3 , loop 1 , 2 , move v1 + v0 , v1 + v0  decode:loop 0 , 4 , move 0 - 2 , v0 - 4 
[22852] c:0 is:( v0 = 3 ; loop 1 , 5 , move 3 / 2 , v0 * v1 )  decode:( move 3 , 2 ; move 4 , 0 - 3 ) 
[22853] c:0 is:( move ua , 3 ; move ul - ua , ua - ul ; move ua , ua )  decode:( move 6 , 2 ; move ua , ua / 3 ) 
[22854] c:0 is:( loop 0 , 6 , move v0 / 2 , 3 / v0 ; move 4 , 4 )  decode:loop 0 , 4 , move 0 - 3 , 0 - 2 
[22855] c:0 is:( move ua - ul , ua ; move ul , ul ; move ua + 2 , ul )  decode:( move 6 , 0 ; move 9 , 2 ) 
[22856] c:0 is:( move ua , ua ; move 3 - ua , ul ; move ua - ul , ua )  decode:loop 0 , 4 , move 3 , 0 - v0 0 
[22857] c:0 is:( move ua , ul ; move ul , ua + 3 ; move ua , ua - ul )  decode:( move 6 , ul ; move 7 , 2 ) 
[22858] c:0 is:loop 0 , 2 , loop 1 , 3 , move v1 + v1 , v0 + v0  decode:( move 4 , 0 ; move ua , 2 + 4 ) 
[22859] c:0 is:( move ul + ul , ua * ua ; move ua , ul ; move ua , 2 )  decode:( move ua , 8 ; move ua , 0 - 2 ) 
[22860] c:0 is:( move ul - ua , ua - ul ; move ua , ul ; move ul , 2 )  decode:( move ua , 0 - 3 ; move ua , ul ) 
[22861] c:0 is:( loop 0 , 9 , v1 = 2 ; loop 2 , 2 , move 4 , v0 )  decode:loop 0 , 2 , move 4 , 8 
[22862] c:0 is:( move ua , ul ; move ua + ul , 3 ; move ul , ua - ul )  decode:( move ua + ul , ul ; move 8 , 3 ) 
[22863] c:0 is:( move ua , ua ; move 4 - ua , ul ; move ua + ul , ul )  decode:loop 0 , 4 , move 3 + v0 , ua / 3 
[22864] c:0 is:( move ua , ua ; move 4 , ua * ua ; move ua + ul , ul )  decode:loop 0 , 3 , move ua - 8 , v0 * 3 
[22865] c:0 is:( move ua , ul ; move ua + ul , 3 ; move ul - ua , ul )  decode:loop 0 , 3 , move ua , 4 * v0 
[22866] c:0 is:loop 0 , 2 , loop 1 , 3 , move v0 + v1 , v0 - v1  decode:( move 3 , ul / ua ; move ua , 4 ) 
[22867] c:0 is:( move ua , ul ; move 2 , ua - ul ; move ul - ua , ul )  decode:( move ua + ul , ul ; move ua , 3 ) 
[22868] c:0 is:( move ul , ua ; move ul - ua , 3 + ul ; move ua , ul )  decode:( move ua , ul / 4 ; move ua , 2 ) 
[22869] c:0 is:( move ul , ua ; move ua , ul ; move 3 + ul , ua * ua )  decode:( move ua , ul ; move 4 , ua * ua ) 
[22870] c:0 is:( move ul , ul ; move ua , ua * ua ; move ua , 3 + ul )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[22871] c:0 is:loop 0 , 5 , ( v1 = 2 / v0 ; move 3 , v0 / 4 )  decode:loop 0 , 4 , move 4 , 7 / v0 
[22872] c:0 is:( move ua , ua ; move ua + ul , 4 ; move ul - ua , ul )  decode:loop 0 , 3 , move 0 - ua , 4 * 4 0 
[22873] c:0 is:( move ua - ul , 2 ; move ua , ul + ul ; move ul , ul )  decode:( move ul - ua , ul ; move ua , 2 ) 
[22874] c:0 is:( move ul , ua * ua ; move ua , ul ; move 2 + ul , ul )  decode:( move ua + ul , 9 ; move 3 , ul ) 
[22875] c:0 is:( move ul - ua , ul - 2 ; move ua , ul ; move ul , ul )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[22876] c:0 is:( move ul , ua + ua ; move 3 , ul ; move ua , ul / ua )  decode:( move 2 , 0 ; move 8 , ul ) 
[22877] c:0 is:( move ua + ul , ul ; move ua , ua * ua ; move ul , 4 )  decode:( move ua + ul , ul ; move 7 , 7 ) 
[22878] c:0 is:( move ua , ua ; move ul , ua * ua ; move 4 , ul - ua )  decode:( move ua + ul , 0 ; move 5 , 4 ) 
[22879] c:0 is:( move ua + ul , 4 ; move ul , ul ; move ua + ul , ul )  decode:( move ua + ul , 4 ; move 7 , 2 ) 
[22880] c:0 is:( move ul - ua , ua ; move ul - 4 , ul ; move ua , ua )  decode:( move ua + ul , 0 ; move 4 , 3 ) 
[22881] c:0 is:( move ul , ua ; move ul , ua + ul ; move ua , 3 / ua )  decode:( move ul , 0 ; move ua + ul , 8 ) 
[22882] c:0 is:( move ua , 4 ; move ul , ua * ua ; move ua + ul , ul )  decode:( move ua + ul , 4 ; move ua , 9 ) 
[22883] c:0 is:( move ua , ul ; move ul , ul ; move ua / 2 , ua + ul )  decode:( move ua , ul ; move 3 , 5 ) 
[22884] c:0 is:( move ua , ul ; move ua , ua * ua ; move 4 - ua , ul )  decode:( move ua , ul ; move ua - ua , 7 ) 
[22885] c:0 is:( move ul + ul , ul ; move ua + ul , ul ; move 3 , ul )  decode:( move 3 , ul ; move 9 , ul ) 
[22886] c:0 is:( move 3 , ul ; move ul , ul - ua ; move ul - ua , ua )  decode:( move 3 , ul ; move ua - ul , 4 ) 
[22887] c:0 is:( move ua , ua * ua ; move ul , 3 ; move ul + ul , ul )  decode:( move ua , ua * ua ; move 3 , 4 ) 
[22888] c:0 is:( move ul , 3 + ul ; move ua - ul , ul ; move ua , ul )  decode:( move ua , 5 ; move ua , ul ) 
[22889] c:0 is:( move ua , ua ; move 3 , ua * ua ; move ua , ul / ua )  decode:( move ua , 0 ; move 9 , 2 ) 
[22890] c:0 is:loop 0 , 3 , ( move 2 , v0 + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 2 , v0 * 4 
[22891] c:0 is:( move 4 + ul , ul ; move ul - ua , ul ; move ua , ul )  decode:loop 0 , 3 , move ul - ua , 4 * 0 3 
[22892] c:0 is:loop 0 , 3 , ( move v0 + v0 , v0 ; move 2 , v0 )  decode:0 loop 0 , 4 , move 4 - ua , 4 * 3 
[22893] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 , v0 + 2 )  decode:loop 0 , 4 , move v0 , 4 
[22894] c:0 is:( move ua , 4 - ul ; move ul , ul ; move ua , ua * ua )  decode:( move ua + ul , 3 ; move ua , 9 ) 
[22895] c:0 is:( loop 0 , 5 , move v0 , v0 + v0 ; move v0 , 0 )  decode:( move ul - ua , 9 ; move 8 , 8 ) 
[22896] c:0 is:( loop 0 , 3 , move 2 , v0 ; move v0 , v0 + v0 )  decode:( move 3 , ul ; move 4 , 0 - 4 ) 
[22897] c:0 is:( loop 0 , 3 , move v0 , v0 + v0 ; move v0 , 2 )  decode:loop 0 , 4 , move ul , v0 + ul 
[22898] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move 2 + v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 9 
[22899] c:0 is:( move 2 + ul , ua ; loop 0 , 3 , move ua , v0 + ul )  decode:loop 0 , 3 , move ua , v0 + ul 
[22900] c:0 is:( move ua - 4 , ul ; move ua , ua - ul ; move ul , ul )  decode:( move 2 , ul ; move ua , ul / 4 ) 
[22901] c:0 is:( move ua , ua ; move ul - 4 , ul ; move ua - ul , ul )  decode:loop 0 , 4 , move ua - 3 , ua / v0 
[22902] c:0 is:( move ua - 2 , ul / ua ; move ul , ul ; move ua , ul )  decode:( move 4 , ul / ua ; move ua , 2 ) 
[22903] c:0 is:( move ua + ul , ul ; move ul , 4 ; move ul + ul , ul )  decode:( move ua , ul ; move 3 , 5 ) 
[22904] c:0 is:( move ua , ua ; move 3 , ul ; move ul - ua , ul / ua )  decode:( move ua , ul / 4 ; move ua , 3 ) 
[22905] c:0 is:( move ua - 3 , ul ; loop 0 , 2 , move ua , v0 + ul )  decode:loop 0 , 3 , move ua - 2 , 2 / v0 
[22906] c:0 is:loop 0 , 3 , ( move v0 , 3 + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move v0 , v0 - 4 
[22907] c:0 is:( move ul , 0 ; loop 0 , 3 , move 3 , ul ; move ua , ul )  decode:loop 0 , 4 , move 3 - ua , ul 
[22908] c:0 is:( move ua + ul , ul ; loop 0 , 3 , move v0 + 2 , ul )  decode:0 0 loop 0 , 4 , move 3 - ua , ul 
[22909] c:0 is:( loop 0 , 4 , move v0 + v0 , v0 ; move v0 , 2 )  decode:loop 0 , 4 , move ua - 3 , 3 
[22910] c:0 is:( loop 0 , 9 , v1 = 3 ; loop 2 , 4 , move 4 , v0 )  decode:loop 0 , 4 , move 4 , 8 
[22911] c:0 is:( loop 0 , 3 , move 3 , v0 ; move v0 , v0 + v0 )  decode:0 loop 0 , 4 , move 3 , v0 + ua 
[22912] c:0 is:( move ua , ua ; move 2 , 3 ; loop 0 , 2 , move ul , ul )  decode:( move ua , 0 ; move 4 , 0 - 4 ) 
[22913] c:0 is:( move ul , ul ; move ul , ul ; move ua + ul , ul / 2 )  decode:( move 2 , 4 / ua ; move 7 , 8 ) 
[22914] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 + 3 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[22915] c:0 is:( move ul , ul ; move ul - ua , ul ; move ul - ua , 4 )  decode:( move ul - ua , 2 ; move 5 , 4 ) 
[22916] c:0 is:( loop 0 , 4 , move v0 , v0 ; move v0 + 2 , v0 )  decode:( move 3 , 6 ; move 5 , 3 ) 
[22917] c:0 is:( move ul , ul - 4 ; move ua , ul - ua ; move ul , ul )  decode:( move 2 , 0 - 4 ; move ua , ul ) 
[22918] c:0 is:loop 0 , 3 , ( move ul , v0 + ua ; move 2 , ua * ua )  decode:loop 0 , 4 , move 4 - ua , 2 + v0 
[22919] c:0 is:loop 0 , 3 , ( move 3 + v0 , v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 2 - ua , 4 * v0 
[22920] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 , v0 + 3 )  decode:loop 0 , 4 , move v0 , 2 - 4 
[22921] c:0 is:( move ul , ua ; move ua , ul ; move ul - ua , ul / 3 )  decode:( move ua , ul ; move 5 , 4 * 3 ) 
[22922] c:0 is:( move ul , ua ; move ua , ul ; move ua - ul , ua / 4 )  decode:( move ua , ul ; move 5 , 3 / 2 ) 
[22923] c:0 is:( move ul , ua / 4 ; move ua , ul + ul ; move ua , ul )  decode:( move ua , 3 / 9 ; move ua , ul ) 
[22924] c:0 is:( loop 0 , 5 , move 2 , v0 + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[22925] c:0 is:( loop 0 , 3 , move v0 , 2 ; move v0 , v0 * v0 )  decode:loop 0 , 3 , move 2 , 4 + v0 
[22926] c:0 is:( loop 0 , 4 , move v0 - 2 , v0 ; move v0 , v0 )  decode:( move 3 , 0 - 4 ; move 3 , 9 ) 
[22927] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 + 4 , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 * 2 
[22928] c:0 is:( loop 0 , 3 , move 4 , v0 + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 * 2 
[22929] c:0 is:( move ua , ul / ua ; loop 0 , 2 , move 2 - ua , v0 )  decode:( move 5 , 0 - 4 ; move 5 , ul ) 
[22930] c:0 is:( move ua , ua ; loop 0 , 5 , move 0 - ul , v0 - ul )  decode:loop 0 , 4 , move ua - 4 , v0 * 8 
[22931] c:0 is:( loop 0 , 3 , move 4 , v0 ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move 3 - ua , v0 
[22932] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , 2 + v0 )  decode:( move 5 , 2 / 4 ; move 8 , 4 ) 
[22933] c:0 is:loop 0 , 3 , ( move v0 + v0 , v0 ; move v0 , 4 )  decode:( move ua - ul , 4 ; move 3 , 4 ) 
[22934] c:0 is:( loop 0 , 3 , move ul - 2 , v0 ; move ua , ul + ul )  decode:( move ua , ua * ua ; move ua , 5 ) 
[22935] c:0 is:( move ua - ul , ua ; loop 0 , 2 , move ua , v0 - 4 )  decode:loop 0 , 4 , move 4 , v0 * 4 
[22936] c:0 is:loop 0 , 3 , ( move v0 , v0 * v0 ; move v0 , 2 )  decode:loop 0 , 4 , move v0 , ua / v0 
[22937] c:0 is:( move ul , 4 ; move ul , ul / ua ; move ua , ua * ua )  decode:( move ua , 9 ; move 2 , ua * ua ) 
[22938] c:0 is:loop 0 , 3 , ( move v0 , v0 * v0 ; move 2 , v0 )  decode:loop 0 , 3 , move 3 , v0 * 2 
[22939] c:0 is:( move ua , ul ; loop 0 , 2 , move ua - ul , 3 - v0 )  decode:loop 0 , 3 , move v0 - ua , 4 * 3 
[22940] c:0 is:( loop 0 , 4 , move v0 , v0 + v0 ; move v0 , 4 )  decode:loop 0 , 4 , move 2 , 0 - ua / v0 
[22941] c:0 is:loop 0 , 3 , ( move ul - v0 , ul ; move ua - 3 , ua )  decode:loop 0 , 4 , move 4 - ua , ul 
[22942] c:0 is:( loop 0 , 2 , move ua - v0 , ul - 4 ; move ua , ul )  decode:loop 0 , 3 , move 2 - ua , v0 - 3 
[22943] c:0 is:( loop 0 , 5 , move 3 , v0 ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move 2 - ua , 0 - v0 
[22944] c:0 is:( loop 0 , 4 , move v0 , 2 ; move v0 * v0 , v0 )  decode:( move 4 , ua / 4 ; move ua , 9 ) 
[22945] c:0 is:loop 0 , 3 , ( move v0 , ul ; move 4 + ul , ua + ul )  decode:loop 0 , 4 , move ua - 2 , 2 / 3 
[22946] c:0 is:( loop 0 , 2 , move 4 - ua , ul ; move ul + v0 , ul )  decode:( move 2 , 3 ; move 4 , 0 - 4 ) 
[22947] c:0 is:( move ul - ua , ul ; loop 0 , 4 , move ul + v0 , 2 )  decode:loop 0 , 4 , move 3 , v0 * 3 
[22948] c:0 is:( loop 0 , 5 , move v0 , v0 + v0 ; move 3 , v0 )  decode:loop 0 , 4 , move 3 , 0 - v0 * 4 
[22949] c:0 is:( move ua , ua + ua ; loop 0 , 5 , move ul + v0 , 4 )  decode:loop 0 , 4 , move 2 + 3 , 0 - 9 
[22950] c:0 is:loop 0 , 2 , loop 1 , 3 , loop 2 , ul , move 2 , v0 - 2  decode:loop 0 , 4 , move ua - 4 , v0 - 4 
[22951] c:0 is:( loop 0 , 6 , move v0 , v0 + v0 ; move 2 , v0 )  decode:0 loop 0 , 4 , move 4 , 4 * v0 
[22952] c:0 is:loop 0 , 3 , ( move v0 + 2 , v0 ; move ul - 2 , 0 )  decode:( move 3 - ua , ul ; move 5 , ul ) 
[22953] c:0 is:( loop 0 , 4 , move v0 , v0 ; move v0 , 4 + v0 )  decode:( move 4 , 0 ; move 4 , 3 * 5 ) 
[22954] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , v0 + 3 )  decode:( move 4 , 9 ; move ua + ul , 4 ) 
[22955] c:0 is:( loop 0 , 4 , move v0 , v0 * v0 ; move v0 , 2 )  decode:loop 0 , 4 , move 2 , v0 - 9 
[22956] c:0 is:loop 0 , 3 , ( move v0 * 3 , v0 ; move v0 , v0 )  decode:( move 0 - ua , ul ; move 4 , 5 ) 
[22957] c:0 is:loop 0 , 2 , loop 1 , 0 , loop 2 , 2 , move ul + v2 , 4  decode:loop 0 , 4 , move v0 , 0 - 9 
[22958] c:0 is:( loop 0 , 3 , move 3 , v0 * v0 ; move v0 , v0 )  decode:( move 3 + 3 , ul ; move 4 , 4 ) 
[22959] c:0 is:( move ua , ua - 4 ; loop 0 , 3 , move ul + v0 , ul )  decode:loop 0 , 4 , move v0 * 2 , 0 - 2 
[22960] c:0 is:( loop 0 , 3 , move 3 , ul + ul ; move ua - v0 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 + 2 
[22961] c:0 is:loop 0 , 3 , ( move v0 - 4 , v0 ; move v0 , v0 )  decode:0 loop 0 , 3 , move 0 - 4 , v0 
[22962] c:0 is:( loop 0 , 4 , move 3 - v0 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 2 , v0 + v0 
[22963] c:0 is:( loop 0 , 3 , move ua / v0 , ul + ul ; move 2 , ua )  decode:loop 0 , 3 , move ua / v0 , 2 
[22964] c:0 is:loop 0 , 2 , loop 1 , 0 , loop 2 , 3 , move v0 - 4 , ul  decode:loop 0 , 4 , move 2 - ua , 4 * 3 
[22965] c:0 is:loop 0 , 0 , loop 1 , 2 , loop 2 , 3 , move 4 - ua , v2  decode:loop 0 , 4 , move 3 - ua , 2 
[22966] c:0 is:( loop 0 , 6 , move 3 , v0 ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move 5 , 0 - 9 
[22967] c:0 is:loop 0 , 3 , ( move v0 * v0 , v0 ; move v0 , 4 )  decode:( move 5 , 2 / 4 ; move 2 , 4 ) 
[22968] c:0 is:( loop 0 , 5 , move v0 , v0 * v0 ; move v0 , 2 )  decode:loop 0 , 4 , move 0 - 4 , v0 * 4 
[22969] c:0 is:( loop 0 , 3 , loop 1 , ul , move ua , 3 ; move ul , ul )  decode:loop 0 , 3 , move ua , 3 
[22970] c:0 is:( move ua , ua ; move ul , 2 ; loop 0 , 4 , move 4 , ul )  decode:loop 0 , 4 , move 0 - 5 , 0 - v0 
[22971] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 * 4 , v0 )  decode:loop 0 , 4 , move 3 , v0 * v0 
[22972] c:0 is:( move ul + ul , ua ; loop 0 , 6 , move v0 , 2 + ul )  decode:loop 0 , 4 , move 3 , 0 - v0 
[22973] c:0 is:( loop 0 , 4 , move v0 , v0 ; move v0 * 3 , v0 )  decode:( move 3 , 4 ; move ua + 3 , 3 ) 
[22974] c:0 is:( move 3 - ua , ul - ua ; loop 0 , 4 , move v0 , ul )  decode:( move 3 , 2 ; move ua - ul , ul ) 
[22975] c:0 is:( move ua + ul , 0 ; loop 2 , 4 , move v2 , ua - ul )  decode:loop 0 , 4 , move 3 , 4 * 6 
[22976] c:0 is:( loop 0 , 6 , move v0 - 2 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , 3 - v0 - 3 
[22977] c:0 is:( move ul , 3 ; loop 0 , 4 , move ul + ul , ul + v0 )  decode:loop 0 , 4 , move ua - 4 , 4 
[22978] c:0 is:( loop 0 , 3 , move v0 * v0 , v0 ; move v0 , 4 )  decode:( move 5 , 3 ; move 3 , 4 ) 
[22979] c:0 is:( move 0 - ul , ul / ua ; loop 0 , 5 , move ua , v0 )  decode:loop 0 , 4 , move 4 + 3 , 0 - v0 
[22980] c:0 is:( loop 0 , 6 , move v0 , v0 - 2 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , = 4 / 4 
[22981] c:0 is:( loop 0 , 5 , move v0 , 4 ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move 3 , 3 * 8 
[22982] c:0 is:( loop 0 , 5 , move v0 + v0 , v0 ; move 4 , v0 )  decode:loop 0 , 4 , move 4 + v0 , 0 - 2 
[22983] c:0 is:( loop 0 , 5 , move v0 + v0 , 4 ; move v0 , v0 )  decode:loop 0 , 4 , move 4 + v0 , 2 * 5 
[22984] c:0 is:( move ua , ua + ul ; loop 0 , 6 , move ul - v0 , 2 )  decode:loop 0 , 4 , move ua - v0 , 4 * 8 
[22985] c:0 is:( loop 0 , 3 , move v0 - 4 , ua + ul ; move ul , ul )  decode:loop 0 , 3 , move 0 - 3 , ul 
[22986] c:0 is:( loop 0 , 5 , move v0 + 4 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move ua + ul , 0 - 4 
[22987] c:0 is:( move ua + ul , ua + 3 ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move v0 + 4 , v0 0 4 * 
[22988] c:0 is:( move ua , 2 - ul ; loop 0 , 6 , move v0 , ua * ua )  decode:0 0 loop 0 , 4 , move v0 + v0 , 4 
[22989] c:0 is:( move 3 + ul , ua - ul ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 4 , move 3 , 3 + ul - v0 
[22990] c:0 is:( loop 0 , 6 , move v0 , v0 * v0 ; move v0 , 2 )  decode:( move 9 , 9 ; move ua , ua / 3 ) 
[22991] c:0 is:( move 2 , ua - ul ; loop 0 , 5 , move v0 - ul , ul )  decode:loop 0 , 4 , move 2 , v0 - 4 
[22992] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , 2 / v0 )  decode:( move 4 , 9 ; move ua + ul , 2 ) 
[22993] c:0 is:( loop 0 , 6 , move 2 , v0 * v0 ; move v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 / ua 
[22994] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , v0 * 3 )  decode:loop 0 , 4 , move 3 , v0 / 7 
[22995] c:0 is:( move ua - ul , 3 ; loop 0 , 6 , move v0 , ua + ul )  decode:loop 0 , 4 , move 3 + v0 , 3 / 3 
[22996] c:0 is:( loop 0 , 6 , move 4 , v0 ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move 4 + v0 , 0 + 9 
[22997] c:0 is:( loop 0 , 5 , move 4 - v0 , v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 4 , v0 + 9 
[22998] c:0 is:( loop 0 , 6 , move v0 , v0 + v0 ; move 4 , v0 )  decode:loop 0 , 4 , move v0 + 4 , 9 / 3 
[22999] c:0 is:( move ul - ua , ua + ua ; loop 0 , 6 , move v0 , 4 )  decode:loop 0 , 4 , move ul - ua , 0 - v0 
[23000] c:0 is:( loop 0 , 4 , move v0 , v0 ; move 4 , v0 * v0 )  decode:( move 4 , 4 / 3 ; move 4 , 9 ) 
[23001] c:0 is:( move ul - 3 , ul + ul ; loop 0 , 4 , move v0 , ul )  decode:( move 4 , 9 ; move 4 , ul ) 
[23002] c:0 is:loop 0 , ul , loop 1 , 3 , loop 2 , 2 , move 4 , 2 + v1  decode:loop 0 , 4 , move v0 - ua , 0 - 9 
[23003] c:0 is:( move ua , ua * ua ; loop 0 , 5 , move v0 , 4 + ul )  decode:( move 8 , 6 ; move ua , 3 ) 
[23004] c:0 is:( move 4 , ua + ua ; loop 0 , 5 , move ul - v0 , ul )  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[23005] c:0 is:( move 0 - ul , 2 ; loop 0 , 4 , move 3 + v0 , v0 )  decode:loop 0 , 3 , move ul - ua , 2 - v0 
[23006] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 - ul , 3 + ul )  decode:( move ua + ul , ul ; move 2 , 9 ) 
[23007] c:0 is:( move ul , ul ; ( move ua - ul , ul ; move ul , ul ) )  decode:( move ua , 2 ; move ul , ul ) 
[23008] c:0 is:( move ua , ul ; loop 0 , 6 , loop 1 , ul , move ua , 2 )  decode:loop 0 , 4 , move ua + ul , 0 - 2 
[23009] c:0 is:( move ul , ua - ul ; loop 0 , 3 , move v0 - 4 , ul )  decode:loop 0 , 4 , move ua - 4 , v0 / 3 
[23010] c:0 is:( move ua + ul , ul / 2 ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 4 , move 3 , 0 - 9 
[23011] c:0 is:( move ul , 2 ; loop 0 , 4 , move 3 , ul ; move ul , ul )  decode:loop 0 , 4 , move 3 - ua , 3 / v0 
[23012] c:0 is:( loop 0 , 5 , move 4 - ul , ua + v0 ; move ua , ul )  decode:( move ua , ua / 3 ; move 3 , 9 ) 
[23013] c:0 is:( loop 0 , 6 , move v0 - 4 , ul ; move ul , ua + ua )  decode:loop 0 , 3 , move 4 , 2 * 3 - v0 
[23014] c:0 is:( move 3 , ul / ua ; loop 0 , 3 , move ul , ul - v0 )  decode:( move 3 , 4 / 6 ; move 3 , ul ) 
[23015] c:0 is:( move ua + ul , 4 / ua ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 4 , move 3 , 4 + 4 / v0 
[23016] c:0 is:( loop 0 , 3 , move 2 * 2 , v0 ; move ua / v0 , 0 )  decode:loop 0 , 4 , move ua - 3 , v0 
[23017] c:0 is:( v0 = ua + 3 ; move v0 , 0 - 2 ; move v0 , 3 )  decode:( move 9 , 4 ; move ua + 3 , 4 ) 
[23018] c:0 is:( move ul + ul , 4 + ul ; loop 0 , 5 , move v0 , ul )  decode:( move ua , 8 ; move 5 , 2 ) 
[23019] c:0 is:( move ua , ua * ua ; loop 0 , 5 , move ua / v0 , 3 )  decode:( move ua , 0 - 8 ; move ua , 3 ) 
[23020] c:0 is:( loop 0 , 5 , move v0 , v0 * v0 ; move v0 , 4 )  decode:loop 0 , 3 , move 4 , 3 * 4 2 
[23021] c:0 is:( move ua , ul + ul ; loop 0 , 5 , move v0 , ua / 3 )  decode:( move 8 , ua / 3 ; move ua , 4 ) 
[23022] c:0 is:( loop 0 , 5 , move ul , 4 + ul ; move v0 , ul + ul )  decode:( move ua - ul , 5 ; move 2 , 4 ) 
[23023] c:0 is:loop 0 , 2 , ( move v0 , 0 ; move ua - v0 , 4 * 3 )  decode:loop 0 , 2 , move ua , 3 * 3 
[23024] c:0 is:( loop 0 , 6 , move 4 - v0 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , v0 + 2 
[23025] c:0 is:loop 0 , 2 , ( move v0 , v0 - ua ; move 3 + 2 , 4 )  decode:( move ua , 4 ; move 4 , 5 ) 
[23026] c:0 is:( loop 0 , 6 , move v0 , v0 ; move v0 , v0 * 3 )  decode:loop 0 , 3 , move v0 - ua , 0 0 4 
[23027] c:0 is:( loop 0 , 6 , move v0 , v0 ; move v0 / 2 , v0 )  decode:loop 0 , 4 , move 3 - ua , 7 * v0 
[23028] c:0 is:loop 0 , 3 , ( move 4 , ul ; move 2 + v0 , 2 + v0 )  decode:loop 0 , 4 , move ua - v0 , 4 * 4 
[23029] c:0 is:( loop 0 , 6 , move v0 , ua + 2 ; move v0 , 0 + 4 )  decode:loop 0 , 4 , move ua - v0 , 4 / 4 
[23030] c:0 is:( move ua / 2 , ul ; loop 0 , 6 , move ul , ul + v0 )  decode:( move 4 , ul ; move 4 , 4 * 4 ) 
[23031] c:0 is:( move ul / ua , ul ; loop 0 , 5 , move v0 + ua , 4 )  decode:loop 0 , 4 , move 0 - 4 + 4 , 4 / 0 
[23032] c:0 is:( move ul , ua - ul ; loop 0 , 5 , move v0 , ul - 4 )  decode:loop 0 , 3 , move 3 - ua , 3 
[23033] c:0 is:( move ua - 2 , ul / ua ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 4 , 3 * 0 4 
[23034] c:0 is:( move ua + ul , ul / 3 ; loop 0 , 5 , move ul , v0 )  decode:( move 2 , ul / 4 ; move ua , 3 ) 
[23035] c:0 is:( move ua , ua - 3 ; loop 1 , 6 , move ul , ul + v1 )  decode:( move 3 - ua , 0 ; move 4 , 4 ) 
[23036] c:0 is:( move 2 , 3 + ul ; loop 0 , 4 , move v0 + v0 , 3 )  decode:loop 0 , 3 , move 4 , 4 - v0 - 3 
[23037] c:0 is:loop 0 , 2 , ( move 2 / v0 , v0 ; move ul , 3 + 2 )  decode:( move 2 , 0 ; move 4 , ul ) 
[23038] c:0 is:( move ua - ul , 4 ; loop 0 , 5 , move ul , ul - v0 )  decode:( move ul - ua , 4 ; move 3 , 7 ) 
[23039] c:0 is:( move 2 + ul , 0 ; v0 = 4 + 3 ; move v0 , v0 )  decode:( move 3 , 0 ; move ua + ul , 7 ) 
[23040] c:0 is:( move ul , ua - ul ; loop 0 , 4 , move 3 , ul / v0 )  decode:loop 0 , 4 , move 3 , v0 - 8 
[23041] c:0 is:( move 3 , 0 ; move 3 , 4 ; loop 0 , 3 , move v0 , ul )  decode:loop 0 , 4 , move 2 , 4 / ul / v0 
[23042] c:0 is:( move ul - ua , ul - 4 ; loop 1 , 4 , move ua , v1 )  decode:loop 0 , 3 , move v0 + ua , 0 - 3 
[23043] c:0 is:( move 3 , ul ; loop 0 , 6 , move ul + ul , ul - v0 )  decode:( move ua , ua / 3 ; move ua , 4 ) 
[23044] c:0 is:( move ul - 2 , ul / ua ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move 4 / v0 , 2 - 3 
[23045] c:0 is:loop 0 , 2 , ( move v0 - ua , v0 ; move 2 , 4 * 2 )  decode:loop 0 , 4 , move v0 + 4 , 0 - 4 
[23046] c:0 is:( loop 0 , 6 , move ua + ul , ua / 3 ; move ul , v0 )  decode:loop 0 , 3 , move ua + ul , ua / 3 
[23047] c:0 is:( move ul - ua , ul / ua ; loop 0 , 6 , move 2 , v0 )  decode:loop 0 , 4 , move 4 , 0 - v0 * 3 
[23048] c:0 is:( v0 = ua * ua ; loop 1 , 5 , move ua - ul , v0 )  decode:loop 0 , 4 , move 5 , ua * ua 
[23049] c:0 is:( move ul , 2 + 2 ; loop 0 , 5 , move v0 + v0 , 4 )  decode:loop 0 , 4 , move ua , 2 * 5 
[23050] c:0 is:( move ul , 0 ; loop 0 , 4 , move 3 / v0 , v0 - 2 )  decode:( move ua , ul / ul ; move 3 , 4 ) 
[23051] c:0 is:( move ua - ul , ul ; loop 0 , 5 , move v0 , 4 / ua )  decode:loop 0 , 4 , move 3 - ua , v0 - 8 
[23052] c:0 is:( move ua , ua - 4 ; loop 0 , 6 , move ul , v0 / ua )  decode:( move 3 , 0 ; move 9 , ul ) 
[23053] c:0 is:( move ua - ul , 3 / ua ; loop 0 , 6 , move v0 , ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 0 5 / 
[23054] c:0 is:( move 4 , 4 + ul ; loop 0 , 3 , move 2 + v0 , v0 )  decode:( move 5 , 5 ; move ua , 4 * 3 ) 
[23055] c:0 is:( loop 0 , 6 , move v0 , v0 ; move v0 / 4 , v0 )  decode:loop 0 , 4 , move 4 , v0 - 4 
[23056] c:0 is:loop 0 , 3 , ( move 2 , v0 * 2 ; move v0 / 2 , ua )  decode:loop 0 , 3 , move ua - 4 , v0 + 4 
[23057] c:0 is:( v0 = ul / ua ; move ua , v0 + 4 ; move ua , 4 )  decode:( move 0 - ua , ul ; move ua , 4 ) 
[23058] c:0 is:( move 4 + 3 , ua + 2 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , 9 / v0 
[23059] c:0 is:( move 0 - 3 , ul / 2 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 4 , v0 * 4 
[23060] c:0 is:( move 4 , ua - ul ; loop 0 , 6 , move ul , ua / v0 )  decode:( move 2 , 4 ; move ua , 0 - 4 ) 
[23061] c:0 is:( move 4 + ul , 3 ; loop 0 , 3 , move v0 + v0 , 4 )  decode:loop 0 , 4 , move 3 , 0 - 4 * v0 
[23062] c:0 is:( move 4 , 0 - 4 ; loop 0 , 5 , move v0 + ul , v0 )  decode:loop 0 , 4 , move 5 , 3 + 3 / v0 
[23063] c:0 is:( loop 0 , 5 , move ua , 4 ; v1 = ul ; move ul , ua )  decode:loop 0 , 4 , move ua + v0 , 0 - 9 
[23064] c:0 is:loop 0 , 2 , ( move 4 , v0 ; loop 4 , 0 , move ua , 4 )  decode:loop 0 , 4 , move v0 * 4 , 0 * 4 
[23065] c:0 is:( v0 = ul / 3 ; move ua , ul ; move ua , v0 - 4 )  decode:loop 0 , 2 , move v0 - ua , 0 - 6 
[23066] c:0 is:( loop 0 , 5 , move 0 - 3 , 4 - ul ; move v0 , v0 )  decode:loop 0 , 4 , move 3 4 , 4 * 4 
[23067] c:0 is:( move ul / ua , 2 ; loop 1 , 6 , move v1 - ul , ul )  decode:0 loop 0 , 4 , move 3 , 6 - 3 
[23068] c:0 is:( move 4 , ul ; loop 1 , 2 , loop 2 , 2 , move 2 , v1 )  decode:( move ua + 3 , ul ; move 3 , 5 ) 
[23069] c:0 is:loop 0 , 3 , ( move 4 * v0 , 0 ; move v0 , ua / 4 )  decode:( move 9 , ua / 2 ; move 4 , 8 ) 
[23070] c:0 is:( move 2 - 4 , 2 + ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[23071] c:0 is:( move ul / ua , ul ; loop 0 , 5 , move ua / 4 , v0 )  decode:loop 0 , 4 , move 2 , 2 / v0 
[23072] c:0 is:( loop 0 , 2 , move 3 , ua ; loop 1 , 5 , move 4 , v0 )  decode:loop 0 , 4 , move 4 + v0 , 0 - 3 
[23073] c:0 is:( loop 0 , 4 , move 0 - 4 , v0 * 4 ; move v0 , ul )  decode:loop 0 , 4 , move 4 , 4 * v0 
[23074] c:0 is:( loop 0 , ul , loop 1 , 6 , move 4 , 2 ; move v1 , 0 )  decode:loop 0 , 4 , move v0 + 4 , 9 
[23075] c:0 is:( move 2 , ua / 2 ; loop 0 , 6 , move 3 - v0 , v0 )  decode:( move ul - ua , 0 ; move 3 , 4 ) 
[23076] c:0 is:( loop 0 , 6 , move ul , 4 ; move v0 + 2 , 4 + v0 )  decode:( move 2 , 0 - 4 ; move 7 , 4 ) 
[23077] c:0 is:( move 4 , ul ; loop 0 , 2 , loop 1 , 3 , move v1 , 4 )  decode:( move 3 , ua / 4 ; move ua , 9 ) 
[23078] c:0 is:( move ua , ul / ua ; v0 = 3 ; move 4 / v0 , ul )  decode:( move 2 , ul / 4 ; move ua , ul ) 
[23079] c:0 is:( move 2 , 3 ; loop 0 , 5 , move 4 / v0 , v0 + ua )  decode:( move ua + 2 , 3 ; move 5 , 4 ) 
[23080] c:0 is:( loop 0 , 5 , move 3 / 2 , v0 ; move 3 , ul + v0 )  decode:0 loop 0 , 4 , move ul + v0 , 9 
[23081] c:0 is:( move 4 , ua + 2 ; loop 0 , 6 , move v0 , v0 * 3 )  decode:loop 0 , 4 , move 0 - 4 , v0 + 4 
[23082] c:0 is:loop 0 , 3 , ( v1 = 3 ; move 3 , ua ; move v1 , 2 )  decode:loop 0 , 3 , move ua / v0 , 2 
[23083] c:0 is:( move ua , 4 ; loop 0 , 6 , move 3 / v0 , 2 + v0 )  decode:( move ua , 4 ; move ua , 0 - 2 ) 
[23084] c:0 is:( move ua , 2 / 3 ; loop 0 , 4 , move v0 , v0 / 3 )  decode:( move ua + ul , 4 / move 4 , 5 ) 
[23085] c:0 is:( v0 = 4 ; loop 1 , 5 , move 2 + v0 , ua - v0 )  decode:loop 0 , 4 , move 0 - ua , 0 - 4 
[23086] c:0 is:( v0 = 0 - 3 ; loop 1 , 6 , move v0 , v0 - ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - 4 
[23087] c:0 is:( move ua , 4 * 3 ; loop 0 , 4 , move v0 , 2 / v0 )  decode:( move ua , 5 ; move 5 , 5 ) 
[23088] c:0 is:( move 3 - 4 , ua - 4 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 3 , move 3 - ua , v0 + 2 
[23089] c:0 is:( loop 0 , 4 , move v0 / 2 , 4 ; move 3 , ua / v0 )  decode:( move 3 , 0 - 4 ; move 3 , 2 ) 
[23090] c:0 is:( loop 0 , 6 , move 4 - ua , 2 + v0 ; v1 = v0 )  decode:( move 3 , 9 ; move ua + 2 , 8 ) 
[23091] c:0 is:( v0 = 2 - 3 ; loop 1 , 5 , move v0 - v1 , ul )  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[23092] c:0 is:( v0 = 4 ; move v0 , 2 ; loop 1 , 5 , move 3 , ul )  decode:loop 0 , 4 , move 4 , 5 * 2 
[23093] c:0 is:( v0 = 3 ; loop 1 , 5 , move v0 , 4 ; move 2 , ul )  decode:loop 0 , 4 , move 2 - ua , 0 - v0 
[23094] c:0 is:( move ul , 4 * 4 ; loop 0 , 4 , move v0 , v0 / 3 )  decode:( move 3 , 0 - 9 ; move 4 , 5 ) 
[23095] c:0 is:( v0 = ua / 4 ; loop 1 , 3 , move v1 + v0 , 4 )  decode:loop 0 , 3 , move ua - 4 , v0 + 4 
[23096] c:0 is:loop 0 , 7 , ( v1 = v0 / 3 ; move v1 + ua , 2 )  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[23097] c:0 is:( v0 = ul / 2 ; loop 1 , 5 , move v1 - 3 , v0 )  decode:( move 5 , 4 ; move ua - 3 , 8 ) 
[23098] c:0 is:loop 0 , 7 , ( move v0 - 3 , 4 - v0 ; v1 = ua )  decode:loop 0 , 3 , move 3 - ua , 9 / v0 
[23099] c:0 is:( v0 = ua + 4 ; loop 1 , 5 , move 3 , v0 / v1 )  decode:loop 0 , 3 , move ul - ua , 0 - 9 
[23100] c:0 is:( loop 0 , 7 , move v0 / 4 , ul + v0 ; v1 = 2 )  decode:loop 0 , 4 , move ul , 4 + 4 
[23101] c:0 is:( move ua + ul , ua ; move ul , ua * ua ; move ua , ul )  decode:( move ua + ul , 0 ; move ua , 7 ) 
[23102] c:0 is:loop 0 , 4 , ( v1 = 4 / ua ; move v0 , v1 * 3 )  decode:loop 0 , 2 , move 3 , v0 - 9 
[23103] c:0 is:loop 0 , 7 , ( v1 = v0 ; move 3 - ua , 4 * v0 )  decode:loop 0 , 4 , move v0 * 4 , ua * 4 
[23104] c:0 is:( move ua , ua + ul ; move ua , ua * ua ; move ul , ul )  decode:( move ua , ul ; move 8 , ua * ua ) 
[23105] c:0 is:( move ua , ul ; move ul , ua - ul ; move ua , ua - ul )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[23106] c:0 is:( move ua , ua * ua ; move ul , ul ; move ua + ul , ul )  decode:( move 8 , ua * 2 ; move 7 , 2 ) 
[23107] c:0 is:loop 0 , 7 , ( move ua - 4 , 3 / v0 ; v1 = v0 )  decode:loop 0 , 4 , move 4 , 4 + 3 / v0 
[23108] c:0 is:( v0 = 2 - 4 ; loop 1 , 6 , move ul , v0 / v1 )  decode:loop 0 , 3 , move v0 - 3 , 3 / 3 
[23109] c:0 is:( move ul , ul ; move ua , ul - ua ; move ua , ua * ua )  decode:( move ua + ul , 2 ; move ua , 5 ) 
[23110] c:0 is:( move 2 , 3 ; ( move ua , 4 * 2 ; move 3 , 2 - ua ) )  decode:( move 4 , 3 ; move ua , 0 - 4 ) 
[23111] c:0 is:loop 0 , 7 , ( v1 = 2 / 3 ; move v0 , ua * v1 )  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[23112] c:0 is:( move ua , ul ; move ul , ua * ua ; move ua + ul , ul )  decode:loop 0 , 2 , move ua + ul , 9 + v0 
[23113] c:0 is:( v0 = ua - 4 ; loop 1 , 6 , move v0 , 4 * v1 )  decode:loop 0 , 4 , move 3 , 4 * 6 
[23114] c:0 is:( move ua , ul ; move ul - ua , ul ; move ua + ul , ul )  decode:loop 0 , 3 , move ua , 4 * 0 - v0 
[23115] c:0 is:( v0 = 4 ; loop 1 , 7 , move v1 - ul , v1 - 3 )  decode:loop 0 , 3 , move ua - 2 , 0 - v0 
[23116] c:0 is:loop 0 , 7 , ( v1 = v0 ; move ua / 4 , 2 / v0 )  decode:loop 0 , 4 , move 3 - ua , 3 / v0 
[23117] c:0 is:( ( move 0 , ua ; move ua , 3 ) ; move 4 + 3 , 4 * 4 )  decode:loop 0 , 3 , move v0 - ua , 0 - 9 
[23118] c:0 is:( move ul , ul ; move ua , ua - ul ; move ul - ua , ul )  decode:( move ua + ul , 0 ; move 5 , ul ) 
[23119] c:0 is:( loop 0 , 9 , v1 = 2 ; loop 2 , 5 , move ua , v0 )  decode:loop 0 , 4 , move ua , 8 
[23120] c:0 is:( move ul - ua , ua ; move ul , ul ; move ul - ua , ul )  decode:( move ul - ua , 0 ; move 5 , ul ) 
[23121] c:0 is:( move ua , 0 ; loop 0 , 2 , move ul , ul ; move ua , ul )  decode:loop 0 , 4 , move 3 , 0 - v0 
[23122] c:0 is:loop 0 , 3 , ( move v0 + v0 , v0 ; move ua , v0 )  decode:loop 0 , 4 , move ua , 2 * v0 
[23123] c:0 is:( move ua - ul , ul / ua ; move ul , ul ; move ua , ul )  decode:( move 6 , ul / 4 ; move ua , 2 ) 
[23124] c:0 is:loop 0 , 3 , ( move v0 + ul , 0 ; move 0 - ua , v0 )  decode:loop 0 , 3 , move ua , ua / v0 
[23125] c:0 is:( loop 0 , 4 , move v0 + v0 , v0 ; move ua , v0 )  decode:loop 0 , 4 , move 4 , 3 
[23126] c:0 is:loop 0 , 3 , ( move v0 , ua - v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - v0 , 0 - 3 
[23127] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 + v0 , v0 )  decode:loop 0 , 3 , move 3 , v0 + 2 
[23128] c:0 is:( move ul , ul ; move ul , ul / ua ; move ua + ul , ul )  decode:( move 2 , ul ; move ua + ul , ul ) 
[23129] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 - ua , v0 )  decode:loop 0 , 4 , move ua - ul , v0 * 2 
[23130] c:0 is:loop 0 , 3 , ( move v0 + ul , v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 3 , 4 - v0 
[23131] c:0 is:loop 0 , 2 , loop 1 , ul , loop 2 , 2 , move ua , 2 + v0  decode:loop 0 , 3 , move ua + v0 , ua - 3 
[23132] c:0 is:( move ul - ua , ul / ua ; move ua , ul ; move ul , ul )  decode:( move 5 , 0 - 4 ; move 7 , 2 ) 
[23133] c:0 is:loop 0 , 3 , ( move v0 + v0 , v0 ; move ul , v0 )  decode:loop 0 , 3 , move 3 - ua , 4 / v0 
[23134] c:0 is:( move ua , ua + ua ; loop 0 , 5 , move ul + v0 , ul )  decode:loop 0 , 4 , move ul - ua , v0 + 2 
[23135] c:0 is:loop 0 , 3 , ( move 0 - 2 , ua + ua ; move v0 , v0 )  decode:( move ul - ua , ul ; move 3 , 4 ) 
[23136] c:0 is:( loop 0 , 4 , move v0 , v0 + v0 ; move v0 , ul )  decode:( move ua , 9 ; move 2 , 4 ) 
[23137] c:0 is:( loop 0 , 5 , move v0 , v0 + v0 ; move ua , v0 )  decode:( move ua + 3 , 2 ; move ua , 7 ) 
[23138] c:0 is:loop 0 , ul , loop 1 , 5 , move v0 - v1 , v1 + v1  decode:( move 5 , 9 / 5 ; move 4 , 8 ) 
[23139] c:0 is:loop 0 , 3 , ( move v0 * v0 , v0 ; move ua , v0 )  decode:loop 0 , 4 , move v0 + 4 , 2 
[23140] c:0 is:( loop 0 , 4 , move ul , v0 + v0 ; move v0 , v0 )  decode:loop 0 , 2 , move 3 , 4 * 0 - 4 
[23141] c:0 is:( move ua , ua ; move ua , 3 ; loop 0 , 3 , move ul , ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[23142] c:0 is:( loop 0 , 4 , move v0 , ua + ul ; move ul + ul , ua )  decode:( move 5 , ul ; move 3 , 4 / 3 ) 
[23143] c:0 is:( loop 0 , 5 , move v0 + v0 , v0 ; move ua , v0 )  decode:0 loop 0 , 4 , move 3 + 4 , 0 - 4 
[23144] c:0 is:( move ua + ul , ul ; loop 0 , 3 , move v0 + ul , ul )  decode:( move ua + 2 , ul ; move 4 , 2 ) 
[23145] c:0 is:loop 0 , 3 , ( move v0 , ul ; move v0 , v0 * v0 )  decode:( move 3 , 4 ; move 2 , 0 - 4 ) 
[23146] c:0 is:( loop 0 , 6 , move v0 , v0 + v0 ; move ua , v0 )  decode:loop 0 , 3 , move ua , v0 - 9 
[23147] c:0 is:( move ul + ul , ul ; loop 0 , 3 , move v0 + ul , ul )  decode:loop 0 , 3 , move v0 + ul , ul 
[23148] c:0 is:( loop 0 , 4 , move v0 , v0 * v0 ; move ua , v0 )  decode:( move 3 , 4 / 3 ; move ua , 3 ) 
[23149] c:0 is:loop 0 , 3 , ( move v0 , v0 * v0 ; move v0 , ul )  decode:( move 3 , 9 + 2 ; move 3 , 4 ) 
[23150] c:0 is:loop 0 , 6 , loop 1 , ul , move v1 - v0 , v0 * v0  decode:( move 3 , 5 ; move ua + ul , 7 ) 
[23151] c:0 is:loop 0 , ul , loop 1 , 6 , move v0 - v1 , v0 - v1  decode:( move ua , 9 ; move 5 , 0 - 4 ) 
[23152] c:0 is:loop 0 , 3 , ( move v0 * v0 , ul ; move v0 , v0 )  decode:( move 5 , 4 ; move 3 , 2 ) 
[23153] c:0 is:loop 0 , 3 , ( move v0 , v0 * v0 ; move ul , v0 )  decode:( move 3 , 0 ; move 3 , 4 ) 
[23154] c:0 is:( loop 0 , 5 , move ul + v0 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 2 - ua , 0 - 0 4 0 2 / 
[23155] c:0 is:( move ua + ul , ua + ul ; loop 0 , 5 , move v0 , ul )  decode:( move ua + ul , ul ; move 7 , 5 ) 
[23156] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 * v0 , v0 )  decode:( move 3 , 9 ; move 4 , 0 - 4 ) 
[23157] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 + ul , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 - 9 
[23158] c:0 is:( move ua + ul , ul ; loop 0 , 4 , move v0 + ul , ul )  decode:loop 0 , 4 , move 4 , ul - v0 
[23159] c:0 is:loop 0 , 3 , ( move ul , v0 ; move v0 , v0 * v0 )  decode:loop 0 , 3 , move 2 , v0 + 4 
[23160] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua / v0 , v0 )  decode:loop 0 , 3 , move ua , v0 / 9 
[23161] c:0 is:( loop 0 , 4 , move v0 , v0 ; move ua , v0 * v0 )  decode:( move 3 , ul ; move ua , 3 * 5 ) 
[23162] c:0 is:( loop 0 , 5 , move v0 , ul + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[23163] c:0 is:( loop 0 , 4 , move v0 , v0 * v0 ; move v0 , ua )  decode:( move 3 , 4 + 3 ; move ua , 8 ) 
[23164] c:0 is:loop 0 , 2 , ( move 2 - v0 , 0 ; move ul - ua , v0 )  decode:loop 0 , 2 , move ul - ua , v0 / 3 
[23165] c:0 is:( loop 0 , 4 , move v0 , v0 ; move v0 , v0 / ua )  decode:( move 3 , 0 ; move ua , 0 - 4 ) 
[23166] c:0 is:( loop 0 , 5 , move v0 , ul - v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 3 , 0 - v0 
[23167] c:0 is:( loop 0 , 4 , move v0 , v0 * v0 ; move v0 , ul )  decode:loop 0 , 3 , move 3 , v0 - 4 
[23168] c:0 is:( move 3 , 4 ; ( move 3 * 2 , ua / 4 ; move ua , 4 ) )  decode:0 loop 0 , 4 , move 4 , 2 + v0 0 
[23169] c:0 is:( move ua - ul , ul ; loop 0 , 4 , move v0 , ua - ul )  decode:loop 0 , 4 , move v0 - 4 , 4 * 4 
[23170] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , v0 + v0 )  decode:loop 0 , 4 , move 3 0 - 3 , 3 
[23171] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua , v0 * v0 )  decode:loop 0 , 3 , move v0 - ua , 4 * 4 
[23172] c:0 is:( loop 0 , 6 , move v0 , v0 + v0 ; move ul , v0 )  decode:loop 0 , 4 , move 4 , v0 * 9 
[23173] c:0 is:loop 0 , 3 , ( move v0 , ul / v0 ; move v0 , v0 )  decode:loop 0 , 3 , move v0 + ul , 3 / 2 
[23174] c:0 is:( loop 0 , 5 , move v0 , v0 * v0 ; move ua , v0 )  decode:loop 0 , 4 , move ua - 2 , v0 + 4 
[23175] c:0 is:( move ul - ua , ul - ua ; loop 0 , 4 , move v0 , ul )  decode:( move 3 , 9 ; move ua , 4 / 4 ) 
[23176] c:0 is:( loop 0 , 5 , move v0 , v0 - ul ; move v0 , v0 )  decode:loop 0 , 4 , move ua - 3 , 2 / v0 
[23177] c:0 is:( loop 0 , 5 , move ul - v0 , ua + ul ; move ua , ul )  decode:loop 0 , 3 , move 2 - ua , 3 + v0 
[23178] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 , ul / v0 )  decode:( move 3 , ua / 4 ; move 3 , 4 ) 
[23179] c:0 is:( loop 0 , 5 , move v0 , v0 * v0 ; move v0 , ua )  decode:( move ua , ua / 3 ; move ua , 9 ) 
[23180] c:0 is:( loop 0 , 5 , move v0 - ul , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , 0 - 9 
[23181] c:0 is:loop 0 , 2 , ( move ua + ul , 3 - v0 ; move v0 , 2 )  decode:( move ua + ul , 3 ; move 7 , 4 ) 
[23182] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , ua / v0 )  decode:loop 0 , 4 , move 3 , 3 *  v0 
[23183] c:0 is:( loop 0 , 6 , move ul - v0 , v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , 3 * 6 
[23184] c:0 is:( move ua , ul ; loop 0 , 4 , move ul + ul , ua / v0 )  decode:( move 3 , ul ; move ua + 4 , ul ) 
[23185] c:0 is:( move ul - ua , ul ; loop 0 , 4 , move ul - v0 , ul )  decode:( move ul - ua , ul ; move 4 , 4 ) 
[23186] c:0 is:( loop 0 , 6 , move v0 , v0 ; move ul - v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[23187] c:0 is:( move ua , ul + ul ; loop 0 , 6 , move ul - ua , v0 )  decode:loop 0 , 4 , move ua + ul , v0 - 5 
[23188] c:0 is:( move ua + 2 , 2 ; loop 0 , 4 , move v0 + v0 , ul )  decode:( move 9 , 2 ; move ua + ul , 4 ) 
[23189] c:0 is:loop 0 , 3 , ( move 3 , ua - v0 ; move v0 , 0 - ul )  decode:loop 0 , 4 , move 3 , 0 - v0 * 2 
[23190] c:0 is:( move ul - ua , ua ; loop 0 , 6 , move ul , v0 + ul )  decode:( move 3 , 2 ; move 4 , 0 - 4 ) 
[23191] c:0 is:loop 0 , 3 , ( move ul + ul , 0 ; move v0 - 3 , v0 )  decode:( move 3 , 0 ; move 3 , 0 - 4 ) 
[23192] c:0 is:( move 3 - ua , 0 ; loop 0 , 4 , move v0 , ul + v0 )  decode:( move 2 - ua , 0 ; move 4 , 7 ) 
[23193] c:0 is:( loop 0 , 6 , move v0 , v0 - ul ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - ua , 9 / v0 
[23194] c:0 is:( move ul , ul / ua ; loop 0 , 3 , move v0 + ul , ul )  decode:loop 0 , 3 , move ua - 4 , v0 / 4 
[23195] c:0 is:( loop 0 , 6 , move v0 , v0 ; move v0 , ul - v0 )  decode:loop 0 , 4 , move 4 , 4 - v0 * 4 
[23196] c:0 is:( loop 0 , 5 , move v0 , v0 * v0 ; move v0 , ul )  decode:( move ua , 9 ; move ua , 0 - 4 ) 
[23197] c:0 is:loop 0 , 3 , ( move ua , 3 ; loop 1 , 0 , move v0 , ul )  decode:loop 0 , 3 , move ua + ul , v0 + 4 
[23198] c:0 is:( loop 0 , 5 , move v0 , v0 / ua ; move v0 , v0 )  decode:loop 0 , 4 , move ua - 3 , 2 / v0 
[23199] c:0 is:( move 0 , 2 - ua ; loop 0 , 5 , move v0 , v0 + ul )  decode:loop 0 , 4 , move ua - 4 , v0 - 9 
[23200] c:0 is:loop 0 , ul , loop 1 , 2 , loop 2 , 2 , move ua , v2 - 4  decode:loop 0 , 4 , move 7 , 0 - 4 
[23201] c:0 is:loop 0 , 2 , loop 1 , ul , loop 2 , 2 , move ua , 4 - v2  decode:loop 0 , 4 , move ua , 4 - 3 / v0 
[23202] c:0 is:( move ua , ul ; loop 0 , 5 , move 2 , 3 ; move v0 , 0 )  decode:( move ua , 9 / ua ; move ua , 9 ) 
[23203] c:0 is:loop 0 , 2 , ( move v0 + v0 , 3 ; move ua , 2 / ua )  decode:loop 0 , 4 , move 3 , 0 - v0 - 4 
[23204] c:0 is:( move ua - ul , ul / ua ; loop 0 , 4 , move v0 , ul )  decode:loop 0 , 3 , move ua - 3 , v0 - 9 
[23205] c:0 is:( loop 0 , 6 , move ul , v0 ; move v0 , v0 * v0 )  decode:( move 2 , 4 ; move ua , 3 * 4 ) 
[23206] c:0 is:( move 0 , ua - 2 ; move 3 , 0 ; move ul - ua , 3 + 2 )  decode:( move 4 , 2 - 3 ; move 5 , 5 ) 
[23207] c:0 is:( move ua , ul / ua ; loop 0 , 4 , move ul , v0 - ul )  decode:( move 3 , 2 - move 9 , 4 ) 
[23208] c:0 is:( move ua , 2 ; loop 0 , 2 , move ua , 4 ; move 3 , v0 )  decode:( move ua + 3 , 0 ; move 9 , 4 ) 
[23209] c:0 is:loop 0 , 3 , ( move 0 , v0 / 4 ; move ua , v0 + ua )  decode:loop 0 , 3 , move 4 + v0 , 4 * 4 
[23210] c:0 is:( loop 0 , 5 , move ul / v0 , v0 ; move v0 , v0 )  decode:( move ul , 0 ; move 5 , 3 / 2 ) 
[23211] c:0 is:( loop 0 , 6 , move ul , v0 * v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 + 3 
[23212] c:0 is:( loop 0 , 2 , loop 1 , 2 , move ul , v0 ; move ua , 3 )  decode:( move 4 , 2 ; move ua , 4 / 4 ) 
[23213] c:0 is:loop 0 , 3 , ( move 3 , ua * ua ; move v0 * v0 , 0 )  decode:loop 0 , 4 , move 4 , 9 * v0 
[23214] c:0 is:( move ul , 0 - 3 ; loop 0 , 4 , move v0 , v0 - ul )  decode:loop 0 , 3 , move 0 - 2 , v0 - 2 
[23215] c:0 is:loop 0 , 3 , ( move ua - 3 , v0 ; move v0 + 3 , ul )  decode:loop 0 , 4 , move ua - ul , 2 
[23216] c:0 is:( move ul , 3 - ua ; loop 0 , 3 , move v0 + 3 , v0 )  decode:loop 0 , 3 , move 2 - ua , 3 - v0 
[23217] c:0 is:( move ul , ul ; move 4 , ul ; loop 0 , 4 , move ul , ul )  decode:( move 4 , 2 ; move 5 , ua * ua ) 
[23218] c:0 is:( move 0 , 4 + ul ; loop 0 , 5 , move v0 , ua - v0 )  decode:loop 0 , 4 , move 3 - ua , 0 - 4 
[23219] c:0 is:loop 0 , 2 , ( move 4 , ul + v0 ; move ul + v0 , 3 )  decode:loop 0 , 3 , move v0 - 4 , 8 0 
[23220] c:0 is:( move 0 - ul , ul ; loop 0 , 4 , move 4 , v0 + v0 )  decode:loop 0 , 4 , move 3 + v0 , 4 / 3 
[23221] c:0 is:loop 0 , 2 , ( loop 1 , 2 , move 3 , v0 ; move ul , ul )  decode:loop 0 , 4 , move 4 , v0 - 4 
[23222] c:0 is:( move 2 , ul - 2 ; loop 0 , 4 , move v0 , v0 + ul )  decode:( move 3 , 5 / 3 ; move 3 , 9 ) 
[23223] c:0 is:( move ua , 2 * 2 ; loop 0 , 4 , move ul + v0 , v0 )  decode:( move 9 , 4 ; move ua - ul , 4 ) 
[23224] c:0 is:( move ua , 0 - 3 ; loop 0 , 5 , move v0 - ul , v0 )  decode:loop 0 , 4 , move 0 - 3 , v0 / 4 
[23225] c:0 is:( loop 0 , 6 , move ul / v0 , v0 ; move v0 , v0 )  decode:( move 2 , 9 * 2 ; move ua , 9 ) 
[23226] c:0 is:( move ua - ul , 3 + 2 ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , 5 ; move 3 , 9 ) 
[23227] c:0 is:loop 0 , 3 , ( move 3 , 2 ; move v0 - ul , v0 - ua )  decode:loop 0 , 3 , move 3 , 4 * 4 
[23228] c:0 is:( move 0 , 4 - ua ; loop 0 , 5 , move ul , v0 + v0 )  decode:loop 0 , 4 , move v0 , 0 - 4 
[23229] c:0 is:( move ua / 3 , 0 ; loop 0 , 4 , move v0 + ul , v0 )  decode:loop 0 , 4 , move 3 , v0 0 
[23230] c:0 is:( move ul + ul , 3 ; loop 0 , 3 , move 3 - v0 , v0 )  decode:( move ua - ul , 3 ; move 2 , 4 ) 
[23231] c:0 is:( loop 0 , 3 , move ua - ul , 2 ; move v0 * 3 , v0 )  decode:loop 0 , 3 , move ua , 2 
[23232] c:0 is:( move 2 , ua + 3 ; loop 0 , 6 , move v0 + ul , v0 )  decode:loop 0 , 4 , move 2 - ua , 9 * 3 
[23233] c:0 is:( move 4 + ul , 3 ; loop 0 , 4 , move v0 , v0 + ua )  decode:( move ua , 3 ; move 3 , 4 ) 
[23234] c:0 is:( move 0 , 3 - ul ; loop 0 , 6 , move ul + v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , 9 / v0 
[23235] c:0 is:( move 3 - ul , ul ; loop 0 , 4 , move 2 + v0 , v0 )  decode:loop 0 , 3 , move ua - 2 , ul - v0 
[23236] c:0 is:loop 0 , 3 , ( move v0 + 3 , ul + v0 ; move 4 , ul )  decode:loop 0 , 4 , move v0 * 4 , 4 * 4 
[23237] c:0 is:( loop 0 , 2 , move 4 , v0 ; move ul - 4 , v0 + ua )  decode:( move ua , 0 ; move 4 , 4 * 3 ) 
[23238] c:0 is:( loop 0 , 4 , move v0 - 2 , ul + v0 ; move 4 , ua )  decode:( move 3 , 9 ; move 4 , 4 ) 
[23239] c:0 is:loop 0 , 3 , ( move ul , ul / v0 ; move ul , ul / ua )  decode:loop 0 , 4 , move v0 , ul / 5 
[23240] c:0 is:( loop 0 , 4 , move 2 / v0 , ul ; move v0 + 2 , ul )  decode:( move 4 , 2 ; move ua , 0 - 4 ) 
[23241] c:0 is:( move ua + 2 , ul - 3 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move v0 + 3 , 0 - 9 
[23242] c:0 is:( v0 = 0 ; loop 1 , 4 , move ua , 2 ; move v1 , ul )  decode:loop 0 , 4 , move 3 + 4 , 2 
[23243] c:0 is:( move 2 , 2 ; v0 = ua / 3 ; move ua , v0 + v0 )  decode:( move ua , 3 ; move 2 , 2 ) 
[23244] c:0 is:( move 2 , 3 ; loop 0 , 4 , move ul - v0 , ul - v0 )  decode:( move 3 , ul ; move 3 , 4 ) 
[23245] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 - 3 , v0 - 3 )  decode:( move ua + 3 , ul ; move 2 , 4 ) 
[23246] c:0 is:( move ul - ua , 4 * 2 ; loop 0 , 3 , move v0 , v0 )  decode:( move 2 , ua / 3 ; move ua , 4 ) 
[23247] c:0 is:( move 2 , 2 / ua ; loop 0 , 5 , move ul + v0 , v0 )  decode:loop 0 , 4 , move 2 - ua , 0 - 9 
[23248] c:0 is:( move 3 + ul , ul ; loop 0 , 4 , move v0 , 3 - v0 )  decode:( move 3 , ul ; move ua , 2 / 3 ) 
[23249] c:0 is:( move ul / 2 , ua ; loop 0 , 3 , move v0 + 4 , v0 )  decode:loop 0 , 3 , move v0 + 4 , v0 
[23250] c:0 is:( move ua , ua / 2 ; loop 0 , 3 , move v0 * v0 , 3 )  decode:( move ua + ul , 9 ; move 3 , 9 ) 
[23251] c:0 is:( move ul + ul , 3 ; loop 0 , 3 , move v0 - 4 , v0 )  decode:( move 3 , 4 ; move ua - ul , ul ) 
[23252] c:0 is:( move ua , 4 ; loop 0 , 4 , move 2 , 4 ; move ua , v0 )  decode:loop 0 , 3 , move 3 - ua , 3 - 3 
[23253] c:0 is:loop 0 , 2 , ( move 4 , v0 * v0 ; move ua , 3 - ul )  decode:loop 0 , 3 , move ua + v0 , ua * ua 
[23254] c:0 is:( move ul - 4 , 0 ; loop 0 , 5 , move v0 , ul - v0 )  decode:loop 0 , 4 , move 3 , 0 - 4 * 4 
[23255] c:0 is:( move 4 , ul ; loop 0 , 2 , loop 1 , 3 , move v1 , ul )  decode:( move 5 , ul ; move 4 , 0 - 4 ) 
[23256] c:0 is:( move ul , 3 - ul ; loop 0 , 6 , move 2 , v0 + v0 )  decode:( move 4 , 2 ; move ua , 0 - 4 ) 
[23257] c:0 is:( move 4 - ua , ul ; loop 0 , 4 , move v0 * v0 , 2 )  decode:( move ua , 7 ; move ua + 3 , 2 ) 
[23258] c:0 is:loop 0 , 3 , ( move 4 - v0 , ul ; move 3 - ul , v0 )  decode:( move 8 , ul ; move 5 , ua * ua ) 
[23259] c:0 is:( move ua , ua - 4 ; loop 0 , 5 , move v0 - 3 , v0 )  decode:( move 4 , 2 / 4 ; move ua , 3 ) 
[23260] c:0 is:( move 4 , ua / 3 ; loop 0 , 3 , move ul + v0 , v0 )  decode:( move ul - ua , 2 ; move 4 , ul ) 
[23261] c:0 is:( v0 = 2 - ua ; loop 1 , 3 , move v0 + v1 , ul )  decode:loop 0 , 3 , move 3 - ua , ul 
[23262] c:0 is:( move 3 - ul , 4 ; loop 0 , 4 , move v0 + ul , v0 )  decode:loop 0 , 3 , move 3 - ua , v0 * 2 
[23263] c:0 is:( move 4 , 4 + ul ; loop 0 , 3 , move v0 , ul - v0 )  decode:( move 4 , 2 ; move 3 , 2 + 4 ) 
[23264] c:0 is:( move 2 / ua , ul ; loop 0 , 4 , move v0 + 4 , v0 )  decode:loop 0 , 4 , move 4 + v0 , ua / 5 
[23265] c:0 is:( move 3 , 4 / ua ; loop 0 , 3 , move v0 + ul , v0 )  decode:( move 2 - ua , 4 ; move 5 , ul ) 
[23266] c:0 is:loop 0 , 3 , ( move ul , v0 ; move ua - 3 , v0 / 3 )  decode:loop 0 , 3 , move 4 , v0 * 4 
[23267] c:0 is:( move ul , 3 + ul ; loop 0 , 5 , move v0 , v0 * 2 )  decode:( move 4 , 2 ; move ua , 5 * 2 ) 
[23268] c:0 is:( move 3 , ua - 3 ; loop 0 , 4 , move v0 , ua / v0 )  decode:( move 3 , 0 - 4 ; move 4 , 2 ) 
[23269] c:0 is:( move ul , ul ; loop 0 , 3 , move 4 - v0 , v0 + 4 )  decode:loop 0 , 3 , move 3 , v0 - 7 
[23270] c:0 is:( loop 0 , 5 , move 4 - 2 , ul ; move v0 , ua - v0 )  decode:loop 0 , 4 , move 3 - ua , ul / v0 
[23271] c:0 is:( move ua , 4 ; move ua , 2 ; loop 0 , 5 , move v0 , 4 )  decode:loop 0 , 3 , move ua + ul , 4 - v0 
[23272] c:0 is:( loop 0 , 5 , move 3 , 4 ; move ul + v0 , ul + v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 3 
[23273] c:0 is:( loop 0 , 3 , move ua , 2 ; move 4 / v0 , ul - v0 )  decode:loop 0 , 3 , move ua , 2 
[23274] c:0 is:( move ul , 2 - ua ; loop 0 , 6 , move v0 / 2 , v0 )  decode:loop 0 , 4 , move ua - 4 , 0 - 9 
[23275] c:0 is:( move ul , 4 ; loop 0 , ul , loop 1 , 4 , move 2 , v1 )  decode:loop 0 , 3 , move 3 , 4 / v0 
[23276] c:0 is:( loop 0 , 5 , move v0 , ul ; move 4 - ul , 3 + v0 )  decode:loop 0 , 3 , move 4 , 3 * 9 
[23277] c:0 is:( loop 0 , 3 , move v0 , ul ; move ul - 4 , 4 - v0 )  decode:( move 3 , 3 ; move 3 , ul ) 
[23278] c:0 is:( loop 0 , 5 , move v0 - ul , v0 ; move 3 , 4 + ul )  decode:loop 0 , 4 , move ua - 4 , 3 + v0 
[23279] c:0 is:( move 4 , ul - ua ; loop 0 , 4 , move v0 * 3 , v0 )  decode:loop 0 , 4 , move v0 - ua , ua / 4 
[23280] c:0 is:( move 4 , ua * 4 ; loop 0 , 3 , move v0 , ul - v0 )  decode:( move 3 , 0 ; move 4 , 2 / ua ) 
[23281] c:0 is:( move ua , ul ; v0 = 2 / 3 ; move 3 + v0 , v0 )  decode:( move ua , ul ; move 4 , 7 ) 
[23282] c:0 is:( loop 0 , 4 , move ul - 3 , v0 ; move ua , v0 * 4 )  decode:( move 4 , 0 - 4 ; move ua , 5 ) 
[23283] c:0 is:( v0 = ua * ua ; loop 1 , 4 , move 2 , v1 + v0 )  decode:loop 0 , 3 , move 3 , 2 * ua 
[23284] c:0 is:( move 2 , 4 + ul ; loop 0 , 6 , move ul - v0 , v0 )  decode:loop 0 , 4 , move 3 , 2 + v0 
[23285] c:0 is:loop 0 , 3 , ( v1 = v0 - 3 ; move v1 + ua , ul )  decode:loop 0 , 3 , move v0 + 2 , ul 
[23286] c:0 is:loop 0 , 5 , ( move 2 + v0 , ul - v0 ; v1 = ul )  decode:0 0 loop 0 , 3 , move ua , ua / 3 
[23287] c:0 is:( v0 = ul ; move ua + 4 , 2 / 3 ; move v0 , v0 )  decode:( move 4 , 4 + 3 ; move ua , ul ) 
[23288] c:0 is:( move 3 , ul / ua ; loop 0 , 5 , move v0 , v0 - 3 )  decode:( move ua + 2 , 9 ; move 4 , ul ) 
[23289] c:0 is:( move ul , ua + 4 ; loop 0 , 4 , move 4 / v0 , v0 )  decode:( move ua , 5 ; move 4 , 5 ) 
[23290] c:0 is:loop 0 , 3 , ( v1 = ua / v0 ; move ul + v1 , 2 )  decode:loop 0 , 3 , move ua + ul , 2 
[23291] c:0 is:( move ul , 4 + ul ; loop 0 , 6 , move v0 , 4 + v0 )  decode:loop 0 , 4 , move ua - 3 , 0 - v0 
[23292] c:0 is:loop 0 , 2 , ( move ul , v0 ; move 3 , 4 ; v1 = ul )  decode:loop 0 , 4 , move v0 , v0 - 8 
[23293] c:0 is:loop 0 , 5 , ( move v0 - 3 , ua - v0 ; v1 = ua )  decode:( move 0 - 4 , 0 ; move 3 , 2 ) 
[23294] c:0 is:( move 4 , ua ; loop 0 , 4 , move 3 , v0 ; v1 = ua )  decode:( move 9 , 0 ; move 4 , 0 - 4 ) 
[23295] c:0 is:( v0 = ul ; loop 1 , 6 , move 2 , v0 ; move ua , 2 )  decode:loop 0 , 4 , move v0 - ua , 2 
[23296] c:0 is:( move 2 / ua , ul ; loop 0 , 5 , move v0 , v0 / 3 )  decode:loop 0 , 4 , move ua - 4 , 2 / v0 
[23297] c:0 is:( loop 0 , 6 , move ua / 4 , v0 ; move 2 , v0 - ul )  decode:loop 0 , 4 , move 4 - ua , 0 - 9 
[23298] c:0 is:loop 0 , 3 , ( v1 = 4 ; move ul , 2 ; move v1 , ul )  decode:loop 0 , 4 , move ua - 3 , 3 
[23299] c:0 is:( v0 = ua * ua ; loop 1 , 5 , move v1 , v0 + 3 )  decode:loop 0 , 3 , move 3 - ua , ua / 4 
[23300] c:0 is:( move ua , ua / 3 ; v0 = 3 * 3 ; move v0 , v0 )  decode:( move ua , ua / 3 ; move 9 , 9 ) 
[23301] c:0 is:( v0 = ua * ua ; loop 1 , 5 , move 4 , v0 + v0 )  decode:loop 0 , 4 , move 4 , 0 - 9 
[23302] c:0 is:( move ua + ul , 4 / 3 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - 9 
[23303] c:0 is:( loop 0 , 5 , move ua / 2 , ul ; move v0 / 3 , v0 )  decode:loop 0 , 4 , move 4 , 4 * 4 - v0 
[23304] c:0 is:( move ul - 3 , ua * 4 ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua - 3 , v0 - 3 
[23305] c:0 is:loop 0 , 3 , ( move v0 , ul / v0 ; move ua , 4 * 4 )  decode:loop 0 , 3 , move 4 + 3 , 0 - 8 
[23306] c:0 is:( move 0 , ul ; loop 0 , 6 , move 4 , v0 ; v1 = ul )  decode:loop 0 , 4 , move 4 + v0 , 0 - 8 
[23307] c:0 is:( move ul , ul ; move 4 , 4 ; loop 0 , 4 , move 4 , v0 )  decode:( move 3 + ua , 5 ; move ua , 4 ) 
[23308] c:0 is:loop 0 , 4 , ( v1 = ua - v0 ; move ua , v1 / 2 )  decode:loop 0 , 4 , move ua , 2 / 4 
[23309] c:0 is:( v0 = ul / 2 ; loop 1 , 4 , move ua , v0 + v1 )  decode:loop 0 , 4 , move v0 - ua , ua / ua 
[23310] c:0 is:( v0 = ul / ua ; loop 1 , 3 , move 3 , v1 - v0 )  decode:loop 0 , 3 , move 3 , 3 + 6 
[23311] c:0 is:( loop 0 , 6 , move ul , 4 / v0 ; move v0 , ua * 2 )  decode:( move 3 , 5 ; move ua + ul , 4 ) 
[23312] c:0 is:( loop 0 , 5 , move ul - v0 , 4 + ul ; v1 = v0 )  decode:loop 0 , 3 , move 4 - ua , v0 - 3 
[23313] c:0 is:( v0 = ul / ua ; loop 1 , 3 , move 4 , v1 + v0 )  decode:loop 0 , 3 , move 4 , v0 - 3 
[23314] c:0 is:( move 4 , 4 + 2 ; move ul , ua + 3 ; move 4 , 2 - ua )  decode:( move 3 , 6 ; move 4 , 8 ) 
[23315] c:0 is:( loop 0 , 3 , move 4 , ul ; v1 = v0 ; move ul , 4 )  decode:loop 0 , 3 , move 4 , ul 
[23316] c:0 is:( move ul / ua , 4 ; loop 0 , 5 , move v0 , 4 - v0 )  decode:( move 2 , 2 ; move ua + 2 , 4 ) 
[23317] c:0 is:( move ua , 0 ; ( move ul , 3 ; move 2 - ua , 2 - 3 ) )  decode:( move ua , 0 ; move 4 , 0 - 2 ) 
[23318] c:0 is:( move ul , 4 * 3 ; loop 0 , 5 , move v0 , v0 / ua )  decode:loop 0 , 4 , move ua - 4 , v0 / 2 
[23319] c:0 is:loop 0 , 4 , ( v1 = ul - v0 ; move v1 * 3 , ul )  decode:( move 4 , 3 ; move 7 , ul + 4 ) 
[23320] c:0 is:( v0 = 2 / ua ; loop 1 , 5 , move v1 - v0 , ul )  decode:loop 0 , 3 , move 3 , 3 / v0 
[23321] c:0 is:( move 4 - ua , 0 ; move 4 * 2 , ul ; move 2 / 3 , ul )  decode:( move 3 , 0 ; move 8 , ul / 3 ) 
[23322] c:0 is:( v0 = ua / 4 ; loop 1 , 6 , move ua - v0 , v0 )  decode:loop 0 , 4 , move ua - 2 , ua / 2 
[23323] c:0 is:( move ul , ul ; loop 0 , 5 , move 4 / v0 , 3 / v0 )  decode:0 loop 0 , 4 , move 3 - ua , 4 * 4 
[23324] c:0 is:( v0 = ul ; loop 1 , 6 , move ul , v1 ; move 4 , 2 )  decode:loop 0 , 4 , move 2 , v0 - 9 
[23325] c:0 is:( move 0 , ua * ua ; ( move 4 , 2 ; move ul - 3 , 2 ) )  decode:( move 2 , 4 ; move 4 , ul ) 
[23326] c:0 is:( move 3 , ul ; ( move 3 / ua , 0 ; move ua , 3 + 2 ) )  decode:( move 3 , ul ; move ua , 5 ) 
[23327] c:0 is:( v0 = ua - 3 ; loop 1 , 7 , move v0 , ul - v1 )  decode:loop 0 , 4 , move ua , ua * 3 - v0 
[23328] c:0 is:( move ua + 3 , ul ; move 4 * 2 , 4 ; v0 = 2 + ul )  decode:( move 9 , ul ; move ua + ul , 4 ) 
[23329] c:0 is:( move 0 - 4 , 4 ; ( move ua , 3 ; move ua + ul , 3 ) )  decode:( move ua + 4 , 2 + move ua , 3 ) 
[23330] c:0 is:( v0 = 4 + ul ; loop 1 , 7 , move ul , v0 * v0 )  decode:( move 4 , 6 ; move 3 , 4 * 3 ) 
[23331] c:0 is:loop 0 , 5 , ( v1 = v0 - ul ; move 3 , ul / v1 )  decode:loop 0 , 3 , move 4 , 4 * 4 / 4 
[23332] c:0 is:( move 0 , 3 / 4 ; move 4 , 3 ; move ua + ul , 3 / ua )  decode:( move 4 , 4 / ua ; move ua , 9 ) 
[23333] c:0 is:( v0 = 3 ; loop 1 , 6 , move v1 , ul ; move ul , 4 )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[23334] c:0 is:loop 0 , 7 , ( v1 = v0 ; move ul - 3 , ua / v0 )  decode:loop 0 , 4 , move 3 , 2 - 4 / v0 
[23335] c:0 is:( v0 = ul / ua ; loop 1 , 7 , move 3 , v0 + v1 )  decode:loop 0 , 4 , move 4 , v0 * 2 
[23336] c:0 is:( v0 = ua - ul ; loop 2 , 5 , move v0 , v0 / 4 )  decode:loop 0 , 4 , move ua , 3 / 3 
[23337] c:0 is:loop 0 , 7 , ( move v0 - 3 , ua / v0 ; v2 = ul )  decode:( move 4 , 0 ; move ul - ua , ul ) 
[23338] c:0 is:( v0 = 4 - ua ; loop 1 , 7 , move ua / v0 , v1 )  decode:loop 0 , 4 , move 0 - 4 , 3 3 * 3 
[23339] c:0 is:( v0 = ua / 3 ; loop 1 , 7 , move v0 , ul / v0 )  decode:loop 0 , 4 , move 3 , 3 * 3 
[23340] c:0 is:loop 0 , 7 , ( v1 = ul - v0 ; move ul , v1 * 4 )  decode:loop 0 , 3 , move v0 - 3 , 4 
[23341] c:0 is:( loop 0 , 9 , v1 = ul ; loop 2 , 4 , move ua , v0 )  decode:loop 0 , 4 , move ua , 8 
[23342] c:0 is:( move 2 , 3 + 2 ; ( move ua , 3 / ua ; v0 = ua ) )  decode:( move 2 , 5 ; move ua , 2 / ua ) 
[23343] c:0 is:( move 3 - ul , 3 ; ( move ua + 3 , 4 ; move 2 , ul ) )  decode:( move 3 , 4 ; move ua + 4 , 4 ) 
[23344] c:0 is:( ( move ul , 2 ; move ua , 2 - ul ) ; move 4 , 2 - 4 )  decode:( move 0 - 4 , ul ; move ua , 2 ) 
[23345] c:0 is:( v0 = ua / 4 ; loop 1 , 7 , move v0 * v0 , ul )  decode:loop 0 , 4 , move 4 ,  4 * 3 
[23346] c:0 is:( ( move 3 , 4 + 4 ; move ua , 2 ) ; move ul , 4 + ul )  decode:( move 3 , 8 ; move ua + ul , 2 ) 
[23347] c:0 is:loop 0 , 5 , ( loop 1 , 9 , v2 = ua ; move ua , v1 )  decode:loop 0 , 4 , move ua , 8 
[23348] c:0 is:( move ul , ul - 4 ; ( move 4 , ul ; move 0 - 2 , 4 ) )  decode:( move 3 , 2 ; move 4 , 2 / 5 ) 
[23349] c:0 is:( move ul - 3 , ul / 4 ; loop 2 , 5 , move 3 + ul , 2 )  decode:loop 0 , 4 , move ua - ul , 0 - v0 
[23350] c:0 is:loop 0 , 3 , ( move ul , 0 ; move v0 + ua , v0 + ul )  decode:0 0 loop 0 , 3 , move 2 - ua + v0 
[23351] c:0 is:( move 0 , ua * ua ; loop 0 , 3 , move ul + v0 , v0 )  decode:loop 0 , 3 , move 0 - 2 , v0 - 4 
[23352] c:0 is:( move ua , ua ; loop 0 , 3 , move v0 + v0 , 2 + ul )  decode:( move 4 * ul , 0 ; move 4 , 3 ) 
[23353] c:0 is:( move 2 , ua ; move ua , 0 ; loop 0 , 4 , move v0 , ul )  decode:( move ua + 2 , 0 ; move ua , 4 ) 
[23354] c:0 is:( loop 0 , 2 , move ua , v0 + 2 ; move v0 - ua , ul )  decode:( move ua , 6 ; move ua , 0 - 4 ) 
[23355] c:0 is:( move ua , 2 ; loop 0 , 3 , move ul - ua , v0 + v0 )  decode:loop 0 , 3 , move v0 + 4 , 4 
[23356] c:0 is:( loop 0 , 3 , move ua , ua * ua ; move 2 + v0 , v0 )  decode:loop 0 , 4 , move ua , ua * ua 
[23357] c:0 is:loop 0 , 2 , ( move 2 , ua - v0 ; move ul + v0 , ul )  decode:( move 4 , 0 ; move 2 , ul ) 
[23358] c:0 is:( move ua , 2 ; loop 0 , 3 , move ul + ul , v0 + v0 )  decode:( move 8 , 2 ; move 3 , 2 ) 
[23359] c:0 is:( loop 0 , 4 , move v0 + ul , v0 ; move ua - ul , 0 )  decode:( move 3 + 4 , 3 ; move 3 , 3 ) 
[23360] c:0 is:loop 0 , 3 , ( move 2 + ul , ua ; move v0 + v0 , ul )  decode:loop 0 , 3 , move 4 , v0 - ul 
[23361] c:0 is:( move ua - ul , ua ; loop 0 , 4 , move v0 , v0 + 2 )  decode:( move ua , 2 - 3 ; move 5 , 9 ) 
[23362] c:0 is:( move 0 - ua , ul ; loop 0 , 4 , move v0 , v0 - ul )  decode:( move ua , 0 - 2 ; move ua , 3 ) 
[23363] c:0 is:( move ua , ul ; loop 0 , 5 , move v0 , ul ; move 2 , 0 )  decode:loop 0 , 4 , move 4 , ul - 3 / v0 
[23364] c:0 is:( loop 0 , 3 , move v0 - 2 , ua * ua ; move ua , v0 )  decode:( move ua , ul ; move 2 , 4 ) 
[23365] c:0 is:loop 0 , 3 , ( move 3 , v0 + v0 ; move ul , ua + ul )  decode:loop 0 , 3 , move 4 , 3 * v0 
[23366] c:0 is:loop 0 , 3 , ( move v0 , ua + 3 ; move v0 + ul , ul )  decode:( move 3 , 9 + 2 ; move 3 , 4 ) 
[23367] c:0 is:loop 0 , 2 , ( move v0 , ua - v0 ; move ua - ul , 3 )  decode:( move ua , 3 ; move 4 , ua / 3 ) 
[23368] c:0 is:( v0 = ul - ua ; move v0 , 0 ; move v0 , ua - 2 )  decode:( move 5 , 0 - 2 ; move 5 , 2 ) 
[23369] c:0 is:( loop 0 , 3 , move ul - ua , 2 ; move v0 + v0 , ul )  decode:loop 0 , 4 , move ul - ua , 2 
[23370] c:0 is:( move 3 , ul ; loop 0 , 3 , move ua + v0 , ul + v0 )  decode:loop 0 , 4 , move ua , 2 / v0 
[23371] c:0 is:( move 0 , ua + ul ; loop 0 , 6 , move v0 + ul , v0 )  decode:loop 0 , 4 , move ua / v0 , ua / ua 
[23372] c:0 is:( move ua , ua ; loop 0 , 2 , loop 1 , 3 , move v0 , ul )  decode:( move ua , 0 ; move 3 , ul ) 
[23373] c:0 is:( move ua , ua ; loop 0 , 3 , loop 1 , 2 , move v0 , ul )  decode:( move ua , 0 ; move ua , 3 ) 
[23374] c:0 is:( loop 0 , 5 , move ul , 2 ; move ul , 0 ; move ua , v0 )  decode:( move 3 , 9 / 2 ; move ua , 4 ) 
[23375] c:0 is:loop 0 , 2 , ( move ua - 3 , v0 ; move ul , v0 - ua )  decode:( move 5 , 0 ; move ua - 4 , 5 ) 
[23376] c:0 is:( loop 0 , 3 , move ul , v0 - ua ; move ua + 3 , v0 )  decode:( move ul , ul ; move 8 + 3 , 2 ) 
[23377] c:0 is:loop 0 , 3 , ( move v0 + ul , v0 ; move 2 , ul + ul )  decode:loop 0 , 4 , move 3 , 4 
[23378] c:0 is:loop 0 , 2 , ( move v0 - ua , ul + ul ; move 3 , v0 )  decode:loop 0 , 3 , move v0 - ua , 2 
[23379] c:0 is:( move ua , ua - ul ; loop 0 , 3 , move 3 , v0 + v0 )  decode:( move ua , 9 ; move ua , 0 - 2 ) 
[23380] c:0 is:loop 0 , 3 , ( move v0 , ua - ul ; move 2 , ua - v0 )  decode:loop 0 , 4 , move 2 , 0 - v0 
[23381] c:0 is:loop 0 , 2 , ( move ua , v0 + ua ; move v0 , ua / 3 )  decode:loop 0 , 3 , move v0 - v0 , 0 0 0 0 0 0 0 0 0 0 3 , 0 0 
[23382] c:0 is:( move 0 - ua , ul / ua ; loop 0 , 3 , move v0 , v0 )  decode:( move 2 , 0 ; move ua , ul / 4 ) 
[23383] c:0 is:( move ul + ul , 0 ; loop 0 , 5 , move v0 + ul , v0 )  decode:loop 0 , 4 , move 2 - ua , v0 + 4 
[23384] c:0 is:( move 0 , ua * ua ; loop 0 , 5 , move v0 , v0 + ul )  decode:( move 4 , 4 * 4 ; move ua , 4 ) 
[23385] c:0 is:loop 0 , 2 , ( move 3 , v0 ; move 3 , ul ; move ul , ua )  decode:loop 0 , 3 , move 4 , v0 / v0 
[23386] c:0 is:loop 0 , 3 , ( move ul - 3 , ul + v0 ; move v0 , ua )  decode:( move 3 , 3 ; move 3 , 0 - 4 ) 
[23387] c:0 is:( loop 0 , 2 , move ua - ul , v0 ; move ua , 3 * v0 )  decode:loop 0 , 3 , move ua - v0 , 0 - 3 
[23388] c:0 is:( move ua , ua + ua ; loop 0 , 3 , move 4 * v0 , v0 )  decode:loop 0 , 4 , move 4 , 3 * v0 
[23389] c:0 is:( loop 0 , 4 , move v0 , ua ; move ul - ua , v0 + 3 )  decode:( move ul - ua , 3 ; move ua , ul ) 
[23390] c:0 is:( loop 0 , 2 , move 2 / v0 , ul ; move ua + ul , v0 )  decode:( move 3 , ul ; move 8 , 2 ) 
[23391] c:0 is:( move 2 , 0 ; loop 0 , 5 , move ul , ul ; move v0 , ul )  decode:loop 0 , 3 , move 3 - ua , 9 / v0 
[23392] c:0 is:( loop 0 , 3 , move ul - 4 , v0 + v0 ; move ua , ua )  decode:loop 0 , 3 , move 2 - ua , v0 * 2 
[23393] c:0 is:( loop 0 , 3 , move 3 , ua ; move ua , v0 ; move 3 , ul )  decode:( move 9 , 0 ; move ua + ul , 2 ) 
[23394] c:0 is:loop 0 , 3 , ( move v0 + v0 , ul ; move 4 , ua + ul )  decode:0 loop 0 , 4 , move 4 , ua / 4 0 
[23395] c:0 is:( move ul , ul - ua ; loop 0 , 4 , move 2 , v0 + v0 )  decode:loop 0 , 3 , move 3 - ua , 4 * 9 
[23396] c:0 is:( move 2 , 0 - ua ; move ua + 2 , 0 - ul ; v0 = ua )  decode:( move 9 , 0 - 4 ; move 2 , ul ) 
[23397] c:0 is:( loop 0 , 3 , move v0 , ul ; move 3 + v0 , ul + ul )  decode:loop 0 , 3 , move v0 + ul , ua * ua 
[23398] c:0 is:loop 0 , 2 , ( move v0 - ua , v0 + ul ; move 4 , ul )  decode:loop 0 , 4 , move 5 , ul / v0 
[23399] c:0 is:( move ul - ua , 0 - ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move ua / v0 , 4 * 4 
[23400] c:0 is:loop 0 , 3 , ( move v0 - 4 , ul ; move ua , ua + v0 )  decode:loop 0 , 4 , move ua + v0 , 0 - 9 
[23401] c:0 is:( loop 0 , 4 , move v0 , 3 + ul ; move ua + ul , v0 )  decode:loop 0 , 4 , move 3 , 0 - v0 / 4 
[23402] c:0 is:loop 0 , 3 , ( move v0 , ul + v0 ; move 3 - ua , ul )  decode:loop 0 , 4 , move 3 - ua , v0 + 5 
[23403] c:0 is:( loop 0 , 2 , loop 1 , 3 , move v1 , ul ; move ul , ua )  decode:loop 0 , 2 , move 3 , 9 
[23404] c:0 is:( move 0 - ua , ua ; move ul / 3 , 0 ; move 0 - ua , 4 )  decode:( move ua , 4 ; move ua , 0 - 4 ) 
[23405] c:0 is:( move ul , ua + ul ; loop 0 , 4 , move v0 , 2 * v0 )  decode:( move 3 , 2 ; move 4 , 4 * 3 ) 
[23406] c:0 is:( loop 0 , 4 , move 4 , v0 ; move ua - ul , ua + v0 )  decode:loop 0 , 4 , move ua - 2 , v0 
[23407] c:0 is:( move 2 , ul - ua ; loop 0 , 4 , move v0 , ul - v0 )  decode:( move 4 , 0 - 4 ; move 3 , 2 ) 
[23408] c:0 is:( loop 0 , 2 , move 3 , v0 ; move ua - ul , v0 / ua )  decode:( move 3 , 0 ; move 9 , ul ) 
[23409] c:0 is:( move ua + ul , 2 + ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move v0 - ua , 9 
[23410] c:0 is:( loop 0 , 3 , move 4 , ul + v0 ; move ua - v0 , ul )  decode:( move 8 , ul ; move ua , 3 ) 
[23411] c:0 is:( loop 0 , 4 , move v0 , 4 ; move ua + ul , ua - v0 )  decode:loop 0 , 3 , move 0 - 4 , 0 - 3 
[23412] c:0 is:loop 0 , 3 , ( move ul + v0 , ua ; move v0 * 3 , ul )  decode:( move ua + 2 , 2 ; move 7 , 5 ) 
[23413] c:0 is:loop 0 , 3 , ( move ul , ua * ua ; move v0 + v0 , 4 )  decode:loop 0 , 3 , move 3 , ua / 0 - 4 
[23414] c:0 is:( move 2 + ul , ua - ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , 2 / v0 
[23415] c:0 is:( move ua + ul , 2 / ua ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , ul / 4 ; move 3 , 3 ) 
[23416] c:0 is:( move ul , 3 + ul ; loop 0 , 4 , move v0 + v0 , ul )  decode:( move 4 , 6 ; move ua + ul , ul ) 
[23417] c:0 is:loop 0 , 2 , ( move ul , 2 ; move 4 , v0 ; move ul , ul )  decode:( move ua , 2 ; move ul - ua , 6 ) 
[23418] c:0 is:( move 2 , ua ; v0 = 2 - ua ; move v0 , v0 * ua )  decode:( move 2 , 0 ; move 4 , 4 / 3 ) 
[23419] c:0 is:( move ua , ua ; loop 0 , 4 , move v0 - 4 , ua - v0 )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[23420] c:0 is:( move ul , ua + ul ; loop 0 , 5 , move v0 , v0 + 3 )  decode:( move 3 , 4 ; move ua , 2 / ua ) 
[23421] c:0 is:( move ul , ua ; move 4 , ul ; loop 0 , 3 , move v0 , 2 )  decode:( move 4 , ul ; move 4 , 4 * 4 ) 
[23422] c:0 is:( move ul - ua , ul ; loop 0 , 5 , move v0 + 3 , v0 )  decode:loop 0 , 4 , move 5 + v0 , 0 - 8 
[23423] c:0 is:( move ul , ua ; loop 0 , 3 , move 4 , 4 ; move ua , v0 )  decode:loop 0 , 4 , move v0 + ua , 4 
[23424] c:0 is:( move ul , 4 + ul ; loop 0 , 4 , move v0 , v0 + ul )  decode:loop 0 , 4 , move v0 , 4 
[23425] c:0 is:( move ua - ul , ua ; loop 0 , 5 , move v0 * 2 , v0 )  decode:loop 0 , 4 , move ua , 0 - 8 / v0 
[23426] c:0 is:( move ul , ul / 3 ; loop 0 , 2 , move v0 - ua , v0 )  decode:( move ua , 0 - 9 ; move 5 , ul ) 
[23427] c:0 is:( move ul , 2 + ul ; loop 0 , 5 , move v0 , ul - v0 )  decode:loop 0 , 3 , move 3 - ua , v0 - 4 
[23428] c:0 is:( move ua , ua * ua ; loop 0 , 4 , move v0 , v0 - 4 )  decode:loop 0 , 4 , move 3 , v0 + 9 
[23429] c:0 is:( loop 0 , 3 , move ua - ul , v0 ; move ul - 4 , v0 )  decode:loop 0 , 4 , move 4 , 2 * 3 / v0 
[23430] c:0 is:( loop 0 , 4 , move v0 , ul ; move 4 + ul , ul + v0 )  decode:( move ua , 4 ; move 4 , 4 ) 
[23431] c:0 is:loop 0 , 3 , ( move v0 + v0 , 4 ; move 0 , 3 + v0 )  decode:( move 2 , 4 + 9 ; move 4 , 8 ) 
[23432] c:0 is:( v0 = ua / 4 ; move ua - v0 , 0 ; move ua , v0 )  decode:( move 2 - ua , 0 ; move ua , 8 ) 
[23433] c:0 is:( move ua + 3 , ua - ul ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move v0 * 3 , 0 - 9 
[23434] c:0 is:( move ul , 4 + ul ; loop 0 , 4 , move v0 - ua , v0 )  decode:( move 8 , 9 ; move ua + ul , 2 ) 
[23435] c:0 is:( loop 0 , 6 , move ul + ul , 2 ; move v0 , v0 - ua )  decode:0 loop 0 , 4 , move 3 , 4 * 9 
[23436] c:0 is:( loop 0 , 5 , move 2 + v0 , v0 - ul ; move ul , ul )  decode:loop 0 , 4 , move ua , ua / v0 
[23437] c:0 is:loop 0 , 3 , ( move ul , ul - 2 ; move v0 , v0 / ua )  decode:( move 4 , 2 / 4 ; move 2 , 7 ) 
[23438] c:0 is:loop 0 , 2 , ( move ul / v0 , ul ; move v0 + 3 , ul )  decode:loop 0 , 3 , move 3 - ua , v0 - 2 
[23439] c:0 is:( move 4 + ul , ul + ul ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , 2 ; move 3 , move 4 - v) 0 
[23440] c:0 is:( loop 0 , 5 , move 2 , ul - v0 ; move ua - v0 , ul )  decode:loop 0 , 4 , move ua - 4 , v0 - 3 
[23441] c:0 is:loop 0 , 2 , ( move ul / v0 , v0 ; move 3 - ua , ul )  decode:( move 4 , 0 - 3 ; move 4 , 4 ) 
[23442] c:0 is:( loop 0 , 4 , move ul + ul , v0 ; move v0 , ua - 4 )  decode:loop 0 , 3 , move 3 , v0 * v0 
[23443] c:0 is:( loop 0 , 4 , move v0 , ua * ua ; move 4 , ua - v0 )  decode:loop 0 , 3 , move 3 - ua , 4 * 4 
[23444] c:0 is:( move ua + ul , ul - 3 ; loop 0 , 5 , move v0 , v0 )  decode:( move ua , ul ; move 9 , 9 ) 
[23445] c:0 is:( move ul + ul , ua / 2 ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 3 , move 0 - 2 , v0 * ua 
[23446] c:0 is:( move 2 , ul ; loop 0 , 4 , move ua / v0 , v0 + ul )  decode:loop 0 , 4 , move 0 - 5 , v0 + 5 
[23447] c:0 is:( move 3 , ua - ul ; loop 0 , 4 , move v0 , ua / v0 )  decode:( move 3 , 2 ; move 4 , 4 ) 
[23448] c:0 is:( move ul - ua , ul / 2 ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , 0 - 0 - v0 
[23449] c:0 is:( move 2 , ul / ua ; loop 0 , 5 , move v0 , ul + v0 )  decode:loop 0 , 3 , move 3 - ua , v0 + 9 
[23450] c:0 is:( loop 0 , 4 , move v0 , ul / ua ; move v0 - 2 , ul )  decode:loop 0 , 4 , move v0 , 2 / ua 
[23451] c:0 is:( loop 0 , 3 , move 2 , v0 ; move 0 , 3 ; move v0 , 4 )  decode:loop 0 , 4 , move 2 , v0 + 3 
[23452] c:0 is:( loop 0 , 2 , move ua , v0 - 4 ; move ul / v0 , ul )  decode:loop 0 , 4 , move v0 + 2 , 0 - 3 
[23453] c:0 is:( move ua , ul ; loop 0 , 6 , move 2 - v0 , v0 - ul )  decode:( move ua , ul ; move ua , 4 - 3 ) 
[23454] c:0 is:( loop 0 , 6 , move ul , ua + ua ; move v0 , v0 / 2 )  decode:( move ua , 0 ; move 5 , 5 * 4 ) 
[23455] c:0 is:loop 0 , 3 , ( move ul , ua - v0 ; move 3 / v0 , ul )  decode:( move ua , 4 ; move 4 , 4 + 4 ) 
[23456] c:0 is:( move ul , ua + ul ; loop 0 , 6 , move 3 - v0 , v0 )  decode:loop 0 , 4 , move ua - 4 , ul / v0 
[23457] c:0 is:( move ua - 2 , ul ; v0 = 3 ; move v0 , ul - v0 )  decode:( move 4 , ul ; move 3 , 0 - 2 ) 
[23458] c:0 is:( move ul , ul ; loop 0 , 4 , move v0 * 3 , ua - v0 )  decode:loop 0 , 4 , move v0 * 3 , ua * ua 
[23459] c:0 is:( loop 0 , 6 , move ul + v0 , 4 ; move ul , v0 + ul )  decode:loop 0 , 4 , move ua , 0 - 4 
[23460] c:0 is:( loop 0 , 6 , move v0 , 4 ; move ul - ua , v0 + ul )  decode:0 0 loop 0 , 4 , move 5 , : : : : : 
[23461] c:0 is:( move 3 + ul , ul ; loop 0 , 6 , move v0 , ul - v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 - 4 
[23462] c:0 is:loop 0 , 3 , ( move ua , 2 ; v1 = ul ; move v1 , ul )  decode:loop 0 , 4 , move ua - v0 , 2 
[23463] c:0 is:( move ul - ua , ul ; loop 0 , 3 , move 4 / v0 , v0 )  decode:( move ua , ul ; move 4 , 2 ) 
[23464] c:0 is:( loop 0 , 5 , move ul - v0 , 4 + ul ; move v0 , ul )  decode:loop 0 , 4 , move 3 , 4 * v0 
[23465] c:0 is:( loop 0 , 4 , move ua / 4 , v0 ; move v0 - ua , ul )  decode:( move 3 , 0 ; move 4 , 3 ) 
[23466] c:0 is:( move ul , ul ; loop 0 , 4 , move 3 / v0 , ul + v0 )  decode:loop 0 , 4 , move 4 - ua , v0 - 8 
[23467] c:0 is:( move ul , ul - 2 ; loop 0 , 6 , move v0 , v0 - ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[23468] c:0 is:( move ua , ua + ul ; loop 0 , 6 , move v0 , v0 / 3 )  decode:loop 0 , 4 , move ua - ul , v0 + 5 
[23469] c:0 is:( loop 0 , 4 , move 3 , ul ; move v0 - ul , v0 / ua )  decode:loop 0 , 4 , move 3 , ul 
[23470] c:0 is:( move ul - ua , ua / 4 ; loop 0 , 4 , move v0 , v0 )  decode:( move 3 , 0 ; move ua , 0 - 8 ) 
[23471] c:0 is:( move ul / ua , ul ; loop 0 , 5 , move v0 , v0 + 3 )  decode:( move 3 , 9 / 4 ; move ua , 8 ) 
[23472] c:0 is:( v0 = 3 ; loop 1 , 4 , move ua , v0 ; move ul , ua )  decode:loop 0 , 4 , move v0 - ua , 3 
[23473] c:0 is:( move 0 , 4 + 3 ; loop 0 , 5 , move v0 , v0 + v0 )  decode:loop 0 , 4 , move ua - 4 , v0 - 8 
[23474] c:0 is:( move ua , ua + 4 ; loop 0 , 5 , move v0 , ul / v0 )  decode:loop 0 , 4 , move 4 , 0 - ua / v0 
[23475] c:0 is:( move ul , 3 / ua ; loop 0 , 5 , move ul + v0 , v0 )  decode:loop 0 , 4 , move 4 , 0 - 9 
[23476] c:0 is:( move ul , ul - 2 ; loop 0 , 6 , move v0 - ul , v0 )  decode:( move 4 , 9 ; move ua , 3 / 2 ) 
[23477] c:0 is:( move ua + ul , ua + ul ; loop 0 , 3 , move 4 + 3 , 2 )  decode:loop 0 , 4 , move ua + ul , 0 - ul ul 
[23478] c:0 is:( move ua , ua * 3 ; move 3 , 4 ; move 0 - ua , ua + 3 )  decode:( move ua , 0 ; move ua + 3 , 4 ) 
[23479] c:0 is:( move ua - ul , 4 ; loop 0 , 5 , move v0 , v0 - ul )  decode:( move 4 + 3 , 4 ; move 4 , 9 ) 
[23480] c:0 is:( move ul - 4 , ua - ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 + 7 
[23481] c:0 is:( v0 = ul - ua ; loop 1 , 4 , move v0 + v1 , ul )  decode:loop 0 , 3 , move v0 - ua , ul 
[23482] c:0 is:( move ua / 2 , ua * ua ; v0 = 4 ; move v0 , v0 )  decode:( move 3 , ua * ua ; move 4 , 4 ) 
[23483] c:0 is:( move 4 , ul - ua ; loop 0 , 6 , move v0 , v0 - ul )  decode:loop 0 , 4 , move 0 - 4 , 4 * v0 
[23484] c:0 is:( move ul - 4 , ul ; loop 0 , 6 , move ul + v0 , v0 )  decode:loop 0 , 3 , move 3 + 4 , v0 - 9 
[23485] c:0 is:( loop 0 , 6 , move ul , ul / v0 ; move 2 , v0 + ul )  decode:( move ua - ul , 3 ; move 3 , 5 ) 
[23486] c:0 is:( move 2 , ul + ul ; move 2 , 4 + 2 ; move ua - 3 , ul )  decode:( move 4 , 2 ; move 3 , ul ) 
[23487] c:0 is:( loop 0 , 6 , move ul , v0 * 4 ; move v0 , ua + ul )  decode:( move 3 , 0 - 4 ; move ua , 4 ) 
[23488] c:0 is:( move ua - 3 , ul ; loop 0 , 6 , move v0 , ua / v0 )  decode:loop 0 , 4 , move 4 , 4 + v0 
[23489] c:0 is:( loop 0 , 5 , move 2 * 2 , v0 ; move v0 , v0 + 2 )  decode:loop 0 , 4 , move ua , v0 + 3 
[23490] c:0 is:( move 3 * 3 , 3 - ua ; move ua , 2 ; move ua , ua + 3 )  decode:( move 9 , 3 ; move ua + ul , 2 ) 
[23491] c:0 is:( loop 0 , 4 , move v0 , 4 ; move ua , ua ; v1 = ul )  decode:( move 3 , 2 / move ua + 4 , ul ) 
[23492] c:0 is:( ( move 3 , 0 ; move 0 - ul , 2 ) ; move ua , ul + ul )  decode:( move 3 , 0 ; move ua , 4 ) 
[23493] c:0 is:( loop 0 , 6 , move v0 , 4 + ul ; move ua / v0 , ua )  decode:loop 0 , 4 , move 0 - 4 , 3 / v0 
[23494] c:0 is:( move ul + ul , 4 ; loop 0 , 6 , move v0 , v0 - ul )  decode:loop 0 , 4 , move 0 - 4 , 4 - v0 
[23495] c:0 is:( move 0 - ua , ua + 2 ; move 4 - ua , 4 ; move ul , 4 )  decode:( move ua , 2 ; move 3 , 0 - 8 ) 
[23496] c:0 is:( move ul , ul / ua ; loop 0 , 4 , move 3 * v0 , v0 )  decode:loop 0 , 4 , move 3 + 4 , 0 - v0 
[23497] c:0 is:( move 4 + ul , ul / ua ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 * 4 
[23498] c:0 is:( loop 0 , 5 , move ul , 4 / v0 ; move ua + v0 , ul )  decode:( move 3 , 5 ; move ua + 4 , 4 ) 
[23499] c:0 is:( move ua , ul / 3 ; loop 0 , 5 , move v0 , v0 - ul )  decode:( move 4 , 2 / 3 ; move ua , 2 ) 
[23500] c:0 is:( move 2 - ua , 0 ; move ua + 3 , ul ; move ul , 4 * 3 )  decode:( move 4 , 0 ; move ua + 4 , 4 ) 
[23501] c:0 is:( loop 0 , 4 , move v0 , ul / v0 ; move ul - 4 , ul )  decode:( move 3 , 4 ; move ua , ua * ua ) 
[23502] c:0 is:( move ul + ul , ul / 3 ; loop 0 , 6 , move v0 , v0 )  decode:( move ul - ua , ul ; move 8 , 5 ) 
[23503] c:0 is:( move ul - 4 , ul ; loop 0 , 6 , move v0 , v0 - ul )  decode:loop 0 , 4 , move 3 + v0 , 7 * 3 
[23504] c:0 is:( loop 0 , 6 , move ul , v0 - ul ; move ul - v0 , 4 )  decode:( move 5 , 2 / ua ; move 4 , 4 ) 
[23505] c:0 is:( move ua - 3 , ua ; move 4 , 4 - ua ; move 3 , ua + 2 )  decode:( move 0 - 4 , 0 ; move 5 , ul ) 
[23506] c:0 is:loop 0 , 3 , ( move ul , ul ; v1 = ul ; move 3 , v1 )  decode:loop 0 , 4 , move 3 , 2 / v0 
[23507] c:0 is:( move 3 - ua , ua ; ( move 2 , 0 ; move ua - ul , 2 ) )  decode:( move 3 , 0 ; move ua - ul , 2 ) 
[23508] c:0 is:( v0 = ul / ua ; loop 1 , 4 , move ua , v1 + v0 )  decode:loop 0 , 3 , move 3 + 3 , v0 - 3 
[23509] c:0 is:( loop 0 , 5 , move ul , v0 / 4 ; move ul + ul , v0 )  decode:loop 0 , 2 , move 3 , v0 - 2 
[23510] c:0 is:( move 2 , ul ; ( move 2 + ul , 2 ; move ul - ua , 0 ) )  decode:( move 4 , 0 ; move 3 , 0 - 4 ) 
[23511] c:0 is:( loop 0 , 2 , move 3 , v0 ; loop 1 , 3 , move 4 , v0 )  decode:loop 0 , 4 , move 0 - 4 , ul 
[23512] c:0 is:( move 0 - 3 , 4 ; loop 0 , 6 , move v0 , v0 + v0 )  decode:loop 0 , 4 , move ua - v0 , 0 - 9 
[23513] c:0 is:( loop 0 , 4 , move 3 , 2 ; loop 1 , 2 , move v0 , v1 )  decode:loop 0 , 4 , move 4 , 4 * v0 
[23514] c:0 is:( v0 = ua + ul ; loop 1 , 4 , move v1 , ua / v0 )  decode:( move 3 , 9 ; move 3 , ul ) 
[23515] c:0 is:( move 3 * 3 , 0 - ua ; move 3 , ua / 2 ; move ua , ul )  decode:( move 9 , 0 ; move ua + 2 , ul ) 
[23516] c:0 is:loop 0 , 2 , ( move 4 , v0 * 4 ; move 2 + v0 , v0 )  decode:( move 5 , 0 ; move 8 , 2 ) 
[23517] c:0 is:loop 0 , 3 , ( move v0 , v0 * 4 ; move 3 + 2 , v0 )  decode:loop 0 , 3 , move ua + ul , 3 * 6 
[23518] c:0 is:( move ul , 4 + ul ; loop 0 , 6 , move ua / v0 , v0 )  decode:( move 9 , ua / 3 ; move ua , 2 ) 
[23519] c:0 is:( move ua + ul , ul ; move 0 - 3 , 3 ; move 3 * 3 , ul )  decode:( move 9 , ul ; move ua + 4 , 4 ) 
[23520] c:0 is:( move 4 + 3 , ua ; move ua , 4 - ul ; move ua - 2 , 2 )  decode:loop 0 , 4 , move v0 - ua , 0 - 2 
[23521] c:0 is:( move ua / 3 , ul ; loop 0 , 6 , move v0 , ua / v0 )  decode:loop 0 , 4 , move ua - 2 , 4 / v0 
[23522] c:0 is:( loop 0 , 5 , move ul , v0 / 4 ; move v0 - ul , ul )  decode:loop 0 , 4 , move 2 , v0 - 6 
[23523] c:0 is:( move ua , 2 ; move 3 - ul , 4 - 2 ; move 3 , ua - ul )  decode:( move 5 , 2 ; move ul - ua , 2 ) 
[23524] c:0 is:( v0 = ua + ul ; loop 1 , 5 , move v1 , v0 / ua )  decode:loop 0 , 4 , move 4 - ua , 9 - v0 
[23525] c:0 is:( move 3 , ul + ul ; loop 1 , 4 , move v1 , ul / v1 )  decode:loop 0 , 3 , move 3 / v0 , 0 - 8 
[23526] c:0 is:( loop 0 , 4 , move 2 / v0 , v0 ; move 2 , 3 - v0 )  decode:loop 0 , 4 , move 2 , 4 * v0 
[23527] c:0 is:loop 0 , 0 , ( loop 1 , 6 , move 4 , v1 ; move v1 , 2 )  decode:loop 0 , 4 , move 4 + 3 , 4 * 4 
[23528] c:0 is:( move ua + 2 , 4 * 3 ; move ua + ul , 3 ; v0 = ua )  decode:( move ua + ul , 4 * move 7 , 3 ) 
[23529] c:0 is:( move ul , ua ; ( move ua + 2 , ul ; move 2 , 2 * 2 ) )  decode:( move 8 , ul ; move 4 + 4 , 4 ) 
[23530] c:0 is:( v0 = ua - ul ; loop 1 , 7 , move ul - v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - 2 
[23531] c:0 is:loop 0 , 5 , ( v1 = ua - v0 ; move ua / v1 , ul )  decode:loop 0 , 3 , move 4 - ua , 5 
[23532] c:0 is:( move 3 , ua - ul ; move ua - 2 , ul / 2 ; v1 = 0 )  decode:( move 3 , 9 ; move 4 , 2 / 4 ) 
[23533] c:0 is:( move 4 , 3 ; move ua + 2 , ul - 2 ; v0 = ua - ul )  decode:( move ua + 2 , 2 ; move 4 , ul ) 
[23534] c:0 is:( move ul + ul , 0 ; ( move 2 , ul ; move 3 + ul , 3 ) )  decode:( move 3 , 0 ; move 3 , 4 3 ) 
[23535] c:0 is:( move 2 , 2 * 2 ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move 4 , 4 ; move ua + 2 , 9 ) 
[23536] c:0 is:( move ul - 3 , 4 * 4 ; move ua , ul - 2 ; move ul , 0 )  decode:( move 2 , 4 / ua ; move 7 , 2 ) 
[23537] c:0 is:( loop 0 , 6 , move ul , ul / v0 ; move v0 / ua , 4 )  decode:( move 3 , 0 ; move 4 , 7 ) 
[23538] c:0 is:loop 0 , 5 , ( v1 = ul / v0 ; move ul + v1 , ul )  decode:loop 0 , 4 , move 0 - 2 , ua / 4 
[23539] c:0 is:( move 2 , ua ; ( move 3 + ul , ul - ua ; move 3 , 2 ) )  decode:( move 4 , 0 ; move 4 , ua / 3 ) 
[23540] c:0 is:( v0 = 2 ; move 2 , v0 ; loop 1 , 3 , move 4 , v1 )  decode:( move ua + ul , 2 ; move ua , 2 ) 
[23541] c:0 is:( ( move 2 + ul , 4 ; move ua - ul , 2 ) ; move ua , 2 )  decode:loop 0 , 3 , move ua - ul , 4 * 0 3 0 2 / 
[23542] c:0 is:( move ua - 2 , ul - 2 ; loop 0 , 5 , move ul , ul / 2 )  decode:loop 0 , 4 , move 2 , v0 - ul 
[23543] c:0 is:( move ua , ul ; move 4 / ua , 3 - ul ; move 4 , 0 - 3 )  decode:( move 3 , ul ; move ua , 2 - 3 ) 
[23544] c:0 is:( v0 = ul ; loop 1 , 6 , move ul , v1 ; move 3 , ul )  decode:( move 2 , ul ; move ua - ua , 4 ) 
[23545] c:0 is:( v0 = 2 ; move v0 , 2 ; loop 1 , 3 , move v1 , 4 )  decode:( move 3 , 2 ; move 2 , 4 ) 
[23546] c:0 is:( loop 0 , 9 , v1 = 4 ; move ua , ua ; move ua , v0 )  decode:( move ua , 0 ; move ua , 8 ) 
[23547] c:0 is:( move 4 , ul ; ( move 3 + 2 , 2 ; move ua , ul + ul ) )  decode:loop 0 , 3 , move ua - ul , v0 * 2 
[23548] c:0 is:( move 0 , ua - 2 ; loop 0 , 0 , loop 1 , 6 , move 4 , 4 )  decode:loop 0 , 4 , move 4 - ua , 4 
[23549] c:0 is:loop 0 , 3 , ( move 4 , v0 ; v1 = v0 ; move 4 , 2 )  decode:loop 0 , 4 , move ua - v0 , 0 - 2 
[23550] c:0 is:( move 2 , ua + 4 ; ( move ua , 2 ; move ul , 2 / ua ) )  decode:( move 2 , 4 ; move ua + ul , 2 ) 
[23551] c:0 is:( loop 0 , 4 , move v0 , v0 ; move 4 * 2 , v0 / 3 )  decode:( move 3 , 5 ; move 3 + 3 , 3 ) 
[23552] c:0 is:( move ul , 2 / 3 ; move ua , 4 + ul ; move 4 - 2 , ul )  decode:( move 2 , 4 + 9 ; move 7 , 7 ) 
[23553] c:0 is:( move ua , 3 ; move ul / 2 , ua / 3 ; move 3 , ua - 3 )  decode:( move 3 , 2 - 3 ; move ua , ul ) 
[23554] c:0 is:( move ua - 3 , ua ; ( move ua , 3 + 2 ; move 4 , ul ) )  decode:loop 0 , 4 , move 3 , v0 * v0 
[23555] c:0 is:( ( move ua - ul , 2 ; move 2 , 2 + ul ) ; move 4 , ul )  decode:( move 4 , 2 ; move ua , 3 ) 
[23556] c:0 is:( move ua , ua ; ( move ua , 3 ; move 3 * 2 , ua + 4 ) )  decode:( move 7 , 4 ; move ua + ul , 4 ) 
[23557] c:0 is:( loop 0 , 9 , v1 = 0 ; move 2 , 2 ; move v0 , v0 )  decode:( move 2 , 2 ; move ua + 2 , 8 ) 
[23558] c:0 is:( move 4 + 4 , 3 + ul ; move 3 , ua - ul ; v0 = ul )  decode:( move 3 , 5 ; move ua + ul , ul ) 
[23559] c:0 is:loop 0 , 5 , ( v1 = v0 / ua ; move ul / v1 , ul )  decode:( move 8 , 2 ; move ua - ul , 2 ) 
[23560] c:0 is:loop 0 , 7 , ( v1 = v0 + v0 ; move 2 , v1 - 2 )  decode:loop 0 , 4 , move 3 , ua / v0 * 2 
[23561] c:0 is:loop 0 , 7 , ( v1 = ua / v0 ; move ul , ul - v1 )  decode:( move 3 , ua / 4 ; move 4 , 4 ) 
[23562] c:0 is:( v0 = ul - ua ; loop 1 , 7 , move ul , v0 / v1 )  decode:loop 0 , 3 , move ua - 4 , 4 / 3 
[23563] c:0 is:( move ua + ul , 2 / 4 ; move 2 , ua - 4 ; v1 = ul )  decode:( move 3 , 6 ; move ua , 4 ) 
[23564] c:0 is:( ( move 0 - ua , 3 ; move ua , 3 / ua ) ; v0 = ul )  decode:( move ua , ul / 3 ; move ua , 9 ) 
[23565] c:0 is:( move ua - 3 , ua + 2 ; ( move ul , ul ; move 4 , 4 ) )  decode:( move 5 , 2 ; move 3 , 5 ) 
[23566] c:0 is:loop 0 , 5 , ( v1 = 4 - v0 ; move v0 , v1 + 3 )  decode:loop 0 , 4 , move v0 - 4 , 0 - 3 
[23567] c:0 is:( move ua , 2 ; move ul / 2 , 3 ; move 4 - ul , ua / 4 )  decode:( move ua , 0 - 4 ; move ua , 8 ) 
[23568] c:0 is:loop 0 , 6 , ( v1 = v0 ; move v0 - 4 , 3 + v0 )  decode:loop 0 , 3 , move ua - 3 , 3 + v0 
[23569] c:0 is:( ( move ua , ua / 3 ; move ul , ua + 4 ) ; move 3 , 2 )  decode:( move 4 , 9 / 3 ; move 4 , 3 ) 
[23570] c:0 is:( loop 0 , 9 , v1 = 0 ; loop 2 , 2 , move v0 , v0 )  decode:8 move ua , 8 ; move 8 , 8 ) 
[23571] c:0 is:( move ua + 3 , 4 ; ( move 2 - ua , ul ; move 4 , ul ) )  decode:( move 3 + 4 , 4 ; move 9 , ul ) 
[23572] c:0 is:( ( move 4 , 0 ; move 2 , ul + ul ) ; move ua , ul / 4 )  decode:( move 4 , 0 ; move 8 , 2 ) 
[23573] c:0 is:( move ua , ul - 3 ; ( move 2 , 4 ; move 4 , ua + ul ) )  decode:( move ua , 0 - 2 ; move ua , 4 ) 
[23574] c:0 is:( v0 = 4 ; move v0 , 2 ; loop 1 , 6 , move 2 , v1 )  decode:( move ua , ua / 3 ; move ua , 9 ) 
[23575] c:0 is:( move 3 , ua * 3 ; ( move ua , ul ; move 2 , 4 + ul ) )  decode:( move 3 , 0 ; move ua + 2 , ul ) 
[23576] c:0 is:( move ua , 3 ; ( move 3 , 4 + 4 ; move ua + ul , ul ) )  decode:( move ua , 8 ; move 8 , 0 - 4 ) 
[23577] c:0 is:( move ua , ul / 2 ; ( move ua , 4 ; move ul / 2 , 0 ) )  decode:( move ua , 3 / 7 ; move 7 , 4 ) 
[23578] c:0 is:( ( move 2 , ul + ul ; move 4 , 2 ) ; move ul / 2 , ul )  decode:( move 4 , 9 ; move 3 , 0 - 2 ) 
[23579] c:0 is:( ( v0 = 0 ; move ul , ul ) ; move ua + 3 , ua / 4 )  decode:( move ul , 4 ; move ua + 0 - 4 ) 
[23580] c:0 is:( move 4 , 3 / ua ; ( move 0 , ul ; move 4 , ua * ua ) )  decode:loop 0 , 3 , move 0 - 3 , 4 * 4 
[23581] c:0 is:( v0 = 4 + 2 ; loop 1 , 6 , move v1 - v0 , v1 )  decode:loop 0 , 4 , move ul - ua , v0 + d
[23582] c:0 is:( ( move 3 / 2 , ul ; move ua , ul / 2 ) ; move ua , 2 )  decode:( move ua + ul , 3 + move ua , 2 ) 
[23583] c:0 is:( loop 0 , 9 , v1 = 0 ; loop 2 , 3 , move v0 , v0 )  decode:loop 0 , 3 , move ua + 2 , 8 
[23584] c:0 is:( ( move 3 , ul ; move ul , ua + 4 ) ; move ua , 3 / 2 )  decode:( move 3 , 4 * 4 ; move 3 , 4 ) 
[23585] c:0 is:( v0 = 4 * 2 ; loop 1 , 5 , move v1 , v1 + v0 )  decode:loop 0 , 4 , move 0 - 2 , v0 / 4 
[23586] c:0 is:( ( move ua , 0 ; move 3 , ul / 2 ) ; move 4 / ua , ul )  decode:( move ua , 0 ; move 3 , 7 / 4 ) 
[23587] c:0 is:( ( move ua , ul / 2 ; move ul , 3 + ul ) ; move 3 , 3 )  decode:( move ua , 2 / 4 ; move 3 , 6 ) 
[23588] c:0 is:( move 4 , 4 / 3 ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move ua + 3 , 3 ; move 9 , 8 ) 
[23589] c:0 is:( move 4 , ul / 4 ; ( move ua , 2 - ua ; move ua , 3 ) )  decode:0 loop 0 , 4 , move 4 , 4 * 4 
[23590] c:0 is:( move 3 - ul , 4 / ua ; ( move 3 , 2 ; move ua , ul ) )  decode:( move 4 , 9 ; move ua + ul , ul ) 
[23591] c:0 is:( move ua - 4 , ul ; ( move 3 , ul ; move 2 - 4 , ul ) )  decode:( move 2 , 9 ; move ua , 0 - 4 ) 
[23592] c:0 is:( move ua - 3 , 4 ; ( move ul + ul , ul ; move 4 , 4 ) )  decode:( move ul - ua , ul ; move 3 , 7 ) 
[23593] c:0 is:( v0 = 4 * 2 ; ( move v0 , v0 ; move v0 , 4 ) )  decode:( move ua + ul , 8 ; move 8 , 4 ) 
[23594] c:0 is:( v0 = 4 / 3 ; loop 1 , 6 , move v1 + v0 , v0 )  decode:loop 0 , 4 , move ua - ul , 9 + v0 
[23595] c:0 is:( move 3 , 4 / ua ; ( move ua - 4 , 3 ; move ua , ul ) )  decode:( move 3 , 0 - 9 ; move ua , ul ) 
[23596] c:0 is:loop 0 , 7 , ( v1 = 3 * 2 ; move v0 , v1 * v0 )  decode:loop 0 , 4 , move 4 + v0 , 0 - 8 
[23597] c:0 is:( move ua , 4 / ua ; ( move 2 , ua / 4 ; move ua , 3 ) )  decode:( move 5 , 2 ; move ua + ul , 9 ) 
[23598] c:0 is:( loop 0 , 9 , v1 = v0 ; loop 2 , 3 , move 3 , v1 )  decode:loop 0 , 3 , move 3 , 8 
[23599] c:0 is:loop 0 , 7 , ( v1 = v0 * v0 ; move 3 , v1 / 3 )  decode:loop 0 , 4 , move v0 + 3 , 9 
[23600] c:0 is:( v0 = 2 ; loop 1 , 6 , move v1 / v0 , v0 / 4 )  decode:loop 0 , 3 , move ua - 4 , 3 / 4 
[23601] c:0 is:loop 0 , 3 , ( move ua + ul , v0 ; move v0 , ua + ul )  decode:loop 0 , 4 , move ua , v0 * vv0 
[23602] c:0 is:loop 0 , 3 , ( move v0 , v0 + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move v0 , 2 + 4 
[23603] c:0 is:( loop 0 , 9 , v1 = v0 ; loop 2 , 3 , move 4 , v1 )  decode:loop 0 , 3 , move 4 , 8 
[23604] c:0 is:loop 0 , 3 , ( move v0 + v0 , v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 3 - ua , 4 * 0 3 
[23605] c:0 is:loop 0 , 2 , ( move ul , ul ; move v0 , ua ; move ua , 2 )  decode:loop 0 , 4 , move 0 - 4 , v0 0 
[23606] c:0 is:loop 0 , 3 , ( move v0 + v0 , ua + ul ; move ul , ul )  decode:( move 3 , 9 ; move ua - 2 , 2 ) 
[23607] c:0 is:( move ua , ua + ua ; loop 0 , 5 , move v0 , v0 + ul )  decode:loop 0 , 4 , move 3 , v0 + 7 
[23608] c:0 is:loop 0 , 2 , ( move ul , v0 - ua ; move v0 - ua , ul )  decode:( move ua , ul ; move ul - ua , ul ) 
[23609] c:0 is:( move ua , ul ; move 0 , ul ; loop 0 , 4 , move v0 , ul )  decode:( move ul - ua , ul ; move ua , 6 ) 
[23610] c:0 is:( loop 0 , 3 , move ul , ul ; move 2 , ua ; move ua , v0 )  decode:( move 4 , ua * ua ; move ua , 2 ) 
[23611] c:0 is:loop 0 , 2 , ( move 2 , v0 ; move ua , 2 ; move v0 , 0 )  decode:loop 0 , 4 , move 4 , 2 
[23612] c:0 is:loop 0 , 6 , ( loop 1 , 8 , v2 = v1 ; move v1 , 2 )  decode:loop 0 , 4 , move 4 + 4 , 4 
[23613] c:0 is:( move ul , ua ; loop 0 , 4 , move ua , 2 ; move ua , v0 )  decode:loop 0 , 4 , move ua + ul , 2 
[23614] c:0 is:( loop 0 , 9 , v1 = 4 ; loop 2 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 4 + 3 , 0 - 8 
[23615] c:0 is:( move ul , 0 ; loop 0 , 4 , move ul , v0 ; move ua , ul )  decode:( move 3 , 4 ; move ua + ul , 7 ) 
[23616] c:0 is:loop 0 , 2 , ( move ul - ua , ul + ul ; move v0 , v0 )  decode:( move ul - ua , 2 ; move 5 , 2 ) 
[23617] c:0 is:loop 0 , 2 , ( move v0 - ul , v0 ; move ua , ua * ua )  decode:( move 5 , ua / 4 ; move ua , 7 ) 
[23618] c:0 is:( loop 0 , 9 , v1 = v0 ; loop 2 , 4 , move 4 , v1 )  decode:loop 0 , 4 , move 4 , 8 
[23619] c:0 is:loop 0 , 2 , ( move ul , ua ; move v0 , 3 ; move ua , ul )  decode:( move 8 , 4 ; move ua , 4 ) 
[23620] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move v0 , v0 * v0 )  decode:loop 0 , 3 , move 2 , v0 + 8 
[23621] c:0 is:( loop 0 , 3 , move ua - ul , v0 + ul ; move v0 , ul )  decode:( move ua + ul , 0 ; move 7 , 3 ) 
[23622] c:0 is:( loop 0 , 4 , move v0 , v0 + ua ; move ul - ua , ul )  decode:( move 5 , 0 ; move 4 , 0 - 4 ) 
[23623] c:0 is:( move ul , ua * ua ; loop 0 , 3 , move v0 + v0 , ul )  decode:( move 2 , 9 ; move ua - ul , 4 ) 
[23624] c:0 is:( move ua , ua - ul ; loop 0 , 4 , move ul , v0 + v0 )  decode:( move 2 , ul ; move ua , 4 / 4 ) 
[23625] c:0 is:( move ua + ul , ua * ua ; loop 0 , 4 , move v0 , v0 )  decode:( move 3 , ua / 2 ; move 8 , 4 ) 
[23626] c:0 is:loop 0 , 5 , ( loop 1 , 9 , v2 = v0 ; move v1 , 4 )  decode:loop 0 , 4 , move ua + 2 , 0 - 4 
[23627] c:0 is:( move ul - ua , ul ; loop 0 , 3 , move v0 + ul , v0 )  decode:loop 0 , 3 , move 3 - ua , 4 * 4 
[23628] c:0 is:loop 0 , 3 , ( move v0 , v0 * v0 ; move v0 , v0 )  decode:loop 0 , 3 , move 2 , v0 + ua 
[23629] c:0 is:loop 0 , 3 , ( move ul + v0 , ul + ul ; move v0 , ul )  decode:( move 4 , 5 ; move 4 , 0 - 4 ) 
[23630] c:0 is:loop 0 , 2 , ( move ua , v0 ; move v0 , 0 ; move 3 , 2 )  decode:( move 9 , 0 ; move ua , 4 ) 
[23631] c:0 is:( loop 0 , 5 , move v0 , v0 + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[23632] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 + ua , ul + ul )  decode:( move ua , 9 ; move ua + 3 , 2 ) 
[23633] c:0 is:( loop 0 , 5 , move v0 , v0 ; move v0 , v0 + v0 )  decode:0 0 loop 0 , 4 , move 3 , 3 * ua 
[23634] c:0 is:( loop 0 , 4 , move v0 , v0 ; move ua - ul , ua + ul )  decode:( move 3 , 5 ; move ua , 2 / 3 ) 
[23635] c:0 is:( move ua , ua ; move ul , ua ; loop 0 , 4 , move v0 , 3 )  decode:( move ua + 3 , 0 ; move 3 , 9 ) 
[23636] c:0 is:( move ua + ul , ul ; loop 0 , 4 , move v0 , ua - v0 )  decode:( move ua + ul , ul ; move 2 , 9 ) 
[23637] c:0 is:loop 0 , 3 , ( move ul , ua - v0 ; move ul , v0 - ul )  decode:loop 0 , 3 , move 2 , v0 0 
[23638] c:0 is:( loop 0 , 5 , move ul + ul , v0 ; move ua + ul , v0 )  decode:( move 4 , 0 ; move ua + 2 , 8 ) 
[23639] c:0 is:loop 0 , 2 , ( move ul , ul / v0 ; move ua , v0 + ul )  decode:( move ua + ul , 2 ; move ua , 4 ) 
[23640] c:0 is:( loop 0 , 6 , move v0 , v0 + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move v0 + 4 , 0 - 9 
[23641] c:0 is:( loop 0 , 3 , move ul + v0 , ul / v0 ; move ua , ua )  decode:( move 2 , 2 ; move 4 + 4 , 7 ) 
[23642] c:0 is:( move ua , 3 ; move ul , ua ; loop 0 , 4 , move v0 , ul )  decode:( move 8 , 3 ; move ua , 0 - 4 ) 
[23643] c:0 is:loop 0 , 3 , ( move ul - v0 , 2 ; move v0 + v0 , 0 )  decode:loop 0 , 3 , move ua - 4 , 2 
[23644] c:0 is:( move ua , ua ; move ua , 3 ; loop 0 , 5 , move ul , v0 )  decode:( move 4 + 4 , 0 ; move 5 , 2 ) 
[23645] c:0 is:( loop 0 , 5 , move v0 , v0 ; move ua + ul , ul + ul )  decode:( move 5 , 9 + 2 ; move 8 , 2 ) 
[23646] c:0 is:( move ul , ul ; move ua , ul ; loop 0 , 4 , move 2 , v0 )  decode:( move 9 , 2 ; move 3 , 0 - 4 ) 
[23647] c:0 is:( move ua + ul , ul ; loop 0 , 4 , move v0 , ul - v0 )  decode:( move 3 , ul ; move ua + 4 , 2 ) 
[23648] c:0 is:loop 0 , 3 , ( move v0 - ua , v0 * 2 ; move v0 , 0 )  decode:loop 0 , 3 , move 0 - ua , v0 * 2 
[23649] c:0 is:( move ua - ul , ul ; loop 0 , 6 , move v0 , v0 + ua )  decode:loop 0 , 3 , move ua , v0 - 9 
[23650] c:0 is:loop 0 , 3 , ( move v0 , ul / ua ; move v0 - ua , ul )  decode:loop 0 , 4 , move 4 , 0 - 4 / v0 
[23651] c:0 is:( loop 0 , 9 , v1 = v0 ; loop 2 , 7 , move 4 , v1 )  decode:loop 0 , 4 , move ua - ul , 0 - 2 
[23652] c:0 is:( move ua + ul , ua * ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move v0 * 3 , 9 
[23653] c:0 is:( loop 0 , 5 , move ul - v0 , v0 ; move ua , ul + ul )  decode:( move 4 , 4 / ua ; move 8 , 2 ) 
[23654] c:0 is:loop 0 , 2 , ( move v0 * ua , ul / ua ; move ul , v0 )  decode:( move 2 , 2 / 4 ; move 4 , ul ) 
[23655] c:0 is:( loop 0 , 5 , move ul , ul ; move v0 + v0 , ua - ul )  decode:( move 2 , ul ; move ua + 4 , 2 ) 
[23656] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 + ul , ua / v0 )  decode:( move ua + ul , ul ; move 4 , ul ) 
[23657] c:0 is:( move ua , ua ; loop 0 , 6 , move v0 - ul , ua - v0 )  decode:( move ua , 4 ; move ua , 9 ) 
[23658] c:0 is:( move ua , ua + ul ; loop 0 , 6 , move v0 - ul , v0 )  decode:loop 0 , 3 , move v0 + 2 , 4 + 7 
[23659] c:0 is:loop 0 , 3 , ( move ua , v0 ; move ul / v0 , ul + ul )  decode:loop 0 , 4 , move v0 - ua , ua / 4 
[23660] c:0 is:( loop 0 , 5 , move v0 + ul , ul ; move ua , ul - v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 * 5 
[23661] c:0 is:( move ua - ul , ul ; loop 0 , 4 , move v0 , ul - v0 )  decode:( move 4 , 2 ; move 8 , ua / 2 ) 
[23662] c:0 is:( move ua , ua - ul ; loop 0 , 6 , move v0 , ua - v0 )  decode:loop 0 , 3 , move ua + v0 , 0 - 2 
[23663] c:0 is:( loop 0 , 4 , move ul + ul , ul ; move ua , v0 * v0 )  decode:loop 0 , 3 , move ua - 2 , 0 - 9 
[23664] c:0 is:( move ua , 3 + 2 ; loop 0 , 3 , move v0 + v0 , v0 )  decode:( move ua , 5 ; move ua + ul , 4 ) 
[23665] c:0 is:( loop 0 , 5 , move ul - v0 , ul ; move ua , v0 + ul )  decode:loop 0 , 3 , move 4 , 4 + v0 
[23666] c:0 is:( loop 0 , 5 , move v0 , ul + ul ; move ul + v0 , ul )  decode:loop 0 , 4 , move 0 - 4 , 4 / v0 
[23667] c:0 is:( loop 0 , 6 , move ul , v0 - ul ; move ua + ul , v0 )  decode:( move 3 , 0 ; move ua + 2 , 4 ) 
[23668] c:0 is:( move ua , ul ; move ul , ul ; loop 0 , 4 , move v0 , 4 )  decode:( move ua + 2 , ul ; move 2 , 9 ) 
[23669] c:0 is:( move ua , ul + ul ; move 3 + 2 , 2 ; move ua , 3 + ul )  decode:( move 9 , 2 ; move 9 , 4 ) 
[23670] c:0 is:( move 3 - ua , 0 ; move 0 - ua , ul ; move ua / 3 , ul )  decode:( move 3 , 0 ; move ua + 2 , ul ) 
[23671] c:0 is:( move ul , ul ; loop 0 , 3 , move v0 + ul , ul / v0 )  decode:loop 0 , 4 , move 2 , v0 - 3 
[23672] c:0 is:( loop 0 , 2 , move 2 + v0 , v0 + ul ; move v0 , 4 )  decode:( move 3 , ul ; move 3 , 2 ) 
[23673] c:0 is:( move ua + ul , ul ; loop 0 , 6 , move v0 , v0 - ul )  decode:loop 0 , 4 , move 2 - ua , ul * v0 
[23674] c:0 is:( move ua , ua ; move 3 - ul , 2 * 2 ; move ua , 0 - ul )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[23675] c:0 is:( move 2 , 2 ; loop 0 , 3 , move v0 , ul ; move 2 , v0 )  decode:loop 0 , 3 , move ua - 4 , 2 
[23676] c:0 is:( move ua , ul ; loop 0 , 4 , move v0 + ul , ul / v0 )  decode:loop 0 , 4 , move 3 - ua , v0 / 3 
[23677] c:0 is:( move ul , ul ; loop 0 , 5 , move ul + v0 , ul - v0 )  decode:loop 0 , 3 , move 5 , 2 / 3 / v0 
[23678] c:0 is:( loop 0 , 4 , move v0 * v0 , ua * ua ; move ul , ul )  decode:( move 9 , ul - 3 ; move ua , 8 ) 
[23679] c:0 is:( move 0 - ul , 2 ; loop 0 , 5 , move v0 , v0 + v0 )  decode:loop 0 , 3 , move 3 - ua , ua / 4 
[23680] c:0 is:loop 0 , 3 , ( move v0 , ul + v0 ; move 2 + v0 , 3 )  decode:0 loop 0 , 3 , move 3 - ua , 4 * 4 
[23681] c:0 is:loop 0 , 3 , loop 1 , ul , loop 2 , 2 , move v0 * 3 , v0  decode:loop 0 , 3 , move ua , 4 / v0 
[23682] c:0 is:loop 0 , 3 , ( move 2 + ul , ua ; move ul - ua , ua + 3 )  decode:( move ua + 3 , 3 ; move 8 , 3 ) 
[23683] c:0 is:loop 0 , 3 , ( move v0 , v0 - ul ; move ul , ul / ua )  decode:( move 3 , 0 - 9 ; move 3 , 5 ) 
[23684] c:0 is:( loop 0 , 2 , move 2 , v0 + 4 ; move ua - v0 , v0 )  decode:( move 4 , ua / 2 ; move 5 , 7 ) 
[23685] c:0 is:( move 4 , 0 ; loop 0 , 5 , move v0 , v0 ; move ul , 0 )  decode:loop 0 , 4 , move 3 + v0 , 3 / 2 
[23686] c:0 is:( loop 0 , 3 , move ul , ul / v0 ; move ua , ul - v0 )  decode:( move ua , 9 + 2 ; move 3 , 4 ) 
[23687] c:0 is:( loop 0 , 4 , move ul , ul ; move v0 - ua , ul / v0 )  decode:( move 3 , 0 - 2 ; move 4 , 4 ) 
[23688] c:0 is:( move ul , 0 ; loop 0 , 5 , move v0 , v0 ; move 3 , 2 )  decode:loop 0 , 4 , move 3 - ua , 9 / v0 
[23689] c:0 is:( move ua , 4 ; move ua , ua + 3 ; move ua + 2 , 3 - ul )  decode:loop 0 , 3 , move ua + v0 , ua / 3 
[23690] c:0 is:( move ua , 4 + 3 ; loop 0 , 3 , move v0 , v0 + v0 )  decode:( move ua , 4 + 3 ; move 2 , 6 ) 
[23691] c:0 is:( loop 0 , 4 , move v0 , 0 ; move ul + v0 , 3 * v0 )  decode:( move ua , 0 ; move 4 , 9 ) 
[23692] c:0 is:( loop 0 , 3 , move ua , 2 ; loop 1 , 2 , move v1 , v0 )  decode:loop 0 , 4 , move 4 , 2 0 + 4 / 3 
[23693] c:0 is:( move ua , 0 - 4 ; loop 0 , 3 , move v0 * v0 , v0 )  decode:( move ua , 0 - 4 ; move 5 , 2 ) 
[23694] c:0 is:( move 4 , ua - 2 ; loop 0 , 3 , move v0 + v0 , v0 )  decode:loop 0 , 4 , move 4 - ua , 0 - 5 
[23695] c:0 is:loop 0 , 3 , ( move 2 - v0 , 4 ; move v0 , ua + v0 )  decode:( move 2 , 4 ; move 4 , ua / 4 ) 
[23696] c:0 is:( move ul + ul , ul ; loop 0 , 6 , move ul - v0 , v0 )  decode:loop 0 , 3 , move v0 - ua , 4 - 3 
[23697] c:0 is:( move ua + ul , ul / ua ; loop 0 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - 9 
[23698] c:0 is:( move ua , ul / ua ; loop 0 , 5 , move ul - v0 , v0 )  decode:loop 0 , 4 , move 3 , ul - v0 / ua 
[23699] c:0 is:loop 0 , 3 , ( move v0 , 0 ; move v0 * v0 , ua - 4 )  decode:loop 0 , 3 , move 3 - v0 , 0 - 9 
[23700] c:0 is:( move ua - ul , 3 - ul ; move ul , ul ; move 0 - 4 , 0 )  decode:( move ua , 2 ; move 3 - ua , ul ) 
[23701] c:0 is:( move 4 + ul , ua + ul ; move 2 , ul - 4 ; move ua , 0 )  decode:( move ua + ul , 4 ; move 4 , 3 ) 
[23702] c:0 is:( loop 0 , 4 , move 2 , v0 + v0 ; move ul - v0 , 2 )  decode:loop 0 , 4 , move 4 - ua , 9 + v0 
[23703] c:0 is:( move 3 , ul + ul ; move 0 , 2 - ua ; move 4 , ua * ua )  decode:( move 3 , 2 ; move 4 , 7 + 4 ) 
[23704] c:0 is:( move 2 , ua ; loop 0 , 3 , move v0 + v0 , v0 / 2 )  decode:loop 0 , 3 , move 3 / v0 , 2 / 4 
[23705] c:0 is:( move 0 , ul ; loop 0 , 4 , move v0 + v0 , 4 - v0 )  decode:( move 4 , 9 + 4 ; move ua , ul ) 
[23706] c:0 is:( move 0 , ul ; loop 0 , 4 , move v0 - 4 , v0 + v0 )  decode:loop 0 , 4 , move 4 - ua , 4 * v0 
[23707] c:0 is:( move ua , ua ; move ul / ua , ua - 2 ; move 3 + 2 , 3 )  decode:( move ua , 0 ; move 4 , ul ) 
[23708] c:0 is:( move ul , 3 + ul ; move 3 + ul , 4 ; move 0 - ua , ul )  decode:( move 4 , ua / 4 ; move ua , ul ) 
[23709] c:0 is:( ( move ul - ua , 0 - 2 ; move ul , 0 ) ; move ua , ul )  decode:( move 4 , 4 / 4 ; move ua , ul ) 
[23710] c:0 is:( loop 0 , 4 , move 2 , ul ; move 2 , v0 ; move v0 , 3 )  decode:loop 0 , 3 , move 3 - ua , v0 / 4 
[23711] c:0 is:( move ua + ul , ua + ul ; move 4 , 4 ; move 2 + ul , 2 )  decode:( move ua + ul , ul ; move ua , 4 ) 
[23712] c:0 is:( move 3 , 2 + ul ; move 2 * 2 , ul ; move ul - ua , ua )  decode:( move 4 , 7 ; move 4 , 0 - 2 ) 
[23713] c:0 is:loop 0 , 3 , ( move ul , v0 ; move 3 * v0 , v0 + 2 )  decode:( move 4 , 7 ; move ua - ul , 7 ) 
[23714] c:0 is:( loop 0 , 4 , move v0 , 3 - v0 ; move 2 , ul + v0 )  decode:( move 2 , 4 ; move ua - ul , 4 ) 
[23715] c:0 is:( move 2 , 2 ; move ua , ua + ul ; move ua - ul , 3 * 3 )  decode:( move ua + ul , 0 ; move ua , 9 ) 
[23716] c:0 is:( move ua , ul / ua ; loop 0 , 4 , move v0 , ul / v0 )  decode:loop 0 , 4 , move 3 , 3 * ua 
[23717] c:0 is:( move 2 , ua ; ( move ua , 0 - ul ; move ua , 2 - ua ) )  decode:( move 9 , 2 - 3 ; move ua , 2 ) 
[23718] c:0 is:( loop 0 , 5 , move 2 , v0 * v0 ; move ua , 2 + v0 )  decode:( move ua , 8 / 5 ; move ua , 8 ) 
[23719] c:0 is:( loop 0 , 5 , move 2 , 3 ; move ul + v0 , v0 + v0 )  decode:loop 0 , 4 , move 2 , v0 - 9 
[23720] c:0 is:( move ul , ul ; loop 0 , 5 , move v0 , ul ; move 4 , ul )  decode:( move ua , 4 ; move ua - ul , 4 ) 
[23721] c:0 is:( loop 0 , 6 , move ul / v0 , ul ; move ua , ua - v0 )  decode:( move ua , 0 - 2 ; move 2 , 2 ) 
[23722] c:0 is:( loop 0 , 4 , move v0 + 4 , v0 ; move v0 / ua , 0 )  decode:loop 0 , 4 , move 0 - ua , v0 
[23723] c:0 is:loop 0 , 3 , ( move 3 , v0 + 4 ; move v0 , v0 - ua )  decode:loop 0 , 4 , move v0 - 4 , 4 - 7 
[23724] c:0 is:( move 3 / ua , 3 - ua ; move ua + ul , 0 ; move ua , 4 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[23725] c:0 is:loop 0 , 3 , ( move v0 , ua + 4 ; move v0 * 2 , v0 )  decode:( move 5 , 2 - 4 ; move 4 , 9 ) 
[23726] c:0 is:( move ua + 3 , 3 + ul ; loop 0 , 3 , move ul , ua - ul )  decode:( move 9 , ul ; move 4 , 4 + 4 ) 
[23727] c:0 is:( move 2 , 4 - 2 ; move 2 , ua * ua ; move ua + ul , ul )  decode:( move 3 , 9 ; move ua + 2 , 4 ) 
[23728] c:0 is:loop 0 , 3 , ( move v0 , v0 + 2 ; move 4 , ul - v0 )  decode:loop 0 , 4 , move 4 , 3 / v0 
[23729] c:0 is:loop 0 , 2 , ( move ul + v0 , v0 * v0 ; move 3 , 4 )  decode:( move ul - ua , ul ; move 3 , 7 ) 
[23730] c:0 is:( move 0 - 4 , ua ; loop 0 , 2 , move 3 + 2 , v0 + ul )  decode:( move ua , ul ; move ua , 0 - 4 ) 
[23731] c:0 is:( move ua - ul , ua - 4 ; move ua , 4 ; move 2 , 2 + ul )  decode:( move ua , 0 - 4 ; move ua , 4 ) 
[23732] c:0 is:( loop 0 , 3 , move v0 + v0 , ua - 4 ; move 4 , v0 )  decode:( move 5 , 2 ; move 5 , 2 ) 
[23733] c:0 is:( loop 0 , 4 , move ua , 3 ; loop 1 , 3 , move v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - 3 
[23734] c:0 is:( move 3 , 4 ; move 2 , ua * ua ; move ua - ul , ua - 2 )  decode:( move 4 , 4 ; move 5 , 2 ) 
[23735] c:0 is:( loop 0 , 3 , move ul , 3 ; move v0 , 4 ; move 2 , v0 )  decode:loop 0 , 3 , move 2 , 0 - 9 0 
[23736] c:0 is:( move ua , ua - 4 ; move ua + ul , 2 - 4 ; move ua , 3 )  decode:loop 0 , 3 , move 2 + 4 , 0 - 2 
[23737] c:0 is:( move 3 , 2 - ul ; move 4 , ua - 2 ; move ua - ul , ua )  decode:( move 9 , 4 ; move 4 , 0 - 2 ) 
[23738] c:0 is:( move ua + ul , ul / ua ; loop 0 , 0 , move ua - 4 , 4 )  decode:( move 2 , ul / 6 ; move 2 , 4 ) 
[23739] c:0 is:( move ua , ul ; v0 = ua / 4 ; move ua , v0 * v0 )  decode:( move ua , 2 / ua ; move ua , 7 ) 
[23740] c:0 is:( move ul - ua , ua * 3 ; move ul , 2 ; move 3 + ul , 2 )  decode:( move 0 - ua , 0 ; move 3 , 4 ) 
[23741] c:0 is:( move ul - ua , 0 ; ( move ul , 2 + ul ; move ua , 2 ) )  decode:( move ua , 0 ; move 7 , ua * ua ) 
[23742] c:0 is:loop 0 , 3 , ( move 2 , v0 / ua ; move 3 - v0 , v0 )  decode:( move ua + 2 , 0 ; move ua , 5 ) 
[23743] c:0 is:( loop 0 , 3 , move 2 , v0 ; move v0 * 4 , v0 - ua )  decode:( move 4 , ua / 4 ; move 8 , 4 ) 
[23744] c:0 is:loop 0 , 3 , ( move 3 + ul , v0 ; move v0 - 4 , v0 )  decode:loop 0 , 4 , move ua - 2 , ua * ua 
[23745] c:0 is:( move ul + ul , 4 + 3 ; move 3 , ua - 2 ; move ua , ul )  decode:( move 3 , 5 ; move ua + ul , ul ) 
[23746] c:0 is:( loop 0 , 5 , move ul , 4 + 2 ; move v0 + v0 , v0 )  decode:loop 0 , 4 , move 3 , 3 + 4 + v0 
[23747] c:0 is:( v0 = ua - 2 ; move v0 + v0 , 2 ; move v0 , 4 )  decode:( move 8 , 2 ; move 4 , 4 ) 
[23748] c:0 is:loop 0 , 0 , loop 1 , 3 , ( move ul / 2 , 2 ; move ua , 0 )  decode:loop 0 , 3 , move ua + ul , 2 
[23749] c:0 is:( move 2 - ua , 3 ; move ua , ul ; move 2 / 3 , ua - ul )  decode:( move 4 , 0 ; move ul - ua , ul ) 
[23750] c:0 is:( move ua , 0 - ul ; move ul - ua , 4 + 3 ; v0 = ul )  decode:( move ua , 2 - 3 ; move 5 , 4 ) 
[23751] c:0 is:( loop 0 , 4 , move v0 , 4 ; loop 1 , 2 , move v0 , ul )  decode:loop 0 , 4 , move 4 - ua , v0 - 9 
[23752] c:0 is:( move ua - ul , 4 ; move 4 , 2 ; move 3 + ul , ua + ul )  decode:( move ua , 4 ; move 5 , 2 ) 
[23753] c:0 is:( move 3 , ua - ul ; move ua , 3 * 2 ; move ua + ul , 4 )  decode:( move ua + 3 , ua ; move ua , 4 ) 
[23754] c:0 is:( move 2 , ul / 2 ; move ua , ul - 2 ; move ul , ua * 2 )  decode:( move 2 , 9 ; move ua + ul , ul ) 
[23755] c:0 is:( loop 0 , 2 , move 2 / v0 , v0 ; move v0 - 4 , ul )  decode:( move 4 , 0 ; move 3 , 4 ) 
[23756] c:0 is:( loop 0 , 5 , move v0 , 2 ; loop 1 , 2 , move ul , v1 )  decode:loop 0 , 3 , move ua - 2 , 0 - 4 
[23757] c:0 is:( loop 0 , 3 , move 4 / v0 , ua + 3 ; move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 - 4 
[23758] c:0 is:( move ua , ua + 3 ; move 4 , 4 + ul ; move ua + ul , 4 )  decode:loop 0 , 3 , move v0 - ua , ua * 4 
[23759] c:0 is:( loop 0 , 5 , move 2 , 4 * v0 ; move v0 , ua + v0 )  decode:loop 0 , 4 , move 3 - ua , 0 - v0 
[23760] c:0 is:( move 2 , ul ; move ul - ua , 4 ; move 2 - ul , ua + 4 )  decode:loop 0 , 3 , move ua - 4 , v0 + 9 
[23761] c:0 is:( loop 0 , 4 , move 4 , v0 ; loop 1 , 2 , move v0 , ul )  decode:loop 0 , 4 , move 5 , : 3 
[23762] c:0 is:( move 3 + ul , ul + ul ; loop 0 , 3 , move ua / 2 , ul )  decode:loop 0 , 4 , move 3 , 2 - 3 
[23763] c:0 is:( move ua , 3 + 2 ; move 2 / ua , ul - ua ; move 4 , ul )  decode:( move ua , 5 ; move 4 , 2 ) 
[23764] c:0 is:loop 0 , 3 , ( move v0 , ul - v0 ; move v0 * 2 , 4 )  decode:loop 0 , 3 , move 3 , 4 
[23765] c:0 is:loop 0 , 3 , ( move 3 , 2 ; move v0 , v0 ; v1 = ua )  decode:loop 0 , 4 , move 3 , 2 + v0 
[23766] c:0 is:( loop 0 , 5 , move v0 + 3 , v0 ; move 2 / v0 , ua )  decode:loop 0 , 4 , move ua , 0 - v0 + ul 
[23767] c:0 is:( move ua , 4 + 2 ; loop 0 , 5 , move v0 , v0 * v0 )  decode:( move 4 , 8 ; move ua + 2 , 4 ) 
[23768] c:0 is:( loop 0 , 4 , move v0 + 3 , v0 ; move v0 , 3 / ua )  decode:0 loop 0 , 3 , move 9 , 0 - 3 
[23769] c:0 is:( loop 0 , 5 , move v0 , 3 ; move v0 + ul , 4 + v0 )  decode:loop 0 , 3 , move 4 , v0 + 2 
[23770] c:0 is:loop 0 , ul , ( move v0 , 2 ; loop 1 , 5 , move 2 , v1 )  decode:loop 0 , 4 , move v0 - 4 , 3 / 2 
[23771] c:0 is:( loop 0 , 5 , move v0 , ul ; loop 2 , 2 , move v0 , 2 )  decode:loop 0 , 4 , move ua - 2 , v0 + 9 
[23772] c:0 is:( move 0 , 3 + ul ; move 3 , ul ; move ua - ul , ua / 4 )  decode:( move 3 , 4 ; move ua , 3 / 4 ) 
[23773] c:0 is:( move 2 , ua / 2 ; move 3 , ul ; move 4 + ul , ua + ul )  decode:loop 0 , 3 , move v0 - 4 , 2 / 3 
[23774] c:0 is:( loop 0 , 5 , move 2 , v0 + v0 ; move ul , 3 * v0 )  decode:loop 0 , 3 , move 3 - ua , v0 + 3 
[23775] c:0 is:( v0 = 4 + 3 ; move v0 , v0 - ua ; move 2 , v0 )  decode:( move ua , 4 + 3 ; move 2 , 7 ) 
[23776] c:0 is:( move 4 , 2 ; move 3 + ul , ua + ul ; move ul / 2 , ua )  decode:( move 4 , 2 ; move 4 , ul ) 
[23777] c:0 is:( move ua , ua * 4 ; move 4 + ul , ua + 3 ; move ua , 3 )  decode:loop 0 , 3 , move v0 - ua , 3 
[23778] c:0 is:( loop 0 , 3 , move 3 , ul ; loop 1 , 3 , move v1 , v0 )  decode:loop 0 , 3 , move 3 - ua , v0 + ul 
[23779] c:0 is:( loop 0 , 2 , move 3 , ul ; loop 1 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move ua - 4 , v0 + ul 
[23780] c:0 is:( move ua + 4 , ua - 4 ; move ul , ua + 2 ; v0 = ul )  decode:( move ul , ul ; move 4 + 3 , ul ) 
[23781] c:0 is:( loop 0 , 5 , move 2 , v0 - ul ; move v0 , 2 / v0 )  decode:loop 0 , 3 , move v0 - ua , 3 / 3 
[23782] c:0 is:( loop 0 , 4 , move 4 - ua , 3 ; move v0 , v0 * v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 9 
[23783] c:0 is:( move ul , ul - 2 ; move 3 , ul + ul ; move ua , 3 - 4 )  decode:( move ua + ul , 0 ; move 3 , 4 ) 
[23784] c:0 is:( ( move ul - ua , ul ; move 2 , 0 ) ; move ua , 4 - ua )  decode:( move 4 , ul ; move ua , ul / 4 ) 
[23785] c:0 is:loop 0 , 4 , ( v1 = v0 + v0 ; move ul + v1 , 2 )  decode:loop 0 , 3 , move ua - v0 , 4 * 0 3 
[23786] c:0 is:loop 0 , 2 , ( move v0 , v0 - 3 ; move 4 / v0 , ul )  decode:( move 5 , ul / ua ; move 3 , ul ) 
[23787] c:0 is:( ( move ua , ua ; move 4 , ua + 2 ) ; move ua + ul , 3 )  decode:loop 0 , 4 , move 4 , v0 + 8 
[23788] c:0 is:( loop 0 , 4 , move 2 , v0 / ua ; move v0 * 3 , v0 )  decode:( move 8 , ul ; move ua + 2 , 9 ) 
[23789] c:0 is:( move ul , 4 * 2 ; move 2 - ua , 4 + ul ; move ua , ul )  decode:( move 5 , 0 - 9 ; move ua , 4 ) 
[23790] c:0 is:( loop 0 , 5 , move 3 , v0 ; loop 1 , 2 , move ul , v1 )  decode:loop 0 , 4 , move 4 , 0 - v0 0 
[23791] c:0 is:( move 4 , ul ; loop 0 , 3 , move v0 * v0 , v0 - 3 )  decode:( move 4 , ul ; move 4 , 2 / 5 ) 
[23792] c:0 is:( ( move ul + ul , 4 ; move ua , 0 - ul ) ; move ua , 2 )  decode:( move ua + 2 , 3 ; move ua , 2 ) 
[23793] c:0 is:( move 4 , ua * 2 ; move ua , 4 ; move ua - 3 , ua - ul )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[23794] c:0 is:( move ul / 2 , 2 ; loop 0 , 4 , move v0 , v0 * v0 )  decode:loop 0 , 2 , move 3 - ua , 4 * 4 
[23795] c:0 is:( v0 = 4 + 4 ; move v0 , v0 + 2 ; move ul , v0 )  decode:( move ul , 9 ; move ua + ul , 4 ) 
[23796] c:0 is:( loop 0 , 4 , move v0 , 4 ; v1 = 0 ; move v0 , ul )  decode:( move 4 , 0 - 2 ; move 5 , 4 ) 
[23797] c:0 is:( ( move ua , 4 ; move ul + ul , ul ) ; move 2 - ua , 0 )  decode:( move ua , 4 ; move 4 , ua / 3 ) 
[23798] c:0 is:( loop 0 , 6 , move ul , v0 + 4 ; move v0 , 3 + v0 )  decode:loop 0 , 4 , move ua - 4 , 3 + v0 
[23799] c:0 is:( loop 1 , 4 , move v1 , 0 ; move 4 , ul ; move 3 , v1 )  decode:( move ua , 0 ; move 4 , ua / ua ) 
[23800] c:0 is:loop 0 , 2 , ( move 4 , v0 * v0 ; move ul - 4 , v0 )  decode:loop 0 , 3 , move 3 - ua , 4 * v0 
[23801] c:0 is:( loop 0 , 4 , move v0 , 2 / v0 ; move v0 , ua * 3 )  decode:( move 2 , 9 + 2 ; move ua , 5 ) 
[23802] c:0 is:loop 0 , 3 , ( move ul - v0 , v0 ; move 4 - v0 , 4 )  decode:loop 0 , 3 , move 3 - ua , v0 + 4 
[23803] c:0 is:( ( move 4 , 2 ; move ul - ua , 0 - ul ) ; move ua , ua )  decode:( move ua , ul ; move 4 , ua / 3 ) 
[23804] c:0 is:( move ul , ul ; move ua - ul , 4 ; move 4 * 2 , ua + 2 )  decode:( move ua , 5 ; move 2 + ua , 2 ) 
[23805] c:0 is:( move ua , ul ; ( move 3 , ua - ul ; move ua , 0 + 4 ) )  decode:loop 0 , 4 , move 4 , ul - v0 0 
[23806] c:0 is:( move 3 - ua , ul / ua ; loop 0 , ul , move 3 , ua - 4 )  decode:( move 3 , 9 * 3 ; move 3 , ul ) 
[23807] c:0 is:loop 0 , ul , loop 1 , 3 , ( move v1 , 3 ; move 4 , v1 )  decode:loop 0 , 4 , move 3 - ua , 4 * 3 
[23808] c:0 is:( move 4 , ul - ua ; move 3 , 4 - 3 ; move ua + ul , ul )  decode:( move ua , 6 ; move 4 + 3 , 2 ) 
[23809] c:0 is:( move 2 , ul ; move ua - ul , ua / 4 ; move ua / 2 , 2 )  decode:( move 5 , 9 + 2 ; move 5 , 2 ) 
[23810] c:0 is:( move ul - ua , ul / 3 ; move 3 , 2 - 3 ; move ua , ul )  decode:loop 0 , 4 , move 3 , 0 - 4 - v0 
[23811] c:0 is:( move 3 / ua , ul / 3 ; move ua , 0 - ul ; move 3 , ul )  decode:( move ua , 2 - 9 ; move 3 , ul ) 
[23812] c:0 is:( move 4 , ul / 2 ; move 4 - ua , ua ; move ua , 3 + ul )  decode:( move 3 , 0 - 9 ; move ua , 7 ) 
[23813] c:0 is:( move 4 , ua - 3 ; move ul - ua , 4 ; move 3 + ul , ul )  decode:( move 4 , 0 - 3 ; move ua , 5 ) 
[23814] c:0 is:( move ul , 4 * 2 ; loop 0 , 4 , move v0 , v0 * v0 )  decode:( move 3 , 0 ; move 4 , 4 ) 
[23815] c:0 is:( move 3 - ua , ua * ua ; move ua + 3 , ul ; v0 = 4 )  decode:( move 3 , 9 ; move ua + 3 , 2 ) 
[23816] c:0 is:( move ul - 2 , 3 ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move 4 , 9 ; move ua + 2 , 9 ) 
[23817] c:0 is:( move ul - 2 , 4 ; move ua + ul , ul ; move ua , 4 / 2 )  decode:( move ua + 2 , 5 ; move ua , 2 ) 
[23818] c:0 is:( move ua / 2 , ul ; move ua , ua - 3 ; move 2 , 4 / ua )  decode:( move ua , 0 - 2 ; move 3 , 9 ) 
[23819] c:0 is:( v0 = ua / 2 ; loop 1 , 2 , move v0 , v0 - v1 )  decode:( move 3 , 0 ; move 3 , 0 - 2 ) 
[23820] c:0 is:loop 0 , 0 , ( loop 1 , 5 , move 2 , 2 - ul ; move 3 , ua )  decode:loop 0 , 4 , move 3 , 2 / v0 
[23821] c:0 is:( loop 0 , 6 , move v0 + ul , v0 ; move 4 + v0 , 4 )  decode:loop 0 , 4 , move 4 + 2 , 0 - 0 4 
[23822] c:0 is:loop 0 , 3 , ( move v0 / 3 , v0 * 4 ; move ua , v0 )  decode:loop 0 , 3 , move 2 - ua , v0 - 4 
[23823] c:0 is:( loop 0 , 5 , move v0 - 3 , v0 * v0 ; move 4 , ua )  decode:( move 4 , ua / 4 ; move ua , 8 ) 
[23824] c:0 is:( move ua + ul , 3 - 4 ; move 3 , ul + ul ; move ul , 4 )  decode:( move 3 , ul ; move ua , 0 - 2 ) 
[23825] c:0 is:( loop 0 , 6 , move 2 - 4 , v0 ; move v0 , ua * v0 )  decode:loop 0 , 4 , move 4 , 4 * 0 - 4 
[23826] c:0 is:( move ul / 2 , ua - 3 ; move ua , ua * 4 ; move ua , 4 )  decode:( move ua , 0 - 3 ; move ua , 4 ) 
[23827] c:0 is:( loop 0 , 6 , move 4 / 2 , v0 ; move v0 - ua , v0 )  decode:loop 0 , 4 , move 3 , 3 * 5 
[23828] c:0 is:( move ua - 3 , 2 ; ( move 3 , ul ; move ul - ua , ua ) )  decode:( move 2 - ua , 3 ; move 4 , ul ) 
[23829] c:0 is:( v0 = ul ; loop 1 , 3 , move 2 , v1 ; move 4 , v0 )  decode:loop 0 , 3 , move 3 , 3 * 0 - v0 
[23830] c:0 is:( move ua - ul , 4 ; ( move 2 - ua , 2 ; move ua , ul ) )  decode:( move ua , 4 ; move ua , ua / 3 ) 
[23831] c:0 is:( move ul + ul , ul - 4 ; move 4 , 2 ; move ua / 2 , ul )  decode:loop 0 , 3 , move 0 - 3 , v0 * 3 
[23832] c:0 is:loop 0 , 4 , ( v1 = v0 * v0 ; move ua - v1 , 2 )  decode:loop 0 , 3 , move ua - 2 , 2 
[23833] c:0 is:( ( move 2 , ua * ua ; move ua + ul , 4 ) ; move 2 , ul )  decode:( move 3 , 9 ; move ua + 2 , 2 ) 
[23834] c:0 is:( move ua + ul , 4 ; move 3 , ul ; move ua + ul , 4 / 3 )  decode:loop 0 , 3 , move ua , v0 * 2 
[23835] c:0 is:( move ua - 4 , ua ; move ul - ua , 3 / 2 ; v0 = ua )  decode:( move 2 , 0 ; move ua - ul , 8 ) 
[23836] c:0 is:( ( move ua , ua ; move ul , 4 + 2 ) ; move ua , 4 + ul )  decode:loop 0 , 2 , move ua + v0 , ua / 4 
[23837] c:0 is:( move ul , 4 + ul ; move 3 , ul - 3 ; move ua / 2 , ul )  decode:( move 4 , 3 ; move 3 , ul ) 
[23838] c:0 is:loop 0 , 3 , ( move 3 , v0 ; v1 = ul ; move 3 , v1 )  decode:loop 0 , 4 , move ua - 2 , v0 * 2 
[23839] c:0 is:( ( move ul , 0 ; move ua , ul / 3 ) ; move 2 , ul - ua )  decode:( move ua , 2 / 6 ; move 2 , ul ) 
[23840] c:0 is:( ( move ua , ua * ua ; move 2 , ua ) ; move ua , 4 * 2 )  decode:( move 8 , ua * ua ; move ua , 8 ) 
[23841] c:0 is:loop 0 , 3 , ( v1 = v0 ; move v1 , ul ; move 2 , 4 )  decode:loop 0 , 4 , move 2 , v0 + 7 
[23842] c:0 is:( loop 0 , 2 , move 0 - 3 , ul ; move 4 , ul ; v1 = 0 )  decode:( move 3 , 3 ; move ua , 0 - 4 ) 
[23843] c:0 is:( move ul + ul , ua ; ( move 4 , 3 ; move ua + ul , 2 ) )  decode:( move 4 , 3 ; move ua + ul , 2 ) 
[23844] c:0 is:( move ul , 2 - ua ; loop 0 , 3 , move 3 , 4 ; move 4 , 0 )  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[23845] c:0 is:( v0 = ul ; loop 1 , 3 , move 4 , v0 ; move 3 , v0 )  decode:loop 0 , 4 , move 3 , ul 
[23846] c:0 is:( move ua , 2 ; ( move ul , ul ; move ua - 3 , ul - 3 ) )  decode:( move 3 , ul ; move 8 , ul ) 
[23847] c:0 is:( loop 0 , 6 , move ul , v0 ; v1 = 2 ; move 2 , v1 )  decode:loop 0 , 4 , move 2 , 0 - v0 / 2 
[23848] c:0 is:( ( move ua , ul - 3 ; move ul , 3 + ul ) ; move 2 , ul )  decode:( move 3 , 0 - 3 ; move 5 , 5 ) 
[23849] c:0 is:loop 0 , 3 , loop 1 , 0 , ( move ua , 2 ; move ul , 4 / 3 )  decode:loop 0 , 4 , move ua , 0 - v0 ) 
[23850] c:0 is:( loop 0 , 6 , move 3 / v0 , 3 ; move v0 - ul , v0 )  decode:( move ua - ul , ul ; move 4 , 4 ) 
[23851] c:0 is:( v0 = ul - 4 ; move v0 , 4 ; move v0 + v0 , 4 )  decode:( move 3 , 0 - 4 ; move ua , 4 ) 
[23852] c:0 is:( loop 0 , 6 , move 4 , v0 ; move 2 , v0 ; v1 = ua )  decode:loop 0 , 4 , move ua - ul , 0 - 8 
[23853] c:0 is:loop 0 , 6 , ( v1 = ul + v0 ; move 3 , v1 + v0 )  decode:loop 0 , 4 , move v0 + 2 , 0 - 9 
[23854] c:0 is:loop 0 , 6 , ( v1 = v0 + 3 ; move v0 , ua - v1 )  decode:loop 0 , 4 , move 3 - ua , v0 / 4 
[23855] c:0 is:( ( move ua - 4 , ua / 2 ; move ua , ul ) ; move 2 , ua )  decode:loop 0 , 3 , move ua - 4 , 2 / v0 
[23856] c:0 is:( loop 0 , 4 , move 4 / v0 , ul ; move v0 , 2 / v0 )  decode:loop 0 , 4 , move 3 , 2 / 4 
[23857] c:0 is:( move ul - ua , 2 ; ( move ul , ua ; move 4 , 2 - ul ) )  decode:( move 4 , 2 ; move 5 , ua / 3 ) 
[23858] c:0 is:( ( move ua , ul ; move ua + ul , 4 ) ; move ul - 3 , 2 )  decode:( move ua , ua + 5 ; move 9 , 4 ) 
[23859] c:0 is:( move ua + ul , ua ; ( move ul , 4 + 4 ; move ua , 3 ) )  decode:( move ua + ul , 0 ; move ua , 8 ) 
[23860] c:0 is:( loop 0 , 6 , move ul , 4 + 4 ; move v0 , v0 * v0 )  decode:( move ua , 3 / 4 ; move 2 , 2 ) 
[23861] c:0 is:( ( move ua / 2 , ul ; move 2 - ua , 2 ) ; move ul , ul )  decode:( move 3 , ul ; move 5 , 2 ) 
[23862] c:0 is:( move ul - 3 , 4 ; move 4 , ul + ul ; move 4 , ua * ua )  decode:( move ul - ua , 4 ; move 4 , 8 ) 
[23863] c:0 is:( move ua , ul ; ( move 4 + ul , ua - 3 ; move 2 , ul ) )  decode:( move ua , 4 * 4 ; move ua , 4 ) 
[23864] c:0 is:( move 3 , ul ; v0 = 4 ; move v0 + v0 , v0 * 4 )  decode:( move 3 , 2 ; move ua , 0 - 9 ) 
[23865] c:0 is:( move 4 , 3 ; ( move ul - 3 , ul ; move ua + ul , ua ) )  decode:( move 3 , 3 ; move ua - ul , ul ) 
[23866] c:0 is:( loop 0 , 6 , move v0 , ua / v0 ; move v0 , 4 / 2 )  decode:loop 0 , 4 , move 2 - ua , 8 
[23867] c:0 is:( loop 0 , 5 , move v0 , v0 / 4 ; move v0 , ul / 2 )  decode:loop 0 , 4 , move 3 , 3 + 4 / v0 
[23868] c:0 is:( move 0 - 3 , 4 - 2 ; loop 0 , 5 , move ul , ul - v0 )  decode:loop 0 , 3 , move ua - 4 , 2 / v0 
[23869] c:0 is:( ( move ul + ul , 0 ; move 4 , ul ) ; move ul - 4 , ul )  decode:( move ul - ua , ul ; move 3 , ul ) 
[23870] c:0 is:( loop 0 , 6 , move v0 / 3 , ua / v0 ; move 3 , v0 )  decode:( move 4 , 2 ; move 4 , 7 / 2 ) 
[23871] c:0 is:( move 3 , ua - ul ; move ua + ul , 4 / 3 ; v0 = ul )  decode:( move 3 , 4 * 4 ; move 3 , 5 ) 
[23872] c:0 is:( ( move ua , 4 ; move ul / 2 , ul - ua ) ; move ua , 2 )  decode:loop 0 , 3 , move ua / v0 , 4 * 4 
[23873] c:0 is:( move ua - ul , ul - 4 ; move 4 - ua , ul ; v0 = 3 )  decode:( move 2 , 4 ; move ua - ul , ul ) 
[23874] c:0 is:( move ua , 3 ; move ul , ua + 4 ; move ul - 4 , ul / 4 )  decode:( move ua , 3 ; move 3 , ul ) 
[23875] c:0 is:( move ua , ul ; ( move 4 , ul - 2 ; move ua + ul , 4 ) )  decode:loop 0 , 3 , move ua + ul , ua / v0 
[23876] c:0 is:loop 0 , 4 , ( v1 = v0 * v0 ; move 3 , v1 - ul )  decode:( move ua , 2 * 3 ; move ua , 9 ) 
[23877] c:0 is:( v0 = 2 - ua ; loop 1 , 7 , move v1 + v0 , v1 )  decode:loop 0 , 4 , move 3 - ua , v0 / 2 
[23878] c:0 is:( loop 0 , 5 , move 4 - ua , v0 * v0 ; v1 = v0 )  decode:loop 0 , 4 , move 0 - 3 , v0 * 4 
[23879] c:0 is:loop 0 , 5 , ( v1 = ul - v0 ; move v0 , v1 - 3 )  decode:( move ua + ul , 2 ; move 2 , 4 ) 
[23880] c:0 is:( move ua , ua / 3 ; move 4 , 4 ; move ua / 3 , ul - ua )  decode:( move ua , ua / 3 ; move ua , 4 ) 
[23881] c:0 is:( loop 0 , 6 , move v0 , v0 ; v1 = ua ; move 3 , 4 )  decode:loop 0 , 4 , move ua - 2 , v0 - 3 
[23882] c:0 is:( loop 0 , 5 , move ua , 3 ; v1 = v0 ; move v1 , 4 )  decode:loop 0 , 4 , move 0 - ua , 0 - v0 
[23883] c:0 is:loop 0 , 6 , ( v1 = v0 + v0 ; move 3 , v1 - ul )  decode:loop 0 , 4 , move 2 - ua , v0 - ul 
[23884] c:0 is:( v0 = ul ; move v0 - 4 , v0 ; move 4 , v0 / 3 )  decode:( move 3 , 0 - 2 ; move 4 , 3 ) 
[23885] c:0 is:( v0 = ul - 3 ; loop 1 , 6 , move v0 - v1 , v0 )  decode:loop 0 , 4 , move ua + ul , 0 - 9 
[23886] c:0 is:( v0 = ul / 2 ; loop 1 , 5 , move v1 , v1 + v0 )  decode:loop 0 , 4 , move 4 - ua , 3 / 4 
[23887] c:0 is:( move ul , ua / 4 ; ( move ua , ul ; move 4 , ua + 2 ) )  decode:( move ua , 2 / 5 ; move 5 , ul ) 
[23888] c:0 is:( loop 0 , 6 , move 4 / v0 , v0 ; move 4 , v0 * ua )  decode:loop 0 , 4 , move 4 , v0 * 4 
[23889] c:0 is:( v0 = ul ; loop 1 , 5 , move 4 , 3 ; move v1 , v0 )  decode:0 loop 0 , 4 , move 4 , 0 - 3 0 
[23890] c:0 is:( v0 = ua / 4 ; loop 1 , 4 , move v1 , v0 + v1 )  decode:( move 3 , 2 ; move 3 , 0 - 2 ) 
[23891] c:0 is:( v0 = 4 + 4 ; ( move ua , v0 ; move v0 , v0 ) )  decode:loop 0 , 3 , move 4 + v0 , 8 
[23892] c:0 is:( move ul + ul , ua / 4 ; ( move ua , ul ; move 3 , 2 ) )  decode:( move ua , ua / 2 ; move 5 , 2 ) 
[23893] c:0 is:( move 4 , ua - 3 ; ( move ua , 4 + ul ; move ul , ul ) )  decode:( move 4 , 0 - 3 ; move ua , 5 ) 
[23894] c:0 is:( v0 = ua / 2 ; loop 1 , 4 , move v0 , v1 / v0 )  decode:loop 0 , 4 , move 3 , v0 / 3 
[23895] c:0 is:( ( move 4 , ua ; move ul - ua , ul ) ; move 3 , ul - 3 )  decode:loop 0 , 4 , move 3 , 4 * ul - v0 
[23896] c:0 is:( move ul - ua , ua ; ( move 4 , 4 ; move 3 + ul , ul ) )  decode:loop 0 , 3 , move 0 - 4 , 0 - 9 
[23897] c:0 is:( move 3 + ul , ul ; ( move ua - 4 , ul ; move ua , 4 ) )  decode:( move 6 , 9 ; move ua , 0 - 5 ) 
[23898] c:0 is:( move ua / 3 , ua ; ( move 4 , 2 ; move ua - ul , ul ) )  decode:( move 4 , ul ; move ua , 2 / 3 ) 
[23899] c:0 is:loop 0 , 3 , ( v1 = ul / v0 ; move 4 , v1 - v0 )  decode:( move ua + ul , ul ; move 5 , 8 ) 
[23900] c:0 is:( loop 0 , 7 , move v0 / 2 , v0 * v0 ; v1 = ua )  decode:loop 0 , 3 , move 3 - ua , 3 / v0 
[23901] c:0 is:( move 4 + ul , ul / ua ; move ua , 3 / 4 ; v0 = ua )  decode:( move 5 , 4 ; move ua , 4 * 3 ) 
[23902] c:0 is:( ( move ua , 4 ; move 3 , ul ) ; move 3 - ua , ul / ua )  decode:( move ua + ul , 4 ; move 4 , ul ) 
[23903] c:0 is:( move ul , 4 ; ( move ul - ua , ul / 2 ; move ul , 2 ) )  decode:( move 2 , 0 - 4 ; move ua , 5 ) 
[23904] c:0 is:( move ua + 2 , 0 ; loop 0 , 6 , move 4 , 3 ; v1 = ul )  decode:loop 0 , 4 , move 4 , 3 + 3 - v0 
[23905] c:0 is:loop 0 , 3 , ( v1 = ul / v0 ; move 3 , v1 / v0 )  decode:( move 3 , ul ; move ua - ul , 4 ) 
[23906] c:0 is:( move 3 , ul ; ( move ul / 2 , ul ; move 3 + ul , ul ) )  decode:( move 3 , ul ; move 4 , 5 ) 
[23907] c:0 is:loop 0 , 5 , ( v1 = v0 - 3 ; move ua / v1 , v1 )  decode:loop 0 , 4 , move 4 , 3 + 8 
[23908] c:0 is:loop 0 , 5 , ( v1 = v0 ; move ua / v0 , v1 - 4 )  decode:loop 0 , 4 , move 4 , 0 - 4 0 - 4 
[23909] c:0 is:loop 0 , 4 , ( v1 = ua / v0 ; move 3 , v0 / v1 )  decode:loop 0 , 4 , move 3 , v0 / 4 
[23910] c:0 is:( v0 = 4 + ul ; loop 1 , 7 , move v1 - v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , 3 / 5 
[23911] c:0 is:( ( move 3 , ua ; move 4 - 3 , ul / ua ) ; move ua , ul )  decode:( move 4 , 0 ; move ua , 5 / 4 ) 
[23912] c:0 is:( v0 = 2 ; move 0 , ul / 3 ; loop 1 , 3 , move ua , 4 )  decode:loop 0 , 3 , move ua , 2 / v0 
[23913] c:0 is:loop 0 , 6 , ( v1 = ua - v0 ; move v0 , v1 * 4 )  decode:loop 0 , 4 , move 4 , 4 - v0 / 4 
[23914] c:0 is:loop 0 , 6 , ( v1 = v0 / ua ; move 3 - v1 , v0 )  decode:loop 0 , 4 , move 3 , 3 * 5 
[23915] c:0 is:loop 0 , 6 , ( v1 = v0 / 3 ; move v1 + ul , v1 )  decode:loop 0 , 4 , move 0 - 3 , v0 / 9 
[23916] c:0 is:( v0 = ua - 4 ; loop 1 , 7 , move v0 , v0 * v1 )  decode:loop 0 , 4 , move ua - 2 , v0 + 4 
[23917] c:0 is:( move ul / ua , ul ; ( move 2 , 4 * 3 ; move ua , ul ) )  decode:( move 2 , 2 / 4 ; move ua , ul ) 
[23918] c:0 is:( loop 0 , 6 , v1 = ul ; loop 2 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 5 , 5 
[23919] c:0 is:( v0 = ua / 4 ; loop 1 , 7 , move v0 , v0 + v1 )  decode:loop 0 , 4 , move ua - 4 , v0 / 4 
[23920] c:0 is:loop 0 , 6 , ( v1 = v0 ; move ul - 4 , v1 * v0 )  decode:loop 0 , 4 , move 2 - ua , 4 * 4 
[23921] c:0 is:( v0 = 3 / ua ; loop 1 , 6 , move v1 , v0 - v1 )  decode:loop 0 , 3 , move 2 - ua , ua * ua 
[23922] c:0 is:( v0 = 4 ; loop 1 , 6 , move v0 - ua , v1 / v0 )  decode:loop 0 , 4 , move 0 - 3 , v0 - 6 
[23923] c:0 is:( move ul , 3 ; ( move 3 , ua / 4 ; move ul , ul - ua ) )  decode:( move ul , 9 ; move 4 , 4 ) 
[23924] c:0 is:( ( move ul - 4 , ul / 3 ; move ul , ul ) ; move ua , 2 )  decode:( move 3 , 0 - 4 ; move ua , 3 ) 
[23925] c:0 is:( move ua , ua ; ( move 4 - ul , 4 ; move 3 , ul / ua ) )  decode:( move ua , ul ; move ua , 0 - 4 ) 
[23926] c:0 is:( ( move ua , ul / 3 ; move ul , 2 ) ; move ua , ul / 3 )  decode:( move ua + ul , 9 ; move ua , 4 ) 
[23927] c:0 is:( ( move 4 , 3 ; loop 0 , 3 , move 3 , ul ) ; move ul , 0 )  decode:loop 0 , 4 , move 4 / v0 , 3 / 3 
[23928] c:0 is:loop 0 , 5 , ( v1 = 2 / v0 ; move v1 , ul / v1 )  decode:( move 4 , 4 ; move 2 , 4 / 3 ) 
[23929] c:0 is:loop 0 , 7 , ( v1 = v0 * 4 ; move ul , v1 + v1 )  decode:loop 0 , 3 , move ua - 4 , 9 
[23930] c:0 is:( v0 = ul - 4 ; loop 1 , 5 , move v1 , v1 / v0 )  decode:loop 0 , 3 , move 3 , v0 - 3 
[23931] c:0 is:loop 0 , 6 , ( v1 = 4 ; move v0 - v1 , v1 / ua )  decode:loop 0 , 4 , move v0 - 4 , 2 / 5 
[23932] c:0 is:loop 0 , 6 , ( v1 = v0 / ua ; move v1 * 4 , v1 )  decode:loop 0 , 3 , move 3 , 4 / 9 
[23933] c:0 is:( move 4 , ul ; loop 0 , 9 , v1 = v0 ; move v1 , 4 )  decode:( move 4 , ul ; move 8 , 4 ) 
[23934] c:0 is:( loop 0 , 6 , move 3 / v0 , ul / v0 ; v2 = v1 )  decode:loop 0 , 3 , move 3 , ul / 3 
[23935] c:0 is:( loop 0 , 7 , move 4 / v0 , ul / v0 ; v1 = v0 )  decode:loop 0 , 3 , move ua - 2 , 3 / ua 
[23936] c:0 is:( loop 0 , 9 , v1 = v0 ; loop 2 , 6 , move ua , v0 )  decode:loop 0 , 4 , move 4 + 2 , ua / 5 
[23937] c:0 is:( ( move ul , ul / ua ; move ua , 4 / ua ) ; move 4 , 4 )  decode:( move ua , 4 / 3 ; move 5 , 4 ) 
[23938] c:0 is:( loop 0 , 9 , v1 = ua ; loop 2 , 5 , move v2 , v0 )  decode:loop 0 , 3 , move 3 - ua , 0 - 4 
[23939] c:0 is:( loop 0 , 9 , v1 = ul ; loop 2 , 6 , move v0 , v0 )  decode:loop 0 , 4 , move 4 + 3 , 8 
[23940] c:0 is:( move ua , ua ; loop 0 , 4 , move ul , ul ; move v0 , ua )  decode:loop 0 , 4 , move 3 - ua , v0 0 
[23941] c:0 is:loop 0 , 7 , ( loop 1 , 9 , v2 = v1 ; move ua , v1 )  decode:loop 0 , 4 , move 4 + 4 , ua / 5 
[23942] c:0 is:( move ua - ul , 0 ; move ua , ul ; move ua + 3 , 2 + ul )  decode:( move 9 , ul ; move ua + ul , 4 ) 
[23943] c:0 is:( move ua , 0 ; loop 0 , 4 , move ul - v0 , v0 + v0 )  decode:( move ua + ul , 0 ; move 2 , 9 ) 
[23944] c:0 is:( move ua , 0 ; move 4 + ul , ua + ul ; move ua + ul , 3 )  decode:( move 9 , 0 ; move ua , 4 ) 
[23945] c:0 is:( move ul , ul ; loop 0 , 4 , move v0 , ul ; move ua , ul )  decode:( move 4 , 9 ; move ua , 0 - 2 ) 
[23946] c:0 is:( v0 = ua / 4 ; loop 1 , 6 , move ul - 3 , 4 + v1 )  decode:loop 0 , 4 , move 3 , 4 + v0 
[23947] c:0 is:( move ul , 0 ; move ua + ul , ua + ul ; move 4 , ua - 2 )  decode:( move 3 , 9 / ua ; move 9 , 2 ) 
[23948] c:0 is:( move 0 , ua - ul ; loop 0 , 4 , move v0 + v0 , v0 )  decode:( move ul - ua , 2 ; move ua , 3 ) 
[23949] c:0 is:( move ua , ua ; v0 = ul - ua ; move ua , v0 * v0 )  decode:( move ua , 0 ; move 5 , 4 * 5 ) 
[23950] c:0 is:( move ua , 0 ; move ul , 2 ; loop 0 , 4 , move v0 , v0 )  decode:( move ua , 0 ; move 3 , 5 * 2 ) 
[23951] c:0 is:( move ua , ul - 2 ; move ua , 2 - ua ; move ua , ua + 3 )  decode:loop 0 , 3 , move ua , ua / 3 0 - 2 
[23952] c:0 is:( move ua , ul ; v0 = ua + ul ; move ua , v0 * v0 )  decode:( move ua , ul ; move ua , 9 ) 
[23953] c:0 is:( move ua , ua ; move 0 , 4 ; loop 0 , 3 , move v0 , v0 )  decode:( move ua , 9 / ua ; move 4 , 4 ) 
[23954] c:0 is:( move ul , ua ; move ua , ul ; loop 0 , 5 , move v0 , ul )  decode:loop 0 , 3 , move v0 - ua , 4 / 3 
[23955] c:0 is:( move ua , 3 ; loop 0 , 3 , move ul , v0 ; move v0 , 0 )  decode:( move ua + ul , 3 ; move 2 , 4 ) 
[23956] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , ul ; move ul , ul )  decode:loop 0 , 4 , move 4 , 0 - v0 * 9 
[23957] c:0 is:( loop 0 , 4 , move 2 + v0 , v0 ; move ua , v0 - ua )  decode:loop 0 , 4 , move 5 , v0 
[23958] c:0 is:loop 0 , 3 , ( move v0 , ua - ul ; move v0 + 2 , v0 )  decode:( move 4 , 0 - 3 ; move 4 , ul ) 
[23959] c:0 is:( move ua + ul , ua - 2 ; move 0 - ua , ul ; v0 = ua )  decode:loop 0 , 2 , move v0 - ua , 0 - 2 
[23960] c:0 is:( move ua + ul , ua - ul ; move 2 , ua ; move ua - 3 , 2 )  decode:( move 3 , ul ; move 3 + ua , 2 ) 
[23961] c:0 is:( move 3 , 3 ; move 0 - ul , ua + ul ; move ua , ul + ul )  decode:( move 3 , 3 ; move ; move ua , 2 ) 
[23962] c:0 is:( move 0 , 3 ; loop 0 , 4 , move v0 , ul ; move ua , v0 )  decode:( move ua , 6 ; move 5 , 3 ) 
[23963] c:0 is:( loop 0 , 2 , loop 1 , 2 , move ul , v0 ; move ua , v0 )  decode:( move ua + ul , 3 ; move 3 , 4 ) 
[23964] c:0 is:( move ua , 3 + 2 ; move ua + ul , 2 ; move ul , ul - ua )  decode:( move ua + ul , 5 ; move 8 , 2 ) 
[23965] c:0 is:( loop 0 , 4 , move v0 + v0 , ul + v0 ; move ua , 2 )  decode:( move 3 + ua , 9 ; move ua , 2 ) 
[23966] c:0 is:( move ua , ua - 2 ; loop 0 , 4 , move v0 + v0 , v0 )  decode:loop 0 , 4 , move 4 , 0 - 4 * 4 
[23967] c:0 is:( move 0 - ul , ul ; loop 0 , 4 , move v0 , v0 + v0 )  decode:( move 2 , 9 ; move 5 , 4 ) 
[23968] c:0 is:( move ua , 2 + ul ; move 0 - 4 , ul - ua ; move ua , ul )  decode:( move ua , 3 ; move ua , 2 ) 
[23969] c:0 is:( loop 0 , 3 , move v0 + 2 , v0 / ua ; move ua , v0 )  decode:loop 0 , 4 , move 3 + v0 , 9 * 3 
[23970] c:0 is:( move ul , 0 ; loop 0 , 4 , move 3 , v0 ; move v0 , ul )  decode:loop 0 , 4 , move 4 , v0 * v0 
[23971] c:0 is:( move ua - ul , 0 ; move ul , ul - ua ; move 2 + ul , 4 )  decode:( move ua , 0 ; move 3 , 4 ) 
[23972] c:0 is:( loop 0 , 4 , move v0 - ul , 0 - ul ; move v0 , v0 )  decode:( move 3 , 0 - 4 ; move 3 , 3 ) 
[23973] c:0 is:( loop 0 , 5 , move v0 , ul ; move v0 + v0 , ua + 2 )  decode:loop 0 , 3 , move ul - ua , 4 / v0 
[23974] c:0 is:( move 3 + 3 , ua ; move ua , ua * ua ; move ua - ul , 2 )  decode:loop 0 , 3 , move ua - v0 , ua / ua 
[23975] c:0 is:loop 0 , 3 , ( move v0 , 0 ; move v0 + ul , ul / v0 )  decode:loop 0 , 3 , move 4 - ua , 4 / 6 
[23976] c:0 is:( move ua - ul , ul ; move ul , 3 + 2 ; move ua , 2 + ul )  decode:( move ua , ul ; move ua , ua * ua ) 
[23977] c:0 is:loop 0 , 3 , ( move ul , ul ; move v0 + v0 , v0 - 2 )  decode:( move 0 - ua , 0 ; move 2 , ul ) 
[23978] c:0 is:( move ul - 3 , 0 - ua ; move ua , ul + ul ; move 3 , ul )  decode:( move 0 - 9 , 2 ; move 3 , ul ) 
[23979] c:0 is:loop 0 , 3 , ( move v0 + v0 , v0 ; move ul , ul - 2 )  decode:( move ul - ua , ul ; move 4 , 7 ) 
[23980] c:0 is:( loop 0 , 3 , move 2 , v0 - ua ; move v0 , ul - v0 )  decode:loop 0 , 4 , move 2 , v0 * v0 
[23981] c:0 is:( move 4 - ul , 0 ; move ua + ul , ul ; move ua , ua + 4 )  decode:( move 9 , ul ; move ua + ul , 4 ) 
[23982] c:0 is:loop 0 , 2 , ( move v0 , v0 - ua ; move 4 , ua - v0 )  decode:move 0 , , 0 ; move 5 , 6 - 3 ) 
[23983] c:0 is:( move 3 , ua * ua ; move 3 , ua ; move ul - ua , 0 - ul )  decode:( move 5 , 4 / 3 ; move ua , ul ) 
[23984] c:0 is:( move ua , ua ; move 2 , ua + ul ; move 4 + ul , 3 + ul )  decode:( move ua + 2 , 0 ; move 4 , 5 ) 
[23985] c:0 is:( loop 0 , 2 , move 4 + v0 , ua - ul ; move v0 , v0 )  decode:( move 3 , 5 ; move ua , 2 / 5 ) 
[23986] c:0 is:( move ua , ua ; move 2 , ul / 2 ; move 2 + ul , ua + ul )  decode:( move ua + ul , 0 ; move 4 , 7 ) 
[23987] c:0 is:( move 3 , ul ; move 0 , ul ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 4 , move 2 , v0 * 4 
[23988] c:0 is:( loop 0 , 4 , move 2 , 3 ; move ua , ua ; move v0 , v0 )  decode:loop 0 , 4 , move 3 ,  7 , 3 
[23989] c:0 is:( move ul , ua + 3 ; move 3 + 2 , ul ; move ua , ua * ua )  decode:loop 0 , 3 , move 0 - 4 , v0 + 2 
[23990] c:0 is:( move ul , 4 ; move ua + 2 , ua + 3 ; move ul - ua , ul )  decode:( move ua + 2 , 8 ; move 5 , ul ) 
[23991] c:0 is:( loop 0 , 4 , move v0 , ul - v0 ; move ua + v0 , 3 )  decode:( move 9 , 4 ; move 9 , = 4 ul ) 
[23992] c:0 is:( loop 0 , 6 , move v0 , v0 + v0 ; move 2 + ul , ua )  decode:( move ua , 8 ; move 9 , 4 ) 
[23993] c:0 is:( move ua + ul , 2 ; move ul , 3 ; move ua - 3 , ul - ua )  decode:( move 4 + 3 , 2 ; move 4 , 9 ) 
[23994] c:0 is:loop 0 , 3 , ( move v0 + v0 , ul ; move ua - 4 , v0 )  decode:loop 0 , 4 , move 3 - ua , ul / v0 
[23995] c:0 is:( move 4 , ua * ua ; loop 0 , 3 , move v0 , v0 + v0 )  decode:( move 4 , 9 ; move 3 , 0 - 4 ) 
[23996] c:0 is:loop 0 , 3 , ( move v0 , 3 - ul ; move ua - v0 , v0 )  decode:loop 0 , 4 , move v0 - ua , 2 
[23997] c:0 is:( move 2 - ua , ul ; move 0 , ul / ua ; move ua + 4 , ul )  decode:( move 4 , 4 ; move 4 , 0 - 2 ) 
[23998] c:0 is:( loop 0 , 5 , move ul , 3 + v0 ; move ua , v0 + v0 )  decode:( move 4 , 9 ; move ua , ua * ua ) 
[23999] c:0 is:( loop 0 , 4 , move 2 , v0 * v0 ; move v0 + ua , ul )  decode:( move ua , ul ; move ua + 2 , 4 ) 
[24000] c:0 is:( move 2 , ua * ua ; move ua / 2 , 2 ; move ua , ul + ul )  decode:( move 5 , 9 ; move ua , 0 - 4 ) 
[24001] c:0 is:loop 0 , 3 , ( move ul , 4 + v0 ; move ul , v0 + v0 )  decode:( move 2 , 4 ; move 3 , 0 - 4 ) 
[24002] c:0 is:( move ua + 2 , ua * ua ; move ul , ul ; move ua - 3 , 3 )  decode:( move 9 , ua * ua ; move 3 , 4 ) 
[24003] c:0 is:( move ua , ul + ul ; move 2 , 3 + ul ; move 3 , ua - ul )  decode:( move ua , ua ; move 4 , 0 - 4 ) 
[24004] c:0 is:loop 0 , 3 , ( move v0 * v0 , v0 ; move ul , 2 + ul )  decode:( move 2 , 5 ; move 4 , 0 - 2 ) 
[24005] c:0 is:( loop 0 , 4 , move ua / v0 , v0 + 2 ; move v0 , ua )  decode:loop 0 , 4 , move ua - 2 , 2 * v0 
[24006] c:0 is:( loop 0 , 3 , move ul + ul , 4 + v0 ; move v0 , v0 )  decode:( move 3 , 4 ; move 5 , ua * ua ) 
[24007] c:0 is:( move 3 + ul , ua ; loop 0 , 5 , move v0 + v0 , v0 )  decode:loop 0 , 4 , move ua , 0 - v0 / 2 
[24008] c:0 is:loop 0 , 2 , ( move v0 , v0 ; move ul - 4 , v0 - ua )  decode:( move 0 - 4 , 0 ; move 3 , ul ) 
[24009] c:0 is:( loop 0 , 5 , move 2 , v0 + v0 ; move ua , v0 - ul )  decode:loop 0 , 4 , move ua - 2 , v0 + 2 
[24010] c:0 is:( loop 0 , 3 , move v0 , ul - 3 ; move v0 + ul , v0 )  decode:( move 3 , 4 + 9 ; move 3 , 2 ) 
[24011] c:0 is:( loop 0 , 5 , move v0 - ua , 3 ; move ua , v0 + v0 )  decode:loop 0 , 4 , move 2 - ua , v0 - 4 
[24012] c:0 is:( move ua , ua ; move ua , ul - 4 ; move ul - 3 , ua + 2 )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[24013] c:0 is:( loop 0 , 4 , move ul + v0 , ul ; move v0 , 3 + v0 )  decode:( move 3 , 2 ; move  4 , 4 - v) 0 
[24014] c:0 is:loop 0 , 2 , ( loop 1 , 2 , move ul , v1 ; move ua , v1 )  decode:( move ua + 3 , 2 ; move 7 , 2 ) 
[24015] c:0 is:( move 0 , 4 ; move ua + ul , ua + ul ; move ul - 4 , ul )  decode:( move ua + ul , 5 ; move 3 , ul ) 
[24016] c:0 is:( move ul , 3 + ul ; move ua + ul , 2 ; move 3 , ua * ua )  decode:( move 8 , 6 ; move 4 , ua * ua ) 
[24017] c:0 is:( loop 0 , 4 , move v0 - 3 , v0 + ul ; move v0 , ua )  decode:loop 0 , 4 , move 2 , 4 * v0 
[24018] c:0 is:( move ul , 2 ; loop 0 , 5 , move v0 + v0 , v0 - ua )  decode:loop 0 , 4 , move v0 - ua , 4 
[24019] c:0 is:( move ul , 2 + ul ; loop 0 , 5 , move v0 , v0 + v0 )  decode:( move 4 , ul ; move ua , 7 + 4 ) 
[24020] c:0 is:( move 2 , ul ; move ua , 4 + ul ; move ua + ul , 3 + ul )  decode:loop 0 , 4 , move 4 , 4 + 3 / v0 
[24021] c:0 is:( move ul + ul , ua ; move 3 , ul + ul ; move 4 + ul , 2 )  decode:loop 0 , 3 , move 3 - ua , 4 / v0 
[24022] c:0 is:( loop 0 , 5 , move 2 , ul + v0 ; move v0 , v0 - ul )  decode:loop 0 , 3 , move 0 - 4 , 3 / 0 4 
[24023] c:0 is:loop 0 , 3 , ( move ua - ul , v0 ; move v0 , v0 - 4 )  decode:loop 0 , 4 , move 4 , 0 - v0 0 
[24024] c:0 is:( move ua , ul / 4 ; move 0 - ul , 2 + ul ; move ua , ul )  decode:loop 0 , 4 , move v0 - 4 , 3 / 3 
[24025] c:0 is:( loop 0 , 4 , move 2 , ua + v0 ; move v0 , ul / v0 )  decode:loop 0 , 4 , move ul - ua , v0 * 3 
[24026] c:0 is:( loop 0 , 5 , move v0 , ul - v0 ; move v0 - ua , 2 )  decode:loop 0 , 4 , move 0 - 3 , v0 - 4 
[24027] c:0 is:( move 4 , ua - 2 ; move ul , ua - ul ; move ul - ua , 2 )  decode:loop 0 , 2 , move 4 + v0 , 2 - 3 
[24028] c:0 is:( move ul - 2 , 4 ; move ua + ul , ua * ua ; move ul , 2 )  decode:( move ua + 2 , 4 ; move 2 , 2 ) 
[24029] c:0 is:( move ua - 4 , 2 ; move ul , ul + ul ; move 2 - ua , ul )  decode:( move 3 , 2 ; move 4 , ul ) 
[24030] c:0 is:( move ua , 4 + 3 ; move ul - ua , ua * ua ; move 3 , ua )  decode:( move ua , 4 / 5 ; move 5 , 5 ) 
[24031] c:0 is:loop 0 , 3 , ( move 2 , v0 ; move v0 - ua , ul / v0 )  decode:loop 0 , 4 , move v0 - ua , 4 * 4 
[24032] c:0 is:( move ua , 3 ; move ua - 4 , 3 - ua ; move ua , ul - ua )  decode:( move ua + ul , 3 ; move ua , 4 ) 
[24033] c:0 is:( move ua , 0 - ua ; move ul , ul + ul ; move 4 , ul / 2 )  decode:( move ua , 0 ; move 4 , 0 - 4 ) 
[24034] c:0 is:( move 2 , ul / ua ; loop 0 , 4 , move v0 , v0 + v0 )  decode:( move 4 , 9 ; move 4 , 4 + 4 ) 
[24035] c:0 is:( loop 0 , 3 , move ul , 4 - v0 ; move v0 + ul , v0 )  decode:loop 0 , 4 , move v0 , v0 + 2 
[24036] c:0 is:( move ua , ul - ua ; move ul , 3 + 3 ; move ua , ul - 3 )  decode:( move ua + ul , ul ; move ua , 4 ) 
[24037] c:0 is:( loop 0 , 3 , move v0 , v0 / 4 ; move ua , ua + v0 )  decode:( move ua , 6 ; move 3 , 0 - 4 ) 
[24038] c:0 is:( move ul + ul , 4 ; loop 0 , 4 , move v0 , v0 + v0 )  decode:( move 3 , 4 ; move 4 , 4 / ua ) 
[24039] c:0 is:( move ua - 3 , ua ; loop 0 , 4 , move v0 , v0 * v0 )  decode:loop 0 , 3 , move 3 , v0 + 3 
[24040] c:0 is:( loop 0 , 4 , move v0 , ul - v0 ; move ua , v0 * 2 )  decode:( move 9 , ul ; move 3 , 0 - 2 ) 
[24041] c:0 is:( move ua - 3 , ul / ua ; move ua , 2 ; move ua - ul , 2 )  decode:loop 0 , 3 , move ua - ul , 0 - 0 4 0 3 / 
[24042] c:0 is:( move 4 - ua , 2 ; move ul , ua - ul ; move ua , ul - 2 )  decode:( move ua , 0 ; move ; move 2 , ul ) 
[24043] c:0 is:( loop 0 , 5 , move ul + v0 , 3 ; move v0 , ua - v0 )  decode:loop 0 , 3 , move v0 - ua , 0 - 4 
[24044] c:0 is:( move ua - 4 , ul ; loop 0 , 4 , move v0 , v0 + v0 )  decode:loop 0 , 3 , move v0 - 4 , 4 / ua 
[24045] c:0 is:( move ua , ua ; loop 0 , 0 , loop 1 , 3 , move 2 , ul - 2 )  decode:loop 0 , 4 , move 3 , 0 - v0 
[24046] c:0 is:( move 4 + 2 , ul ; move ua , ul + ul ; move 3 - ua , ul )  decode:( move 5 , ul ; move 3 + 3 , ul ) 
[24047] c:0 is:( loop 0 , 3 , move ul + v0 , ul ; move v0 , 3 * v0 )  decode:( move 2 , 2 ; move ua - ul , ul ) 
[24048] c:0 is:( move 0 - 4 , 3 / ua ; move ul , ua ; move ua , ua * ua )  decode:( move 4 , 0 - 3 ; move ua , 8 ) 
[24049] c:0 is:( move ua , ua + 3 ; move 4 - ul , 3 ; move ua , ua * ua )  decode:( move 5 , 9 ; move ua , ua / 4 ) 
[24050] c:0 is:( move ua , 4 ; move ua - ul , ua ; move 3 - ua , 2 - ul )  decode:( move ua + 4 , 5 ; move v0 , 4 ) 
[24051] c:0 is:( move ua , ua ; move 4 / ua , 4 - ua ; move 0 - ua , ul )  decode:( move ua , 0 ; move ua , 5 / 2 ) 
[24052] c:0 is:( move 3 , ua - ul ; loop 0 , 5 , move v0 , v0 + v0 )  decode:loop 0 , 3 , move 4 , v0 * 9 
[24053] c:0 is:( move ul , 4 ; loop 0 , 3 , move v0 , v0 ; move ua , 3 )  decode:( move 3 , ua / 4 ; move ua , 3 ) 
[24054] c:0 is:( loop 0 , 4 , move v0 , ul ; move v0 + ul , v0 + 4 )  decode:loop 0 , 3 , move 0 - 3 , 3 / 5 
[24055] c:0 is:( loop 0 , 4 , move ul , ua ; loop 1 , 3 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 * v0 
[24056] c:0 is:( move ul , 0 - ul ; loop 0 , 5 , move v0 , v0 * v0 )  decode:( move 5 , 0 - 5 ; move 5 , 3 ) 
[24057] c:0 is:( move ul + ul , 0 - ul ; move 4 , 2 / ua ; move ul , ul )  decode:( move ul , 9 + 2 ; move ua , ul ) 
[24058] c:0 is:( loop 0 , 5 , move ul - v0 , v0 ; move ul , v0 - 2 )  decode:loop 0 , 3 , move 0 - 3 , v0 + 4 
[24059] c:0 is:( loop 0 , 5 , move ul , v0 ; loop 1 , 2 , move v0 , ul )  decode:( move ua + ul , 9 ; move 4 , 4 ) 
[24060] c:0 is:( move ua , ua - ul ; move ul - ua , ul / 2 ; v0 = 0 )  decode:loop 0 , 3 , move 3 - ua , 9 + v0 
[24061] c:0 is:( move ul , ul - 3 ; loop 0 , 5 , move v0 + v0 , v0 )  decode:loop 0 , 4 , move ua - v0 , 0 - 8 
[24062] c:0 is:( loop 0 , 6 , move 3 , ua + v0 ; move v0 , ul - v0 )  decode:loop 0 , 4 , move 2 - ua , 0 - 0 4 0 0 2 / 
[24063] c:0 is:( move ua , ul ; move ul - 2 , ua ; move 4 + ul , 4 + ul )  decode:( move 5 , ul ; move 5 , 5 ) 
[24064] c:0 is:( move ul , ua ; move ua - ul , ua - 2 ; move 4 , 2 / ua )  decode:( move 3 , 4 / 3 ; move ua , 7 ) 
[24065] c:0 is:( loop 0 , 4 , move v0 , v0 ; loop 1 , 3 , move ul , ul )  decode:loop 0 , 4 , move 2 - 4 , 2 - v0 
[24066] c:0 is:( loop 0 , 5 , move ul - v0 , 0 ; move v0 , ul / v0 )  decode:( move ua , 0 ; move 4 , 4 * 4 ) 
[24067] c:0 is:( loop 0 , 4 , move v0 * v0 , v0 ; move 3 , ul + ul )  decode:loop 0 , 4 , move 3 - ua , 3 * v0 
[24068] c:0 is:( move ul - 4 , ul ; move 0 - ua , 2 / ua ; move ul , ul )  decode:( move 2 , 4 ; move 9 , ul ) 
[24069] c:0 is:loop 0 , 3 , ( move ul - 4 , v0 - ul ; move v0 , v0 )  decode:( move ul - ua , ul ; move ua , ul ) 
[24070] c:0 is:loop 0 , 3 , ( move v0 - ul , ul ; move v0 * 3 , v0 )  decode:( move ua , 9 ; move 5 , 9 ) 
[24071] c:0 is:( move ul , 2 / ua ; move ua , ua + ul ; move 4 , 3 + ul )  decode:( move ua , 4 / 5 ; move 4 , 4 ) 
[24072] c:0 is:( v0 = 3 + 3 ; move v0 , v0 ; move ul - ua , v0 )  decode:( move ua , 6 ; move 5 , 9 ) 
[24073] c:0 is:( loop 0 , 3 , move 3 , 4 ; move v0 , v0 ; move ul , ul )  decode:loop 0 , 4 , move 3 - ua , 3 / v0 
[24074] c:0 is:( move 3 , ul ; loop 0 , 3 , move v0 + v0 , ul / v0 )  decode:loop 0 , 4 , move 2 , v0 / 3 
[24075] c:0 is:( move 4 + 3 , ua ; move ul , ul - ua ; move 3 - ua , ul )  decode:( move 3 , 2 ; move ua , 5 / 4 ) 
[24076] c:0 is:( loop 0 , 4 , move ul , v0 * 4 ; move v0 + ua , v0 )  decode:( move 3 , 5 ; move ua + 3 , 4 ) 
[24077] c:0 is:( loop 0 , 4 , move ul + ul , v0 ; move v0 , v0 / 2 )  decode:loop 0 , 3 , move 3 - ua , v0 * 4 
[24078] c:0 is:( move 4 , ul + ul ; move ua , ua - ul ; move 2 , 4 + ul )  decode:( move ua , ul ; move 5 , 2 - 3 ) 
[24079] c:0 is:( move ul , 3 / ua ; loop 0 , 4 , move v0 , v0 + v0 )  decode:( move 5 , 3 ; move 2 , 3 / 4 ) 
[24080] c:0 is:( move ul , 3 + ul ; loop 0 , 6 , move v0 , v0 + v0 )  decode:loop 0 , 4 , move 3 + v0 , 9 * 3 
[24081] c:0 is:loop 0 , 3 , ( move ul , v0 * v0 ; move ua , 3 * v0 )  decode:loop 0 , 4 , move ua - v0 , 0 - 0 7 
[24082] c:0 is:( loop 0 , 2 , move 4 , v0 ; move v0 , ul ; move 4 , ul )  decode:loop 0 , 4 , move 3 , v0 * v0 
[24083] c:0 is:( move ul - ua , 2 ; move ua + ul , ul - 2 ; v0 = ul )  decode:( move 0 - ua , ul ; move 5 , ul ) 
[24084] c:0 is:( loop 0 , 4 , move 4 , v0 ; move v0 - ua , v0 - ul )  decode:loop 0 , 4 , move ua - 2 , v0 0 
[24085] c:0 is:( loop 0 , 5 , move ul , v0 * v0 ; move ul + v0 , 2 )  decode:( move 4 , 4 / 5 ; move 4 , 7 ) 
[24086] c:0 is:( move 3 , ua * ua ; move ul + ul , 4 ; move ua , ua + 4 )  decode:( move 4 , 8 ; move ua , 8 + 3 ) 
[24087] c:0 is:( move ul , 3 * 3 ; move 2 , ul - ua ; move ua + ul , ul )  decode:( move 2 , 9 ; move ua + 2 , 5 ) 
[24088] c:0 is:( move ul , 4 ; move ua , 2 ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 2 - ua , 6 + v0 
[24089] c:0 is:( loop 0 , 4 , move 4 , v0 ; move ua - v0 , v0 - ul )  decode:loop 0 , 4 , move v0 + 2 , ul * 4 
[24090] c:0 is:( loop 0 , 3 , move v0 , v0 ; move v0 * 4 , ua * ua )  decode:( move 2 , 9 ; move 8 , ua * ua ) 
[24091] c:0 is:loop 0 , 3 , ( move ul + ul , v0 ; move v0 * 4 , v0 )  decode:loop 0 , 4 , move 2 - ua , 3 + v0 
[24092] c:0 is:( loop 0 , 3 , move v0 , ul / v0 ; move ua + v0 , 4 )  decode:( move 3 , 0 - 4 ; move 8 , 2 ) 
[24093] c:0 is:( v0 = ua + ul ; move 2 , v0 / 2 ; move v0 , v0 )  decode:( move 2 , 9 + 2 ; move 7 , ul ) 
[24094] c:0 is:( move ua + 2 , ua + ua ; move ul , ul ; move 3 / 4 , ul )  decode:( move ua + 2 , 0 ; move ul , 2 ) 
[24095] c:0 is:( loop 0 , 4 , move ul - 3 , v0 ; move v0 , ul - v0 )  decode:loop 0 , 3 , move 2 - ua , 0 - v0 
[24096] c:0 is:( move 3 , ua - ul ; move ul , ua / 4 ; move ua + 2 , ul )  decode:( move 3 , 3 ; move ua + 3 , 4 ) 
[24097] c:0 is:( move ul , 2 + ul ; move 0 , 4 ; loop 0 , 4 , move ua , 2 )  decode:loop 0 , 4 , move ua + v0 , 0 - 4 
[24098] c:0 is:( move ua , 3 ; move ul , 4 * 2 ; move ul + ul , ua - ul )  decode:( move ua , 3 ; move 3 , 7 ) 
[24099] c:0 is:loop 0 , 3 , ( loop 1 , ul , move 4 , v0 ; move v1 , ul )  decode:loop 0 , 3 , move 4 , 2 * v0 
[24100] c:0 is:( move ua , 4 ; move 3 , ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 4 , 5 + v0 
[24101] c:0 is:( move ua + 3 , 4 / ua ; move ul , ul - ua ; move ul , 2 )  decode:( move 2 , 4 ; move ua + 2 , ul ) 
[24102] c:0 is:( loop 0 , 4 , move v0 , 2 ; move ul - v0 , ul / v0 )  decode:loop 0 , 3 , move 3 , 8 / v0 
[24103] c:0 is:( loop 0 , 4 , move v0 , ua ; move 3 * v0 , ua / v0 )  decode:( move ua , 0 ; move 9 , 2 ) 
[24104] c:0 is:loop 0 , 3 , ( move 3 , v0 ; move ul / v0 , v0 - ul )  decode:loop 0 , 4 , move 3 , 0 - v0 
[24105] c:0 is:( loop 0 , 5 , move v0 , ul - 4 ; move v0 + ul , v0 )  decode:loop 0 , 3 , move 2 - ua , 4 
[24106] c:0 is:( move ul , ul - 3 ; move 4 , ua * ua ; move ua , 2 - ul )  decode:( move 4 , 4 ; move ua + ul , ul ) 
[24107] c:0 is:( move 3 - ul , ul / ua ; move 0 - ul , ul ; move ua , 4 )  decode:( move 2 , ul ; move 7 , 5 ) 
[24108] c:0 is:( move ua + 4 , ul ; move ul - ua , ul / ua ; v0 = 0 )  decode:( move 9 , ul ; move 4 , 4 * 4 ) 
[24109] c:0 is:loop 1 , 3 , ( move 3 + ul , ul ; move v1 + v1 , v1 )  decode:loop 0 , 4 , move 4 , v0 + 4 
[24110] c:0 is:loop 0 , 3 , ( move v0 * v0 , v0 / ua ; move 3 , ul )  decode:loop 0 , 3 , move 4 , 0 - 4 / v0 
[24111] c:0 is:( loop 0 , 5 , move ul , ul ; move v0 , 2 ; move 4 , v0 )  decode:loop 0 , 4 , move 3 , 4 
[24112] c:0 is:( loop 0 , 6 , move v0 , ua - 2 ; move ul , v0 * v0 )  decode:loop 0 , 4 , move ua - 2 , 0 - 9 
[24113] c:0 is:( move 0 , ua * ua ; v0 = 0 ; loop 1 , 3 , move ua , 3 )  decode:( move ua , 3 / 3 ; move ua , 3 ) 
[24114] c:0 is:( loop 0 , 6 , move ua - 4 , v0 + v0 ; move ul , v0 )  decode:loop 0 , 4 , move ua - 3 , v0 + 4 
[24115] c:0 is:( move 3 , ua + ul ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move ua , ua / 3 ; move 9 , 9 ) 
[24116] c:0 is:( loop 0 , 6 , move v0 - ul , 2 ; move v0 , ul - v0 )  decode:loop 0 , 4 , move 5 , 0 - 4 
[24117] c:0 is:( loop 0 , 5 , move v0 + ul , ua / 3 ; move v0 , v0 )  decode:loop 0 , 4 , move 4 + v0 , ua * ua 
[24118] c:0 is:( loop 0 , 4 , move ul + v0 , v0 ; move 4 / v0 , ua )  decode:loop 0 , 3 , move 4 , 3 
[24119] c:0 is:( loop 0 , 4 , move ua / v0 , 4 ; move v0 , v0 + ul )  decode:loop 0 , 3 , move ua - v0 , 7 / 3 
[24120] c:0 is:( loop 0 , 6 , move ul - v0 , 2 - v0 ; move ul , v0 )  decode:loop 0 , 4 , move 3 , v0 + 9 
[24121] c:0 is:( move ul - ua , ul - 2 ; move ua , 2 / ua ; v0 = ua )  decode:loop 0 , 3 , move 3 + v0 , 3 / ua 
[24122] c:0 is:( loop 0 , 6 , move ul , 4 - v0 ; move ua , v0 + v0 )  decode:( move 3 , 0 - 4 ; move ua , 3 ) 
[24123] c:0 is:( ( move ua , ua ; move ua + ul , 2 ) ; move 3 + ul , ul )  decode:( move ua + ul , 2 ; move 8 , 2 ) 
[24124] c:0 is:( move ul , 4 + ul ; move ua - ul , ua + ul ; move 4 , 3 )  decode:( move 5 , 6 ; move 5 , 4 ) 
[24125] c:0 is:( ( move 2 , ua + 2 ; move ul , ua * ua ) ; move ua , ul )  decode:( move 2 , 4 ; move ua + ul , 4 ) 
[24126] c:0 is:( move ul , ul ; loop 0 , 5 , move v0 , v0 ; move 3 , 3 )  decode:loop 0 , 4 , move 3 , v0 + 7 
[24127] c:0 is:( loop 0 , 6 , move v0 - ul , v0 ; move ua , 4 + v0 )  decode:( move ua , 2 ; move ua + ul , 9 ) 
[24128] c:0 is:( ( move ua , ua ; move ua - 2 , ul ) ; move 2 , ul + ul )  decode:( move ua , 0 ; move ua , ul ) 
[24129] c:0 is:( loop 0 , 5 , move v0 / 2 , ul ; move v0 + ul , v0 )  decode:( move 5 , 4 * 3 ; move 5 , 9 ) 
[24130] c:0 is:loop 0 , 3 , ( move v0 , ua ; move 3 , v0 ; v1 = ul )  decode:( move ua , ul ; move ul - ua , 2 ) 
[24131] c:0 is:loop 0 , 3 , ( move ul - 4 , v0 / ua ; move v0 , v0 )  decode:loop 0 , 3 , move 0 - 4 , v0 / 3 
[24132] c:0 is:( move 3 , 4 ; loop 0 , 5 , move v0 , ul ; move ul , v0 )  decode:loop 0 , 4 , move ua - 3 , 4 / v0 
[24133] c:0 is:( move 2 , ul / ua ; loop 0 , 5 , move v0 , v0 * v0 )  decode:loop 0 , 3 , move 4 , 8 / v0 
[24134] c:0 is:( move 3 , 2 ; ( move ua , ua - ul ; move ua , ul + ul ) )  decode:( move 3 , ul ; move ua , 2 ) 
[24135] c:0 is:( loop 0 , 6 , move 4 , v0 + ul ; move v0 , v0 - ul )  decode:loop 0 , 4 , move 0 - ua , 3 + v0 
[24136] c:0 is:( ( move ua , ua ; move ul , ua + ul ) ; move ua , 4 + 3 )  decode:( move ua , 0 ; move 7 , 8 ) 
[24137] c:0 is:( loop 0 , 6 , move ul - v0 , 3 ; move ul - v0 , v0 )  decode:loop 0 , 4 , move v0 - 4 , ul / 3 
[24138] c:0 is:( move ul / 2 , ul ; move ua , 3 + ul ; move 4 , ua * ua )  decode:( move ua , 5 ; move 4 , ua * ua ) 
[24139] c:0 is:( move ua , 2 ; loop 0 , 2 , loop 1 , 3 , move ul - 2 , ul )  decode:( move 8 , ua * ua ; move 3 , 2 ) 
[24140] c:0 is:( move ua , 4 ; move 3 , ul / ua ; move 3 + ul , ua * ua )  decode:( move 9 , 4 ; move 4 , ua * ua ) 
[24141] c:0 is:( loop 0 , 4 , move v0 , 3 * v0 ; move ua , ul / v0 )  decode:( move 3 , 9 ; move ua + 3 , 9 ) 
[24142] c:0 is:( move 3 - ua , 4 - ul ; move ua , ul ; move ua , ua / 3 )  decode:loop 0 , 3 , move v0 - ua , 3 / 3 
[24143] c:0 is:loop 0 , 3 , ( v1 = ul ; move v0 , ua ; move 3 , v1 )  decode:- , loop 0 , 4 , move 3 , ul / 3 
[24144] c:0 is:( v0 = ua - 2 ; move v0 , ul ; move 4 , v0 * v0 )  decode:( move 4 , ul ; move 4 , 4 * 3 ) 
[24145] c:0 is:( move ua , 4 ; loop 0 , 5 , move ul , v0 ; move 4 , v0 )  decode:( move ua , 4 ; move ua + 2 , 8 ) 
[24146] c:0 is:( move ua , 3 ; move 4 - ua , ul ; move ua - ul , ul - 4 )  decode:( move ua + 3 , 0 ; move ua , 2 ) 
[24147] c:0 is:( move ua , ua ; move 3 , ul + ul ; move 3 + ul , ul / 4 )  decode:( move ua , 0 ; move ua , 0 - 2 ) 
[24148] c:0 is:( move ua , 3 * 3 ; move ul , ul + ul ; move ua , ul - 4 )  decode:( move ua , 9 ; move ua , 2 - 3 ) 
[24149] c:0 is:( move 4 - ua , 2 + ul ; move ul , ul ; move ua , 4 / ua )  decode:( move 2 , 2 / 3 ; move ua , 8 ) 
[24150] c:0 is:( ( move ua , ua * ua ; move 2 , ua ) ; move 3 , ua * ua )  decode:( move ua + 2 , 8 ; move 3 , 8 ) 
[24151] c:0 is:( move ul , ua * ua ; move ua - 4 , ua - 3 ; move 4 , ul )  decode:( move 3 , 5 ; move 4 , ul ) 
[24152] c:0 is:( move 3 - 2 , ul ; move ul - ua , ul ; move ua , ul / 3 )  decode:( move ua , 0 - 4 ; move ua , 9 ) 
[24153] c:0 is:( move ua , ua * ua ; move ul , ua / 3 ; move 3 , 4 - ua )  decode:( move ua , ua * ua ; move 3 , 3 ) 
[24154] c:0 is:( move ua , 4 ; ( move ua + ul , ul + ul ; move ua , 2 ) )  decode:loop 0 , 3 , move ua + ul , 4 * 3 0 0 2 / 
[24155] c:0 is:( move ul , ul ; move 2 - ua , 3 ; move ua - ul , ul / 3 )  decode:( move 5 , ul ; move 5 , 4 * 4 ) 
[24156] c:0 is:( loop 0 , 6 , move ul , v0 * v0 ; move v0 , ua + 4 )  decode:( move 3 , 4 * 3 ; move ua , 9 ) 
[24157] c:0 is:loop 0 , 3 , ( v1 = ul - ua ; move v0 + v1 , v1 )  decode:loop 0 , 3 , move 0 - 4 , ul 
[24158] c:0 is:( move ua + ul , ua ; move 3 - ua , ua / 4 ; v0 = ul )  decode:( move ua + ul , 0 ; move 4 , 8 ) 
[24159] c:0 is:( v0 = 3 ; move v0 , v0 ; loop 1 , 4 , move ul , ul )  decode:loop 0 , 4 , move v0 , 2 , 2 
[24160] c:0 is:( move 4 / ua , ua ; loop 0 , 5 , move v0 , v0 * v0 )  decode:loop 0 , 3 , move v0 + 2 , 4 * ua 
[24161] c:0 is:( move ul - ua , ul ; move ul / ua , ul ; move 3 + 3 , 4 )  decode:( move ul - ua , ul ; move ua , 5 ) 
[24162] c:0 is:( move ul / ua , 2 ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move 4 , 9 ; move 9 , 0 - 3 ) 
[24163] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ul , 4 ; v1 = v0 )  decode:loop 0 , 3 , move 2 , v0 + 4 
[24164] c:0 is:( v0 = 4 ; move ua / v0 , 3 ; move v0 , v0 + ul )  decode:( move 2 , 3 ; move 4 , 5 ) 
[24165] c:0 is:( move ua , ul + ul ; loop 0 , 5 , loop 1 , 0 , move 3 , 3 )  decode:0 0 loop 0 , 4 , move 3 , 0 - v0 
[24166] c:0 is:( move ua , ua ; ( move ul , ul ; move 2 - ua , 4 - ua ) )  decode:( move ua , 0 ; move ul - ua , 5 ) 
[24167] c:0 is:( move ua , ua ; move ua - ul , 4 - ul ; move 4 , ul / 2 )  decode:loop 0 , 3 , move 3 + v0 , 0 - 3 
[24168] c:0 is:( move 3 / 4 , ul ; move ul + ul , ua + ul ; move ua , 4 )  decode:( move ua , 9 ; move 2 , 0 - 4 ) 
[24169] c:0 is:( move ul - ua , ul ; ( move 2 , ua * ua ; move 2 , ul ) )  decode:( move 2 - ua , ul ; move 4 , 8 ) 
[24170] c:0 is:( ( v0 = ua - 2 ; move ua , v0 ) ; move v0 , v0 )  decode:( move 4 , 2 - 9 ; move ua , 2 ) 
[24171] c:0 is:( move 3 , ul / ua ; loop 0 , 5 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 3 , 3 - v0 / 4 
[24172] c:0 is:( ( move ua - 2 , 3 ; move ul , ul ) ; move ua + ul , ul )  decode:( move 4 , 3 ; move ua + 2 , 2 ) 
[24173] c:0 is:( move ul + ul , ul / ua ; move ua + ul , 3 ; move 4 , 4 )  decode:( move ua + ul , 0 ; move 4 , 4 ) 
[24174] c:0 is:( move 4 , ul ; move ul - 4 , ua - ul ; move ul , 3 + ul )  decode:( move 4 , ul ; move 4 , 0 - 4 ) 
[24175] c:0 is:( move 3 + ul , 4 ; move ua , 3 ; loop 0 , 2 , move 2 , ul )  decode:loop 0 , 4 , move 3 , 4 / v0 
[24176] c:0 is:( move 3 , ua + 4 ; ( move ul - ua , ul ; move ua , ua ) )  decode:( move 3 , 4 ; move ua , 4 ) 
[24177] c:0 is:( v0 = ua - ul ; loop 1 , 3 , move v0 - v1 , v1 )  decode:( move ua , 0 ; move ua , 0 - 4 ) 
[24178] c:0 is:( move 3 * 2 , ul / 3 ; move ua , ua * ua ; move ul , ul )  decode:( move 8 , 2 / ua ; move ua , 8 ) 
[24179] c:0 is:( move ul - 3 , ua / 3 ; move ul , 4 ; move ua + ul , ul )  decode:( move ua + ul , 4 ; move 2 , 5 ) 
[24180] c:0 is:( ( move ul - ua , 2 ; move ua + ul , ul ) ; move ua , 4 )  decode:loop 0 , 3 , move ua + ul , 2 
[24181] c:0 is:( move ua , ua ; v0 = 4 ; loop 1 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 4 + v0 , 0 - 9 
[24182] c:0 is:( v0 = 2 ; move ua - v0 , ul / v0 ; move 4 , v0 )  decode:( move 4 , 2 / 4 ; move 4 , 2 ) 
[24183] c:0 is:( ( move 2 , 3 + ul ; move ul , ul ) ; move ua - ul , ul )  decode:( move ua - ul , 9 ; move ua , 5 ) 
[24184] c:0 is:( move ua + ul , ua - 3 ; v0 = 4 + 2 ; move v0 , 2 )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[24185] c:0 is:( move 3 , ua * 3 ; loop 0 , 4 , move v0 + ul , ua - 2 )  decode:loop 0 , 4 , move 3 - ua , 0 - 4 
[24186] c:0 is:( loop 0 , 6 , move ul / v0 , v0 ; move v0 , ua / 2 )  decode:( move 2 , 0 ; move ua - ul , 3 ) 
[24187] c:0 is:( move ua , 3 / ua ; ( move 2 , ua + ul ; move ul , ul ) )  decode:( move ua , 2 / 4 ; move 3 , 5 ) 
[24188] c:0 is:( ( move ul , ua + ul ; move 3 , ul ) ; move 3 - ua , ul )  decode:( move 3 , 2 ; move 4 , ua / 3 ) 
[24189] c:0 is:( move ul - ua , ul / ua ; move 3 - ua , ul ; move 4 , 4 )  decode:loop 0 , 3 , move 0 - 4 , 0 - 8 
[24190] c:0 is:( ( move ul , ua ; move ua + ul , ul ) ; move 4 , ua - 3 )  decode:( move ua , ul ; move ua , 4 * 4 ) 
[24191] c:0 is:( ( move ua , 3 ; move 3 + ul , ul ) ; move ul , ua * ua )  decode:( move 4 + 3 , 3 ; move 4 , ul ) 
[24192] c:0 is:( ( move ua , 3 ; move ua + ul , ul - 3 ) ; move ul , ul )  decode:( move 8 , 0 - 3 ; move ua , 2 ) 
[24193] c:0 is:( ( move ua , ua - ul ; move ua , 4 - ul ) ; move 2 , ul )  decode:( move ua , 2 ; move ua , 9 ) 
[24194] c:0 is:( ( move ua , 4 + 3 ; move ul - ua , ul ) ; move ua , ul )  decode:loop 0 , 3 , move ua - v0 , 4 
[24195] c:0 is:( ( move ua - ul , ul ; move ua , 2 ) ; move ua , ul - 4 )  decode:loop 0 , 3 , move  ua , 3 / 3 
[24196] c:0 is:( v0 = ua + ua ; loop 1 , 6 , move v1 , v0 * v0 )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[24197] c:0 is:( loop 1 , 4 , move v1 , ul - v1 ; move ul + v1 , 4 )  decode:loop 0 , 3 , move 3 - ua , v0 * 2 
[24198] c:0 is:( move ul , 3 ; move 0 , 3 ; loop 0 , 3 , move ua , ua / 4 )  decode:loop 0 , 3 , move ua , 2 / 2 0 - 2 
[24199] c:0 is:( move ul , ua ; ( move 3 , ul - 2 ; move ua , ul / ua ) )  decode:( move ul , ul / 4 ; move 9 , ul ) 
[24200] c:0 is:( move ua - 2 , 2 - ua ; loop 0 , 4 , move v0 , ua / 4 )  decode:( move 3 , 2 ; move ua , ul ) 
[24201] c:0 is:( move ul - ua , ul ; ( move 2 - ua , ul ; move 4 , ul ) )  decode:( move 4 , 3 ; move 7 , 0 - 2 ) 
[24202] c:0 is:( ( move ul + ul , 0 ; move ua , ul ) ; move ul , ul / 4 )  decode:( move 2 , 0 ; move 8 , ul ) 
[24203] c:0 is:( ( move 3 , ua ; move ua + ul , ul ) ; move 3 , ul / ua )  decode:( move 3 , 0 ; move 8 , ul ) 
[24204] c:0 is:( move ul - ua , ua ; ( move ua , ua / 4 ; move ul , 2 ) )  decode:( move 5 , 0 ; move ua , 8 ) 
[24205] c:0 is:( ( move ua , ua ; move ua , ua * ua ) ; move ua , 4 * 4 )  decode:loop 0 , 3 , move ua , v0 * 8 
[24206] c:0 is:( move 3 , ul ; ( move ua + ul , 4 ; move ul + ul , ul ) )  decode:( move 3 , 4 ; move 8 , 4 ) 
[24207] c:0 is:( move ua , ul ; ( move 2 , ua / 4 ; move ua + ul , ul ) )  decode:loop 0 , 4 , move 0 - 4 , v0 - 8 
[24208] c:0 is:( ( move ua , ua ; move ul / 3 , 4 ) ; move ua , ua + ul )  decode:( move 5 , 0 ; move ua , 5 ) 
[24209] c:0 is:( move ul - 4 , 4 / ua ; move ul , 4 + ul ; move ua , ul )  decode:loop 0 , 4 , move ua - 4 , 0 - v0 0 
[24210] c:0 is:( move ul , ul / 2 ; ( move 2 , ul ; move ua , ul - ua ) )  decode:( move 2 , 3 / move ua , 4 / 3 ) 
[24211] c:0 is:( ( move ua , ua ; move ul - ua , ul ) ; move 4 * 2 , ul )  decode:( move ua + ul , 2 ; move 8 , ul ) 
[24212] c:0 is:( ( v0 = ul - 3 ; move v0 , v0 ) ; move ua , v0 )  decode:( move 2 , 4 / 6 ; move ua , 5 ) 
[24213] c:0 is:loop 0 , 3 , ( v1 = ul ; move v1 , ul ; move 4 , v1 )  decode:loop 0 , 4 , move 3 - ua , 2 / v0 
[24214] c:0 is:( move ua + ul , ul ; ( move ul , ul / 3 ; move ua , 2 ) )  decode:( move ua , ul ; move ua + 2 , 4 ) 
[24215] c:0 is:( move ul , ul ; move 3 , ul / ua ; move 3 - ua , 4 / ua )  decode:( move 4 , ul ; move 4 , 3 * 5 ) 
[24216] c:0 is:loop 0 , 7 , ( v1 = v0 - ua ; move ul + v1 , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 
[24217] c:0 is:( move ua + ul , 3 + ul ; loop 0 , 6 , move 2 , 4 + v0 )  decode:loop 0 , 4 , move v0 + 2 , 4 * 4 
[24218] c:0 is:( ( move ul - ua , ul ; move ua , 2 / 3 ) ; move ul , ua )  decode:( move 5 , ul ; move ua + ul , 7 ) 
[24219] c:0 is:( move 3 , ua - 3 ; loop 0 , 5 , move ua - 3 , ua - v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 * 4 
[24220] c:0 is:( move ul , ul ; ( move 3 + ul , 4 ; move ua + ul , ul ) )  decode:( move 4 , 5 ; move ua + ul , 4 ) 
[24221] c:0 is:( ( move ul + ul , ua - 4 ; move ua , ul ) ; move ua , 4 )  decode:loop 0 , 4 , move 0 - 3 , v0 - 3 
[24222] c:0 is:loop 0 , 6 , ( v1 = ua / v0 ; move v1 - ua , v0 )  decode:loop 0 , 3 , move ua - ul , 3 * v0 
[24223] c:0 is:( loop 0 , 5 , move ua / 3 , v0 - 2 ; move 2 - ua , ul )  decode:( move ua , 0 - 3 ; move 9 , 4 ) 
[24224] c:0 is:( v0 = ua - ul ; ( move v0 , v0 ; move 4 , v0 ) )  decode:loop 0 , 2 , move ua - 2 , 2 - 3 
[24225] c:0 is:( move ua , ua - 2 ; loop 2 , 3 , loop 3 , 2 , move ua , 4 )  decode:0 0 0 loop 0 , 4 , move ua + ul 0 0 0 0 0 0 , 0 - 4 
[24226] c:0 is:( v0 = ua + ul ; loop 1 , 5 , move v1 , v0 / v1 )  decode:loop 0 , 3 , move 3 + v0 , 9 
[24227] c:0 is:( move ul - ua , ul / ua ; ( move 2 , ul ; move ua , 4 ) )  decode:( move ua , 0 - 3 ; move ua , 9 ) 
[24228] c:0 is:( move ua + ul , 4 - ul ; loop 0 , 6 , move 3 + v0 , 2 )  decode:loop 0 , 4 , move v0 + 4 , 9 
[24229] c:0 is:( v0 = ua + ul ; loop 1 , 5 , move v1 , v1 / v0 )  decode:loop 0 , 4 , move 4 - ua , 2 / 4 
[24230] c:0 is:( v0 = ul - ua ; loop 1 , 7 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 5 loop , 3 
[24231] c:0 is:loop 0 , 7 , ( v1 = ul + v0 ; move ul , v1 + v1 )  decode:loop 0 , 3 , move ua - 4 , 2 / v0 
[24232] c:0 is:( ( move ul , ul ; move ul , ul ) ; move 4 + ul , ul - 2 )  decode:( move ul , 9 ; move ua , 2 / 4 ) 
[24233] c:0 is:( loop 0 , 6 , move v0 , ul ; v1 = ul ; move 3 , v1 )  decode:loop 0 , 4 , move 0 - 4 , 2 * 0 4 
[24234] c:0 is:( v0 = 4 ; move ul , v0 ; loop 1 , 6 , move v0 , ul )  decode:loop 0 , 4 , move ul - ua , 0 - 5 
[24235] c:0 is:( move ul - ua , 4 ; ( move ul , ul / 3 ; move ua , ua ) )  decode:( move ua , 4 ; move ua , 9 ) 
[24236] c:0 is:( move 4 - ua , 3 ; v0 = ul ; loop 1 , 3 , move ua , 2 )  decode:loop 0 , 4 , move v0 - ua , 2 
[24237] c:0 is:( v0 = ul / ua ; loop 1 , 6 , move v1 , v0 + v1 )  decode:( move ua , 2 / 6 ; move ua , 4 ) 
[24238] c:0 is:( ( move ua , ul / ua ; move ua , 4 ) ; move 2 / ua , ul )  decode:( move ua , ul / 6 ; move ua , 4 ) 
[24239] c:0 is:( loop 0 , 9 , v1 = ul ; move 2 , v0 ; move ua , v1 )  decode:( move 2 , ua / ua ; move ua , ul ) 
[24240] c:0 is:( move ul , ul / 2 ; ( move ua , ul ; move 4 - ua , ul ) )  decode:( move ua , 0 - 2 ; move 2 , 4 ) 
[24241] c:0 is:( move ul , 4 ; loop 0 , 3 , ( move 0 , 3 ; move ua , ul ) )  decode:loop 0 , 3 , move ua - v0 , 4 
[24242] c:0 is:loop 0 , 6 , ( v1 = v0 / ua ; move v0 - v1 , ul )  decode:loop 0 , 3 , move 4 , 3 / 3 - v0 
[24243] c:0 is:( move ul , 4 ; ( move ua - ul , ua - ul ; move 4 , ul ) )  decode:( move ua , 3 ; move 4 , ul ) 
[24244] c:0 is:( move 4 , ul ; loop 0 , 3 , move ua , ua - 2 ; v1 = 3 )  decode:0 0 loop 0 , 4 , move ua , 0 - 3 
[24245] c:0 is:loop 0 , 3 , ( v1 = ua ; move 4 , ua + 4 ; move ul , 2 )  decode:loop 0 , 4 , move ua - 3 , 2 / v0 
[24246] c:0 is:( move ul - 2 , 2 ; loop 0 , 3 , move 4 , ul ; v1 = ua )  decode:loop 0 , 3 , move 4 , ua / 3 - v0 
[24247] c:0 is:( move ul - ua , 4 ; ( move ua , ul / ua ; move 4 , ul ) )  decode:( move 5 , ul ; move 9 , 0 - 4 ) 
[24248] c:0 is:( move 2 - ua , 3 / ua ; loop 0 , 5 , move ul , 2 / v0 )  decode:( move 3 , 9 ; move ua - ul , 4 ) 
[24249] c:0 is:( move ul , ua ; ( move ul , ul / ua ; move 3 * 3 , ul ) )  decode:( move 2 , 0 ; move 9 , ul ) 
[24250] c:0 is:( ( move ul , ul / ua ; move 2 , ul ) ; move ul - 4 , ul )  decode:( move 3 , 2 ; move 3 , 0 - 2 ) 
[24251] c:0 is:( ( move ul , ul ; move ua - 4 , 4 / ua ) ; move ua , ul )  decode:( move 3 , 8 ; move ua , ul ) 
[24252] c:0 is:( move 2 / 3 , ul ; loop 0 , 3 , move 3 , ul ; v1 = ua )  decode:loop 0 , 3 , move 3 , v0 - 2 
[24253] c:0 is:( move ul + ul , ua * 2 ; loop 0 , 6 , move 2 , v0 / 4 )  decode:loop 0 , 4 , move ua - 3 , v0 / 2 
[24254] c:0 is:( move 4 + ul , ua ; loop 0 , 5 , move 3 , ul ; v1 = 3 )  decode:loop 0 , 4 , move 4 , v0 * 5 
[24255] c:0 is:loop 0 , 3 , ( v1 = 4 / 3 ; move ua + ul , ul + v1 )  decode:loop 0 , 3 , move ua + ul , 0 - 4 
[24256] c:0 is:( move ua , 4 + 3 ; v0 = 2 ; loop 1 , 6 , move ul , ul )  decode:( move 4 , 5 + 4 ; move ua , 2 ) 
[24257] c:0 is:( move ua / 4 , 4 - ul ; loop 0 , 4 , move 2 , ul / v0 )  decode:loop 0 , 4 , move ua - 4 , v0 - 2 
[24258] c:0 is:( move ua - ul , 4 ; v0 = 4 * 3 ; move 4 , v0 + ul )  decode:( move 5 , 4 ; move 4 , 2 / 3 ) 
[24259] c:0 is:( v0 = 4 + ul ; loop 1 , 6 , move v0 / 3 , ua + ul )  decode:loop 0 , 4 , move 4 - ua , 4 / v0 
[24260] c:0 is:( move ul / ua , 4 * 3 ; loop 0 , 6 , move 4 + ul , v0 )  decode:loop 0 , 4 , move 0 - ua , 4 
[24261] c:0 is:( move 4 , 4 / ua ; v0 = ua ; loop 1 , 5 , move ul , 2 )  decode:( move 2 , ul ; move 4 , 3 * 4 ) 
[24262] c:0 is:( move ua + 2 , ua ; move 0 , ul ; move ua + ul , ua * ua )  decode:( move ua + 2 , 0 ; move 9 , 9 ) 
[24263] c:0 is:( move ua , ul ; move ua + ul , 2 ; move 0 - ua , ua - ul )  decode:loop 0 , 3 , move ua + ul , 2 
[24264] c:0 is:( move ua , ua ; ( v0 = ul ; loop 3 , 4 , move 4 , 3 ) )  decode:loop 0 , 4 , move ul - ua , 3 
[24265] c:0 is:( loop 0 , 2 , move ua + v0 , v0 + ul ; move ul , v0 )  decode:( move ua , ul ; move ua + ul , 2 ) 
[24266] c:0 is:( move ua , ul + ul ; move 0 - ul , 2 + ul ; move ua , ul )  decode:( move 7 , 2 ; move ua , 4 ) 
[24267] c:0 is:( move ua , ua ; move 2 + ul , ua + 3 ; move ua + ul , ul )  decode:( move ua , 0 ; move ua + ul , 4 ) 
[24268] c:0 is:loop 0 , 2 , ( move ul , v0 ; move v0 + ul , ua - v0 )  decode:move 4 , 0 - 3 
[24269] c:0 is:loop 0 , 3 , ( move ul + v0 , v0 ; move ua + v0 , ul )  decode:loop 0 , 4 , move ua + 2 , 0 - v0 
[24270] c:0 is:loop 0 , 3 , ( move ul , ua + v0 ; move v0 - ua , v0 )  decode:loop 0 , 4 , move ul - ua , 2 * v0 
[24271] c:0 is:( move ua , ua + ul ; move ua + ul , 0 - 4 ; move ul , ul )  decode:loop 0 , 4 , move v0 + ul , 0 - 3 
[24272] c:0 is:( loop 0 , 4 , move v0 , ua - v0 ; move ua , ua + v0 )  decode:( move ua , 0 ; move 5 , 3 ) 
[24273] c:0 is:( move ua , ua ; move ua , 2 ; loop 0 , 4 , move v0 , v0 )  decode:loop 0 , 3 , move ua - v0 , 2 * 4 
[24274] c:0 is:( loop 0 , 3 , move ul - ua , ua + v0 ; move v0 , v0 )  decode:loop 0 , 4 , move 0 - 4 , v0 * 3 
[24275] c:0 is:loop 0 , 2 , ( move v0 , v0 ; move ua - ul , ul + v0 )  decode:( move ul - ua , 4 ; move ua , 3 ) 
[24276] c:0 is:( move ul , ua ; loop 0 , 3 , move v0 + ul , v0 + v0 )  decode:loop 0 , 4 , move v0 , v0 + 2 
[24277] c:0 is:( move ua , ua + ul ; move ul , 0 - 2 ; move ua , ul / ua )  decode:( move ua , 0 - 4 ; move ua , 5 ) 
[24278] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ua + v0 , v0 + ul )  decode:( move 9 , ua / 3 ; move ua , ua / ) 3 
[24279] c:0 is:( move ua + ul , ua ; move 2 - ua , ua ; move 4 - ua , ul )  decode:( move ul - ua , 0 ; move 4 , 3 ) 
[24280] c:0 is:( loop 0 , 5 , move ul , v0 ; move v0 + v0 , ua + ua )  decode:( move 2 , 8 ; move ua + 2 , 4 ) 
[24281] c:0 is:loop 0 , 3 , ( move ul + v0 , v0 ; move ul + ul , v0 )  decode:0 0 loop 0 , 4 , move 3 , v0 0 
[24282] c:0 is:( loop 0 , 3 , move v0 + v0 , ul ; move ua , ul - v0 )  decode:( move ul - ua , 2 ; move 5 , 4 ) 
[24283] c:0 is:loop 0 , 2 , ( move ua , 3 ; move v0 , v0 ; move ul , ul )  decode:( move ua , 3 ; move ua + ul , 4 ) 
[24284] c:0 is:( move ua , ua + 3 ; move 4 - ua , ul + ul ; move ua , ua )  decode:( move ua + ul , 3 ; move 4 , ul ) 
[24285] c:0 is:( move ua - ul , 0 - ua ; move ua , ul ; move 4 , ul + ul )  decode:( move 9 , ul ; move ua , 2 ) 
[24286] c:0 is:loop 0 , 3 , ( move ul , ua - v0 ; move v0 + ul , v0 )  decode:( move 3 , 0 ; move ul - ua , 4 ) 
[24287] c:0 is:( move ua , ua ; move ua , 2 - ua ; move ua + ul , ua / 3 )  decode:loop 0 , 3 , move ua + ul , ua / v0 
[24288] c:0 is:( move 2 , ua ; move ua , ul ; loop 0 , 4 , move v0 , v0 )  decode:( move 4 , 0 ; move 8 , 4 * 3 ) 
[24289] c:0 is:( move 2 , ua + ua ; loop 0 , 2 , move ua + ul , v0 + 2 )  decode:( move ua , 0 ; move ua + 2 , 4 ) 
[24290] c:0 is:( move ul , 0 ; move ua + ul , 4 ; move ua - ul , ul + ul )  decode:( move ua + 2 , 4 ; move 5 , 2 ) 
[24291] c:0 is:loop 0 , 3 , ( move v0 , v0 ; move ua - ul , v0 - ua )  decode:loop 0 , 4 , move 5 , 2 
[24292] c:0 is:( loop 0 , 4 , move ul + v0 , v0 + v0 ; move ul , ua )  decode:( move 3 , 9 ; move 8 , 9 + 4 ) 
[24293] c:0 is:( move ua + ul , 0 ; move ul , ua + ul ; move ua , 4 / ua )  decode:( move 8 , 0 ; move ua + ul , 8 ) 
[24294] c:0 is:( loop 0 , 4 , move v0 , ua ; move v0 + ua , ul - v0 )  decode:( move 9 , 0 ; move 5 , 0 - 2 ) 
[24295] c:0 is:( move ua , ua ; loop 0 , 4 , move 2 , ul ; move v0 , v0 )  decode:loop 0 , 4 , move 4 , v0 0 
[24296] c:0 is:( move ul , ul ; loop 0 , 3 , move v0 + v0 , ua - v0 )  decode:( move 4 , 4 / 3 ; move 3 , 4 ) 
[24297] c:0 is:loop 0 , 3 , ( move ul , ul + v0 ; move v0 - ua , v0 )  decode:( move ua + ul , 4 ; move ua , ua move ) 
[24298] c:0 is:( loop 0 , 3 , move ul , ul ; move v0 - ua , v0 + v0 )  decode:( move 2 , 2 ; move ua - ul , 5 ) 
[24299] c:0 is:( move 0 - ua , ul / ua ; move ua , ul / ua ; move ul , 0 )  decode:loop 0 , 2 , move 4 + 2 , 0 - 3 
[24300] c:0 is:( move ul , ul ; loop 0 , 4 , move v0 + ul , v0 + v0 )  decode:( move 5 , 0 - 9 ; move ua , 7 ) 
[24301] c:0 is:( move ul , ul + ul ; loop 0 , 4 , move v0 + v0 , v0 )  decode:loop 0 , 4 , move 3 - ua , v0 - 9 
[24302] c:0 is:( move 3 - ua , ua + ul ; move ua , ul ; move 3 , ul - ua )  decode:( move ua + 2 , ul ; move 3 , 2 ) 
[24303] c:0 is:( move ua , 2 ; move ul , ua ; loop 0 , 5 , move v0 , v0 )  decode:( move 9 , 2 ; move ua - ul , 9 ) 
[24304] c:0 is:loop 0 , 3 , ( move ul - ua , v0 ; move ul - v0 , v0 )  decode:loop 0 , 3 , move ul - ua , v0 / 3 
[24305] c:0 is:( move ua , ul ; move ul , 3 + 2 ; move ul - ua , ul + ul )  decode:( move ua , ul ; move ua - ul , 7 ) 
[24306] c:0 is:( move ua - ul , ua ; loop 0 , 3 , move v0 , v0 * v0 )  decode:( move ua , 0 ; move ua - 4 , 4 ) 
[24307] c:0 is:( move ul , 2 - ua ; move ua , 4 ; move ul - ua , ua + ul )  decode:( move ua , 6 ; move ua , 4 ) 
[24308] c:0 is:( loop 0 , 5 , move v0 + v0 , v0 ; move ul , ua + ul )  decode:( move ua , 4 ; move 4 + 4 , 4 ) 
[24309] c:0 is:( move ul , ua ; move ua + ul , 2 ; move ul - ua , 4 + ul )  decode:( move ua + ul , 2 ; move 5 , 5 ) 
[24310] c:0 is:( move ul - ua , 3 + 2 ; move ul , ua - ul ; move ua , ul )  decode:( move ua , ua * ua ; move 7 , 4 ) 
[24311] c:0 is:( loop 0 , 5 , move v0 , ua - ul ; move ua + v0 , v0 )  decode:loop 0 , 4 , move v0 + 3 , 0 - 0 4 
[24312] c:0 is:( move 3 , ul ; loop 0 , 4 , move v0 , v0 ; move ua , ua )  decode:( move 3 + 4 , 7 ; move 4 , 3 + ) 3 
[24313] c:0 is:loop 0 , 3 , ( move v0 , ul ; move ul + v0 , ul - v0 )  decode:( move 3 , 0 ; move ua + ul , 5 ) 
[24314] c:0 is:( loop 0 , 4 , move v0 , v0 - ul ; move ua + ul , v0 )  decode:( move ua , 8 ; move ua , 0 - 4 ) 
[24315] c:0 is:( loop 0 , 5 , move v0 + ul , v0 ; move ua , ul + v0 )  decode:loop 0 , 4 , move ua , 0 - v0 + 4 
[24316] c:0 is:( move ua , ua - ul ; move 0 , 4 / ua ; move ua , ua * ua )  decode:( move ua , 9 / 2 ; move ua , 4 ) 
[24317] c:0 is:( move ua , ua ; move ul - 3 , ua + ul ; move ua , ua * 3 )  decode:( move ua + ul , 0 ; move 4 , ul ) 
[24318] c:0 is:( loop 0 , 5 , move ua - ul , ua - v0 ; move v0 , v0 )  decode:loop 0 , 4 , move ua , 2 - 3 - v0 
[24319] c:0 is:( loop 0 , 5 , move ul , v0 + v0 ; move v0 - ua , ul )  decode:loop 0 , 3 , move 3 , v0 - 4 
[24320] c:0 is:( loop 0 , 5 , move ul , v0 ; move ua , v0 ; move 2 , ul )  decode:( move 3 , 2 * 5 ; move ua , 4 ) 
[24321] c:0 is:( move 3 - ul , ua ; move ul , ua + ul ; move ua , 2 / ua )  decode:( move 2 , 0 ; move ua + ul , 5 ) 
[24322] c:0 is:( loop 0 , 4 , move v0 , ul - ua ; move v0 , ul - v0 )  decode:( move 3 , 2 ; move ul - ua , 2 ) 
[24323] c:0 is:( move 2 - ua , ua ; move 4 , ul ; move ul - ua , ua - ul )  decode:( move ua + ul , 0 ; move ua , ul ) 
[24324] c:0 is:( loop 0 , 5 , move ul + ul , v0 + v0 ; move v0 , ul )  decode:loop 0 , 4 , move 3 , v0 * 3 
[24325] c:0 is:( loop 0 , 4 , move v0 , ul ; move ua , 4 ; move ua , v0 )  decode:0 loop 0 , 4 , move 2 - ua , ua * 4 
[24326] c:0 is:loop 0 , 3 , ( move ua / v0 , v0 ; move ul , ul + v0 )  decode:loop 0 , 3 , move ua / v0 , ua / 4 
[24327] c:0 is:loop 0 , 3 , ( move ul , ua - v0 ; move v0 * v0 , ul )  decode:( move 2 , 0 ; move ua ; move 4 , ul ) 
[24328] c:0 is:( move ul , 3 * 2 ; move ua + ul , ul ; move ul , ua + ul )  decode:( move ua + ul , 3 ; move 2 , ul ) 
[24329] c:0 is:( move 3 , ua + ul ; move ul , 2 / ua ; move ua , ua * ua )  decode:( move ua , 0 ; move 4 , ua / 3 ) 
[24330] c:0 is:( move ul , ul + ul ; move 3 + 2 , ul ; move ul - ua , ul )  decode:( move 5 , 3 ; move ul - ua , ul ) 
[24331] c:0 is:( move ua - ul , ua ; loop 0 , 4 , move v0 , v0 * v0 )  decode:( move ua , 0 ; move 4 , ua / 4 ) 
[24332] c:0 is:( move ua + ul , ua ; move 3 - ua , ul / 2 ; move ua , ul )  decode:( move ua , 0 ; move 7 , 7 * 4 ) 
[24333] c:0 is:( loop 0 , 4 , move ua / v0 , v0 + ul ; move v0 , ua )  decode:loop 0 , 3 , move ua , ul + v0 
[24334] c:0 is:( move 3 + ul , ua ; move ua + ul , ul ; move ua , ua / 3 )  decode:loop 0 , 3 , move ua + v0 , ua / 3 
[24335] c:0 is:( loop 0 , 5 , move v0 , ul + ul ; move v0 - ua , v0 )  decode:loop 0 , 3 , move ua - 2 , 3 + v0 
[24336] c:0 is:( ( move ua , ul ; move 0 - ua , ul ) ; move ua + ul , ua )  decode:( move ua + ul , ul ; move ua , 6 ) 
[24337] c:0 is:( loop 0 , 5 , move ul , ul - v0 ; move ua + v0 , v0 )  decode:( move 4 , 4 ; move 4 , 0 - 2 ) 
[24338] c:0 is:( move ul , ua ; loop 0 , 4 , move v0 + ul , v0 * v0 )  decode:loop 0 , 3 , move 4 , v0 - 6 
[24339] c:0 is:loop 0 , 3 , ( move v0 - ua , v0 ; move ul , v0 / ua )  decode:loop 0 , 3 , move v0 - ua , ua / 3 
[24340] c:0 is:( move ul , 4 ; move ua + ul , ul ; move 3 - ua , ua + ul )  decode:( move 3 , 6 ; move 8 , 0 - 2 ) 
[24341] c:0 is:( move ul , ul + ul ; move ua , ul ; move 4 + ul , ua - 2 )  decode:( move 2 - ua , ul ; move ua , 2 ) 
[24342] c:0 is:( move ua , 2 ; move ul , ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 4 , ua + v0 * 2 
[24343] c:0 is:( move ul , ul ; move ul - ua , ua + ul ; move 4 + 2 , ul )  decode:( move ul - ua , 2 ; move ua , ul ) 
[24344] c:0 is:loop 0 , 3 , ( move v0 , ul / ua ; move ua - v0 , v0 )  decode:( move 9 , ul / 4 ; move 9 , 2 ) 
[24345] c:0 is:( loop 0 , 4 , move ul , ua - v0 ; move ul - v0 , v0 )  decode:( move 3 , 0 - 2 ; move 3 , 6 ) 
[24346] c:0 is:( move ua , ua * ua ; move ul , 3 ; move ua + ul , 3 - ul )  decode:( move ua , ua * ua ; move ua , 5 ) 
[24347] c:0 is:( move 4 , ua ; move ua , ul ; loop 0 , 5 , move v0 , v0 )  decode:( move 4 , 0 ; move 9 , ua * ua ) 
[24348] c:0 is:( move ul , ul / 3 ; move ua + ul , ua ; move ua - 2 , ul )  decode:loop 0 , 3 , move ua - 2 , v0 - 4 
[24349] c:0 is:( move ul , ul + ul ; loop 0 , 4 , move v0 , v0 * v0 )  decode:( move 3 , ul / 4 ; move 4 , 3 ) 
[24350] c:0 is:( move 3 , ul ; loop 0 , 4 , move ul , ul ; move v0 , v0 )  decode:loop 0 , 3 , move 0 - 3 , ul + v0 
[24351] c:0 is:( loop 0 , 6 , move ul , ua - ul ; move v0 + v0 , v0 )  decode:( move 3 , 4 ; move 4 + 4 , 4 ) 
[24352] c:0 is:( loop 0 , 5 , move ul - v0 , v0 ; move ua - ul , v0 )  decode:loop 0 , 4 , move v0 * 2 , 9 0 0 
[24353] c:0 is:( v0 = ua - 2 ; move v0 - ul , ul ; move v0 , v0 )  decode:( move 4 , ua / 4 ; move 4 , 2 ) 
[24354] c:0 is:( v0 = ul - ua ; move 2 * v0 , v0 ; move ua , v0 )  decode:( move 4 , 2 ; move 4 + 4 , 2 ) 
[24355] c:0 is:( move ua - ul , ul ; loop 0 , 4 , move v0 * v0 , v0 )  decode:( move 9 , 4 ; move ua , 0 - 4 ) 
[24356] c:0 is:( move ua - ul , 4 ; move ul , ul + ul ; move ua , 3 + ul )  decode:( move ua , 9 / 4 ; move 5 , 9 ) 
[24357] c:0 is:( move ul + ul , ua ; loop 0 , 5 , move ul - ua , ul + ul )  decode:loop 0 , 4 , move 5 - ua , 0 - 2 
[24358] c:0 is:( move ua , ua ; move 3 , ua + ul ; move ua - ul , 4 / ua )  decode:( move ua , 0 ; move 8 , 4 / 4 ) 
[24359] c:0 is:( v0 = 4 + ul ; move v0 , v0 ; move ua + ul , v0 )  decode:( move ul - ua , 9 ; move ua , 4 ) 
[24360] c:0 is:( loop 0 , 5 , move ul , v0 * v0 ; move v0 , ua + ul )  decode:( move ua , 9 ; move 3 , 0 - 4 ) 
[24361] c:0 is:( move 0 - ua , ul ; loop 0 , 2 , loop 1 , 2 , move ul , ul )  decode:( move ua , ul ; move 3 , 4 * 3 ) 
[24362] c:0 is:( move 4 + ul , ul ; move ua , ua - 4 ; move ul + ul , ua )  decode:( move ua + 2 , ul ; move 5 , 4 ) 
[24363] c:0 is:( move ul , ua + ul ; move ul - ua , 4 ; move 3 - ua , ul )  decode:( move ua , ua * ua ; move 3 , ul ) 
[24364] c:0 is:( move ua + ul , ul ; loop 0 , 5 , move v0 , v0 * v0 )  decode:( move 9 , ul ; move 4 , 4 + 4 ) 
[24365] c:0 is:( move ul - ua , ua ; loop 0 , 5 , move v0 , v0 * v0 )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[24366] c:0 is:( move ua - ul , 0 - ua ; move ul , ul / 4 ; move ua , ul )  decode:( move 5 , 0 ; move ua , 4 / 3 ) 
[24367] c:0 is:( move ul , ua * ua ; move ua - 2 , ul ; move ua - ul , 4 )  decode:( move ul - ua , 9 ; move 5 , 4 ) 
[24368] c:0 is:( loop 0 , 4 , move v0 , ul / v0 ; move ua + ul , v0 )  decode:( move ua , 9 ; move ua , 3 ) 
[24369] c:0 is:( move ul - ua , ua / 3 ; move ua , ul ; move ua , ua + 4 )  decode:loop 0 , 3 , move ua , v0 + 2 
[24370] c:0 is:( move 2 - ua , ul ; loop 0 , 3 , move ul + v0 , ua + 2 )  decode:loop 0 , 3 , move 3 , 0 - v0 * 4 
[24371] c:0 is:( loop 0 , 6 , move ul + ul , v0 ; move v0 , v0 + ul )  decode:loop 0 , 4 , move 3 - ua , v0 - ul 
[24372] c:0 is:( move ul , ul + ul ; move 2 - ua , 4 ; move ua - ul , ul )  decode:( move 5 , 4 ; move 5 , 0 - 4 ) 
[24373] c:0 is:( loop 0 , 5 , move v0 , v0 / ua ; move ul , ua + v0 )  decode:loop 0 , 4 , move 4 - ua , 2 / v0 
[24374] c:0 is:( move ua - ul , ul ; move ua , ul - 4 ; move 2 , ul - ua )  decode:( move 4 , ul ; move 2 + 4 , 4 ) 
[24375] c:0 is:( move ua , ul / ua ; move 4 , ua + 3 ; move ua + ul , ul )  decode:loop 0 , 3 , move v0 + 4 , ua / 3 
[24376] c:0 is:( loop 0 , 4 , move v0 , ua / v0 ; move ua , ul - v0 )  decode:( move ua , ul / ua ; move 4 , 2 ) 
[24377] c:0 is:( move ua , ua ; loop 0 , 5 , move v0 , 4 ; move v0 , ul )  decode:loop 0 , 4 , move ua , v0 - v0 
[24378] c:0 is:( move 3 , ul - ua ; move ua , ul / 2 ; move ua , ul + ul )  decode:( move 9 , 9 + 5 ; move ua , 2 ) 
[24379] c:0 is:( move 4 , ua - 3 ; move ua , ul ; move ul - ua , ua - ul )  decode:loop 0 , 3 , move ua , v0 - 3 
[24380] c:0 is:( move ul + ul , ua ; loop 0 , 6 , move v0 , v0 * v0 )  decode:loop 0 , 3 , move ua - v0 , ua / 4 
[24381] c:0 is:( move ua , ua ; move ul + ul , ua + ul ; move 4 , ua / 4 )  decode:loop 0 , 4 , move 3 , v0 * 4 
[24382] c:0 is:( move 3 , ul ; move ul , ul - 4 ; move ua + ul , ua - ul )  decode:( move ua + ul , 0 ; move 3 , 4 ) 
[24383] c:0 is:( move ua , ul ; v0 = 0 ; loop 1 , 2 , move 0 - ul , ul )  decode:( move ua , ul ; move 2 , 5 ) 
[24384] c:0 is:( move 3 , ul / ua ; move ua - ul , ul ; move ua , ua + 4 )  decode:loop 0 , 4 , move 4 , ul - v0 * 4 
[24385] c:0 is:( v0 = ua - ul ; move v0 , 3 ; move ua , v0 * v0 )  decode:( move ul - ua , 3 ; move ua , 6 ) 
[24386] c:0 is:( move 2 , ua ; move ua , ul / 2 ; move ul - ua , ul / ua )  decode:loop 0 , 4 , move 3 , 4 + v0 - 4 
[24387] c:0 is:( loop 0 , 5 , move ul + v0 , ua / v0 ; move v0 , ul )  decode:loop 0 , 4 , move 4 , 4 * 3 - v0 
[24388] c:0 is:( move ua , 4 ; v0 = ua + ul ; move v0 , v0 * v0 )  decode:( move ua , 4 ; move ua + ul , 9 ) 
[24389] c:0 is:( move ul , ua / 3 ; move ua + ul , ua * ua ; move ua , 4 )  decode:( move ua + 2 , 4 ; move ua , 4 ) 
[24390] c:0 is:( move ul - 3 , ua ; move ua + ul , ua * ua ; v0 = ul )  decode:( move 2 , ua ; move ua + ul , 5 ) 
[24391] c:0 is:( move ua - 4 , ul ; move ua , ua - ul ; move ua , ua / 3 )  decode:loop 0 , 3 , move ua - ul , v0 - 3 
[24392] c:0 is:( loop 0 , 6 , move ul , ul - v0 ; move v0 + ul , v0 )  decode:( move 3 , ul ; move ua , 4 / 3 ) 
[24393] c:0 is:( move ua , ul / ua ; move 4 - ua , ul ; move ua , ua + 4 )  decode:( move 8 , 2 ; move ua , 0 - 8 ) 
[24394] c:0 is:( move ul , ua / 4 ; move ul , 2 + ul ; move ua + ul , ul )  decode:( move 2 , 0 - 2 ; move 7 , 7 ) 
[24395] c:0 is:( move 3 , ul ; loop 0 , 5 , move v0 , ul ; move ul , v0 )  decode:loop 0 , 4 , move 3 , 2 / v0 
[24396] c:0 is:( move 3 / ua , ul ; move ua , ul ; move ua + ul , 3 - ul )  decode:( move ua , 2 ; move ua + ul , 2 ) 
[24397] c:0 is:( loop 0 , 5 , move v0 , ul / v0 ; move ul , v0 + ua )  decode:( move ua + 2 , 0 ; move 3 , ul ) 
[24398] c:0 is:( move ua - ul , ua ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move ua + 3 , 0 ; move 7 , 8 ) 
[24399] c:0 is:( loop 0 , 6 , move ul , v0 - ul ; move v0 - ul , v0 )  decode:( move 3 , 2 - 3 ; move 3 , 9 ) 
[24400] c:0 is:( loop 0 , 5 , move v0 , ul - v0 ; move v0 , ul / ua )  decode:( move ua , 2 - 3 ; move ua , 9 ) 
[24401] c:0 is:( move ul - ua , ua + 2 ; loop 0 , 6 , move v0 , ua + 2 )  decode:loop 0 , 4 , move v0 + 4 , 0 - 9 
[24402] c:0 is:( loop 0 , 6 , move v0 - ul , v0 ; move v0 / ua , ua )  decode:( move 2 - ua , 0 ; move ua , 5 ) 
[24403] c:0 is:( ( move 2 , ul ; move ua , ua - ul ) ; move ua , ul + ul )  decode:( move ua + ul , 0 ; move ua , 2 ) 
[24404] c:0 is:( loop 0 , 6 , move ul , ul / v0 ; move ua , v0 + v0 )  decode:loop 0 , 3 , move v0 - ua , 4 + 3 
[24405] c:0 is:( move ul - ua , ua - 2 ; loop 0 , 2 , move 4 , v0 + ul )  decode:loop 0 , 2 , move ua - v0 , ua / ua 
[24406] c:0 is:( loop 0 , 5 , move ul - v0 , ul ; move ul , v0 * v0 )  decode:( move 3 , ul ; move 5 , 2 ) 
[24407] c:0 is:( move ua , ua / 2 ; move ul / ua , ul ; move ua + ul , 4 )  decode:( move ua , 0 ; move 7 , 5 ) 
[24408] c:0 is:( move ua , ua ; ( move ua - ul , ua - 3 ; move ua , ul ) )  decode:loop 0 , 3 , move v0 - ua , ua / 3 
[24409] c:0 is:( v0 = ua - ul ; move v0 , 4 ; move ua , v0 * v0 )  decode:( move ul - ua , 7 ; move ua , 6 ) 
[24410] c:0 is:( move 4 , ua ; move ul - ua , ua ; move ua + ul , ul / 4 )  decode:loop 0 , 3 , move 4 + v0 , 0 - 6 
[24411] c:0 is:( loop 0 , 5 , move v0 - ul , v0 ; move ua / v0 , ul )  decode:loop 0 , 4 , move 2 , 3 + 4 - v0 
[24412] c:0 is:( move ua - ul , ua + ua ; ( move 2 , ul ; move ul , ul ) )  decode:( move ua , 0 ; move 3 , 5 ) 
[24413] c:0 is:( loop 0 , 6 , move v0 , ua * ua ; move v0 , ua / v0 )  decode:loop 0 , 4 , move 2 - ua , 9 * v0 
[24414] c:0 is:( move ua , ua - ul ; loop 0 , 6 , loop 1 , 0 , move ua , 2 )  decode:loop 0 , 4 , move 0 - ua , 0 - 2 
[24415] c:0 is:( move 3 - ul , ua ; move ua , ul / 3 ; move ul + ul , ul )  decode:( move ua + ul , 2 ; move 3 , ul ) 
[24416] c:0 is:( v0 = ua - ul ; move 4 , v0 ; move ua , v0 * v0 )  decode:( move 4 , 2 - 3 ; move ua , 9 ) 
[24417] c:0 is:( move 4 , ul ; move ul - 4 , ul ; move ua + ul , ul + ul )  decode:( move ua , ul ; move 9 , ua * ua ) 
[24418] c:0 is:( move 4 + ul , ul / ua ; move ua , ul ; move ua , 3 - ul )  decode:loop 0 , 3 , move v0 + 4 , 3 - 3 
[24419] c:0 is:( move ul , ua - ul ; loop 0 , 6 , move v0 , v0 * v0 )  decode:( move ua , 6 ; move ua + 2 , 4 ) 
[24420] c:0 is:( loop 0 , 6 , move ul - v0 , ul ; move v0 , v0 - ul )  decode:loop 0 , 4 , move 0 - 4 , v0 - 5 
[24421] c:0 is:( move ul , 4 ; move ul + ul , ul + ul ; move 4 , ua - ul )  decode:( move 3 , 2 ; move 4 , 4 ) 
[24422] c:0 is:( move ul + ul , 3 - ul ; loop 0 , 3 , move ua , v0 + 2 )  decode:loop 0 , 3 , move 0 - ua , 4 
[24423] c:0 is:( move ua , ua ; ( move ua - 3 , ua + ul ; move ul , ul ) )  decode:( move ua , 0 ; move 4 , ul ) 
[24424] c:0 is:( move ua + ul , ua + 3 ; loop 0 , 2 , move 2 , ul / v0 )  decode:( move ua + 3 , 3 ; move 3 , 2 ) 
[24425] c:0 is:( move ul , ul ; loop 0 , 6 , move ul - v0 , v0 * v0 )  decode:( move 3 , 4 / 3 ; move ua , 3 ) 
[24426] c:0 is:( loop 0 , 6 , move ul / v0 , v0 ; move ua , ul - v0 )  decode:( move 2 , ua / 4 ; move ua , 4 ) 
[24427] c:0 is:( v0 = ua ; move ua + ul , 0 ; loop 1 , 5 , move ua , 2 )  decode:loop 0 , 4 , move ua + ul , 0 - 0 5 
[24428] c:0 is:( move ua , ua ; loop 0 , 2 , loop 1 , 3 , move 4 , ua * ua )  decode:0 loop 0 , 4 , move 0 - ua , 0 - 4 
[24429] c:0 is:( loop 0 , 6 , move v0 , ua / v0 ; move ul , v0 * ua )  decode:loop 0 , 4 , move 3 ,  2 / 3 
[24430] c:0 is:( ( move ua - ul , ua ; move ul - 3 , ul ) ; move ua , ua )  decode:( move 2 - ua , ul ; move 4 , ul ) 
[24431] c:0 is:( loop 0 , 6 , move ul , v0 * v0 ; move ul - v0 , ul )  decode:loop 0 , 3 , move 3 - ua , 9 
[24432] c:0 is:( loop 0 , 5 , move ul / v0 , ul ; move v0 , ul - v0 )  decode:( move 2 , 0 - 4 ; move 5 , ul ) 
[24433] c:0 is:( loop 0 , 5 , move ul - v0 , ul ; move v0 , ul / v0 )  decode:loop 0 , 3 , move 4 , v0 + 7 
[24434] c:0 is:( move ul , ua * ua ; ( move ua , 2 ; move ul - ua , ul ) )  decode:( move ua , 2 / 4 ; move ua , ul ) 
[24435] c:0 is:( move 2 , ul ; move 3 , ua ; loop 0 , 4 , move ua + ul , 4 )  decode:loop 0 , 4 , move ua + ul , 0 - 8 
[24436] c:0 is:( ( move ua , ua - 4 ; move ul , ul ) ; move ul , ua + ul )  decode:( move ul , 4 / 3 ; move ua , 5 ) 
[24437] c:0 is:( ( move ua , 4 + ul ; move ul , ua ) ; move ua - ul , ul )  decode:( move ua , 5 ; move ua , ul ) 
[24438] c:0 is:( move ul - 4 , ul ; move ul , 0 ; loop 0 , 3 , move 3 , ul )  decode:loop 0 , 4 , move 3 , ul + v0 
[24439] c:0 is:( move ua , ua ; ( move 4 , ul + ul ; move ua - ul , ul ) )  decode:loop 0 , 3 , move ua - ul , 0 - v0 
[24440] c:0 is:( move ua - ul , ua ; ( move ua , 4 ; move ul - ua , ul ) )  decode:loop 0 , 3 , move ul - ua , 4 * v0 
[24441] c:0 is:( move ua , ul + ul ; ( move ul , ul / ua ; move ua , 2 ) )  decode:( move ua + ul , ul ; move ua , ul ) 
[24442] c:0 is:( ( move ua , ul ; move ua - 3 , ul ) ; move ul - ua , ul )  decode:( move ua + 3 , ul ; move 5 , 2 ) 
[24443] c:0 is:( move ua , ua - ul ; move 4 / 2 , ul / ua ; move ul , ul )  decode:loop 0 , 4 , move 2 , 2 / 2 - v0 
[24444] c:0 is:( move 4 , ul / 3 ; move ul - ua , ul + ul ; move ul , ul )  decode:( move 5 , 2 / ua ; move 5 , 2 ) 
[24445] c:0 is:( move 0 - 4 , ua ; move ul , ua ; loop 0 , 5 , move ua , 4 )  decode:loop 0 , 4 , move 2 + ua , 0 - 9 
[24446] c:0 is:( move 3 , ua * ua ; loop 0 , 3 , loop 1 , 2 , move ul , ul )  decode:loop 0 , 3 , move 3 , 9 + v0 
[24447] c:0 is:( move 3 - ua , ua ; v0 = ua ; move v0 - ul , 3 + 3 )  decode:( move 3 , 9 ; move ua - ul , 3 ) 
[24448] c:0 is:( move ua - ul , ua ; loop 0 , ul , loop 1 , 5 , move 2 , 3 )  decode:( move ua , 0 ; move 3 , 4 * 4 ) 
[24449] c:0 is:( move ua , ul ; v0 = ua ; loop 1 , 4 , move 2 , 2 - ua )  decode:( move ua , ul ; move 2 - ua , 5 ) 
[24450] c:0 is:loop 0 , 3 , ( move ua , v0 / 2 ; move ul - 3 , ul - ua )  decode:loop 0 , 4 , move v0 - 7 , 0 - 2 
[24451] c:0 is:( move 2 , ul / ua ; ( move ul , ul ; move ua , ua * ua ) )  decode:( move 3 , ul / 4 ; move ua , 2 ) 
[24452] c:0 is:( move ul - ua , 4 + 3 ; loop 0 , 4 , move ul , v0 + ul )  decode:( move 2 , 8 ; move ua , 0 - 4 ) 
[24453] c:0 is:( move ua , ul / 4 ; ( move ua , ul ; move ua , ua * ua ) )  decode:loop 0 , 3 , move 4 + v0 , 3 - 3 
[24454] c:0 is:( move ul - 2 , ul ; loop 0 , 5 , move 4 + ul , v0 + ul )  decode:loop 0 , 4 , move 4 + v0 , ua / 2 
[24455] c:0 is:( move ua - 4 , ul + ul ; loop 0 , 4 , move 3 - v0 , ul )  decode:( move 5 , 3 ; move 3 , 5 ) 
[24456] c:0 is:( move ul - ua , 3 / ua ; loop 0 , 3 , move ul , 4 + v0 )  decode:( move 2 , 0 ; move ua , 4 / ua ) 
[24457] c:0 is:( move ua , ul / ua ; loop 0 , 6 , loop 1 , 0 , move 3 , ul )  decode:loop 0 , 4 , move 4 + v0 , 0 - 3 
[24458] c:0 is:( move ul + ul , ul ; ( move 4 / ua , ul ; move ua , ul ) )  decode:( move 2 , ul ; move ua , 5 ) 
[24459] c:0 is:( move ua + ul , 4 * 2 ; loop 0 , 3 , move ul / v0 , ul )  decode:( move 2 , 2 ; move 8 , 2 ) 
[24460] c:0 is:( ( move ul , ul ; move ua , 4 ) ; loop 0 , 2 , move ua , 2 )  decode:loop 0 , 4 , move ul - ua , 2 
[24461] c:0 is:( move ua , ul ; ( move ua , ua * ua ; move ul , ul / 4 ) )  decode:( move ua , ul ; move ua + ul , 8 ) 
[24462] c:0 is:( move 4 - 3 , ua * ua ; loop 0 , 6 , move v0 , ua - ul )  decode:loop 0 , 4 , move 0 - 4 , 0 - v0 
[24463] c:0 is:( move ul , 4 / 3 ; move ul , ul ; loop 0 , 3 , move ua , 3 )  decode:loop 0 , 4 , move v0 + 3 , 0 - 3 
[24464] c:0 is:( move 3 , ua ; ( move ua , 2 ; loop 2 , 3 , move ul , ul ) )  decode:( move 4 , ul ; move ua , 0 - 2 ) 
[24465] c:0 is:( move ul - ua , 4 ; v0 = ua * ua ; move 4 , 4 + v0 )  decode:( move 5 , ul ; move 4 , 9 ) 
[24466] c:0 is:( move ua , ul ; v0 = ul ; loop 1 , 5 , move ul - 3 , 2 )  decode:( move ua + ul , ul ; move 9 , 9 ) 
[24467] c:0 is:( ( v0 = ul / 2 ; move v0 - ua , 0 ) ; move ua , ul )  decode:( move 0 - ua , 0 ; move ua , ul ) 
[24468] c:0 is:( loop 0 , 4 , move ul / v0 , 4 ; move ua + ul , ul / 2 )  decode:( move 2 , 8 ; move ua + ul , 4 ) 
[24469] c:0 is:( move 4 - ua , ua ; v0 = 3 ; loop 1 , 5 , move ul , ul )  decode:( move 3 , 0 ; move 4 , 0 - 4 ) 
[24470] c:0 is:( move ua , ua * 2 ; loop 0 , 6 , move 3 , ul ; v1 = ul )  decode:0 0 loop 0 , 4 , move 0 - 5 , v0 
[24471] c:0 is:( move ua , ua / 2 ; ( v0 = ua * ua ; move 2 , v0 ) )  decode:( move ua , 0 ; move 2 , 5 ) 
[24472] c:0 is:( move 3 , 2 ; loop 0 , 6 , move ul + ul , ul ; v1 = ul )  decode:loop 0 , 4 , move ua - 3 , 2 / 8 
[24473] c:0 is:( move ua , ua + 4 ; loop 1 , 5 , move 3 - ul , ul / v1 )  decode:loop 0 , 4 , move 0 - 3 , v0 / 4 
[24474] c:0 is:( move 4 , 4 ; loop 0 , 3 , ( move ul , ua ; move ul , ul ) )  decode:loop 0 , 4 , move 4 - ua , 4 / v0 
[24475] c:0 is:( move ul , ul ; loop 0 , 6 , move 4 , ul - 2 ; v1 = ua )  decode:loop 0 , 4 , move 4 , 2 - 4 * v0 
[24476] c:0 is:( move ul / 3 , ua * 4 ; loop 0 , 5 , move ul - v0 , ul )  decode:( move 3 , 4 ; move 4 , ul ) 
[24477] c:0 is:( move ul , 2 ; ( move 4 , ul ; move ul , ua ; move 4 , 4 ) )  decode:( move ul - ua , 3 ; move 4 , 4 ) 
[24478] c:0 is:( move ul / 4 , ul ; loop 0 , 3 , move 4 , ul ; v1 = ul )  decode:( move 4 , 2 ; move ua + ul , ul ) 
[24479] c:0 is:( ( loop 0 , 4 , move ul , ul ; v1 = ul ) ; move ua , 4 )  decode:( move 3 , 3 ; move ua , 4 / ua ) 
[24480] c:0 is:( move ua , 0 ; move ul + ul , ua * ua ; move ua , ua + ul )  decode:loop 0 , 4 , move 3 - ua , v0 * 4 
[24481] c:0 is:( ( v0 = ul ; loop 1 , 5 , move 3 , ul ) ; move ua , ul )  decode:0 loop 0 , 4 , move 4 , 2 / 3 
[24482] c:0 is:( move 2 - ua , ul + ul ; move ul , ua + ua ; move ua , ul )  decode:( move 4 , 0 - 2 ; move ua , 4 ) 
[24483] c:0 is:( move 2 - ua , ul ; move ul + ul , ua ; move ua , ua + ul )  decode:( move 4 , ul - move 7 , 4 ) 
[24484] c:0 is:( move ua , ua ; loop 0 , 3 , move v0 , ul ; move ua , v0 )  decode:( move ua , ul - 0 ; move ua , 7 ) 
[24485] c:0 is:( move ua + ul , ua ; move ua , ua - 4 ; move ua , ul + ul )  decode:0 0 loop 0 , 4 , move ua , 0 - v0 
[24486] c:0 is:( move ua , ua ; loop 0 , 4 , move v0 , ul ; move ua , v0 )  decode:loop 0 , 4 , move 3 + v0 , 4 / ua 
[24487] c:0 is:( move ua - ul , 2 ; move ua + ul , ua * ua ; move ul , ua )  decode:( move 5 , 2 ; move ua + 3 , 8 ) 
[24488] c:0 is:( move ua , ua + ul ; move ua - ul , ua - 2 ; move ul , ul )  decode:( move ua , ua / 3 ; move ua , 2 ) 
[24489] c:0 is:( move 0 - ua , ua ; move ua , ul / ua ; move ua - ul , ul )  decode:loop 0 , 3 , move ua , v0 - 2 
[24490] c:0 is:( move ua , ua ; move ua , ul + ul ; move ua - ul , 4 - ua )  decode:loop 0 , 4 , move 4 + v0 , 2 * 4 
[24491] c:0 is:( move ua + 3 , ul + ul ; move ul , ul ; move ul , ua + ul )  decode:( move ua + 3 , 2 ; move ul , 2 ) 
[24492] c:0 is:( loop 0 , 4 , move v0 , ul ; move ua , v0 ; move ul , ua )  decode:( move ua , 4 ; move ua , 3 ) 
[24493] c:0 is:( move ua , ua ; move ul - ua , ul - ua ; move 4 - ua , ua )  decode:( move ul - ua , 0 ; move 7 , ul ) 
[24494] c:0 is:( move ul , ua ; move ua + ul , ul / ua ; move ua + ul , 2 )  decode:loop 0 , 3 , move 0 - ua , v0 - 3 
[24495] c:0 is:( v0 = ua * ua ; move ua , v0 ; move ua , v0 + v0 )  decode:( move ua , 0 - 4 ; move ua , 9 ) 
[24496] c:0 is:( move ul - ua , ua ; move ul + ul , ua ; move ua , 4 + ul )  decode:( move 4 , 0 ; move ua + ul , 4 ) 
[24497] c:0 is:( move ua - ul , ul ; move ul - ua , 2 + ul ; move ua , ul )  decode:( move ua + 4 , ul ; move ua , 4 ) 
[24498] c:0 is:( move ul , ua - 3 ; move ua + ul , ul ; move ul - ua , ul )  decode:( move ua , 9 + 2 ; move 5 , 3 ) 
[24499] c:0 is:( move 4 , ua * ua ; move ul - ua , ul ; move ua + ul , ua )  decode:( move ua , ua * ua ; move 5 , 4 ) 
[24500] c:0 is:( move ul - ua , ul ; move ul , 3 + ul ; move ua + ul , ul )  decode:( move ua , 9 ; move ua , 4 / 3 ) 
[24501] c:0 is:( loop 0 , 4 , move ul , ul ; move ul , ua ; move v0 , v0 )  decode:loop 0 , 4 , move 2 , 4 - v0 
[24502] c:0 is:( move ul - ua , ua ; move ul , ul / 2 ; move ua , ua + ul )  decode:( move 5 , 0 - 0 ; move 7 , 8 ) 
[24503] c:0 is:( move ua , ua * ua ; move ul , ua + ul ; move ul - 4 , ua )  decode:( move 3 , 9 ; move ua , 0 - 4 ) 
[24504] c:0 is:( move ua , ua / 2 ; move ua , ua * ua ; move ul , ul + ul )  decode:( move ul - ua , 0 ; move ua , 8 ) 
[24505] c:0 is:( move ul , ua ; move ua , ul ; loop 0 , 5 , move v0 , v0 )  decode:( move ua + ul , 3 + move ua , 9 ) 
[24506] c:0 is:( move ul , ua - 4 ; move ua , ul ; move ul + ul , ul + ul )  decode:( move 2 , 2 ; move ua , 0 - 2 ) 
[24507] c:0 is:( move ua , ua - ul ; move 4 / ua , ul + ul ; move ua , ua )  decode:( move ua , 2 - 3 ; move ua , 2 ) 
[24508] c:0 is:( move ua , ul ; move ul , ul ; loop 0 , 5 , move v0 , v0 )  decode:loop 0 , 4 , move 3 , v0 + 9 
[24509] c:0 is:( move ua + ul , 0 ; v0 = 0 - ua ; move v0 - ul , ul )  decode:( move 7 , ul ; move 7 , ua / 3 ) 
[24510] c:0 is:( move ul - 4 , ua - ul ; move ua , ua - ul ; move ul , ua )  decode:( move 3 , ua / 4 ; move ua , 4 ) 
[24511] c:0 is:( v0 = ua - ul ; move ua , v0 * v0 ; move ua , v0 )  decode:( move ua , 9 ; move ua , ul ) 
[24512] c:0 is:( move ua , ul ; move ua , 2 ; loop 0 , 3 , move ua , 2 + ul )  decode:loop 0 , 4 , move ua , 3 + v0 
[24513] c:0 is:( move ua , ul ; v0 = ua + ul ; move v0 , v0 * v0 )  decode:( move ua , ul ; move ua + ul , 9 ) 
[24514] c:0 is:( move ul - ua , ua - ul ; move ul , ua ; move 4 + ul , ul )  decode:loop 0 , 3 , move v0 - ua , ua / 3 
[24515] c:0 is:( move 4 , ua + ua ; move ul , ul / ua ; move ua , ua * ua )  decode:( move 5 , 0 ; move ua , 2 ) 
[24516] c:0 is:( move ua - ul , ua - ul ; move ul , ua / 3 ; move ua , ul )  decode:( move ua , 0 - 3 ; move ua , 4 ) 
[24517] c:0 is:( move ul , ul ; move ua , ul / 3 ; move ua + ul , ul + ul )  decode:( move ua + ul , 4 ; move ua , 2 ) 
[24518] c:0 is:( loop 0 , 5 , move ul , v0 ; move v0 , ul ; move ul , ul )  decode:( move ua , ua * 4 ; move 2 , 4 ) 
[24519] c:0 is:( move ua - ul , ua - ul ; move ul , ul ; move ul - 4 , ua )  decode:( move ua , 2 - 3 ; move 3 , 4 ) 
[24520] c:0 is:( move ul - ua , ua ; move ua , ul / 3 ; move ua - ul , ul )  decode:loop 0 , 3 , move 2 - ua , v0 - 8 
[24521] c:0 is:( move ul , ul / ua ; move ua , ul ; move ua - ul , 3 + ul )  decode:( move 4 , 2 ; move ua , 0 - 4 ) 
[24522] c:0 is:loop 0 , 2 , ( move ua , ul ; loop 1 , 2 , move ua , ul + ul )  decode:loop 0 , 4 , move 4 + 4 , 4 
[24523] c:0 is:( v0 = ua - ul ; move ul - v0 , v0 ; move v0 , ul )  decode:( move 5 , ua / 3 ; move 5 , ul ) 
[24524] c:0 is:( loop 0 , 3 , move ua - ul , v0 + ua ; move ul , 3 + ul )  decode:loop 0 , 3 , move ua - v0 , v0 
[24525] c:0 is:( move ul - ua , ul ; move ua + ul , ul / ua ; v0 = ua )  decode:( move ua , 0 - 2 ; move ua , 3 ) 
[24526] c:0 is:( ( move ua , ua ; move ua + ul , ua * ua ) ; move ul , ul )  decode:( move ua , 0 ; move ua + ul , 8 ) 
[24527] c:0 is:( move ua - ul , ul + ul ; move ua , 4 / ua ; move ul , ul )  decode:( move 3 - ua , 3 ; move ua , 8 ) 
[24528] c:0 is:( v0 = ul - ua ; move v0 , v0 / ua ; move v0 , ul )  decode:( move 5 , 4 * 4 ; move 5 , ul ) 
[24529] c:0 is:( move ua - ul , 3 / ua ; move ul , ul ; move ua - ul , ul )  decode:( move ua , 3 / ua ; move ua , 2 ) 
[24530] c:0 is:( v0 = ul - ua ; move v0 , ul / v0 ; move ua , v0 )  decode:( move ua , 4 ; move 5 , ua / 3 ) 
[24531] c:0 is:( move ua , ua ; ( move ua - ul , ua * ua ; move ua , ul ) )  decode:loop 0 , 3 , move ul - ua , v0 + 4 
[24532] c:0 is:( ( move ul - ua , ua ; move ua , ua * ua ) ; move ul , ul )  decode:( move ul - ua , 0 ; move ua , 5 ) 
[24533] c:0 is:( move ua , 3 ; move 3 + ul , ul ; loop 0 , 2 , move ul , ul )  decode:( move 4 + 3 , 3 ; move 5 , ul ) 
[24534] c:0 is:( ( move ua , ua * ua ; move ul , ul ) ; move ua , ua * ua )  decode:( move ua , ua * ua ; move ua , 4 ) 
[24535] c:0 is:( move 0 - ua , ua - ul ; loop 0 , 6 , move ul , ul + v0 )  decode:( move ua , 0 - 4 ; move 5 , 9 ) 
[24536] c:0 is:( move ua , ua ; loop 0 , 2 , move ul , ua / 3 ; move 2 , ul )  decode:( move ua , 0 ; move 3 , 0 - 4 ) 
[24537] c:0 is:( ( move ua + ul , ua - ul ; move ul , ul ) ; move ua , ul )  decode:( move ua , ul ; move ua + ul , 2 ) 
[24538] c:0 is:loop 0 , 2 , ( move v0 + ul , 3 - ul ; move ua , ul / ua )  decode:loop 0 , 4 , move 0 - 4 , ua / 3 
[24539] c:0 is:( ( move ua - ul , ua - ul ; move ul , ul ) ; move ua , ul )  decode:( move ul - ua , 2 ; move ua , 2 ) 
[24540] c:0 is:( move ul / ua , ul / ua ; loop 0 , 3 , move 0 - ua , v0 )  decode:loop 0 , 3 , move v0 - ua , 0 - 3 
[24541] c:0 is:loop 0 , 3 , ( move ua , ua ; move ul , ua + 2 ; v2 = ua )  decode:loop 0 , 3 , move ua + ul , 2 * v0 
[24542] c:0 is:( ( move ul - ua , ul ; move ul , ul ) ; move ua , ua - ul )  decode:( move ua , ul ; move ua , 0 - 4 ) 
[24543] c:0 is:( move ua , ul ; v0 = ul ; loop 1 , 3 , move ua , ua - 2 )  decode:loop 0 , 3 , move 0 - ua , 0 - 2 
[24544] c:0 is:( move ua + ul , 4 + ul ; loop 0 , 4 , move v0 - ul , ul )  decode:( move ua + ul , 5 ; move 4 , 4 ) 
[24545] c:0 is:( move ul - ua , ua + 4 ; loop 0 , 5 , move v0 , ul + ul )  decode:loop 0 , 3 , move v0 - ua , 7 / 4 
[24546] c:0 is:( move ua , ul ; move 2 , ul ; loop 0 , 5 , move 3 + ul , ul )  decode:loop 0 , 4 , move 0 - ua , ul / v0 
[24547] c:0 is:( v0 = ua + ul ; loop 1 , 2 , move ul - ua , v0 / ua )  decode:( move 5 , 0 - 4 ; move 5 , ul ) 
[24548] c:0 is:( move ul , ua ; move 3 , ua - 4 ; loop 0 , 4 , move ul , ul )  decode:loop 0 , 4 , move 2 , 4 / 4 - v0 
[24549] c:0 is:( move 2 , ua * ua ; loop 0 , 6 , move ul + ul , ul - v0 )  decode:( move 6 , 9 ; move ua , 0 - 4 ) 
[24550] c:0 is:( move 4 + ul , ul - ua ; loop 0 , 5 , move v0 , ul + ul )  decode:loop 0 , 4 , move v0 - 4 , 4 * 4 
[24551] c:0 is:( move ul , 4 ; ( move ua , 0 ; move ua , 2 ; move ul , ul ) )  decode:( move 8 , 4 ; move ua , 2 ) 
[24552] c:0 is:loop 0 , 2 , ( v1 = ua * ua ; move ua - ul , ul - v1 )  decode:( move 5 , ua / 4 ; move 5 , 7 ) 
[24553] c:0 is:( v0 = ua * 2 ; move ul - 4 , ua ; move ua , ua * v0 )  decode:loop 0 , 4 , move 2 , v0 / 4 
[24554] c:0 is:( ( move ul , ul / ua ; move ul - ua , ul ) ; move ul , ul )  decode:( move 2 , 0 ; move ua - ul , 4 ) 
[24555] c:0 is:( move ua + ul , ua - ul ; loop 0 , 6 , move ul , 3 * v0 )  decode:( move 2 , ul - 3 ; move 8 , 4 ) 
[24556] c:0 is:( move 4 / ua , ul + ul ; v0 = ua + 2 ; move v0 , ul )  decode:( move ua + ul , 3 ; move ul , ul ) 
[24557] c:0 is:( ( move ul , ul ; move 2 , 4 ; move ul , ua ) ; move ua , 2 )  decode:( move 3 , 5 ; move ua , 2 ) 
[24558] c:0 is:( move ua , ul ; ( v0 = 3 - ua ; move v0 - ua , ul ) )  decode:( move ua , ul ; move ua + 3 , 4 ) 
[24559] c:0 is:( move ua , ul / 2 ; v0 = 4 / ua ; move v0 - ua , ul )  decode:( move ua , 9 + 4 ; move 5 , 4 ) 
[24560] c:0 is:( ( move 3 , ul ; move ua , 3 ; move ul , ul ) ; move 3 , ul )  decode:( move ua + ul , 4 ; move 5 , 2 ) 
[24561] c:0 is:( move ua - ul , 4 ; loop 0 , 6 , move ul , ul ; v1 = ul )  decode:loop 0 , 4 , move ua - 4 , 4 * v0 
[24562] c:0 is:( move ua , ua ; move ul , ul + ul ; move ua + ul , ua + ul )  decode:( move ua + 2 , 3 ; move 9 , 4 ) 
[24563] c:0 is:( move ul , ua ; move ua , ua ; loop 0 , 2 , move ua , 2 + ul )  decode:loop 0 , 3 , move v0 - ua , 3 
[24564] c:0 is:( move ul - ua , ua ; move ul + ul , ul / ua ; move ua , ul )  decode:( move 5 , 0 ; move ua , 5 / 4 ) 
[24565] c:0 is:( move ua , ul ; move ul , ul ; loop 0 , 2 , move ua - ul , 3 )  decode:( move ua + ul , 4 ; move ua , 3 ) 
[24566] c:0 is:( move ua + ul , ul ; move ul , ul ; loop 0 , 3 , move 2 , ul )  decode:( move ua + 2 , ul ; move 4 , 2 ) 
[24567] c:0 is:loop 0 , 2 , ( move ul , ul ; move ul , ua + ul ; move 4 , ul )  decode:loop 0 , 4 , move 3 , 3 + 4 - v0 
[24568] c:0 is:( move ul , ua - ul ; loop 0 , 2 , move ua / v0 , ua * ua )  decode:( move ua , 4 + 3 ; move ua , 8 ) 
[24569] c:0 is:( ( move ua , 0 ; move ul , ul ) ; move ul , ul ; move ua , 2 )  decode:( move ua + ul , 0 ; move ua , 4 ) 
[24570] c:0 is:( move ul , ul ; move ua , 3 ; loop 0 , 5 , move ua , ua * ua )  decode:loop 0 , 4 , move 0 - ua , 0 - 8 
[24571] c:0 is:( move ul + ul , ul ; move ua , ul ; loop 0 , 4 , move 3 , ul )  decode:loop 0 , 4 , move 0 - 4 , 2 / 3 
[24572] c:0 is:( move ul , ul ; move ua + ul , ul ; loop 0 , 5 , move 3 , ul )  decode:loop 0 , 4 , move 3 + 3 , 2 
[24573] c:0 is:( loop 0 , 5 , move ul , ul - ua ; move ul - v0 , ua * ua )  decode:( move 3 , 2 ; move 5 , ua * ua ) 
[24574] c:0 is:( move ul - ua , ul ; loop 0 , 4 , loop 1 , ul , move ul , ul )  decode:( move ul - ua , ul ; move 3 , 5 ) 
[24575] c:0 is:( loop 0 , 5 , move ul , ul - ua ; move ua + ul , ua / v0 )  decode:loop 0 , 4 , move 3 , 4 * v0 0 
